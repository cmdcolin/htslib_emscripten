// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}

var ENVIRONMENT_IS_PTHREAD;
if (!ENVIRONMENT_IS_PTHREAD) ENVIRONMENT_IS_PTHREAD = false; // ENVIRONMENT_IS_PTHREAD=true will have been preset in pthread-main.js. Make it false in the main runtime thread.
var PthreadWorkerInit; // Collects together variables that are needed at initialization time for the web workers that host pthreads.
if (!ENVIRONMENT_IS_PTHREAD) PthreadWorkerInit = {};
var currentScriptUrl = (typeof document !== 'undefined' && document.currentScript) ? document.currentScript.src : undefined;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('Unknown runtime environment. Where are we?');
}

if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var functionPointers = new Array(0);

function addFunction(func) {
  for (var i = 0; i < functionPointers.length; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return 2*(1 + i);
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[(index-2)/2] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

if (!ENVIRONMENT_IS_PTHREAD) { // Pthreads have already initialized these variables in src/pthread-main.js, where they were passed to the thread worker at startup time
  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;
}

if (ENVIRONMENT_IS_PTHREAD) {
  staticSealed = true; // The static memory area has been initialized already in the main thread, pthreads skip this.
}

// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - Module['asm'].stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abort('Cannot enlarge memory arrays, since compiling with pthreads support enabled (-s USE_PTHREADS=1).');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');


if (typeof SharedArrayBuffer !== 'undefined') {
  if (!ENVIRONMENT_IS_PTHREAD) buffer = new SharedArrayBuffer(TOTAL_MEMORY);
  // Currently SharedArrayBuffer does not have a slice() operation, so polyfill it in.
  // Adapted from https://github.com/ttaubert/node-arraybuffer-slice, (c) 2014 Tim Taubert <tim@timtaubert.de>
  // arraybuffer-slice may be freely distributed under the MIT license.
  (function (undefined) {
    "use strict";
    function clamp(val, length) {
      val = (val|0) || 0;
      if (val < 0) return Math.max(val + length, 0);
      return Math.min(val, length);
    }
    if (typeof SharedArrayBuffer !== 'undefined' && !SharedArrayBuffer.prototype.slice) {
      SharedArrayBuffer.prototype.slice = function (from, to) {
        var length = this.byteLength;
        var begin = clamp(from, length);
        var end = length;
        if (to !== undefined) end = clamp(to, length);
        if (begin > end) return new ArrayBuffer(0);
        var num = end - begin;
        var target = new ArrayBuffer(num);
        var targetArray = new Uint8Array(target);
        var sourceArray = new Uint8Array(this, begin, num);
        targetArray.set(sourceArray);
        return target;
      };
    }
  })();
} else {
  if (!ENVIRONMENT_IS_PTHREAD) buffer = new ArrayBuffer(TOTAL_MEMORY);
}
updateGlobalBufferViews();

if (typeof Atomics === 'undefined') {
  // Polyfill singlethreaded atomics ops from http://lars-t-hansen.github.io/ecmascript_sharedmem/shmem.html#Atomics.add
  // No thread-safety needed since we don't have multithreading support.
  Atomics = {};
  Atomics['add'] = function(t, i, v) { var w = t[i]; t[i] += v; return w; }
  Atomics['and'] = function(t, i, v) { var w = t[i]; t[i] &= v; return w; }
  Atomics['compareExchange'] = function(t, i, e, r) { var w = t[i]; if (w == e) t[i] = r; return w; }
  Atomics['exchange'] = function(t, i, v) { var w = t[i]; t[i] = v; return w; }
  Atomics['wait'] = function(t, i, v, o) { if (t[i] != v) return 'not-equal'; else return 'timed-out'; }
  Atomics['wake'] = function(t, i, c) { return 0; }
  Atomics['wakeOrRequeue'] = function(t, i1, c, i2, v) { return 0; }
  Atomics['isLockFree'] = function(s) { return true; }
  Atomics['load'] = function(t, i) { return t[i]; }
  Atomics['or'] = function(t, i, v) { var w = t[i]; t[i] |= v; return w; }
  Atomics['store'] = function(t, i, v) { t[i] = v; return v; }
  Atomics['sub'] = function(t, i, v) { var w = t[i]; t[i] -= v; return w; }
  Atomics['xor'] = function(t, i, v) { var w = t[i]; t[i] ^= v; return w; }
}


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
if (!ENVIRONMENT_IS_PTHREAD) {
  HEAP32[0] = 0x63736d65; /* 'emsc' */
} else {
  if (HEAP32[0] !== 0x63736d65) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

if (ENVIRONMENT_IS_PTHREAD) runtimeInitialized = true; // The runtime is hosted in the main thread, and bits shared to pthreads via SharedArrayBuffer. No need to init again in pthread.

function preRun() {
  if (ENVIRONMENT_IS_PTHREAD) return; // PThreads reuse the runtime from the main thread.
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (ENVIRONMENT_IS_PTHREAD) return; // PThreads reuse the runtime from the main thread.
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  // Pass the thread address inside the asm.js scope to store it for fast access that avoids the need for a FFI out.
  __register_pthread_ptr(PThread.mainThreadBlock, /*isMainBrowserThread=*/!ENVIRONMENT_IS_WORKER, /*isMainRuntimeThread=*/1);
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  if (ENVIRONMENT_IS_PTHREAD) return; // PThreads reuse the runtime from the main thread.
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  if (ENVIRONMENT_IS_PTHREAD) return; // PThreads reuse the runtime from the main thread.
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  if (ENVIRONMENT_IS_PTHREAD) return; // PThreads reuse the runtime from the main thread.
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  // We should never get here in pthreads (could no-op this out if called in pthreads, but that might indicate a bug in caller side,
  // so good to be very explicit)
  assert(!ENVIRONMENT_IS_PTHREAD);
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0, $1, $2) { return js_read($0, $1, $2); },
 function($0, $1, $2) { var new_offset = js_seek($0, $1, $2); },
 function($0) { js_close($0); },
 function($0) { console.log('Queued fetch to fetch-worker to process. There are now ' + $0 + ' operations in the queue.') },
 function($0) { Module['printErr']('emscripten_fetch("' + Pointer_stringify($0) + '") failed! Synchronous blocking XHRs and IndexedDB operations are not supported on the main browser thread. Try dropping the EMSCRIPTEN_FETCH_SYNCHRONOUS flag, or run with the linker flag --proxy-to-worker to decouple main C runtime thread from the main browser thread.') },
 function() { console.log('fetch: emscripten_fetch_wait..') },
 function() { console.log('fetch: emscripten_fetch_wait done..') },
 function() { postMessage({ cmd: 'processQueuedMainThreadWork' }) },
 function() { return !!(Module['canvas']); },
 function() { Module['noExitRuntime'] = true },
 function() { throw 'Canceled!' }];

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}



STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 28112;
/* global initializers */ if (!ENVIRONMENT_IS_PTHREAD) __ATINIT__.push({ func: function() { __GLOBAL__sub_I_interface_cpp() } }, { func: function() { ___emscripten_pthread_data_constructor() } });


if (!ENVIRONMENT_IS_PTHREAD) {
memoryInitializer = "data:application/octet-stream;base64,";
}





/* no memory initializer */
var tempDoublePtr;

if (!ENVIRONMENT_IS_PTHREAD) tempDoublePtr = alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }
  Module["___assert_fail"] = ___assert_fail;

  
  
  var PROCINFO={ppid:1,pid:42,sid:42,pgid:42};
  Module["PROCINFO"] = PROCINFO;
  
  
  var __pthread_ptr=0;
  Module["__pthread_ptr"] = __pthread_ptr;
  
  var __pthread_is_main_runtime_thread=0;
  Module["__pthread_is_main_runtime_thread"] = __pthread_is_main_runtime_thread;
  
  var __pthread_is_main_browser_thread=0;
  Module["__pthread_is_main_browser_thread"] = __pthread_is_main_browser_thread; var PThread={MAIN_THREAD_ID:1,mainThreadInfo:{schedPolicy:0,schedPrio:0},unusedWorkerPool:[],runningWorkers:[],initMainThreadBlock:function () {
        if (ENVIRONMENT_IS_PTHREAD) return undefined;
        PThread.mainThreadBlock = allocate(244, "i32*", ALLOC_STATIC);
  
        for (var i = 0; i < 244/4; ++i) HEAPU32[PThread.mainThreadBlock/4+i] = 0;
  
        // The pthread struct has a field that points to itself - this is used as a magic ID to detect whether the pthread_t
        // structure is 'alive'.
        HEAP32[(((PThread.mainThreadBlock)+(24))>>2)]=PThread.mainThreadBlock;
  
        // pthread struct robust_list head should point to itself.
        var headPtr = PThread.mainThreadBlock + 168;
        HEAP32[((headPtr)>>2)]=headPtr;
  
        // Allocate memory for thread-local storage.
        var tlsMemory = allocate(128 * 4, "i32*", ALLOC_STATIC);
        for (var i = 0; i < 128; ++i) HEAPU32[tlsMemory/4+i] = 0;
        Atomics.store(HEAPU32, (PThread.mainThreadBlock + 116 ) >> 2, tlsMemory); // Init thread-local-storage memory array.
        Atomics.store(HEAPU32, (PThread.mainThreadBlock + 52 ) >> 2, PThread.mainThreadBlock); // Main thread ID.
        Atomics.store(HEAPU32, (PThread.mainThreadBlock + 56 ) >> 2, PROCINFO.pid); // Process ID.
  
      },pthreads:{},pthreadIdCounter:2,exitHandlers:null,setThreadStatus:function () {},runExitHandlers:function () {
        if (PThread.exitHandlers !== null) {
          while (PThread.exitHandlers.length > 0) {
            PThread.exitHandlers.pop()();
          }
          PThread.exitHandlers = null;
        }
  
        // Call into the musl function that runs destructors of all thread-specific data.
        if (ENVIRONMENT_IS_PTHREAD && threadInfoStruct) ___pthread_tsd_run_dtors();
      },threadExit:function (exitCode) {
        var tb = _pthread_self();
        if (tb) { // If we haven't yet exited?
          Atomics.store(HEAPU32, (tb + 4 ) >> 2, exitCode);
          // When we publish this, the main thread is free to deallocate the thread object and we are done.
          // Therefore set threadInfoStruct = 0; above to 'release' the object in this worker thread.
          Atomics.store(HEAPU32, (tb + 0 ) >> 2, 1);
  
          // Disable all cancellation so that executing the cleanup handlers won't trigger another JS
          // canceled exception to be thrown.
          Atomics.store(HEAPU32, (tb + 72 ) >> 2, 1/*PTHREAD_CANCEL_DISABLE*/);
          Atomics.store(HEAPU32, (tb + 76 ) >> 2, 0/*PTHREAD_CANCEL_DEFERRED*/);
          PThread.runExitHandlers();
  
          _emscripten_futex_wake(tb + 0, 2147483647);
          __register_pthread_ptr(0, 0, 0); // Unregister the thread block also inside the asm.js scope.
          threadInfoStruct = 0;
          if (ENVIRONMENT_IS_PTHREAD) {
            // This worker no longer owns any WebGL OffscreenCanvases, so transfer them back to parent thread.
            var transferList = [];
  
  
            postMessage({ cmd: 'exit' });
          }
        }
      },threadCancel:function () {
        PThread.runExitHandlers();
        Atomics.store(HEAPU32, (threadInfoStruct + 4 ) >> 2, -1/*PTHREAD_CANCELED*/);
        Atomics.store(HEAPU32, (threadInfoStruct + 0 ) >> 2, 1); // Mark the thread as no longer running.
        _emscripten_futex_wake(threadInfoStruct + 0, 2147483647); // wake all threads
        threadInfoStruct = selfThreadId = 0; // Not hosting a pthread anymore in this worker, reset the info structures to null.
        __register_pthread_ptr(0, 0, 0); // Unregister the thread block also inside the asm.js scope.
        postMessage({ cmd: 'cancelDone' });
      },terminateAllThreads:function () {
        for (var t in PThread.pthreads) {
          var pthread = PThread.pthreads[t];
          if (pthread) {
            PThread.freeThreadData(pthread);
            if (pthread.worker) pthread.worker.terminate();
          }
        }
        PThread.pthreads = {};
        for (var t in PThread.unusedWorkerPool) {
          var pthread = PThread.unusedWorkerPool[t];
          if (pthread) {
            PThread.freeThreadData(pthread);
            if (pthread.worker) pthread.worker.terminate();
          }
        }
        PThread.unusedWorkerPool = [];
        for (var t in PThread.runningWorkers) {
          var pthread = PThread.runningWorkers[t];
          if (pthread) {
            PThread.freeThreadData(pthread);
            if (pthread.worker) pthread.worker.terminate();
          }
        }
        PThread.runningWorkers = [];
      },freeThreadData:function (pthread) {
        if (!pthread) return;
        if (pthread.threadInfoStruct) {
          var tlsMemory = HEAP32[(((pthread.threadInfoStruct)+(116))>>2)];
          HEAP32[(((pthread.threadInfoStruct)+(116))>>2)]=0;
          _free(pthread.tlsMemory);
          _free(pthread.threadInfoStruct);
        }
        pthread.threadInfoStruct = 0;
        if (pthread.allocatedOwnStack && pthread.stackBase) _free(pthread.stackBase);
        pthread.stackBase = 0;
        if (pthread.worker) pthread.worker.pthread = null;
      },receiveObjectTransfer:function (data) {
      },allocateUnusedWorkers:function (numWorkers, onFinishedLoading) {
        if (typeof SharedArrayBuffer === 'undefined') return; // No multithreading support, no-op.
        Module['print']('Preallocating ' + numWorkers + ' workers for a pthread spawn pool.');
  
        var numWorkersLoaded = 0;
        for (var i = 0; i < numWorkers; ++i) {
          var pthreadMainJs = 'pthread-main.js';
          // Allow HTML module to configure the location where the 'pthread-main.js' file will be loaded from,
          // either via Module.locateFile() function, or via Module.pthreadMainPrefixURL string. If neither
          // of these are passed, then the default URL 'pthread-main.js' relative to the main html file is loaded.
          if (typeof Module['locateFile'] === 'function') pthreadMainJs = Module['locateFile'](pthreadMainJs);
          else if (Module['pthreadMainPrefixURL']) pthreadMainJs = Module['pthreadMainPrefixURL'] + pthreadMainJs;
          var worker = new Worker(pthreadMainJs);
  
          worker.onmessage = function(e) {
            var d = e.data;
            // TODO: Move the proxied call mechanism into a queue inside heap.
            if (d.proxiedCall) {
              var returnValue;
              var funcTable = (d.func >= 0) ? proxiedFunctionTable : ASM_CONSTS;
              var funcIdx = (d.func >= 0) ? d.func : (-1 - d.func);
              PThread.currentProxiedOperationCallerThread = worker.pthread.threadInfoStruct; // Sometimes we need to backproxy events to the calling thread (e.g. HTML5 DOM events handlers such as emscripten_set_mousemove_callback()), so keep track in a globally accessible variable about the thread that initiated the proxying.
              switch(d.proxiedCall & 31) {
                case 1: returnValue = funcTable[funcIdx](); break;
                case 2: returnValue = funcTable[funcIdx](d.p0); break;
                case 3: returnValue = funcTable[funcIdx](d.p0, d.p1); break;
                case 4: returnValue = funcTable[funcIdx](d.p0, d.p1, d.p2); break;
                case 5: returnValue = funcTable[funcIdx](d.p0, d.p1, d.p2, d.p3); break;
                case 6: returnValue = funcTable[funcIdx](d.p0, d.p1, d.p2, d.p3, d.p4); break;
                case 7: returnValue = funcTable[funcIdx](d.p0, d.p1, d.p2, d.p3, d.p4, d.p5); break;
                case 8: returnValue = funcTable[funcIdx](d.p0, d.p1, d.p2, d.p3, d.p4, d.p5, d.p6); break;
                case 9: returnValue = funcTable[funcIdx](d.p0, d.p1, d.p2, d.p3, d.p4, d.p5, d.p6, d.p7); break;
                case 10: returnValue = funcTable[funcIdx](d.p0, d.p1, d.p2, d.p3, d.p4, d.p5, d.p6, d.p7, d.p8); break;
                default:
                  if (d.proxiedCall) {
                    Module['printErr']("worker sent an unknown proxied call idx " + d.proxiedCall);
                    console.error(e.data);
                  }
                  break;
              }
              if (d.returnValue) {
                if (d.proxiedCall < 32) HEAP32[d.returnValue >> 2] = returnValue;
                else HEAPF64[d.returnValue >> 3] = returnValue;
              }
              var waitAddress = d.waitAddress;
              if (waitAddress) {
                Atomics.store(HEAP32, waitAddress >> 2, 1);
                Atomics.wake(HEAP32, waitAddress >> 2, 1);
              }
              return;
            }
  
            // If this message is intended to a recipient that is not the main thread, forward it to the target thread.
            if (d.targetThread && d.targetThread != _pthread_self()) {
              var thread = PThread.pthreads[d.targetThread];
              if (thread) {
                thread.worker.postMessage(e.data, d.transferList);
              } else {
                console.error('Internal error! Worker sent a message "' + d.cmd + '" to target pthread ' + d.targetThread + ', but that thread no longer exists!');
              }
              return;
            }
  
            if (d.cmd === 'processQueuedMainThreadWork') {
              // TODO: Must post message to main Emscripten thread in PROXY_TO_WORKER mode.
              _emscripten_main_thread_process_queued_calls();
            } else if (d.cmd === 'spawnThread') {
              __spawn_thread(e.data);
            } else if (d.cmd === 'cleanupThread') {
              __cleanup_thread(d.thread);
            } else if (d.cmd === 'killThread') {
              __kill_thread(d.thread);
            } else if (d.cmd === 'cancelThread') {
              __cancel_thread(d.thread);
            } else if (d.cmd === 'loaded') {
              ++numWorkersLoaded;
              if (numWorkersLoaded === numWorkers && onFinishedLoading) {
                onFinishedLoading();
              }
            } else if (d.cmd === 'print') {
              Module['print']('Thread ' + d.threadId + ': ' + d.text);
            } else if (d.cmd === 'printErr') {
              Module['printErr']('Thread ' + d.threadId + ': ' + d.text);
            } else if (d.cmd === 'alert') {
              alert('Thread ' + d.threadId + ': ' + d.text);
            } else if (d.cmd === 'exit') {
              // currently no-op
            } else if (d.cmd === 'cancelDone') {
              PThread.freeThreadData(worker.pthread);
              worker.pthread = undefined; // Detach the worker from the pthread object, and return it to the worker pool as an unused worker.
              PThread.unusedWorkerPool.push(worker);
              // TODO: Free if detached.
              PThread.runningWorkers.splice(PThread.runningWorkers.indexOf(worker.pthread), 1); // Not a running Worker anymore.
            } else if (d.cmd === 'objectTransfer') {
              PThread.receiveObjectTransfer(e.data);
            } else if (e.data.target === 'setimmediate') {
              worker.postMessage(e.data); // Worker wants to postMessage() to itself to implement setImmediate() emulation.
            } else {
              Module['printErr']("worker sent an unknown command " + d.cmd);
            }
          };
  
          worker.onerror = function(e) {
            Module['printErr']('pthread sent an error! ' + e.filename + ':' + e.lineno + ': ' + e.message);
          };
  
          // Allocate tempDoublePtr for the worker. This is done here on the worker's behalf, since we may need to do this statically
          // if the runtime has not been loaded yet, etc. - so we just use getMemory, which is main-thread only.
          var tempDoublePtr = getMemory(8); // TODO: leaks. Cleanup after worker terminates.
  
          // Ask the new worker to load up the Emscripten-compiled page. This is a heavy operation.
          worker.postMessage({
              cmd: 'load',
              // If the application main .js file was loaded from a Blob, then it is not possible
              // to access the URL of the current script that could be passed to a Web Worker so that
              // it could load up the same file. In that case, developer must either deliver the Blob
              // object in Module['mainScriptUrlOrBlob'], or a URL to it, so that pthread Workers can
              // independently load up the same main application file.
              urlOrBlob: Module['mainScriptUrlOrBlob'] || currentScriptUrl,
              buffer: HEAPU8.buffer,
              tempDoublePtr: tempDoublePtr,
              TOTAL_MEMORY: TOTAL_MEMORY,
              STATICTOP: STATICTOP,
              DYNAMIC_BASE: DYNAMIC_BASE,
              DYNAMICTOP_PTR: DYNAMICTOP_PTR,
              PthreadWorkerInit: PthreadWorkerInit
            });
          PThread.unusedWorkerPool.push(worker);
        }
      },getNewWorker:function () {
        if (PThread.unusedWorkerPool.length == 0) PThread.allocateUnusedWorkers(1);
        if (PThread.unusedWorkerPool.length > 0) return PThread.unusedWorkerPool.pop();
        else return null;
      },busySpinWait:function (msecs) {
        var t = performance.now() + msecs;
        while(performance.now() < t) {
          ;
        }
      }};
  Module["PThread"] = PThread;function ___call_main(argc, argv) {
      return _main(argc, argv);
    }
  Module["___call_main"] = ___call_main;

  
  
  function _emscripten_get_now() { abort() }
  Module["_emscripten_get_now"] = _emscripten_get_now;
  
  function _emscripten_get_now_is_monotonic() {
      // return whether emscripten_get_now is guaranteed monotonic; the Date.now
      // implementation is not :(
      return ENVIRONMENT_IS_NODE || (typeof dateNow !== 'undefined') ||
          ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']);
    }
  Module["_emscripten_get_now_is_monotonic"] = _emscripten_get_now_is_monotonic;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  Module["ERRNO_CODES"] = ERRNO_CODES;
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  Module["___setErrNo"] = ___setErrNo;function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        now = _emscripten_get_now();
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }
  Module["_clock_gettime"] = _clock_gettime;function ___clock_gettime() {
  return _clock_gettime.apply(null, arguments)
  }
  Module["___clock_gettime"] = ___clock_gettime;

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }
  Module["___cxa_allocate_exception"] = ___cxa_allocate_exception;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  Module["__ZSt18uncaught_exceptionv"] = __ZSt18uncaught_exceptionv;
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  Module["EXCEPTIONS"] = EXCEPTIONS;function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }
  Module["___cxa_begin_catch"] = ___cxa_begin_catch;

  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }
  Module["___cxa_free_exception"] = ___cxa_free_exception;function ___cxa_end_catch() {
      // Clear state flag.
      Module['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }
  Module["___cxa_end_catch"] = ___cxa_end_catch;

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }
  Module["___cxa_find_matching_catch_2"] = ___cxa_find_matching_catch_2;

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }
  Module["___cxa_find_matching_catch_3"] = ___cxa_find_matching_catch_3;


  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }
  Module["___resumeException"] = ___resumeException;function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }
  Module["___cxa_find_matching_catch"] = ___cxa_find_matching_catch;function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }
  Module["___cxa_throw"] = ___cxa_throw;

  function ___gxx_personality_v0() {
    }
  Module["___gxx_personality_v0"] = ___gxx_personality_v0;

  function ___lock() {}
  Module["___lock"] = ___lock;

  
    


  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  Module["ERRNO_MESSAGES"] = ERRNO_MESSAGES;
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  Module["PATH"] = PATH;
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  Module["TTY"] = TTY;
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  Module["MEMFS"] = MEMFS;
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  Module["IDBFS"] = IDBFS;
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  Module["NODEFS"] = NODEFS;
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  Module["WORKERFS"] = WORKERFS;
  
  var _stdin; if (ENVIRONMENT_IS_PTHREAD) _stdin = PthreadWorkerInit._stdin; else PthreadWorkerInit._stdin = _stdin = allocate(1, "i32*", ALLOC_STATIC);
  Module["_stdin"] = _stdin;
  
  var _stdout; if (ENVIRONMENT_IS_PTHREAD) _stdout = PthreadWorkerInit._stdout; else PthreadWorkerInit._stdout = _stdout = allocate(1, "i32*", ALLOC_STATIC);
  Module["_stdout"] = _stdout;
  
  var _stderr; if (ENVIRONMENT_IS_PTHREAD) _stderr = PthreadWorkerInit._stderr; else PthreadWorkerInit._stderr = _stderr = allocate(1, "i32*", ALLOC_STATIC);
  Module["_stderr"] = _stderr;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  Module["FS"] = FS;var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // some webservers (azure) does not support subprotocol header
              if (runtimeConfig && null === Module['websocket']['subprotocol']) {
                subProtocols = 'null';
                opts = undefined;
              }
  
              // If node we use the ws library.
              var WebSocketConstructor;
              if (ENVIRONMENT_IS_NODE) {
                WebSocketConstructor = require('ws');
              } else if (ENVIRONMENT_IS_WEB) {
                WebSocketConstructor = window['WebSocket'];
              } else {
                WebSocketConstructor = WebSocket;
              }
              ws = new WebSocketConstructor(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
  
            // An empty ArrayBuffer will emit a pseudo disconnect event
            // as recv/recvmsg will return zero which indicates that a socket
            // has performed a shutdown although the connection has not been disconnected yet.
            if (data.byteLength == 0) {
              return;
            }
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port;
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          if (ArrayBuffer.isView(buffer)) {
            offset += buffer.byteOffset;
            buffer = buffer.buffer;
          }
  
          var data;
          // WebSockets .send() does not allow passing a SharedArrayBuffer, so clone the portion of the SharedArrayBuffer as a regular
          // ArrayBuffer that we want to send.
          if (buffer instanceof SharedArrayBuffer) {
            data = new Uint8Array(new Uint8Array(buffer.slice(offset, offset + length))).buffer;
          } else {
            data = buffer.slice(offset, offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};
  Module["SOCKFS"] = SOCKFS;
  
  
  function __inet_pton4_raw(str) {
      var b = str.split('.');
      for (var i = 0; i < 4; i++) {
        var tmp = Number(b[i]);
        if (isNaN(tmp)) return null;
        b[i] = tmp;
      }
      return (b[0] | (b[1] << 8) | (b[2] << 16) | (b[3] << 24)) >>> 0;
    }
  Module["__inet_pton4_raw"] = __inet_pton4_raw;
  
  function __inet_pton6_raw(str) {
      var words;
      var w, offset, z, i;
      /* http://home.deds.nl/~aeron/regex/ */
      var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i
      var parts = [];
      if (!valid6regx.test(str)) {
        return null;
      }
      if (str === "::") {
        return [0, 0, 0, 0, 0, 0, 0, 0];
      }
      // Z placeholder to keep track of zeros when splitting the string on ":"
      if (str.indexOf("::") === 0) {
        str = str.replace("::", "Z:"); // leading zeros case
      } else {
        str = str.replace("::", ":Z:");
      }
  
      if (str.indexOf(".") > 0) {
        // parse IPv4 embedded stress
        str = str.replace(new RegExp('[.]', 'g'), ":");
        words = str.split(":");
        words[words.length-4] = parseInt(words[words.length-4]) + parseInt(words[words.length-3])*256;
        words[words.length-3] = parseInt(words[words.length-2]) + parseInt(words[words.length-1])*256;
        words = words.slice(0, words.length-2);
      } else {
        words = str.split(":");
      }
  
      offset = 0; z = 0;
      for (w=0; w < words.length; w++) {
        if (typeof words[w] === 'string') {
          if (words[w] === 'Z') {
            // compressed zeros - write appropriate number of zero words
            for (z = 0; z < (8 - words.length+1); z++) {
              parts[w+z] = 0;
            }
            offset = z-1;
          } else {
            // parse hex to field to 16-bit value and write it in network byte-order
            parts[w+offset] = _htons(parseInt(words[w],16));
          }
        } else {
          // parsed IPv4 words
          parts[w+offset] = words[w];
        }
      }
      return [
        (parts[1] << 16) | parts[0],
        (parts[3] << 16) | parts[2],
        (parts[5] << 16) | parts[4],
        (parts[7] << 16) | parts[6]
      ];
    }
  Module["__inet_pton6_raw"] = __inet_pton6_raw;var DNS={address_map:{id:1,addrs:{},names:{}},lookup_name:function (name) {
        // If the name is already a valid ipv4 / ipv6 address, don't generate a fake one.
        var res = __inet_pton4_raw(name);
        if (res !== null) {
          return name;
        }
        res = __inet_pton6_raw(name);
        if (res !== null) {
          return name;
        }
  
        // See if this name is already mapped.
        var addr;
  
        if (DNS.address_map.addrs[name]) {
          addr = DNS.address_map.addrs[name];
        } else {
          var id = DNS.address_map.id++;
          assert(id < 65535, 'exceeded max address mappings of 65535');
  
          addr = '172.29.' + (id & 0xff) + '.' + (id & 0xff00);
  
          DNS.address_map.names[addr] = name;
          DNS.address_map.addrs[name] = addr;
        }
  
        return addr;
      },lookup_addr:function (addr) {
        if (DNS.address_map.names[addr]) {
          return DNS.address_map.names[addr];
        }
  
        return null;
      }};
  Module["DNS"] = DNS;
  
  
  var Sockets={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};
  Module["Sockets"] = Sockets;
  
  function __inet_ntop4_raw(addr) {
      return (addr & 0xff) + '.' + ((addr >> 8) & 0xff) + '.' + ((addr >> 16) & 0xff) + '.' + ((addr >> 24) & 0xff)
    }
  Module["__inet_ntop4_raw"] = __inet_ntop4_raw;
  
  function __inet_ntop6_raw(ints) {
      //  ref:  http://www.ietf.org/rfc/rfc2373.txt - section 2.5.4
      //  Format for IPv4 compatible and mapped  128-bit IPv6 Addresses
      //  128-bits are split into eight 16-bit words
      //  stored in network byte order (big-endian)
      //  |                80 bits               | 16 |      32 bits        |
      //  +-----------------------------------------------------------------+
      //  |               10 bytes               |  2 |      4 bytes        |
      //  +--------------------------------------+--------------------------+
      //  +               5 words                |  1 |      2 words        |
      //  +--------------------------------------+--------------------------+
      //  |0000..............................0000|0000|    IPv4 ADDRESS     | (compatible)
      //  +--------------------------------------+----+---------------------+
      //  |0000..............................0000|FFFF|    IPv4 ADDRESS     | (mapped)
      //  +--------------------------------------+----+---------------------+
      var str = "";
      var word = 0;
      var longest = 0;
      var lastzero = 0;
      var zstart = 0;
      var len = 0;
      var i = 0;
      var parts = [
        ints[0] & 0xffff,
        (ints[0] >> 16),
        ints[1] & 0xffff,
        (ints[1] >> 16),
        ints[2] & 0xffff,
        (ints[2] >> 16),
        ints[3] & 0xffff,
        (ints[3] >> 16)
      ];
  
      // Handle IPv4-compatible, IPv4-mapped, loopback and any/unspecified addresses
  
      var hasipv4 = true;
      var v4part = "";
      // check if the 10 high-order bytes are all zeros (first 5 words)
      for (i = 0; i < 5; i++) {
        if (parts[i] !== 0) { hasipv4 = false; break; }
      }
  
      if (hasipv4) {
        // low-order 32-bits store an IPv4 address (bytes 13 to 16) (last 2 words)
        v4part = __inet_ntop4_raw(parts[6] | (parts[7] << 16));
        // IPv4-mapped IPv6 address if 16-bit value (bytes 11 and 12) == 0xFFFF (6th word)
        if (parts[5] === -1) {
          str = "::ffff:";
          str += v4part;
          return str;
        }
        // IPv4-compatible IPv6 address if 16-bit value (bytes 11 and 12) == 0x0000 (6th word)
        if (parts[5] === 0) {
          str = "::";
          //special case IPv6 addresses
          if(v4part === "0.0.0.0") v4part = ""; // any/unspecified address
          if(v4part === "0.0.0.1") v4part = "1";// loopback address
          str += v4part;
          return str;
        }
      }
  
      // Handle all other IPv6 addresses
  
      // first run to find the longest contiguous zero words
      for (word = 0; word < 8; word++) {
        if (parts[word] === 0) {
          if (word - lastzero > 1) {
            len = 0;
          }
          lastzero = word;
          len++;
        }
        if (len > longest) {
          longest = len;
          zstart = word - longest + 1;
        }
      }
  
      for (word = 0; word < 8; word++) {
        if (longest > 1) {
          // compress contiguous zeros - to produce "::"
          if (parts[word] === 0 && word >= zstart && word < (zstart + longest) ) {
            if (word === zstart) {
              str += ":";
              if (zstart === 0) str += ":"; //leading zeros case
            }
            continue;
          }
        }
        // converts 16-bit words from big-endian to little-endian before converting to hex string
        str += Number(_ntohs(parts[word] & 0xffff)).toString(16);
        str += word < 7 ? ":" : "";
      }
      return str;
    }
  Module["__inet_ntop6_raw"] = __inet_ntop6_raw;function __read_sockaddr(sa, salen) {
      // family / port offsets are common to both sockaddr_in and sockaddr_in6
      var family = HEAP16[((sa)>>1)];
      var port = _ntohs(HEAP16[(((sa)+(2))>>1)]);
      var addr;
  
      switch (family) {
        case 2:
          if (salen !== 16) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = HEAP32[(((sa)+(4))>>2)];
          addr = __inet_ntop4_raw(addr);
          break;
        case 10:
          if (salen !== 28) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = [
            HEAP32[(((sa)+(8))>>2)],
            HEAP32[(((sa)+(12))>>2)],
            HEAP32[(((sa)+(16))>>2)],
            HEAP32[(((sa)+(20))>>2)]
          ];
          addr = __inet_ntop6_raw(addr);
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
  
      return { family: family, addr: addr, port: port };
    }
  Module["__read_sockaddr"] = __read_sockaddr;
  
  function __write_sockaddr(sa, family, addr, port) {
      switch (family) {
        case 2:
          addr = __inet_pton4_raw(addr);
          HEAP16[((sa)>>1)]=family;
          HEAP32[(((sa)+(4))>>2)]=addr;
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          break;
        case 10:
          addr = __inet_pton6_raw(addr);
          HEAP32[((sa)>>2)]=family;
          HEAP32[(((sa)+(8))>>2)]=addr[0];
          HEAP32[(((sa)+(12))>>2)]=addr[1];
          HEAP32[(((sa)+(16))>>2)]=addr[2];
          HEAP32[(((sa)+(20))>>2)]=addr[3];
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          HEAP32[(((sa)+(4))>>2)]=0;
          HEAP32[(((sa)+(24))>>2)]=0;
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
      // kind of lame, but let's match _read_sockaddr's interface
      return {};
    }
  Module["__write_sockaddr"] = __write_sockaddr;
  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};
  Module["SYSCALLS"] = SYSCALLS;function ___syscall102(which, varargs) {if (ENVIRONMENT_IS_PTHREAD) { return _emscripten_sync_run_in_main_thread_2(138, 102, varargs) }
  SYSCALLS.varargs = varargs;
  try {
   // socketcall
      var call = SYSCALLS.get(), socketvararg = SYSCALLS.get();
      // socketcalls pass the rest of the arguments in a struct
      SYSCALLS.varargs = socketvararg;
      switch (call) {
        case 1: { // socket
          var domain = SYSCALLS.get(), type = SYSCALLS.get(), protocol = SYSCALLS.get();
          var sock = SOCKFS.createSocket(domain, type, protocol);
          assert(sock.stream.fd < 64); // XXX ? select() assumes socket fd values are in 0..63
          return sock.stream.fd;
        }
        case 2: { // bind
          var sock = SYSCALLS.getSocketFromFD(), info = SYSCALLS.getSocketAddress();
          sock.sock_ops.bind(sock, info.addr, info.port);
          return 0;
        }
        case 3: { // connect
          var sock = SYSCALLS.getSocketFromFD(), info = SYSCALLS.getSocketAddress();
          sock.sock_ops.connect(sock, info.addr, info.port);
          return 0;
        }
        case 4: { // listen
          var sock = SYSCALLS.getSocketFromFD(), backlog = SYSCALLS.get();
          sock.sock_ops.listen(sock, backlog);
          return 0;
        }
        case 5: { // accept
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var newsock = sock.sock_ops.accept(sock);
          if (addr) {
            var res = __write_sockaddr(addr, newsock.family, DNS.lookup_name(newsock.daddr), newsock.dport);
            assert(!res.errno);
          }
          return newsock.stream.fd;
        }
        case 6: { // getsockname
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          // TODO: sock.saddr should never be undefined, see TODO in websocket_sock_ops.getname
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.saddr || '0.0.0.0'), sock.sport);
          assert(!res.errno);
          return 0;
        }
        case 7: { // getpeername
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          if (!sock.daddr) {
            return -ERRNO_CODES.ENOTCONN; // The socket is not connected.
          }
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.daddr), sock.dport);
          assert(!res.errno);
          return 0;
        }
        case 11: { // sendto
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), length = SYSCALLS.get(), flags = SYSCALLS.get(), dest = SYSCALLS.getSocketAddress(true);
          if (!dest) {
            // send, no address provided
            return FS.write(sock.stream, HEAP8,message, length);
          } else {
            // sendto an address
            return sock.sock_ops.sendmsg(sock, HEAP8,message, length, dest.addr, dest.port);
          }
        }
        case 12: { // recvfrom
          var sock = SYSCALLS.getSocketFromFD(), buf = SYSCALLS.get(), len = SYSCALLS.get(), flags = SYSCALLS.get(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var msg = sock.sock_ops.recvmsg(sock, len);
          if (!msg) return 0; // socket is closed
          if (addr) {
            var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          HEAPU8.set(msg.buffer, buf);
          return msg.buffer.byteLength;
        }
        case 14: { // setsockopt
          return -ERRNO_CODES.ENOPROTOOPT; // The option is unknown at the level indicated.
        }
        case 15: { // getsockopt
          var sock = SYSCALLS.getSocketFromFD(), level = SYSCALLS.get(), optname = SYSCALLS.get(), optval = SYSCALLS.get(), optlen = SYSCALLS.get();
          // Minimal getsockopt aimed at resolving https://github.com/kripken/emscripten/issues/2211
          // so only supports SOL_SOCKET with SO_ERROR.
          if (level === 1) {
            if (optname === 4) {
              HEAP32[((optval)>>2)]=sock.error;
              HEAP32[((optlen)>>2)]=4;
              sock.error = null; // Clear the error (The SO_ERROR option obtains and then clears this field).
              return 0;
            }
          }
          return -ERRNO_CODES.ENOPROTOOPT; // The option is unknown at the level indicated.
        }
        case 16: { // sendmsg
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // read the address and port to send to
          var addr, port;
          var name = HEAP32[((message)>>2)];
          var namelen = HEAP32[(((message)+(4))>>2)];
          if (name) {
            var info = __read_sockaddr(name, namelen);
            if (info.errno) return -info.errno;
            port = info.port;
            addr = DNS.lookup_addr(info.addr) || info.addr;
          }
          // concatenate scatter-gather arrays into one message buffer
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          var view = new Uint8Array(total);
          var offset = 0;
          for (var i = 0; i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            for (var j = 0; j < iovlen; j++) {  
              view[offset++] = HEAP8[(((iovbase)+(j))>>0)];
            }
          }
          // write the buffer
          return sock.sock_ops.sendmsg(sock, view, 0, total, addr, port);
        }
        case 17: { // recvmsg
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // get the total amount of data we can read across all arrays
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          // try to read total data
          var msg = sock.sock_ops.recvmsg(sock, total);
          if (!msg) return 0; // socket is closed
  
          // TODO honor flags:
          // MSG_OOB
          // Requests out-of-band data. The significance and semantics of out-of-band data are protocol-specific.
          // MSG_PEEK
          // Peeks at the incoming message.
          // MSG_WAITALL
          // Requests that the function block until the full amount of data requested can be returned. The function may return a smaller amount of data if a signal is caught, if the connection is terminated, if MSG_PEEK was specified, or if an error is pending for the socket.
  
          // write the source address out
          var name = HEAP32[((message)>>2)];
          if (name) {
            var res = __write_sockaddr(name, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          // write the buffer out to the scatter-gather arrays
          var bytesRead = 0;
          var bytesRemaining = msg.buffer.byteLength;
          for (var i = 0; bytesRemaining > 0 && i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            if (!iovlen) {
              continue;
            }
            var length = Math.min(iovlen, bytesRemaining);
            var buf = msg.buffer.subarray(bytesRead, bytesRead + length);
            HEAPU8.set(buf, iovbase + bytesRead);
            bytesRead += length;
            bytesRemaining -= length;
          }
  
          // TODO set msghdr.msg_flags
          // MSG_EOR
          // End of record was received (if supported by the protocol).
          // MSG_OOB
          // Out-of-band data was received.
          // MSG_TRUNC
          // Normal data was truncated.
          // MSG_CTRUNC
  
          return bytesRead;
        }
        default: abort('unsupported socketcall syscall ' + call);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall102"] = ___syscall102;

  function ___syscall118(which, varargs) {if (ENVIRONMENT_IS_PTHREAD) { return _emscripten_sync_run_in_main_thread_2(138, 118, varargs) }
  SYSCALLS.varargs = varargs;
  try {
   // fsync
      var stream = SYSCALLS.getStreamFromFD();
      return 0; // we can't do anything synchronously; the in-memory FS is already synced to
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall118"] = ___syscall118;

  function ___syscall140(which, varargs) {if (ENVIRONMENT_IS_PTHREAD) { return _emscripten_sync_run_in_main_thread_2(138, 140, varargs) }
  SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall140"] = ___syscall140;

  function ___syscall142(which, varargs) {if (ENVIRONMENT_IS_PTHREAD) { return _emscripten_sync_run_in_main_thread_2(138, 142, varargs) }
  SYSCALLS.varargs = varargs;
  try {
   // newselect
      // readfds are supported,
      // writefds checks socket open status
      // exceptfds not supported
      // timeout is always 0 - fully async
      var nfds = SYSCALLS.get(), readfds = SYSCALLS.get(), writefds = SYSCALLS.get(), exceptfds = SYSCALLS.get(), timeout = SYSCALLS.get();
  
      assert(nfds <= 64, 'nfds must be less than or equal to 64');  // fd sets have 64 bits // TODO: this could be 1024 based on current musl headers
      assert(!exceptfds, 'exceptfds not supported');
  
      var total = 0;
      
      var srcReadLow = (readfds ? HEAP32[((readfds)>>2)] : 0),
          srcReadHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0);
      var srcWriteLow = (writefds ? HEAP32[((writefds)>>2)] : 0),
          srcWriteHigh = (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0);
      var srcExceptLow = (exceptfds ? HEAP32[((exceptfds)>>2)] : 0),
          srcExceptHigh = (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      var dstReadLow = 0,
          dstReadHigh = 0;
      var dstWriteLow = 0,
          dstWriteHigh = 0;
      var dstExceptLow = 0,
          dstExceptHigh = 0;
  
      var allLow = (readfds ? HEAP32[((readfds)>>2)] : 0) |
                   (writefds ? HEAP32[((writefds)>>2)] : 0) |
                   (exceptfds ? HEAP32[((exceptfds)>>2)] : 0);
      var allHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0) |
                    (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0) |
                    (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      function check(fd, low, high, val) {
        return (fd < 32 ? (low & val) : (high & val));
      }
  
      for (var fd = 0; fd < nfds; fd++) {
        var mask = 1 << (fd % 32);
        if (!(check(fd, allLow, allHigh, mask))) {
          continue;  // index isn't in the set
        }
  
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  
        var flags = SYSCALLS.DEFAULT_POLLMASK;
  
        if (stream.stream_ops.poll) {
          flags = stream.stream_ops.poll(stream);
        }
  
        if ((flags & 1) && check(fd, srcReadLow, srcReadHigh, mask)) {
          fd < 32 ? (dstReadLow = dstReadLow | mask) : (dstReadHigh = dstReadHigh | mask);
          total++;
        }
        if ((flags & 4) && check(fd, srcWriteLow, srcWriteHigh, mask)) {
          fd < 32 ? (dstWriteLow = dstWriteLow | mask) : (dstWriteHigh = dstWriteHigh | mask);
          total++;
        }
        if ((flags & 2) && check(fd, srcExceptLow, srcExceptHigh, mask)) {
          fd < 32 ? (dstExceptLow = dstExceptLow | mask) : (dstExceptHigh = dstExceptHigh | mask);
          total++;
        }
      }
  
      if (readfds) {
        HEAP32[((readfds)>>2)]=dstReadLow;
        HEAP32[(((readfds)+(4))>>2)]=dstReadHigh;
      }
      if (writefds) {
        HEAP32[((writefds)>>2)]=dstWriteLow;
        HEAP32[(((writefds)+(4))>>2)]=dstWriteHigh;
      }
      if (exceptfds) {
        HEAP32[((exceptfds)>>2)]=dstExceptLow;
        HEAP32[(((exceptfds)+(4))>>2)]=dstExceptHigh;
      }
      
      return total;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall142"] = ___syscall142;

  function ___syscall145(which, varargs) {if (ENVIRONMENT_IS_PTHREAD) { return _emscripten_sync_run_in_main_thread_2(138, 145, varargs) }
  SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall145"] = ___syscall145;

  function ___syscall146(which, varargs) {if (ENVIRONMENT_IS_PTHREAD) { return _emscripten_sync_run_in_main_thread_2(138, 146, varargs) }
  SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall146"] = ___syscall146;

  function ___syscall194(which, varargs) {if (ENVIRONMENT_IS_PTHREAD) { return _emscripten_sync_run_in_main_thread_2(138, 194, varargs) }
  SYSCALLS.varargs = varargs;
  try {
   // ftruncate64
      var fd = SYSCALLS.get(), zero = SYSCALLS.getZero(), length = SYSCALLS.get64();
      FS.ftruncate(fd, length);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall194"] = ___syscall194;

  function ___syscall195(which, varargs) {if (ENVIRONMENT_IS_PTHREAD) { return _emscripten_sync_run_in_main_thread_2(138, 195, varargs) }
  SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall195"] = ___syscall195;

  function ___syscall197(which, varargs) {if (ENVIRONMENT_IS_PTHREAD) { return _emscripten_sync_run_in_main_thread_2(138, 197, varargs) }
  SYSCALLS.varargs = varargs;
  try {
   // SYS_fstat64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, stream.path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall197"] = ___syscall197;

  function ___syscall221(which, varargs) {if (ENVIRONMENT_IS_PTHREAD) { return _emscripten_sync_run_in_main_thread_2(138, 221, varargs) }
  SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall221"] = ___syscall221;

  function ___syscall3(which, varargs) {if (ENVIRONMENT_IS_PTHREAD) { return _emscripten_sync_run_in_main_thread_2(138, 3, varargs) }
  SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall3"] = ___syscall3;

  function ___syscall33(which, varargs) {if (ENVIRONMENT_IS_PTHREAD) { return _emscripten_sync_run_in_main_thread_2(138, 33, varargs) }
  SYSCALLS.varargs = varargs;
  try {
   // access
      var path = SYSCALLS.getStr(), amode = SYSCALLS.get();
      return SYSCALLS.doAccess(path, amode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall33"] = ___syscall33;

  function ___syscall4(which, varargs) {if (ENVIRONMENT_IS_PTHREAD) { return _emscripten_sync_run_in_main_thread_2(138, 4, varargs) }
  SYSCALLS.varargs = varargs;
  try {
   // write
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall4"] = ___syscall4;

  function ___syscall5(which, varargs) {if (ENVIRONMENT_IS_PTHREAD) { return _emscripten_sync_run_in_main_thread_2(138, 5, varargs) }
  SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall5"] = ___syscall5;

  function ___syscall54(which, varargs) {if (ENVIRONMENT_IS_PTHREAD) { return _emscripten_sync_run_in_main_thread_2(138, 54, varargs) }
  SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall54"] = ___syscall54;

  function ___syscall6(which, varargs) {if (ENVIRONMENT_IS_PTHREAD) { return _emscripten_sync_run_in_main_thread_2(138, 6, varargs) }
  SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall6"] = ___syscall6;

  
  
   
  
   
  
  var cttz_i8; if (ENVIRONMENT_IS_PTHREAD) cttz_i8 = PthreadWorkerInit.cttz_i8; else PthreadWorkerInit.cttz_i8 = cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}
  Module["___unlock"] = ___unlock;

   

  
  var _fetch_work_queue; if (ENVIRONMENT_IS_PTHREAD) _fetch_work_queue = PthreadWorkerInit._fetch_work_queue; else PthreadWorkerInit._fetch_work_queue = _fetch_work_queue = allocate(12, "i32*", ALLOC_STATIC);
  Module["_fetch_work_queue"] = _fetch_work_queue;function __emscripten_get_fetch_work_queue() {
      return _fetch_work_queue;
    }
  Module["__emscripten_get_fetch_work_queue"] = __emscripten_get_fetch_work_queue;

  function _abort() {
      Module['abort']();
    }
  Module["_abort"] = _abort;

  function _atexit(func, arg) {
  if (ENVIRONMENT_IS_PTHREAD) return _emscripten_sync_run_in_browser_thread_ii(1, func, arg);
      warnOnce('atexit() called, but NO_EXIT_RUNTIME is set, so atexits() will not be called. set NO_EXIT_RUNTIME to 0 (see the FAQ)');
      __ATEXIT__.unshift({ func: func, arg: arg });
    }
  Module["_atexit"] = _atexit;

   

   

  var _emscripten_asm_const_int=true;
  Module["_emscripten_asm_const_int"] = _emscripten_asm_const_int;

  
  function _emscripten_conditional_set_current_thread_status_js(expectedStatus, newStatus) {
    }
  Module["_emscripten_conditional_set_current_thread_status_js"] = _emscripten_conditional_set_current_thread_status_js; 

  
  var __main_thread_futex_wait_address; if (ENVIRONMENT_IS_PTHREAD) __main_thread_futex_wait_address = PthreadWorkerInit.__main_thread_futex_wait_address; else PthreadWorkerInit.__main_thread_futex_wait_address = __main_thread_futex_wait_address = allocate(1, "i32*", ALLOC_STATIC);
  Module["__main_thread_futex_wait_address"] = __main_thread_futex_wait_address;function _emscripten_futex_wait(addr, val, timeout) {
      if (addr <= 0 || addr > HEAP8.length || addr&3 != 0) return -22;
  //    dump('futex_wait addr:' + addr + ' by thread: ' + _pthread_self() + (ENVIRONMENT_IS_PTHREAD?'(pthread)':'') + '\n');
      if (ENVIRONMENT_IS_WORKER) {
        var ret = Atomics.wait(HEAP32, addr >> 2, val, timeout);
  //    dump('futex_wait done by thread: ' + _pthread_self() + (ENVIRONMENT_IS_PTHREAD?'(pthread)':'') + '\n');
        if (ret === 'timed-out') return -110;
        if (ret === 'not-equal') return -11;
        if (ret === 'ok') return 0;
        throw 'Atomics.wait returned an unexpected value ' + ret;
      } else {
        // Atomics.wait is not available in the main browser thread, so simulate it via busy spinning.
        var loadedVal = Atomics.load(HEAP32, addr >> 2);
        if (val != loadedVal) return -11;
  
        var tNow = performance.now();
        var tEnd = tNow + timeout;
  
  
        // Register globally which address the main thread is simulating to be waiting on. When zero, main thread is not waiting on anything,
        // and on nonzero, the contents of address pointed by __main_thread_futex_wait_address tell which address the main thread is simulating its wait on.
        Atomics.store(HEAP32, __main_thread_futex_wait_address >> 2, addr);
        var ourWaitAddress = addr; // We may recursively re-enter this function while processing queued calls, in which case we'll do a spurious wakeup of the older wait operation.
        while (addr == ourWaitAddress) {
          tNow = performance.now();
          if (tNow > tEnd) {
            return -110;
          }
          _emscripten_main_thread_process_queued_calls(); // We are performing a blocking loop here, so must pump any pthreads if they want to perform operations that are proxied.
          addr = Atomics.load(HEAP32, __main_thread_futex_wait_address >> 2); // Look for a worker thread waking us up.
        }
        return 0;
      }
    }
  Module["_emscripten_futex_wait"] = _emscripten_futex_wait;

  function _emscripten_futex_wake(addr, count) {
      if (addr <= 0 || addr > HEAP8.length || addr&3 != 0 || count < 0) return -22;
      if (count == 0) return 0;
  //    dump('futex_wake addr:' + addr + ' by thread: ' + _pthread_self() + (ENVIRONMENT_IS_PTHREAD?'(pthread)':'') + '\n');
  
      // See if main thread is waiting on this address? If so, wake it up by resetting its wake location to zero.
      // Note that this is not a fair procedure, since we always wake main thread first before any workers, so
      // this scheme does not adhere to real queue-based waiting.
      var mainThreadWaitAddress = Atomics.load(HEAP32, __main_thread_futex_wait_address >> 2);
      var mainThreadWoken = 0;
      if (mainThreadWaitAddress == addr) {
        var loadedAddr = Atomics.compareExchange(HEAP32, __main_thread_futex_wait_address >> 2, mainThreadWaitAddress, 0);
        if (loadedAddr == mainThreadWaitAddress) {
          --count;
          mainThreadWoken = 1;
          if (count <= 0) return 1;
        }
      }
  
      // Wake any workers waiting on this address.
      var ret = Atomics.wake(HEAP32, addr >> 2, count);
      if (ret >= 0) return ret + mainThreadWoken;
      throw 'Atomics.wake returned an unexpected value ' + ret;
    }
  Module["_emscripten_futex_wake"] = _emscripten_futex_wake;

  function _emscripten_futex_wake_or_requeue(addr, count, addr2, cmpValue) {
      if (addr <= 0 || addr2 <= 0 || addr >= HEAP8.length || addr2 >= HEAP8.length || count < 0
        || addr&3 != 0 || addr2&3 != 0) {
        return -22;
      }
  
      // See if main thread is waiting on this address? If so, wake it up by resetting its wake location to zero,
      // or move it to wait on addr2. Note that this is not a fair procedure, since we always wake main thread first before
      // any workers, so this scheme does not adhere to real queue-based waiting.
      var mainThreadWaitAddress = Atomics.load(HEAP32, __main_thread_futex_wait_address >> 2);
      var mainThreadWoken = 0;
      if (mainThreadWaitAddress == addr) {
        // Check cmpValue precondition before taking any action.
        var val1 = Atomics.load(HEAP32, addr >> 2);
        if (val1 != cmpValue) return -11;
  
        // If we are actually waking any waiters, then new main thread wait location is reset, otherwise requeue it to wait on addr2.
        var newMainThreadWaitAddress = (count > 0) ? 0 : addr2;
        var loadedAddr = Atomics.compareExchange(HEAP32, __main_thread_futex_wait_address >> 2, mainThreadWaitAddress, newMainThreadWaitAddress);
        if (loadedAddr == mainThreadWaitAddress && count > 0) {
          --count; // Main thread was woken, so one less workers to wake up.
          mainThreadWoken = 1;
        }
      }
  
      // Wake any workers waiting on this address.
      var ret = Atomics.wakeOrRequeue(HEAP32, addr >> 2, count, addr2 >> 2, cmpValue);
      if (ret == Atomics.NOTEQUAL) return -11;
      if (ret >= 0) return ret + mainThreadWoken;
      throw 'Atomics.wakeOrRequeue returned an unexpected value ' + ret;
    }
  Module["_emscripten_futex_wake_or_requeue"] = _emscripten_futex_wake_or_requeue;


  function _emscripten_has_threading_support() {
      return typeof SharedArrayBuffer !== 'undefined';
    }
  Module["_emscripten_has_threading_support"] = _emscripten_has_threading_support;

   

   

  
  function _emscripten_set_current_thread_status_js(newStatus) {
    }
  Module["_emscripten_set_current_thread_status_js"] = _emscripten_set_current_thread_status_js; 

  
  function _emscripten_set_thread_name_js(threadId, name) {
    }
  Module["_emscripten_set_thread_name_js"] = _emscripten_set_thread_name_js; 

  
  var Fetch={attr_t_offset_requestMethod:0,attr_t_offset_userData:32,attr_t_offset_onsuccess:36,attr_t_offset_onerror:40,attr_t_offset_onprogress:44,attr_t_offset_attributes:48,attr_t_offset_timeoutMSecs:52,attr_t_offset_withCredentials:56,attr_t_offset_destinationPath:60,attr_t_offset_userName:64,attr_t_offset_password:68,attr_t_offset_requestHeaders:72,attr_t_offset_overriddenMimeType:76,attr_t_offset_requestData:80,attr_t_offset_requestDataSize:84,fetch_t_offset_id:0,fetch_t_offset_userData:4,fetch_t_offset_url:8,fetch_t_offset_data:12,fetch_t_offset_numBytes:16,fetch_t_offset_dataOffset:24,fetch_t_offset_totalBytes:32,fetch_t_offset_readyState:40,fetch_t_offset_status:42,fetch_t_offset_statusText:44,fetch_t_offset___proxyState:108,fetch_t_offset___attributes:112,xhrs:[],worker:undefined,dbInstance:undefined,setu64:function (addr, val) {
      HEAPU32[addr >> 2] = val;
      HEAPU32[addr + 4 >> 2] = (val / 4294967296)|0;
    },openDatabase:function (dbname, dbversion, onsuccess, onerror) {
      try {
        var openRequest = indexedDB.open(dbname, dbversion);
      } catch (e) { return onerror(e); }
  
      openRequest.onupgradeneeded = function(event) {
        var db = event.target.result;
        if (db.objectStoreNames.contains('FILES')) {
          db.deleteObjectStore('FILES');
        }
        db.createObjectStore('FILES');
      };
      openRequest.onsuccess = function(event) { onsuccess(event.target.result); };
      openRequest.onerror = function(error) { onerror(error); };
    },initFetchWorker:function () {
      var stackSize = 128*1024;
      var stack = allocate(stackSize>>2, "i32*", ALLOC_DYNAMIC);
      Fetch.worker.postMessage({cmd: 'init', TOTAL_MEMORY: TOTAL_MEMORY, DYNAMICTOP_PTR: DYNAMICTOP_PTR, STACKTOP: stack, STACK_MAX: stack + stackSize, queuePtr: _fetch_work_queue, buffer: HEAPU8.buffer});
    },staticInit:function () {
      var isMainThread = (typeof ENVIRONMENT_IS_FETCH_WORKER === 'undefined' && !ENVIRONMENT_IS_PTHREAD);
  
      var onsuccess = function(db) {
        Fetch.dbInstance = db;
  
        if (isMainThread) {
          if (typeof SharedArrayBuffer !== 'undefined') Fetch.initFetchWorker();
          removeRunDependency('library_fetch_init');
        }
      };
      var onerror = function() {
        Fetch.dbInstance = false;
  
        if (isMainThread) {
          if (typeof SharedArrayBuffer !== 'undefined') Fetch.initFetchWorker();
          removeRunDependency('library_fetch_init');
        }
      };
      Fetch.openDatabase('emscripten_filesystem', 1, onsuccess, onerror);
  
      if (isMainThread) {
        addRunDependency('library_fetch_init');
  
        var fetchJs = 'fetch-worker.js';
        // Allow HTML module to configure the location where the 'pthread-main.js' file will be loaded from,
        // either via Module.locateFile() function, or via Module.pthreadMainPrefixURL string. If neither
        // of these are passed, then the default URL 'pthread-main.js' relative to the main html file is loaded.
        if (typeof Module['locateFile'] === 'function') fetchJs = Module['locateFile'](fetchJs);
        else if (Module['pthreadMainPrefixURL']) fetchJs = Module['pthreadMainPrefixURL'] + fetchJs;
        Fetch.worker = new Worker(fetchJs);
        Fetch.worker.onmessage = function(e) {
          Module['print']('fetch-worker sent a message: ' + e.filename + ':' + e.lineno + ': ' + e.message);
        };
        Fetch.worker.onerror = function(e) {
          Module['printErr']('fetch-worker sent an error! ' + e.filename + ':' + e.lineno + ': ' + e.message);
        };
      }
    }};
  Module["Fetch"] = Fetch;
  
  function __emscripten_fetch_xhr(fetch, onsuccess, onerror, onprogress) {
    var url = HEAPU32[fetch + Fetch.fetch_t_offset_url >> 2];
    if (!url) {
      onerror(fetch, 0, 'no url specified!');
      return;
    }
    var url_ = Pointer_stringify(url);
  
    var fetch_attr = fetch + Fetch.fetch_t_offset___attributes;
    var requestMethod = Pointer_stringify(fetch_attr);
    if (!requestMethod) requestMethod = 'GET';
    var userData = HEAPU32[fetch_attr + Fetch.attr_t_offset_userData >> 2];
    var fetchAttributes = HEAPU32[fetch_attr + Fetch.attr_t_offset_attributes >> 2];
    var timeoutMsecs = HEAPU32[fetch_attr + Fetch.attr_t_offset_timeoutMSecs >> 2];
    var withCredentials = !!HEAPU32[fetch_attr + Fetch.attr_t_offset_withCredentials >> 2];
    var destinationPath = HEAPU32[fetch_attr + Fetch.attr_t_offset_destinationPath >> 2];
    var userName = HEAPU32[fetch_attr + Fetch.attr_t_offset_userName >> 2];
    var password = HEAPU32[fetch_attr + Fetch.attr_t_offset_password >> 2];
    var requestHeaders = HEAPU32[fetch_attr + Fetch.attr_t_offset_requestHeaders >> 2];
    var overriddenMimeType = HEAPU32[fetch_attr + Fetch.attr_t_offset_overriddenMimeType >> 2];
    var dataPtr = HEAPU32[fetch_attr + Fetch.attr_t_offset_requestData >> 2];
    var dataLength = HEAPU32[fetch_attr + Fetch.attr_t_offset_requestDataSize >> 2];
  
    var fetchAttrLoadToMemory = !!(fetchAttributes & 1/*EMSCRIPTEN_FETCH_LOAD_TO_MEMORY*/);
    var fetchAttrStreamData = !!(fetchAttributes & 2/*EMSCRIPTEN_FETCH_STREAM_DATA*/);
    var fetchAttrPersistFile = !!(fetchAttributes & 4/*EMSCRIPTEN_FETCH_PERSIST_FILE*/);
    var fetchAttrAppend = !!(fetchAttributes & 8/*EMSCRIPTEN_FETCH_APPEND*/);
    var fetchAttrReplace = !!(fetchAttributes & 16/*EMSCRIPTEN_FETCH_REPLACE*/);
    var fetchAttrNoDownload = !!(fetchAttributes & 32/*EMSCRIPTEN_FETCH_NO_DOWNLOAD*/);
    var fetchAttrSynchronous = !!(fetchAttributes & 64/*EMSCRIPTEN_FETCH_SYNCHRONOUS*/);
    var fetchAttrWaitable = !!(fetchAttributes & 128/*EMSCRIPTEN_FETCH_WAITABLE*/);
  
    var userNameStr = userName ? Pointer_stringify(userName) : undefined;
    var passwordStr = password ? Pointer_stringify(password) : undefined;
    var overriddenMimeTypeStr = overriddenMimeType ? Pointer_stringify(overriddenMimeType) : undefined;
  
    var xhr = new XMLHttpRequest();
    xhr.withCredentials = withCredentials;
    xhr.open(requestMethod, url_, !fetchAttrSynchronous, userNameStr, passwordStr);
    if (!fetchAttrSynchronous) xhr.timeout = timeoutMsecs; // XHR timeout field is only accessible in async XHRs, and must be set after .open() but before .send().
    xhr.url_ = url_; // Save the url for debugging purposes (and for comparing to the responseURL that server side advertised)
    xhr.responseType = fetchAttrStreamData ? 'moz-chunked-arraybuffer' : 'arraybuffer';
  
    if (overriddenMimeType) {
      xhr.overrideMimeType(overriddenMimeTypeStr);
    }
    if (requestHeaders) {
      for(;;) {
        var key = HEAPU32[requestHeaders >> 2];
        if (!key) break;
        var value = HEAPU32[requestHeaders + 4 >> 2];
        if (!value) break;
        requestHeaders += 8;
        var keyStr = Pointer_stringify(key);
        var valueStr = Pointer_stringify(value);
        xhr.setRequestHeader(keyStr, valueStr);
      }
    }
    Fetch.xhrs.push(xhr);
    var id = Fetch.xhrs.length;
    HEAPU32[fetch + Fetch.fetch_t_offset_id >> 2] = id;
    var data = (dataPtr && dataLength) ? HEAPU8.slice(dataPtr, dataPtr + dataLength) : null;
    // TODO: Support specifying custom headers to the request.
  
    xhr.onload = function(e) {
      var len = xhr.response ? xhr.response.byteLength : 0;
      var ptr = 0;
      var ptrLen = 0;
      if (fetchAttrLoadToMemory && !fetchAttrStreamData) {
        ptrLen = len;
        // The data pointer malloc()ed here has the same lifetime as the emscripten_fetch_t structure itself has, and is
        // freed when emscripten_fetch_close() is called.
        ptr = _malloc(ptrLen);
        HEAPU8.set(new Uint8Array(xhr.response), ptr);
      }
      HEAPU32[fetch + Fetch.fetch_t_offset_data >> 2] = ptr;
      Fetch.setu64(fetch + Fetch.fetch_t_offset_numBytes, ptrLen);
      Fetch.setu64(fetch + Fetch.fetch_t_offset_dataOffset, 0);
      if (len) {
        // If the final XHR.onload handler receives the bytedata to compute total length, report that,
        // otherwise don't write anything out here, which will retain the latest byte size reported in
        // the most recent XHR.onprogress handler.
        Fetch.setu64(fetch + Fetch.fetch_t_offset_totalBytes, len);
      }
      HEAPU16[fetch + Fetch.fetch_t_offset_readyState >> 1] = xhr.readyState;
      if (xhr.readyState === 4 && xhr.status === 0) {
        if (len > 0) xhr.status = 200; // If loading files from a source that does not give HTTP status code, assume success if we got data bytes.
        else xhr.status = 404; // Conversely, no data bytes is 404.
      }
      HEAPU16[fetch + Fetch.fetch_t_offset_status >> 1] = xhr.status;
      if (xhr.statusText) stringToUTF8(xhr.statusText, fetch + Fetch.fetch_t_offset_statusText, 64);
      if (xhr.status == 200) {
        if (onsuccess) onsuccess(fetch, xhr, e);
      } else {
        if (onerror) onerror(fetch, xhr, e);
      }
    }
    xhr.onerror = function(e) {
      var status = xhr.status; // XXX TODO: Overwriting xhr.status doesn't work here, so don't override anywhere else either.
      if (xhr.readyState == 4 && status == 0) status = 404; // If no error recorded, pretend it was 404 Not Found.
      HEAPU32[fetch + Fetch.fetch_t_offset_data >> 2] = 0;
      Fetch.setu64(fetch + Fetch.fetch_t_offset_numBytes, 0);
      Fetch.setu64(fetch + Fetch.fetch_t_offset_dataOffset, 0);
      Fetch.setu64(fetch + Fetch.fetch_t_offset_totalBytes, 0);
      HEAPU16[fetch + Fetch.fetch_t_offset_readyState >> 1] = xhr.readyState;
      HEAPU16[fetch + Fetch.fetch_t_offset_status >> 1] = status;
      if (onerror) onerror(fetch, xhr, e);
    }
    xhr.ontimeout = function(e) {
      if (onerror) onerror(fetch, xhr, e);
    }
    xhr.onprogress = function(e) {
      var ptrLen = (fetchAttrLoadToMemory && fetchAttrStreamData && xhr.response) ? xhr.response.byteLength : 0;
      var ptr = 0;
      if (fetchAttrLoadToMemory && fetchAttrStreamData) {
        // The data pointer malloc()ed here has the same lifetime as the emscripten_fetch_t structure itself has, and is
        // freed when emscripten_fetch_close() is called.
        ptr = _malloc(ptrLen);
        HEAPU8.set(new Uint8Array(xhr.response), ptr);
      }
      HEAPU32[fetch + Fetch.fetch_t_offset_data >> 2] = ptr;
      Fetch.setu64(fetch + Fetch.fetch_t_offset_numBytes, ptrLen);
      Fetch.setu64(fetch + Fetch.fetch_t_offset_dataOffset, e.loaded - ptrLen);
      Fetch.setu64(fetch + Fetch.fetch_t_offset_totalBytes, e.total);
      HEAPU16[fetch + Fetch.fetch_t_offset_readyState >> 1] = xhr.readyState;
      if (xhr.readyState >= 3 && xhr.status === 0 && e.loaded > 0) xhr.status = 200; // If loading files from a source that does not give HTTP status code, assume success if we get data bytes
      HEAPU16[fetch + Fetch.fetch_t_offset_status >> 1] = xhr.status;
      if (xhr.statusText) stringToUTF8(xhr.statusText, fetch + Fetch.fetch_t_offset_statusText, 64);
      if (onprogress) onprogress(fetch, xhr, e);
    }
    try {
      xhr.send(data);
    } catch(e) {
      if (onerror) onerror(fetch, xhr, e);
    }
  }
  Module["__emscripten_fetch_xhr"] = __emscripten_fetch_xhr;
  
  function __emscripten_fetch_cache_data(db, fetch, data, onsuccess, onerror) {
    if (!db) {
      onerror(fetch, 0, 'IndexedDB not available!');
      return;
    }
  
    var fetch_attr = fetch + Fetch.fetch_t_offset___attributes;
    var destinationPath = HEAPU32[fetch_attr + Fetch.attr_t_offset_destinationPath >> 2];
    if (!destinationPath) destinationPath = HEAPU32[fetch + Fetch.fetch_t_offset_url >> 2];
    var destinationPathStr = Pointer_stringify(destinationPath);
  
    try {
      var transaction = db.transaction(['FILES'], 'readwrite');
      var packages = transaction.objectStore('FILES');
      var putRequest = packages.put(data, destinationPathStr);
      putRequest.onsuccess = function(event) {
        HEAPU16[fetch + Fetch.fetch_t_offset_readyState >> 1] = 4; // Mimic XHR readyState 4 === 'DONE: The operation is complete'
        HEAPU16[fetch + Fetch.fetch_t_offset_status >> 1] = 200; // Mimic XHR HTTP status code 200 "OK"
        stringToUTF8("OK", fetch + Fetch.fetch_t_offset_statusText, 64);
        onsuccess(fetch, 0, destinationPathStr);
      };
      putRequest.onerror = function(error) {
        // Most likely we got an error if IndexedDB is unwilling to store any more data for this page.
        // TODO: Can we identify and break down different IndexedDB-provided errors and convert those
        // to more HTTP status codes for more information?
        HEAPU16[fetch + Fetch.fetch_t_offset_readyState >> 1] = 4; // Mimic XHR readyState 4 === 'DONE: The operation is complete'
        HEAPU16[fetch + Fetch.fetch_t_offset_status >> 1] = 413; // Mimic XHR HTTP status code 413 "Payload Too Large"
        stringToUTF8("Payload Too Large", fetch + Fetch.fetch_t_offset_statusText, 64);
        onerror(fetch, 0, error);
      };
    } catch(e) {
      onerror(fetch, 0, e);
    }
  }
  Module["__emscripten_fetch_cache_data"] = __emscripten_fetch_cache_data;
  
  function __emscripten_fetch_load_cached_data(db, fetch, onsuccess, onerror) {
    if (!db) {
      onerror(fetch, 0, 'IndexedDB not available!');
      return;
    }
  
    var fetch_attr = fetch + Fetch.fetch_t_offset___attributes;
    var path = HEAPU32[fetch_attr + Fetch.attr_t_offset_destinationPath >> 2];
    if (!path) path = HEAPU32[fetch + Fetch.fetch_t_offset_url >> 2];
    var pathStr = Pointer_stringify(path);
  
    try {
      var transaction = db.transaction(['FILES'], 'readonly');
      var packages = transaction.objectStore('FILES');
      var getRequest = packages.get(pathStr);
      getRequest.onsuccess = function(event) {
        if (event.target.result) {
          var value = event.target.result;
          var len = value.byteLength || value.length;
  
          // The data pointer malloc()ed here has the same lifetime as the emscripten_fetch_t structure itself has, and is
          // freed when emscripten_fetch_close() is called.
          var ptr = _malloc(len);
          HEAPU8.set(new Uint8Array(value), ptr);
          HEAPU32[fetch + Fetch.fetch_t_offset_data >> 2] = ptr;
          Fetch.setu64(fetch + Fetch.fetch_t_offset_numBytes, len);
          Fetch.setu64(fetch + Fetch.fetch_t_offset_dataOffset, 0);
          Fetch.setu64(fetch + Fetch.fetch_t_offset_totalBytes, len);
          HEAPU16[fetch + Fetch.fetch_t_offset_readyState >> 1] = 4; // Mimic XHR readyState 4 === 'DONE: The operation is complete'
          HEAPU16[fetch + Fetch.fetch_t_offset_status >> 1] = 200; // Mimic XHR HTTP status code 200 "OK"
          stringToUTF8("OK", fetch + Fetch.fetch_t_offset_statusText, 64);
          onsuccess(fetch, 0, value);
        } else {
          // Succeeded to load, but the load came back with the value of undefined, treat that as an error since we never store undefined in db.
          HEAPU16[fetch + Fetch.fetch_t_offset_readyState >> 1] = 4; // Mimic XHR readyState 4 === 'DONE: The operation is complete'
          HEAPU16[fetch + Fetch.fetch_t_offset_status >> 1] = 404; // Mimic XHR HTTP status code 404 "Not Found"
          stringToUTF8("Not Found", fetch + Fetch.fetch_t_offset_statusText, 64);
          onerror(fetch, 0, 'no data');
        }
      };
      getRequest.onerror = function(error) {
        HEAPU16[fetch + Fetch.fetch_t_offset_readyState >> 1] = 4; // Mimic XHR readyState 4 === 'DONE: The operation is complete'
        HEAPU16[fetch + Fetch.fetch_t_offset_status >> 1] = 404; // Mimic XHR HTTP status code 404 "Not Found"
        stringToUTF8("Not Found", fetch + Fetch.fetch_t_offset_statusText, 64);
        onerror(fetch, 0, error);
      };
    } catch(e) {
      onerror(fetch, 0, e);
    }
  }
  Module["__emscripten_fetch_load_cached_data"] = __emscripten_fetch_load_cached_data;
  
  function __emscripten_fetch_delete_cached_data(db, fetch, onsuccess, onerror) {
    if (!db) {
      onerror(fetch, 0, 'IndexedDB not available!');
      return;
    }
  
    var fetch_attr = fetch + Fetch.fetch_t_offset___attributes;
    var path = HEAPU32[fetch_attr + Fetch.attr_t_offset_destinationPath >> 2];
    if (!path) path = HEAPU32[fetch + Fetch.fetch_t_offset_url >> 2];
    var pathStr = Pointer_stringify(path);
  
    try {
      var transaction = db.transaction(['FILES'], 'readwrite');
      var packages = transaction.objectStore('FILES');
      var request = packages.delete(pathStr);
      request.onsuccess = function(event) {
        var value = event.target.result;
        HEAPU32[fetch + Fetch.fetch_t_offset_data >> 2] = 0;
        Fetch.setu64(fetch + Fetch.fetch_t_offset_numBytes, 0);
        Fetch.setu64(fetch + Fetch.fetch_t_offset_dataOffset, 0);
        Fetch.setu64(fetch + Fetch.fetch_t_offset_dataOffset, 0);
        HEAPU16[fetch + Fetch.fetch_t_offset_readyState >> 1] = 4; // Mimic XHR readyState 4 === 'DONE: The operation is complete'
        HEAPU16[fetch + Fetch.fetch_t_offset_status >> 1] = 200; // Mimic XHR HTTP status code 200 "OK"
        stringToUTF8("OK", fetch + Fetch.fetch_t_offset_statusText, 64);
        onsuccess(fetch, 0, value);
      };
      request.onerror = function(error) {
        HEAPU16[fetch + Fetch.fetch_t_offset_readyState >> 1] = 4; // Mimic XHR readyState 4 === 'DONE: The operation is complete'
        HEAPU16[fetch + Fetch.fetch_t_offset_status >> 1] = 404; // Mimic XHR HTTP status code 404 "Not Found"
        stringToUTF8("Not Found", fetch + Fetch.fetch_t_offset_statusText, 64);
        onerror(fetch, 0, error);
      };
    } catch(e) {
      onerror(fetch, 0, e);
    }
  }
  Module["__emscripten_fetch_delete_cached_data"] = __emscripten_fetch_delete_cached_data;
  
  var _pthread_mutex_lock=undefined;
  Module["_pthread_mutex_lock"] = _pthread_mutex_lock;
  
  var _pthread_mutex_unlock=undefined;
  Module["_pthread_mutex_unlock"] = _pthread_mutex_unlock;function _emscripten_start_fetch(fetch, successcb, errorcb, progresscb) {
    if (typeof Module !== 'undefined') Module['noExitRuntime'] = true; // If we are the main Emscripten runtime, we should not be closing down.
  
    var fetch_attr = fetch + Fetch.fetch_t_offset___attributes;
    var requestMethod = Pointer_stringify(fetch_attr);
    var onsuccess = HEAPU32[fetch_attr + Fetch.attr_t_offset_onsuccess >> 2];
    var onerror = HEAPU32[fetch_attr + Fetch.attr_t_offset_onerror >> 2];
    var onprogress = HEAPU32[fetch_attr + Fetch.attr_t_offset_onprogress >> 2];
    var fetchAttributes = HEAPU32[fetch_attr + Fetch.attr_t_offset_attributes >> 2];
    var fetchAttrLoadToMemory = !!(fetchAttributes & 1/*EMSCRIPTEN_FETCH_LOAD_TO_MEMORY*/);
    var fetchAttrStreamData = !!(fetchAttributes & 2/*EMSCRIPTEN_FETCH_STREAM_DATA*/);
    var fetchAttrPersistFile = !!(fetchAttributes & 4/*EMSCRIPTEN_FETCH_PERSIST_FILE*/);
    var fetchAttrAppend = !!(fetchAttributes & 8/*EMSCRIPTEN_FETCH_APPEND*/);
    var fetchAttrReplace = !!(fetchAttributes & 16/*EMSCRIPTEN_FETCH_REPLACE*/);
    var fetchAttrNoDownload = !!(fetchAttributes & 32/*EMSCRIPTEN_FETCH_NO_DOWNLOAD*/);
  
    var reportSuccess = function(fetch, xhr, e) {
      if (onsuccess && typeof dynCall === 'function') Module['dynCall_vi'](onsuccess, fetch);
      else if (successcb) successcb(fetch);
    };
  
    var cacheResultAndReportSuccess = function(fetch, xhr, e) {
      var storeSuccess = function(fetch, xhr, e) {
        if (onsuccess && typeof dynCall === 'function') Module['dynCall_vi'](onsuccess, fetch);
        else if (successcb) successcb(fetch);
      };
      var storeError = function(fetch, xhr, e) {
        if (onsuccess && typeof dynCall === 'function') Module['dynCall_vi'](onsuccess, fetch);
        else if (successcb) successcb(fetch);
      };
      __emscripten_fetch_cache_data(Fetch.dbInstance, fetch, xhr.response, storeSuccess, storeError);
    };
  
    var reportProgress = function(fetch, xhr, e) {
      if (onprogress && typeof dynCall === 'function') Module['dynCall_vi'](onprogress, fetch);
      else if (progresscb) progresscb(fetch);
    };
  
    var reportError = function(fetch, xhr, e) {
      if (onerror && typeof dynCall === 'function') Module['dynCall_vi'](onerror, fetch);
      else if (errorcb) errorcb(fetch);
    };
  
    var performUncachedXhr = function(fetch, xhr, e) {
      __emscripten_fetch_xhr(fetch, reportSuccess, reportError, reportProgress);
    };
  
    var performCachedXhr = function(fetch, xhr, e) {
      __emscripten_fetch_xhr(fetch, cacheResultAndReportSuccess, reportError, reportProgress);
    };
  
    // Should we try IndexedDB first?
    if (!fetchAttrReplace || requestMethod === 'EM_IDB_STORE' || requestMethod === 'EM_IDB_DELETE') {
      if (!Fetch.dbInstance) {
        reportError(fetch, 0, 'IndexedDB is not open');
        return 0; // todo: free
      }
  
      if (requestMethod === 'EM_IDB_STORE') {
        var dataPtr = HEAPU32[fetch_attr + Fetch.attr_t_offset_requestData >> 2];
        var dataLength = HEAPU32[fetch_attr + Fetch.attr_t_offset_requestDataSize >> 2];
        var data = HEAPU8.slice(dataPtr, dataPtr + dataLength); // TODO(?): Here we perform a clone of the data, because storing shared typed arrays to IndexedDB does not seem to be allowed.
        __emscripten_fetch_cache_data(Fetch.dbInstance, fetch, data, reportSuccess, reportError);
      } else if (requestMethod === 'EM_IDB_DELETE') {
        __emscripten_fetch_delete_cached_data(Fetch.dbInstance, fetch, reportSuccess, reportError);
      } else if (fetchAttrNoDownload) {
        __emscripten_fetch_load_cached_data(Fetch.dbInstance, fetch, reportSuccess, reportError);
      } else if (fetchAttrPersistFile) {
        __emscripten_fetch_load_cached_data(Fetch.dbInstance, fetch, reportSuccess, performCachedXhr);        
      } else {
        __emscripten_fetch_load_cached_data(Fetch.dbInstance, fetch, reportSuccess, performUncachedXhr);        
      }
    } else if (!fetchAttrNoDownload) {
      if (fetchAttrPersistFile) {
        __emscripten_fetch_xhr(fetch, cacheResultAndReportSuccess, reportError, reportProgress);
      } else {
        __emscripten_fetch_xhr(fetch, reportSuccess, reportError, reportProgress);        
      }
    } else {
      return 0; // todo: free
    }
    return fetch;
  }
  Module["_emscripten_start_fetch"] = _emscripten_start_fetch;

  function _emscripten_syscall(which, varargs) {
    switch (which) {
      case 102: return ___syscall102(which, varargs);
      case 118: return ___syscall118(which, varargs);
      case 140: return ___syscall140(which, varargs);
      case 142: return ___syscall142(which, varargs);
      case 145: return ___syscall145(which, varargs);
      case 146: return ___syscall146(which, varargs);
      case 194: return ___syscall194(which, varargs);
      case 195: return ___syscall195(which, varargs);
      case 197: return ___syscall197(which, varargs);
      case 221: return ___syscall221(which, varargs);
      case 3: return ___syscall3(which, varargs);
      case 33: return ___syscall33(which, varargs);
      case 4: return ___syscall4(which, varargs);
      case 5: return ___syscall5(which, varargs);
      case 54: return ___syscall54(which, varargs);
      case 6: return ___syscall6(which, varargs);
      default: throw "surprising proxied syscall: " + which;
    }
  }
  Module["_emscripten_syscall"] = _emscripten_syscall;

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }
  Module["__exit"] = __exit;function _exit(status) {
      __exit(status);
    }
  Module["_exit"] = _exit;

  
  var GAI_ERRNO_MESSAGES={};
  Module["GAI_ERRNO_MESSAGES"] = GAI_ERRNO_MESSAGES;function _gai_strerror(val) {
      var buflen = 256;
  
      // On first call to gai_strerror we initialise the buffer and populate the error messages.
      if (!_gai_strerror.buffer) {
          _gai_strerror.buffer = _malloc(buflen);
  
          GAI_ERRNO_MESSAGES['0'] = 'Success';
          GAI_ERRNO_MESSAGES['' + -1] = 'Invalid value for \'ai_flags\' field';
          GAI_ERRNO_MESSAGES['' + -2] = 'NAME or SERVICE is unknown';
          GAI_ERRNO_MESSAGES['' + -3] = 'Temporary failure in name resolution';
          GAI_ERRNO_MESSAGES['' + -4] = 'Non-recoverable failure in name res';
          GAI_ERRNO_MESSAGES['' + -6] = '\'ai_family\' not supported';
          GAI_ERRNO_MESSAGES['' + -7] = '\'ai_socktype\' not supported';
          GAI_ERRNO_MESSAGES['' + -8] = 'SERVICE not supported for \'ai_socktype\'';
          GAI_ERRNO_MESSAGES['' + -10] = 'Memory allocation failure';
          GAI_ERRNO_MESSAGES['' + -11] = 'System error returned in \'errno\'';
          GAI_ERRNO_MESSAGES['' + -12] = 'Argument buffer overflow';
      }
  
      var msg = 'Unknown error';
  
      if (val in GAI_ERRNO_MESSAGES) {
        if (GAI_ERRNO_MESSAGES[val].length > buflen - 1) {
          msg = 'Message too long'; // EMSGSIZE message. This should never occur given the GAI_ERRNO_MESSAGES above. 
        } else {
          msg = GAI_ERRNO_MESSAGES[val];
        }
      }
  
      writeAsciiToMemory(msg, _gai_strerror.buffer);
      return _gai_strerror.buffer;
    }
  Module["_gai_strerror"] = _gai_strerror;

  function _getaddrinfo(node, service, hint, out) {
  if (ENVIRONMENT_IS_PTHREAD) return _emscripten_sync_run_in_browser_thread_iiiii(2, node, service, hint, out);
      // Note getaddrinfo currently only returns a single addrinfo with ai_next defaulting to NULL. When NULL
      // hints are specified or ai_family set to AF_UNSPEC or ai_socktype or ai_protocol set to 0 then we
      // really should provide a linked list of suitable addrinfo values.
      var addrs = [];
      var canon = null;
      var addr = 0;
      var port = 0;
      var flags = 0;
      var family = 0;
      var type = 0;
      var proto = 0;
      var ai, last;
  
      function allocaddrinfo(family, type, proto, canon, addr, port) {
        var sa, salen, ai;
        var res;
  
        salen = family === 10 ?
          28 :
          16;
        addr = family === 10 ?
          __inet_ntop6_raw(addr) :
          __inet_ntop4_raw(addr);
        sa = _malloc(salen);
        res = __write_sockaddr(sa, family, addr, port);
        assert(!res.errno);
  
        ai = _malloc(32);
        HEAP32[(((ai)+(4))>>2)]=family;
        HEAP32[(((ai)+(8))>>2)]=type;
        HEAP32[(((ai)+(12))>>2)]=proto;
        HEAP32[(((ai)+(24))>>2)]=canon;
        HEAP32[(((ai)+(20))>>2)]=sa;
        if (family === 10) {
          HEAP32[(((ai)+(16))>>2)]=28;
        } else {
          HEAP32[(((ai)+(16))>>2)]=16;
        }
        HEAP32[(((ai)+(28))>>2)]=0;
  
        return ai;
      }
  
      if (hint) {
        flags = HEAP32[((hint)>>2)];
        family = HEAP32[(((hint)+(4))>>2)];
        type = HEAP32[(((hint)+(8))>>2)];
        proto = HEAP32[(((hint)+(12))>>2)];
      }
      if (type && !proto) {
        proto = type === 2 ? 17 : 6;
      }
      if (!type && proto) {
        type = proto === 17 ? 2 : 1;
      }
  
      // If type or proto are set to zero in hints we should really be returning multiple addrinfo values, but for
      // now default to a TCP STREAM socket so we can at least return a sensible addrinfo given NULL hints.
      if (proto === 0) {
        proto = 6;
      }
      if (type === 0) {
        type = 1;
      }
  
      if (!node && !service) {
        return -2;
      }
      if (flags & ~(1|2|4|
          1024|8|16|32)) {
        return -1;
      }
      if (hint !== 0 && (HEAP32[((hint)>>2)] & 2) && !node) {
        return -1;
      }
      if (flags & 32) {
        // TODO
        return -2;
      }
      if (type !== 0 && type !== 1 && type !== 2) {
        return -7;
      }
      if (family !== 0 && family !== 2 && family !== 10) {
        return -6;
      }
  
      if (service) {
        service = Pointer_stringify(service);
        port = parseInt(service, 10);
  
        if (isNaN(port)) {
          if (flags & 1024) {
            return -2;
          }
          // TODO support resolving well-known service names from:
          // http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
          return -8;
        }
      }
  
      if (!node) {
        if (family === 0) {
          family = 2;
        }
        if ((flags & 1) === 0) {
          if (family === 2) {
            addr = _htonl(2130706433);
          } else {
            addr = [0, 0, 0, 1];
          }
        }
        ai = allocaddrinfo(family, type, proto, null, addr, port);
        HEAP32[((out)>>2)]=ai;
        return 0;
      }
  
      //
      // try as a numeric address
      //
      node = Pointer_stringify(node);
      addr = __inet_pton4_raw(node);
      if (addr !== null) {
        // incoming node is a valid ipv4 address
        if (family === 0 || family === 2) {
          family = 2;
        }
        else if (family === 10 && (flags & 8)) {
          addr = [0, 0, _htonl(0xffff), addr];
          family = 10;
        } else {
          return -2;
        }
      } else {
        addr = __inet_pton6_raw(node);
        if (addr !== null) {
          // incoming node is a valid ipv6 address
          if (family === 0 || family === 10) {
            family = 10;
          } else {
            return -2;
          }
        }
      }
      if (addr != null) {
        ai = allocaddrinfo(family, type, proto, node, addr, port);
        HEAP32[((out)>>2)]=ai;
        return 0;
      }
      if (flags & 4) {
        return -2;
      }
  
      //
      // try as a hostname
      //
      // resolve the hostname to a temporary fake address
      node = DNS.lookup_name(node);
      addr = __inet_pton4_raw(node);
      if (family === 0) {
        family = 2;
      } else if (family === 10) {
        addr = [0, 0, _htonl(0xffff), addr];
      }
      ai = allocaddrinfo(family, type, proto, null, addr, port);
      HEAP32[((out)>>2)]=ai;
      return 0;
    }
  Module["_getaddrinfo"] = _getaddrinfo;

  
  
  
  
  var _environ; if (ENVIRONMENT_IS_PTHREAD) _environ = PthreadWorkerInit._environ; else PthreadWorkerInit._environ = _environ = allocate(1, "i32*", ALLOC_STATIC);
  Module["_environ"] = _environ;var ___environ=_environ;
  Module["___environ"] = ___environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C.UTF-8';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }
  Module["___buildEnvironment"] = ___buildEnvironment;var ENV={};
  Module["ENV"] = ENV;function _getenv(name) {
  if (ENVIRONMENT_IS_PTHREAD) return _emscripten_sync_run_in_browser_thread_ii(3, name);
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }
  Module["_getenv"] = _getenv;

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }
  Module["_gettimeofday"] = _gettimeofday;



   

   

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    }
  Module["_emscripten_memcpy_big"] = _emscripten_memcpy_big; 

   

   

  function _pthread_cleanup_pop(execute) {
      var routine = PThread.exitHandlers.pop();
      if (execute) routine();
    }
  Module["_pthread_cleanup_pop"] = _pthread_cleanup_pop;

  function _pthread_cleanup_push(routine, arg) {
      if (PThread.exitHandlers === null) {
        PThread.exitHandlers = [];
        if (!ENVIRONMENT_IS_PTHREAD) {
          __ATEXIT__.push(function() { PThread.runExitHandlers(); });
        }
      }
      PThread.exitHandlers.push(function() { Module['dynCall_vi'](routine, arg) });
    }
  Module["_pthread_cleanup_push"] = _pthread_cleanup_push;

  
  function __spawn_thread(threadParams) {
      if (ENVIRONMENT_IS_PTHREAD) throw 'Internal Error! _spawn_thread() can only ever be called from main application thread!';
  
      var worker = PThread.getNewWorker();
      if (worker.pthread !== undefined) throw 'Internal error!';
      if (!threadParams.pthread_ptr) throw 'Internal error, no pthread ptr!';
      PThread.runningWorkers.push(worker);
  
      // Allocate memory for thread-local storage and initialize it to zero.
      var tlsMemory = _malloc(128 * 4);
      for (var i = 0; i < 128; ++i) {
        HEAP32[(((tlsMemory)+(i*4))>>2)]=0;
      }
  
      var pthread = PThread.pthreads[threadParams.pthread_ptr] = { // Create a pthread info object to represent this thread.
        worker: worker,
        stackBase: threadParams.stackBase,
        stackSize: threadParams.stackSize,
        allocatedOwnStack: threadParams.allocatedOwnStack,
        thread: threadParams.pthread_ptr,
        threadInfoStruct: threadParams.pthread_ptr // Info area for this thread in Emscripten HEAP (shared)
      };
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 0 ) >> 2, 0); // threadStatus <- 0, meaning not yet exited.
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 4 ) >> 2, 0); // threadExitCode <- 0.
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 20 ) >> 2, 0); // profilerBlock <- 0.
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 80 ) >> 2, threadParams.detached);
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 116 ) >> 2, tlsMemory); // Init thread-local-storage memory array.
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 60 ) >> 2, 0); // Mark initial status to unused.
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 52 ) >> 2, pthread.threadInfoStruct); // Main thread ID.
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 56 ) >> 2, PROCINFO.pid); // Process ID.
  
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 120) >> 2, threadParams.stackSize);
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 96) >> 2, threadParams.stackSize);
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 92) >> 2, threadParams.stackBase);
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 120 + 8) >> 2, threadParams.stackBase);
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 120 + 12) >> 2, threadParams.detached);
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 120 + 20) >> 2, threadParams.schedPolicy);
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 120 + 24) >> 2, threadParams.schedPrio);
  
      var global_libc = _emscripten_get_global_libc();
      var global_locale = global_libc + 40;
      Atomics.store(HEAPU32, (pthread.threadInfoStruct + 188) >> 2, global_locale);
  
  
      worker.pthread = pthread;
  
      // Ask the worker to start executing its pthread entry point function.
      worker.postMessage({
        cmd: 'run',
        start_routine: threadParams.startRoutine,
        arg: threadParams.arg,
        threadInfoStruct: threadParams.pthread_ptr,
        selfThreadId: threadParams.pthread_ptr, // TODO: Remove this since thread ID is now the same as the thread address.
        parentThreadId: threadParams.parent_pthread_ptr,
        stackBase: threadParams.stackBase,
        stackSize: threadParams.stackSize,
      }, threadParams.transferList);
    }
  Module["__spawn_thread"] = __spawn_thread;
  
  function _pthread_getschedparam(thread, policy, schedparam) {
      if (!policy && !schedparam) return ERRNO_CODES.EINVAL;
  
      if (!thread) {
        Module['printErr']('pthread_getschedparam called with a null thread pointer!');
        return ERRNO_CODES.ESRCH;
      }
      var self = HEAP32[(((thread)+(24))>>2)];
      if (self != thread) {
        Module['printErr']('pthread_getschedparam attempted on thread ' + thread + ', which does not point to a valid thread, or does not exist anymore!');
        return ERRNO_CODES.ESRCH;
      }
  
      var schedPolicy = Atomics.load(HEAPU32, (thread + 120 + 20 ) >> 2);
      var schedPrio = Atomics.load(HEAPU32, (thread + 120 + 24 ) >> 2);
  
      if (policy) HEAP32[((policy)>>2)]=schedPolicy;
      if (schedparam) HEAP32[((schedparam)>>2)]=schedPrio;
      return 0;
    }
  Module["_pthread_getschedparam"] = _pthread_getschedparam;
  
   function _pthread_create(pthread_ptr, attr, start_routine, arg) {
      if (typeof SharedArrayBuffer === 'undefined') {
        Module['printErr']('Current environment does not support SharedArrayBuffer, pthreads are not available!');
        return 11;
      }
      if (!pthread_ptr) {
        Module['printErr']('pthread_create called with a null thread pointer!');
        return 22;
      }
  
      var transferList = []; // List of JS objects that will transfer ownership to the Worker hosting the thread
  
  
      // Synchronously proxy the thread creation to main thread if possible. If we need to transfer ownership of objects, then
      // proxy asynchronously via postMessage.
      if (ENVIRONMENT_IS_PTHREAD && transferList.length == 0) {
        return _emscripten_sync_run_in_main_thread_4(137, pthread_ptr, attr, start_routine, arg);
      }
  
      var stackSize = 0;
      var stackBase = 0;
      var detached = 0; // Default thread attr is PTHREAD_CREATE_JOINABLE, i.e. start as not detached.
      var schedPolicy = 0; /*SCHED_OTHER*/
      var schedPrio = 0;
      if (attr) {
        stackSize = HEAP32[((attr)>>2)];
        stackBase = HEAP32[(((attr)+(8))>>2)];
        detached = HEAP32[(((attr)+(12))>>2)] != 0/*PTHREAD_CREATE_JOINABLE*/;
        var inheritSched = HEAP32[(((attr)+(16))>>2)] == 0/*PTHREAD_INHERIT_SCHED*/;
        if (inheritSched) {
          var prevSchedPolicy = HEAP32[(((attr)+(20))>>2)];
          var prevSchedPrio = HEAP32[(((attr)+(24))>>2)];
          _pthread_getschedparam(_pthread_self(), attr + 20, attr + 24);
          schedPolicy = HEAP32[(((attr)+(20))>>2)];
          schedPrio = HEAP32[(((attr)+(24))>>2)];
          HEAP32[(((attr)+(20))>>2)]=prevSchedPolicy;
          HEAP32[(((attr)+(24))>>2)]=prevSchedPrio;
        } else {
          schedPolicy = HEAP32[(((attr)+(20))>>2)];
          schedPrio = HEAP32[(((attr)+(24))>>2)];
        }
      }
      stackSize += 81920 /*DEFAULT_STACK_SIZE*/;
      var allocatedOwnStack = stackBase == 0; // If allocatedOwnStack == true, then the pthread impl maintains the stack allocation.
      if (allocatedOwnStack) {
        stackBase = _malloc(stackSize); // Allocate a stack if the user doesn't want to place the stack in a custom memory area.
      } else {
        // Musl stores the stack base address assuming stack grows downwards, so adjust it to Emscripten convention that the
        // stack grows upwards instead.
        stackBase -= stackSize;
        assert(stackBase > 0);
      }
  
      // Allocate thread block (pthread_t structure).
      var threadInfoStruct = _malloc(244);
      for (var i = 0; i < 244 >> 2; ++i) HEAPU32[(threadInfoStruct>>2) + i] = 0; // zero-initialize thread structure.
      HEAP32[((pthread_ptr)>>2)]=threadInfoStruct;
  
      // The pthread struct has a field that points to itself - this is used as a magic ID to detect whether the pthread_t
      // structure is 'alive'.
      HEAP32[(((threadInfoStruct)+(24))>>2)]=threadInfoStruct;
  
      // pthread struct robust_list head should point to itself.
      var headPtr = threadInfoStruct + 168;
      HEAP32[((headPtr)>>2)]=headPtr;
  
      var threadParams = {
        stackBase: stackBase,
        stackSize: stackSize,
        allocatedOwnStack: allocatedOwnStack,
        schedPolicy: schedPolicy,
        schedPrio: schedPrio,
        detached: detached,
        startRoutine: start_routine,
        pthread_ptr: threadInfoStruct,
        parent_pthread_ptr: _pthread_self(),
        arg: arg,
        transferList: transferList
      };
  
      if (ENVIRONMENT_IS_PTHREAD) {
        // The prepopulated pool of web workers that can host pthreads is stored in the main JS thread. Therefore if a
        // pthread is attempting to spawn a new thread, the thread creation must be deferred to the main JS thread.
        threadParams.cmd = 'spawnThread';
        postMessage(threadParams, transferList);
      } else {
        // We are the main thread, so we have the pthread warmup pool in this thread and can fire off JS thread creation
        // directly ourselves.
        __spawn_thread(threadParams);
      }
  
      return 0;
    }
  Module["_pthread_create"] = _pthread_create;

  function _pthread_exit(status) {
      if (!ENVIRONMENT_IS_PTHREAD) _exit(status);
      else PThread.threadExit(status);
    }
  Module["_pthread_exit"] = _pthread_exit;

  
  function __cleanup_thread(pthread_ptr) {
      if (ENVIRONMENT_IS_PTHREAD) throw 'Internal Error! _cleanup_thread() can only ever be called from main application thread!';
      if (!pthread_ptr) throw 'Internal Error! Null pthread_ptr in _cleanup_thread!';
      HEAP32[(((pthread_ptr)+(24))>>2)]=0;
      var pthread = PThread.pthreads[pthread_ptr];
      var worker = pthread.worker;
      PThread.freeThreadData(pthread);
      worker.pthread = undefined; // Detach the worker from the pthread object, and return it to the worker pool as an unused worker.
      PThread.unusedWorkerPool.push(worker);
      PThread.runningWorkers.splice(PThread.runningWorkers.indexOf(worker.pthread), 1); // Not a running Worker anymore.
    }
  Module["__cleanup_thread"] = __cleanup_thread;
  
  function __pthread_testcancel_js() {
      if (!ENVIRONMENT_IS_PTHREAD) return;
      if (!threadInfoStruct) return;
      var cancelDisabled = Atomics.load(HEAPU32, (threadInfoStruct + 72 ) >> 2);
      if (cancelDisabled) return;
      var canceled = Atomics.load(HEAPU32, (threadInfoStruct + 0 ) >> 2);
      if (canceled == 2) throw 'Canceled!';
    }
  Module["__pthread_testcancel_js"] = __pthread_testcancel_js;function _pthread_join(thread, status) {
      if (!thread) {
        Module['printErr']('pthread_join attempted on a null thread pointer!');
        return ERRNO_CODES.ESRCH;
      }
      if (ENVIRONMENT_IS_PTHREAD && selfThreadId == thread) {
        Module['printErr']('PThread ' + thread + ' is attempting to join to itself!');
        return ERRNO_CODES.EDEADLK;
      }
      else if (!ENVIRONMENT_IS_PTHREAD && PThread.mainThreadBlock == thread) {
        Module['printErr']('Main thread ' + thread + ' is attempting to join to itself!');
        return ERRNO_CODES.EDEADLK;
      }
      var self = HEAP32[(((thread)+(24))>>2)];
      if (self != thread) {
        Module['printErr']('pthread_join attempted on thread ' + thread + ', which does not point to a valid thread, or does not exist anymore!');
        return ERRNO_CODES.ESRCH;
      }
  
      var detached = Atomics.load(HEAPU32, (thread + 80 ) >> 2);
      if (detached) {
        Module['printErr']('Attempted to join thread ' + thread + ', which was already detached!');
        return ERRNO_CODES.EINVAL; // The thread is already detached, can no longer join it!
      }
      for (;;) {
        var threadStatus = Atomics.load(HEAPU32, (thread + 0 ) >> 2);
        if (threadStatus == 1) { // Exited?
          var threadExitCode = Atomics.load(HEAPU32, (thread + 4 ) >> 2);
          if (status) HEAP32[((status)>>2)]=threadExitCode;
          Atomics.store(HEAPU32, (thread + 80 ) >> 2, 1); // Mark the thread as detached.
  
          if (!ENVIRONMENT_IS_PTHREAD) __cleanup_thread(thread);
          else postMessage({ cmd: 'cleanupThread', thread: thread});
          return 0;
        }
        // TODO HACK! Replace the _js variant with just _pthread_testcancel:
        //_pthread_testcancel();
        __pthread_testcancel_js();
        // In main runtime thread (the thread that initialized the Emscripten C runtime and launched main()), assist pthreads in performing operations
        // that they need to access the Emscripten main runtime for.
        if (!ENVIRONMENT_IS_PTHREAD) _emscripten_main_thread_process_queued_calls();
        _emscripten_futex_wait(thread + 0, threadStatus, ENVIRONMENT_IS_PTHREAD ? 100 : 1);
      }
    }
  Module["_pthread_join"] = _pthread_join;


   

if (!ENVIRONMENT_IS_PTHREAD) PThread.initMainThreadBlock();;
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
__ATINIT__.push(function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); });;
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
if (!ENVIRONMENT_IS_PTHREAD) Fetch.staticInit();;
if (!ENVIRONMENT_IS_PTHREAD) ___buildEnvironment(ENV);;

 // proxiedFunctionTable specifies the list of functions that can be called either synchronously or asynchronously from other threads in postMessage()d or internally queued events. This way a pthread in a Worker can synchronously access e.g. the DOM on the main thread.

var proxiedFunctionTable = [null,_atexit,_getaddrinfo,_getenv];

function _emscripten_sync_run_in_browser_thread_ii(func, p0) {
  var waitAddress = stackSave();
  var returnValue = waitAddress + 4;
  Atomics.store(HEAP32, waitAddress >> 2, 0);
  postMessage({ proxiedCall: 2, func: func, waitAddress: waitAddress, returnValue: returnValue, p0: p0 });
  Atomics.wait(HEAP32, waitAddress >> 2, 0);
  return HEAP32[returnValue >> 2];
}

function _emscripten_sync_run_in_browser_thread_iiiii(func, p0, p1, p2, p3) {
  var waitAddress = stackSave();
  var returnValue = waitAddress + 4;
  Atomics.store(HEAP32, waitAddress >> 2, 0);
  postMessage({ proxiedCall: 5, func: func, waitAddress: waitAddress, returnValue: returnValue, p0: p0, p1: p1, p2: p2, p3: p3 });
  Atomics.wait(HEAP32, waitAddress >> 2, 0);
  return HEAP32[returnValue >> 2];
}

if (!ENVIRONMENT_IS_PTHREAD) {
 // Only main thread initializes these, pthreads copy them over at thread worker init time (in pthread-main.js)
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

}

var ASSERTIONS = true;

// All functions here should be maybeExported from jsifier.js

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
// All functions here should be maybeExported from jsifier.js

// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmGlobalArg['Atomics'] = Atomics;
Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___assert_fail": ___assert_fail, "___buildEnvironment": ___buildEnvironment, "___call_main": ___call_main, "___clock_gettime": ___clock_gettime, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_end_catch": ___cxa_end_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "___cxa_free_exception": ___cxa_free_exception, "___cxa_throw": ___cxa_throw, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall102": ___syscall102, "___syscall118": ___syscall118, "___syscall140": ___syscall140, "___syscall142": ___syscall142, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall194": ___syscall194, "___syscall195": ___syscall195, "___syscall197": ___syscall197, "___syscall221": ___syscall221, "___syscall3": ___syscall3, "___syscall33": ___syscall33, "___syscall4": ___syscall4, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "__cleanup_thread": __cleanup_thread, "__emscripten_fetch_cache_data": __emscripten_fetch_cache_data, "__emscripten_fetch_delete_cached_data": __emscripten_fetch_delete_cached_data, "__emscripten_fetch_load_cached_data": __emscripten_fetch_load_cached_data, "__emscripten_fetch_xhr": __emscripten_fetch_xhr, "__emscripten_get_fetch_work_queue": __emscripten_get_fetch_work_queue, "__exit": __exit, "__inet_ntop4_raw": __inet_ntop4_raw, "__inet_ntop6_raw": __inet_ntop6_raw, "__inet_pton4_raw": __inet_pton4_raw, "__inet_pton6_raw": __inet_pton6_raw, "__pthread_testcancel_js": __pthread_testcancel_js, "__read_sockaddr": __read_sockaddr, "__spawn_thread": __spawn_thread, "__write_sockaddr": __write_sockaddr, "_abort": _abort, "_atexit": _atexit, "_clock_gettime": _clock_gettime, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_conditional_set_current_thread_status_js": _emscripten_conditional_set_current_thread_status_js, "_emscripten_futex_wait": _emscripten_futex_wait, "_emscripten_futex_wake": _emscripten_futex_wake, "_emscripten_futex_wake_or_requeue": _emscripten_futex_wake_or_requeue, "_emscripten_get_now": _emscripten_get_now, "_emscripten_get_now_is_monotonic": _emscripten_get_now_is_monotonic, "_emscripten_has_threading_support": _emscripten_has_threading_support, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_current_thread_status_js": _emscripten_set_current_thread_status_js, "_emscripten_set_thread_name_js": _emscripten_set_thread_name_js, "_emscripten_start_fetch": _emscripten_start_fetch, "_emscripten_syscall": _emscripten_syscall, "_exit": _exit, "_gai_strerror": _gai_strerror, "_getaddrinfo": _getaddrinfo, "_getenv": _getenv, "_gettimeofday": _gettimeofday, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_pthread_cleanup_push": _pthread_cleanup_push, "_pthread_create": _pthread_create, "_pthread_exit": _pthread_exit, "_pthread_getschedparam": _pthread_getschedparam, "_pthread_join": _pthread_join, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var __pthread_ptr = 0;
  var __pthread_is_main_runtime_thread = 0;
  var __pthread_is_main_browser_thread = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___assert_fail=env.___assert_fail;
  var ___buildEnvironment=env.___buildEnvironment;
  var ___call_main=env.___call_main;
  var ___clock_gettime=env.___clock_gettime;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_throw=env.___cxa_throw;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall102=env.___syscall102;
  var ___syscall118=env.___syscall118;
  var ___syscall140=env.___syscall140;
  var ___syscall142=env.___syscall142;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall194=env.___syscall194;
  var ___syscall195=env.___syscall195;
  var ___syscall197=env.___syscall197;
  var ___syscall221=env.___syscall221;
  var ___syscall3=env.___syscall3;
  var ___syscall33=env.___syscall33;
  var ___syscall4=env.___syscall4;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var __cleanup_thread=env.__cleanup_thread;
  var __emscripten_fetch_cache_data=env.__emscripten_fetch_cache_data;
  var __emscripten_fetch_delete_cached_data=env.__emscripten_fetch_delete_cached_data;
  var __emscripten_fetch_load_cached_data=env.__emscripten_fetch_load_cached_data;
  var __emscripten_fetch_xhr=env.__emscripten_fetch_xhr;
  var __emscripten_get_fetch_work_queue=env.__emscripten_get_fetch_work_queue;
  var __exit=env.__exit;
  var __inet_ntop4_raw=env.__inet_ntop4_raw;
  var __inet_ntop6_raw=env.__inet_ntop6_raw;
  var __inet_pton4_raw=env.__inet_pton4_raw;
  var __inet_pton6_raw=env.__inet_pton6_raw;
  var __pthread_testcancel_js=env.__pthread_testcancel_js;
  var __read_sockaddr=env.__read_sockaddr;
  var __spawn_thread=env.__spawn_thread;
  var __write_sockaddr=env.__write_sockaddr;
  var _abort=env._abort;
  var _atexit=env._atexit;
  var _clock_gettime=env._clock_gettime;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_conditional_set_current_thread_status_js=env._emscripten_conditional_set_current_thread_status_js;
  var _emscripten_futex_wait=env._emscripten_futex_wait;
  var _emscripten_futex_wake=env._emscripten_futex_wake;
  var _emscripten_futex_wake_or_requeue=env._emscripten_futex_wake_or_requeue;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_get_now_is_monotonic=env._emscripten_get_now_is_monotonic;
  var _emscripten_has_threading_support=env._emscripten_has_threading_support;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_current_thread_status_js=env._emscripten_set_current_thread_status_js;
  var _emscripten_set_thread_name_js=env._emscripten_set_thread_name_js;
  var _emscripten_start_fetch=env._emscripten_start_fetch;
  var _emscripten_syscall=env._emscripten_syscall;
  var _exit=env._exit;
  var _gai_strerror=env._gai_strerror;
  var _getaddrinfo=env._getaddrinfo;
  var _getenv=env._getenv;
  var _gettimeofday=env._gettimeofday;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _pthread_create=env._pthread_create;
  var _pthread_exit=env._pthread_exit;
  var _pthread_getschedparam=env._pthread_getschedparam;
  var _pthread_join=env._pthread_join;
  var Atomics_load=global.Atomics.load;
  var Atomics_store=global.Atomics.store;
  var Atomics_exchange=global.Atomics.exchange;
  var Atomics_compareExchange=global.Atomics.compareExchange;
  var Atomics_add=global.Atomics.add;
  var Atomics_sub=global.Atomics.sub;
  var Atomics_and=global.Atomics.and;
  var Atomics_or=global.Atomics.or;
  var Atomics_xor=global.Atomics.xor;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _hgetc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4>>>0)>($7>>>0);
 $9 = $1;
 if ($8) {
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 1|0);
  HEAP32[$10>>2] = $12;
  $13 = HEAP8[$11>>0]|0;
  $14 = $13&255;
  $16 = $14;
  STACKTOP = sp;return ($16|0);
 } else {
  $15 = (_hgetc2($9)|0);
  $16 = $15;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _itf8_decode_crc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 24|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = HEAP32[$10>>2]|0;
 $12 = (_hgetc($11)|0);
 $8 = $12;
 $13 = $8;
 $14 = ($13|0)==(-1);
 if ($14) {
  $3 = -1;
  $149 = $3;
  STACKTOP = sp;return ($149|0);
 }
 $15 = $8;
 $16 = $15&255;
 HEAP8[$7>>0] = $16;
 $17 = $8;
 $18 = $17 >> 4;
 $19 = (152 + ($18<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $9 = $20;
 $21 = $8;
 $22 = $21 >> 4;
 $23 = (216 + ($22<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $8;
 $26 = $25 & $24;
 $8 = $26;
 $27 = $9;
 switch ($27|0) {
 case 0:  {
  $28 = $8;
  $29 = $5;
  HEAP32[$29>>2] = $28;
  $30 = $6;
  $31 = HEAP32[$30>>2]|0;
  $32 = (_crc32($31,$7,1)|0);
  $33 = $6;
  HEAP32[$33>>2] = $32;
  $3 = 1;
  $149 = $3;
  STACKTOP = sp;return ($149|0);
  break;
 }
 case 1:  {
  $34 = $8;
  $35 = $34 << 8;
  $36 = $4;
  $37 = HEAP32[$36>>2]|0;
  $38 = (_hgetc($37)|0);
  $39 = $38&255;
  $40 = ((($7)) + 1|0);
  HEAP8[$40>>0] = $39;
  $41 = $39&255;
  $42 = $35 | $41;
  $8 = $42;
  $43 = $8;
  $44 = $5;
  HEAP32[$44>>2] = $43;
  $45 = $6;
  $46 = HEAP32[$45>>2]|0;
  $47 = (_crc32($46,$7,2)|0);
  $48 = $6;
  HEAP32[$48>>2] = $47;
  $3 = 2;
  $149 = $3;
  STACKTOP = sp;return ($149|0);
  break;
 }
 case 2:  {
  $49 = $8;
  $50 = $49 << 8;
  $51 = $4;
  $52 = HEAP32[$51>>2]|0;
  $53 = (_hgetc($52)|0);
  $54 = $53&255;
  $55 = ((($7)) + 1|0);
  HEAP8[$55>>0] = $54;
  $56 = $54&255;
  $57 = $50 | $56;
  $8 = $57;
  $58 = $8;
  $59 = $58 << 8;
  $60 = $4;
  $61 = HEAP32[$60>>2]|0;
  $62 = (_hgetc($61)|0);
  $63 = $62&255;
  $64 = ((($7)) + 2|0);
  HEAP8[$64>>0] = $63;
  $65 = $63&255;
  $66 = $59 | $65;
  $8 = $66;
  $67 = $8;
  $68 = $5;
  HEAP32[$68>>2] = $67;
  $69 = $6;
  $70 = HEAP32[$69>>2]|0;
  $71 = (_crc32($70,$7,3)|0);
  $72 = $6;
  HEAP32[$72>>2] = $71;
  $3 = 3;
  $149 = $3;
  STACKTOP = sp;return ($149|0);
  break;
 }
 case 3:  {
  $73 = $8;
  $74 = $73 << 8;
  $75 = $4;
  $76 = HEAP32[$75>>2]|0;
  $77 = (_hgetc($76)|0);
  $78 = $77&255;
  $79 = ((($7)) + 1|0);
  HEAP8[$79>>0] = $78;
  $80 = $78&255;
  $81 = $74 | $80;
  $8 = $81;
  $82 = $8;
  $83 = $82 << 8;
  $84 = $4;
  $85 = HEAP32[$84>>2]|0;
  $86 = (_hgetc($85)|0);
  $87 = $86&255;
  $88 = ((($7)) + 2|0);
  HEAP8[$88>>0] = $87;
  $89 = $87&255;
  $90 = $83 | $89;
  $8 = $90;
  $91 = $8;
  $92 = $91 << 8;
  $93 = $4;
  $94 = HEAP32[$93>>2]|0;
  $95 = (_hgetc($94)|0);
  $96 = $95&255;
  $97 = ((($7)) + 3|0);
  HEAP8[$97>>0] = $96;
  $98 = $96&255;
  $99 = $92 | $98;
  $8 = $99;
  $100 = $8;
  $101 = $5;
  HEAP32[$101>>2] = $100;
  $102 = $6;
  $103 = HEAP32[$102>>2]|0;
  $104 = (_crc32($103,$7,4)|0);
  $105 = $6;
  HEAP32[$105>>2] = $104;
  $3 = 4;
  $149 = $3;
  STACKTOP = sp;return ($149|0);
  break;
 }
 case 4:  {
  $106 = $8;
  $107 = $106 << 8;
  $108 = $4;
  $109 = HEAP32[$108>>2]|0;
  $110 = (_hgetc($109)|0);
  $111 = $110&255;
  $112 = ((($7)) + 1|0);
  HEAP8[$112>>0] = $111;
  $113 = $111&255;
  $114 = $107 | $113;
  $8 = $114;
  $115 = $8;
  $116 = $115 << 8;
  $117 = $4;
  $118 = HEAP32[$117>>2]|0;
  $119 = (_hgetc($118)|0);
  $120 = $119&255;
  $121 = ((($7)) + 2|0);
  HEAP8[$121>>0] = $120;
  $122 = $120&255;
  $123 = $116 | $122;
  $8 = $123;
  $124 = $8;
  $125 = $124 << 8;
  $126 = $4;
  $127 = HEAP32[$126>>2]|0;
  $128 = (_hgetc($127)|0);
  $129 = $128&255;
  $130 = ((($7)) + 3|0);
  HEAP8[$130>>0] = $129;
  $131 = $129&255;
  $132 = $125 | $131;
  $8 = $132;
  $133 = $8;
  $134 = $133 << 4;
  $135 = $4;
  $136 = HEAP32[$135>>2]|0;
  $137 = (_hgetc($136)|0);
  $138 = $137&255;
  $139 = ((($7)) + 4|0);
  HEAP8[$139>>0] = $138;
  $140 = $138&255;
  $141 = $140 & 15;
  $142 = $134 | $141;
  $8 = $142;
  $143 = $8;
  $144 = $5;
  HEAP32[$144>>2] = $143;
  $145 = $6;
  $146 = HEAP32[$145>>2]|0;
  $147 = (_crc32($146,$7,5)|0);
  $148 = $6;
  HEAP32[$148>>2] = $147;
  break;
 }
 default: {
 }
 }
 $3 = 5;
 $149 = $3;
 STACKTOP = sp;return ($149|0);
}
function _ltf8_decode_crc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp + 24|0;
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = HEAP32[$9>>2]|0;
 $11 = (_hgetc($10)|0);
 $12 = $11&255;
 $13 = $12&255;
 $14 = $8;
 $15 = $14;
 HEAP32[$15>>2] = $13;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = $8;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20|0)==(-1);
 $25 = ($23|0)==(-1);
 $26 = $24 & $25;
 if ($26) {
  $3 = -1;
  $767 = $3;
  STACKTOP = sp;return ($767|0);
 }
 $27 = $8;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = $29&255;
 HEAP8[$7>>0] = $33;
 $34 = $8;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)<(0);
 $41 = ($36>>>0)<(128);
 $42 = ($39|0)==(0);
 $43 = $42 & $41;
 $44 = $40 | $43;
 $45 = $8;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (($45) + 4)|0;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 if ($44) {
  $51 = $5;
  $52 = $51;
  $53 = $52;
  HEAP32[$53>>2] = $47;
  $54 = (($52) + 4)|0;
  $55 = $54;
  HEAP32[$55>>2] = $50;
  $56 = $6;
  $57 = HEAP32[$56>>2]|0;
  $58 = (_crc32($57,$7,1)|0);
  $59 = $6;
  HEAP32[$59>>2] = $58;
  $3 = 1;
  $767 = $3;
  STACKTOP = sp;return ($767|0);
 }
 $60 = ($50|0)<(0);
 $61 = ($47>>>0)<(192);
 $62 = ($50|0)==(0);
 $63 = $62 & $61;
 $64 = $60 | $63;
 $65 = $8;
 $66 = $65;
 $67 = HEAP32[$66>>2]|0;
 $68 = (($65) + 4)|0;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 if ($64) {
  $71 = (_bitshift64Shl(($67|0),($70|0),8)|0);
  $72 = tempRet0;
  $73 = $4;
  $74 = HEAP32[$73>>2]|0;
  $75 = (_hgetc($74)|0);
  $76 = $75&255;
  $77 = ((($7)) + 1|0);
  HEAP8[$77>>0] = $76;
  $78 = $76&255;
  $79 = $71 | $78;
  $80 = $8;
  $81 = $80;
  HEAP32[$81>>2] = $79;
  $82 = (($80) + 4)|0;
  $83 = $82;
  HEAP32[$83>>2] = $72;
  $84 = $8;
  $85 = $84;
  $86 = HEAP32[$85>>2]|0;
  $87 = (($84) + 4)|0;
  $88 = $87;
  $89 = HEAP32[$88>>2]|0;
  $90 = $86 & 16383;
  $91 = $5;
  $92 = $91;
  $93 = $92;
  HEAP32[$93>>2] = $90;
  $94 = (($92) + 4)|0;
  $95 = $94;
  HEAP32[$95>>2] = 0;
  $96 = $6;
  $97 = HEAP32[$96>>2]|0;
  $98 = (_crc32($97,$7,2)|0);
  $99 = $6;
  HEAP32[$99>>2] = $98;
  $3 = 2;
  $767 = $3;
  STACKTOP = sp;return ($767|0);
 }
 $100 = ($70|0)<(0);
 $101 = ($67>>>0)<(224);
 $102 = ($70|0)==(0);
 $103 = $102 & $101;
 $104 = $100 | $103;
 $105 = $8;
 $106 = $105;
 $107 = HEAP32[$106>>2]|0;
 $108 = (($105) + 4)|0;
 $109 = $108;
 $110 = HEAP32[$109>>2]|0;
 if ($104) {
  $111 = (_bitshift64Shl(($107|0),($110|0),8)|0);
  $112 = tempRet0;
  $113 = $4;
  $114 = HEAP32[$113>>2]|0;
  $115 = (_hgetc($114)|0);
  $116 = $115&255;
  $117 = ((($7)) + 1|0);
  HEAP8[$117>>0] = $116;
  $118 = $116&255;
  $119 = $111 | $118;
  $120 = $8;
  $121 = $120;
  HEAP32[$121>>2] = $119;
  $122 = (($120) + 4)|0;
  $123 = $122;
  HEAP32[$123>>2] = $112;
  $124 = $8;
  $125 = $124;
  $126 = HEAP32[$125>>2]|0;
  $127 = (($124) + 4)|0;
  $128 = $127;
  $129 = HEAP32[$128>>2]|0;
  $130 = (_bitshift64Shl(($126|0),($129|0),8)|0);
  $131 = tempRet0;
  $132 = $4;
  $133 = HEAP32[$132>>2]|0;
  $134 = (_hgetc($133)|0);
  $135 = $134&255;
  $136 = ((($7)) + 2|0);
  HEAP8[$136>>0] = $135;
  $137 = $135&255;
  $138 = $130 | $137;
  $139 = $8;
  $140 = $139;
  HEAP32[$140>>2] = $138;
  $141 = (($139) + 4)|0;
  $142 = $141;
  HEAP32[$142>>2] = $131;
  $143 = $8;
  $144 = $143;
  $145 = HEAP32[$144>>2]|0;
  $146 = (($143) + 4)|0;
  $147 = $146;
  $148 = HEAP32[$147>>2]|0;
  $149 = $145 & 2097151;
  $150 = $5;
  $151 = $150;
  $152 = $151;
  HEAP32[$152>>2] = $149;
  $153 = (($151) + 4)|0;
  $154 = $153;
  HEAP32[$154>>2] = 0;
  $155 = $6;
  $156 = HEAP32[$155>>2]|0;
  $157 = (_crc32($156,$7,3)|0);
  $158 = $6;
  HEAP32[$158>>2] = $157;
  $3 = 3;
  $767 = $3;
  STACKTOP = sp;return ($767|0);
 }
 $159 = ($110|0)<(0);
 $160 = ($107>>>0)<(240);
 $161 = ($110|0)==(0);
 $162 = $161 & $160;
 $163 = $159 | $162;
 $164 = $8;
 $165 = $164;
 $166 = HEAP32[$165>>2]|0;
 $167 = (($164) + 4)|0;
 $168 = $167;
 $169 = HEAP32[$168>>2]|0;
 if ($163) {
  $170 = (_bitshift64Shl(($166|0),($169|0),8)|0);
  $171 = tempRet0;
  $172 = $4;
  $173 = HEAP32[$172>>2]|0;
  $174 = (_hgetc($173)|0);
  $175 = $174&255;
  $176 = ((($7)) + 1|0);
  HEAP8[$176>>0] = $175;
  $177 = $175&255;
  $178 = $170 | $177;
  $179 = $8;
  $180 = $179;
  HEAP32[$180>>2] = $178;
  $181 = (($179) + 4)|0;
  $182 = $181;
  HEAP32[$182>>2] = $171;
  $183 = $8;
  $184 = $183;
  $185 = HEAP32[$184>>2]|0;
  $186 = (($183) + 4)|0;
  $187 = $186;
  $188 = HEAP32[$187>>2]|0;
  $189 = (_bitshift64Shl(($185|0),($188|0),8)|0);
  $190 = tempRet0;
  $191 = $4;
  $192 = HEAP32[$191>>2]|0;
  $193 = (_hgetc($192)|0);
  $194 = $193&255;
  $195 = ((($7)) + 2|0);
  HEAP8[$195>>0] = $194;
  $196 = $194&255;
  $197 = $189 | $196;
  $198 = $8;
  $199 = $198;
  HEAP32[$199>>2] = $197;
  $200 = (($198) + 4)|0;
  $201 = $200;
  HEAP32[$201>>2] = $190;
  $202 = $8;
  $203 = $202;
  $204 = HEAP32[$203>>2]|0;
  $205 = (($202) + 4)|0;
  $206 = $205;
  $207 = HEAP32[$206>>2]|0;
  $208 = (_bitshift64Shl(($204|0),($207|0),8)|0);
  $209 = tempRet0;
  $210 = $4;
  $211 = HEAP32[$210>>2]|0;
  $212 = (_hgetc($211)|0);
  $213 = $212&255;
  $214 = ((($7)) + 3|0);
  HEAP8[$214>>0] = $213;
  $215 = $213&255;
  $216 = $208 | $215;
  $217 = $8;
  $218 = $217;
  HEAP32[$218>>2] = $216;
  $219 = (($217) + 4)|0;
  $220 = $219;
  HEAP32[$220>>2] = $209;
  $221 = $8;
  $222 = $221;
  $223 = HEAP32[$222>>2]|0;
  $224 = (($221) + 4)|0;
  $225 = $224;
  $226 = HEAP32[$225>>2]|0;
  $227 = $223 & 268435455;
  $228 = $5;
  $229 = $228;
  $230 = $229;
  HEAP32[$230>>2] = $227;
  $231 = (($229) + 4)|0;
  $232 = $231;
  HEAP32[$232>>2] = 0;
  $233 = $6;
  $234 = HEAP32[$233>>2]|0;
  $235 = (_crc32($234,$7,4)|0);
  $236 = $6;
  HEAP32[$236>>2] = $235;
  $3 = 4;
  $767 = $3;
  STACKTOP = sp;return ($767|0);
 }
 $237 = ($169|0)<(0);
 $238 = ($166>>>0)<(248);
 $239 = ($169|0)==(0);
 $240 = $239 & $238;
 $241 = $237 | $240;
 $242 = $8;
 $243 = $242;
 $244 = HEAP32[$243>>2]|0;
 $245 = (($242) + 4)|0;
 $246 = $245;
 $247 = HEAP32[$246>>2]|0;
 if ($241) {
  $248 = (_bitshift64Shl(($244|0),($247|0),8)|0);
  $249 = tempRet0;
  $250 = $4;
  $251 = HEAP32[$250>>2]|0;
  $252 = (_hgetc($251)|0);
  $253 = $252&255;
  $254 = ((($7)) + 1|0);
  HEAP8[$254>>0] = $253;
  $255 = $253&255;
  $256 = $248 | $255;
  $257 = $8;
  $258 = $257;
  HEAP32[$258>>2] = $256;
  $259 = (($257) + 4)|0;
  $260 = $259;
  HEAP32[$260>>2] = $249;
  $261 = $8;
  $262 = $261;
  $263 = HEAP32[$262>>2]|0;
  $264 = (($261) + 4)|0;
  $265 = $264;
  $266 = HEAP32[$265>>2]|0;
  $267 = (_bitshift64Shl(($263|0),($266|0),8)|0);
  $268 = tempRet0;
  $269 = $4;
  $270 = HEAP32[$269>>2]|0;
  $271 = (_hgetc($270)|0);
  $272 = $271&255;
  $273 = ((($7)) + 2|0);
  HEAP8[$273>>0] = $272;
  $274 = $272&255;
  $275 = $267 | $274;
  $276 = $8;
  $277 = $276;
  HEAP32[$277>>2] = $275;
  $278 = (($276) + 4)|0;
  $279 = $278;
  HEAP32[$279>>2] = $268;
  $280 = $8;
  $281 = $280;
  $282 = HEAP32[$281>>2]|0;
  $283 = (($280) + 4)|0;
  $284 = $283;
  $285 = HEAP32[$284>>2]|0;
  $286 = (_bitshift64Shl(($282|0),($285|0),8)|0);
  $287 = tempRet0;
  $288 = $4;
  $289 = HEAP32[$288>>2]|0;
  $290 = (_hgetc($289)|0);
  $291 = $290&255;
  $292 = ((($7)) + 3|0);
  HEAP8[$292>>0] = $291;
  $293 = $291&255;
  $294 = $286 | $293;
  $295 = $8;
  $296 = $295;
  HEAP32[$296>>2] = $294;
  $297 = (($295) + 4)|0;
  $298 = $297;
  HEAP32[$298>>2] = $287;
  $299 = $8;
  $300 = $299;
  $301 = HEAP32[$300>>2]|0;
  $302 = (($299) + 4)|0;
  $303 = $302;
  $304 = HEAP32[$303>>2]|0;
  $305 = (_bitshift64Shl(($301|0),($304|0),8)|0);
  $306 = tempRet0;
  $307 = $4;
  $308 = HEAP32[$307>>2]|0;
  $309 = (_hgetc($308)|0);
  $310 = $309&255;
  $311 = ((($7)) + 4|0);
  HEAP8[$311>>0] = $310;
  $312 = $310&255;
  $313 = $305 | $312;
  $314 = $8;
  $315 = $314;
  HEAP32[$315>>2] = $313;
  $316 = (($314) + 4)|0;
  $317 = $316;
  HEAP32[$317>>2] = $306;
  $318 = $8;
  $319 = $318;
  $320 = HEAP32[$319>>2]|0;
  $321 = (($318) + 4)|0;
  $322 = $321;
  $323 = HEAP32[$322>>2]|0;
  $324 = $323 & 7;
  $325 = $5;
  $326 = $325;
  $327 = $326;
  HEAP32[$327>>2] = $320;
  $328 = (($326) + 4)|0;
  $329 = $328;
  HEAP32[$329>>2] = $324;
  $330 = $6;
  $331 = HEAP32[$330>>2]|0;
  $332 = (_crc32($331,$7,5)|0);
  $333 = $6;
  HEAP32[$333>>2] = $332;
  $3 = 5;
  $767 = $3;
  STACKTOP = sp;return ($767|0);
 }
 $334 = ($247|0)<(0);
 $335 = ($244>>>0)<(252);
 $336 = ($247|0)==(0);
 $337 = $336 & $335;
 $338 = $334 | $337;
 $339 = $8;
 $340 = $339;
 $341 = HEAP32[$340>>2]|0;
 $342 = (($339) + 4)|0;
 $343 = $342;
 $344 = HEAP32[$343>>2]|0;
 if ($338) {
  $345 = (_bitshift64Shl(($341|0),($344|0),8)|0);
  $346 = tempRet0;
  $347 = $4;
  $348 = HEAP32[$347>>2]|0;
  $349 = (_hgetc($348)|0);
  $350 = $349&255;
  $351 = ((($7)) + 1|0);
  HEAP8[$351>>0] = $350;
  $352 = $350&255;
  $353 = $345 | $352;
  $354 = $8;
  $355 = $354;
  HEAP32[$355>>2] = $353;
  $356 = (($354) + 4)|0;
  $357 = $356;
  HEAP32[$357>>2] = $346;
  $358 = $8;
  $359 = $358;
  $360 = HEAP32[$359>>2]|0;
  $361 = (($358) + 4)|0;
  $362 = $361;
  $363 = HEAP32[$362>>2]|0;
  $364 = (_bitshift64Shl(($360|0),($363|0),8)|0);
  $365 = tempRet0;
  $366 = $4;
  $367 = HEAP32[$366>>2]|0;
  $368 = (_hgetc($367)|0);
  $369 = $368&255;
  $370 = ((($7)) + 2|0);
  HEAP8[$370>>0] = $369;
  $371 = $369&255;
  $372 = $364 | $371;
  $373 = $8;
  $374 = $373;
  HEAP32[$374>>2] = $372;
  $375 = (($373) + 4)|0;
  $376 = $375;
  HEAP32[$376>>2] = $365;
  $377 = $8;
  $378 = $377;
  $379 = HEAP32[$378>>2]|0;
  $380 = (($377) + 4)|0;
  $381 = $380;
  $382 = HEAP32[$381>>2]|0;
  $383 = (_bitshift64Shl(($379|0),($382|0),8)|0);
  $384 = tempRet0;
  $385 = $4;
  $386 = HEAP32[$385>>2]|0;
  $387 = (_hgetc($386)|0);
  $388 = $387&255;
  $389 = ((($7)) + 3|0);
  HEAP8[$389>>0] = $388;
  $390 = $388&255;
  $391 = $383 | $390;
  $392 = $8;
  $393 = $392;
  HEAP32[$393>>2] = $391;
  $394 = (($392) + 4)|0;
  $395 = $394;
  HEAP32[$395>>2] = $384;
  $396 = $8;
  $397 = $396;
  $398 = HEAP32[$397>>2]|0;
  $399 = (($396) + 4)|0;
  $400 = $399;
  $401 = HEAP32[$400>>2]|0;
  $402 = (_bitshift64Shl(($398|0),($401|0),8)|0);
  $403 = tempRet0;
  $404 = $4;
  $405 = HEAP32[$404>>2]|0;
  $406 = (_hgetc($405)|0);
  $407 = $406&255;
  $408 = ((($7)) + 4|0);
  HEAP8[$408>>0] = $407;
  $409 = $407&255;
  $410 = $402 | $409;
  $411 = $8;
  $412 = $411;
  HEAP32[$412>>2] = $410;
  $413 = (($411) + 4)|0;
  $414 = $413;
  HEAP32[$414>>2] = $403;
  $415 = $8;
  $416 = $415;
  $417 = HEAP32[$416>>2]|0;
  $418 = (($415) + 4)|0;
  $419 = $418;
  $420 = HEAP32[$419>>2]|0;
  $421 = (_bitshift64Shl(($417|0),($420|0),8)|0);
  $422 = tempRet0;
  $423 = $4;
  $424 = HEAP32[$423>>2]|0;
  $425 = (_hgetc($424)|0);
  $426 = $425&255;
  $427 = ((($7)) + 5|0);
  HEAP8[$427>>0] = $426;
  $428 = $426&255;
  $429 = $421 | $428;
  $430 = $8;
  $431 = $430;
  HEAP32[$431>>2] = $429;
  $432 = (($430) + 4)|0;
  $433 = $432;
  HEAP32[$433>>2] = $422;
  $434 = $8;
  $435 = $434;
  $436 = HEAP32[$435>>2]|0;
  $437 = (($434) + 4)|0;
  $438 = $437;
  $439 = HEAP32[$438>>2]|0;
  $440 = $439 & 1023;
  $441 = $5;
  $442 = $441;
  $443 = $442;
  HEAP32[$443>>2] = $436;
  $444 = (($442) + 4)|0;
  $445 = $444;
  HEAP32[$445>>2] = $440;
  $446 = $6;
  $447 = HEAP32[$446>>2]|0;
  $448 = (_crc32($447,$7,6)|0);
  $449 = $6;
  HEAP32[$449>>2] = $448;
  $3 = 6;
  $767 = $3;
  STACKTOP = sp;return ($767|0);
 }
 $450 = ($344|0)<(0);
 $451 = ($341>>>0)<(254);
 $452 = ($344|0)==(0);
 $453 = $452 & $451;
 $454 = $450 | $453;
 $455 = $8;
 $456 = $455;
 $457 = HEAP32[$456>>2]|0;
 $458 = (($455) + 4)|0;
 $459 = $458;
 $460 = HEAP32[$459>>2]|0;
 if ($454) {
  $461 = (_bitshift64Shl(($457|0),($460|0),8)|0);
  $462 = tempRet0;
  $463 = $4;
  $464 = HEAP32[$463>>2]|0;
  $465 = (_hgetc($464)|0);
  $466 = $465&255;
  $467 = ((($7)) + 1|0);
  HEAP8[$467>>0] = $466;
  $468 = $466&255;
  $469 = $461 | $468;
  $470 = $8;
  $471 = $470;
  HEAP32[$471>>2] = $469;
  $472 = (($470) + 4)|0;
  $473 = $472;
  HEAP32[$473>>2] = $462;
  $474 = $8;
  $475 = $474;
  $476 = HEAP32[$475>>2]|0;
  $477 = (($474) + 4)|0;
  $478 = $477;
  $479 = HEAP32[$478>>2]|0;
  $480 = (_bitshift64Shl(($476|0),($479|0),8)|0);
  $481 = tempRet0;
  $482 = $4;
  $483 = HEAP32[$482>>2]|0;
  $484 = (_hgetc($483)|0);
  $485 = $484&255;
  $486 = ((($7)) + 2|0);
  HEAP8[$486>>0] = $485;
  $487 = $485&255;
  $488 = $480 | $487;
  $489 = $8;
  $490 = $489;
  HEAP32[$490>>2] = $488;
  $491 = (($489) + 4)|0;
  $492 = $491;
  HEAP32[$492>>2] = $481;
  $493 = $8;
  $494 = $493;
  $495 = HEAP32[$494>>2]|0;
  $496 = (($493) + 4)|0;
  $497 = $496;
  $498 = HEAP32[$497>>2]|0;
  $499 = (_bitshift64Shl(($495|0),($498|0),8)|0);
  $500 = tempRet0;
  $501 = $4;
  $502 = HEAP32[$501>>2]|0;
  $503 = (_hgetc($502)|0);
  $504 = $503&255;
  $505 = ((($7)) + 3|0);
  HEAP8[$505>>0] = $504;
  $506 = $504&255;
  $507 = $499 | $506;
  $508 = $8;
  $509 = $508;
  HEAP32[$509>>2] = $507;
  $510 = (($508) + 4)|0;
  $511 = $510;
  HEAP32[$511>>2] = $500;
  $512 = $8;
  $513 = $512;
  $514 = HEAP32[$513>>2]|0;
  $515 = (($512) + 4)|0;
  $516 = $515;
  $517 = HEAP32[$516>>2]|0;
  $518 = (_bitshift64Shl(($514|0),($517|0),8)|0);
  $519 = tempRet0;
  $520 = $4;
  $521 = HEAP32[$520>>2]|0;
  $522 = (_hgetc($521)|0);
  $523 = $522&255;
  $524 = ((($7)) + 4|0);
  HEAP8[$524>>0] = $523;
  $525 = $523&255;
  $526 = $518 | $525;
  $527 = $8;
  $528 = $527;
  HEAP32[$528>>2] = $526;
  $529 = (($527) + 4)|0;
  $530 = $529;
  HEAP32[$530>>2] = $519;
  $531 = $8;
  $532 = $531;
  $533 = HEAP32[$532>>2]|0;
  $534 = (($531) + 4)|0;
  $535 = $534;
  $536 = HEAP32[$535>>2]|0;
  $537 = (_bitshift64Shl(($533|0),($536|0),8)|0);
  $538 = tempRet0;
  $539 = $4;
  $540 = HEAP32[$539>>2]|0;
  $541 = (_hgetc($540)|0);
  $542 = $541&255;
  $543 = ((($7)) + 5|0);
  HEAP8[$543>>0] = $542;
  $544 = $542&255;
  $545 = $537 | $544;
  $546 = $8;
  $547 = $546;
  HEAP32[$547>>2] = $545;
  $548 = (($546) + 4)|0;
  $549 = $548;
  HEAP32[$549>>2] = $538;
  $550 = $8;
  $551 = $550;
  $552 = HEAP32[$551>>2]|0;
  $553 = (($550) + 4)|0;
  $554 = $553;
  $555 = HEAP32[$554>>2]|0;
  $556 = (_bitshift64Shl(($552|0),($555|0),8)|0);
  $557 = tempRet0;
  $558 = $4;
  $559 = HEAP32[$558>>2]|0;
  $560 = (_hgetc($559)|0);
  $561 = $560&255;
  $562 = ((($7)) + 6|0);
  HEAP8[$562>>0] = $561;
  $563 = $561&255;
  $564 = $556 | $563;
  $565 = $8;
  $566 = $565;
  HEAP32[$566>>2] = $564;
  $567 = (($565) + 4)|0;
  $568 = $567;
  HEAP32[$568>>2] = $557;
  $569 = $8;
  $570 = $569;
  $571 = HEAP32[$570>>2]|0;
  $572 = (($569) + 4)|0;
  $573 = $572;
  $574 = HEAP32[$573>>2]|0;
  $575 = $574 & 131071;
  $576 = $5;
  $577 = $576;
  $578 = $577;
  HEAP32[$578>>2] = $571;
  $579 = (($577) + 4)|0;
  $580 = $579;
  HEAP32[$580>>2] = $575;
  $581 = $6;
  $582 = HEAP32[$581>>2]|0;
  $583 = (_crc32($582,$7,7)|0);
  $584 = $6;
  HEAP32[$584>>2] = $583;
  $3 = 7;
  $767 = $3;
  STACKTOP = sp;return ($767|0);
 }
 $585 = ($460|0)<(0);
 $586 = ($457>>>0)<(255);
 $587 = ($460|0)==(0);
 $588 = $587 & $586;
 $589 = $585 | $588;
 $590 = $8;
 $591 = $590;
 $592 = HEAP32[$591>>2]|0;
 $593 = (($590) + 4)|0;
 $594 = $593;
 $595 = HEAP32[$594>>2]|0;
 $596 = (_bitshift64Shl(($592|0),($595|0),8)|0);
 $597 = tempRet0;
 $598 = $4;
 $599 = HEAP32[$598>>2]|0;
 $600 = (_hgetc($599)|0);
 $601 = $600&255;
 $602 = ((($7)) + 1|0);
 HEAP8[$602>>0] = $601;
 $603 = $601&255;
 $604 = $596 | $603;
 $605 = $8;
 $606 = $605;
 HEAP32[$606>>2] = $604;
 $607 = (($605) + 4)|0;
 $608 = $607;
 HEAP32[$608>>2] = $597;
 $609 = $8;
 $610 = $609;
 $611 = HEAP32[$610>>2]|0;
 $612 = (($609) + 4)|0;
 $613 = $612;
 $614 = HEAP32[$613>>2]|0;
 $615 = (_bitshift64Shl(($611|0),($614|0),8)|0);
 $616 = tempRet0;
 $617 = $4;
 $618 = HEAP32[$617>>2]|0;
 $619 = (_hgetc($618)|0);
 $620 = $619&255;
 $621 = ((($7)) + 2|0);
 HEAP8[$621>>0] = $620;
 $622 = $620&255;
 $623 = $615 | $622;
 $624 = $8;
 $625 = $624;
 HEAP32[$625>>2] = $623;
 $626 = (($624) + 4)|0;
 $627 = $626;
 HEAP32[$627>>2] = $616;
 $628 = $8;
 $629 = $628;
 $630 = HEAP32[$629>>2]|0;
 $631 = (($628) + 4)|0;
 $632 = $631;
 $633 = HEAP32[$632>>2]|0;
 $634 = (_bitshift64Shl(($630|0),($633|0),8)|0);
 $635 = tempRet0;
 $636 = $4;
 $637 = HEAP32[$636>>2]|0;
 $638 = (_hgetc($637)|0);
 $639 = $638&255;
 $640 = ((($7)) + 3|0);
 HEAP8[$640>>0] = $639;
 $641 = $639&255;
 $642 = $634 | $641;
 $643 = $8;
 $644 = $643;
 HEAP32[$644>>2] = $642;
 $645 = (($643) + 4)|0;
 $646 = $645;
 HEAP32[$646>>2] = $635;
 $647 = $8;
 $648 = $647;
 $649 = HEAP32[$648>>2]|0;
 $650 = (($647) + 4)|0;
 $651 = $650;
 $652 = HEAP32[$651>>2]|0;
 $653 = (_bitshift64Shl(($649|0),($652|0),8)|0);
 $654 = tempRet0;
 $655 = $4;
 $656 = HEAP32[$655>>2]|0;
 $657 = (_hgetc($656)|0);
 $658 = $657&255;
 $659 = ((($7)) + 4|0);
 HEAP8[$659>>0] = $658;
 $660 = $658&255;
 $661 = $653 | $660;
 $662 = $8;
 $663 = $662;
 HEAP32[$663>>2] = $661;
 $664 = (($662) + 4)|0;
 $665 = $664;
 HEAP32[$665>>2] = $654;
 $666 = $8;
 $667 = $666;
 $668 = HEAP32[$667>>2]|0;
 $669 = (($666) + 4)|0;
 $670 = $669;
 $671 = HEAP32[$670>>2]|0;
 $672 = (_bitshift64Shl(($668|0),($671|0),8)|0);
 $673 = tempRet0;
 $674 = $4;
 $675 = HEAP32[$674>>2]|0;
 $676 = (_hgetc($675)|0);
 $677 = $676&255;
 $678 = ((($7)) + 5|0);
 HEAP8[$678>>0] = $677;
 $679 = $677&255;
 $680 = $672 | $679;
 $681 = $8;
 $682 = $681;
 HEAP32[$682>>2] = $680;
 $683 = (($681) + 4)|0;
 $684 = $683;
 HEAP32[$684>>2] = $673;
 $685 = $8;
 $686 = $685;
 $687 = HEAP32[$686>>2]|0;
 $688 = (($685) + 4)|0;
 $689 = $688;
 $690 = HEAP32[$689>>2]|0;
 $691 = (_bitshift64Shl(($687|0),($690|0),8)|0);
 $692 = tempRet0;
 $693 = $4;
 $694 = HEAP32[$693>>2]|0;
 $695 = (_hgetc($694)|0);
 $696 = $695&255;
 $697 = ((($7)) + 6|0);
 HEAP8[$697>>0] = $696;
 $698 = $696&255;
 $699 = $691 | $698;
 $700 = $8;
 $701 = $700;
 HEAP32[$701>>2] = $699;
 $702 = (($700) + 4)|0;
 $703 = $702;
 HEAP32[$703>>2] = $692;
 $704 = $8;
 $705 = $704;
 $706 = HEAP32[$705>>2]|0;
 $707 = (($704) + 4)|0;
 $708 = $707;
 $709 = HEAP32[$708>>2]|0;
 $710 = (_bitshift64Shl(($706|0),($709|0),8)|0);
 $711 = tempRet0;
 $712 = $4;
 $713 = HEAP32[$712>>2]|0;
 $714 = (_hgetc($713)|0);
 $715 = $714&255;
 $716 = ((($7)) + 7|0);
 HEAP8[$716>>0] = $715;
 $717 = $715&255;
 $718 = $710 | $717;
 $719 = $8;
 $720 = $719;
 HEAP32[$720>>2] = $718;
 $721 = (($719) + 4)|0;
 $722 = $721;
 HEAP32[$722>>2] = $711;
 $723 = $8;
 $724 = $723;
 $725 = HEAP32[$724>>2]|0;
 $726 = (($723) + 4)|0;
 $727 = $726;
 $728 = HEAP32[$727>>2]|0;
 if ($589) {
  $729 = $728 & 16777215;
  $730 = $5;
  $731 = $730;
  $732 = $731;
  HEAP32[$732>>2] = $725;
  $733 = (($731) + 4)|0;
  $734 = $733;
  HEAP32[$734>>2] = $729;
  $735 = $6;
  $736 = HEAP32[$735>>2]|0;
  $737 = (_crc32($736,$7,8)|0);
  $738 = $6;
  HEAP32[$738>>2] = $737;
  $3 = 8;
  $767 = $3;
  STACKTOP = sp;return ($767|0);
 } else {
  $739 = (_bitshift64Shl(($725|0),($728|0),8)|0);
  $740 = tempRet0;
  $741 = $4;
  $742 = HEAP32[$741>>2]|0;
  $743 = (_hgetc($742)|0);
  $744 = $743&255;
  $745 = ((($7)) + 8|0);
  HEAP8[$745>>0] = $744;
  $746 = $744&255;
  $747 = $739 | $746;
  $748 = $8;
  $749 = $748;
  HEAP32[$749>>2] = $747;
  $750 = (($748) + 4)|0;
  $751 = $750;
  HEAP32[$751>>2] = $740;
  $752 = $6;
  $753 = HEAP32[$752>>2]|0;
  $754 = (_crc32($753,$7,9)|0);
  $755 = $6;
  HEAP32[$755>>2] = $754;
  $756 = $8;
  $757 = $756;
  $758 = HEAP32[$757>>2]|0;
  $759 = (($756) + 4)|0;
  $760 = $759;
  $761 = HEAP32[$760>>2]|0;
  $762 = $5;
  $763 = $762;
  $764 = $763;
  HEAP32[$764>>2] = $758;
  $765 = (($763) + 4)|0;
  $766 = $765;
  HEAP32[$766>>2] = $761;
  $3 = 9;
  $767 = $3;
  STACKTOP = sp;return ($767|0);
 }
 return (0)|0;
}
function _int32_decode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = (_hread($7,$5,4)|0);
 $9 = (4)!=($8|0);
 if ($9) {
  $2 = -1;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 } else {
  $10 = HEAP32[$5>>2]|0;
  $11 = $4;
  HEAP32[$11>>2] = $10;
  $2 = 4;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _hread($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $9;
 $14 = $12;
 $15 = (($13) - ($14))|0;
 $6 = $15;
 $16 = $6;
 $17 = $5;
 $18 = ($16>>>0)>($17>>>0);
 if ($18) {
  $19 = $5;
  $6 = $19;
 }
 $20 = $4;
 $21 = $3;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $6;
 _memcpy(($20|0),($23|0),($24|0))|0;
 $25 = $6;
 $26 = $3;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($25)|0);
 HEAP32[$27>>2] = $29;
 $30 = $6;
 $31 = $5;
 $32 = ($30|0)==($31|0);
 if ($32) {
  $33 = $6;
  $39 = $33;
  STACKTOP = sp;return ($39|0);
 } else {
  $34 = $3;
  $35 = $4;
  $36 = $5;
  $37 = $6;
  $38 = (_hread2($34,$35,$36,$37)|0);
  $39 = $38;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _int32_get_blk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = ((($8)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) - ($10))|0;
 $12 = ($11>>>0)<(4);
 if ($12) {
  $2 = -1;
  $63 = $2;
  STACKTOP = sp;return ($63|0);
 } else {
  $13 = $3;
  $14 = ((($13)) + 32|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $3;
  $17 = ((($16)) + 40|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($15) + ($18)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $3;
  $23 = ((($22)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $3;
  $26 = ((($25)) + 40|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  $29 = (($24) + ($28)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = $31 << 8;
  $33 = $21 | $32;
  $34 = $3;
  $35 = ((($34)) + 32|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $3;
  $38 = ((($37)) + 40|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + 2)|0;
  $41 = (($36) + ($40)|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = $43 << 16;
  $45 = $33 | $44;
  $46 = $3;
  $47 = ((($46)) + 32|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $3;
  $50 = ((($49)) + 40|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + 3)|0;
  $53 = (($48) + ($52)|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = $55 << 24;
  $57 = $45 | $56;
  $58 = $4;
  HEAP32[$58>>2] = $57;
  $59 = $3;
  $60 = ((($59)) + 40|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + 4)|0;
  HEAP32[$60>>2] = $62;
  $2 = 4;
  $63 = $2;
  STACKTOP = sp;return ($63|0);
 }
 return (0)|0;
}
function _zlib_mem_inflate($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0;
 var $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $7 = sp + 32|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 $9 = 0;
 $13 = $5;
 $14 = (+($13>>>0));
 $15 = $14 * 1.2;
 $16 = $15 + 100.0;
 $17 = (~~(($16)));
 $9 = $17;
 $18 = (_malloc($17)|0);
 $8 = $18;
 $19 = $8;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  $3 = 0;
  $88 = $3;
  STACKTOP = sp;return ($88|0);
 }
 $21 = ((($7)) + 32|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($7)) + 36|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($7)) + 40|0);
 HEAP32[$23>>2] = 0;
 $24 = $4;
 HEAP32[$7>>2] = $24;
 $25 = $5;
 $26 = ((($7)) + 4|0);
 HEAP32[$26>>2] = $25;
 $27 = ((($7)) + 8|0);
 HEAP32[$27>>2] = 0;
 $28 = $8;
 $29 = ((($7)) + 12|0);
 HEAP32[$29>>2] = $28;
 $30 = $9;
 $31 = ((($7)) + 16|0);
 HEAP32[$31>>2] = $30;
 $32 = ((($7)) + 20|0);
 HEAP32[$32>>2] = 0;
 $33 = (_inflateInit2_($7,47,14925,56)|0);
 $10 = $33;
 $34 = $10;
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = HEAP32[2398]|0;
  $37 = ((($7)) + 24|0);
  $38 = HEAP32[$37>>2]|0;
  HEAP32[$vararg_buffer>>2] = $38;
  (_fprintf($36,13898,$vararg_buffer)|0);
  $39 = $8;
  _free($39);
  $3 = 0;
  $88 = $3;
  STACKTOP = sp;return ($88|0);
 }
 while(1) {
  $40 = ((($7)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0);
  if (!($42)) {
   label = 14;
   break;
  }
  $43 = $8;
  $44 = ((($7)) + 20|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($43) + ($45)|0);
  $47 = ((($7)) + 12|0);
  HEAP32[$47>>2] = $46;
  $48 = (_inflate($7,0)|0);
  $10 = $48;
  $49 = $10;
  $50 = ($49|0)==(1);
  if ($50) {
   label = 14;
   break;
  }
  $51 = $10;
  $52 = ($51|0)!=(0);
  if ($52) {
   label = 8;
   break;
  }
  $59 = ((($7)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (+($60>>>0));
  $62 = ((($7)) + 8|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (+($63>>>0));
  $65 = $61 / $64;
  $66 = ((($7)) + 20|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (+($67>>>0));
  $69 = $65 * $68;
  $70 = $69 + 100.0;
  $71 = (~~(($70)));
  $12 = $71;
  $72 = $8;
  $11 = $72;
  $73 = $12;
  $74 = $9;
  $75 = (($74) + ($73))|0;
  $9 = $75;
  $76 = (_realloc($72,$75)|0);
  $8 = $76;
  $77 = $8;
  $78 = ($77|0)!=(0|0);
  if (!($78)) {
   label = 12;
   break;
  }
  $80 = $12;
  $81 = ((($7)) + 16|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($82) + ($80))|0;
  HEAP32[$81>>2] = $83;
 }
 if ((label|0) == 8) {
  $53 = HEAP32[2398]|0;
  $54 = ((($7)) + 24|0);
  $55 = HEAP32[$54>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $55;
  (_fprintf($53,13926,$vararg_buffer1)|0);
  $56 = $8;
  $57 = ($56|0)!=(0|0);
  if ($57) {
   $58 = $8;
   _free($58);
  }
  $3 = 0;
  $88 = $3;
  STACKTOP = sp;return ($88|0);
 }
 else if ((label|0) == 12) {
  $79 = $11;
  _free($79);
  $3 = 0;
  $88 = $3;
  STACKTOP = sp;return ($88|0);
 }
 else if ((label|0) == 14) {
  (_inflateEnd($7)|0);
  $84 = ((($7)) + 20|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $6;
  HEAP32[$86>>2] = $85;
  $87 = $8;
  $3 = $87;
  $88 = $3;
  STACKTOP = sp;return ($88|0);
 }
 return (0)|0;
}
function _cram_read_block($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 20|0;
 $5 = sp + 4|0;
 $2 = $0;
 $6 = (_malloc(48)|0);
 $3 = $6;
 HEAP32[$5>>2] = 0;
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $1 = 0;
  $153 = $1;
  STACKTOP = sp;return ($153|0);
 }
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $11 = (_hgetc($10)|0);
 $12 = $3;
 HEAP32[$12>>2] = $11;
 $13 = (-1)==($11|0);
 $14 = $3;
 if ($13) {
  _free($14);
  $1 = 0;
  $153 = $1;
  STACKTOP = sp;return ($153|0);
 }
 $15 = HEAP32[$14>>2]|0;
 $16 = $15&255;
 HEAP8[$4>>0] = $16;
 $17 = HEAP32[$5>>2]|0;
 $18 = (_crc32($17,$4,1)|0);
 HEAP32[$5>>2] = $18;
 $19 = $2;
 $20 = HEAP32[$19>>2]|0;
 $21 = (_hgetc($20)|0);
 $22 = $3;
 $23 = ((($22)) + 8|0);
 HEAP32[$23>>2] = $21;
 $24 = (-1)==($21|0);
 $25 = $3;
 if ($24) {
  _free($25);
  $1 = 0;
  $153 = $1;
  STACKTOP = sp;return ($153|0);
 }
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27&255;
 HEAP8[$4>>0] = $28;
 $29 = HEAP32[$5>>2]|0;
 $30 = (_crc32($29,$4,1)|0);
 HEAP32[$5>>2] = $30;
 $31 = $2;
 $32 = $3;
 $33 = ((($32)) + 12|0);
 $34 = (_itf8_decode_crc($31,$33,$5)|0);
 $35 = (-1)==($34|0);
 if ($35) {
  $36 = $3;
  _free($36);
  $1 = 0;
  $153 = $1;
  STACKTOP = sp;return ($153|0);
 }
 $37 = $2;
 $38 = $3;
 $39 = ((($38)) + 16|0);
 $40 = (_itf8_decode_crc($37,$39,$5)|0);
 $41 = (-1)==($40|0);
 if ($41) {
  $42 = $3;
  _free($42);
  $1 = 0;
  $153 = $1;
  STACKTOP = sp;return ($153|0);
 }
 $43 = $2;
 $44 = $3;
 $45 = ((($44)) + 20|0);
 $46 = (_itf8_decode_crc($43,$45,$5)|0);
 $47 = (-1)==($46|0);
 $48 = $3;
 if ($47) {
  _free($48);
  $1 = 0;
  $153 = $1;
  STACKTOP = sp;return ($153|0);
 }
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(0);
 $51 = $3;
 if ($50) {
  $52 = ((($51)) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $3;
  $55 = ((($54)) + 36|0);
  HEAP32[$55>>2] = $53;
  $56 = $3;
  $57 = ((($56)) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (_malloc($58)|0);
  $60 = $3;
  $61 = ((($60)) + 32|0);
  HEAP32[$61>>2] = $59;
  $62 = ($59|0)!=(0|0);
  $63 = $3;
  if (!($62)) {
   _free($63);
   $1 = 0;
   $153 = $1;
   STACKTOP = sp;return ($153|0);
  }
  $64 = ((($63)) + 20|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $2;
  $67 = HEAP32[$66>>2]|0;
  $68 = $3;
  $69 = ((($68)) + 32|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $3;
  $72 = ((($71)) + 20|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (_hread($67,$70,$73)|0);
  $75 = ($65|0)!=($74|0);
  if ($75) {
   $76 = $3;
   $77 = ((($76)) + 32|0);
   $78 = HEAP32[$77>>2]|0;
   _free($78);
   $79 = $3;
   _free($79);
   $1 = 0;
   $153 = $1;
   STACKTOP = sp;return ($153|0);
  }
 } else {
  $80 = ((($51)) + 16|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $3;
  $83 = ((($82)) + 36|0);
  HEAP32[$83>>2] = $81;
  $84 = $3;
  $85 = ((($84)) + 16|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (_malloc($86)|0);
  $88 = $3;
  $89 = ((($88)) + 32|0);
  HEAP32[$89>>2] = $87;
  $90 = ($87|0)!=(0|0);
  $91 = $3;
  if (!($90)) {
   _free($91);
   $1 = 0;
   $153 = $1;
   STACKTOP = sp;return ($153|0);
  }
  $92 = ((($91)) + 16|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $2;
  $95 = HEAP32[$94>>2]|0;
  $96 = $3;
  $97 = ((($96)) + 32|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $3;
  $100 = ((($99)) + 16|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (_hread($95,$98,$101)|0);
  $103 = ($93|0)!=($102|0);
  if ($103) {
   $104 = $3;
   $105 = ((($104)) + 32|0);
   $106 = HEAP32[$105>>2]|0;
   _free($106);
   $107 = $3;
   _free($107);
   $1 = 0;
   $153 = $1;
   STACKTOP = sp;return ($153|0);
  }
 }
 $108 = $2;
 $109 = ((($108)) + 8|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 >> 8;
 $112 = ($111|0)>=(3);
 if ($112) {
  $113 = $2;
  $114 = $3;
  $115 = ((($114)) + 24|0);
  $116 = (_int32_decode($113,$115)|0);
  $117 = (-1)==($116|0);
  if ($117) {
   $118 = $3;
   _free($118);
   $1 = 0;
   $153 = $1;
   STACKTOP = sp;return ($153|0);
  }
  $119 = HEAP32[$5>>2]|0;
  $120 = $3;
  $121 = ((($120)) + 32|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ($122|0)!=(0|0);
  if ($123) {
   $124 = $3;
   $125 = ((($124)) + 32|0);
   $126 = HEAP32[$125>>2]|0;
   $130 = $126;
  } else {
   $130 = 27056;
  }
  $127 = $3;
  $128 = ((($127)) + 36|0);
  $129 = HEAP32[$128>>2]|0;
  $131 = (_crc32($119,$130,$129)|0);
  HEAP32[$5>>2] = $131;
  $132 = HEAP32[$5>>2]|0;
  $133 = $3;
  $134 = ((($133)) + 24|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = ($132|0)!=($135|0);
  if ($136) {
   $137 = HEAP32[2398]|0;
   (_fprintf($137,13950,$vararg_buffer)|0);
   $138 = $3;
   $139 = ((($138)) + 32|0);
   $140 = HEAP32[$139>>2]|0;
   _free($140);
   $141 = $3;
   _free($141);
   $1 = 0;
   $153 = $1;
   STACKTOP = sp;return ($153|0);
  }
 }
 $142 = $3;
 $143 = HEAP32[$142>>2]|0;
 $144 = $3;
 $145 = ((($144)) + 4|0);
 HEAP32[$145>>2] = $143;
 $146 = $3;
 $147 = ((($146)) + 28|0);
 HEAP32[$147>>2] = 0;
 $148 = $3;
 $149 = ((($148)) + 40|0);
 HEAP32[$149>>2] = 0;
 $150 = $3;
 $151 = ((($150)) + 44|0);
 HEAP32[$151>>2] = 7;
 $152 = $3;
 $1 = $152;
 $153 = $1;
 STACKTOP = sp;return ($153|0);
}
function _cram_free_block($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
 }
 $11 = $1;
 _free($11);
 STACKTOP = sp;return;
}
function _cram_uncompress_block($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 20|0;
 $6 = sp + 12|0;
 $2 = $0;
 HEAP32[$4>>2] = 0;
 $7 = $2;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 $11 = $2;
 if ($10) {
  HEAP32[$11>>2] = 0;
  $1 = 0;
  $68 = $1;
  STACKTOP = sp;return ($68|0);
 }
 $12 = HEAP32[$11>>2]|0;
 L5: do {
  switch ($12|0) {
  case 0:  {
   $1 = 0;
   $68 = $1;
   STACKTOP = sp;return ($68|0);
   break;
  }
  case 1:  {
   $13 = $2;
   $14 = ((($13)) + 32|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $2;
   $17 = ((($16)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (_zlib_mem_inflate($15,$18,$4)|0);
   $3 = $19;
   $20 = $3;
   $21 = ($20|0)!=(0|0);
   if (!($21)) {
    $1 = -1;
    $68 = $1;
    STACKTOP = sp;return ($68|0);
   }
   $22 = HEAP32[$4>>2]|0;
   $23 = $2;
   $24 = ((($23)) + 20|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($22|0)!=($25|0);
   if (!($26)) {
    $28 = $2;
    $29 = ((($28)) + 32|0);
    $30 = HEAP32[$29>>2]|0;
    _free($30);
    $31 = $3;
    $32 = $2;
    $33 = ((($32)) + 32|0);
    HEAP32[$33>>2] = $31;
    $34 = HEAP32[$4>>2]|0;
    $35 = $2;
    $36 = ((($35)) + 36|0);
    HEAP32[$36>>2] = $34;
    $37 = $2;
    HEAP32[$37>>2] = 0;
    break L5;
   }
   $27 = $3;
   _free($27);
   $1 = -1;
   $68 = $1;
   STACKTOP = sp;return ($68|0);
   break;
  }
  case 2:  {
   $38 = HEAP32[2398]|0;
   (_fprintf($38,13993,$vararg_buffer)|0);
   $1 = -1;
   $68 = $1;
   STACKTOP = sp;return ($68|0);
   break;
  }
  case 3:  {
   $39 = HEAP32[2398]|0;
   (_fprintf($39,14077,$vararg_buffer1)|0);
   $1 = -1;
   $68 = $1;
   STACKTOP = sp;return ($68|0);
   break;
  }
  case 4:  {
   $40 = $2;
   $41 = ((($40)) + 20|0);
   $42 = HEAP32[$41>>2]|0;
   $5 = $42;
   $43 = $2;
   $44 = ((($43)) + 32|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $2;
   $47 = ((($46)) + 16|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (_rans_uncompress($45,$48,$6)|0);
   $3 = $49;
   $50 = $3;
   $51 = ($50|0)!=(0|0);
   if ($51) {
    $52 = $5;
    $53 = HEAP32[$6>>2]|0;
    $54 = ($52|0)!=($53|0);
    if (!($54)) {
     $55 = $2;
     $56 = ((($55)) + 32|0);
     $57 = HEAP32[$56>>2]|0;
     _free($57);
     $58 = $3;
     $59 = $2;
     $60 = ((($59)) + 32|0);
     HEAP32[$60>>2] = $58;
     $61 = HEAP32[$6>>2]|0;
     $62 = $2;
     $63 = ((($62)) + 36|0);
     HEAP32[$63>>2] = $61;
     $64 = $2;
     HEAP32[$64>>2] = 0;
     $65 = HEAP32[$6>>2]|0;
     $66 = $2;
     $67 = ((($66)) + 20|0);
     HEAP32[$67>>2] = $65;
     break L5;
    }
   }
   $1 = -1;
   $68 = $1;
   STACKTOP = sp;return ($68|0);
   break;
  }
  default: {
   $1 = -1;
   $68 = $1;
   STACKTOP = sp;return ($68|0);
  }
  }
 } while(0);
 $1 = 0;
 $68 = $1;
 STACKTOP = sp;return ($68|0);
}
function _cram_new_metrics() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = (_calloc(1,120)|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  HEAP32[$5>>2] = 2;
  $6 = $1;
  $7 = ((($6)) + 4|0);
  HEAP32[$7>>2] = 50;
  $8 = $1;
  $9 = ((($8)) + 32|0);
  HEAP32[$9>>2] = 0;
  $10 = $1;
  $11 = ((($10)) + 36|0);
  HEAP32[$11>>2] = 0;
  $12 = $1;
  $13 = ((($12)) + 64|0);
  HEAP32[$13>>2] = 0;
  $14 = $1;
  $0 = $14;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 } else {
  $0 = 0;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _refs_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -1)|0;
 HEAP32[$5>>2] = $7;
 $8 = ($7|0)<=(0);
 $9 = $1;
 $10 = ($9|0)!=(0|0);
 $or$cond = $8 & $10;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $1;
  $15 = HEAP32[$14>>2]|0;
  _string_pool_destroy($15);
 }
 $16 = $1;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $2 = 0;
  while(1) {
   $20 = $2;
   $21 = $1;
   $22 = ((($21)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$23>>2]|0;
   $25 = ($20|0)!=($24|0);
   $26 = $1;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   if (!($25)) {
    break;
   }
   $29 = ((($28)) + 16|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $2;
   $32 = $31 >>> 4;
   $33 = (($30) + ($32<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $2;
   $36 = $35 & 15;
   $37 = $36 << 1;
   $38 = $34 >>> $37;
   $39 = $38 & 3;
   $40 = ($39|0)!=(0);
   if (!($40)) {
    $41 = $1;
    $42 = ((($41)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ((($43)) + 24|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = $2;
    $47 = (($45) + ($46<<2)|0);
    $48 = HEAP32[$47>>2]|0;
    $3 = $48;
    $49 = ($48|0)!=(0|0);
    if ($49) {
     $50 = $3;
     _ref_entry_free_seq($50);
     $51 = $3;
     _free($51);
    }
   }
   $52 = $2;
   $53 = (($52) + 1)|0;
   $2 = $53;
  }
  _kh_destroy_refs($28);
 }
 $54 = $1;
 $55 = ((($54)) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($56|0)!=(0|0);
 if ($57) {
  $58 = $1;
  $59 = ((($58)) + 8|0);
  $60 = HEAP32[$59>>2]|0;
  _free($60);
 }
 $61 = $1;
 $62 = ((($61)) + 20|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)!=(0|0);
 if ($64) {
  $65 = $1;
  $66 = ((($65)) + 20|0);
  $67 = HEAP32[$66>>2]|0;
  (_bgzf_close($67)|0);
 }
 $68 = $1;
 _free($68);
 STACKTOP = sp;return;
}
function _ref_entry_free_seq($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  (_mfclose($8)|0);
 }
 $9 = $1;
 $10 = ((($9)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $1;
  $14 = ((($13)) + 44|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0|0);
  if (!($16)) {
   $17 = $1;
   $18 = ((($17)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   _free($19);
  }
 }
 $20 = $1;
 $21 = ((($20)) + 40|0);
 HEAP32[$21>>2] = 0;
 $22 = $1;
 $23 = ((($22)) + 44|0);
 HEAP32[$23>>2] = 0;
 STACKTOP = sp;return;
}
function _kh_destroy_refs($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _refs2id($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $3;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  _free($13);
 }
 $14 = $3;
 $15 = ((($14)) + 56|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $3;
  $19 = ((($18)) + 56|0);
  HEAP32[$19>>2] = 0;
 }
 $20 = $4;
 $21 = ((($20)) + 28|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (_calloc($22,4)|0);
 $24 = $3;
 $25 = ((($24)) + 8|0);
 HEAP32[$25>>2] = $23;
 $26 = $3;
 $27 = ((($26)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if (!($29)) {
  $2 = -1;
  $78 = $2;
  STACKTOP = sp;return ($78|0);
 }
 $30 = $4;
 $31 = ((($30)) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $3;
 $34 = ((($33)) + 12|0);
 HEAP32[$34>>2] = $32;
 $5 = 0;
 while(1) {
  $35 = $5;
  $36 = $4;
  $37 = ((($36)) + 28|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($35|0)<($38|0);
  if (!($39)) {
   break;
  }
  $40 = $3;
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $4;
  $44 = ((($43)) + 32|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $5;
  $47 = (($45) + ($46<<4)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (_kh_get_refs($42,$48)|0);
  $6 = $49;
  $50 = $6;
  $51 = $3;
  $52 = ((($51)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = HEAP32[$53>>2]|0;
  $55 = ($50|0)!=($54|0);
  if ($55) {
   $56 = $3;
   $57 = ((($56)) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ((($58)) + 24|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $6;
   $62 = (($60) + ($61<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $3;
   $65 = ((($64)) + 8|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $5;
   $68 = (($66) + ($67<<2)|0);
   HEAP32[$68>>2] = $63;
  } else {
   $69 = HEAP32[2398]|0;
   $70 = $4;
   $71 = ((($70)) + 32|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $5;
   $74 = (($72) + ($73<<4)|0);
   $75 = HEAP32[$74>>2]|0;
   HEAP32[$vararg_buffer>>2] = $75;
   (_fprintf($69,14160,$vararg_buffer)|0);
  }
  $76 = $5;
  $77 = (($76) + 1)|0;
  $5 = $77;
 }
 $2 = 0;
 $78 = $2;
 STACKTOP = sp;return ($78|0);
}
function _kh_get_refs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $2 = 0;
  $86 = $2;
  STACKTOP = sp;return ($86|0);
 }
 $9 = 0;
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - 1)|0;
 $8 = $15;
 $16 = $4;
 $17 = (___ac_X31_hash_string($16)|0);
 $5 = $17;
 $18 = $5;
 $19 = $8;
 $20 = $18 & $19;
 $6 = $20;
 $21 = $6;
 $7 = $21;
 while(1) {
  $22 = $3;
  $23 = ((($22)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $6;
  $26 = $25 >>> 4;
  $27 = (($24) + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $6;
  $30 = $29 & 15;
  $31 = $30 << 1;
  $32 = $28 >>> $31;
  $33 = $32 & 2;
  $34 = ($33|0)!=(0);
  if ($34) {
   break;
  }
  $35 = $3;
  $36 = ((($35)) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $6;
  $39 = $38 >>> 4;
  $40 = (($37) + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $6;
  $43 = $42 & 15;
  $44 = $43 << 1;
  $45 = $41 >>> $44;
  $46 = $45 & 1;
  $47 = ($46|0)!=(0);
  if (!($47)) {
   $48 = $3;
   $49 = ((($48)) + 20|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $6;
   $52 = (($50) + ($51<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $4;
   $55 = (_strcmp($53,$54)|0);
   $56 = ($55|0)==(0);
   $57 = $56 ^ 1;
   if (!($57)) {
    break;
   }
  }
  $58 = $6;
  $59 = $9;
  $60 = (($59) + 1)|0;
  $9 = $60;
  $61 = (($58) + ($60))|0;
  $62 = $8;
  $63 = $61 & $62;
  $6 = $63;
  $64 = $6;
  $65 = $7;
  $66 = ($64|0)==($65|0);
  if ($66) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  $67 = $3;
  $68 = HEAP32[$67>>2]|0;
  $2 = $68;
  $86 = $2;
  STACKTOP = sp;return ($86|0);
 }
 $69 = $3;
 $70 = ((($69)) + 16|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $6;
 $73 = $72 >>> 4;
 $74 = (($71) + ($73<<2)|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $6;
 $77 = $76 & 15;
 $78 = $77 << 1;
 $79 = $75 >>> $78;
 $80 = $79 & 3;
 $81 = ($80|0)!=(0);
 if ($81) {
  $82 = $3;
  $83 = HEAP32[$82>>2]|0;
  $85 = $83;
 } else {
  $84 = $6;
  $85 = $84;
 }
 $2 = $85;
 $86 = $2;
 STACKTOP = sp;return ($86|0);
}
function _refs_from_header($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $12 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $13 = $4;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $3 = -1;
  $160 = $3;
  STACKTOP = sp;return ($160|0);
 }
 $15 = $6;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $6;
  $18 = ((($17)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0);
  if (!($20)) {
   $21 = $4;
   $22 = ((($21)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $4;
   $25 = ((($24)) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $6;
   $28 = ((($27)) + 28|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($26) + ($29))|0;
   $31 = $30<<2;
   $32 = (_realloc($23,$31)|0);
   $33 = $4;
   $34 = ((($33)) + 8|0);
   HEAP32[$34>>2] = $32;
   $35 = ($32|0)!=(0|0);
   if (!($35)) {
    $3 = -1;
    $160 = $3;
    STACKTOP = sp;return ($160|0);
   }
   $7 = 0;
   $36 = $4;
   $37 = ((($36)) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   $8 = $38;
   while(1) {
    $39 = $7;
    $40 = $6;
    $41 = ((($40)) + 28|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($39|0)<($42|0);
    if (!($43)) {
     label = 22;
     break;
    }
    $44 = $4;
    $45 = ((($44)) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $6;
    $48 = ((($47)) + 32|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $7;
    $51 = (($49) + ($50<<4)|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (_kh_get_refs($46,$52)|0);
    $11 = $53;
    $54 = $11;
    $55 = $4;
    $56 = ((($55)) + 4|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = HEAP32[$57>>2]|0;
    $59 = ($54|0)!=($58|0);
    if (!($59)) {
     $60 = (_calloc(1,56)|0);
     $61 = $4;
     $62 = ((($61)) + 8|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = $8;
     $65 = (($63) + ($64<<2)|0);
     HEAP32[$65>>2] = $60;
     $66 = ($60|0)!=(0|0);
     if (!($66)) {
      label = 12;
      break;
     }
     $67 = $6;
     $68 = ((($67)) + 32|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $7;
     $71 = (($69) + ($70<<4)|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ($72|0)!=(0|0);
     if (!($73)) {
      label = 14;
      break;
     }
     $74 = $4;
     $75 = HEAP32[$74>>2]|0;
     $76 = $6;
     $77 = ((($76)) + 32|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = $7;
     $80 = (($78) + ($79<<4)|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (_string_dup($75,$81)|0);
     $83 = $4;
     $84 = ((($83)) + 8|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = $8;
     $87 = (($85) + ($86<<2)|0);
     $88 = HEAP32[$87>>2]|0;
     HEAP32[$88>>2] = $82;
     $89 = $4;
     $90 = ((($89)) + 8|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = $8;
     $93 = (($91) + ($92<<2)|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = ((($94)) + 8|0);
     $96 = $95;
     $97 = $96;
     HEAP32[$97>>2] = 0;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     $100 = $6;
     $101 = $6;
     $102 = ((($101)) + 32|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = $7;
     $105 = (($103) + ($104<<4)|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = (_sam_hdr_find($100,14288,14291,$106)|0);
     $9 = $107;
     $108 = ($107|0)!=(0|0);
     if ($108) {
      $109 = $6;
      $110 = $9;
      $111 = (_sam_hdr_find_key($109,$110,14294,0)|0);
      $10 = $111;
      $112 = ($111|0)!=(0|0);
      if ($112) {
       $113 = $4;
       $114 = HEAP32[$113>>2]|0;
       $115 = $10;
       $116 = ((($115)) + 4|0);
       $117 = HEAP32[$116>>2]|0;
       $118 = ((($117)) + 3|0);
       $119 = (_string_dup($114,$118)|0);
       $120 = $4;
       $121 = ((($120)) + 8|0);
       $122 = HEAP32[$121>>2]|0;
       $123 = $8;
       $124 = (($122) + ($123<<2)|0);
       $125 = HEAP32[$124>>2]|0;
       $126 = ((($125)) + 4|0);
       HEAP32[$126>>2] = $119;
      }
     }
     $127 = $4;
     $128 = ((($127)) + 4|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = $4;
     $131 = ((($130)) + 8|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = $8;
     $134 = (($132) + ($133<<2)|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = HEAP32[$135>>2]|0;
     $137 = (_kh_put_refs($129,$136,$12)|0);
     $11 = $137;
     $138 = HEAP32[$12>>2]|0;
     $139 = ($138|0)<=(0);
     if ($139) {
      label = 19;
      break;
     }
     $140 = $4;
     $141 = ((($140)) + 8|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = $8;
     $144 = (($142) + ($143<<2)|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = $4;
     $147 = ((($146)) + 4|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ((($148)) + 24|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = $11;
     $152 = (($150) + ($151<<2)|0);
     HEAP32[$152>>2] = $145;
     $153 = $8;
     $154 = (($153) + 1)|0;
     $8 = $154;
    }
    $155 = $7;
    $156 = (($155) + 1)|0;
    $7 = $156;
   }
   if ((label|0) == 12) {
    $3 = -1;
    $160 = $3;
    STACKTOP = sp;return ($160|0);
   }
   else if ((label|0) == 14) {
    $3 = -1;
    $160 = $3;
    STACKTOP = sp;return ($160|0);
   }
   else if ((label|0) == 19) {
    $3 = -1;
    $160 = $3;
    STACKTOP = sp;return ($160|0);
   }
   else if ((label|0) == 22) {
    $157 = $8;
    $158 = $4;
    $159 = ((($158)) + 12|0);
    HEAP32[$159>>2] = $157;
    $3 = 0;
    $160 = $3;
    STACKTOP = sp;return ($160|0);
   }
  }
 }
 $3 = 0;
 $160 = $3;
 STACKTOP = sp;return ($160|0);
}
function _bgzf_open_ref($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4128|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $8 = sp + 32|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $6;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $11 = $4;
  HEAP32[$vararg_buffer>>2] = $11;
  (_snprintf($8,4096,17298,$vararg_buffer)|0);
  $12 = (_access($8,4)|0);
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = $4;
   $15 = (_fai_build($14)|0);
   $16 = ($15|0)!=(0);
   if ($16) {
    $3 = 0;
    $35 = $3;
    STACKTOP = sp;return ($35|0);
   }
  }
 }
 $17 = $4;
 $18 = $5;
 $19 = (_bgzf_open($17,$18)|0);
 $7 = $19;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  $21 = $4;
  _perror($21);
  $3 = 0;
  $35 = $3;
  STACKTOP = sp;return ($35|0);
 }
 $22 = $7;
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 >>> 29;
 $25 = $24 & 3;
 $26 = ($25|0)==(1);
 if ($26) {
  $27 = $7;
  $28 = $4;
  $29 = (_bgzf_index_load($27,$28,17408)|0);
  $30 = ($29|0)<(0);
  if ($30) {
   $31 = HEAP32[2398]|0;
   $32 = $4;
   HEAP32[$vararg_buffer1>>2] = $32;
   (_fprintf($31,14411,$vararg_buffer1)|0);
   $33 = $7;
   (_bgzf_close($33)|0);
   $3 = 0;
   $35 = $3;
   STACKTOP = sp;return ($35|0);
  }
 }
 $34 = $7;
 $3 = $34;
 $35 = $3;
 STACKTOP = sp;return ($35|0);
}
function _cram_load_reference($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = $4;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $9 = ((($8)) + 48|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $4;
  $12 = $3;
  $13 = ((($12)) + 284|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $3;
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(114);
   $21 = $19;
  } else {
   $21 = 0;
  }
  $20 = $21 ^ 1;
  $22 = $20&1;
  $23 = (_refs_load_fai($10,$11,$22)|0);
  $24 = $3;
  $25 = ((($24)) + 48|0);
  HEAP32[$25>>2] = $23;
  $26 = $3;
  $27 = ((($26)) + 48|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0|0);
  if ($29) {
   $30 = $3;
   $31 = ((($30)) + 48|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 16|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $34;
  } else {
   $35 = 0;
  }
  $4 = $35;
  $36 = $4;
  $37 = ($36|0)!=(0|0);
  if (!($37)) {
   $5 = -1;
  }
  $38 = $3;
  _sanitise_SQ_lines($38);
 }
 $39 = $4;
 $40 = $3;
 $41 = ((($40)) + 72|0);
 HEAP32[$41>>2] = $39;
 $42 = $3;
 $43 = ((($42)) + 48|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)!=(0|0);
 if ($45) {
  $46 = $3;
  $47 = ((($46)) + 48|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($48)) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)!=(0);
  $52 = $4;
  $53 = ($52|0)!=(0|0);
  $or$cond = $51 | $53;
  if (!($or$cond)) {
   label = 11;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $54 = $3;
  $55 = ((($54)) + 16|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)!=(0|0);
  if ($57) {
   $58 = $3;
   $59 = ((($58)) + 48|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)!=(0|0);
   if ($61) {
    $62 = $3;
    $63 = ((($62)) + 48|0);
    $64 = HEAP32[$63>>2]|0;
    _refs_free($64);
   }
   $65 = (_refs_create()|0);
   $66 = $3;
   $67 = ((($66)) + 48|0);
   HEAP32[$67>>2] = $65;
   $68 = ($65|0)!=(0|0);
   if (!($68)) {
    $2 = -1;
    $91 = $2;
    STACKTOP = sp;return ($91|0);
   }
   $69 = $3;
   $70 = ((($69)) + 48|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $3;
   $73 = $3;
   $74 = ((($73)) + 16|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (_refs_from_header($71,$72,$75)|0);
   $77 = (-1)==($76|0);
   if ($77) {
    $2 = -1;
    $91 = $2;
    STACKTOP = sp;return ($91|0);
   }
  }
 }
 $78 = $3;
 $79 = ((($78)) + 16|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($80|0)!=(0|0);
 if ($81) {
  $82 = $3;
  $83 = ((($82)) + 48|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $3;
  $86 = ((($85)) + 16|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (_refs2id($84,$87)|0);
  $89 = (-1)==($88|0);
  if ($89) {
   $2 = -1;
   $91 = $2;
   STACKTOP = sp;return ($91|0);
  }
 }
 $90 = $5;
 $2 = $90;
 $91 = $2;
 STACKTOP = sp;return ($91|0);
}
function _refs_load_fai($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 12432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(12432|0);
 $vararg_buffer = sp;
 $7 = sp + 52|0;
 $9 = sp + 8336|0;
 $10 = sp + 144|0;
 $16 = sp + 24|0;
 $17 = sp + 20|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 $21 = $4;
 $11 = $21;
 $22 = $5;
 $23 = (_strlen($22)|0);
 $12 = $23;
 $13 = 0;
 $14 = 0;
 $24 = $11;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  label = 3;
 } else {
  $26 = (_refs_create()|0);
  $11 = $26;
  $27 = ($26|0)!=(0|0);
  if ($27) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $28 = $5;
   $29 = (_stat($28,$7)|0);
   $30 = ($29|0)!=(0);
   if ($30) {
    $31 = $6;
    $32 = ($31|0)!=(0);
    if (!($32)) {
     break;
    }
    $33 = $5;
    _perror($33);
    break;
   }
   $34 = $11;
   $35 = ((($34)) + 20|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)!=(0|0);
   if ($37) {
    $38 = $11;
    $39 = ((($38)) + 20|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (_bgzf_close($40)|0);
    $42 = ($41|0)!=(0);
    if ($42) {
     break;
    }
   }
   $43 = $11;
   $44 = ((($43)) + 20|0);
   HEAP32[$44>>2] = 0;
   $45 = $11;
   $46 = HEAP32[$45>>2]|0;
   $47 = $5;
   $48 = (_string_dup($46,$47)|0);
   $49 = $11;
   $50 = ((($49)) + 16|0);
   HEAP32[$50>>2] = $48;
   $51 = ($48|0)!=(0|0);
   if ($51) {
    $52 = $12;
    $53 = ($52>>>0)>(4);
    if ($53) {
     $54 = $5;
     $55 = $12;
     $56 = (($55) - 4)|0;
     $57 = (($54) + ($56)|0);
     $58 = (_strcmp($57,14447)|0);
     $59 = ($58|0)==(0);
     if ($59) {
      $60 = $11;
      $61 = ((($60)) + 16|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = $12;
      $64 = (($63) - 4)|0;
      $65 = (($62) + ($64)|0);
      HEAP8[$65>>0] = 0;
     }
    }
    $66 = $11;
    $67 = ((($66)) + 16|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (_bgzf_open_ref($68,17761,0)|0);
    $70 = $11;
    $71 = ((($70)) + 20|0);
    HEAP32[$71>>2] = $69;
    $72 = ($69|0)!=(0|0);
    if ($72) {
     $73 = $11;
     $74 = ((($73)) + 16|0);
     $75 = HEAP32[$74>>2]|0;
     HEAP32[$vararg_buffer>>2] = 4091;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $75;
     (_sprintf($9,14452,$vararg_buffer)|0);
     $76 = (_stat($9,$7)|0);
     $77 = ($76|0)!=(0);
     if ($77) {
      $78 = $6;
      $79 = ($78|0)!=(0);
      if (!($79)) {
       break;
      }
      _perror($9);
      break;
     }
     $80 = (_fopen($9,17761)|0);
     $8 = $80;
     $81 = ($80|0)!=(0|0);
     if (!($81)) {
      $82 = $6;
      $83 = ($82|0)!=(0);
      if (!($83)) {
       break;
      }
      _perror($9);
      break;
     }
     while(1) {
      $84 = $8;
      $85 = (_fgets($10,8192,$84)|0);
      $86 = ($85|0)!=(0|0);
      if (!($86)) {
       label = 62;
       break;
      }
      $87 = (_malloc(56)|0);
      $15 = $87;
      $88 = $15;
      $89 = ($88|0)!=(0|0);
      if (!($89)) {
       label = 21;
       break;
      }
      HEAP32[$16>>2] = $10;
      while(1) {
       $90 = HEAP32[$16>>2]|0;
       $91 = HEAP8[$90>>0]|0;
       $92 = $91 << 24 >> 24;
       $93 = ($92|0)!=(0);
       if (!($93)) {
        break;
       }
       $94 = HEAP32[$16>>2]|0;
       $95 = HEAP8[$94>>0]|0;
       $96 = $95 << 24 >> 24;
       $97 = (_isspace($96)|0);
       $98 = ($97|0)!=(0);
       $99 = $98 ^ 1;
       if (!($99)) {
        break;
       }
       $100 = HEAP32[$16>>2]|0;
       $101 = ((($100)) + 1|0);
       HEAP32[$16>>2] = $101;
      }
      $102 = HEAP32[$16>>2]|0;
      $103 = ((($102)) + 1|0);
      HEAP32[$16>>2] = $103;
      HEAP8[$102>>0] = 0;
      $104 = $11;
      $105 = HEAP32[$104>>2]|0;
      $106 = (_string_dup($105,$10)|0);
      $107 = $15;
      HEAP32[$107>>2] = $106;
      while(1) {
       $108 = HEAP32[$16>>2]|0;
       $109 = HEAP8[$108>>0]|0;
       $110 = $109 << 24 >> 24;
       $111 = ($110|0)!=(0);
       if ($111) {
        $112 = HEAP32[$16>>2]|0;
        $113 = HEAP8[$112>>0]|0;
        $114 = $113 << 24 >> 24;
        $115 = (_isspace($114)|0);
        $116 = ($115|0)!=(0);
        $299 = $116;
       } else {
        $299 = 0;
       }
       $117 = HEAP32[$16>>2]|0;
       if (!($299)) {
        break;
       }
       $118 = ((($117)) + 1|0);
       HEAP32[$16>>2] = $118;
      }
      $119 = (_strtoll($117,$16,10)|0);
      $120 = tempRet0;
      $121 = $15;
      $122 = ((($121)) + 8|0);
      $123 = $122;
      $124 = $123;
      HEAP32[$124>>2] = $119;
      $125 = (($123) + 4)|0;
      $126 = $125;
      HEAP32[$126>>2] = $120;
      while(1) {
       $127 = HEAP32[$16>>2]|0;
       $128 = HEAP8[$127>>0]|0;
       $129 = $128 << 24 >> 24;
       $130 = ($129|0)!=(0);
       if ($130) {
        $131 = HEAP32[$16>>2]|0;
        $132 = HEAP8[$131>>0]|0;
        $133 = $132 << 24 >> 24;
        $134 = (_isspace($133)|0);
        $135 = ($134|0)!=(0);
        $300 = $135;
       } else {
        $300 = 0;
       }
       $136 = HEAP32[$16>>2]|0;
       if (!($300)) {
        break;
       }
       $137 = ((($136)) + 1|0);
       HEAP32[$16>>2] = $137;
      }
      $138 = (_strtoll($136,$16,10)|0);
      $139 = tempRet0;
      $140 = $15;
      $141 = ((($140)) + 16|0);
      $142 = $141;
      $143 = $142;
      HEAP32[$143>>2] = $138;
      $144 = (($142) + 4)|0;
      $145 = $144;
      HEAP32[$145>>2] = $139;
      while(1) {
       $146 = HEAP32[$16>>2]|0;
       $147 = HEAP8[$146>>0]|0;
       $148 = $147 << 24 >> 24;
       $149 = ($148|0)!=(0);
       if ($149) {
        $150 = HEAP32[$16>>2]|0;
        $151 = HEAP8[$150>>0]|0;
        $152 = $151 << 24 >> 24;
        $153 = (_isspace($152)|0);
        $154 = ($153|0)!=(0);
        $301 = $154;
       } else {
        $301 = 0;
       }
       $155 = HEAP32[$16>>2]|0;
       if (!($301)) {
        break;
       }
       $156 = ((($155)) + 1|0);
       HEAP32[$16>>2] = $156;
      }
      $157 = (_strtol($155,$16,10)|0);
      $158 = $15;
      $159 = ((($158)) + 24|0);
      HEAP32[$159>>2] = $157;
      while(1) {
       $160 = HEAP32[$16>>2]|0;
       $161 = HEAP8[$160>>0]|0;
       $162 = $161 << 24 >> 24;
       $163 = ($162|0)!=(0);
       if ($163) {
        $164 = HEAP32[$16>>2]|0;
        $165 = HEAP8[$164>>0]|0;
        $166 = $165 << 24 >> 24;
        $167 = (_isspace($166)|0);
        $168 = ($167|0)!=(0);
        $302 = $168;
       } else {
        $302 = 0;
       }
       $169 = HEAP32[$16>>2]|0;
       if (!($302)) {
        break;
       }
       $170 = ((($169)) + 1|0);
       HEAP32[$16>>2] = $170;
      }
      $171 = (_strtol($169,$16,10)|0);
      $172 = $15;
      $173 = ((($172)) + 28|0);
      HEAP32[$173>>2] = $171;
      $174 = $11;
      $175 = ((($174)) + 16|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = $15;
      $178 = ((($177)) + 4|0);
      HEAP32[$178>>2] = $176;
      $179 = $15;
      $180 = ((($179)) + 32|0);
      $181 = $180;
      $182 = $181;
      HEAP32[$182>>2] = 0;
      $183 = (($181) + 4)|0;
      $184 = $183;
      HEAP32[$184>>2] = 0;
      $185 = $15;
      $186 = ((($185)) + 40|0);
      HEAP32[$186>>2] = 0;
      $187 = $15;
      $188 = ((($187)) + 44|0);
      HEAP32[$188>>2] = 0;
      $189 = $15;
      $190 = ((($189)) + 48|0);
      HEAP32[$190>>2] = 0;
      $191 = $11;
      $192 = ((($191)) + 4|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = $15;
      $195 = HEAP32[$194>>2]|0;
      $196 = (_kh_put_refs($193,$195,$17)|0);
      $18 = $196;
      $197 = HEAP32[$17>>2]|0;
      $198 = (-1)==($197|0);
      if ($198) {
       label = 47;
       break;
      }
      $200 = HEAP32[$17>>2]|0;
      $201 = ($200|0)!=(0);
      L63: do {
       if ($201) {
        $202 = $15;
        $203 = $11;
        $204 = ((($203)) + 4|0);
        $205 = HEAP32[$204>>2]|0;
        $206 = ((($205)) + 24|0);
        $207 = HEAP32[$206>>2]|0;
        $208 = $18;
        $209 = (($207) + ($208<<2)|0);
        HEAP32[$209>>2] = $202;
       } else {
        $210 = $11;
        $211 = ((($210)) + 4|0);
        $212 = HEAP32[$211>>2]|0;
        $213 = ((($212)) + 24|0);
        $214 = HEAP32[$213>>2]|0;
        $215 = $18;
        $216 = (($214) + ($215<<2)|0);
        $217 = HEAP32[$216>>2]|0;
        $19 = $217;
        $218 = $19;
        $219 = ($218|0)!=(0|0);
        do {
         if ($219) {
          $220 = $19;
          $221 = ((($220)) + 32|0);
          $222 = $221;
          $223 = $222;
          $224 = HEAP32[$223>>2]|0;
          $225 = (($222) + 4)|0;
          $226 = $225;
          $227 = HEAP32[$226>>2]|0;
          $228 = ($224|0)!=(0);
          $229 = ($227|0)!=(0);
          $230 = $228 | $229;
          if (!($230)) {
           $231 = $19;
           $232 = ((($231)) + 8|0);
           $233 = $232;
           $234 = $233;
           $235 = HEAP32[$234>>2]|0;
           $236 = (($233) + 4)|0;
           $237 = $236;
           $238 = HEAP32[$237>>2]|0;
           $239 = ($235|0)!=(0);
           $240 = ($238|0)!=(0);
           $241 = $239 | $240;
           if (!($241)) {
            break;
           }
          }
          $242 = $15;
          _free($242);
          break L63;
         }
        } while(0);
        $243 = $19;
        $244 = ($243|0)!=(0|0);
        if ($244) {
         $245 = $19;
         _free($245);
        }
        $246 = $15;
        $247 = $11;
        $248 = ((($247)) + 4|0);
        $249 = HEAP32[$248>>2]|0;
        $250 = ((($249)) + 24|0);
        $251 = HEAP32[$250>>2]|0;
        $252 = $18;
        $253 = (($251) + ($252<<2)|0);
        HEAP32[$253>>2] = $246;
       }
      } while(0);
      $254 = $13;
      $255 = $14;
      $256 = ($254|0)>=($255|0);
      L76: do {
       if ($256) {
        $257 = $14;
        $258 = ($257|0)!=(0);
        $259 = $14;
        $260 = $259<<1;
        $261 = $258 ? $260 : 16;
        $14 = $261;
        $262 = $11;
        $263 = ((($262)) + 8|0);
        $264 = HEAP32[$263>>2]|0;
        $265 = $14;
        $266 = $265<<2;
        $267 = (_realloc($264,$266)|0);
        $268 = $11;
        $269 = ((($268)) + 8|0);
        HEAP32[$269>>2] = $267;
        $270 = $13;
        $20 = $270;
        while(1) {
         $271 = $20;
         $272 = $14;
         $273 = ($271|0)<($272|0);
         if (!($273)) {
          break L76;
         }
         $274 = $11;
         $275 = ((($274)) + 8|0);
         $276 = HEAP32[$275>>2]|0;
         $277 = $20;
         $278 = (($276) + ($277<<2)|0);
         HEAP32[$278>>2] = 0;
         $279 = $20;
         $280 = (($279) + 1)|0;
         $20 = $280;
        }
       }
      } while(0);
      $281 = $15;
      $282 = $11;
      $283 = ((($282)) + 8|0);
      $284 = HEAP32[$283>>2]|0;
      $285 = $13;
      $286 = (($284) + ($285<<2)|0);
      HEAP32[$286>>2] = $281;
      $287 = $13;
      $288 = (($287) + 1)|0;
      $13 = $288;
      $289 = $11;
      $290 = ((($289)) + 12|0);
      HEAP32[$290>>2] = $288;
     }
     if ((label|0) == 21) {
      $3 = 0;
      $298 = $3;
      STACKTOP = sp;return ($298|0);
     }
     else if ((label|0) == 47) {
      $199 = $15;
      _free($199);
      $3 = 0;
      $298 = $3;
      STACKTOP = sp;return ($298|0);
     }
     else if ((label|0) == 62) {
      $291 = $11;
      $3 = $291;
      $298 = $3;
      STACKTOP = sp;return ($298|0);
     }
    }
   }
  }
 } while(0);
 $292 = $8;
 $293 = ($292|0)!=(0|0);
 if ($293) {
  $294 = $8;
  (_fclose($294)|0);
 }
 $295 = $4;
 $296 = ($295|0)!=(0|0);
 if (!($296)) {
  $297 = $11;
  _refs_free($297);
 }
 $3 = 0;
 $298 = $3;
 STACKTOP = sp;return ($298|0);
}
function _sanitise_SQ_lines($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $1 = $0;
 $6 = $1;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $1;
 $11 = ((($10)) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = $1;
 $15 = ((($14)) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $2 = 0;
 while(1) {
  $20 = $2;
  $21 = $1;
  $22 = ((($21)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 28|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($20|0)<($25|0);
  if (!($26)) {
   label = 14;
   break;
  }
  $27 = $1;
  $28 = ((($27)) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 32|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $2;
  $33 = (($31) + ($32<<4)|0);
  $34 = HEAP32[$33>>2]|0;
  $3 = $34;
  $35 = $1;
  $36 = ((($35)) + 48|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $3;
  $41 = (_kh_get_refs($39,$40)|0);
  $4 = $41;
  $42 = $4;
  $43 = $1;
  $44 = ((($43)) + 48|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = HEAP32[$47>>2]|0;
  $49 = ($42|0)==($48|0);
  if (!($49)) {
   $50 = $1;
   $51 = ((($50)) + 48|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($52)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($54)) + 24|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $4;
   $58 = (($56) + ($57<<2)|0);
   $59 = HEAP32[$58>>2]|0;
   $5 = $59;
   $60 = ($59|0)!=(0|0);
   if ($60) {
    $61 = $5;
    $62 = ((($61)) + 8|0);
    $63 = $62;
    $64 = $63;
    $65 = HEAP32[$64>>2]|0;
    $66 = (($63) + 4)|0;
    $67 = $66;
    $68 = HEAP32[$67>>2]|0;
    $69 = ($65|0)!=(0);
    $70 = ($68|0)!=(0);
    $71 = $69 | $70;
    if ($71) {
     $72 = $5;
     $73 = ((($72)) + 8|0);
     $74 = $73;
     $75 = $74;
     $76 = HEAP32[$75>>2]|0;
     $77 = (($74) + 4)|0;
     $78 = $77;
     $79 = HEAP32[$78>>2]|0;
     $80 = $1;
     $81 = ((($80)) + 16|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ((($82)) + 32|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = $2;
     $86 = (($84) + ($85<<4)|0);
     $87 = ((($86)) + 4|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = ($76|0)!=($88|0);
     $90 = ($79|0)!=(0);
     $91 = $89 | $90;
     if ($91) {
      $92 = $5;
      $93 = HEAP32[$92>>2]|0;
      $94 = $1;
      $95 = ((($94)) + 16|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = ((($96)) + 32|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = $2;
      $100 = (($98) + ($99<<4)|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = (_strcmp($93,$101)|0);
      $103 = ($102|0)==(0);
      if (!($103)) {
       label = 11;
       break;
      }
      $104 = HEAP32[2398]|0;
      $105 = $5;
      $106 = HEAP32[$105>>2]|0;
      $107 = $1;
      $108 = ((($107)) + 16|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = ((($109)) + 32|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = $2;
      $113 = (($111) + ($112<<4)|0);
      $114 = ((($113)) + 4|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = $5;
      $117 = ((($116)) + 8|0);
      $118 = $117;
      $119 = $118;
      $120 = HEAP32[$119>>2]|0;
      $121 = (($118) + 4)|0;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      HEAP32[$vararg_buffer>>2] = $106;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $115;
      $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
      HEAP32[$vararg_ptr2>>2] = $120;
      (_fprintf($104,14525,$vararg_buffer)|0);
      $124 = $5;
      $125 = ((($124)) + 8|0);
      $126 = $125;
      $127 = $126;
      $128 = HEAP32[$127>>2]|0;
      $129 = (($126) + 4)|0;
      $130 = $129;
      $131 = HEAP32[$130>>2]|0;
      $132 = $1;
      $133 = ((($132)) + 16|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ((($134)) + 32|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = $2;
      $138 = (($136) + ($137<<4)|0);
      $139 = ((($138)) + 4|0);
      HEAP32[$139>>2] = $128;
     }
    }
   }
  }
  $140 = $2;
  $141 = (($140) + 1)|0;
  $2 = $141;
 }
 if ((label|0) == 11) {
  ___assert_fail((14461|0),(13971|0),1963,(14507|0));
  // unreachable;
 }
 else if ((label|0) == 14) {
  STACKTOP = sp;return;
 }
}
function _refs_create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = (_calloc(1,64)|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $5 = (_string_pool_create(8192)|0);
 $6 = $1;
 HEAP32[$6>>2] = $5;
 $7 = ($5|0)!=(0|0);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 8|0);
  HEAP32[$9>>2] = 0;
  $10 = $1;
  $11 = ((($10)) + 24|0);
  HEAP32[$11>>2] = 1;
  $12 = $1;
  $13 = ((($12)) + 56|0);
  HEAP32[$13>>2] = 0;
  $14 = $1;
  $15 = ((($14)) + 60|0);
  HEAP32[$15>>2] = -1;
  $16 = (_kh_init_refs()|0);
  $17 = $1;
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = $16;
  $19 = ($16|0)!=(0|0);
  if ($19) {
   $20 = $1;
   $21 = ((($20)) + 28|0);
   (_pthread_mutex_init($21,0)|0);
   $22 = $1;
   $0 = $22;
   $24 = $0;
   STACKTOP = sp;return ($24|0);
  }
 }
 $23 = $1;
 _refs_free($23);
 $0 = 0;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _cram_free_container($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 344|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $1;
  $11 = ((($10)) + 344|0);
  $12 = HEAP32[$11>>2]|0;
  _free($12);
 }
 $13 = $1;
 $14 = ((($13)) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $1;
  $18 = ((($17)) + 44|0);
  $19 = HEAP32[$18>>2]|0;
  _free($19);
 }
 $20 = $1;
 $21 = ((($20)) + 52|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $1;
  $25 = ((($24)) + 52|0);
  $26 = HEAP32[$25>>2]|0;
  _cram_free_compression_header($26);
 }
 $27 = $1;
 $28 = ((($27)) + 56|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  $31 = $1;
  $32 = ((($31)) + 56|0);
  $33 = HEAP32[$32>>2]|0;
  _cram_free_block($33);
 }
 $34 = $1;
 $35 = ((($34)) + 96|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0|0);
 if ($37) {
  $3 = 0;
  while(1) {
   $38 = $3;
   $39 = $1;
   $40 = ((($39)) + 60|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($38|0)<($41|0);
   $43 = $1;
   $44 = ((($43)) + 96|0);
   $45 = HEAP32[$44>>2]|0;
   if (!($42)) {
    break;
   }
   $46 = $3;
   $47 = (($45) + ($46<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)!=(0|0);
   if ($49) {
    $50 = $1;
    $51 = ((($50)) + 96|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $3;
    $54 = (($52) + ($53<<2)|0);
    $55 = HEAP32[$54>>2]|0;
    _cram_free_slice($55);
   }
   $56 = $3;
   $57 = (($56) + 1)|0;
   $3 = $57;
  }
  _free($45);
 }
 $2 = 11;
 while(1) {
  $58 = $2;
  $59 = ($58>>>0)<(39);
  $60 = $1;
  if (!($59)) {
   break;
  }
  $61 = ((($60)) + 152|0);
  $62 = $2;
  $63 = (($61) + ($62<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)!=(0|0);
  if ($65) {
   $66 = $1;
   $67 = ((($66)) + 152|0);
   $68 = $2;
   $69 = (($67) + ($68<<2)|0);
   $70 = HEAP32[$69>>2]|0;
   _cram_stats_free($70);
  }
  $71 = $2;
  $72 = (($71) + 1)|0;
  $2 = $72;
 }
 $73 = ((($60)) + 340|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74|0)!=(0|0);
 if ($75) {
  $76 = $1;
  $77 = ((($76)) + 340|0);
  $78 = HEAP32[$77>>2]|0;
  _kh_destroy_s_i2i($78);
 }
 $79 = $1;
 _free($79);
 STACKTOP = sp;return;
}
function _cram_free_compression_header($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $7 = $1;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  _free($13);
 }
 $14 = $1;
 $15 = ((($14)) + 88|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $1;
  $19 = ((($18)) + 88|0);
  $20 = HEAP32[$19>>2]|0;
  _kh_destroy_map($20);
 }
 $2 = 0;
 while(1) {
  $21 = $2;
  $22 = ($21|0)<(32);
  if (!($22)) {
   break;
  }
  $23 = $1;
  $24 = ((($23)) + 92|0);
  $25 = $2;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $3 = $27;
  while(1) {
   $28 = $3;
   $29 = ($28|0)!=(0|0);
   if (!($29)) {
    break;
   }
   $30 = $3;
   $31 = ((($30)) + 20|0);
   $32 = HEAP32[$31>>2]|0;
   $4 = $32;
   $33 = $3;
   $34 = ((($33)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)!=(0|0);
   if ($36) {
    $37 = $3;
    $38 = ((($37)) + 16|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ((($39)) + 8|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $3;
    $43 = ((($42)) + 16|0);
    $44 = HEAP32[$43>>2]|0;
    FUNCTION_TABLE_vi[$41 & 63]($44);
   }
   $45 = $3;
   _free($45);
   $46 = $4;
   $3 = $46;
  }
  $47 = $2;
  $48 = (($47) + 1)|0;
  $2 = $48;
 }
 $2 = 0;
 while(1) {
  $49 = $2;
  $50 = ($49|0)<(32);
  if (!($50)) {
   break;
  }
  $51 = $1;
  $52 = ((($51)) + 220|0);
  $53 = $2;
  $54 = (($52) + ($53<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $5 = $55;
  while(1) {
   $56 = $5;
   $57 = ($56|0)!=(0|0);
   if (!($57)) {
    break;
   }
   $58 = $5;
   $59 = ((($58)) + 20|0);
   $60 = HEAP32[$59>>2]|0;
   $6 = $60;
   $61 = $5;
   $62 = ((($61)) + 16|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)!=(0|0);
   if ($64) {
    $65 = $5;
    $66 = ((($65)) + 16|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ((($67)) + 8|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $5;
    $71 = ((($70)) + 16|0);
    $72 = HEAP32[$71>>2]|0;
    FUNCTION_TABLE_vi[$69 & 63]($72);
   }
   $73 = $5;
   _free($73);
   $74 = $6;
   $5 = $74;
  }
  $75 = $2;
  $76 = (($75) + 1)|0;
  $2 = $76;
 }
 $2 = 0;
 while(1) {
  $77 = $2;
  $78 = ($77|0)<(47);
  $79 = $1;
  if (!($78)) {
   break;
  }
  $80 = ((($79)) + 348|0);
  $81 = $2;
  $82 = (($80) + ($81<<2)|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83|0)!=(0|0);
  if ($84) {
   $85 = $1;
   $86 = ((($85)) + 348|0);
   $87 = $2;
   $88 = (($86) + ($87<<2)|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ((($89)) + 8|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $1;
   $93 = ((($92)) + 348|0);
   $94 = $2;
   $95 = (($93) + ($94<<2)|0);
   $96 = HEAP32[$95>>2]|0;
   FUNCTION_TABLE_vi[$91 & 63]($96);
  }
  $97 = $2;
  $98 = (($97) + 1)|0;
  $2 = $98;
 }
 $99 = ((($79)) + 76|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ($100|0)!=(0|0);
 if ($101) {
  $102 = $1;
  $103 = ((($102)) + 76|0);
  $104 = HEAP32[$103>>2]|0;
  _free($104);
 }
 $105 = $1;
 $106 = ((($105)) + 68|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)!=(0|0);
 if ($108) {
  $109 = $1;
  $110 = ((($109)) + 68|0);
  $111 = HEAP32[$110>>2]|0;
  _cram_free_block($111);
 }
 $112 = $1;
 $113 = ((($112)) + 80|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ($114|0)!=(0|0);
 if ($115) {
  $116 = $1;
  $117 = ((($116)) + 80|0);
  $118 = HEAP32[$117>>2]|0;
  _kh_destroy_m_s2i($118);
 }
 $119 = $1;
 $120 = ((($119)) + 84|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = ($121|0)!=(0|0);
 if (!($122)) {
  $126 = $1;
  _free($126);
  STACKTOP = sp;return;
 }
 $123 = $1;
 $124 = ((($123)) + 84|0);
 $125 = HEAP32[$124>>2]|0;
 _string_pool_destroy($125);
 $126 = $1;
 _free($126);
 STACKTOP = sp;return;
}
function _cram_free_slice($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $1;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  _cram_free_block($11);
 }
 $12 = $1;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $1;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  L9: do {
   if ($18) {
    $2 = 0;
    while(1) {
     $19 = $2;
     $20 = $1;
     $21 = HEAP32[$20>>2]|0;
     $22 = ((($21)) + 32|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($19|0)<($23|0);
     if (!($24)) {
      break L9;
     }
     $25 = $1;
     $26 = ((($25)) + 8|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = $2;
     $29 = (($27) + ($28<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     _cram_free_block($30);
     $31 = $2;
     $32 = (($31) + 1)|0;
     $2 = $32;
    }
   }
  } while(0);
  $33 = $1;
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  _free($35);
 }
 $36 = $1;
 $37 = ((($36)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $40 = $1;
  $41 = ((($40)) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  _free($42);
 }
 $43 = $1;
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)!=(0|0);
 if ($45) {
  $46 = $1;
  $47 = HEAP32[$46>>2]|0;
  _cram_free_slice_header($47);
 }
 $48 = $1;
 $49 = ((($48)) + 68|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)!=(0|0);
 if ($51) {
  $52 = $1;
  $53 = ((($52)) + 68|0);
  $54 = HEAP32[$53>>2]|0;
  _cram_free_block($54);
 }
 $55 = $1;
 $56 = ((($55)) + 72|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)!=(0|0);
 if ($58) {
  $59 = $1;
  $60 = ((($59)) + 72|0);
  $61 = HEAP32[$60>>2]|0;
  _cram_free_block($61);
 }
 $62 = $1;
 $63 = ((($62)) + 64|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)!=(0|0);
 if ($65) {
  $66 = $1;
  $67 = ((($66)) + 64|0);
  $68 = HEAP32[$67>>2]|0;
  _cram_free_block($68);
 }
 $69 = $1;
 $70 = ((($69)) + 84|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)!=(0|0);
 if ($72) {
  $73 = $1;
  $74 = ((($73)) + 84|0);
  $75 = HEAP32[$74>>2]|0;
  _cram_free_block($75);
 }
 $76 = $1;
 $77 = ((($76)) + 88|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($78|0)!=(0|0);
 if ($79) {
  $80 = $1;
  $81 = ((($80)) + 88|0);
  $82 = HEAP32[$81>>2]|0;
  _cram_free_block($82);
 }
 $83 = $1;
 $84 = ((($83)) + 92|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($85|0)!=(0|0);
 if ($86) {
  $87 = $1;
  $88 = ((($87)) + 92|0);
  $89 = HEAP32[$88>>2]|0;
  _cram_free_block($89);
 }
 $90 = $1;
 $91 = ((($90)) + 104|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($92|0)!=(0|0);
 if ($93) {
  $94 = $1;
  $95 = ((($94)) + 104|0);
  $96 = HEAP32[$95>>2]|0;
  _cram_free_block($96);
 }
 $97 = $1;
 $98 = ((($97)) + 108|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ($99|0)!=(0|0);
 if ($100) {
  $101 = $1;
  $102 = ((($101)) + 108|0);
  $103 = HEAP32[$102>>2]|0;
  _cram_free_block($103);
 }
 $104 = $1;
 $105 = ((($104)) + 112|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ($106|0)!=(0|0);
 if ($107) {
  $108 = $1;
  $109 = ((($108)) + 112|0);
  $110 = HEAP32[$109>>2]|0;
  _cram_free_block($110);
 }
 $111 = $1;
 $112 = ((($111)) + 116|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = ($113|0)!=(0|0);
 if ($114) {
  $115 = $1;
  $116 = ((($115)) + 116|0);
  $117 = HEAP32[$116>>2]|0;
  _cram_free_block($117);
 }
 $118 = $1;
 $119 = ((($118)) + 76|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = ($120|0)!=(0|0);
 if ($121) {
  $122 = $1;
  $123 = ((($122)) + 76|0);
  $124 = HEAP32[$123>>2]|0;
  _cram_free_block($124);
 }
 $125 = $1;
 $126 = ((($125)) + 80|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($127|0)!=(0|0);
 if ($128) {
  $129 = $1;
  $130 = ((($129)) + 80|0);
  $131 = HEAP32[$130>>2]|0;
  _cram_free_block($131);
 }
 $132 = $1;
 $133 = ((($132)) + 28|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = ($134|0)!=(0|0);
 if ($135) {
  $136 = $1;
  $137 = ((($136)) + 28|0);
  $138 = HEAP32[$137>>2]|0;
  _free($138);
 }
 $139 = $1;
 $140 = ((($139)) + 24|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = ($141|0)!=(0|0);
 if ($142) {
  $143 = $1;
  $144 = ((($143)) + 24|0);
  $145 = HEAP32[$144>>2]|0;
  _free($145);
 }
 $146 = $1;
 $147 = ((($146)) + 40|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = ($148|0)!=(0|0);
 if ($149) {
  $150 = $1;
  $151 = ((($150)) + 40|0);
  $152 = HEAP32[$151>>2]|0;
  _free($152);
 }
 $153 = $1;
 $154 = ((($153)) + 52|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = ($155|0)!=(0|0);
 if ($156) {
  $157 = $1;
  $158 = ((($157)) + 52|0);
  $159 = HEAP32[$158>>2]|0;
  _free($159);
 }
 $160 = $1;
 $161 = ((($160)) + 120|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = ($162|0)!=(0|0);
 if ($163) {
  $164 = $1;
  $165 = ((($164)) + 120|0);
  $166 = HEAP32[$165>>2]|0;
  _string_pool_destroy($166);
 }
 $167 = $1;
 $168 = ((($167)) + 124|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = ($169|0)!=(0|0);
 if ($170) {
  $171 = $1;
  $172 = ((($171)) + 124|0);
  $173 = HEAP32[$172>>2]|0;
  _kh_destroy_m_s2i($173);
 }
 $174 = $1;
 $175 = ((($174)) + 124|0);
 $176 = ((($175)) + 4|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = ($177|0)!=(0|0);
 if ($178) {
  $179 = $1;
  $180 = ((($179)) + 124|0);
  $181 = ((($180)) + 4|0);
  $182 = HEAP32[$181>>2]|0;
  _kh_destroy_m_s2i($182);
 }
 $183 = $1;
 _free($183);
 STACKTOP = sp;return;
}
function _kh_destroy_s_i2i($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _cram_read_container($0) {
 $0 = $0|0;
 var $$sink = 0, $$sink2 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $vararg_buffer = sp + 352|0;
 $3 = sp;
 $8 = sp + 364|0;
 $9 = sp + 360|0;
 $10 = sp + 356|0;
 $2 = $0;
 $7 = 0;
 HEAP32[$8>>2] = 0;
 $11 = $2;
 $12 = ((($11)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = $2;
 $14 = ((($13)) + 34644|0);
 HEAP32[$14>>2] = 0;
 _memset(($3|0),0,352)|0;
 $15 = $2;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 >> 8;
 $19 = ($18|0)==(1);
 $20 = $2;
 do {
  if ($19) {
   $21 = (_itf8_decode_crc($20,$3,$8)|0);
   $6 = $21;
   $22 = ($21|0)==(-1);
   if (!($22)) {
    $30 = $6;
    $31 = $7;
    $32 = (($31) + ($30))|0;
    $7 = $32;
    break;
   }
   $23 = $2;
   $24 = ((($23)) + 34660|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)!=(0);
   $27 = $26 ? 1 : 2;
   $28 = $2;
   $29 = ((($28)) + 34644|0);
   HEAP32[$29>>2] = $27;
   $1 = 0;
   $247 = $1;
   STACKTOP = sp;return ($247|0);
  } else {
   $33 = (_int32_decode($20,$3)|0);
   $6 = $33;
   $34 = ($33|0)==(-1);
   if (!($34)) {
    $53 = $6;
    $54 = $7;
    $55 = (($54) + ($53))|0;
    $7 = $55;
    $56 = HEAP32[$3>>2]|0;
    HEAP32[$9>>2] = $56;
    $57 = (_crc32(0,$9,4)|0);
    HEAP32[$8>>2] = $57;
    break;
   }
   $35 = $2;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $37 >> 8;
   $39 = ($38|0)==(2);
   if ($39) {
    $40 = $2;
    $41 = ((($40)) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $42 & 255;
    $44 = ($43|0)==(0);
    if ($44) {
     $45 = $2;
     $$sink = 1;$$sink2 = $45;
    } else {
     label = 9;
    }
   } else {
    label = 9;
   }
   if ((label|0) == 9) {
    $46 = $2;
    $47 = ((($46)) + 34660|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)!=(0);
    $50 = $49 ? 1 : 2;
    $51 = $2;
    $$sink = $50;$$sink2 = $51;
   }
   $52 = ((($$sink2)) + 34644|0);
   HEAP32[$52>>2] = $$sink;
   $1 = 0;
   $247 = $1;
   STACKTOP = sp;return ($247|0);
  }
 } while(0);
 $58 = $2;
 $59 = ((($3)) + 4|0);
 $60 = (_itf8_decode_crc($58,$59,$8)|0);
 $6 = $60;
 $61 = ($60|0)==(-1);
 if ($61) {
  $1 = 0;
  $247 = $1;
  STACKTOP = sp;return ($247|0);
 }
 $62 = $6;
 $63 = $7;
 $64 = (($63) + ($62))|0;
 $7 = $64;
 $65 = $2;
 $66 = ((($3)) + 8|0);
 $67 = (_itf8_decode_crc($65,$66,$8)|0);
 $6 = $67;
 $68 = ($67|0)==(-1);
 if ($68) {
  $1 = 0;
  $247 = $1;
  STACKTOP = sp;return ($247|0);
 }
 $69 = $6;
 $70 = $7;
 $71 = (($70) + ($69))|0;
 $7 = $71;
 $72 = $2;
 $73 = ((($3)) + 12|0);
 $74 = (_itf8_decode_crc($72,$73,$8)|0);
 $6 = $74;
 $75 = ($74|0)==(-1);
 if ($75) {
  $1 = 0;
  $247 = $1;
  STACKTOP = sp;return ($247|0);
 }
 $76 = $6;
 $77 = $7;
 $78 = (($77) + ($76))|0;
 $7 = $78;
 $79 = $2;
 $80 = ((($3)) + 32|0);
 $81 = (_itf8_decode_crc($79,$80,$8)|0);
 $6 = $81;
 $82 = ($81|0)==(-1);
 if ($82) {
  $1 = 0;
  $247 = $1;
  STACKTOP = sp;return ($247|0);
 }
 $83 = $6;
 $84 = $7;
 $85 = (($84) + ($83))|0;
 $7 = $85;
 $86 = $2;
 $87 = ((($86)) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = $88 >> 8;
 $90 = ($89|0)==(1);
 do {
  if ($90) {
   $91 = ((($3)) + 16|0);
   $92 = $91;
   $93 = $92;
   HEAP32[$93>>2] = 0;
   $94 = (($92) + 4)|0;
   $95 = $94;
   HEAP32[$95>>2] = 0;
   $96 = ((($3)) + 24|0);
   $97 = $96;
   $98 = $97;
   HEAP32[$98>>2] = 0;
   $99 = (($97) + 4)|0;
   $100 = $99;
   HEAP32[$100>>2] = 0;
  } else {
   $101 = $2;
   $102 = ((($101)) + 8|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = $103 >> 8;
   $105 = ($104|0)>=(3);
   $106 = $2;
   do {
    if ($105) {
     $107 = ((($3)) + 16|0);
     $108 = (_ltf8_decode_crc($106,$107,$8)|0);
     $6 = $108;
     $109 = ($108|0)==(-1);
     if (!($109)) {
      $110 = $6;
      $111 = $7;
      $112 = (($111) + ($110))|0;
      $7 = $112;
      break;
     }
     $1 = 0;
     $247 = $1;
     STACKTOP = sp;return ($247|0);
    } else {
     $113 = (_itf8_decode_crc($106,$10,$8)|0);
     $6 = $113;
     $114 = ($113|0)==(-1);
     if (!($114)) {
      $115 = $6;
      $116 = $7;
      $117 = (($116) + ($115))|0;
      $7 = $117;
      $118 = HEAP32[$10>>2]|0;
      $119 = ($118|0)<(0);
      $120 = $119 << 31 >> 31;
      $121 = ((($3)) + 16|0);
      $122 = $121;
      $123 = $122;
      HEAP32[$123>>2] = $118;
      $124 = (($122) + 4)|0;
      $125 = $124;
      HEAP32[$125>>2] = $120;
      break;
     }
     $1 = 0;
     $247 = $1;
     STACKTOP = sp;return ($247|0);
    }
   } while(0);
   $126 = $2;
   $127 = ((($3)) + 24|0);
   $128 = (_ltf8_decode_crc($126,$127,$8)|0);
   $6 = $128;
   $129 = ($128|0)==(-1);
   if (!($129)) {
    $130 = $6;
    $131 = $7;
    $132 = (($131) + ($130))|0;
    $7 = $132;
    break;
   }
   $1 = 0;
   $247 = $1;
   STACKTOP = sp;return ($247|0);
  }
 } while(0);
 $133 = $2;
 $134 = ((($3)) + 36|0);
 $135 = (_itf8_decode_crc($133,$134,$8)|0);
 $6 = $135;
 $136 = ($135|0)==(-1);
 if ($136) {
  $1 = 0;
  $247 = $1;
  STACKTOP = sp;return ($247|0);
 }
 $137 = $6;
 $138 = $7;
 $139 = (($138) + ($137))|0;
 $7 = $139;
 $140 = $2;
 $141 = ((($3)) + 40|0);
 $142 = (_itf8_decode_crc($140,$141,$8)|0);
 $6 = $142;
 $143 = ($142|0)==(-1);
 if ($143) {
  $1 = 0;
  $247 = $1;
  STACKTOP = sp;return ($247|0);
 }
 $144 = $6;
 $145 = $7;
 $146 = (($145) + ($144))|0;
 $7 = $146;
 $147 = (_calloc(1,352)|0);
 $4 = $147;
 $148 = ($147|0)!=(0|0);
 if (!($148)) {
  $1 = 0;
  $247 = $1;
  STACKTOP = sp;return ($247|0);
 }
 $149 = $4;
 _memcpy(($149|0),($3|0),352)|0;
 $150 = $4;
 $151 = ((($150)) + 40|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = $152<<2;
 $154 = (_malloc($153)|0);
 $155 = $4;
 $156 = ((($155)) + 44|0);
 HEAP32[$156>>2] = $154;
 $157 = ($154|0)!=(0|0);
 if (!($157)) {
  $158 = $4;
  $159 = ((($158)) + 40|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = ($160|0)!=(0);
  if ($161) {
   $162 = (___errno_location()|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $2;
   $165 = ((($164)) + 32|0);
   HEAP32[$165>>2] = $163;
   $166 = $4;
   _cram_free_container($166);
   $1 = 0;
   $247 = $1;
   STACKTOP = sp;return ($247|0);
  }
 }
 $5 = 0;
 while(1) {
  $167 = $5;
  $168 = $4;
  $169 = ((($168)) + 40|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = ($167|0)<($170|0);
  $172 = $2;
  if (!($171)) {
   break;
  }
  $173 = $4;
  $174 = ((($173)) + 44|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = $5;
  $177 = (($175) + ($176<<2)|0);
  $178 = (_itf8_decode_crc($172,$177,$8)|0);
  $6 = $178;
  $179 = ($178|0)==(-1);
  if ($179) {
   label = 44;
   break;
  }
  $181 = $6;
  $182 = $7;
  $183 = (($182) + ($181))|0;
  $7 = $183;
  $184 = $5;
  $185 = (($184) + 1)|0;
  $5 = $185;
 }
 if ((label|0) == 44) {
  $180 = $4;
  _cram_free_container($180);
  $1 = 0;
  $247 = $1;
  STACKTOP = sp;return ($247|0);
 }
 $186 = ((($172)) + 8|0);
 $187 = HEAP32[$186>>2]|0;
 $188 = $187 >> 8;
 $189 = ($188|0)>=(3);
 if ($189) {
  $190 = $2;
  $191 = $4;
  $192 = ((($191)) + 348|0);
  $193 = (_int32_decode($190,$192)|0);
  $194 = (-1)==($193|0);
  if ($194) {
   $1 = 0;
   $247 = $1;
   STACKTOP = sp;return ($247|0);
  }
  $195 = $7;
  $196 = (($195) + 4)|0;
  $7 = $196;
  $197 = HEAP32[$8>>2]|0;
  $198 = $4;
  $199 = ((($198)) + 348|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = ($197|0)!=($200|0);
  if ($201) {
   $202 = HEAP32[2398]|0;
   (_fprintf($202,14190,$vararg_buffer)|0);
   $203 = $4;
   _cram_free_container($203);
   $1 = 0;
   $247 = $1;
   STACKTOP = sp;return ($247|0);
  }
 }
 $204 = $7;
 $205 = $4;
 $206 = ((($205)) + 48|0);
 HEAP32[$206>>2] = $204;
 $207 = $4;
 $208 = ((($207)) + 96|0);
 HEAP32[$208>>2] = 0;
 $209 = $4;
 $210 = ((($209)) + 64|0);
 HEAP32[$210>>2] = 0;
 $211 = $4;
 $212 = ((($211)) + 40|0);
 $213 = HEAP32[$212>>2]|0;
 $214 = $4;
 $215 = ((($214)) + 60|0);
 HEAP32[$215>>2] = $213;
 $216 = $4;
 $217 = ((($216)) + 84|0);
 HEAP32[$217>>2] = 0;
 $218 = $4;
 $219 = ((($218)) + 72|0);
 HEAP32[$219>>2] = 0;
 $220 = $4;
 $221 = ((($220)) + 68|0);
 HEAP32[$221>>2] = 0;
 $222 = $4;
 $223 = ((($222)) + 4|0);
 $224 = HEAP32[$223>>2]|0;
 $225 = ($224|0)==(-2);
 if ($225) {
  $226 = $4;
  $227 = ((($226)) + 116|0);
  HEAP32[$227>>2] = 1;
  $228 = $2;
  $229 = ((($228)) + 34652|0);
  HEAP32[$229>>2] = 1;
 }
 $230 = $4;
 $231 = ((($230)) + 32|0);
 $232 = HEAP32[$231>>2]|0;
 $233 = ($232|0)==(0);
 if ($233) {
  $234 = $4;
  $235 = ((($234)) + 4|0);
  $236 = HEAP32[$235>>2]|0;
  $237 = ($236|0)==(-1);
  if ($237) {
   $238 = $4;
   $239 = ((($238)) + 8|0);
   $240 = HEAP32[$239>>2]|0;
   $241 = ($240|0)==(4542278);
   $242 = $241;
  } else {
   $242 = 0;
  }
 } else {
  $242 = 0;
 }
 $243 = $242 ? 1 : 0;
 $244 = $2;
 $245 = ((($244)) + 34660|0);
 HEAP32[$245>>2] = $243;
 $246 = $4;
 $1 = $246;
 $247 = $1;
 STACKTOP = sp;return ($247|0);
}
function _kh_destroy_m_s2i($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _kh_destroy_map($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _cram_free_slice_header($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 40|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
 }
 $11 = $1;
 _free($11);
 STACKTOP = sp;return;
}
function _cram_read_file_def($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $4 = (_malloc(26)|0);
 $3 = $4;
 $5 = $3;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $1 = 0;
  $37 = $1;
  STACKTOP = sp;return ($37|0);
 }
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $10 = (_hread($8,$9,26)|0);
 $11 = (26)!=($10|0);
 $12 = $3;
 if ($11) {
  _free($12);
  $1 = 0;
  $37 = $1;
  STACKTOP = sp;return ($37|0);
 }
 $13 = (_memcmp($12,14610,4)|0);
 $14 = ($13|0)!=(0);
 $15 = $3;
 if ($14) {
  _free($15);
  $1 = 0;
  $37 = $1;
  STACKTOP = sp;return ($37|0);
 }
 $16 = ((($15)) + 4|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)>(3);
 if ($19) {
  $20 = HEAP32[2398]|0;
  $21 = $3;
  $22 = ((($21)) + 4|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $3;
  $26 = ((($25)) + 5|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  HEAP32[$vararg_buffer>>2] = $24;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $28;
  (_fprintf($20,14222,$vararg_buffer)|0);
  $29 = $3;
  _free($29);
  $1 = 0;
  $37 = $1;
  STACKTOP = sp;return ($37|0);
 } else {
  $30 = $2;
  $31 = ((($30)) + 34640|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 26)|0;
  HEAP32[$31>>2] = $33;
  $34 = $2;
  $35 = ((($34)) + 34648|0);
  HEAP32[$35>>2] = 0;
  $36 = $3;
  $1 = $36;
  $37 = $1;
  STACKTOP = sp;return ($37|0);
 }
 return (0)|0;
}
function _cram_read_SAM_hdr($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 28|0;
 $2 = $0;
 $11 = $2;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 >> 8;
 $15 = ($14|0)==(1);
 $16 = $2;
 do {
  if ($15) {
   $17 = (_int32_decode($16,$3)|0);
   $18 = (-1)==($17|0);
   if ($18) {
    $1 = 0;
    $308 = $1;
    STACKTOP = sp;return ($308|0);
   }
   $19 = HEAP32[$3>>2]|0;
   $20 = ($19|0)<(0);
   if (!($20)) {
    $21 = HEAP32[$3>>2]|0;
    $22 = (($21) + 1)|0;
    $23 = (_malloc($22)|0);
    $4 = $23;
    $24 = (0|0)==($23|0);
    if (!($24)) {
     $25 = HEAP32[$3>>2]|0;
     $26 = $2;
     $27 = HEAP32[$26>>2]|0;
     $28 = $4;
     $29 = HEAP32[$3>>2]|0;
     $30 = (_hread($27,$28,$29)|0);
     $31 = ($25|0)!=($30|0);
     if (!($31)) {
      $32 = $4;
      $33 = HEAP32[$3>>2]|0;
      $34 = (($32) + ($33)|0);
      HEAP8[$34>>0] = 0;
      $35 = HEAP32[$3>>2]|0;
      $36 = (4 + ($35))|0;
      $37 = $2;
      $38 = ((($37)) + 34640|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = (($39) + ($36))|0;
      HEAP32[$38>>2] = $40;
      break;
     }
     $1 = 0;
     $308 = $1;
     STACKTOP = sp;return ($308|0);
    }
   }
   $1 = 0;
   $308 = $1;
   STACKTOP = sp;return ($308|0);
  } else {
   $41 = (_cram_read_container($16)|0);
   $6 = $41;
   $42 = $6;
   $43 = ($42|0)!=(0|0);
   if (!($43)) {
    $1 = 0;
    $308 = $1;
    STACKTOP = sp;return ($308|0);
   }
   $44 = $6;
   $45 = ((($44)) + 36|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)<(1);
   if ($47) {
    $48 = $6;
    _cram_free_container($48);
    $1 = 0;
    $308 = $1;
    STACKTOP = sp;return ($308|0);
   }
   $49 = $2;
   $50 = (_cram_read_block($49)|0);
   $7 = $50;
   $51 = ($50|0)!=(0|0);
   if (!($51)) {
    $52 = $6;
    _cram_free_container($52);
    $1 = 0;
    $308 = $1;
    STACKTOP = sp;return ($308|0);
   }
   $53 = $7;
   $54 = (_cram_uncompress_block($53)|0);
   $55 = ($54|0)!=(0);
   if ($55) {
    $56 = $6;
    _cram_free_container($56);
    $1 = 0;
    $308 = $1;
    STACKTOP = sp;return ($308|0);
   }
   $57 = $7;
   $58 = ((($57)) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59) + 2)|0;
   $61 = $2;
   $62 = ((($61)) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 >> 8;
   $65 = ($64|0)>=(3);
   $66 = $65&1;
   $67 = $66<<2;
   $68 = (($60) + ($67))|0;
   $69 = $7;
   $70 = ((($69)) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $71 & -128;
   $73 = ($72|0)!=(0);
   if ($73) {
    $74 = $7;
    $75 = ((($74)) + 12|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & -16384;
    $78 = ($77|0)!=(0);
    if ($78) {
     $79 = $7;
     $80 = ((($79)) + 12|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = $81 & -2097152;
     $83 = ($82|0)!=(0);
     if ($83) {
      $84 = $7;
      $85 = ((($84)) + 12|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = $86 & -268435456;
      $88 = ($87|0)!=(0);
      $89 = $88 ^ 1;
      $90 = $89 ? 4 : 5;
      $92 = $90;
     } else {
      $92 = 3;
     }
    } else {
     $92 = 2;
    }
   } else {
    $92 = 1;
   }
   $91 = (($68) + ($92))|0;
   $93 = $7;
   $94 = ((($93)) + 20|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $95 & -128;
   $97 = ($96|0)!=(0);
   if ($97) {
    $98 = $7;
    $99 = ((($98)) + 20|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & -16384;
    $102 = ($101|0)!=(0);
    if ($102) {
     $103 = $7;
     $104 = ((($103)) + 20|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = $105 & -2097152;
     $107 = ($106|0)!=(0);
     if ($107) {
      $108 = $7;
      $109 = ((($108)) + 20|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = $110 & -268435456;
      $112 = ($111|0)!=(0);
      $113 = $112 ^ 1;
      $114 = $113 ? 4 : 5;
      $116 = $114;
     } else {
      $116 = 3;
     }
    } else {
     $116 = 2;
    }
   } else {
    $116 = 1;
   }
   $115 = (($91) + ($116))|0;
   $117 = $7;
   $118 = ((($117)) + 16|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $119 & -128;
   $121 = ($120|0)!=(0);
   if ($121) {
    $122 = $7;
    $123 = ((($122)) + 16|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = $124 & -16384;
    $126 = ($125|0)!=(0);
    if ($126) {
     $127 = $7;
     $128 = ((($127)) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = $129 & -2097152;
     $131 = ($130|0)!=(0);
     if ($131) {
      $132 = $7;
      $133 = ((($132)) + 16|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = $134 & -268435456;
      $136 = ($135|0)!=(0);
      $137 = $136 ^ 1;
      $138 = $137 ? 4 : 5;
      $140 = $138;
     } else {
      $140 = 3;
     }
    } else {
     $140 = 2;
    }
   } else {
    $140 = 1;
   }
   $139 = (($115) + ($140))|0;
   $9 = $139;
   $141 = $7;
   $142 = (_int32_get_blk($141,$3)|0);
   $143 = (-1)==($142|0);
   $144 = HEAP32[$3>>2]|0;
   $145 = ($144|0)<(0);
   $or$cond = $143 | $145;
   if (!($or$cond)) {
    $146 = $7;
    $147 = ((($146)) + 20|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = (($148) - 4)|0;
    $150 = HEAP32[$3>>2]|0;
    $151 = ($149|0)<($150|0);
    if (!($151)) {
     $154 = HEAP32[$3>>2]|0;
     $155 = (($154) + 1)|0;
     $156 = (_malloc($155)|0);
     $4 = $156;
     $157 = (0|0)==($156|0);
     if ($157) {
      $158 = $6;
      _cram_free_container($158);
      $159 = $7;
      _cram_free_block($159);
      $1 = 0;
      $308 = $1;
      STACKTOP = sp;return ($308|0);
     }
     $160 = $4;
     $161 = $7;
     $162 = ((($161)) + 32|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = $7;
     $165 = ((($164)) + 40|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = (($163) + ($166)|0);
     $168 = HEAP32[$3>>2]|0;
     _memcpy(($160|0),($167|0),($168|0))|0;
     $169 = $4;
     $170 = HEAP32[$3>>2]|0;
     $171 = (($169) + ($170)|0);
     HEAP8[$171>>0] = 0;
     $172 = $7;
     _cram_free_block($172);
     $8 = 1;
     while(1) {
      $173 = $8;
      $174 = $6;
      $175 = ((($174)) + 36|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($173|0)<($176|0);
      if (!($177)) {
       break;
      }
      $178 = $2;
      $179 = (_cram_read_block($178)|0);
      $7 = $179;
      $180 = ($179|0)!=(0|0);
      if (!($180)) {
       label = 38;
       break;
      }
      $182 = $7;
      $183 = ((($182)) + 16|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = (($184) + 2)|0;
      $186 = $2;
      $187 = ((($186)) + 8|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = $188 >> 8;
      $190 = ($189|0)>=(3);
      $191 = $190&1;
      $192 = $191<<2;
      $193 = (($185) + ($192))|0;
      $194 = $7;
      $195 = ((($194)) + 12|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = $196 & -128;
      $198 = ($197|0)!=(0);
      if ($198) {
       $199 = $7;
       $200 = ((($199)) + 12|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = $201 & -16384;
       $203 = ($202|0)!=(0);
       if ($203) {
        $204 = $7;
        $205 = ((($204)) + 12|0);
        $206 = HEAP32[$205>>2]|0;
        $207 = $206 & -2097152;
        $208 = ($207|0)!=(0);
        if ($208) {
         $209 = $7;
         $210 = ((($209)) + 12|0);
         $211 = HEAP32[$210>>2]|0;
         $212 = $211 & -268435456;
         $213 = ($212|0)!=(0);
         $214 = $213 ^ 1;
         $215 = $214 ? 4 : 5;
         $217 = $215;
        } else {
         $217 = 3;
        }
       } else {
        $217 = 2;
       }
      } else {
       $217 = 1;
      }
      $216 = (($193) + ($217))|0;
      $218 = $7;
      $219 = ((($218)) + 20|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 & -128;
      $222 = ($221|0)!=(0);
      do {
       if ($222) {
        $223 = $7;
        $224 = ((($223)) + 20|0);
        $225 = HEAP32[$224>>2]|0;
        $226 = $225 & -16384;
        $227 = ($226|0)!=(0);
        if ($227) {
         $228 = $7;
         $229 = ((($228)) + 20|0);
         $230 = HEAP32[$229>>2]|0;
         $231 = $230 & -2097152;
         $232 = ($231|0)!=(0);
         if (!($232)) {
          $241 = 3;
          break;
         }
         $233 = $7;
         $234 = ((($233)) + 20|0);
         $235 = HEAP32[$234>>2]|0;
         $236 = $235 & -268435456;
         $237 = ($236|0)!=(0);
         $238 = $237 ^ 1;
         $239 = $238 ? 4 : 5;
         $241 = $239;
        } else {
         $241 = 2;
        }
       } else {
        $241 = 1;
       }
      } while(0);
      $240 = (($216) + ($241))|0;
      $242 = $7;
      $243 = ((($242)) + 16|0);
      $244 = HEAP32[$243>>2]|0;
      $245 = $244 & -128;
      $246 = ($245|0)!=(0);
      do {
       if ($246) {
        $247 = $7;
        $248 = ((($247)) + 16|0);
        $249 = HEAP32[$248>>2]|0;
        $250 = $249 & -16384;
        $251 = ($250|0)!=(0);
        if (!($251)) {
         $265 = 2;
         break;
        }
        $252 = $7;
        $253 = ((($252)) + 16|0);
        $254 = HEAP32[$253>>2]|0;
        $255 = $254 & -2097152;
        $256 = ($255|0)!=(0);
        if (!($256)) {
         $265 = 3;
         break;
        }
        $257 = $7;
        $258 = ((($257)) + 16|0);
        $259 = HEAP32[$258>>2]|0;
        $260 = $259 & -268435456;
        $261 = ($260|0)!=(0);
        $262 = $261 ^ 1;
        $263 = $262 ? 4 : 5;
        $265 = $263;
       } else {
        $265 = 1;
       }
      } while(0);
      $264 = (($240) + ($265))|0;
      $266 = $9;
      $267 = (($266) + ($264))|0;
      $9 = $267;
      $268 = $7;
      _cram_free_block($268);
      $269 = $8;
      $270 = (($269) + 1)|0;
      $8 = $270;
     }
     if ((label|0) == 38) {
      $181 = $6;
      _cram_free_container($181);
      $1 = 0;
      $308 = $1;
      STACKTOP = sp;return ($308|0);
     }
     $271 = $6;
     $272 = HEAP32[$271>>2]|0;
     $273 = ($272|0)>(0);
     $274 = $9;
     $275 = ($274|0)>(0);
     $or$cond3 = $273 & $275;
     do {
      if ($or$cond3) {
       $276 = $6;
       $277 = HEAP32[$276>>2]|0;
       $278 = $9;
       $279 = ($277|0)>($278|0);
       if ($279) {
        $280 = $6;
        $281 = HEAP32[$280>>2]|0;
        $282 = $9;
        $283 = (($281) - ($282))|0;
        $284 = (_malloc($283)|0);
        $10 = $284;
        $285 = $10;
        $286 = ($285|0)!=(0|0);
        $287 = $6;
        if (!($286)) {
         _cram_free_container($287);
         $1 = 0;
         $308 = $1;
         STACKTOP = sp;return ($308|0);
        }
        $288 = HEAP32[$287>>2]|0;
        $289 = $9;
        $290 = (($288) - ($289))|0;
        $291 = $2;
        $292 = HEAP32[$291>>2]|0;
        $293 = $10;
        $294 = $6;
        $295 = HEAP32[$294>>2]|0;
        $296 = $9;
        $297 = (($295) - ($296))|0;
        $298 = (_hread($292,$293,$297)|0);
        $299 = ($290|0)!=($298|0);
        if (!($299)) {
         $301 = $10;
         _free($301);
         break;
        }
        $300 = $6;
        _cram_free_container($300);
        $1 = 0;
        $308 = $1;
        STACKTOP = sp;return ($308|0);
       }
      }
     } while(0);
     $302 = $6;
     _cram_free_container($302);
     break;
    }
   }
   $152 = $6;
   _cram_free_container($152);
   $153 = $7;
   _cram_free_block($153);
   $1 = 0;
   $308 = $1;
   STACKTOP = sp;return ($308|0);
  }
 } while(0);
 $303 = $4;
 $304 = HEAP32[$3>>2]|0;
 $305 = (_sam_hdr_parse_($303,$304)|0);
 $5 = $305;
 $306 = $4;
 _free($306);
 $307 = $5;
 $1 = $307;
 $308 = $1;
 STACKTOP = sp;return ($308|0);
}
function _cram_dopen($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = (_calloc(1,34776)|0);
 $9 = $11;
 $12 = $9;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $3 = 0;
  $222 = $3;
  STACKTOP = sp;return ($222|0);
 }
 $14 = $9;
 $15 = ((($14)) + 76|0);
 HEAP32[$15>>2] = 5;
 $7 = 0;
 while(1) {
  $16 = $6;
  $17 = $7;
  $18 = (($16) + ($17)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = ($19<<24>>24)!=(0);
  if (!($20)) {
   break;
  }
  $21 = $6;
  $22 = $7;
  $23 = (($21) + ($22)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 << 24 >> 24;
  $26 = ($25|0)>=(48);
  if ($26) {
   $27 = $6;
   $28 = $7;
   $29 = (($27) + ($28)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30 << 24 >> 24;
   $32 = ($31|0)<=(57);
   if ($32) {
    label = 7;
    break;
   }
  }
  $41 = $7;
  $42 = (($41) + 1)|0;
  $7 = $42;
 }
 if ((label|0) == 7) {
  $33 = $6;
  $34 = $7;
  $35 = (($33) + ($34)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36 << 24 >> 24;
  $38 = (($37) - 48)|0;
  $39 = $9;
  $40 = ((($39)) + 76|0);
  HEAP32[$40>>2] = $38;
 }
 $43 = $4;
 $44 = $9;
 HEAP32[$44>>2] = $43;
 $45 = $6;
 $46 = HEAP8[$45>>0]|0;
 $47 = $46 << 24 >> 24;
 $48 = $9;
 $49 = ((($48)) + 4|0);
 HEAP32[$49>>2] = $47;
 $50 = $9;
 $51 = ((($50)) + 34640|0);
 HEAP32[$51>>2] = 0;
 $52 = $9;
 $53 = ((($52)) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)==(114);
 do {
  if ($55) {
   $56 = $9;
   $57 = (_cram_read_file_def($56)|0);
   $58 = $9;
   $59 = ((($58)) + 12|0);
   HEAP32[$59>>2] = $57;
   $60 = ($57|0)!=(0|0);
   if ($60) {
    $61 = $9;
    $62 = ((($61)) + 12|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ((($63)) + 4|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65&255;
    $67 = $66<<8;
    $68 = $9;
    $69 = ((($68)) + 12|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ((($70)) + 5|0);
    $72 = HEAP8[$71>>0]|0;
    $73 = $72&255;
    $74 = (($67) + ($73))|0;
    $75 = $9;
    $76 = ((($75)) + 8|0);
    HEAP32[$76>>2] = $74;
    $77 = $9;
    $78 = (_cram_read_SAM_hdr($77)|0);
    $79 = $9;
    $80 = ((($79)) + 16|0);
    HEAP32[$80>>2] = $78;
    $81 = ($78|0)!=(0|0);
    if ($81) {
     label = 15;
    }
   }
  } else {
   $82 = (_calloc(1,26)|0);
   $10 = $82;
   $83 = $10;
   $84 = ($83|0)!=(0|0);
   if ($84) {
    $85 = $10;
    $86 = $9;
    $87 = ((($86)) + 12|0);
    HEAP32[$87>>2] = $85;
    $88 = $10;
    HEAP8[$88>>0] = 67;
    $89 = $10;
    $90 = ((($89)) + 1|0);
    HEAP8[$90>>0] = 82;
    $91 = $10;
    $92 = ((($91)) + 2|0);
    HEAP8[$92>>0] = 65;
    $93 = $10;
    $94 = ((($93)) + 3|0);
    HEAP8[$94>>0] = 77;
    $95 = $10;
    $96 = ((($95)) + 4|0);
    HEAP8[$96>>0] = 0;
    $97 = $10;
    $98 = ((($97)) + 5|0);
    HEAP8[$98>>0] = 0;
    $99 = $10;
    $100 = ((($99)) + 6|0);
    dest=$100; stop=dest+20|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    $101 = $10;
    $102 = ((($101)) + 6|0);
    $103 = $5;
    (_strncpy($102,$103,20)|0);
    $104 = (256*3)|0;
    $105 = (($104) + 0)|0;
    $106 = $9;
    $107 = ((($106)) + 8|0);
    HEAP32[$107>>2] = $105;
    label = 15;
    break;
   }
   $3 = 0;
   $222 = $3;
   STACKTOP = sp;return ($222|0);
  }
 } while(0);
 if ((label|0) == 15) {
  $108 = $9;
  _cram_init_tables($108);
  $109 = $5;
  $110 = (_strrchr($109,47)|0);
  $8 = $110;
  $111 = ($110|0)!=(0|0);
  $112 = $8;
  $113 = ((($112)) + 1|0);
  $114 = $5;
  $115 = $111 ? $113 : $114;
  $116 = (___strdup($115)|0);
  $117 = $9;
  $118 = ((($117)) + 20|0);
  HEAP32[$118>>2] = $116;
  $119 = $9;
  $120 = ((($119)) + 20|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($121|0)!=(0|0);
  if ($122) {
   $123 = $9;
   $124 = ((($123)) + 44|0);
   HEAP32[$124>>2] = -1;
   $125 = $9;
   $126 = ((($125)) + 40|0);
   HEAP32[$126>>2] = -1;
   $127 = $9;
   $128 = ((($127)) + 24|0);
   $129 = $128;
   $130 = $129;
   HEAP32[$130>>2] = 0;
   $131 = (($129) + 4)|0;
   $132 = $131;
   HEAP32[$132>>2] = 0;
   $133 = $9;
   $134 = ((($133)) + 36|0);
   HEAP32[$134>>2] = 0;
   $135 = (_refs_create()|0);
   $136 = $9;
   $137 = ((($136)) + 48|0);
   HEAP32[$137>>2] = $135;
   $138 = $9;
   $139 = ((($138)) + 48|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ($140|0)!=(0|0);
   if ($141) {
    $142 = $9;
    $143 = ((($142)) + 60|0);
    HEAP32[$143>>2] = -2;
    $144 = $9;
    $145 = ((($144)) + 52|0);
    HEAP32[$145>>2] = 0;
    $146 = $9;
    $147 = ((($146)) + 268|0);
    HEAP32[$147>>2] = 0;
    $148 = $9;
    $149 = ((($148)) + 272|0);
    HEAP32[$149>>2] = 0;
    $150 = $9;
    $151 = ((($150)) + 276|0);
    HEAP32[$151>>2] = 10000;
    $152 = $9;
    $153 = ((($152)) + 280|0);
    HEAP32[$153>>2] = 1;
    $154 = $9;
    $155 = ((($154)) + 284|0);
    HEAP32[$155>>2] = 0;
    $156 = $9;
    $157 = ((($156)) + 288|0);
    HEAP32[$157>>2] = 0;
    $158 = $9;
    $159 = ((($158)) + 292|0);
    HEAP32[$159>>2] = 0;
    $160 = $9;
    $161 = ((($160)) + 296|0);
    HEAP32[$161>>2] = 0;
    $162 = $9;
    $163 = ((($162)) + 8|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = $164 >> 8;
    $166 = ($165|0)>=(3);
    $167 = $166&1;
    $168 = $9;
    $169 = ((($168)) + 300|0);
    HEAP32[$169>>2] = $167;
    $170 = $9;
    $171 = ((($170)) + 304|0);
    HEAP32[$171>>2] = 0;
    $172 = $9;
    $173 = ((($172)) + 34652|0);
    HEAP32[$173>>2] = -1;
    $174 = $9;
    $175 = ((($174)) + 34656|0);
    HEAP32[$175>>2] = 0;
    $176 = $9;
    $177 = ((($176)) + 308|0);
    HEAP32[$177>>2] = 0;
    $178 = $9;
    $179 = ((($178)) + 34636|0);
    HEAP32[$179>>2] = 0;
    $180 = $9;
    $181 = ((($180)) + 34664|0);
    HEAP32[$181>>2] = 0;
    $182 = $9;
    $183 = ((($182)) + 34668|0);
    HEAP32[$183>>2] = 0;
    $184 = $9;
    $185 = ((($184)) + 34672|0);
    HEAP32[$185>>2] = 0;
    $186 = $9;
    $187 = ((($186)) + 34764|0);
    HEAP32[$187>>2] = 0;
    $188 = $9;
    $189 = ((($188)) + 34768|0);
    HEAP32[$189>>2] = 0;
    $190 = $9;
    $191 = ((($190)) + 312|0);
    HEAP32[$191>>2] = 2147483647;
    $7 = 0;
    while(1) {
     $192 = $7;
     $193 = ($192|0)<(47);
     if (!($193)) {
      break;
     }
     $194 = (_cram_new_metrics()|0);
     $195 = $9;
     $196 = ((($195)) + 80|0);
     $197 = $7;
     $198 = (($196) + ($197<<2)|0);
     HEAP32[$198>>2] = $194;
     $199 = $7;
     $200 = (($199) + 1)|0;
     $7 = $200;
    }
    $201 = $9;
    $202 = ((($201)) + 316|0);
    HEAP32[$202>>2] = -2;
    $203 = $9;
    $204 = ((($203)) + 34644|0);
    HEAP32[$204>>2] = 1;
    $205 = $9;
    $206 = ((($205)) + 72|0);
    HEAP32[$206>>2] = 0;
    $207 = $9;
    $208 = ((($207)) + 34732|0);
    HEAP32[$208>>2] = 0;
    $209 = $9;
    $210 = ((($209)) + 48|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = $9;
    $213 = $9;
    $214 = ((($213)) + 16|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = (_refs_from_header($211,$212,$215)|0);
    $217 = (-1)==($216|0);
    if (!($217)) {
     $218 = $9;
     $3 = $218;
     $222 = $3;
     STACKTOP = sp;return ($222|0);
    }
   }
  }
 }
 $219 = $9;
 $220 = ($219|0)!=(0|0);
 if ($220) {
  $221 = $9;
  _free($221);
 }
 $3 = 0;
 $222 = $3;
 STACKTOP = sp;return ($222|0);
}
function _cram_init_tables($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $6 = $1;
 $7 = ((($6)) + 33096|0);
 _memset(($7|0),4,256)|0;
 $8 = $1;
 $9 = ((($8)) + 33096|0);
 $10 = ((($9)) + 65|0);
 HEAP8[$10>>0] = 0;
 $11 = $1;
 $12 = ((($11)) + 33096|0);
 $13 = ((($12)) + 97|0);
 HEAP8[$13>>0] = 0;
 $14 = $1;
 $15 = ((($14)) + 33096|0);
 $16 = ((($15)) + 67|0);
 HEAP8[$16>>0] = 1;
 $17 = $1;
 $18 = ((($17)) + 33096|0);
 $19 = ((($18)) + 99|0);
 HEAP8[$19>>0] = 1;
 $20 = $1;
 $21 = ((($20)) + 33096|0);
 $22 = ((($21)) + 71|0);
 HEAP8[$22>>0] = 2;
 $23 = $1;
 $24 = ((($23)) + 33096|0);
 $25 = ((($24)) + 103|0);
 HEAP8[$25>>0] = 2;
 $26 = $1;
 $27 = ((($26)) + 33096|0);
 $28 = ((($27)) + 84|0);
 HEAP8[$28>>0] = 3;
 $29 = $1;
 $30 = ((($29)) + 33096|0);
 $31 = ((($30)) + 116|0);
 HEAP8[$31>>0] = 3;
 $32 = $1;
 $33 = ((($32)) + 33352|0);
 _memset(($33|0),5,256)|0;
 $34 = $1;
 $35 = ((($34)) + 33352|0);
 $36 = ((($35)) + 65|0);
 HEAP8[$36>>0] = 0;
 $37 = $1;
 $38 = ((($37)) + 33352|0);
 $39 = ((($38)) + 97|0);
 HEAP8[$39>>0] = 0;
 $40 = $1;
 $41 = ((($40)) + 33352|0);
 $42 = ((($41)) + 67|0);
 HEAP8[$42>>0] = 1;
 $43 = $1;
 $44 = ((($43)) + 33352|0);
 $45 = ((($44)) + 99|0);
 HEAP8[$45>>0] = 1;
 $46 = $1;
 $47 = ((($46)) + 33352|0);
 $48 = ((($47)) + 71|0);
 HEAP8[$48>>0] = 2;
 $49 = $1;
 $50 = ((($49)) + 33352|0);
 $51 = ((($50)) + 103|0);
 HEAP8[$51>>0] = 2;
 $52 = $1;
 $53 = ((($52)) + 33352|0);
 $54 = ((($53)) + 84|0);
 HEAP8[$54>>0] = 3;
 $55 = $1;
 $56 = ((($55)) + 33352|0);
 $57 = ((($56)) + 116|0);
 HEAP8[$57>>0] = 3;
 $58 = $1;
 $59 = ((($58)) + 33352|0);
 $60 = ((($59)) + 78|0);
 HEAP8[$60>>0] = 4;
 $61 = $1;
 $62 = ((($61)) + 33352|0);
 $63 = ((($62)) + 110|0);
 HEAP8[$63>>0] = 4;
 $64 = $1;
 $65 = ((($64)) + 8|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $66 >> 8;
 $68 = ($67|0)==(1);
 $2 = 0;
 L1: do {
  if ($68) {
   while(1) {
    $69 = $2;
    $70 = ($69|0)<(512);
    if (!($70)) {
     break;
    }
    $3 = 0;
    $71 = $2;
    $72 = $71 & 256;
    $73 = ($72|0)!=(0);
    if ($73) {
     $74 = $3;
     $75 = $74 | 1;
     $3 = $75;
    }
    $76 = $2;
    $77 = $76 & 128;
    $78 = ($77|0)!=(0);
    if ($78) {
     $79 = $3;
     $80 = $79 | 2;
     $3 = $80;
    }
    $81 = $2;
    $82 = $81 & 64;
    $83 = ($82|0)!=(0);
    if ($83) {
     $84 = $3;
     $85 = $84 | 4;
     $3 = $85;
    }
    $86 = $2;
    $87 = $86 & 32;
    $88 = ($87|0)!=(0);
    if ($88) {
     $89 = $3;
     $90 = $89 | 16;
     $3 = $90;
    }
    $91 = $2;
    $92 = $91 & 16;
    $93 = ($92|0)!=(0);
    if ($93) {
     $94 = $3;
     $95 = $94 | 64;
     $3 = $95;
    }
    $96 = $2;
    $97 = $96 & 8;
    $98 = ($97|0)!=(0);
    if ($98) {
     $99 = $3;
     $100 = $99 | 128;
     $3 = $100;
    }
    $101 = $2;
    $102 = $101 & 4;
    $103 = ($102|0)!=(0);
    if ($103) {
     $104 = $3;
     $105 = $104 | 256;
     $3 = $105;
    }
    $106 = $2;
    $107 = $106 & 2;
    $108 = ($107|0)!=(0);
    if ($108) {
     $109 = $3;
     $110 = $109 | 512;
     $3 = $110;
    }
    $111 = $2;
    $112 = $111 & 1;
    $113 = ($112|0)!=(0);
    if ($113) {
     $114 = $3;
     $115 = $114 | 1024;
     $3 = $115;
    }
    $116 = $3;
    $117 = $1;
    $118 = ((($117)) + 328|0);
    $119 = $2;
    $120 = (($118) + ($119<<2)|0);
    HEAP32[$120>>2] = $116;
    $121 = $2;
    $122 = (($121) + 1)|0;
    $2 = $122;
   }
   $2 = 0;
   while(1) {
    $123 = $2;
    $124 = ($123|0)<(4096);
    if (!($124)) {
     break L1;
    }
    $4 = 0;
    $125 = $2;
    $126 = $125 & 1;
    $127 = ($126|0)!=(0);
    if ($127) {
     $128 = $4;
     $129 = $128 | 256;
     $4 = $129;
    }
    $130 = $2;
    $131 = $130 & 2;
    $132 = ($131|0)!=(0);
    if ($132) {
     $133 = $4;
     $134 = $133 | 128;
     $4 = $134;
    }
    $135 = $2;
    $136 = $135 & 4;
    $137 = ($136|0)!=(0);
    if ($137) {
     $138 = $4;
     $139 = $138 | 64;
     $4 = $139;
    }
    $140 = $2;
    $141 = $140 & 16;
    $142 = ($141|0)!=(0);
    if ($142) {
     $143 = $4;
     $144 = $143 | 32;
     $4 = $144;
    }
    $145 = $2;
    $146 = $145 & 64;
    $147 = ($146|0)!=(0);
    if ($147) {
     $148 = $4;
     $149 = $148 | 16;
     $4 = $149;
    }
    $150 = $2;
    $151 = $150 & 128;
    $152 = ($151|0)!=(0);
    if ($152) {
     $153 = $4;
     $154 = $153 | 8;
     $4 = $154;
    }
    $155 = $2;
    $156 = $155 & 256;
    $157 = ($156|0)!=(0);
    if ($157) {
     $158 = $4;
     $159 = $158 | 4;
     $4 = $159;
    }
    $160 = $2;
    $161 = $160 & 512;
    $162 = ($161|0)!=(0);
    if ($162) {
     $163 = $4;
     $164 = $163 | 2;
     $4 = $164;
    }
    $165 = $2;
    $166 = $165 & 1024;
    $167 = ($166|0)!=(0);
    if ($167) {
     $168 = $4;
     $169 = $168 | 1;
     $4 = $169;
    }
    $170 = $4;
    $171 = $1;
    $172 = ((($171)) + 16712|0);
    $173 = $2;
    $174 = (($172) + ($173<<2)|0);
    HEAP32[$174>>2] = $170;
    $175 = $2;
    $176 = (($175) + 1)|0;
    $2 = $176;
   }
  } else {
   while(1) {
    $177 = $2;
    $178 = ($177|0)<(4096);
    if (!($178)) {
     break;
    }
    $179 = $2;
    $180 = $1;
    $181 = ((($180)) + 328|0);
    $182 = $2;
    $183 = (($181) + ($182<<2)|0);
    HEAP32[$183>>2] = $179;
    $184 = $2;
    $185 = (($184) + 1)|0;
    $2 = $185;
   }
   $2 = 0;
   while(1) {
    $186 = $2;
    $187 = ($186|0)<(4096);
    if (!($187)) {
     break L1;
    }
    $188 = $2;
    $189 = $1;
    $190 = ((($189)) + 16712|0);
    $191 = $2;
    $192 = (($190) + ($191<<2)|0);
    HEAP32[$192>>2] = $188;
    $193 = $2;
    $194 = (($193) + 1)|0;
    $2 = $194;
   }
  }
 } while(0);
 $195 = $1;
 $196 = ((($195)) + 33608|0);
 _memset(($196|0),4,1024)|0;
 $2 = 0;
 while(1) {
  $197 = $2;
  $198 = ($197|0)<(32);
  if (!($198)) {
   break;
  }
  $199 = $1;
  $200 = ((($199)) + 33608|0);
  $201 = $2;
  $202 = (($200) + ($201<<5)|0);
  $203 = ((($202)) + 1|0);
  HEAP8[$203>>0] = 0;
  $204 = $1;
  $205 = ((($204)) + 33608|0);
  $206 = $2;
  $207 = (($205) + ($206<<5)|0);
  $208 = ((($207)) + 3|0);
  HEAP8[$208>>0] = 1;
  $209 = $1;
  $210 = ((($209)) + 33608|0);
  $211 = $2;
  $212 = (($210) + ($211<<5)|0);
  $213 = ((($212)) + 7|0);
  HEAP8[$213>>0] = 2;
  $214 = $1;
  $215 = ((($214)) + 33608|0);
  $216 = $2;
  $217 = (($215) + ($216<<5)|0);
  $218 = ((($217)) + 20|0);
  HEAP8[$218>>0] = 3;
  $219 = $1;
  $220 = ((($219)) + 33608|0);
  $221 = $2;
  $222 = (($220) + ($221<<5)|0);
  $223 = ((($222)) + 14|0);
  HEAP8[$223>>0] = 4;
  $224 = $2;
  $225 = (($224) + 1)|0;
  $2 = $225;
 }
 $2 = 0;
 while(1) {
  $226 = $2;
  $227 = ($226|0)<(20);
  if (!($227)) {
   break;
  }
  $5 = 0;
  while(1) {
   $228 = $5;
   $229 = ($228|0)<(20);
   $230 = $1;
   $231 = ((($230)) + 33608|0);
   $232 = $2;
   $233 = $232 >> 2;
   $234 = (14583 + ($233)|0);
   $235 = HEAP8[$234>>0]|0;
   $236 = $235 << 24 >> 24;
   $237 = $236 & 31;
   $238 = (($231) + ($237<<5)|0);
   if (!($229)) {
    break;
   }
   $239 = $5;
   $240 = (($238) + ($239)|0);
   HEAP8[$240>>0] = 3;
   $241 = $1;
   $242 = ((($241)) + 33608|0);
   $243 = $2;
   $244 = $243 >> 2;
   $245 = (14583 + ($244)|0);
   $246 = HEAP8[$245>>0]|0;
   $247 = $246 << 24 >> 24;
   $248 = $247 & 31;
   $249 = (($242) + ($248<<5)|0);
   $250 = $5;
   $251 = (($249) + ($250)|0);
   HEAP8[$251>>0] = 3;
   $252 = $1;
   $253 = ((($252)) + 33608|0);
   $254 = $2;
   $255 = $254 >> 2;
   $256 = (14583 + ($255)|0);
   $257 = HEAP8[$256>>0]|0;
   $258 = $257 << 24 >> 24;
   $259 = $258 & 31;
   $260 = (($253) + ($259<<5)|0);
   $261 = $5;
   $262 = (($260) + ($261)|0);
   HEAP8[$262>>0] = 3;
   $263 = $1;
   $264 = ((($263)) + 33608|0);
   $265 = $2;
   $266 = $265 >> 2;
   $267 = (14583 + ($266)|0);
   $268 = HEAP8[$267>>0]|0;
   $269 = $268 << 24 >> 24;
   $270 = $269 & 31;
   $271 = (($264) + ($270<<5)|0);
   $272 = $5;
   $273 = (($271) + ($272)|0);
   HEAP8[$273>>0] = 3;
   $274 = $5;
   $275 = (($274) + 1)|0;
   $5 = $275;
  }
  $276 = $2;
  $277 = (($276) + 0)|0;
  $278 = (14589 + ($277)|0);
  $279 = HEAP8[$278>>0]|0;
  $280 = $279 << 24 >> 24;
  $281 = $280 & 31;
  $282 = (($238) + ($281)|0);
  HEAP8[$282>>0] = 0;
  $283 = $1;
  $284 = ((($283)) + 33608|0);
  $285 = $2;
  $286 = $285 >> 2;
  $287 = (14583 + ($286)|0);
  $288 = HEAP8[$287>>0]|0;
  $289 = $288 << 24 >> 24;
  $290 = $289 & 31;
  $291 = (($284) + ($290<<5)|0);
  $292 = $2;
  $293 = (($292) + 1)|0;
  $294 = (14589 + ($293)|0);
  $295 = HEAP8[$294>>0]|0;
  $296 = $295 << 24 >> 24;
  $297 = $296 & 31;
  $298 = (($291) + ($297)|0);
  HEAP8[$298>>0] = 1;
  $299 = $1;
  $300 = ((($299)) + 33608|0);
  $301 = $2;
  $302 = $301 >> 2;
  $303 = (14583 + ($302)|0);
  $304 = HEAP8[$303>>0]|0;
  $305 = $304 << 24 >> 24;
  $306 = $305 & 31;
  $307 = (($300) + ($306<<5)|0);
  $308 = $2;
  $309 = (($308) + 2)|0;
  $310 = (14589 + ($309)|0);
  $311 = HEAP8[$310>>0]|0;
  $312 = $311 << 24 >> 24;
  $313 = $312 & 31;
  $314 = (($307) + ($313)|0);
  HEAP8[$314>>0] = 2;
  $315 = $1;
  $316 = ((($315)) + 33608|0);
  $317 = $2;
  $318 = $317 >> 2;
  $319 = (14583 + ($318)|0);
  $320 = HEAP8[$319>>0]|0;
  $321 = $320 << 24 >> 24;
  $322 = $321 & 31;
  $323 = (($316) + ($322<<5)|0);
  $324 = $2;
  $325 = (($324) + 3)|0;
  $326 = (14589 + ($325)|0);
  $327 = HEAP8[$326>>0]|0;
  $328 = $327 << 24 >> 24;
  $329 = $328 & 31;
  $330 = (($323) + ($329)|0);
  HEAP8[$330>>0] = 3;
  $331 = $2;
  $332 = (($331) + 4)|0;
  $2 = $332;
 }
 STACKTOP = sp;return;
}
function _cram_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 65568|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(65568|0);
 $7 = sp + 24|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = ((($9)) + 34768|0);
 HEAP32[$10>>2] = 0;
 $11 = $4;
 $12 = HEAP32[$11>>2]|0;
 $13 = $5;
 $14 = $6;
 $15 = (_hseek($12,$13,$14)|0);
 $16 = ($15|0)>=(0);
 if ($16) {
  $3 = 0;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 }
 $17 = $6;
 $18 = ($17|0)==(1);
 $19 = $5;
 $20 = ($19|0)>=(0);
 $or$cond = $18 & $20;
 if (!($or$cond)) {
  $3 = -1;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 }
 while(1) {
  $21 = $5;
  $22 = ($21|0)>(0);
  if (!($22)) {
   label = 9;
   break;
  }
  $23 = $5;
  $24 = (65536)<($23|0);
  $25 = $5;
  $26 = $24 ? 65536 : $25;
  $8 = $26;
  $27 = $8;
  $28 = $4;
  $29 = HEAP32[$28>>2]|0;
  $30 = $8;
  $31 = (_hread($29,$7,$30)|0);
  $32 = ($27|0)!=($31|0);
  if ($32) {
   label = 7;
   break;
  }
  $33 = $8;
  $34 = $5;
  $35 = (($34) - ($33))|0;
  $5 = $35;
 }
 if ((label|0) == 7) {
  $3 = -1;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 }
 else if ((label|0) == 9) {
  $3 = 0;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _cram_set_option($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$5>>2] = $varargs;
 $6 = $2;
 $7 = $3;
 $8 = (_cram_set_voption($6,$7,$5)|0);
 $4 = $8;
 $9 = $4;
 STACKTOP = sp;return ($9|0);
}
function _cram_set_voption($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $arglist_current = 0, $arglist_current10 = 0, $arglist_current13 = 0, $arglist_current16 = 0, $arglist_current19 = 0, $arglist_current22 = 0, $arglist_current25 = 0, $arglist_current28 = 0, $arglist_current31 = 0, $arglist_current34 = 0, $arglist_current37 = 0, $arglist_current40 = 0, $arglist_current43 = 0, $arglist_current46 = 0, $arglist_current55 = 0, $arglist_current58 = 0, $arglist_current61 = 0, $arglist_current64 = 0, $arglist_current67 = 0, $arglist_current7 = 0;
 var $arglist_next = 0, $arglist_next11 = 0, $arglist_next14 = 0, $arglist_next17 = 0, $arglist_next20 = 0, $arglist_next23 = 0, $arglist_next26 = 0, $arglist_next29 = 0, $arglist_next32 = 0, $arglist_next35 = 0, $arglist_next38 = 0, $arglist_next41 = 0, $arglist_next44 = 0, $arglist_next47 = 0, $arglist_next56 = 0, $arglist_next59 = 0, $arglist_next62 = 0, $arglist_next65 = 0, $arglist_next68 = 0, $arglist_next8 = 0;
 var $expanded = 0, $expanded100 = 0, $expanded102 = 0, $expanded103 = 0, $expanded104 = 0, $expanded106 = 0, $expanded107 = 0, $expanded109 = 0, $expanded110 = 0, $expanded111 = 0, $expanded113 = 0, $expanded114 = 0, $expanded116 = 0, $expanded117 = 0, $expanded118 = 0, $expanded120 = 0, $expanded121 = 0, $expanded123 = 0, $expanded124 = 0, $expanded125 = 0;
 var $expanded127 = 0, $expanded128 = 0, $expanded130 = 0, $expanded131 = 0, $expanded132 = 0, $expanded134 = 0, $expanded135 = 0, $expanded137 = 0, $expanded138 = 0, $expanded139 = 0, $expanded141 = 0, $expanded142 = 0, $expanded144 = 0, $expanded145 = 0, $expanded146 = 0, $expanded148 = 0, $expanded149 = 0, $expanded151 = 0, $expanded152 = 0, $expanded153 = 0;
 var $expanded155 = 0, $expanded156 = 0, $expanded158 = 0, $expanded159 = 0, $expanded160 = 0, $expanded162 = 0, $expanded163 = 0, $expanded165 = 0, $expanded166 = 0, $expanded167 = 0, $expanded169 = 0, $expanded170 = 0, $expanded172 = 0, $expanded173 = 0, $expanded174 = 0, $expanded176 = 0, $expanded177 = 0, $expanded179 = 0, $expanded180 = 0, $expanded181 = 0;
 var $expanded183 = 0, $expanded184 = 0, $expanded186 = 0, $expanded187 = 0, $expanded188 = 0, $expanded190 = 0, $expanded191 = 0, $expanded193 = 0, $expanded194 = 0, $expanded195 = 0, $expanded197 = 0, $expanded198 = 0, $expanded200 = 0, $expanded201 = 0, $expanded202 = 0, $expanded204 = 0, $expanded205 = 0, $expanded207 = 0, $expanded208 = 0, $expanded209 = 0;
 var $expanded72 = 0, $expanded74 = 0, $expanded75 = 0, $expanded76 = 0, $expanded78 = 0, $expanded79 = 0, $expanded81 = 0, $expanded82 = 0, $expanded83 = 0, $expanded85 = 0, $expanded86 = 0, $expanded88 = 0, $expanded89 = 0, $expanded90 = 0, $expanded92 = 0, $expanded93 = 0, $expanded95 = 0, $expanded96 = 0, $expanded97 = 0, $expanded99 = 0;
 var $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $vararg_buffer = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer69 = 0, $vararg_ptr48 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer69 = sp + 24|0;
 $vararg_buffer52 = sp + 16|0;
 $vararg_buffer49 = sp + 8|0;
 $vararg_buffer = sp;
 $22 = sp + 64|0;
 $23 = sp + 60|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $32 = $4;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  $34 = (___errno_location()|0);
  HEAP32[$34>>2] = 9;
  $3 = -1;
  $362 = $3;
  STACKTOP = sp;return ($362|0);
 }
 $35 = $5;
 L5: do {
  switch ($35|0) {
  case 0:  {
   $36 = $6;
   $arglist_current = HEAP32[$36>>2]|0;
   $37 = $arglist_current;
   $38 = ((0) + 4|0);
   $expanded72 = $38;
   $expanded = (($expanded72) - 1)|0;
   $39 = (($37) + ($expanded))|0;
   $40 = ((0) + 4|0);
   $expanded76 = $40;
   $expanded75 = (($expanded76) - 1)|0;
   $expanded74 = $expanded75 ^ -1;
   $41 = $39 & $expanded74;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $arglist_next = ((($42)) + 4|0);
   HEAP32[$36>>2] = $arglist_next;
   $8 = $43;
   $44 = $8;
   $45 = $4;
   $46 = ((($45)) + 268|0);
   HEAP32[$46>>2] = $44;
   break;
  }
  case 1:  {
   $47 = $4;
   $48 = ((($47)) + 20|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)!=(0|0);
   if ($50) {
    $51 = $4;
    $52 = ((($51)) + 20|0);
    $53 = HEAP32[$52>>2]|0;
    _free($53);
   }
   $54 = $6;
   $arglist_current7 = HEAP32[$54>>2]|0;
   $55 = $arglist_current7;
   $56 = ((0) + 4|0);
   $expanded79 = $56;
   $expanded78 = (($expanded79) - 1)|0;
   $57 = (($55) + ($expanded78))|0;
   $58 = ((0) + 4|0);
   $expanded83 = $58;
   $expanded82 = (($expanded83) - 1)|0;
   $expanded81 = $expanded82 ^ -1;
   $59 = $57 & $expanded81;
   $60 = $59;
   $61 = HEAP32[$60>>2]|0;
   $arglist_next8 = ((($60)) + 4|0);
   HEAP32[$54>>2] = $arglist_next8;
   $9 = $61;
   $62 = $9;
   $63 = (___strdup($62)|0);
   $64 = $4;
   $65 = ((($64)) + 20|0);
   HEAP32[$65>>2] = $63;
   $66 = ($63|0)!=(0|0);
   if (!($66)) {
    $3 = -1;
    $362 = $3;
    STACKTOP = sp;return ($362|0);
   }
   break;
  }
  case 2:  {
   $67 = $6;
   $arglist_current10 = HEAP32[$67>>2]|0;
   $68 = $arglist_current10;
   $69 = ((0) + 4|0);
   $expanded86 = $69;
   $expanded85 = (($expanded86) - 1)|0;
   $70 = (($68) + ($expanded85))|0;
   $71 = ((0) + 4|0);
   $expanded90 = $71;
   $expanded89 = (($expanded90) - 1)|0;
   $expanded88 = $expanded89 ^ -1;
   $72 = $70 & $expanded88;
   $73 = $72;
   $74 = HEAP32[$73>>2]|0;
   $arglist_next11 = ((($73)) + 4|0);
   HEAP32[$67>>2] = $arglist_next11;
   $10 = $74;
   $75 = $10;
   $76 = $4;
   $77 = ((($76)) + 272|0);
   HEAP32[$77>>2] = $75;
   break;
  }
  case 3:  {
   $78 = $6;
   $arglist_current13 = HEAP32[$78>>2]|0;
   $79 = $arglist_current13;
   $80 = ((0) + 4|0);
   $expanded93 = $80;
   $expanded92 = (($expanded93) - 1)|0;
   $81 = (($79) + ($expanded92))|0;
   $82 = ((0) + 4|0);
   $expanded97 = $82;
   $expanded96 = (($expanded97) - 1)|0;
   $expanded95 = $expanded96 ^ -1;
   $83 = $81 & $expanded95;
   $84 = $83;
   $85 = HEAP32[$84>>2]|0;
   $arglist_next14 = ((($84)) + 4|0);
   HEAP32[$78>>2] = $arglist_next14;
   $11 = $85;
   $86 = $11;
   $87 = $4;
   $88 = ((($87)) + 276|0);
   HEAP32[$88>>2] = $86;
   break;
  }
  case 4:  {
   $89 = $6;
   $arglist_current16 = HEAP32[$89>>2]|0;
   $90 = $arglist_current16;
   $91 = ((0) + 4|0);
   $expanded100 = $91;
   $expanded99 = (($expanded100) - 1)|0;
   $92 = (($90) + ($expanded99))|0;
   $93 = ((0) + 4|0);
   $expanded104 = $93;
   $expanded103 = (($expanded104) - 1)|0;
   $expanded102 = $expanded103 ^ -1;
   $94 = $92 & $expanded102;
   $95 = $94;
   $96 = HEAP32[$95>>2]|0;
   $arglist_next17 = ((($95)) + 4|0);
   HEAP32[$89>>2] = $arglist_next17;
   $12 = $96;
   $97 = $12;
   $98 = $4;
   $99 = ((($98)) + 280|0);
   HEAP32[$99>>2] = $97;
   break;
  }
  case 7:  {
   $100 = $6;
   $arglist_current19 = HEAP32[$100>>2]|0;
   $101 = $arglist_current19;
   $102 = ((0) + 4|0);
   $expanded107 = $102;
   $expanded106 = (($expanded107) - 1)|0;
   $103 = (($101) + ($expanded106))|0;
   $104 = ((0) + 4|0);
   $expanded111 = $104;
   $expanded110 = (($expanded111) - 1)|0;
   $expanded109 = $expanded110 ^ -1;
   $105 = $103 & $expanded109;
   $106 = $105;
   $107 = HEAP32[$106>>2]|0;
   $arglist_next20 = ((($106)) + 4|0);
   HEAP32[$100>>2] = $arglist_next20;
   $13 = $107;
   $108 = $13;
   $109 = $4;
   $110 = ((($109)) + 284|0);
   HEAP32[$110>>2] = $108;
   break;
  }
  case 11:  {
   $111 = $6;
   $arglist_current22 = HEAP32[$111>>2]|0;
   $112 = $arglist_current22;
   $113 = ((0) + 4|0);
   $expanded114 = $113;
   $expanded113 = (($expanded114) - 1)|0;
   $114 = (($112) + ($expanded113))|0;
   $115 = ((0) + 4|0);
   $expanded118 = $115;
   $expanded117 = (($expanded118) - 1)|0;
   $expanded116 = $expanded117 ^ -1;
   $116 = $114 & $expanded116;
   $117 = $116;
   $118 = HEAP32[$117>>2]|0;
   $arglist_next23 = ((($117)) + 4|0);
   HEAP32[$111>>2] = $arglist_next23;
   $14 = $118;
   $119 = $14;
   $120 = $4;
   $121 = ((($120)) + 288|0);
   HEAP32[$121>>2] = $119;
   break;
  }
  case 8:  {
   $122 = $6;
   $arglist_current25 = HEAP32[$122>>2]|0;
   $123 = $arglist_current25;
   $124 = ((0) + 4|0);
   $expanded121 = $124;
   $expanded120 = (($expanded121) - 1)|0;
   $125 = (($123) + ($expanded120))|0;
   $126 = ((0) + 4|0);
   $expanded125 = $126;
   $expanded124 = (($expanded125) - 1)|0;
   $expanded123 = $expanded124 ^ -1;
   $127 = $125 & $expanded123;
   $128 = $127;
   $129 = HEAP32[$128>>2]|0;
   $arglist_next26 = ((($128)) + 4|0);
   HEAP32[$122>>2] = $arglist_next26;
   $15 = $129;
   $130 = $15;
   $131 = $4;
   $132 = ((($131)) + 292|0);
   HEAP32[$132>>2] = $130;
   break;
  }
  case 12:  {
   $133 = $6;
   $arglist_current28 = HEAP32[$133>>2]|0;
   $134 = $arglist_current28;
   $135 = ((0) + 4|0);
   $expanded128 = $135;
   $expanded127 = (($expanded128) - 1)|0;
   $136 = (($134) + ($expanded127))|0;
   $137 = ((0) + 4|0);
   $expanded132 = $137;
   $expanded131 = (($expanded132) - 1)|0;
   $expanded130 = $expanded131 ^ -1;
   $138 = $136 & $expanded130;
   $139 = $138;
   $140 = HEAP32[$139>>2]|0;
   $arglist_next29 = ((($139)) + 4|0);
   HEAP32[$133>>2] = $arglist_next29;
   $16 = $140;
   $141 = $16;
   $142 = $4;
   $143 = ((($142)) + 296|0);
   HEAP32[$143>>2] = $141;
   break;
  }
  case 17:  {
   $144 = $6;
   $arglist_current31 = HEAP32[$144>>2]|0;
   $145 = $arglist_current31;
   $146 = ((0) + 4|0);
   $expanded135 = $146;
   $expanded134 = (($expanded135) - 1)|0;
   $147 = (($145) + ($expanded134))|0;
   $148 = ((0) + 4|0);
   $expanded139 = $148;
   $expanded138 = (($expanded139) - 1)|0;
   $expanded137 = $expanded138 ^ -1;
   $149 = $147 & $expanded137;
   $150 = $149;
   $151 = HEAP32[$150>>2]|0;
   $arglist_next32 = ((($150)) + 4|0);
   HEAP32[$144>>2] = $arglist_next32;
   $17 = $151;
   $152 = $17;
   $153 = $4;
   $154 = ((($153)) + 300|0);
   HEAP32[$154>>2] = $152;
   break;
  }
  case 16:  {
   $155 = $6;
   $arglist_current34 = HEAP32[$155>>2]|0;
   $156 = $arglist_current34;
   $157 = ((0) + 4|0);
   $expanded142 = $157;
   $expanded141 = (($expanded142) - 1)|0;
   $158 = (($156) + ($expanded141))|0;
   $159 = ((0) + 4|0);
   $expanded146 = $159;
   $expanded145 = (($expanded146) - 1)|0;
   $expanded144 = $expanded145 ^ -1;
   $160 = $158 & $expanded144;
   $161 = $160;
   $162 = HEAP32[$161>>2]|0;
   $arglist_next35 = ((($161)) + 4|0);
   HEAP32[$155>>2] = $arglist_next35;
   $18 = $162;
   $163 = $18;
   $164 = $4;
   $165 = ((($164)) + 304|0);
   HEAP32[$165>>2] = $163;
   break;
  }
  case 13:  {
   $166 = $4;
   $167 = ((($166)) + 308|0);
   HEAP32[$167>>2] = 1;
   $168 = $6;
   $arglist_current37 = HEAP32[$168>>2]|0;
   $169 = $arglist_current37;
   $170 = ((0) + 4|0);
   $expanded149 = $170;
   $expanded148 = (($expanded149) - 1)|0;
   $171 = (($169) + ($expanded148))|0;
   $172 = ((0) + 4|0);
   $expanded153 = $172;
   $expanded152 = (($expanded153) - 1)|0;
   $expanded151 = $expanded152 ^ -1;
   $173 = $171 & $expanded151;
   $174 = $173;
   $175 = HEAP32[$174>>2]|0;
   $arglist_next38 = ((($174)) + 4|0);
   HEAP32[$168>>2] = $arglist_next38;
   $19 = $175;
   $176 = $19;
   $7 = $176;
   $177 = $7;
   $178 = $4;
   $179 = ((($178)) + 48|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = ($177|0)!=($180|0);
   if ($181) {
    $182 = $4;
    $183 = ((($182)) + 48|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = ($184|0)!=(0|0);
    if ($185) {
     $186 = $4;
     $187 = ((($186)) + 48|0);
     $188 = HEAP32[$187>>2]|0;
     _refs_free($188);
    }
    $189 = $7;
    $190 = $4;
    $191 = ((($190)) + 48|0);
    HEAP32[$191>>2] = $189;
    $192 = $4;
    $193 = ((($192)) + 48|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = ((($194)) + 24|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = (($196) + 1)|0;
    HEAP32[$195>>2] = $197;
   }
   break;
  }
  case 5:  {
   $198 = $4;
   $199 = ((($198)) + 316|0);
   $200 = $6;
   $arglist_current40 = HEAP32[$200>>2]|0;
   $201 = $arglist_current40;
   $202 = ((0) + 4|0);
   $expanded156 = $202;
   $expanded155 = (($expanded156) - 1)|0;
   $203 = (($201) + ($expanded155))|0;
   $204 = ((0) + 4|0);
   $expanded160 = $204;
   $expanded159 = (($expanded160) - 1)|0;
   $expanded158 = $expanded159 ^ -1;
   $205 = $203 & $expanded158;
   $206 = $205;
   $207 = HEAP32[$206>>2]|0;
   $arglist_next41 = ((($206)) + 4|0);
   HEAP32[$200>>2] = $arglist_next41;
   $20 = $207;
   $208 = $20;
   ;HEAP32[$199>>2]=HEAP32[$208>>2]|0;HEAP32[$199+4>>2]=HEAP32[$208+4>>2]|0;HEAP32[$199+8>>2]=HEAP32[$208+8>>2]|0;
   $209 = $4;
   $210 = $4;
   $211 = ((($210)) + 316|0);
   $212 = (_cram_seek_to_refpos($209,$211)|0);
   $3 = $212;
   $362 = $3;
   STACKTOP = sp;return ($362|0);
   break;
  }
  case 9:  {
   $213 = $4;
   $214 = $6;
   $arglist_current43 = HEAP32[$214>>2]|0;
   $215 = $arglist_current43;
   $216 = ((0) + 4|0);
   $expanded163 = $216;
   $expanded162 = (($expanded163) - 1)|0;
   $217 = (($215) + ($expanded162))|0;
   $218 = ((0) + 4|0);
   $expanded167 = $218;
   $expanded166 = (($expanded167) - 1)|0;
   $expanded165 = $expanded166 ^ -1;
   $219 = $217 & $expanded165;
   $220 = $219;
   $221 = HEAP32[$220>>2]|0;
   $arglist_next44 = ((($220)) + 4|0);
   HEAP32[$214>>2] = $arglist_next44;
   $21 = $221;
   $222 = $21;
   $223 = (_cram_load_reference($213,$222)|0);
   $3 = $223;
   $362 = $3;
   STACKTOP = sp;return ($362|0);
   break;
  }
  case 6:  {
   $224 = $6;
   $arglist_current46 = HEAP32[$224>>2]|0;
   $225 = $arglist_current46;
   $226 = ((0) + 4|0);
   $expanded170 = $226;
   $expanded169 = (($expanded170) - 1)|0;
   $227 = (($225) + ($expanded169))|0;
   $228 = ((0) + 4|0);
   $expanded174 = $228;
   $expanded173 = (($expanded174) - 1)|0;
   $expanded172 = $expanded173 ^ -1;
   $229 = $227 & $expanded172;
   $230 = $229;
   $231 = HEAP32[$230>>2]|0;
   $arglist_next47 = ((($230)) + 4|0);
   HEAP32[$224>>2] = $arglist_next47;
   $25 = $231;
   $232 = $25;
   $24 = $232;
   $233 = $24;
   HEAP32[$vararg_buffer>>2] = $22;
   $vararg_ptr48 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr48>>2] = $23;
   $234 = (_sscanf($233,14297,$vararg_buffer)|0);
   $235 = (2)!=($234|0);
   if ($235) {
    $236 = HEAP32[2398]|0;
    $237 = $24;
    HEAP32[$vararg_buffer49>>2] = $237;
    (_fprintf($236,14303,$vararg_buffer49)|0);
    $3 = -1;
    $362 = $3;
    STACKTOP = sp;return ($362|0);
   }
   $238 = HEAP32[$22>>2]|0;
   $239 = ($238|0)==(1);
   $240 = HEAP32[$23>>2]|0;
   $241 = ($240|0)==(0);
   $or$cond = $239 & $241;
   do {
    if (!($or$cond)) {
     $242 = HEAP32[$22>>2]|0;
     $243 = ($242|0)==(2);
     if ($243) {
      $244 = HEAP32[$23>>2]|0;
      $245 = ($244|0)==(0);
      $246 = HEAP32[$23>>2]|0;
      $247 = ($246|0)==(1);
      $or$cond3 = $245 | $247;
      if ($or$cond3) {
       break;
      }
     }
     $248 = HEAP32[$22>>2]|0;
     $249 = ($248|0)==(3);
     $250 = HEAP32[$23>>2]|0;
     $251 = ($250|0)==(0);
     $or$cond5 = $249 & $251;
     if (!($or$cond5)) {
      $252 = HEAP32[2398]|0;
      (_fprintf($252,14332,$vararg_buffer52)|0);
      $253 = (___errno_location()|0);
      HEAP32[$253>>2] = 22;
      $3 = -1;
      $362 = $3;
      STACKTOP = sp;return ($362|0);
     }
    }
   } while(0);
   $254 = HEAP32[$22>>2]|0;
   $255 = $254<<8;
   $256 = HEAP32[$23>>2]|0;
   $257 = (($255) + ($256))|0;
   $258 = $4;
   $259 = ((($258)) + 8|0);
   HEAP32[$259>>2] = $257;
   $260 = $4;
   $261 = ((($260)) + 8|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = $262 >> 8;
   $264 = ($263|0)>=(3);
   if ($264) {
    $265 = $4;
    $266 = ((($265)) + 300|0);
    HEAP32[$266>>2] = 1;
   }
   break;
  }
  case 10:  {
   $267 = $6;
   $arglist_current55 = HEAP32[$267>>2]|0;
   $268 = $arglist_current55;
   $269 = ((0) + 4|0);
   $expanded177 = $269;
   $expanded176 = (($expanded177) - 1)|0;
   $270 = (($268) + ($expanded176))|0;
   $271 = ((0) + 4|0);
   $expanded181 = $271;
   $expanded180 = (($expanded181) - 1)|0;
   $expanded179 = $expanded180 ^ -1;
   $272 = $270 & $expanded179;
   $273 = $272;
   $274 = HEAP32[$273>>2]|0;
   $arglist_next56 = ((($273)) + 4|0);
   HEAP32[$267>>2] = $arglist_next56;
   $26 = $274;
   $275 = $26;
   $276 = $4;
   $277 = ((($276)) + 34652|0);
   HEAP32[$277>>2] = $275;
   break;
  }
  case 14:  {
   $278 = $6;
   $arglist_current58 = HEAP32[$278>>2]|0;
   $279 = $arglist_current58;
   $280 = ((0) + 4|0);
   $expanded184 = $280;
   $expanded183 = (($expanded184) - 1)|0;
   $281 = (($279) + ($expanded183))|0;
   $282 = ((0) + 4|0);
   $expanded188 = $282;
   $expanded187 = (($expanded188) - 1)|0;
   $expanded186 = $expanded187 ^ -1;
   $283 = $281 & $expanded186;
   $284 = $283;
   $285 = HEAP32[$284>>2]|0;
   $arglist_next59 = ((($284)) + 4|0);
   HEAP32[$278>>2] = $arglist_next59;
   $28 = $285;
   $286 = $28;
   $27 = $286;
   $287 = $27;
   $288 = ($287|0)>(1);
   if ($288) {
    $289 = $27;
    $290 = $289<<1;
    $291 = $27;
    $292 = (_t_pool_init($290,$291)|0);
    $293 = $4;
    $294 = ((($293)) + 34668|0);
    HEAP32[$294>>2] = $292;
    $295 = ($292|0)!=(0|0);
    if ($295) {
     $296 = (_t_results_queue_init()|0);
     $297 = $4;
     $298 = ((($297)) + 34672|0);
     HEAP32[$298>>2] = $296;
     $299 = $4;
     $300 = ((($299)) + 34676|0);
     (_pthread_mutex_init($300,0)|0);
     $301 = $4;
     $302 = ((($301)) + 34704|0);
     (_pthread_mutex_init($302,0)|0);
     $303 = $4;
     $304 = ((($303)) + 34736|0);
     (_pthread_mutex_init($304,0)|0);
     $305 = $4;
     $306 = ((($305)) + 308|0);
     HEAP32[$306>>2] = 1;
     $307 = $4;
     $308 = ((($307)) + 34664|0);
     HEAP32[$308>>2] = 1;
     break L5;
    }
    $3 = -1;
    $362 = $3;
    STACKTOP = sp;return ($362|0);
   }
   break;
  }
  case 15:  {
   $309 = $6;
   $arglist_current61 = HEAP32[$309>>2]|0;
   $310 = $arglist_current61;
   $311 = ((0) + 4|0);
   $expanded191 = $311;
   $expanded190 = (($expanded191) - 1)|0;
   $312 = (($310) + ($expanded190))|0;
   $313 = ((0) + 4|0);
   $expanded195 = $313;
   $expanded194 = (($expanded195) - 1)|0;
   $expanded193 = $expanded194 ^ -1;
   $314 = $312 & $expanded193;
   $315 = $314;
   $316 = HEAP32[$315>>2]|0;
   $arglist_next62 = ((($315)) + 4|0);
   HEAP32[$309>>2] = $arglist_next62;
   $29 = $316;
   $317 = $29;
   $318 = $4;
   $319 = ((($318)) + 34668|0);
   HEAP32[$319>>2] = $317;
   $320 = $4;
   $321 = ((($320)) + 34668|0);
   $322 = HEAP32[$321>>2]|0;
   $323 = ($322|0)!=(0|0);
   if ($323) {
    $324 = (_t_results_queue_init()|0);
    $325 = $4;
    $326 = ((($325)) + 34672|0);
    HEAP32[$326>>2] = $324;
    $327 = $4;
    $328 = ((($327)) + 34676|0);
    (_pthread_mutex_init($328,0)|0);
    $329 = $4;
    $330 = ((($329)) + 34704|0);
    (_pthread_mutex_init($330,0)|0);
    $331 = $4;
    $332 = ((($331)) + 34736|0);
    (_pthread_mutex_init($332,0)|0);
   }
   $333 = $4;
   $334 = ((($333)) + 308|0);
   HEAP32[$334>>2] = 1;
   $335 = $4;
   $336 = ((($335)) + 34664|0);
   HEAP32[$336>>2] = 0;
   break;
  }
  case 18:  {
   $337 = $6;
   $arglist_current64 = HEAP32[$337>>2]|0;
   $338 = $arglist_current64;
   $339 = ((0) + 4|0);
   $expanded198 = $339;
   $expanded197 = (($expanded198) - 1)|0;
   $340 = (($338) + ($expanded197))|0;
   $341 = ((0) + 4|0);
   $expanded202 = $341;
   $expanded201 = (($expanded202) - 1)|0;
   $expanded200 = $expanded201 ^ -1;
   $342 = $340 & $expanded200;
   $343 = $342;
   $344 = HEAP32[$343>>2]|0;
   $arglist_next65 = ((($343)) + 4|0);
   HEAP32[$337>>2] = $arglist_next65;
   $30 = $344;
   $345 = $30;
   $346 = $4;
   $347 = ((($346)) + 312|0);
   HEAP32[$347>>2] = $345;
   break;
  }
  case 100:  {
   $348 = $6;
   $arglist_current67 = HEAP32[$348>>2]|0;
   $349 = $arglist_current67;
   $350 = ((0) + 4|0);
   $expanded205 = $350;
   $expanded204 = (($expanded205) - 1)|0;
   $351 = (($349) + ($expanded204))|0;
   $352 = ((0) + 4|0);
   $expanded209 = $352;
   $expanded208 = (($expanded209) - 1)|0;
   $expanded207 = $expanded208 ^ -1;
   $353 = $351 & $expanded207;
   $354 = $353;
   $355 = HEAP32[$354>>2]|0;
   $arglist_next68 = ((($354)) + 4|0);
   HEAP32[$348>>2] = $arglist_next68;
   $31 = $355;
   $356 = $31;
   $357 = $4;
   $358 = ((($357)) + 76|0);
   HEAP32[$358>>2] = $356;
   break;
  }
  default: {
   $359 = HEAP32[2398]|0;
   $360 = $5;
   HEAP32[$vararg_buffer69>>2] = $360;
   (_fprintf($359,14382,$vararg_buffer69)|0);
   $361 = (___errno_location()|0);
   HEAP32[$361>>2] = 22;
   $3 = -1;
   $362 = $3;
   STACKTOP = sp;return ($362|0);
  }
  }
 } while(0);
 $3 = 0;
 $362 = $3;
 STACKTOP = sp;return ($362|0);
}
function ___ac_X31_hash_string($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 << 24 >> 24;
 $2 = $5;
 $6 = $2;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 $8 = $1;
 $9 = ((($8)) + 1|0);
 $1 = $9;
 while(1) {
  $10 = $1;
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)!=(0);
  if (!($12)) {
   break;
  }
  $13 = $2;
  $14 = $13 << 5;
  $15 = $2;
  $16 = (($14) - ($15))|0;
  $17 = $1;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = (($16) + ($19))|0;
  $2 = $20;
  $21 = $1;
  $22 = ((($21)) + 1|0);
  $1 = $22;
 }
 $23 = $2;
 STACKTOP = sp;return ($23|0);
}
function _kh_put_refs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $4;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16>>>0)>=($19>>>0);
 do {
  if ($20) {
   $21 = $4;
   $22 = HEAP32[$21>>2]|0;
   $23 = $4;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 << 1;
   $27 = ($22>>>0)>($26>>>0);
   $28 = $4;
   $29 = $4;
   $30 = HEAP32[$29>>2]|0;
   if ($27) {
    $31 = (($30) - 1)|0;
    $32 = (_kh_resize_refs($28,$31)|0);
    $33 = ($32|0)<(0);
    if (!($33)) {
     break;
    }
    $34 = $6;
    HEAP32[$34>>2] = -1;
    $35 = $4;
    $36 = HEAP32[$35>>2]|0;
    $3 = $36;
    $230 = $3;
    STACKTOP = sp;return ($230|0);
   } else {
    $37 = (($30) + 1)|0;
    $38 = (_kh_resize_refs($28,$37)|0);
    $39 = ($38|0)<(0);
    if (!($39)) {
     break;
    }
    $40 = $6;
    HEAP32[$40>>2] = -1;
    $41 = $4;
    $42 = HEAP32[$41>>2]|0;
    $3 = $42;
    $230 = $3;
    STACKTOP = sp;return ($230|0);
   }
  }
 } while(0);
 $43 = $4;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) - 1)|0;
 $12 = $45;
 $13 = 0;
 $46 = $4;
 $47 = HEAP32[$46>>2]|0;
 $10 = $47;
 $7 = $47;
 $48 = $5;
 $49 = (___ac_X31_hash_string($48)|0);
 $8 = $49;
 $50 = $8;
 $51 = $12;
 $52 = $50 & $51;
 $9 = $52;
 $53 = $4;
 $54 = ((($53)) + 16|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $9;
 $57 = $56 >>> 4;
 $58 = (($55) + ($57<<2)|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $9;
 $61 = $60 & 15;
 $62 = $61 << 1;
 $63 = $59 >>> $62;
 $64 = $63 & 2;
 $65 = ($64|0)!=(0);
 $66 = $9;
 do {
  if ($65) {
   $7 = $66;
  } else {
   $11 = $66;
   while(1) {
    $67 = $4;
    $68 = ((($67)) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $9;
    $71 = $70 >>> 4;
    $72 = (($69) + ($71<<2)|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $9;
    $75 = $74 & 15;
    $76 = $75 << 1;
    $77 = $73 >>> $76;
    $78 = $77 & 2;
    $79 = ($78|0)!=(0);
    if ($79) {
     break;
    }
    $80 = $4;
    $81 = ((($80)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $9;
    $84 = $83 >>> 4;
    $85 = (($82) + ($84<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $9;
    $88 = $87 & 15;
    $89 = $88 << 1;
    $90 = $86 >>> $89;
    $91 = $90 & 1;
    $92 = ($91|0)!=(0);
    if (!($92)) {
     $93 = $4;
     $94 = ((($93)) + 20|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = $9;
     $97 = (($95) + ($96<<2)|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $5;
     $100 = (_strcmp($98,$99)|0);
     $101 = ($100|0)==(0);
     $102 = $101 ^ 1;
     if (!($102)) {
      break;
     }
    }
    $103 = $4;
    $104 = ((($103)) + 16|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $9;
    $107 = $106 >>> 4;
    $108 = (($105) + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $9;
    $111 = $110 & 15;
    $112 = $111 << 1;
    $113 = $109 >>> $112;
    $114 = $113 & 1;
    $115 = ($114|0)!=(0);
    if ($115) {
     $116 = $9;
     $10 = $116;
    }
    $117 = $9;
    $118 = $13;
    $119 = (($118) + 1)|0;
    $13 = $119;
    $120 = (($117) + ($119))|0;
    $121 = $12;
    $122 = $120 & $121;
    $9 = $122;
    $123 = $9;
    $124 = $11;
    $125 = ($123|0)==($124|0);
    if ($125) {
     label = 16;
     break;
    }
   }
   if ((label|0) == 16) {
    $126 = $10;
    $7 = $126;
   }
   $127 = $7;
   $128 = $4;
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = $4;
    $132 = ((($131)) + 16|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = $9;
    $135 = $134 >>> 4;
    $136 = (($133) + ($135<<2)|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $9;
    $139 = $138 & 15;
    $140 = $139 << 1;
    $141 = $137 >>> $140;
    $142 = $141 & 2;
    $143 = ($142|0)!=(0);
    if ($143) {
     $144 = $10;
     $145 = $4;
     $146 = HEAP32[$145>>2]|0;
     $147 = ($144|0)!=($146|0);
     if ($147) {
      $148 = $10;
      $7 = $148;
      break;
     }
    }
    $149 = $9;
    $7 = $149;
   }
  }
 } while(0);
 $150 = $4;
 $151 = ((($150)) + 16|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = $7;
 $154 = $153 >>> 4;
 $155 = (($152) + ($154<<2)|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $7;
 $158 = $157 & 15;
 $159 = $158 << 1;
 $160 = $156 >>> $159;
 $161 = $160 & 2;
 $162 = ($161|0)!=(0);
 do {
  if ($162) {
   $163 = $5;
   $164 = $4;
   $165 = ((($164)) + 20|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = $7;
   $168 = (($166) + ($167<<2)|0);
   HEAP32[$168>>2] = $163;
   $169 = $7;
   $170 = $169 & 15;
   $171 = $170 << 1;
   $172 = 3 << $171;
   $173 = $172 ^ -1;
   $174 = $4;
   $175 = ((($174)) + 16|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = $7;
   $178 = $177 >>> 4;
   $179 = (($176) + ($178<<2)|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $180 & $173;
   HEAP32[$179>>2] = $181;
   $182 = $4;
   $183 = ((($182)) + 4|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (($184) + 1)|0;
   HEAP32[$183>>2] = $185;
   $186 = $4;
   $187 = ((($186)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = (($188) + 1)|0;
   HEAP32[$187>>2] = $189;
   $190 = $6;
   HEAP32[$190>>2] = 1;
  } else {
   $191 = $4;
   $192 = ((($191)) + 16|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $7;
   $195 = $194 >>> 4;
   $196 = (($193) + ($195<<2)|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $7;
   $199 = $198 & 15;
   $200 = $199 << 1;
   $201 = $197 >>> $200;
   $202 = $201 & 1;
   $203 = ($202|0)!=(0);
   if ($203) {
    $204 = $5;
    $205 = $4;
    $206 = ((($205)) + 20|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = $7;
    $209 = (($207) + ($208<<2)|0);
    HEAP32[$209>>2] = $204;
    $210 = $7;
    $211 = $210 & 15;
    $212 = $211 << 1;
    $213 = 3 << $212;
    $214 = $213 ^ -1;
    $215 = $4;
    $216 = ((($215)) + 16|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = $7;
    $219 = $218 >>> 4;
    $220 = (($217) + ($219<<2)|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = $221 & $214;
    HEAP32[$220>>2] = $222;
    $223 = $4;
    $224 = ((($223)) + 4|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = (($225) + 1)|0;
    HEAP32[$224>>2] = $226;
    $227 = $6;
    HEAP32[$227>>2] = 2;
    break;
   } else {
    $228 = $6;
    HEAP32[$228>>2] = 0;
    break;
   }
  }
 } while(0);
 $229 = $7;
 $3 = $229;
 $230 = $3;
 STACKTOP = sp;return ($230|0);
}
function _kh_resize_refs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$sink = 0, $$sink3 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = 1;
 $17 = $4;
 $18 = (($17) + -1)|0;
 $4 = $18;
 $19 = $4;
 $20 = $19 >>> 1;
 $21 = $4;
 $22 = $21 | $20;
 $4 = $22;
 $23 = $4;
 $24 = $23 >>> 2;
 $25 = $4;
 $26 = $25 | $24;
 $4 = $26;
 $27 = $4;
 $28 = $27 >>> 4;
 $29 = $4;
 $30 = $29 | $28;
 $4 = $30;
 $31 = $4;
 $32 = $31 >>> 8;
 $33 = $4;
 $34 = $33 | $32;
 $4 = $34;
 $35 = $4;
 $36 = $35 >>> 16;
 $37 = $4;
 $38 = $37 | $36;
 $4 = $38;
 $39 = $4;
 $40 = (($39) + 1)|0;
 $4 = $40;
 $41 = $4;
 $42 = ($41>>>0)<(4);
 $$ = $42 ? 4 : $40;
 $4 = $$;
 $43 = $3;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $4;
 $47 = (+($46>>>0));
 $48 = $47 * 0.77000000000000001;
 $49 = $48 + 0.5;
 $50 = (~~(($49))>>>0);
 $51 = ($45>>>0)>=($50>>>0);
 do {
  if ($51) {
   $6 = 0;
  } else {
   $52 = $4;
   $53 = ($52>>>0)<(16);
   $54 = $4;
   $55 = $54 >>> 4;
   $56 = $53 ? 1 : $55;
   $57 = $56<<2;
   $58 = (_malloc($57)|0);
   $5 = $58;
   $59 = $5;
   $60 = ($59|0)!=(0|0);
   if (!($60)) {
    $2 = -1;
    $279 = $2;
    STACKTOP = sp;return ($279|0);
   }
   $61 = $5;
   $62 = $4;
   $63 = ($62>>>0)<(16);
   $64 = $4;
   $65 = $64 >>> 4;
   $66 = $63 ? 1 : $65;
   $67 = $66<<2;
   _memset(($61|0),-86,($67|0))|0;
   $68 = $3;
   $69 = HEAP32[$68>>2]|0;
   $70 = $4;
   $71 = ($69>>>0)<($70>>>0);
   if ($71) {
    $72 = $3;
    $73 = ((($72)) + 20|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $4;
    $76 = $75<<2;
    $77 = (_realloc($74,$76)|0);
    $7 = $77;
    $78 = $7;
    $79 = ($78|0)!=(0|0);
    if (!($79)) {
     $80 = $5;
     _free($80);
     $2 = -1;
     $279 = $2;
     STACKTOP = sp;return ($279|0);
    }
    $81 = $7;
    $82 = $3;
    $83 = ((($82)) + 20|0);
    HEAP32[$83>>2] = $81;
    $84 = $3;
    $85 = ((($84)) + 24|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $4;
    $88 = $87<<2;
    $89 = (_realloc($86,$88)|0);
    $8 = $89;
    $90 = $8;
    $91 = ($90|0)!=(0|0);
    if ($91) {
     $93 = $8;
     $94 = $3;
     $95 = ((($94)) + 24|0);
     HEAP32[$95>>2] = $93;
     break;
    }
    $92 = $5;
    _free($92);
    $2 = -1;
    $279 = $2;
    STACKTOP = sp;return ($279|0);
   }
  }
 } while(0);
 $96 = $6;
 $97 = ($96|0)!=(0);
 if ($97) {
  $6 = 0;
  while(1) {
   $98 = $6;
   $99 = $3;
   $100 = HEAP32[$99>>2]|0;
   $101 = ($98|0)!=($100|0);
   $102 = $3;
   if (!($101)) {
    break;
   }
   $103 = ((($102)) + 16|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $6;
   $106 = $105 >>> 4;
   $107 = (($104) + ($106<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $6;
   $110 = $109 & 15;
   $111 = $110 << 1;
   $112 = $108 >>> $111;
   $113 = $112 & 3;
   $114 = ($113|0)==(0);
   if ($114) {
    $115 = $3;
    $116 = ((($115)) + 20|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = $6;
    $119 = (($117) + ($118<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $9 = $120;
    $121 = $4;
    $122 = (($121) - 1)|0;
    $11 = $122;
    $123 = $3;
    $124 = ((($123)) + 24|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $6;
    $127 = (($125) + ($126<<2)|0);
    $128 = HEAP32[$127>>2]|0;
    $10 = $128;
    $129 = $6;
    $130 = $129 & 15;
    $131 = $130 << 1;
    $132 = 1 << $131;
    $133 = $3;
    $134 = ((($133)) + 16|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $6;
    $$sink = $136;$$sink3 = $132;$$sink4 = $135;
    while(1) {
     $137 = $$sink >>> 4;
     $138 = (($$sink4) + ($137<<2)|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = $139 | $$sink3;
     HEAP32[$138>>2] = $140;
     $14 = 0;
     $141 = $9;
     $142 = (___ac_X31_hash_string($141)|0);
     $12 = $142;
     $143 = $12;
     $144 = $11;
     $145 = $143 & $144;
     $13 = $145;
     while(1) {
      $146 = $5;
      $147 = $13;
      $148 = $147 >>> 4;
      $149 = (($146) + ($148<<2)|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = $13;
      $152 = $151 & 15;
      $153 = $152 << 1;
      $154 = $150 >>> $153;
      $155 = $154 & 2;
      $156 = ($155|0)!=(0);
      $157 = $156 ^ 1;
      $158 = $13;
      if (!($157)) {
       break;
      }
      $159 = $14;
      $160 = (($159) + 1)|0;
      $14 = $160;
      $161 = (($158) + ($160))|0;
      $162 = $11;
      $163 = $161 & $162;
      $13 = $163;
     }
     $164 = $158 & 15;
     $165 = $164 << 1;
     $166 = 2 << $165;
     $167 = $166 ^ -1;
     $168 = $5;
     $169 = $13;
     $170 = $169 >>> 4;
     $171 = (($168) + ($170<<2)|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = $172 & $167;
     HEAP32[$171>>2] = $173;
     $174 = $13;
     $175 = $3;
     $176 = HEAP32[$175>>2]|0;
     $177 = ($174>>>0)<($176>>>0);
     if (!($177)) {
      break;
     }
     $178 = $3;
     $179 = ((($178)) + 16|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = $13;
     $182 = $181 >>> 4;
     $183 = (($180) + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = $13;
     $186 = $185 & 15;
     $187 = $186 << 1;
     $188 = $184 >>> $187;
     $189 = $188 & 3;
     $190 = ($189|0)==(0);
     if (!($190)) {
      break;
     }
     $191 = $3;
     $192 = ((($191)) + 20|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = $13;
     $195 = (($193) + ($194<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $15 = $196;
     $197 = $9;
     $198 = $3;
     $199 = ((($198)) + 20|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = $13;
     $202 = (($200) + ($201<<2)|0);
     HEAP32[$202>>2] = $197;
     $203 = $15;
     $9 = $203;
     $204 = $3;
     $205 = ((($204)) + 24|0);
     $206 = HEAP32[$205>>2]|0;
     $207 = $13;
     $208 = (($206) + ($207<<2)|0);
     $209 = HEAP32[$208>>2]|0;
     $16 = $209;
     $210 = $10;
     $211 = $3;
     $212 = ((($211)) + 24|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = $13;
     $215 = (($213) + ($214<<2)|0);
     HEAP32[$215>>2] = $210;
     $216 = $16;
     $10 = $216;
     $217 = $13;
     $218 = $217 & 15;
     $219 = $218 << 1;
     $220 = 1 << $219;
     $221 = $3;
     $222 = ((($221)) + 16|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = $13;
     $$sink = $224;$$sink3 = $220;$$sink4 = $223;
    }
    $225 = $9;
    $226 = $3;
    $227 = ((($226)) + 20|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = $13;
    $230 = (($228) + ($229<<2)|0);
    HEAP32[$230>>2] = $225;
    $231 = $10;
    $232 = $3;
    $233 = ((($232)) + 24|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = $13;
    $236 = (($234) + ($235<<2)|0);
    HEAP32[$236>>2] = $231;
   }
   $237 = $6;
   $238 = (($237) + 1)|0;
   $6 = $238;
  }
  $239 = HEAP32[$102>>2]|0;
  $240 = $4;
  $241 = ($239>>>0)>($240>>>0);
  if ($241) {
   $242 = $3;
   $243 = ((($242)) + 20|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = $4;
   $246 = $245<<2;
   $247 = (_realloc($244,$246)|0);
   $248 = $3;
   $249 = ((($248)) + 20|0);
   HEAP32[$249>>2] = $247;
   $250 = $3;
   $251 = ((($250)) + 24|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = $4;
   $254 = $253<<2;
   $255 = (_realloc($252,$254)|0);
   $256 = $3;
   $257 = ((($256)) + 24|0);
   HEAP32[$257>>2] = $255;
  }
  $258 = $3;
  $259 = ((($258)) + 16|0);
  $260 = HEAP32[$259>>2]|0;
  _free($260);
  $261 = $5;
  $262 = $3;
  $263 = ((($262)) + 16|0);
  HEAP32[$263>>2] = $261;
  $264 = $4;
  $265 = $3;
  HEAP32[$265>>2] = $264;
  $266 = $3;
  $267 = ((($266)) + 4|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = $3;
  $270 = ((($269)) + 8|0);
  HEAP32[$270>>2] = $268;
  $271 = $3;
  $272 = HEAP32[$271>>2]|0;
  $273 = (+($272>>>0));
  $274 = $273 * 0.77000000000000001;
  $275 = $274 + 0.5;
  $276 = (~~(($275))>>>0);
  $277 = $3;
  $278 = ((($277)) + 12|0);
  HEAP32[$278>>2] = $276;
 }
 $2 = 0;
 $279 = $2;
 STACKTOP = sp;return ($279|0);
}
function _kh_init_refs() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,28)|0);
 return ($0|0);
}
function _hts_detect_format($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = (_hpeek($7,$5,18)|0);
 $6 = $8;
 $9 = $6;
 $10 = ($9|0)<(0);
 if ($10) {
  $2 = -1;
  $226 = $2;
  STACKTOP = sp;return ($226|0);
 }
 $11 = $6;
 $12 = ($11|0)>=(2);
 if ($12) {
  $13 = HEAP8[$5>>0]|0;
  $14 = $13&255;
  $15 = ($14|0)==(31);
  if ($15) {
   $16 = ((($5)) + 1|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = ($18|0)==(139);
   if ($19) {
    $20 = $6;
    $21 = ($20|0)>=(18);
    if ($21) {
     $22 = ((($5)) + 3|0);
     $23 = HEAP8[$22>>0]|0;
     $24 = $23&255;
     $25 = $24 & 4;
     $26 = ($25|0)!=(0);
     if ($26) {
      $27 = ((($5)) + 12|0);
      $28 = (_memcmp($27,15201,4)|0);
      $29 = ($28|0)==(0);
      $30 = $29;
     } else {
      $30 = 0;
     }
    } else {
     $30 = 0;
    }
    $31 = $30 ? 2 : 1;
    $32 = $4;
    $33 = ((($32)) + 12|0);
    HEAP32[$33>>2] = $31;
    $34 = $3;
    $35 = (_decompress_peek($34,$5,21)|0);
    $6 = $35;
   } else {
    label = 10;
   }
  } else {
   label = 10;
  }
 } else {
  label = 10;
 }
 if ((label|0) == 10) {
  $36 = $4;
  $37 = ((($36)) + 12|0);
  HEAP32[$37>>2] = 0;
  $38 = $3;
  $39 = (_hpeek($38,$5,21)|0);
  $6 = $39;
 }
 $40 = $6;
 $41 = ($40|0)<(0);
 if ($41) {
  $2 = -1;
  $226 = $2;
  STACKTOP = sp;return ($226|0);
 }
 $42 = $4;
 $43 = ((($42)) + 16|0);
 HEAP16[$43>>1] = -1;
 $44 = $4;
 $45 = ((($44)) + 20|0);
 HEAP32[$45>>2] = 0;
 $46 = $6;
 $47 = ($46|0)>=(6);
 if ($47) {
  $48 = (_memcmp($5,14610,4)|0);
  $49 = ($48|0)==(0);
  if ($49) {
   $50 = ((($5)) + 4|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $53 = ($52|0)>=(1);
   if ($53) {
    $54 = ((($5)) + 4|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $57 = ($56|0)<=(3);
    if ($57) {
     $58 = ((($5)) + 5|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = $59&255;
     $61 = ($60|0)<=(1);
     if ($61) {
      $62 = $4;
      HEAP32[$62>>2] = 1;
      $63 = $4;
      $64 = ((($63)) + 4|0);
      HEAP32[$64>>2] = 6;
      $65 = ((($5)) + 4|0);
      $66 = HEAP8[$65>>0]|0;
      $67 = $66&255;
      $68 = $4;
      $69 = ((($68)) + 8|0);
      HEAP16[$69>>1] = $67;
      $70 = ((($5)) + 5|0);
      $71 = HEAP8[$70>>0]|0;
      $72 = $71&255;
      $73 = $4;
      $74 = ((($73)) + 8|0);
      $75 = ((($74)) + 2|0);
      HEAP16[$75>>1] = $72;
      $76 = $4;
      $77 = ((($76)) + 12|0);
      HEAP32[$77>>2] = 3;
      $2 = 0;
      $226 = $2;
      STACKTOP = sp;return ($226|0);
     }
    }
   }
  }
 }
 $78 = $6;
 $79 = ($78|0)>=(4);
 if ($79) {
  $80 = ((($5)) + 3|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = ($82|0)<=(4);
  if ($83) {
   $84 = (_memcmp($5,14615,4)|0);
   $85 = ($84|0)==(0);
   if ($85) {
    $86 = $4;
    HEAP32[$86>>2] = 1;
    $87 = $4;
    $88 = ((($87)) + 4|0);
    HEAP32[$88>>2] = 4;
    $89 = $4;
    $90 = ((($89)) + 8|0);
    HEAP16[$90>>1] = 1;
    $91 = $4;
    $92 = ((($91)) + 8|0);
    $93 = ((($92)) + 2|0);
    HEAP16[$93>>1] = -1;
    $2 = 0;
    $226 = $2;
    STACKTOP = sp;return ($226|0);
   }
   $94 = (_memcmp($5,14620,4)|0);
   $95 = ($94|0)==(0);
   if ($95) {
    $96 = $4;
    HEAP32[$96>>2] = 3;
    $97 = $4;
    $98 = ((($97)) + 4|0);
    HEAP32[$98>>2] = 5;
    $99 = $4;
    $100 = ((($99)) + 8|0);
    HEAP16[$100>>1] = -1;
    $101 = $4;
    $102 = ((($101)) + 8|0);
    $103 = ((($102)) + 2|0);
    HEAP16[$103>>1] = -1;
    $2 = 0;
    $226 = $2;
    STACKTOP = sp;return ($226|0);
   }
   $104 = (_memcmp($5,14625,4)|0);
   $105 = ($104|0)==(0);
   if ($105) {
    $106 = $4;
    HEAP32[$106>>2] = 2;
    $107 = $4;
    $108 = ((($107)) + 4|0);
    HEAP32[$108>>2] = 9;
    $109 = $4;
    $110 = ((($109)) + 8|0);
    HEAP16[$110>>1] = 1;
    $111 = $4;
    $112 = ((($111)) + 8|0);
    $113 = ((($112)) + 2|0);
    HEAP16[$113>>1] = -1;
    $2 = 0;
    $226 = $2;
    STACKTOP = sp;return ($226|0);
   }
   $114 = (_memcmp($5,14630,4)|0);
   $115 = ($114|0)==(0);
   if ($115) {
    $116 = $4;
    HEAP32[$116>>2] = 2;
    $117 = $4;
    $118 = ((($117)) + 4|0);
    HEAP32[$118>>2] = 9;
    $119 = ((($5)) + 3|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = $120&255;
    $122 = $4;
    $123 = ((($122)) + 8|0);
    HEAP16[$123>>1] = $121;
    $124 = $6;
    $125 = ($124|0)>=(5);
    if ($125) {
     $126 = ((($5)) + 4|0);
     $127 = HEAP8[$126>>0]|0;
     $128 = $127&255;
     $129 = ($128|0)<=(2);
     if ($129) {
      $130 = ((($5)) + 4|0);
      $131 = HEAP8[$130>>0]|0;
      $132 = $131&255;
      $134 = $132;
     } else {
      $134 = 0;
     }
    } else {
     $134 = 0;
    }
    $133 = $134&65535;
    $135 = $4;
    $136 = ((($135)) + 8|0);
    $137 = ((($136)) + 2|0);
    HEAP16[$137>>1] = $133;
    $2 = 0;
    $226 = $2;
    STACKTOP = sp;return ($226|0);
   }
   $138 = (_memcmp($5,14635,4)|0);
   $139 = ($138|0)==(0);
   if ($139) {
    $140 = $4;
    HEAP32[$140>>2] = 3;
    $141 = $4;
    $142 = ((($141)) + 4|0);
    HEAP32[$142>>2] = 10;
    $143 = $4;
    $144 = ((($143)) + 8|0);
    HEAP16[$144>>1] = 1;
    $145 = $4;
    $146 = ((($145)) + 8|0);
    $147 = ((($146)) + 2|0);
    HEAP16[$147>>1] = -1;
    $2 = 0;
    $226 = $2;
    STACKTOP = sp;return ($226|0);
   }
   $148 = (_memcmp($5,14640,4)|0);
   $149 = ($148|0)==(0);
   $150 = $4;
   if ($149) {
    HEAP32[$150>>2] = 3;
    $151 = $4;
    $152 = ((($151)) + 4|0);
    HEAP32[$152>>2] = 12;
    $153 = $4;
    $154 = ((($153)) + 8|0);
    HEAP16[$154>>1] = -1;
    $155 = $4;
    $156 = ((($155)) + 8|0);
    $157 = ((($156)) + 2|0);
    HEAP16[$157>>1] = -1;
    $2 = 0;
    $226 = $2;
    STACKTOP = sp;return ($226|0);
   } else {
    HEAP32[$150>>2] = 0;
    $217 = $4;
    $218 = ((($217)) + 4|0);
    HEAP32[$218>>2] = 0;
    $219 = $4;
    $220 = ((($219)) + 8|0);
    $221 = ((($220)) + 2|0);
    HEAP16[$221>>1] = -1;
    $222 = $4;
    $223 = ((($222)) + 8|0);
    HEAP16[$223>>1] = -1;
    $224 = $4;
    $225 = ((($224)) + 12|0);
    HEAP32[$225>>2] = 0;
    $2 = 0;
    $226 = $2;
    STACKTOP = sp;return ($226|0);
   }
  }
 }
 $158 = $6;
 $159 = ($158|0)>=(16);
 if ($159) {
  $160 = (_memcmp($5,14645,16)|0);
  $161 = ($160|0)==(0);
  if ($161) {
   $162 = $4;
   HEAP32[$162>>2] = 2;
   $163 = $4;
   $164 = ((($163)) + 4|0);
   HEAP32[$164>>2] = 8;
   $165 = $6;
   $166 = ($165|0)>=(21);
   if ($166) {
    $167 = ((($5)) + 16|0);
    $168 = HEAP8[$167>>0]|0;
    $169 = $168&255;
    $170 = ($169|0)==(118);
    if ($170) {
     $171 = $4;
     $172 = ((($5)) + 17|0);
     $173 = $6;
     $174 = (($5) + ($173)|0);
     _parse_version($171,$172,$174);
    } else {
     label = 41;
    }
   } else {
    label = 41;
   }
   if ((label|0) == 41) {
    $175 = $4;
    $176 = ((($175)) + 8|0);
    $177 = ((($176)) + 2|0);
    HEAP16[$177>>1] = -1;
    $178 = $4;
    $179 = ((($178)) + 8|0);
    HEAP16[$179>>1] = -1;
   }
   $2 = 0;
   $226 = $2;
   STACKTOP = sp;return ($226|0);
  }
 }
 $180 = $6;
 $181 = ($180|0)>=(4);
 do {
  if ($181) {
   $182 = HEAP8[$5>>0]|0;
   $183 = $182&255;
   $184 = ($183|0)==(64);
   if ($184) {
    $185 = (_memcmp($5,14662,4)|0);
    $186 = ($185|0)==(0);
    if (!($186)) {
     $187 = (_memcmp($5,14667,4)|0);
     $188 = ($187|0)==(0);
     if (!($188)) {
      $189 = (_memcmp($5,14672,4)|0);
      $190 = ($189|0)==(0);
      if (!($190)) {
       $191 = (_memcmp($5,14677,4)|0);
       $192 = ($191|0)==(0);
       if (!($192)) {
        break;
       }
      }
     }
    }
    $193 = $4;
    HEAP32[$193>>2] = 1;
    $194 = $4;
    $195 = ((($194)) + 4|0);
    HEAP32[$195>>2] = 3;
    $196 = $6;
    $197 = ($196|0)>=(9);
    if ($197) {
     $198 = (_memcmp($5,14682,7)|0);
     $199 = ($198|0)==(0);
     if ($199) {
      $200 = $4;
      $201 = ((($5)) + 7|0);
      $202 = $6;
      $203 = (($5) + ($202)|0);
      _parse_version($200,$201,$203);
     } else {
      label = 52;
     }
    } else {
     label = 52;
    }
    if ((label|0) == 52) {
     $204 = $4;
     $205 = ((($204)) + 8|0);
     HEAP16[$205>>1] = 1;
     $206 = $4;
     $207 = ((($206)) + 8|0);
     $208 = ((($207)) + 2|0);
     HEAP16[$208>>1] = -1;
    }
    $2 = 0;
    $226 = $2;
    STACKTOP = sp;return ($226|0);
   }
  }
 } while(0);
 $209 = $4;
 HEAP32[$209>>2] = 1;
 $210 = $4;
 $211 = ((($210)) + 4|0);
 HEAP32[$211>>2] = 3;
 $212 = $4;
 $213 = ((($212)) + 8|0);
 HEAP16[$213>>1] = 1;
 $214 = $4;
 $215 = ((($214)) + 8|0);
 $216 = ((($215)) + 2|0);
 HEAP16[$216>>1] = -1;
 $2 = 0;
 $226 = $2;
 STACKTOP = sp;return ($226|0);
}
function _decompress_peek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(592|0);
 $7 = sp + 80|0;
 $8 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = (_hpeek($10,$7,512)|0);
 $9 = $11;
 $12 = $9;
 $13 = ($12|0)<(0);
 if ($13) {
  $3 = 0;
  $33 = $3;
  STACKTOP = sp;return ($33|0);
 }
 $14 = ((($8)) + 32|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($8)) + 36|0);
 HEAP32[$15>>2] = 0;
 HEAP32[$8>>2] = $7;
 $16 = $9;
 $17 = ((($8)) + 4|0);
 HEAP32[$17>>2] = $16;
 $18 = $5;
 $19 = ((($8)) + 12|0);
 HEAP32[$19>>2] = $18;
 $20 = $6;
 $21 = ((($8)) + 16|0);
 HEAP32[$21>>2] = $20;
 $22 = (_inflateInit2_($8,31,14925,56)|0);
 $23 = ($22|0)!=(0);
 if ($23) {
  $3 = 0;
  $33 = $3;
  STACKTOP = sp;return ($33|0);
 }
 while(1) {
  $24 = ((($8)) + 20|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $6;
  $27 = ($25>>>0)<($26>>>0);
  if (!($27)) {
   break;
  }
  $28 = (_inflate($8,2)|0);
  $29 = ($28|0)!=(0);
  if ($29) {
   break;
  }
 }
 $30 = ((($8)) + 20|0);
 $31 = HEAP32[$30>>2]|0;
 $6 = $31;
 (_inflateEnd($8)|0);
 $32 = $6;
 $3 = $32;
 $33 = $3;
 STACKTOP = sp;return ($33|0);
}
function _parse_version($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $4;
 $6 = $9;
 $10 = $5;
 $7 = $10;
 $11 = $3;
 $12 = ((($11)) + 8|0);
 $13 = ((($12)) + 2|0);
 HEAP16[$13>>1] = -1;
 $14 = $3;
 $15 = ((($14)) + 8|0);
 HEAP16[$15>>1] = -1;
 $8 = 0;
 while(1) {
  $16 = $6;
  $17 = $7;
  $18 = ($16>>>0)<($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = $6;
  $20 = HEAP8[$19>>0]|0;
  $21 = (_isdigit_c($20)|0);
  $22 = ($21|0)!=(0);
  if (!($22)) {
   break;
  }
  $23 = $8;
  $24 = $23 << 16 >> 16;
  $25 = ($24*10)|0;
  $26 = $6;
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = (($25) + ($28))|0;
  $30 = (($29) - 48)|0;
  $31 = $30&65535;
  $8 = $31;
  $32 = $6;
  $33 = ((($32)) + 1|0);
  $6 = $33;
 }
 $34 = $6;
 $35 = $7;
 $36 = ($34>>>0)<($35>>>0);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = $8;
 $38 = $3;
 $39 = ((($38)) + 8|0);
 HEAP16[$39>>1] = $37;
 $40 = $6;
 $41 = HEAP8[$40>>0]|0;
 $42 = $41 << 24 >> 24;
 $43 = ($42|0)==(46);
 do {
  if ($43) {
   $44 = $6;
   $45 = ((($44)) + 1|0);
   $6 = $45;
   $8 = 0;
   while(1) {
    $46 = $6;
    $47 = $7;
    $48 = ($46>>>0)<($47>>>0);
    if (!($48)) {
     break;
    }
    $49 = $6;
    $50 = HEAP8[$49>>0]|0;
    $51 = (_isdigit_c($50)|0);
    $52 = ($51|0)!=(0);
    if (!($52)) {
     break;
    }
    $53 = $8;
    $54 = $53 << 16 >> 16;
    $55 = ($54*10)|0;
    $56 = $6;
    $57 = HEAP8[$56>>0]|0;
    $58 = $57 << 24 >> 24;
    $59 = (($55) + ($58))|0;
    $60 = (($59) - 48)|0;
    $61 = $60&65535;
    $8 = $61;
    $62 = $6;
    $63 = ((($62)) + 1|0);
    $6 = $63;
   }
   $64 = $6;
   $65 = $7;
   $66 = ($64>>>0)<($65>>>0);
   if ($66) {
    $67 = $8;
    $68 = $3;
    $$sink = $67;$$sink4 = $68;
    break;
   } else {
    STACKTOP = sp;return;
   }
  } else {
   $69 = $3;
   $$sink = 0;$$sink4 = $69;
  }
 } while(0);
 $70 = ((($$sink4)) + 8|0);
 $71 = ((($70)) + 2|0);
 HEAP16[$71>>1] = $$sink;
 STACKTOP = sp;return;
}
function _isdigit_c($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2&255;
 $4 = (_isdigit($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _hfile_init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = (_malloc($8)|0);
 $7 = $9;
 $10 = $7;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $12 = $6;
  $13 = ($12|0)==(0);
  if ($13) {
   $6 = 32768;
  }
  $14 = $5;
  $15 = (_strchr($14,114)|0);
  $16 = ($15|0)!=(0|0);
  $17 = $6;
  $18 = ($17>>>0)>(32768);
  $or$cond = $16 & $18;
  if ($or$cond) {
   $6 = 32768;
  }
  $19 = $6;
  $20 = (_malloc($19)|0);
  $21 = $7;
  HEAP32[$21>>2] = $20;
  $22 = $7;
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   $25 = $7;
   $26 = HEAP32[$25>>2]|0;
   $27 = $7;
   $28 = ((($27)) + 8|0);
   HEAP32[$28>>2] = $26;
   $29 = $7;
   $30 = ((($29)) + 4|0);
   HEAP32[$30>>2] = $26;
   $31 = $7;
   $32 = HEAP32[$31>>2]|0;
   $33 = $6;
   $34 = (($32) + ($33)|0);
   $35 = $7;
   $36 = ((($35)) + 12|0);
   HEAP32[$36>>2] = $34;
   $37 = $7;
   $38 = ((($37)) + 20|0);
   HEAP32[$38>>2] = 0;
   $39 = $7;
   $40 = ((($39)) + 24|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41 & -2;
   HEAP8[$40>>0] = $42;
   $43 = $7;
   $44 = ((($43)) + 28|0);
   HEAP32[$44>>2] = 0;
   $45 = $7;
   $3 = $45;
   $47 = $3;
   STACKTOP = sp;return ($47|0);
  }
 }
 $46 = $7;
 _hfile_destroy($46);
 $3 = 0;
 $47 = $3;
 STACKTOP = sp;return ($47|0);
}
function _hfile_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 $2 = $4;
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $1;
  $8 = HEAP32[$7>>2]|0;
  _free($8);
 }
 $9 = $1;
 _free($9);
 $10 = $2;
 $11 = (___errno_location()|0);
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function _hgetc2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_refill_buffer($2)|0);
 $4 = ($3|0)>(0);
 if (!($4)) {
  $11 = -1;
  STACKTOP = sp;return ($11|0);
 }
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 1|0);
 HEAP32[$6>>2] = $8;
 $9 = HEAP8[$7>>0]|0;
 $10 = $9&255;
 $11 = $10;
 STACKTOP = sp;return ($11|0);
}
function _refill_buffer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)>($8>>>0);
 if ($9) {
  $10 = $2;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $2;
  $14 = HEAP32[$13>>2]|0;
  $15 = $12;
  $16 = $14;
  $17 = (($15) - ($16))|0;
  $18 = $2;
  $19 = ((($18)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($17))|0;
  HEAP32[$19>>2] = $21;
  $22 = $2;
  $23 = HEAP32[$22>>2]|0;
  $24 = $2;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $2;
  $28 = ((($27)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $2;
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $29;
  $34 = $32;
  $35 = (($33) - ($34))|0;
  _memmove(($23|0),($26|0),($35|0))|0;
  $36 = $2;
  $37 = HEAP32[$36>>2]|0;
  $38 = $2;
  $39 = ((($38)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $2;
  $42 = ((($41)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $40;
  $45 = $43;
  $46 = (($44) - ($45))|0;
  $47 = (($37) + ($46)|0);
  $48 = $2;
  $49 = ((($48)) + 8|0);
  HEAP32[$49>>2] = $47;
  $50 = $2;
  $51 = HEAP32[$50>>2]|0;
  $52 = $2;
  $53 = ((($52)) + 4|0);
  HEAP32[$53>>2] = $51;
 }
 $54 = $2;
 $55 = ((($54)) + 24|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56 & 1;
 $58 = $57&255;
 $59 = ($58|0)!=(0);
 do {
  if ($59) {
   label = 5;
  } else {
   $60 = $2;
   $61 = ((($60)) + 8|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $2;
   $64 = ((($63)) + 12|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($62|0)==($65|0);
   if ($66) {
    label = 5;
   } else {
    $67 = $2;
    $68 = ((($67)) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = HEAP32[$69>>2]|0;
    $71 = $2;
    $72 = $2;
    $73 = ((($72)) + 8|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $2;
    $76 = ((($75)) + 12|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = $2;
    $79 = ((($78)) + 8|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $77;
    $82 = $80;
    $83 = (($81) - ($82))|0;
    $84 = (FUNCTION_TABLE_iiii[$70 & 63]($71,$74,$83)|0);
    $3 = $84;
    $85 = $3;
    $86 = ($85|0)<(0);
    if ($86) {
     $87 = (___errno_location()|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = $2;
     $90 = ((($89)) + 28|0);
     HEAP32[$90>>2] = $88;
     $91 = $3;
     $1 = $91;
     $105 = $1;
     STACKTOP = sp;return ($105|0);
    } else {
     $92 = $3;
     $93 = ($92|0)==(0);
     if (!($93)) {
      break;
     }
     $94 = $2;
     $95 = ((($94)) + 24|0);
     $96 = HEAP8[$95>>0]|0;
     $97 = $96 & -2;
     $98 = $97 | 1;
     HEAP8[$95>>0] = $98;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $3 = 0;
 }
 $99 = $3;
 $100 = $2;
 $101 = ((($100)) + 8|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($102) + ($99)|0);
 HEAP32[$101>>2] = $103;
 $104 = $3;
 $1 = $104;
 $105 = $1;
 STACKTOP = sp;return ($105|0);
}
function _hpeek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $4;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $11;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $7 = $17;
 while(1) {
  $18 = $7;
  $19 = $6;
  $20 = ($18>>>0)<($19>>>0);
  if (!($20)) {
   break;
  }
  $21 = $4;
  $22 = (_refill_buffer($21)|0);
  $8 = $22;
  $23 = $8;
  $24 = ($23|0)<(0);
  $25 = $8;
  if ($24) {
   label = 4;
   break;
  }
  $26 = ($25|0)==(0);
  if ($26) {
   break;
  }
  $27 = $8;
  $28 = $7;
  $29 = (($28) + ($27))|0;
  $7 = $29;
 }
 if ((label|0) == 4) {
  $3 = $25;
  $40 = $3;
  STACKTOP = sp;return ($40|0);
 }
 $30 = $7;
 $31 = $6;
 $32 = ($30>>>0)>($31>>>0);
 if ($32) {
  $33 = $6;
  $7 = $33;
 }
 $34 = $5;
 $35 = $4;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $7;
 _memcpy(($34|0),($37|0),($38|0))|0;
 $39 = $7;
 $3 = $39;
 $40 = $3;
 STACKTOP = sp;return ($40|0);
}
function _hread2($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $5;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $5;
 $18 = HEAP32[$17>>2]|0;
 $19 = $16;
 $20 = $18;
 $21 = (($19) - ($20))|0;
 $9 = $21;
 $22 = $6;
 $10 = $22;
 $23 = $8;
 $24 = $10;
 $25 = (($24) + ($23)|0);
 $10 = $25;
 $26 = $8;
 $27 = $7;
 $28 = (($27) - ($26))|0;
 $7 = $28;
 while(1) {
  $29 = $7;
  $30 = $29<<1;
  $31 = $9;
  $32 = ($30>>>0)>=($31>>>0);
  if (!($32)) {
   break;
  }
  $33 = $5;
  $34 = ((($33)) + 24|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35 & 1;
  $37 = $36&255;
  $38 = ($37|0)!=(0);
  $39 = $38 ^ 1;
  if (!($39)) {
   break;
  }
  $40 = $5;
  $41 = ((($40)) + 16|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = HEAP32[$42>>2]|0;
  $44 = $5;
  $45 = $10;
  $46 = $7;
  $47 = (FUNCTION_TABLE_iiii[$43 & 63]($44,$45,$46)|0);
  $11 = $47;
  $48 = $11;
  $49 = ($48|0)<(0);
  if ($49) {
   label = 5;
   break;
  }
  $55 = $11;
  $56 = ($55|0)==(0);
  if ($56) {
   $57 = $5;
   $58 = ((($57)) + 24|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = $59 & -2;
   $61 = $60 | 1;
   HEAP8[$58>>0] = $61;
  }
  $62 = $11;
  $63 = $5;
  $64 = ((($63)) + 20|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + ($62))|0;
  HEAP32[$64>>2] = $66;
  $67 = $11;
  $68 = $10;
  $69 = (($68) + ($67)|0);
  $10 = $69;
  $70 = $11;
  $71 = $7;
  $72 = (($71) - ($70))|0;
  $7 = $72;
  $73 = $11;
  $74 = $8;
  $75 = (($74) + ($73))|0;
  $8 = $75;
 }
 if ((label|0) == 5) {
  $50 = (___errno_location()|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $5;
  $53 = ((($52)) + 28|0);
  HEAP32[$53>>2] = $51;
  $54 = $11;
  $4 = $54;
  $123 = $4;
  STACKTOP = sp;return ($123|0);
 }
 while(1) {
  $76 = $7;
  $77 = ($76>>>0)>(0);
  if (!($77)) {
   label = 16;
   break;
  }
  $78 = $5;
  $79 = ((($78)) + 24|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $80 & 1;
  $82 = $81&255;
  $83 = ($82|0)!=(0);
  $84 = $83 ^ 1;
  if (!($84)) {
   label = 16;
   break;
  }
  $85 = $5;
  $86 = (_refill_buffer($85)|0);
  $13 = $86;
  $87 = $13;
  $88 = ($87|0)<(0);
  if ($88) {
   label = 12;
   break;
  }
  $90 = $5;
  $91 = ((($90)) + 8|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $5;
  $94 = ((($93)) + 4|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $92;
  $97 = $95;
  $98 = (($96) - ($97))|0;
  $12 = $98;
  $99 = $12;
  $100 = $7;
  $101 = ($99>>>0)>($100>>>0);
  if ($101) {
   $102 = $7;
   $12 = $102;
  }
  $103 = $10;
  $104 = $5;
  $105 = ((($104)) + 4|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = $12;
  _memcpy(($103|0),($106|0),($107|0))|0;
  $108 = $12;
  $109 = $5;
  $110 = ((($109)) + 4|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) + ($108)|0);
  HEAP32[$110>>2] = $112;
  $113 = $12;
  $114 = $10;
  $115 = (($114) + ($113)|0);
  $10 = $115;
  $116 = $12;
  $117 = $7;
  $118 = (($117) - ($116))|0;
  $7 = $118;
  $119 = $12;
  $120 = $8;
  $121 = (($120) + ($119))|0;
  $8 = $121;
 }
 if ((label|0) == 12) {
  $89 = $13;
  $4 = $89;
  $123 = $4;
  STACKTOP = sp;return ($123|0);
 }
 else if ((label|0) == 16) {
  $122 = $8;
  $4 = $122;
  $123 = $4;
  STACKTOP = sp;return ($123|0);
 }
 return (0)|0;
}
function _hflush($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (_flush_buffer($3)|0);
 $5 = ($4|0)<(0);
 if ($5) {
  $1 = -1;
  $24 = $1;
  STACKTOP = sp;return ($24|0);
 }
 $6 = $2;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $2;
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $2;
  $18 = (FUNCTION_TABLE_ii[$16 & 63]($17)|0);
  $19 = ($18|0)<(0);
  if ($19) {
   $20 = (___errno_location()|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $2;
   $23 = ((($22)) + 28|0);
   HEAP32[$23>>2] = $21;
   $1 = -1;
   $24 = $1;
   STACKTOP = sp;return ($24|0);
  }
 }
 $1 = 0;
 $24 = $1;
 STACKTOP = sp;return ($24|0);
}
function _flush_buffer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 while(1) {
  $7 = $3;
  $8 = $2;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7>>>0)<($10>>>0);
  $12 = $2;
  if (!($11)) {
   label = 6;
   break;
  }
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $2;
  $18 = $3;
  $19 = $2;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $3;
  $23 = $21;
  $24 = $22;
  $25 = (($23) - ($24))|0;
  $26 = (FUNCTION_TABLE_iiii[$16 & 63]($17,$18,$25)|0);
  $4 = $26;
  $27 = $4;
  $28 = ($27|0)<(0);
  if ($28) {
   label = 4;
   break;
  }
  $34 = $4;
  $35 = $3;
  $36 = (($35) + ($34)|0);
  $3 = $36;
  $37 = $4;
  $38 = $2;
  $39 = ((($38)) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + ($37))|0;
  HEAP32[$39>>2] = $41;
 }
 if ((label|0) == 4) {
  $29 = (___errno_location()|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $2;
  $32 = ((($31)) + 28|0);
  HEAP32[$32>>2] = $30;
  $33 = $4;
  $1 = $33;
  $45 = $1;
  STACKTOP = sp;return ($45|0);
 }
 else if ((label|0) == 6) {
  $42 = HEAP32[$12>>2]|0;
  $43 = $2;
  $44 = ((($43)) + 4|0);
  HEAP32[$44>>2] = $42;
  $1 = 0;
  $45 = $1;
  STACKTOP = sp;return ($45|0);
 }
 return (0)|0;
}
function _hwrite2($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $6;
 $9 = $14;
 $15 = $5;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = HEAP32[$18>>2]|0;
 $20 = $17;
 $21 = $19;
 $22 = (($20) - ($21))|0;
 $11 = $22;
 $23 = $7;
 $24 = $8;
 $25 = (($23) - ($24))|0;
 $12 = $25;
 $26 = $8;
 $27 = $9;
 $28 = (($27) + ($26)|0);
 $9 = $28;
 $29 = $5;
 $30 = (_flush_buffer($29)|0);
 $10 = $30;
 $31 = $10;
 $32 = ($31|0)<(0);
 if ($32) {
  $33 = $10;
  $4 = $33;
  $75 = $4;
  STACKTOP = sp;return ($75|0);
 }
 while(1) {
  $34 = $12;
  $35 = $34<<1;
  $36 = $11;
  $37 = ($35>>>0)>=($36>>>0);
  $38 = $5;
  if (!($37)) {
   label = 7;
   break;
  }
  $39 = ((($38)) + 16|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = $9;
  $45 = $12;
  $46 = (FUNCTION_TABLE_iiii[$42 & 63]($43,$44,$45)|0);
  $13 = $46;
  $47 = $13;
  $48 = ($47|0)<(0);
  if ($48) {
   label = 5;
   break;
  }
  $54 = $13;
  $55 = $5;
  $56 = ((($55)) + 20|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + ($54))|0;
  HEAP32[$56>>2] = $58;
  $59 = $13;
  $60 = $9;
  $61 = (($60) + ($59)|0);
  $9 = $61;
  $62 = $13;
  $63 = $12;
  $64 = (($63) - ($62))|0;
  $12 = $64;
 }
 if ((label|0) == 5) {
  $49 = (___errno_location()|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $5;
  $52 = ((($51)) + 28|0);
  HEAP32[$52>>2] = $50;
  $53 = $13;
  $4 = $53;
  $75 = $4;
  STACKTOP = sp;return ($75|0);
 }
 else if ((label|0) == 7) {
  $65 = ((($38)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $9;
  $68 = $12;
  _memcpy(($66|0),($67|0),($68|0))|0;
  $69 = $12;
  $70 = $5;
  $71 = ((($70)) + 4|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($72) + ($69)|0);
  HEAP32[$71>>2] = $73;
  $74 = $7;
  $4 = $74;
  $75 = $4;
  STACKTOP = sp;return ($75|0);
 }
 return (0)|0;
}
function _hseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = (_writebuffer_is_nonempty($10)|0);
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $4;
  $14 = (_flush_buffer($13)|0);
  $9 = $14;
  $15 = $9;
  $16 = ($15|0)<(0);
  if ($16) {
   $17 = $9;
   $3 = $17;
   $65 = $3;
   STACKTOP = sp;return ($65|0);
  }
 }
 $18 = $4;
 $19 = (_htell($18)|0);
 $7 = $19;
 $20 = $6;
 $21 = ($20|0)==(1);
 do {
  if ($21) {
   $22 = $7;
   $23 = $5;
   $24 = (($22) + ($23))|0;
   $25 = ($24|0)<(0);
   if (!($25)) {
    $6 = 0;
    $32 = $7;
    $33 = $5;
    $34 = (($32) + ($33))|0;
    $5 = $34;
    break;
   }
   $26 = $5;
   $27 = ($26|0)<(0);
   $28 = $27 ? 22 : 75;
   $29 = (___errno_location()|0);
   HEAP32[$29>>2] = $28;
   $30 = $4;
   $31 = ((($30)) + 28|0);
   HEAP32[$31>>2] = $28;
   $3 = -1;
   $65 = $3;
   STACKTOP = sp;return ($65|0);
  }
 } while(0);
 $35 = $4;
 $36 = ((($35)) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $4;
 $41 = $5;
 $42 = $6;
 $43 = (FUNCTION_TABLE_iiii[$39 & 63]($40,$41,$42)|0);
 $8 = $43;
 $44 = $8;
 $45 = ($44|0)<(0);
 if ($45) {
  $46 = (___errno_location()|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $4;
  $49 = ((($48)) + 28|0);
  HEAP32[$49>>2] = $47;
  $50 = $8;
  $3 = $50;
  $65 = $3;
  STACKTOP = sp;return ($65|0);
 } else {
  $51 = $4;
  $52 = HEAP32[$51>>2]|0;
  $53 = $4;
  $54 = ((($53)) + 8|0);
  HEAP32[$54>>2] = $52;
  $55 = $4;
  $56 = ((($55)) + 4|0);
  HEAP32[$56>>2] = $52;
  $57 = $4;
  $58 = ((($57)) + 24|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59 & -2;
  HEAP8[$58>>0] = $60;
  $61 = $8;
  $62 = $4;
  $63 = ((($62)) + 20|0);
  HEAP32[$63>>2] = $61;
  $64 = $8;
  $3 = $64;
  $65 = $3;
  STACKTOP = sp;return ($65|0);
 }
 return (0)|0;
}
function _writebuffer_is_nonempty($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4>>>0)>($7>>>0);
 $9 = $8&1;
 STACKTOP = sp;return ($9|0);
}
function _htell($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = $7;
 $11 = $9;
 $12 = (($10) - ($11))|0;
 $13 = (($4) + ($12))|0;
 STACKTOP = sp;return ($13|0);
}
function _hclose($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 $7 = $2;
 $8 = (_writebuffer_is_nonempty($7)|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $2;
  $11 = (_hflush($10)|0);
  $12 = ($11|0)<(0);
  if ($12) {
   $13 = $2;
   $14 = ((($13)) + 28|0);
   $15 = HEAP32[$14>>2]|0;
   $3 = $15;
  }
 }
 $16 = $2;
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $2;
 $22 = (FUNCTION_TABLE_ii[$20 & 63]($21)|0);
 $23 = ($22|0)<(0);
 if ($23) {
  $24 = (___errno_location()|0);
  $25 = HEAP32[$24>>2]|0;
  $3 = $25;
 }
 $26 = $2;
 _hfile_destroy($26);
 $27 = $3;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = $3;
  $30 = (___errno_location()|0);
  HEAP32[$30>>2] = $29;
  $1 = -1;
  $31 = $1;
  STACKTOP = sp;return ($31|0);
 } else {
  $1 = 0;
  $31 = $1;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _hclose_abruptly($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 $2 = $4;
 $5 = $1;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 (FUNCTION_TABLE_ii[$9 & 63]($10)|0);
 $11 = $1;
 _hfile_destroy($11);
 $12 = $2;
 $13 = (___errno_location()|0);
 HEAP32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function _hdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = $3;
 $8 = (_blksize($7)|0);
 $9 = (_hfile_init(40,$6,$8)|0);
 $5 = $9;
 $10 = $5;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $2 = 0;
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 } else {
  $12 = $3;
  $13 = $5;
  $14 = ((($13)) + 32|0);
  HEAP32[$14>>2] = $12;
  $15 = $4;
  $16 = (_strchr($15,115)|0);
  $17 = ($16|0)!=(0|0);
  $18 = $17&1;
  $19 = $5;
  $20 = ((($19)) + 36|0);
  $21 = $18&255;
  $22 = HEAP8[$20>>0]|0;
  $23 = $21 & 1;
  $24 = $22 & -2;
  $25 = $24 | $23;
  HEAP8[$20>>0] = $25;
  $26 = $5;
  $27 = ((($26)) + 16|0);
  HEAP32[$27>>2] = 280;
  $28 = $5;
  $2 = $28;
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _blksize($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp;
 $2 = $0;
 $4 = $2;
 $5 = (_fstat($4,$3)|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $1 = 0;
 } else {
  $7 = ((($3)) + 40|0);
  $8 = HEAP32[$7>>2]|0;
  $1 = $8;
 }
 $9 = $1;
 STACKTOP = sp;return ($9|0);
}
function _fd_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $6 = $8;
 while(1) {
  $9 = $6;
  $10 = ((($9)) + 36|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 & 1;
  $13 = $12&255;
  $14 = ($13|0)!=(0);
  $15 = $6;
  $16 = ((($15)) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $4;
  $19 = $5;
  if ($14) {
   $20 = (_recv($17,$18,$19,0)|0);
   $22 = $20;
  } else {
   $21 = (_read($17,$18,$19)|0);
   $22 = $21;
  }
  $7 = $22;
  $23 = $7;
  $24 = ($23|0)<(0);
  if (!($24)) {
   label = 7;
   break;
  }
  $25 = (___errno_location()|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(4);
  if (!($27)) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  $28 = $7;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _fd_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $6 = $8;
 while(1) {
  $9 = $6;
  $10 = ((($9)) + 36|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 & 1;
  $13 = $12&255;
  $14 = ($13|0)!=(0);
  $15 = $6;
  $16 = ((($15)) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $4;
  $19 = $5;
  if ($14) {
   $20 = (_send($17,$18,$19,0)|0);
   $22 = $20;
  } else {
   $21 = (_write($17,$18,$19)|0);
   $22 = $21;
  }
  $7 = $22;
  $23 = $7;
  $24 = ($23|0)<(0);
  if (!($24)) {
   label = 7;
   break;
  }
  $25 = (___errno_location()|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(4);
  if (!($27)) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  $28 = $7;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _fd_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $6 = $7;
 $8 = $6;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $4;
 $12 = $5;
 $13 = (_lseek($10,$11,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function _fd_flush($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $2 = $4;
 while(1) {
  $5 = $2;
  $6 = ((($5)) + 32|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_fsync($7)|0);
  $3 = $8;
  $9 = $3;
  $10 = ($9|0)<(0);
  do {
   if ($10) {
    $11 = (___errno_location()|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(22);
    if (!($13)) {
     $14 = (___errno_location()|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(95);
     if (!($16)) {
      break;
     }
    }
    $3 = 0;
   }
  } while(0);
  $17 = $3;
  $18 = ($17|0)<(0);
  if (!($18)) {
   label = 8;
   break;
  }
  $19 = (___errno_location()|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(4);
  if (!($21)) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  $22 = $3;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _fd_close($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $2 = $4;
 while(1) {
  $5 = $2;
  $6 = ((($5)) + 32|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_close($7)|0);
  $3 = $8;
  $9 = $3;
  $10 = ($9|0)<(0);
  if (!($10)) {
   label = 4;
   break;
  }
  $11 = (___errno_location()|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(4);
  if (!($13)) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $14 = $3;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _hfile_oflags($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = 0;
 $5 = $1;
 $4 = $5;
 while(1) {
  $6 = $4;
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)!=(0);
  if (!($8)) {
   break;
  }
  $9 = $4;
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  switch ($11|0) {
  case 114:  {
   $2 = 0;
   break;
  }
  case 119:  {
   $2 = 1;
   $12 = $3;
   $13 = $12 | 576;
   $3 = $13;
   break;
  }
  case 97:  {
   $2 = 1;
   $14 = $3;
   $15 = $14 | 1088;
   $3 = $15;
   break;
  }
  case 43:  {
   $2 = 2;
   break;
  }
  case 101:  {
   $16 = $3;
   $17 = $16 | 524288;
   $3 = $17;
   break;
  }
  case 120:  {
   $18 = $3;
   $19 = $18 | 128;
   $3 = $19;
   break;
  }
  default: {
  }
  }
  $20 = $4;
  $21 = ((($20)) + 1|0);
  $4 = $21;
 }
 $22 = $2;
 $23 = $3;
 $24 = $22 | $23;
 STACKTOP = sp;return ($24|0);
}
function _hfile_add_scheme_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 4|0;
 $2 = $0;
 $3 = $1;
 $6 = HEAP32[5928]|0;
 $7 = $2;
 $8 = (_kh_put_scheme_string($6,$7,$4)|0);
 $5 = $8;
 $9 = HEAP32[$4>>2]|0;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $11 = $3;
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[5928]|0;
  $15 = ((($14)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $5;
  $18 = (($16) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($13|0)>($21|0);
  if (!($22)) {
   STACKTOP = sp;return;
  }
 }
 $23 = $3;
 $24 = HEAP32[5928]|0;
 $25 = ((($24)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $5;
 $28 = (($26) + ($27<<2)|0);
 HEAP32[$28>>2] = $23;
 STACKTOP = sp;return;
}
function _kh_put_scheme_string($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $4;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16>>>0)>=($19>>>0);
 do {
  if ($20) {
   $21 = $4;
   $22 = HEAP32[$21>>2]|0;
   $23 = $4;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 << 1;
   $27 = ($22>>>0)>($26>>>0);
   $28 = $4;
   $29 = $4;
   $30 = HEAP32[$29>>2]|0;
   if ($27) {
    $31 = (($30) - 1)|0;
    $32 = (_kh_resize_scheme_string($28,$31)|0);
    $33 = ($32|0)<(0);
    if (!($33)) {
     break;
    }
    $34 = $6;
    HEAP32[$34>>2] = -1;
    $35 = $4;
    $36 = HEAP32[$35>>2]|0;
    $3 = $36;
    $230 = $3;
    STACKTOP = sp;return ($230|0);
   } else {
    $37 = (($30) + 1)|0;
    $38 = (_kh_resize_scheme_string($28,$37)|0);
    $39 = ($38|0)<(0);
    if (!($39)) {
     break;
    }
    $40 = $6;
    HEAP32[$40>>2] = -1;
    $41 = $4;
    $42 = HEAP32[$41>>2]|0;
    $3 = $42;
    $230 = $3;
    STACKTOP = sp;return ($230|0);
   }
  }
 } while(0);
 $43 = $4;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) - 1)|0;
 $12 = $45;
 $13 = 0;
 $46 = $4;
 $47 = HEAP32[$46>>2]|0;
 $10 = $47;
 $7 = $47;
 $48 = $5;
 $49 = (___ac_X31_hash_string_200($48)|0);
 $8 = $49;
 $50 = $8;
 $51 = $12;
 $52 = $50 & $51;
 $9 = $52;
 $53 = $4;
 $54 = ((($53)) + 16|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $9;
 $57 = $56 >>> 4;
 $58 = (($55) + ($57<<2)|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $9;
 $61 = $60 & 15;
 $62 = $61 << 1;
 $63 = $59 >>> $62;
 $64 = $63 & 2;
 $65 = ($64|0)!=(0);
 $66 = $9;
 do {
  if ($65) {
   $7 = $66;
  } else {
   $11 = $66;
   while(1) {
    $67 = $4;
    $68 = ((($67)) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $9;
    $71 = $70 >>> 4;
    $72 = (($69) + ($71<<2)|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $9;
    $75 = $74 & 15;
    $76 = $75 << 1;
    $77 = $73 >>> $76;
    $78 = $77 & 2;
    $79 = ($78|0)!=(0);
    if ($79) {
     break;
    }
    $80 = $4;
    $81 = ((($80)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $9;
    $84 = $83 >>> 4;
    $85 = (($82) + ($84<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $9;
    $88 = $87 & 15;
    $89 = $88 << 1;
    $90 = $86 >>> $89;
    $91 = $90 & 1;
    $92 = ($91|0)!=(0);
    if (!($92)) {
     $93 = $4;
     $94 = ((($93)) + 20|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = $9;
     $97 = (($95) + ($96<<2)|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $5;
     $100 = (_strcmp($98,$99)|0);
     $101 = ($100|0)==(0);
     $102 = $101 ^ 1;
     if (!($102)) {
      break;
     }
    }
    $103 = $4;
    $104 = ((($103)) + 16|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $9;
    $107 = $106 >>> 4;
    $108 = (($105) + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $9;
    $111 = $110 & 15;
    $112 = $111 << 1;
    $113 = $109 >>> $112;
    $114 = $113 & 1;
    $115 = ($114|0)!=(0);
    if ($115) {
     $116 = $9;
     $10 = $116;
    }
    $117 = $9;
    $118 = $13;
    $119 = (($118) + 1)|0;
    $13 = $119;
    $120 = (($117) + ($119))|0;
    $121 = $12;
    $122 = $120 & $121;
    $9 = $122;
    $123 = $9;
    $124 = $11;
    $125 = ($123|0)==($124|0);
    if ($125) {
     label = 16;
     break;
    }
   }
   if ((label|0) == 16) {
    $126 = $10;
    $7 = $126;
   }
   $127 = $7;
   $128 = $4;
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = $4;
    $132 = ((($131)) + 16|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = $9;
    $135 = $134 >>> 4;
    $136 = (($133) + ($135<<2)|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $9;
    $139 = $138 & 15;
    $140 = $139 << 1;
    $141 = $137 >>> $140;
    $142 = $141 & 2;
    $143 = ($142|0)!=(0);
    if ($143) {
     $144 = $10;
     $145 = $4;
     $146 = HEAP32[$145>>2]|0;
     $147 = ($144|0)!=($146|0);
     if ($147) {
      $148 = $10;
      $7 = $148;
      break;
     }
    }
    $149 = $9;
    $7 = $149;
   }
  }
 } while(0);
 $150 = $4;
 $151 = ((($150)) + 16|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = $7;
 $154 = $153 >>> 4;
 $155 = (($152) + ($154<<2)|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $7;
 $158 = $157 & 15;
 $159 = $158 << 1;
 $160 = $156 >>> $159;
 $161 = $160 & 2;
 $162 = ($161|0)!=(0);
 do {
  if ($162) {
   $163 = $5;
   $164 = $4;
   $165 = ((($164)) + 20|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = $7;
   $168 = (($166) + ($167<<2)|0);
   HEAP32[$168>>2] = $163;
   $169 = $7;
   $170 = $169 & 15;
   $171 = $170 << 1;
   $172 = 3 << $171;
   $173 = $172 ^ -1;
   $174 = $4;
   $175 = ((($174)) + 16|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = $7;
   $178 = $177 >>> 4;
   $179 = (($176) + ($178<<2)|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $180 & $173;
   HEAP32[$179>>2] = $181;
   $182 = $4;
   $183 = ((($182)) + 4|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (($184) + 1)|0;
   HEAP32[$183>>2] = $185;
   $186 = $4;
   $187 = ((($186)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = (($188) + 1)|0;
   HEAP32[$187>>2] = $189;
   $190 = $6;
   HEAP32[$190>>2] = 1;
  } else {
   $191 = $4;
   $192 = ((($191)) + 16|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $7;
   $195 = $194 >>> 4;
   $196 = (($193) + ($195<<2)|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $7;
   $199 = $198 & 15;
   $200 = $199 << 1;
   $201 = $197 >>> $200;
   $202 = $201 & 1;
   $203 = ($202|0)!=(0);
   if ($203) {
    $204 = $5;
    $205 = $4;
    $206 = ((($205)) + 20|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = $7;
    $209 = (($207) + ($208<<2)|0);
    HEAP32[$209>>2] = $204;
    $210 = $7;
    $211 = $210 & 15;
    $212 = $211 << 1;
    $213 = 3 << $212;
    $214 = $213 ^ -1;
    $215 = $4;
    $216 = ((($215)) + 16|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = $7;
    $219 = $218 >>> 4;
    $220 = (($217) + ($219<<2)|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = $221 & $214;
    HEAP32[$220>>2] = $222;
    $223 = $4;
    $224 = ((($223)) + 4|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = (($225) + 1)|0;
    HEAP32[$224>>2] = $226;
    $227 = $6;
    HEAP32[$227>>2] = 2;
    break;
   } else {
    $228 = $6;
    HEAP32[$228>>2] = 0;
    break;
   }
  }
 } while(0);
 $229 = $7;
 $3 = $229;
 $230 = $3;
 STACKTOP = sp;return ($230|0);
}
function _kh_resize_scheme_string($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$sink = 0, $$sink3 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = 1;
 $17 = $4;
 $18 = (($17) + -1)|0;
 $4 = $18;
 $19 = $4;
 $20 = $19 >>> 1;
 $21 = $4;
 $22 = $21 | $20;
 $4 = $22;
 $23 = $4;
 $24 = $23 >>> 2;
 $25 = $4;
 $26 = $25 | $24;
 $4 = $26;
 $27 = $4;
 $28 = $27 >>> 4;
 $29 = $4;
 $30 = $29 | $28;
 $4 = $30;
 $31 = $4;
 $32 = $31 >>> 8;
 $33 = $4;
 $34 = $33 | $32;
 $4 = $34;
 $35 = $4;
 $36 = $35 >>> 16;
 $37 = $4;
 $38 = $37 | $36;
 $4 = $38;
 $39 = $4;
 $40 = (($39) + 1)|0;
 $4 = $40;
 $41 = $4;
 $42 = ($41>>>0)<(4);
 $$ = $42 ? 4 : $40;
 $4 = $$;
 $43 = $3;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $4;
 $47 = (+($46>>>0));
 $48 = $47 * 0.77000000000000001;
 $49 = $48 + 0.5;
 $50 = (~~(($49))>>>0);
 $51 = ($45>>>0)>=($50>>>0);
 do {
  if ($51) {
   $6 = 0;
  } else {
   $52 = $4;
   $53 = ($52>>>0)<(16);
   $54 = $4;
   $55 = $54 >>> 4;
   $56 = $53 ? 1 : $55;
   $57 = $56<<2;
   $58 = (_malloc($57)|0);
   $5 = $58;
   $59 = $5;
   $60 = ($59|0)!=(0|0);
   if (!($60)) {
    $2 = -1;
    $279 = $2;
    STACKTOP = sp;return ($279|0);
   }
   $61 = $5;
   $62 = $4;
   $63 = ($62>>>0)<(16);
   $64 = $4;
   $65 = $64 >>> 4;
   $66 = $63 ? 1 : $65;
   $67 = $66<<2;
   _memset(($61|0),-86,($67|0))|0;
   $68 = $3;
   $69 = HEAP32[$68>>2]|0;
   $70 = $4;
   $71 = ($69>>>0)<($70>>>0);
   if ($71) {
    $72 = $3;
    $73 = ((($72)) + 20|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $4;
    $76 = $75<<2;
    $77 = (_realloc($74,$76)|0);
    $7 = $77;
    $78 = $7;
    $79 = ($78|0)!=(0|0);
    if (!($79)) {
     $80 = $5;
     _free($80);
     $2 = -1;
     $279 = $2;
     STACKTOP = sp;return ($279|0);
    }
    $81 = $7;
    $82 = $3;
    $83 = ((($82)) + 20|0);
    HEAP32[$83>>2] = $81;
    $84 = $3;
    $85 = ((($84)) + 24|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $4;
    $88 = $87<<2;
    $89 = (_realloc($86,$88)|0);
    $8 = $89;
    $90 = $8;
    $91 = ($90|0)!=(0|0);
    if ($91) {
     $93 = $8;
     $94 = $3;
     $95 = ((($94)) + 24|0);
     HEAP32[$95>>2] = $93;
     break;
    }
    $92 = $5;
    _free($92);
    $2 = -1;
    $279 = $2;
    STACKTOP = sp;return ($279|0);
   }
  }
 } while(0);
 $96 = $6;
 $97 = ($96|0)!=(0);
 if ($97) {
  $6 = 0;
  while(1) {
   $98 = $6;
   $99 = $3;
   $100 = HEAP32[$99>>2]|0;
   $101 = ($98|0)!=($100|0);
   $102 = $3;
   if (!($101)) {
    break;
   }
   $103 = ((($102)) + 16|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $6;
   $106 = $105 >>> 4;
   $107 = (($104) + ($106<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $6;
   $110 = $109 & 15;
   $111 = $110 << 1;
   $112 = $108 >>> $111;
   $113 = $112 & 3;
   $114 = ($113|0)==(0);
   if ($114) {
    $115 = $3;
    $116 = ((($115)) + 20|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = $6;
    $119 = (($117) + ($118<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $9 = $120;
    $121 = $4;
    $122 = (($121) - 1)|0;
    $11 = $122;
    $123 = $3;
    $124 = ((($123)) + 24|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $6;
    $127 = (($125) + ($126<<2)|0);
    $128 = HEAP32[$127>>2]|0;
    $10 = $128;
    $129 = $6;
    $130 = $129 & 15;
    $131 = $130 << 1;
    $132 = 1 << $131;
    $133 = $3;
    $134 = ((($133)) + 16|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $6;
    $$sink = $136;$$sink3 = $132;$$sink4 = $135;
    while(1) {
     $137 = $$sink >>> 4;
     $138 = (($$sink4) + ($137<<2)|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = $139 | $$sink3;
     HEAP32[$138>>2] = $140;
     $14 = 0;
     $141 = $9;
     $142 = (___ac_X31_hash_string_200($141)|0);
     $12 = $142;
     $143 = $12;
     $144 = $11;
     $145 = $143 & $144;
     $13 = $145;
     while(1) {
      $146 = $5;
      $147 = $13;
      $148 = $147 >>> 4;
      $149 = (($146) + ($148<<2)|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = $13;
      $152 = $151 & 15;
      $153 = $152 << 1;
      $154 = $150 >>> $153;
      $155 = $154 & 2;
      $156 = ($155|0)!=(0);
      $157 = $156 ^ 1;
      $158 = $13;
      if (!($157)) {
       break;
      }
      $159 = $14;
      $160 = (($159) + 1)|0;
      $14 = $160;
      $161 = (($158) + ($160))|0;
      $162 = $11;
      $163 = $161 & $162;
      $13 = $163;
     }
     $164 = $158 & 15;
     $165 = $164 << 1;
     $166 = 2 << $165;
     $167 = $166 ^ -1;
     $168 = $5;
     $169 = $13;
     $170 = $169 >>> 4;
     $171 = (($168) + ($170<<2)|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = $172 & $167;
     HEAP32[$171>>2] = $173;
     $174 = $13;
     $175 = $3;
     $176 = HEAP32[$175>>2]|0;
     $177 = ($174>>>0)<($176>>>0);
     if (!($177)) {
      break;
     }
     $178 = $3;
     $179 = ((($178)) + 16|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = $13;
     $182 = $181 >>> 4;
     $183 = (($180) + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = $13;
     $186 = $185 & 15;
     $187 = $186 << 1;
     $188 = $184 >>> $187;
     $189 = $188 & 3;
     $190 = ($189|0)==(0);
     if (!($190)) {
      break;
     }
     $191 = $3;
     $192 = ((($191)) + 20|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = $13;
     $195 = (($193) + ($194<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $15 = $196;
     $197 = $9;
     $198 = $3;
     $199 = ((($198)) + 20|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = $13;
     $202 = (($200) + ($201<<2)|0);
     HEAP32[$202>>2] = $197;
     $203 = $15;
     $9 = $203;
     $204 = $3;
     $205 = ((($204)) + 24|0);
     $206 = HEAP32[$205>>2]|0;
     $207 = $13;
     $208 = (($206) + ($207<<2)|0);
     $209 = HEAP32[$208>>2]|0;
     $16 = $209;
     $210 = $10;
     $211 = $3;
     $212 = ((($211)) + 24|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = $13;
     $215 = (($213) + ($214<<2)|0);
     HEAP32[$215>>2] = $210;
     $216 = $16;
     $10 = $216;
     $217 = $13;
     $218 = $217 & 15;
     $219 = $218 << 1;
     $220 = 1 << $219;
     $221 = $3;
     $222 = ((($221)) + 16|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = $13;
     $$sink = $224;$$sink3 = $220;$$sink4 = $223;
    }
    $225 = $9;
    $226 = $3;
    $227 = ((($226)) + 20|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = $13;
    $230 = (($228) + ($229<<2)|0);
    HEAP32[$230>>2] = $225;
    $231 = $10;
    $232 = $3;
    $233 = ((($232)) + 24|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = $13;
    $236 = (($234) + ($235<<2)|0);
    HEAP32[$236>>2] = $231;
   }
   $237 = $6;
   $238 = (($237) + 1)|0;
   $6 = $238;
  }
  $239 = HEAP32[$102>>2]|0;
  $240 = $4;
  $241 = ($239>>>0)>($240>>>0);
  if ($241) {
   $242 = $3;
   $243 = ((($242)) + 20|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = $4;
   $246 = $245<<2;
   $247 = (_realloc($244,$246)|0);
   $248 = $3;
   $249 = ((($248)) + 20|0);
   HEAP32[$249>>2] = $247;
   $250 = $3;
   $251 = ((($250)) + 24|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = $4;
   $254 = $253<<2;
   $255 = (_realloc($252,$254)|0);
   $256 = $3;
   $257 = ((($256)) + 24|0);
   HEAP32[$257>>2] = $255;
  }
  $258 = $3;
  $259 = ((($258)) + 16|0);
  $260 = HEAP32[$259>>2]|0;
  _free($260);
  $261 = $5;
  $262 = $3;
  $263 = ((($262)) + 16|0);
  HEAP32[$263>>2] = $261;
  $264 = $4;
  $265 = $3;
  HEAP32[$265>>2] = $264;
  $266 = $3;
  $267 = ((($266)) + 4|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = $3;
  $270 = ((($269)) + 8|0);
  HEAP32[$270>>2] = $268;
  $271 = $3;
  $272 = HEAP32[$271>>2]|0;
  $273 = (+($272>>>0));
  $274 = $273 * 0.77000000000000001;
  $275 = $274 + 0.5;
  $276 = (~~(($275))>>>0);
  $277 = $3;
  $278 = ((($277)) + 12|0);
  HEAP32[$278>>2] = $276;
 }
 $2 = 0;
 $279 = $2;
 STACKTOP = sp;return ($279|0);
}
function ___ac_X31_hash_string_200($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 << 24 >> 24;
 $2 = $5;
 $6 = $2;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 $8 = $1;
 $9 = ((($8)) + 1|0);
 $1 = $9;
 while(1) {
  $10 = $1;
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)!=(0);
  if (!($12)) {
   break;
  }
  $13 = $2;
  $14 = $13 << 5;
  $15 = $2;
  $16 = (($14) - ($15))|0;
  $17 = $1;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = (($16) + ($19))|0;
  $2 = $20;
  $21 = $1;
  $22 = ((($21)) + 1|0);
  $1 = $22;
 }
 $23 = $2;
 STACKTOP = sp;return ($23|0);
}
function _hopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = (_find_scheme_handler($6)|0);
 $5 = $7;
 $8 = $5;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $5;
  $11 = HEAP32[$10>>2]|0;
  $12 = $3;
  $13 = $4;
  $14 = (FUNCTION_TABLE_iii[$11 & 31]($12,$13)|0);
  $2 = $14;
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 $15 = $3;
 $16 = (_strcmp($15,14690)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = $4;
  $19 = (_hopen_fd_stdinout($18)|0);
  $2 = $19;
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 } else {
  $20 = $3;
  $21 = $4;
  $22 = (_hopen_fd($20,$21)|0);
  $2 = $22;
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _find_scheme_handler($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $2 = $0;
 $4 = 0;
 while(1) {
  $6 = $4;
  $7 = ($6>>>0)<(12);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $9 = $4;
  $10 = (($8) + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = (_isalnum_c($11)|0);
  $13 = ($12|0)!=(0);
  if (!($13)) {
   $14 = $2;
   $15 = $4;
   $16 = (($14) + ($15)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17 << 24 >> 24;
   $19 = ($18|0)==(43);
   if (!($19)) {
    $20 = $2;
    $21 = $4;
    $22 = (($20) + ($21)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23 << 24 >> 24;
    $25 = ($24|0)==(45);
    if (!($25)) {
     $26 = $2;
     $27 = $4;
     $28 = (($26) + ($27)|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = $29 << 24 >> 24;
     $31 = ($30|0)==(46);
     if (!($31)) {
      label = 8;
      break;
     }
    }
   }
  }
  $32 = $2;
  $33 = $4;
  $34 = (($32) + ($33)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = (_tolower_c_204($35)|0);
  $37 = $4;
  $38 = (($3) + ($37)|0);
  HEAP8[$38>>0] = $36;
  $39 = $4;
  $40 = (($39) + 1)|0;
  $4 = $40;
 }
 if ((label|0) == 8) {
  $41 = $2;
  $42 = $4;
  $43 = (($41) + ($42)|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44 << 24 >> 24;
  $46 = ($45|0)==(58);
  if (!($46)) {
   $1 = 0;
   $68 = $1;
   STACKTOP = sp;return ($68|0);
  }
 }
 $47 = $4;
 $48 = ($47|0)==(0);
 $49 = $4;
 $50 = ($49>>>0)>=(12);
 $or$cond = $48 | $50;
 if ($or$cond) {
  $1 = 0;
  $68 = $1;
  STACKTOP = sp;return ($68|0);
 }
 $51 = $4;
 $52 = (($3) + ($51)|0);
 HEAP8[$52>>0] = 0;
 (___pthread_mutex_lock(23716)|0);
 $53 = HEAP32[5928]|0;
 $54 = ($53|0)!=(0|0);
 if (!($54)) {
  _load_hfile_plugins();
 }
 (___pthread_mutex_unlock(23716)|0);
 $55 = HEAP32[5928]|0;
 $56 = (_kh_get_scheme_string($55,$3)|0);
 $5 = $56;
 $57 = $5;
 $58 = HEAP32[5928]|0;
 $59 = HEAP32[$58>>2]|0;
 $60 = ($57|0)!=($59|0);
 if ($60) {
  $61 = HEAP32[5928]|0;
  $62 = ((($61)) + 24|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $5;
  $65 = (($63) + ($64<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $66;
 } else {
  $67 = 300;
 }
 $1 = $67;
 $68 = $1;
 STACKTOP = sp;return ($68|0);
}
function _hopen_fd_stdinout($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_strchr($3,114)|0);
 $5 = ($4|0)!=(0|0);
 $6 = $5 ? 0 : 1;
 $2 = $6;
 $7 = $2;
 $8 = $1;
 $9 = (_hdopen($7,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _hopen_fd($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $8 = $3;
 $9 = $4;
 $10 = (_hfile_oflags($9)|0);
 HEAP32[$vararg_buffer>>2] = 438;
 $11 = (_open($8,$10,$vararg_buffer)|0);
 $6 = $11;
 $12 = $6;
 $13 = ($12|0)<(0);
 if (!($13)) {
  $14 = $4;
  $15 = $6;
  $16 = (_blksize($15)|0);
  $17 = (_hfile_init(40,$14,$16)|0);
  $5 = $17;
  $18 = $5;
  $19 = ($18|0)==(0|0);
  if (!($19)) {
   $20 = $6;
   $21 = $5;
   $22 = ((($21)) + 32|0);
   HEAP32[$22>>2] = $20;
   $23 = $5;
   $24 = ((($23)) + 36|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25 & -2;
   HEAP8[$24>>0] = $26;
   $27 = $5;
   $28 = ((($27)) + 16|0);
   HEAP32[$28>>2] = 280;
   $29 = $5;
   $2 = $29;
   $38 = $2;
   STACKTOP = sp;return ($38|0);
  }
 }
 $30 = $6;
 $31 = ($30|0)>=(0);
 if ($31) {
  $32 = (___errno_location()|0);
  $33 = HEAP32[$32>>2]|0;
  $7 = $33;
  $34 = $6;
  (_close($34)|0);
  $35 = $7;
  $36 = (___errno_location()|0);
  HEAP32[$36>>2] = $35;
 }
 $37 = $5;
 _hfile_destroy($37);
 $2 = 0;
 $38 = $2;
 STACKTOP = sp;return ($38|0);
}
function _isalnum_c($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2&255;
 $4 = (_isalnum($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _tolower_c_204($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2&255;
 $4 = (_tolower($3)|0);
 $5 = $4&255;
 STACKTOP = sp;return ($5|0);
}
function _load_hfile_plugins() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_kh_init_scheme_string()|0);
 HEAP32[5928] = $0;
 $1 = HEAP32[5928]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  _abort();
  // unreachable;
 } else {
  _hfile_add_scheme_handler(14701,316);
  _hfile_add_scheme_handler(14706,332);
  (_init_add_plugin(0,49,16459)|0);
  (_atexit((50|0))|0);
  return;
 }
}
function _kh_get_scheme_string($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $2 = 0;
  $86 = $2;
  STACKTOP = sp;return ($86|0);
 }
 $9 = 0;
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - 1)|0;
 $8 = $15;
 $16 = $4;
 $17 = (___ac_X31_hash_string_200($16)|0);
 $5 = $17;
 $18 = $5;
 $19 = $8;
 $20 = $18 & $19;
 $6 = $20;
 $21 = $6;
 $7 = $21;
 while(1) {
  $22 = $3;
  $23 = ((($22)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $6;
  $26 = $25 >>> 4;
  $27 = (($24) + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $6;
  $30 = $29 & 15;
  $31 = $30 << 1;
  $32 = $28 >>> $31;
  $33 = $32 & 2;
  $34 = ($33|0)!=(0);
  if ($34) {
   break;
  }
  $35 = $3;
  $36 = ((($35)) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $6;
  $39 = $38 >>> 4;
  $40 = (($37) + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $6;
  $43 = $42 & 15;
  $44 = $43 << 1;
  $45 = $41 >>> $44;
  $46 = $45 & 1;
  $47 = ($46|0)!=(0);
  if (!($47)) {
   $48 = $3;
   $49 = ((($48)) + 20|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $6;
   $52 = (($50) + ($51<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $4;
   $55 = (_strcmp($53,$54)|0);
   $56 = ($55|0)==(0);
   $57 = $56 ^ 1;
   if (!($57)) {
    break;
   }
  }
  $58 = $6;
  $59 = $9;
  $60 = (($59) + 1)|0;
  $9 = $60;
  $61 = (($58) + ($60))|0;
  $62 = $8;
  $63 = $61 & $62;
  $6 = $63;
  $64 = $6;
  $65 = $7;
  $66 = ($64|0)==($65|0);
  if ($66) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  $67 = $3;
  $68 = HEAP32[$67>>2]|0;
  $2 = $68;
  $86 = $2;
  STACKTOP = sp;return ($86|0);
 }
 $69 = $3;
 $70 = ((($69)) + 16|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $6;
 $73 = $72 >>> 4;
 $74 = (($71) + ($73<<2)|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $6;
 $77 = $76 & 15;
 $78 = $77 << 1;
 $79 = $75 >>> $78;
 $80 = $79 & 3;
 $81 = ($80|0)!=(0);
 if ($81) {
  $82 = $3;
  $83 = HEAP32[$82>>2]|0;
  $85 = $83;
 } else {
  $84 = $6;
  $85 = $84;
 }
 $2 = $85;
 $86 = $2;
 STACKTOP = sp;return ($86|0);
}
function _hopen_unknown_scheme($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_hopen_fd($5,$6)|0);
 $4 = $7;
 $8 = $4;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = (___errno_location()|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(2);
  if ($12) {
   $13 = (___errno_location()|0);
   HEAP32[$13>>2] = 93;
  }
 }
 $14 = $4;
 STACKTOP = sp;return ($14|0);
}
function _hfile_always_local($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 0;
}
function _kh_init_scheme_string() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,28)|0);
 return ($0|0);
}
function _init_add_plugin($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = (_malloc(20)|0);
 $7 = $9;
 $10 = $7;
 $11 = ($10|0)==(0|0);
 if ($11) {
  _abort();
  // unreachable;
 }
 $12 = $7;
 HEAP32[$12>>2] = 1;
 $13 = $4;
 $14 = $7;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = $13;
 $16 = $7;
 $17 = ((($16)) + 8|0);
 HEAP32[$17>>2] = 0;
 $18 = $7;
 $19 = ((($18)) + 12|0);
 HEAP32[$19>>2] = 0;
 $20 = $5;
 $21 = $7;
 $22 = (FUNCTION_TABLE_ii[$20 & 63]($21)|0);
 $8 = $22;
 $23 = $8;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = (3)>=(4);
  if ($25) {
   $26 = HEAP32[2398]|0;
   $27 = $6;
   $28 = $8;
   HEAP32[$vararg_buffer>>2] = $27;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $28;
   (_fprintf($26,14711,$vararg_buffer)|0);
  }
  $29 = $7;
  _free($29);
  $30 = $8;
  $3 = $30;
  $38 = $3;
  STACKTOP = sp;return ($38|0);
 } else {
  $31 = (3)>=(5);
  if ($31) {
   $32 = HEAP32[2398]|0;
   $33 = $6;
   HEAP32[$vararg_buffer2>>2] = $33;
   (_fprintf($32,14778,$vararg_buffer2)|0);
  }
  $34 = HEAP32[5936]|0;
  $35 = $7;
  $36 = ((($35)) + 16|0);
  HEAP32[$36>>2] = $34;
  $37 = $7;
  HEAP32[5936] = $37;
  $3 = 0;
  $38 = $3;
  STACKTOP = sp;return ($38|0);
 }
 return (0)|0;
}
function _hfile_exit() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 (___pthread_mutex_lock(23716)|0);
 $1 = HEAP32[5928]|0;
 _kh_destroy_scheme_string($1);
 while(1) {
  $2 = HEAP32[5936]|0;
  $3 = ($2|0)!=(0|0);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[5936]|0;
  $0 = $4;
  $5 = $0;
  $6 = ((($5)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if ($8) {
   $9 = $0;
   $10 = ((($9)) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   FUNCTION_TABLE_v[$11 & 127]();
  }
  $12 = $0;
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[5936] = $14;
  $15 = $0;
  _free($15);
 }
 (___pthread_mutex_unlock(23716)|0);
 STACKTOP = sp;return;
}
function _kh_destroy_scheme_string($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _hopen_fd_fileuri($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = (_strncmp($5,14815,17)|0);
 $7 = ($6|0)==(0);
 $8 = $3;
 do {
  if ($7) {
   $9 = ((($8)) + 16|0);
   $3 = $9;
  } else {
   $10 = (_strncmp($8,14833,8)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = $3;
    $13 = ((($12)) + 7|0);
    $3 = $13;
    break;
   }
   $14 = (___errno_location()|0);
   HEAP32[$14>>2] = 93;
   $2 = 0;
   $18 = $2;
   STACKTOP = sp;return ($18|0);
  }
 } while(0);
 $15 = $3;
 $16 = $4;
 $17 = (_hopen_fd($15,$16)|0);
 $2 = $17;
 $18 = $2;
 STACKTOP = sp;return ($18|0);
}
function _hopen_mem($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = (_strncmp($6,14842,5)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $3;
  $10 = ((($9)) + 5|0);
  $3 = $10;
 }
 $11 = $4;
 $12 = (_strchr($11,114)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = (___errno_location()|0);
  HEAP32[$14>>2] = 22;
  $2 = 0;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 }
 $15 = $4;
 $16 = (_hfile_init(44,$15,0)|0);
 $5 = $16;
 $17 = $5;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $2 = 0;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 } else {
  $19 = $3;
  $20 = $5;
  $21 = ((($20)) + 32|0);
  HEAP32[$21>>2] = $19;
  $22 = $3;
  $23 = (_strlen($22)|0);
  $24 = $5;
  $25 = ((($24)) + 36|0);
  HEAP32[$25>>2] = $23;
  $26 = $5;
  $27 = ((($26)) + 40|0);
  HEAP32[$27>>2] = 0;
  $28 = $5;
  $29 = ((($28)) + 16|0);
  HEAP32[$29>>2] = 348;
  $30 = $5;
  $2 = $30;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _mem_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $6 = $8;
 $9 = $6;
 $10 = ((($9)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $6;
 $13 = ((($12)) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($11) - ($14))|0;
 $7 = $15;
 $16 = $5;
 $17 = $7;
 $18 = ($16>>>0)>($17>>>0);
 if ($18) {
  $19 = $7;
  $5 = $19;
 }
 $20 = $4;
 $21 = $6;
 $22 = ((($21)) + 32|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $6;
 $25 = ((($24)) + 40|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($23) + ($26)|0);
 $28 = $5;
 _memcpy(($20|0),($27|0),($28|0))|0;
 $29 = $5;
 $30 = $6;
 $31 = ((($30)) + 40|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + ($29))|0;
 HEAP32[$31>>2] = $33;
 $34 = $5;
 STACKTOP = sp;return ($34|0);
}
function _mem_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $7 = $10;
 $11 = $5;
 $12 = ($11|0)>=(0);
 $13 = $5;
 $14 = (0 - ($13))|0;
 $15 = $12 ? $13 : $14;
 $8 = $15;
 $16 = $6;
 switch ($16|0) {
 case 0:  {
  $9 = 0;
  break;
 }
 case 1:  {
  $17 = $7;
  $18 = ((($17)) + 40|0);
  $19 = HEAP32[$18>>2]|0;
  $9 = $19;
  break;
 }
 case 2:  {
  $20 = $7;
  $21 = ((($20)) + 36|0);
  $22 = HEAP32[$21>>2]|0;
  $9 = $22;
  break;
 }
 default: {
  $23 = (___errno_location()|0);
  HEAP32[$23>>2] = 22;
  $3 = -1;
  $47 = $3;
  STACKTOP = sp;return ($47|0);
 }
 }
 $24 = $5;
 $25 = ($24|0)<(0);
 if ($25) {
  $26 = $8;
  $27 = $9;
  $28 = ($26>>>0)>($27>>>0);
  if (!($28)) {
   label = 8;
  }
 } else {
  label = 8;
 }
 do {
  if ((label|0) == 8) {
   $29 = $5;
   $30 = ($29|0)>=(0);
   if ($30) {
    $31 = $8;
    $32 = $7;
    $33 = ((($32)) + 36|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $9;
    $36 = (($34) - ($35))|0;
    $37 = ($31>>>0)>($36>>>0);
    if ($37) {
     break;
    }
   }
   $39 = $9;
   $40 = $5;
   $41 = (($39) + ($40))|0;
   $42 = $7;
   $43 = ((($42)) + 40|0);
   HEAP32[$43>>2] = $41;
   $44 = $7;
   $45 = ((($44)) + 40|0);
   $46 = HEAP32[$45>>2]|0;
   $3 = $46;
   $47 = $3;
   STACKTOP = sp;return ($47|0);
  }
 } while(0);
 $38 = (___errno_location()|0);
 HEAP32[$38>>2] = 22;
 $3 = -1;
 $47 = $3;
 STACKTOP = sp;return ($47|0);
}
function _mem_close($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 0;
}
function _hfile_always_remote($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 1;
}
function _bgzf_open($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $8 = (_compressBound(65280)|0);
 $9 = ($8>>>0)<(65536);
 if (!($9)) {
  ___assert_fail((14848|0),(14901|0),237,(14915|0));
  // unreachable;
 }
 $10 = $4;
 $11 = (_strchr($10,114)|0);
 $12 = ($11|0)!=(0|0);
 do {
  if ($12) {
   $13 = $3;
   $14 = $4;
   $15 = (_hopen($13,$14)|0);
   $6 = $15;
   $16 = ($15|0)==(0|0);
   if ($16) {
    $2 = 0;
    $49 = $2;
    STACKTOP = sp;return ($49|0);
   }
   $17 = $6;
   $18 = (_bgzf_read_init($17)|0);
   $5 = $18;
   $19 = $5;
   $20 = ($19|0)==(0|0);
   $21 = $6;
   if (!($20)) {
    $22 = $5;
    $$sink = $21;$$sink2 = $22;
    break;
   }
   _hclose_abruptly($21);
   $2 = 0;
   $49 = $2;
   STACKTOP = sp;return ($49|0);
  } else {
   $23 = $4;
   $24 = (_strchr($23,119)|0);
   $25 = ($24|0)!=(0|0);
   if (!($25)) {
    $26 = $4;
    $27 = (_strchr($26,97)|0);
    $28 = ($27|0)!=(0|0);
    if (!($28)) {
     $39 = (___errno_location()|0);
     HEAP32[$39>>2] = 22;
     $2 = 0;
     $49 = $2;
     STACKTOP = sp;return ($49|0);
    }
   }
   $29 = $3;
   $30 = $4;
   $31 = (_hopen($29,$30)|0);
   $7 = $31;
   $32 = ($31|0)==(0|0);
   if ($32) {
    $2 = 0;
    $49 = $2;
    STACKTOP = sp;return ($49|0);
   }
   $33 = $4;
   $34 = (_bgzf_write_init($33)|0);
   $5 = $34;
   $35 = $5;
   $36 = ($35|0)==(0|0);
   if (!($36)) {
    $37 = $7;
    $38 = $5;
    $$sink = $37;$$sink2 = $38;
    break;
   }
   $2 = 0;
   $49 = $2;
   STACKTOP = sp;return ($49|0);
  }
 } while(0);
 $40 = ((($$sink2)) + 44|0);
 HEAP32[$40>>2] = $$sink;
 $41 = (_ed_is_big_430()|0);
 $42 = $5;
 $43 = HEAP32[$42>>2]|0;
 $44 = $41 & 3;
 $45 = $44 << 18;
 $46 = $43 & -786433;
 $47 = $46 | $45;
 HEAP32[$42>>2] = $47;
 $48 = $5;
 $2 = $48;
 $49 = $2;
 STACKTOP = sp;return ($49|0);
}
function _bgzf_read_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $2 = $0;
 $6 = $2;
 $7 = (_hpeek($6,$4,18)|0);
 $5 = $7;
 $8 = $5;
 $9 = ($8|0)<(0);
 if ($9) {
  $1 = 0;
  $81 = $1;
  STACKTOP = sp;return ($81|0);
 }
 $10 = (_calloc(1,64)|0);
 $3 = $10;
 $11 = $3;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $1 = 0;
  $81 = $1;
  STACKTOP = sp;return ($81|0);
 }
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & -196609;
 HEAP32[$13>>2] = $15;
 $16 = $5;
 $17 = ($16|0)==(2);
 if ($17) {
  $18 = HEAP8[$4>>0]|0;
  $19 = $18&255;
  $20 = ($19|0)==(31);
  if ($20) {
   $21 = ((($4)) + 1|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = ($23|0)==(139);
   $26 = $24;
  } else {
   $26 = 0;
  }
 } else {
  $26 = 0;
 }
 $25 = $26&1;
 $27 = $3;
 $28 = HEAP32[$27>>2]|0;
 $29 = $25 & 3;
 $30 = $29 << 29;
 $31 = $28 & -1610612737;
 $32 = $31 | $30;
 HEAP32[$27>>2] = $32;
 $33 = (_malloc(65536)|0);
 $34 = $3;
 $35 = ((($34)) + 32|0);
 HEAP32[$35>>2] = $33;
 $36 = (_malloc(65536)|0);
 $37 = $3;
 $38 = ((($37)) + 36|0);
 HEAP32[$38>>2] = $36;
 $39 = $5;
 $40 = ($39|0)==(18);
 if ($40) {
  $41 = HEAP8[$4>>0]|0;
  $42 = $41&255;
  $43 = ($42|0)==(31);
  if ($43) {
   $44 = ((($4)) + 1|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $47 = ($46|0)==(139);
   $48 = $47;
  } else {
   $48 = 0;
  }
 } else {
  $48 = 0;
 }
 $49 = $48 ? 1 : 0;
 $50 = $3;
 $51 = HEAP32[$50>>2]|0;
 $52 = $49 & 3;
 $53 = $52 << 29;
 $54 = $51 & -1610612737;
 $55 = $54 | $53;
 HEAP32[$50>>2] = $55;
 $56 = $3;
 $57 = HEAP32[$56>>2]|0;
 $58 = $57 >>> 29;
 $59 = $58 & 3;
 $60 = ($59|0)!=(0);
 if ($60) {
  $61 = ((($4)) + 3|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = $63 & 4;
  $65 = ($64|0)!=(0);
  if ($65) {
   $66 = ((($4)) + 12|0);
   $67 = (_memcmp($66,15201,4)|0);
   $68 = ($67|0)==(0);
   $69 = $68;
  } else {
   $69 = 0;
  }
 } else {
  $69 = 1;
 }
 $70 = $69 ? 0 : 1;
 $71 = $3;
 $72 = HEAP32[$71>>2]|0;
 $73 = $70 & 1;
 $74 = $73 << 31;
 $75 = $72 & 2147483647;
 $76 = $75 | $74;
 HEAP32[$71>>2] = $76;
 $77 = (_kh_init_cache()|0);
 $78 = $3;
 $79 = ((($78)) + 40|0);
 HEAP32[$79>>2] = $77;
 $80 = $3;
 $1 = $80;
 $81 = $1;
 STACKTOP = sp;return ($81|0);
}
function _bgzf_write_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $6 = (_calloc(1,64)|0);
 $3 = $6;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 do {
  if ($8) {
   label = 14;
  } else {
   $9 = $3;
   $10 = HEAP32[$9>>2]|0;
   $11 = $10 & -196609;
   $12 = $11 | 65536;
   HEAP32[$9>>2] = $12;
   $13 = $2;
   $14 = (_mode2level($13)|0);
   $4 = $14;
   $15 = $4;
   $16 = ($15|0)==(-2);
   $17 = $3;
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 & -1610612737;
   if ($16) {
    HEAP32[$17>>2] = $19;
    $20 = $3;
    $1 = $20;
    $116 = $1;
    STACKTOP = sp;return ($116|0);
   }
   $21 = $19 | 536870912;
   HEAP32[$17>>2] = $21;
   $22 = (_malloc(65536)|0);
   $23 = $3;
   $24 = ((($23)) + 32|0);
   HEAP32[$24>>2] = $22;
   $25 = $3;
   $26 = ((($25)) + 32|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    label = 14;
   } else {
    $29 = (_malloc(65536)|0);
    $30 = $3;
    $31 = ((($30)) + 36|0);
    HEAP32[$31>>2] = $29;
    $32 = $3;
    $33 = ((($32)) + 36|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(0|0);
    if ($35) {
     label = 14;
    } else {
     $36 = $4;
     $37 = ($36|0)<(0);
     $38 = $4;
     $39 = $37 ? -1 : $38;
     $40 = $3;
     $41 = HEAP32[$40>>2]|0;
     $42 = $39 & 511;
     $43 = $42 << 20;
     $44 = $41 & -535822337;
     $45 = $44 | $43;
     HEAP32[$40>>2] = $45;
     $46 = $3;
     $47 = HEAP32[$46>>2]|0;
     $48 = $47 << 3;
     $49 = $48 >> 23;
     $50 = ($49|0)>(9);
     if ($50) {
      $51 = $3;
      $52 = HEAP32[$51>>2]|0;
      $53 = $52 & -535822337;
      $54 = $53 | 535822336;
      HEAP32[$51>>2] = $54;
     }
     $55 = $2;
     $56 = (_strchr($55,103)|0);
     $57 = ($56|0)!=(0|0);
     if ($57) {
      $58 = $3;
      $59 = HEAP32[$58>>2]|0;
      $60 = $59 & 2147483647;
      $61 = $60 | -2147483648;
      HEAP32[$58>>2] = $61;
      $62 = (_calloc(1,56)|0);
      $63 = $3;
      $64 = ((($63)) + 60|0);
      HEAP32[$64>>2] = $62;
      $65 = $3;
      $66 = ((($65)) + 60|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       label = 14;
       break;
      }
      $69 = $3;
      $70 = ((($69)) + 60|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = ((($71)) + 32|0);
      HEAP32[$72>>2] = 0;
      $73 = $3;
      $74 = ((($73)) + 60|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = ((($75)) + 36|0);
      HEAP32[$76>>2] = 0;
      $77 = $3;
      $78 = ((($77)) + 60|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ((($79)) + 24|0);
      HEAP32[$80>>2] = 0;
      $81 = $3;
      $82 = ((($81)) + 60|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = $3;
      $85 = HEAP32[$84>>2]|0;
      $86 = $85 << 3;
      $87 = $86 >> 23;
      $88 = (_deflateInit2_($83,$87,8,31,8,0,14925,56)|0);
      $5 = $88;
      $89 = $5;
      $90 = ($89|0)!=(0);
      if ($90) {
       $91 = (3)>=(1);
       if (!($91)) {
        break;
       }
       $92 = HEAP32[2398]|0;
       $93 = $5;
       $94 = $3;
       $95 = ((($94)) + 60|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = (_bgzf_zerr($93,$96)|0);
       HEAP32[$vararg_buffer>>2] = 14964;
       $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
       HEAP32[$vararg_ptr1>>2] = $97;
       (_fprintf($92,14931,$vararg_buffer)|0);
       break;
      }
     }
     $98 = $3;
     $1 = $98;
     $116 = $1;
     STACKTOP = sp;return ($116|0);
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  $99 = (3)>=(1);
  if ($99) {
   $100 = HEAP32[2398]|0;
   $101 = (___errno_location()|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = (_strerror($102)|0);
   HEAP32[$vararg_buffer2>>2] = 14964;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $103;
   (_fprintf($100,14980,$vararg_buffer2)|0);
  }
 }
 $104 = $3;
 $105 = ($104|0)!=(0|0);
 if ($105) {
  $106 = $3;
  $107 = ((($106)) + 32|0);
  $108 = HEAP32[$107>>2]|0;
  _free($108);
  $109 = $3;
  $110 = ((($109)) + 36|0);
  $111 = HEAP32[$110>>2]|0;
  _free($111);
  $112 = $3;
  $113 = ((($112)) + 60|0);
  $114 = HEAP32[$113>>2]|0;
  _free($114);
  $115 = $3;
  _free($115);
 }
 $1 = 0;
 $116 = $1;
 STACKTOP = sp;return ($116|0);
}
function _ed_is_big_430() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 HEAP32[$0>>2] = 1;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)!=(0);
 $3 = $2 ^ 1;
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function _mode2level($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = -1;
 $2 = 0;
 while(1) {
  $4 = $1;
  $5 = $2;
  $6 = (($4) + ($5)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)!=(0);
  if (!($8)) {
   break;
  }
  $9 = $1;
  $10 = $2;
  $11 = (($9) + ($10)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = ($13|0)>=(48);
  if ($14) {
   $15 = $1;
   $16 = $2;
   $17 = (($15) + ($16)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18 << 24 >> 24;
   $20 = ($19|0)<=(57);
   if ($20) {
    break;
   }
  }
  $21 = $2;
  $22 = (($21) + 1)|0;
  $2 = $22;
 }
 $23 = $1;
 $24 = $2;
 $25 = (($23) + ($24)|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = ($26<<24>>24)!=(0);
 if ($27) {
  $28 = $1;
  $29 = $2;
  $30 = (($28) + ($29)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 << 24 >> 24;
  $33 = (($32) - 48)|0;
  $3 = $33;
 }
 $34 = $1;
 $35 = (_strchr($34,117)|0);
 $36 = ($35|0)!=(0|0);
 if (!($36)) {
  $37 = $3;
  STACKTOP = sp;return ($37|0);
 }
 $3 = -2;
 $37 = $3;
 STACKTOP = sp;return ($37|0);
}
function _bgzf_zerr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $4;
  $8 = ((($7)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0|0);
  if ($10) {
   $11 = $4;
   $12 = ((($11)) + 24|0);
   $13 = HEAP32[$12>>2]|0;
   $2 = $13;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 L4: do {
  if ((label|0) == 4) {
   $14 = $3;
   switch ($14|0) {
   case -1:  {
    $15 = (___errno_location()|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (_strerror($16)|0);
    $2 = $17;
    break L4;
    break;
   }
   case -2:  {
    $2 = 14992;
    break L4;
    break;
   }
   case -3:  {
    $2 = 15058;
    break L4;
    break;
   }
   case -4:  {
    $2 = 15083;
    break L4;
    break;
   }
   case -5:  {
    $2 = 15097;
    break L4;
    break;
   }
   case -6:  {
    $2 = 15166;
    break L4;
    break;
   }
   default: {
    $18 = $3;
    HEAP32[$vararg_buffer>>2] = $18;
    (_snprintf(27024,32,15188,$vararg_buffer)|0);
    $2 = 27024;
    break L4;
   }
   }
  }
 } while(0);
 $19 = $2;
 STACKTOP = sp;return ($19|0);
}
function _kh_init_cache() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,28)|0);
 return ($0|0);
}
function _bgzf_hopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = (_compressBound(65280)|0);
 $7 = ($6>>>0)<(65536);
 if (!($7)) {
  ___assert_fail((14848|0),(14901|0),283,(15206|0));
  // unreachable;
 }
 $8 = $4;
 $9 = (_strchr($8,114)|0);
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $3;
  $12 = (_bgzf_read_init($11)|0);
  $5 = $12;
  $13 = $5;
  $14 = ($13|0)==(0|0);
  if ($14) {
   $2 = 0;
   $37 = $2;
   STACKTOP = sp;return ($37|0);
  }
 } else {
  $15 = $4;
  $16 = (_strchr($15,119)|0);
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   $18 = $4;
   $19 = (_strchr($18,97)|0);
   $20 = ($19|0)!=(0|0);
   if (!($20)) {
    $25 = (___errno_location()|0);
    HEAP32[$25>>2] = 22;
    $2 = 0;
    $37 = $2;
    STACKTOP = sp;return ($37|0);
   }
  }
  $21 = $4;
  $22 = (_bgzf_write_init($21)|0);
  $5 = $22;
  $23 = $5;
  $24 = ($23|0)==(0|0);
  if ($24) {
   $2 = 0;
   $37 = $2;
   STACKTOP = sp;return ($37|0);
  }
 }
 $26 = $3;
 $27 = $5;
 $28 = ((($27)) + 44|0);
 HEAP32[$28>>2] = $26;
 $29 = (_ed_is_big_430()|0);
 $30 = $5;
 $31 = HEAP32[$30>>2]|0;
 $32 = $29 & 3;
 $33 = $32 << 18;
 $34 = $31 & -786433;
 $35 = $34 | $33;
 HEAP32[$30>>2] = $35;
 $36 = $5;
 $2 = $36;
 $37 = $2;
 STACKTOP = sp;return ($37|0);
}
function _bgzf_compress($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $12 = sp + 32|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $15 = $6;
 $13 = $15;
 $16 = ((($12)) + 32|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($12)) + 36|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($12)) + 24|0);
 HEAP32[$18>>2] = 0;
 $19 = $8;
 HEAP32[$12>>2] = $19;
 $20 = $9;
 $21 = ((($12)) + 4|0);
 HEAP32[$21>>2] = $20;
 $22 = $13;
 $23 = ((($22)) + 18|0);
 $24 = ((($12)) + 12|0);
 HEAP32[$24>>2] = $23;
 $25 = $7;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) - 18)|0;
 $28 = (($27) - 8)|0;
 $29 = ((($12)) + 16|0);
 HEAP32[$29>>2] = $28;
 $30 = $10;
 $31 = (_deflateInit2_($12,$30,8,-15,8,0,14925,56)|0);
 $14 = $31;
 $32 = $14;
 $33 = ($32|0)!=(0);
 if ($33) {
  $34 = (3)>=(1);
  if ($34) {
   $35 = HEAP32[2398]|0;
   $36 = $14;
   $37 = (_bgzf_zerr($36,$12)|0);
   HEAP32[$vararg_buffer>>2] = 15217;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $37;
   (_fprintf($35,14931,$vararg_buffer)|0);
  }
  $5 = -1;
  $80 = $5;
  STACKTOP = sp;return ($80|0);
 }
 $38 = (_deflate($12,4)|0);
 $14 = $38;
 $39 = ($38|0)!=(1);
 if ($39) {
  $40 = (3)>=(1);
  if ($40) {
   $41 = HEAP32[2398]|0;
   $42 = $14;
   $43 = $14;
   $44 = ($43|0)==(-3);
   $$ = $44 ? $12 : 0;
   $45 = (_bgzf_zerr($42,$$)|0);
   HEAP32[$vararg_buffer2>>2] = 15217;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $45;
   (_fprintf($41,15231,$vararg_buffer2)|0);
  }
  $5 = -1;
  $80 = $5;
  STACKTOP = sp;return ($80|0);
 }
 $46 = (_deflateEnd($12)|0);
 $14 = $46;
 $47 = ($46|0)!=(0);
 if (!($47)) {
  $52 = ((($12)) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + 18)|0;
  $55 = (($54) + 8)|0;
  $56 = $7;
  HEAP32[$56>>2] = $55;
  $57 = $13;
  dest=$57; src=15290; stop=dest+18|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $58 = $13;
  $59 = ((($58)) + 16|0);
  $60 = $7;
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) - 1)|0;
  $63 = $62&65535;
  _packInt16($59,$63);
  $64 = (_crc32(0,0,0)|0);
  $65 = $8;
  $66 = $9;
  $67 = (_crc32($64,$65,$66)|0);
  $11 = $67;
  $68 = $13;
  $69 = $7;
  $70 = HEAP32[$69>>2]|0;
  $71 = (($70) - 8)|0;
  $72 = (($68) + ($71)|0);
  $73 = $11;
  _packInt32($72,$73);
  $74 = $13;
  $75 = $7;
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) - 4)|0;
  $78 = (($74) + ($77)|0);
  $79 = $9;
  _packInt32($78,$79);
  $5 = 0;
  $80 = $5;
  STACKTOP = sp;return ($80|0);
 }
 $48 = (3)>=(1);
 if ($48) {
  $49 = HEAP32[2398]|0;
  $50 = $14;
  $51 = (_bgzf_zerr($50,0)|0);
  HEAP32[$vararg_buffer6>>2] = 15217;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $51;
  (_fprintf($49,15259,$vararg_buffer6)|0);
 }
 $5 = -1;
 $80 = $5;
 STACKTOP = sp;return ($80|0);
}
function _packInt16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $4&255;
 $6 = $2;
 HEAP8[$6>>0] = $5;
 $7 = $3;
 $8 = $7&65535;
 $9 = $8 >> 8;
 $10 = $9&255;
 $11 = $2;
 $12 = ((($11)) + 1|0);
 HEAP8[$12>>0] = $10;
 STACKTOP = sp;return;
}
function _packInt32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $4&255;
 $6 = $2;
 HEAP8[$6>>0] = $5;
 $7 = $3;
 $8 = $7 >>> 8;
 $9 = $8&255;
 $10 = $2;
 $11 = ((($10)) + 1|0);
 HEAP8[$11>>0] = $9;
 $12 = $3;
 $13 = $12 >>> 16;
 $14 = $13&255;
 $15 = $2;
 $16 = ((($15)) + 2|0);
 HEAP8[$16>>0] = $14;
 $17 = $3;
 $18 = $17 >>> 24;
 $19 = $18&255;
 $20 = $2;
 $21 = ((($20)) + 3|0);
 HEAP8[$21>>0] = $19;
 STACKTOP = sp;return;
}
function _bgzf_read_block($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $3 = sp + 68|0;
 $9 = sp;
 $2 = $0;
 $6 = 0;
 $14 = $2;
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 >>> 29;
 $17 = $16 & 3;
 $18 = ($17|0)!=(0);
 $19 = $2;
 $20 = ((($19)) + 44|0);
 $21 = HEAP32[$20>>2]|0;
 if (!($18)) {
  $22 = $2;
  $23 = ((($22)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_hread_445($21,$24,65536)|0);
  $5 = $25;
  $26 = $5;
  $27 = ($26|0)<(0);
  if ($27) {
   $28 = $2;
   $29 = HEAP32[$28>>2]|0;
   $30 = $29 & 65535;
   $31 = $30 | 4;
   $32 = HEAP32[$28>>2]|0;
   $33 = $31 & 65535;
   $34 = $32 & -65536;
   $35 = $34 | $33;
   HEAP32[$28>>2] = $35;
   $1 = -1;
   $381 = $1;
   STACKTOP = sp;return ($381|0);
  }
  $36 = $5;
  $37 = ($36|0)==(0);
  $38 = $2;
  $39 = ((($38)) + 8|0);
  if ($37) {
   HEAP32[$39>>2] = 0;
   $1 = 0;
   $381 = $1;
   STACKTOP = sp;return ($381|0);
  }
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)!=(0);
  if ($41) {
   $42 = $2;
   $43 = ((($42)) + 12|0);
   HEAP32[$43>>2] = 0;
  }
  $44 = $5;
  $45 = ($44|0)<(0);
  $46 = $45 << 31 >> 31;
  $47 = $2;
  $48 = ((($47)) + 16|0);
  $49 = $48;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + 4)|0;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  $55 = (_i64Add(($51|0),($54|0),($44|0),($46|0))|0);
  $56 = tempRet0;
  $57 = $48;
  $58 = $57;
  HEAP32[$58>>2] = $55;
  $59 = (($57) + 4)|0;
  $60 = $59;
  HEAP32[$60>>2] = $56;
  $61 = $5;
  $62 = $2;
  $63 = ((($62)) + 8|0);
  HEAP32[$63>>2] = $61;
  $1 = 0;
  $381 = $1;
  STACKTOP = sp;return ($381|0);
 }
 $64 = (_htell_446($21)|0);
 $65 = ($64|0)<(0);
 $66 = $65 << 31 >> 31;
 $67 = $9;
 $68 = $67;
 HEAP32[$68>>2] = $64;
 $69 = (($67) + 4)|0;
 $70 = $69;
 HEAP32[$70>>2] = $66;
 $71 = $2;
 $72 = HEAP32[$71>>2]|0;
 $73 = $72 >>> 31;
 $74 = ($73|0)!=(0);
 if ($74) {
  $75 = $2;
  $76 = ((($75)) + 60|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($77|0)!=(0|0);
  if ($78) {
   $79 = $2;
   $80 = (_inflate_gzip_block($79,0)|0);
   $5 = $80;
   $81 = $5;
   $82 = ($81|0)<(0);
   if ($82) {
    $83 = $2;
    $84 = HEAP32[$83>>2]|0;
    $85 = $84 & 65535;
    $86 = $85 | 1;
    $87 = HEAP32[$83>>2]|0;
    $88 = $86 & 65535;
    $89 = $87 & -65536;
    $90 = $89 | $88;
    HEAP32[$83>>2] = $90;
    $1 = -1;
    $381 = $1;
    STACKTOP = sp;return ($381|0);
   } else {
    $91 = $5;
    $92 = $2;
    $93 = ((($92)) + 8|0);
    HEAP32[$93>>2] = $91;
    $94 = $9;
    $95 = $94;
    $96 = HEAP32[$95>>2]|0;
    $97 = (($94) + 4)|0;
    $98 = $97;
    $99 = HEAP32[$98>>2]|0;
    $100 = $2;
    $101 = ((($100)) + 16|0);
    $102 = $101;
    $103 = $102;
    HEAP32[$103>>2] = $96;
    $104 = (($102) + 4)|0;
    $105 = $104;
    HEAP32[$105>>2] = $99;
    $1 = 0;
    $381 = $1;
    STACKTOP = sp;return ($381|0);
   }
  }
 }
 $106 = $2;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ($108|0)!=(0);
 if ($109) {
  $110 = $2;
  $111 = $9;
  $112 = $111;
  $113 = HEAP32[$112>>2]|0;
  $114 = (($111) + 4)|0;
  $115 = $114;
  $116 = HEAP32[$115>>2]|0;
  $117 = (_load_block_from_cache($110,$113,$116)|0);
  $118 = ($117|0)!=(0);
  if ($118) {
   $1 = 0;
   $381 = $1;
   STACKTOP = sp;return ($381|0);
  }
 }
 $119 = $2;
 $120 = ((($119)) + 44|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = (_hread_445($121,$3,18)|0);
 $5 = $122;
 $123 = $5;
 $124 = ($123|0)==(0);
 if ($124) {
  $125 = $2;
  $126 = ((($125)) + 8|0);
  HEAP32[$126>>2] = 0;
  $1 = 0;
  $381 = $1;
  STACKTOP = sp;return ($381|0);
 }
 $127 = $5;
 $128 = ($127|0)!=(18);
 if (!($128)) {
  $129 = (_check_header($3)|0);
  $10 = $129;
  $130 = ($129|0)==(-2);
  if (!($130)) {
   $139 = $10;
   $140 = ($139|0)==(-1);
   if (!($140)) {
    $288 = $5;
    $6 = $288;
    $289 = ((($3)) + 16|0);
    $290 = (_unpackInt16($289)|0);
    $291 = (($290) + 1)|0;
    $7 = $291;
    $292 = $2;
    $293 = ((($292)) + 36|0);
    $294 = HEAP32[$293>>2]|0;
    $4 = $294;
    $295 = $4;
    dest=$295; src=$3; stop=dest+18|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $296 = $7;
    $297 = (($296) - 18)|0;
    $8 = $297;
    $298 = $2;
    $299 = ((($298)) + 44|0);
    $300 = HEAP32[$299>>2]|0;
    $301 = $4;
    $302 = ((($301)) + 18|0);
    $303 = $8;
    $304 = (_hread_445($300,$302,$303)|0);
    $5 = $304;
    $305 = $5;
    $306 = $8;
    $307 = ($305|0)!=($306|0);
    if ($307) {
     $308 = $2;
     $309 = HEAP32[$308>>2]|0;
     $310 = $309 & 65535;
     $311 = $310 | 4;
     $312 = HEAP32[$308>>2]|0;
     $313 = $311 & 65535;
     $314 = $312 & -65536;
     $315 = $314 | $313;
     HEAP32[$308>>2] = $315;
     $1 = -1;
     $381 = $1;
     STACKTOP = sp;return ($381|0);
    }
    $316 = $5;
    $317 = $6;
    $318 = (($317) + ($316))|0;
    $6 = $318;
    $319 = $2;
    $320 = $7;
    $321 = (_inflate_block($319,$320)|0);
    $5 = $321;
    $322 = ($321|0)<(0);
    if ($322) {
     $323 = (3)>=(2);
     if ($323) {
      $324 = HEAP32[2398]|0;
      $325 = $5;
      HEAP32[$vararg_buffer3>>2] = 15341;
      $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
      HEAP32[$vararg_ptr6>>2] = $325;
      (_fprintf($324,15357,$vararg_buffer3)|0);
     }
     $326 = $2;
     $327 = HEAP32[$326>>2]|0;
     $328 = $327 & 65535;
     $329 = $328 | 1;
     $330 = HEAP32[$326>>2]|0;
     $331 = $329 & 65535;
     $332 = $330 & -65536;
     $333 = $332 | $331;
     HEAP32[$326>>2] = $333;
     $1 = -1;
     $381 = $1;
     STACKTOP = sp;return ($381|0);
    }
    $334 = $2;
    $335 = ((($334)) + 8|0);
    $336 = HEAP32[$335>>2]|0;
    $337 = ($336|0)!=(0);
    if ($337) {
     $338 = $2;
     $339 = ((($338)) + 12|0);
     HEAP32[$339>>2] = 0;
    }
    $340 = $9;
    $341 = $340;
    $342 = HEAP32[$341>>2]|0;
    $343 = (($340) + 4)|0;
    $344 = $343;
    $345 = HEAP32[$344>>2]|0;
    $346 = $2;
    $347 = ((($346)) + 16|0);
    $348 = $347;
    $349 = $348;
    HEAP32[$349>>2] = $342;
    $350 = (($348) + 4)|0;
    $351 = $350;
    HEAP32[$351>>2] = $345;
    $352 = $5;
    $353 = $2;
    $354 = ((($353)) + 8|0);
    HEAP32[$354>>2] = $352;
    $355 = $2;
    $356 = ((($355)) + 56|0);
    $357 = HEAP32[$356>>2]|0;
    $358 = ($357|0)!=(0);
    if ($358) {
     $359 = $2;
     (_bgzf_index_add_block($359)|0);
     $360 = $5;
     $361 = ($360|0)<(0);
     $362 = $361 << 31 >> 31;
     $363 = $2;
     $364 = ((($363)) + 52|0);
     $365 = HEAP32[$364>>2]|0;
     $366 = ((($365)) + 16|0);
     $367 = $366;
     $368 = $367;
     $369 = HEAP32[$368>>2]|0;
     $370 = (($367) + 4)|0;
     $371 = $370;
     $372 = HEAP32[$371>>2]|0;
     $373 = (_i64Add(($369|0),($372|0),($360|0),($362|0))|0);
     $374 = tempRet0;
     $375 = $366;
     $376 = $375;
     HEAP32[$376>>2] = $373;
     $377 = (($375) + 4)|0;
     $378 = $377;
     HEAP32[$378>>2] = $374;
    }
    $379 = $2;
    $380 = $6;
    _cache_block($379,$380);
    $1 = 0;
    $381 = $1;
    STACKTOP = sp;return ($381|0);
   }
   $141 = $2;
   $142 = ((($141)) + 36|0);
   $143 = HEAP32[$142>>2]|0;
   $11 = $143;
   $144 = $11;
   dest=$144; src=$3; stop=dest+18|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $145 = $2;
   $146 = ((($145)) + 44|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = $11;
   $149 = ((($148)) + 18|0);
   $150 = (_hread_445($147,$149,65262)|0);
   $151 = (($150) + 18)|0;
   $5 = $151;
   $12 = 10;
   $152 = ((($3)) + 3|0);
   $153 = HEAP8[$152>>0]|0;
   $154 = $153&255;
   $155 = $154 & 4;
   $156 = ($155|0)!=(0);
   if ($156) {
    $157 = $11;
    $158 = $12;
    $159 = (($157) + ($158)|0);
    $160 = (_unpackInt16($159)|0);
    $161 = (($160) + 2)|0;
    $162 = $12;
    $163 = (($162) + ($161))|0;
    $12 = $163;
   }
   $164 = ((($3)) + 3|0);
   $165 = HEAP8[$164>>0]|0;
   $166 = $165&255;
   $167 = $166 & 8;
   $168 = ($167|0)!=(0);
   L61: do {
    if ($168) {
     while(1) {
      $169 = $12;
      $170 = $5;
      $171 = ($169|0)<($170|0);
      if (!($171)) {
       break;
      }
      $172 = $11;
      $173 = $12;
      $174 = (($172) + ($173)|0);
      $175 = HEAP8[$174>>0]|0;
      $176 = $175&255;
      $177 = ($176|0)!=(0);
      $178 = $12;
      $179 = (($178) + 1)|0;
      $12 = $179;
      if (!($177)) {
       break L61;
      }
     }
     $180 = $12;
     $181 = (($180) + 1)|0;
     $12 = $181;
    }
   } while(0);
   $182 = ((($3)) + 3|0);
   $183 = HEAP8[$182>>0]|0;
   $184 = $183&255;
   $185 = $184 & 16;
   $186 = ($185|0)!=(0);
   L67: do {
    if ($186) {
     while(1) {
      $187 = $12;
      $188 = $5;
      $189 = ($187|0)<($188|0);
      if (!($189)) {
       break;
      }
      $190 = $11;
      $191 = $12;
      $192 = (($190) + ($191)|0);
      $193 = HEAP8[$192>>0]|0;
      $194 = $193&255;
      $195 = ($194|0)!=(0);
      $196 = $12;
      $197 = (($196) + 1)|0;
      $12 = $197;
      if (!($195)) {
       break L67;
      }
     }
     $198 = $12;
     $199 = (($198) + 1)|0;
     $12 = $199;
    }
   } while(0);
   $200 = ((($3)) + 3|0);
   $201 = HEAP8[$200>>0]|0;
   $202 = $201&255;
   $203 = $202 & 2;
   $204 = ($203|0)!=(0);
   if ($204) {
    $205 = $12;
    $206 = (($205) + 2)|0;
    $12 = $206;
   }
   $207 = $12;
   $208 = $5;
   $209 = ($207|0)>=($208|0);
   $210 = $2;
   $211 = HEAP32[$210>>2]|0;
   if ($209) {
    $212 = $211 & 65535;
    $213 = $212 | 2;
    $214 = HEAP32[$210>>2]|0;
    $215 = $213 & 65535;
    $216 = $214 & -65536;
    $217 = $216 | $215;
    HEAP32[$210>>2] = $217;
    $1 = -1;
    $381 = $1;
    STACKTOP = sp;return ($381|0);
   }
   $218 = $211 & 2147483647;
   $219 = $218 | -2147483648;
   HEAP32[$210>>2] = $219;
   $220 = (_calloc(1,56)|0);
   $221 = $2;
   $222 = ((($221)) + 60|0);
   HEAP32[$222>>2] = $220;
   $223 = $2;
   $224 = ((($223)) + 60|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = (_inflateInit2_($225,-15,14925,56)|0);
   $13 = $226;
   $227 = $13;
   $228 = ($227|0)!=(0);
   if ($228) {
    $229 = (3)>=(1);
    if ($229) {
     $230 = HEAP32[2398]|0;
     $231 = $13;
     $232 = $2;
     $233 = ((($232)) + 60|0);
     $234 = HEAP32[$233>>2]|0;
     $235 = (_bgzf_zerr($231,$234)|0);
     HEAP32[$vararg_buffer>>2] = 15341;
     $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr2>>2] = $235;
     (_fprintf($230,15309,$vararg_buffer)|0);
    }
    $236 = $2;
    $237 = HEAP32[$236>>2]|0;
    $238 = $237 & 65535;
    $239 = $238 | 1;
    $240 = HEAP32[$236>>2]|0;
    $241 = $239 & 65535;
    $242 = $240 & -65536;
    $243 = $242 | $241;
    HEAP32[$236>>2] = $243;
    $1 = -1;
    $381 = $1;
    STACKTOP = sp;return ($381|0);
   }
   $244 = $5;
   $245 = $12;
   $246 = (($244) - ($245))|0;
   $247 = $2;
   $248 = ((($247)) + 60|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = ((($249)) + 4|0);
   HEAP32[$250>>2] = $246;
   $251 = $11;
   $252 = $12;
   $253 = (($251) + ($252)|0);
   $254 = $2;
   $255 = ((($254)) + 60|0);
   $256 = HEAP32[$255>>2]|0;
   HEAP32[$256>>2] = $253;
   $257 = $2;
   $258 = (_inflate_gzip_block($257,1)|0);
   $5 = $258;
   $259 = $5;
   $260 = ($259|0)<(0);
   if ($260) {
    $261 = $2;
    $262 = HEAP32[$261>>2]|0;
    $263 = $262 & 65535;
    $264 = $263 | 1;
    $265 = HEAP32[$261>>2]|0;
    $266 = $264 & 65535;
    $267 = $265 & -65536;
    $268 = $267 | $266;
    HEAP32[$261>>2] = $268;
    $1 = -1;
    $381 = $1;
    STACKTOP = sp;return ($381|0);
   }
   $269 = $5;
   $270 = $2;
   $271 = ((($270)) + 8|0);
   HEAP32[$271>>2] = $269;
   $272 = $9;
   $273 = $272;
   $274 = HEAP32[$273>>2]|0;
   $275 = (($272) + 4)|0;
   $276 = $275;
   $277 = HEAP32[$276>>2]|0;
   $278 = $2;
   $279 = ((($278)) + 16|0);
   $280 = $279;
   $281 = $280;
   HEAP32[$281>>2] = $274;
   $282 = (($280) + 4)|0;
   $283 = $282;
   HEAP32[$283>>2] = $277;
   $284 = $2;
   $285 = ((($284)) + 56|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = ($286|0)!=(0);
   if ($287) {
    $1 = -1;
    $381 = $1;
    STACKTOP = sp;return ($381|0);
   } else {
    $1 = 0;
    $381 = $1;
    STACKTOP = sp;return ($381|0);
   }
  }
 }
 $131 = $2;
 $132 = HEAP32[$131>>2]|0;
 $133 = $132 & 65535;
 $134 = $133 | 2;
 $135 = HEAP32[$131>>2]|0;
 $136 = $134 & 65535;
 $137 = $135 & -65536;
 $138 = $137 | $136;
 HEAP32[$131>>2] = $138;
 $1 = -1;
 $381 = $1;
 STACKTOP = sp;return ($381|0);
}
function _hread_445($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $9;
 $14 = $12;
 $15 = (($13) - ($14))|0;
 $6 = $15;
 $16 = $6;
 $17 = $5;
 $18 = ($16>>>0)>($17>>>0);
 if ($18) {
  $19 = $5;
  $6 = $19;
 }
 $20 = $4;
 $21 = $3;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $6;
 _memcpy(($20|0),($23|0),($24|0))|0;
 $25 = $6;
 $26 = $3;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($25)|0);
 HEAP32[$27>>2] = $29;
 $30 = $6;
 $31 = $5;
 $32 = ($30|0)==($31|0);
 if ($32) {
  $33 = $6;
  $39 = $33;
  STACKTOP = sp;return ($39|0);
 } else {
  $34 = $3;
  $35 = $4;
  $36 = $5;
  $37 = $6;
  $38 = (_hread2($34,$35,$36,$37)|0);
  $39 = $38;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _htell_446($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = $7;
 $11 = $9;
 $12 = (($10) - ($11))|0;
 $13 = (($4) + ($12))|0;
 STACKTOP = sp;return ($13|0);
}
function _inflate_gzip_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = 0;
 L1: while(1) {
  $7 = $4;
  $8 = ($7|0)!=(0);
  if ($8) {
   label = 8;
  } else {
   $9 = $3;
   $10 = ((($9)) + 60|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 16|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)!=(0);
   if ($14) {
    $15 = $3;
    $16 = ((($15)) + 44|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $3;
    $19 = ((($18)) + 36|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (_hread_445($17,$20,65280)|0);
    $22 = $3;
    $23 = ((($22)) + 60|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($24)) + 4|0);
    HEAP32[$25>>2] = $21;
    $26 = $3;
    $27 = ((($26)) + 60|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ((($28)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30>>>0)<=(0);
    $32 = $3;
    $33 = ((($32)) + 60|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($34)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    if ($31) {
     label = 5;
     break;
    }
    $37 = ($36|0)==(0);
    if ($37) {
     label = 20;
     break;
    }
    $38 = $3;
    $39 = ((($38)) + 36|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $3;
    $42 = ((($41)) + 60|0);
    $43 = HEAP32[$42>>2]|0;
    HEAP32[$43>>2] = $40;
   } else {
    label = 8;
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $4 = 0;
  }
  while(1) {
   $44 = $3;
   $45 = ((($44)) + 32|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $3;
   $48 = ((($47)) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($46) + ($49)|0);
   $51 = $3;
   $52 = ((($51)) + 60|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ((($53)) + 12|0);
   HEAP32[$54>>2] = $50;
   $55 = $3;
   $56 = ((($55)) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (65536 - ($57))|0;
   $59 = $3;
   $60 = ((($59)) + 60|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ((($61)) + 16|0);
   HEAP32[$62>>2] = $58;
   $63 = $3;
   $64 = ((($63)) + 60|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($65)) + 24|0);
   HEAP32[$66>>2] = 0;
   $67 = $3;
   $68 = ((($67)) + 60|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (_inflate($69,0)|0);
   $5 = $70;
   $71 = $5;
   $72 = ($71|0)==(-5);
   if (!($72)) {
    $73 = $5;
    $74 = ($73|0)<(0);
    if ($74) {
     label = 11;
     break L1;
    }
    $93 = $3;
    $94 = ((($93)) + 60|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ((($95)) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (65536 - ($97))|0;
    $6 = $98;
    $99 = $6;
    $100 = ($99|0)!=(0);
    if ($100) {
     label = 17;
     break L1;
    }
   }
   $102 = $3;
   $103 = ((($102)) + 60|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ((($104)) + 16|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ($106|0)==(0);
   if (!($107)) {
    break;
   }
  }
  $108 = $5;
  $109 = ($108|0)!=(1);
  if (!($109)) {
   label = 20;
   break;
  }
 }
 if ((label|0) == 5) {
  $2 = $36;
  $116 = $2;
  STACKTOP = sp;return ($116|0);
 }
 else if ((label|0) == 11) {
  $75 = (3)>=(1);
  if ($75) {
   $76 = HEAP32[2398]|0;
   $77 = $5;
   $78 = $5;
   $79 = ($78|0)==(-3);
   if ($79) {
    $80 = $3;
    $81 = ((($80)) + 60|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $82;
   } else {
    $83 = 0;
   }
   $84 = (_bgzf_zerr($77,$83)|0);
   HEAP32[$vararg_buffer>>2] = 15520;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $84;
   (_fprintf($76,15436,$vararg_buffer)|0);
  }
  $85 = $3;
  $86 = HEAP32[$85>>2]|0;
  $87 = $86 & 65535;
  $88 = $87 | 1;
  $89 = HEAP32[$85>>2]|0;
  $90 = $88 & 65535;
  $91 = $89 & -65536;
  $92 = $91 | $90;
  HEAP32[$85>>2] = $92;
  $2 = -1;
  $116 = $2;
  STACKTOP = sp;return ($116|0);
 }
 else if ((label|0) == 17) {
  $101 = $6;
  $2 = $101;
  $116 = $2;
  STACKTOP = sp;return ($116|0);
 }
 else if ((label|0) == 20) {
  $110 = $3;
  $111 = ((($110)) + 60|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ((($112)) + 16|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (65536 - ($114))|0;
  $2 = $115;
  $116 = $2;
  STACKTOP = sp;return ($116|0);
 }
 return (0)|0;
}
function _load_block_from_cache($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp + 8|0;
 $5 = sp;
 $4 = $0;
 $9 = $5;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $2;
 $13 = $4;
 $14 = ((($13)) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $8 = $15;
 $16 = $8;
 $17 = $5;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (_kh_get_cache($16,$19,$22)|0);
 $6 = $23;
 $24 = $6;
 $25 = $8;
 $26 = HEAP32[$25>>2]|0;
 $27 = ($24|0)==($26|0);
 if ($27) {
  $3 = 0;
  $89 = $3;
  STACKTOP = sp;return ($89|0);
 }
 $28 = $8;
 $29 = ((($28)) + 24|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $6;
 $32 = (($30) + ($31<<4)|0);
 $7 = $32;
 $33 = $4;
 $34 = ((($33)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $4;
  $38 = ((($37)) + 12|0);
  HEAP32[$38>>2] = 0;
 }
 $39 = $5;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + 4)|0;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = $4;
 $46 = ((($45)) + 16|0);
 $47 = $46;
 $48 = $47;
 HEAP32[$48>>2] = $41;
 $49 = (($47) + 4)|0;
 $50 = $49;
 HEAP32[$50>>2] = $44;
 $51 = $7;
 $52 = HEAP32[$51>>2]|0;
 $53 = $4;
 $54 = ((($53)) + 8|0);
 HEAP32[$54>>2] = $52;
 $55 = $4;
 $56 = ((($55)) + 32|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $7;
 $59 = ((($58)) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 _memcpy(($57|0),($60|0),65536)|0;
 $61 = $4;
 $62 = ((($61)) + 44|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $7;
 $65 = ((($64)) + 8|0);
 $66 = $65;
 $67 = $66;
 $68 = HEAP32[$67>>2]|0;
 $69 = (($66) + 4)|0;
 $70 = $69;
 $71 = HEAP32[$70>>2]|0;
 $72 = (_hseek($63,$68,0)|0);
 $73 = ($72|0)<(0);
 if ($73) {
  $74 = HEAP32[2398]|0;
  $75 = $7;
  $76 = ((($75)) + 8|0);
  $77 = $76;
  $78 = $77;
  $79 = HEAP32[$78>>2]|0;
  $80 = (($77) + 4)|0;
  $81 = $80;
  $82 = HEAP32[$81>>2]|0;
  $83 = $vararg_buffer;
  $84 = $83;
  HEAP32[$84>>2] = $79;
  $85 = (($83) + 4)|0;
  $86 = $85;
  HEAP32[$86>>2] = $82;
  (_fprintf($74,15495,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $87 = $7;
 $88 = HEAP32[$87>>2]|0;
 $3 = $88;
 $89 = $3;
 STACKTOP = sp;return ($89|0);
}
function _check_header($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)!=(31);
 if (!($6)) {
  $7 = $2;
  $8 = ((($7)) + 1|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = ($10|0)!=(139);
  if (!($11)) {
   $12 = $2;
   $13 = ((($12)) + 2|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14&255;
   $16 = ($15|0)!=(8);
   if (!($16)) {
    $17 = $2;
    $18 = ((($17)) + 3|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19&255;
    $21 = $20 & 4;
    $22 = ($21|0)!=(0);
    if ($22) {
     $23 = $2;
     $24 = ((($23)) + 10|0);
     $25 = (_unpackInt16($24)|0);
     $26 = ($25|0)==(6);
     if ($26) {
      $27 = $2;
      $28 = ((($27)) + 12|0);
      $29 = HEAP8[$28>>0]|0;
      $30 = $29&255;
      $31 = ($30|0)==(66);
      if ($31) {
       $32 = $2;
       $33 = ((($32)) + 13|0);
       $34 = HEAP8[$33>>0]|0;
       $35 = $34&255;
       $36 = ($35|0)==(67);
       if ($36) {
        $37 = $2;
        $38 = ((($37)) + 14|0);
        $39 = (_unpackInt16($38)|0);
        $40 = ($39|0)==(2);
        $41 = $40;
       } else {
        $41 = 0;
       }
      } else {
       $41 = 0;
      }
     } else {
      $41 = 0;
     }
    } else {
     $41 = 0;
    }
    $42 = $41 ? 0 : -1;
    $1 = $42;
    $43 = $1;
    STACKTOP = sp;return ($43|0);
   }
  }
 }
 $1 = -2;
 $43 = $1;
 STACKTOP = sp;return ($43|0);
}
function _unpackInt16($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $1;
 $6 = ((($5)) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 << 8;
 $10 = $4 | $9;
 STACKTOP = sp;return ($10|0);
}
function _inflate_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = sp + 40|0;
 $3 = $0;
 $4 = $1;
 $7 = ((($5)) + 32|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($5)) + 36|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($5)) + 24|0);
 HEAP32[$9>>2] = 0;
 $10 = $3;
 $11 = ((($10)) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 18|0);
 HEAP32[$5>>2] = $13;
 $14 = $4;
 $15 = (($14) - 16)|0;
 $16 = ((($5)) + 4|0);
 HEAP32[$16>>2] = $15;
 $17 = $3;
 $18 = ((($17)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($5)) + 12|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($5)) + 16|0);
 HEAP32[$21>>2] = 65536;
 $22 = (_inflateInit2_($5,-15,14925,56)|0);
 $6 = $22;
 $23 = $6;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = (3)>=(1);
  if ($25) {
   $26 = HEAP32[2398]|0;
   $27 = $6;
   $28 = (_bgzf_zerr($27,$5)|0);
   HEAP32[$vararg_buffer>>2] = 15422;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $28;
   (_fprintf($26,15389,$vararg_buffer)|0);
  }
  $29 = $3;
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 & 65535;
  $32 = $31 | 1;
  $33 = HEAP32[$29>>2]|0;
  $34 = $32 & 65535;
  $35 = $33 & -65536;
  $36 = $35 | $34;
  HEAP32[$29>>2] = $36;
  $2 = -1;
  $75 = $2;
  STACKTOP = sp;return ($75|0);
 }
 $37 = (_inflate($5,4)|0);
 $6 = $37;
 $38 = ($37|0)!=(1);
 if ($38) {
  $39 = (3)>=(1);
  if ($39) {
   $40 = HEAP32[2398]|0;
   $41 = $6;
   $42 = $6;
   $43 = ($42|0)==(-3);
   $$ = $43 ? $5 : 0;
   $44 = (_bgzf_zerr($41,$$)|0);
   HEAP32[$vararg_buffer2>>2] = 15422;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $44;
   (_fprintf($40,15436,$vararg_buffer2)|0);
  }
  $45 = (_inflateEnd($5)|0);
  $6 = $45;
  $46 = ($45|0)!=(0);
  $47 = (3)>=(2);
  $or$cond = $46 & $47;
  if ($or$cond) {
   $48 = HEAP32[2398]|0;
   $49 = $6;
   $50 = (_bgzf_zerr($49,0)|0);
   HEAP32[$vararg_buffer6>>2] = 15422;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $50;
   (_fprintf($48,15464,$vararg_buffer6)|0);
  }
  $51 = $3;
  $52 = HEAP32[$51>>2]|0;
  $53 = $52 & 65535;
  $54 = $53 | 1;
  $55 = HEAP32[$51>>2]|0;
  $56 = $54 & 65535;
  $57 = $55 & -65536;
  $58 = $57 | $56;
  HEAP32[$51>>2] = $58;
  $2 = -1;
  $75 = $2;
  STACKTOP = sp;return ($75|0);
 }
 $59 = (_inflateEnd($5)|0);
 $6 = $59;
 $60 = ($59|0)!=(0);
 if (!($60)) {
  $73 = ((($5)) + 20|0);
  $74 = HEAP32[$73>>2]|0;
  $2 = $74;
  $75 = $2;
  STACKTOP = sp;return ($75|0);
 }
 $61 = (3)>=(1);
 if ($61) {
  $62 = HEAP32[2398]|0;
  $63 = $6;
  $64 = (_bgzf_zerr($63,0)|0);
  HEAP32[$vararg_buffer10>>2] = 15422;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $64;
  (_fprintf($62,15464,$vararg_buffer10)|0);
 }
 $65 = $3;
 $66 = HEAP32[$65>>2]|0;
 $67 = $66 & 65535;
 $68 = $67 | 1;
 $69 = HEAP32[$65>>2]|0;
 $70 = $68 & 65535;
 $71 = $69 & -65536;
 $72 = $71 | $70;
 HEAP32[$65>>2] = $72;
 $2 = -1;
 $75 = $2;
 STACKTOP = sp;return ($75|0);
}
function _bgzf_index_add_block($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$5>>2] = $7;
 $8 = $2;
 $9 = ((($8)) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = ((($12)) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($11|0)>($16|0);
 if ($17) {
  $18 = $2;
  $19 = ((($18)) + 52|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  $22 = $2;
  $23 = ((($22)) + 52|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 4|0);
  HEAP32[$25>>2] = $21;
  $26 = $2;
  $27 = ((($26)) + 52|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -1)|0;
  HEAP32[$29>>2] = $31;
  $32 = $2;
  $33 = ((($32)) + 52|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $36 >> 1;
  $38 = $2;
  $39 = ((($38)) + 52|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $42 | $37;
  HEAP32[$41>>2] = $43;
  $44 = $2;
  $45 = ((($44)) + 52|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $48 >> 2;
  $50 = $2;
  $51 = ((($50)) + 52|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $54 | $49;
  HEAP32[$53>>2] = $55;
  $56 = $2;
  $57 = ((($56)) + 52|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($58)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $60 >> 4;
  $62 = $2;
  $63 = ((($62)) + 52|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $66 | $61;
  HEAP32[$65>>2] = $67;
  $68 = $2;
  $69 = ((($68)) + 52|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($70)) + 4|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $72 >> 8;
  $74 = $2;
  $75 = ((($74)) + 52|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($76)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $78 | $73;
  HEAP32[$77>>2] = $79;
  $80 = $2;
  $81 = ((($80)) + 52|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ((($82)) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $84 >> 16;
  $86 = $2;
  $87 = ((($86)) + 52|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ((($88)) + 4|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $90 | $85;
  HEAP32[$89>>2] = $91;
  $92 = $2;
  $93 = ((($92)) + 52|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ((($94)) + 4|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) + 1)|0;
  HEAP32[$95>>2] = $97;
  $98 = $2;
  $99 = ((($98)) + 52|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ((($100)) + 8|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $2;
  $104 = ((($103)) + 52|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ((($105)) + 4|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = $107<<4;
  $109 = (_realloc($102,$108)|0);
  $110 = $2;
  $111 = ((($110)) + 52|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ((($112)) + 8|0);
  HEAP32[$113>>2] = $109;
  $114 = $2;
  $115 = ((($114)) + 52|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ((($116)) + 8|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ($118|0)!=(0|0);
  if (!($119)) {
   $1 = -1;
   $169 = $1;
   STACKTOP = sp;return ($169|0);
  }
 }
 $120 = $2;
 $121 = ((($120)) + 52|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ((($122)) + 16|0);
 $124 = $123;
 $125 = $124;
 $126 = HEAP32[$125>>2]|0;
 $127 = (($124) + 4)|0;
 $128 = $127;
 $129 = HEAP32[$128>>2]|0;
 $130 = $2;
 $131 = ((($130)) + 52|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = ((($132)) + 8|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = $2;
 $136 = ((($135)) + 52|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = HEAP32[$137>>2]|0;
 $139 = (($138) - 1)|0;
 $140 = (($134) + ($139<<4)|0);
 $141 = $140;
 $142 = $141;
 HEAP32[$142>>2] = $126;
 $143 = (($141) + 4)|0;
 $144 = $143;
 HEAP32[$144>>2] = $129;
 $145 = $2;
 $146 = ((($145)) + 16|0);
 $147 = $146;
 $148 = $147;
 $149 = HEAP32[$148>>2]|0;
 $150 = (($147) + 4)|0;
 $151 = $150;
 $152 = HEAP32[$151>>2]|0;
 $153 = $2;
 $154 = ((($153)) + 52|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = ((($155)) + 8|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = $2;
 $159 = ((($158)) + 52|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = HEAP32[$160>>2]|0;
 $162 = (($161) - 1)|0;
 $163 = (($157) + ($162<<4)|0);
 $164 = ((($163)) + 8|0);
 $165 = $164;
 $166 = $165;
 HEAP32[$166>>2] = $149;
 $167 = (($165) + 4)|0;
 $168 = $167;
 HEAP32[$168>>2] = $152;
 $1 = 0;
 $169 = $1;
 STACKTOP = sp;return ($169|0);
}
function _cache_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 12|0;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = ((($8)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $7 = $10;
 $11 = $2;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (65536)>=($13|0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = $7;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 1)|0;
 $19 = $18<<16;
 $20 = $2;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($19>>>0)>($22>>>0);
 if ($23) {
  $5 = 0;
  while(1) {
   $24 = $5;
   $25 = $7;
   $26 = HEAP32[$25>>2]|0;
   $27 = ($24>>>0)<($26>>>0);
   if (!($27)) {
    break;
   }
   $28 = $7;
   $29 = ((($28)) + 16|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $5;
   $32 = $31 >>> 4;
   $33 = (($30) + ($32<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $5;
   $36 = $35 & 15;
   $37 = $36 << 1;
   $38 = $34 >>> $37;
   $39 = $38 & 3;
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $41 = $5;
   $42 = (($41) + 1)|0;
   $5 = $42;
  }
  $43 = $5;
  $44 = $7;
  $45 = HEAP32[$44>>2]|0;
  $46 = ($43>>>0)<($45>>>0);
  if ($46) {
   $47 = $7;
   $48 = ((($47)) + 24|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $5;
   $51 = (($49) + ($50<<4)|0);
   $52 = ((($51)) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   _free($53);
   $54 = $7;
   $55 = $5;
   _kh_del_cache($54,$55);
  }
 }
 $56 = $7;
 $57 = $2;
 $58 = ((($57)) + 16|0);
 $59 = $58;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = (($59) + 4)|0;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = (_kh_put_cache($56,$61,$64,$4)|0);
 $5 = $65;
 $66 = HEAP32[$4>>2]|0;
 $67 = ($66|0)==(0);
 if ($67) {
  STACKTOP = sp;return;
 }
 $68 = $7;
 $69 = ((($68)) + 24|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $5;
 $72 = (($70) + ($71<<4)|0);
 $6 = $72;
 $73 = $2;
 $74 = ((($73)) + 8|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $6;
 HEAP32[$76>>2] = $75;
 $77 = $2;
 $78 = ((($77)) + 16|0);
 $79 = $78;
 $80 = $79;
 $81 = HEAP32[$80>>2]|0;
 $82 = (($79) + 4)|0;
 $83 = $82;
 $84 = HEAP32[$83>>2]|0;
 $85 = $3;
 $86 = ($85|0)<(0);
 $87 = $86 << 31 >> 31;
 $88 = (_i64Add(($81|0),($84|0),($85|0),($87|0))|0);
 $89 = tempRet0;
 $90 = $6;
 $91 = ((($90)) + 8|0);
 $92 = $91;
 $93 = $92;
 HEAP32[$93>>2] = $88;
 $94 = (($92) + 4)|0;
 $95 = $94;
 HEAP32[$95>>2] = $89;
 $96 = (_malloc(65536)|0);
 $97 = $6;
 $98 = ((($97)) + 4|0);
 HEAP32[$98>>2] = $96;
 $99 = $7;
 $100 = ((($99)) + 24|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = $5;
 $103 = (($101) + ($102<<4)|0);
 $104 = ((($103)) + 4|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = $2;
 $107 = ((($106)) + 32|0);
 $108 = HEAP32[$107>>2]|0;
 _memcpy(($105|0),($108|0),65536)|0;
 STACKTOP = sp;return;
}
function _kh_del_cache($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)!=($6|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $2;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $3;
 $12 = $11 >>> 4;
 $13 = (($10) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 $16 = $15 & 15;
 $17 = $16 << 1;
 $18 = $14 >>> $17;
 $19 = $18 & 3;
 $20 = ($19|0)!=(0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $21 = $3;
 $22 = $21 & 15;
 $23 = $22 << 1;
 $24 = 1 << $23;
 $25 = $2;
 $26 = ((($25)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $3;
 $29 = $28 >>> 4;
 $30 = (($27) + ($29<<2)|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 | $24;
 HEAP32[$30>>2] = $32;
 $33 = $2;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + -1)|0;
 HEAP32[$34>>2] = $36;
 STACKTOP = sp;return;
}
function _kh_put_cache($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp;
 $5 = $0;
 $15 = $6;
 $16 = $15;
 HEAP32[$16>>2] = $1;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $2;
 $7 = $3;
 $19 = $5;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $5;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($21>>>0)>=($24>>>0);
 do {
  if ($25) {
   $26 = $5;
   $27 = HEAP32[$26>>2]|0;
   $28 = $5;
   $29 = ((($28)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $30 << 1;
   $32 = ($27>>>0)>($31>>>0);
   $33 = $5;
   $34 = $5;
   $35 = HEAP32[$34>>2]|0;
   if ($32) {
    $36 = (($35) - 1)|0;
    $37 = (_kh_resize_cache($33,$36)|0);
    $38 = ($37|0)<(0);
    if (!($38)) {
     break;
    }
    $39 = $7;
    HEAP32[$39>>2] = -1;
    $40 = $5;
    $41 = HEAP32[$40>>2]|0;
    $4 = $41;
    $287 = $4;
    STACKTOP = sp;return ($287|0);
   } else {
    $42 = (($35) + 1)|0;
    $43 = (_kh_resize_cache($33,$42)|0);
    $44 = ($43|0)<(0);
    if (!($44)) {
     break;
    }
    $45 = $7;
    HEAP32[$45>>2] = -1;
    $46 = $5;
    $47 = HEAP32[$46>>2]|0;
    $4 = $47;
    $287 = $4;
    STACKTOP = sp;return ($287|0);
   }
  }
 } while(0);
 $48 = $5;
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) - 1)|0;
 $13 = $50;
 $14 = 0;
 $51 = $5;
 $52 = HEAP32[$51>>2]|0;
 $11 = $52;
 $8 = $52;
 $53 = $6;
 $54 = $53;
 $55 = HEAP32[$54>>2]|0;
 $56 = (($53) + 4)|0;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = (_bitshift64Lshr(($55|0),($58|0),33)|0);
 $60 = tempRet0;
 $61 = $6;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + 4)|0;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = $59 ^ $63;
 $68 = $60 ^ $66;
 $69 = $6;
 $70 = $69;
 $71 = HEAP32[$70>>2]|0;
 $72 = (($69) + 4)|0;
 $73 = $72;
 $74 = HEAP32[$73>>2]|0;
 $75 = (_bitshift64Shl(($71|0),($74|0),11)|0);
 $76 = tempRet0;
 $77 = $67 ^ $75;
 $68 ^ $76;
 $9 = $77;
 $78 = $9;
 $79 = $13;
 $80 = $78 & $79;
 $10 = $80;
 $81 = $5;
 $82 = ((($81)) + 16|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $10;
 $85 = $84 >>> 4;
 $86 = (($83) + ($85<<2)|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $10;
 $89 = $88 & 15;
 $90 = $89 << 1;
 $91 = $87 >>> $90;
 $92 = $91 & 2;
 $93 = ($92|0)!=(0);
 $94 = $10;
 do {
  if ($93) {
   $8 = $94;
  } else {
   $12 = $94;
   while(1) {
    $95 = $5;
    $96 = ((($95)) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = $10;
    $99 = $98 >>> 4;
    $100 = (($97) + ($99<<2)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $10;
    $103 = $102 & 15;
    $104 = $103 << 1;
    $105 = $101 >>> $104;
    $106 = $105 & 2;
    $107 = ($106|0)!=(0);
    if ($107) {
     break;
    }
    $108 = $5;
    $109 = ((($108)) + 16|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = $10;
    $112 = $111 >>> 4;
    $113 = (($110) + ($112<<2)|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = $10;
    $116 = $115 & 15;
    $117 = $116 << 1;
    $118 = $114 >>> $117;
    $119 = $118 & 1;
    $120 = ($119|0)!=(0);
    if (!($120)) {
     $121 = $5;
     $122 = ((($121)) + 20|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = $10;
     $125 = (($123) + ($124<<3)|0);
     $126 = $125;
     $127 = $126;
     $128 = HEAP32[$127>>2]|0;
     $129 = (($126) + 4)|0;
     $130 = $129;
     $131 = HEAP32[$130>>2]|0;
     $132 = $6;
     $133 = $132;
     $134 = HEAP32[$133>>2]|0;
     $135 = (($132) + 4)|0;
     $136 = $135;
     $137 = HEAP32[$136>>2]|0;
     $138 = ($128|0)==($134|0);
     $139 = ($131|0)==($137|0);
     $140 = $138 & $139;
     $141 = $140 ^ 1;
     if (!($141)) {
      break;
     }
    }
    $142 = $5;
    $143 = ((($142)) + 16|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = $10;
    $146 = $145 >>> 4;
    $147 = (($144) + ($146<<2)|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = $10;
    $150 = $149 & 15;
    $151 = $150 << 1;
    $152 = $148 >>> $151;
    $153 = $152 & 1;
    $154 = ($153|0)!=(0);
    if ($154) {
     $155 = $10;
     $11 = $155;
    }
    $156 = $10;
    $157 = $14;
    $158 = (($157) + 1)|0;
    $14 = $158;
    $159 = (($156) + ($158))|0;
    $160 = $13;
    $161 = $159 & $160;
    $10 = $161;
    $162 = $10;
    $163 = $12;
    $164 = ($162|0)==($163|0);
    if ($164) {
     label = 16;
     break;
    }
   }
   if ((label|0) == 16) {
    $165 = $11;
    $8 = $165;
   }
   $166 = $8;
   $167 = $5;
   $168 = HEAP32[$167>>2]|0;
   $169 = ($166|0)==($168|0);
   if ($169) {
    $170 = $5;
    $171 = ((($170)) + 16|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = $10;
    $174 = $173 >>> 4;
    $175 = (($172) + ($174<<2)|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = $10;
    $178 = $177 & 15;
    $179 = $178 << 1;
    $180 = $176 >>> $179;
    $181 = $180 & 2;
    $182 = ($181|0)!=(0);
    if ($182) {
     $183 = $11;
     $184 = $5;
     $185 = HEAP32[$184>>2]|0;
     $186 = ($183|0)!=($185|0);
     if ($186) {
      $187 = $11;
      $8 = $187;
      break;
     }
    }
    $188 = $10;
    $8 = $188;
   }
  }
 } while(0);
 $189 = $5;
 $190 = ((($189)) + 16|0);
 $191 = HEAP32[$190>>2]|0;
 $192 = $8;
 $193 = $192 >>> 4;
 $194 = (($191) + ($193<<2)|0);
 $195 = HEAP32[$194>>2]|0;
 $196 = $8;
 $197 = $196 & 15;
 $198 = $197 << 1;
 $199 = $195 >>> $198;
 $200 = $199 & 2;
 $201 = ($200|0)!=(0);
 do {
  if ($201) {
   $202 = $6;
   $203 = $202;
   $204 = HEAP32[$203>>2]|0;
   $205 = (($202) + 4)|0;
   $206 = $205;
   $207 = HEAP32[$206>>2]|0;
   $208 = $5;
   $209 = ((($208)) + 20|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = $8;
   $212 = (($210) + ($211<<3)|0);
   $213 = $212;
   $214 = $213;
   HEAP32[$214>>2] = $204;
   $215 = (($213) + 4)|0;
   $216 = $215;
   HEAP32[$216>>2] = $207;
   $217 = $8;
   $218 = $217 & 15;
   $219 = $218 << 1;
   $220 = 3 << $219;
   $221 = $220 ^ -1;
   $222 = $5;
   $223 = ((($222)) + 16|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = $8;
   $226 = $225 >>> 4;
   $227 = (($224) + ($226<<2)|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = $228 & $221;
   HEAP32[$227>>2] = $229;
   $230 = $5;
   $231 = ((($230)) + 4|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = (($232) + 1)|0;
   HEAP32[$231>>2] = $233;
   $234 = $5;
   $235 = ((($234)) + 8|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = (($236) + 1)|0;
   HEAP32[$235>>2] = $237;
   $238 = $7;
   HEAP32[$238>>2] = 1;
  } else {
   $239 = $5;
   $240 = ((($239)) + 16|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = $8;
   $243 = $242 >>> 4;
   $244 = (($241) + ($243<<2)|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = $8;
   $247 = $246 & 15;
   $248 = $247 << 1;
   $249 = $245 >>> $248;
   $250 = $249 & 1;
   $251 = ($250|0)!=(0);
   if ($251) {
    $252 = $6;
    $253 = $252;
    $254 = HEAP32[$253>>2]|0;
    $255 = (($252) + 4)|0;
    $256 = $255;
    $257 = HEAP32[$256>>2]|0;
    $258 = $5;
    $259 = ((($258)) + 20|0);
    $260 = HEAP32[$259>>2]|0;
    $261 = $8;
    $262 = (($260) + ($261<<3)|0);
    $263 = $262;
    $264 = $263;
    HEAP32[$264>>2] = $254;
    $265 = (($263) + 4)|0;
    $266 = $265;
    HEAP32[$266>>2] = $257;
    $267 = $8;
    $268 = $267 & 15;
    $269 = $268 << 1;
    $270 = 3 << $269;
    $271 = $270 ^ -1;
    $272 = $5;
    $273 = ((($272)) + 16|0);
    $274 = HEAP32[$273>>2]|0;
    $275 = $8;
    $276 = $275 >>> 4;
    $277 = (($274) + ($276<<2)|0);
    $278 = HEAP32[$277>>2]|0;
    $279 = $278 & $271;
    HEAP32[$277>>2] = $279;
    $280 = $5;
    $281 = ((($280)) + 4|0);
    $282 = HEAP32[$281>>2]|0;
    $283 = (($282) + 1)|0;
    HEAP32[$281>>2] = $283;
    $284 = $7;
    HEAP32[$284>>2] = 2;
    break;
   } else {
    $285 = $7;
    HEAP32[$285>>2] = 0;
    break;
   }
  }
 } while(0);
 $286 = $8;
 $4 = $286;
 $287 = $4;
 STACKTOP = sp;return ($287|0);
}
function _kh_resize_cache($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$sink = 0, $$sink3 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $9 = sp + 40|0;
 $10 = sp + 24|0;
 $15 = sp + 16|0;
 $16 = sp;
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = 1;
 $17 = $4;
 $18 = (($17) + -1)|0;
 $4 = $18;
 $19 = $4;
 $20 = $19 >>> 1;
 $21 = $4;
 $22 = $21 | $20;
 $4 = $22;
 $23 = $4;
 $24 = $23 >>> 2;
 $25 = $4;
 $26 = $25 | $24;
 $4 = $26;
 $27 = $4;
 $28 = $27 >>> 4;
 $29 = $4;
 $30 = $29 | $28;
 $4 = $30;
 $31 = $4;
 $32 = $31 >>> 8;
 $33 = $4;
 $34 = $33 | $32;
 $4 = $34;
 $35 = $4;
 $36 = $35 >>> 16;
 $37 = $4;
 $38 = $37 | $36;
 $4 = $38;
 $39 = $4;
 $40 = (($39) + 1)|0;
 $4 = $40;
 $41 = $4;
 $42 = ($41>>>0)<(4);
 $$ = $42 ? 4 : $40;
 $4 = $$;
 $43 = $3;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $4;
 $47 = (+($46>>>0));
 $48 = $47 * 0.77000000000000001;
 $49 = $48 + 0.5;
 $50 = (~~(($49))>>>0);
 $51 = ($45>>>0)>=($50>>>0);
 do {
  if ($51) {
   $6 = 0;
  } else {
   $52 = $4;
   $53 = ($52>>>0)<(16);
   $54 = $4;
   $55 = $54 >>> 4;
   $56 = $53 ? 1 : $55;
   $57 = $56<<2;
   $58 = (_malloc($57)|0);
   $5 = $58;
   $59 = $5;
   $60 = ($59|0)!=(0|0);
   if (!($60)) {
    $2 = -1;
    $342 = $2;
    STACKTOP = sp;return ($342|0);
   }
   $61 = $5;
   $62 = $4;
   $63 = ($62>>>0)<(16);
   $64 = $4;
   $65 = $64 >>> 4;
   $66 = $63 ? 1 : $65;
   $67 = $66<<2;
   _memset(($61|0),-86,($67|0))|0;
   $68 = $3;
   $69 = HEAP32[$68>>2]|0;
   $70 = $4;
   $71 = ($69>>>0)<($70>>>0);
   if ($71) {
    $72 = $3;
    $73 = ((($72)) + 20|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $4;
    $76 = $75<<3;
    $77 = (_realloc($74,$76)|0);
    $7 = $77;
    $78 = $7;
    $79 = ($78|0)!=(0|0);
    if (!($79)) {
     $80 = $5;
     _free($80);
     $2 = -1;
     $342 = $2;
     STACKTOP = sp;return ($342|0);
    }
    $81 = $7;
    $82 = $3;
    $83 = ((($82)) + 20|0);
    HEAP32[$83>>2] = $81;
    $84 = $3;
    $85 = ((($84)) + 24|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $4;
    $88 = $87<<4;
    $89 = (_realloc($86,$88)|0);
    $8 = $89;
    $90 = $8;
    $91 = ($90|0)!=(0|0);
    if ($91) {
     $93 = $8;
     $94 = $3;
     $95 = ((($94)) + 24|0);
     HEAP32[$95>>2] = $93;
     break;
    }
    $92 = $5;
    _free($92);
    $2 = -1;
    $342 = $2;
    STACKTOP = sp;return ($342|0);
   }
  }
 } while(0);
 $96 = $6;
 $97 = ($96|0)!=(0);
 if ($97) {
  $6 = 0;
  while(1) {
   $98 = $6;
   $99 = $3;
   $100 = HEAP32[$99>>2]|0;
   $101 = ($98|0)!=($100|0);
   $102 = $3;
   if (!($101)) {
    break;
   }
   $103 = ((($102)) + 16|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $6;
   $106 = $105 >>> 4;
   $107 = (($104) + ($106<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $6;
   $110 = $109 & 15;
   $111 = $110 << 1;
   $112 = $108 >>> $111;
   $113 = $112 & 3;
   $114 = ($113|0)==(0);
   if ($114) {
    $115 = $3;
    $116 = ((($115)) + 20|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = $6;
    $119 = (($117) + ($118<<3)|0);
    $120 = $119;
    $121 = $120;
    $122 = HEAP32[$121>>2]|0;
    $123 = (($120) + 4)|0;
    $124 = $123;
    $125 = HEAP32[$124>>2]|0;
    $126 = $9;
    $127 = $126;
    HEAP32[$127>>2] = $122;
    $128 = (($126) + 4)|0;
    $129 = $128;
    HEAP32[$129>>2] = $125;
    $130 = $4;
    $131 = (($130) - 1)|0;
    $11 = $131;
    $132 = $3;
    $133 = ((($132)) + 24|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $6;
    $136 = (($134) + ($135<<4)|0);
    ;HEAP32[$10>>2]=HEAP32[$136>>2]|0;HEAP32[$10+4>>2]=HEAP32[$136+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$136+8>>2]|0;HEAP32[$10+12>>2]=HEAP32[$136+12>>2]|0;
    $137 = $6;
    $138 = $137 & 15;
    $139 = $138 << 1;
    $140 = 1 << $139;
    $141 = $3;
    $142 = ((($141)) + 16|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = $6;
    $$sink = $144;$$sink3 = $140;$$sink4 = $143;
    while(1) {
     $145 = $$sink >>> 4;
     $146 = (($$sink4) + ($145<<2)|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = $147 | $$sink3;
     HEAP32[$146>>2] = $148;
     $14 = 0;
     $149 = $9;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $152 = (($149) + 4)|0;
     $153 = $152;
     $154 = HEAP32[$153>>2]|0;
     $155 = (_bitshift64Lshr(($151|0),($154|0),33)|0);
     $156 = tempRet0;
     $157 = $9;
     $158 = $157;
     $159 = HEAP32[$158>>2]|0;
     $160 = (($157) + 4)|0;
     $161 = $160;
     $162 = HEAP32[$161>>2]|0;
     $163 = $155 ^ $159;
     $164 = $156 ^ $162;
     $165 = $9;
     $166 = $165;
     $167 = HEAP32[$166>>2]|0;
     $168 = (($165) + 4)|0;
     $169 = $168;
     $170 = HEAP32[$169>>2]|0;
     $171 = (_bitshift64Shl(($167|0),($170|0),11)|0);
     $172 = tempRet0;
     $173 = $163 ^ $171;
     $164 ^ $172;
     $12 = $173;
     $174 = $12;
     $175 = $11;
     $176 = $174 & $175;
     $13 = $176;
     while(1) {
      $177 = $5;
      $178 = $13;
      $179 = $178 >>> 4;
      $180 = (($177) + ($179<<2)|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = $13;
      $183 = $182 & 15;
      $184 = $183 << 1;
      $185 = $181 >>> $184;
      $186 = $185 & 2;
      $187 = ($186|0)!=(0);
      $188 = $187 ^ 1;
      $189 = $13;
      if (!($188)) {
       break;
      }
      $190 = $14;
      $191 = (($190) + 1)|0;
      $14 = $191;
      $192 = (($189) + ($191))|0;
      $193 = $11;
      $194 = $192 & $193;
      $13 = $194;
     }
     $195 = $189 & 15;
     $196 = $195 << 1;
     $197 = 2 << $196;
     $198 = $197 ^ -1;
     $199 = $5;
     $200 = $13;
     $201 = $200 >>> 4;
     $202 = (($199) + ($201<<2)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = $203 & $198;
     HEAP32[$202>>2] = $204;
     $205 = $13;
     $206 = $3;
     $207 = HEAP32[$206>>2]|0;
     $208 = ($205>>>0)<($207>>>0);
     if (!($208)) {
      break;
     }
     $209 = $3;
     $210 = ((($209)) + 16|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = $13;
     $213 = $212 >>> 4;
     $214 = (($211) + ($213<<2)|0);
     $215 = HEAP32[$214>>2]|0;
     $216 = $13;
     $217 = $216 & 15;
     $218 = $217 << 1;
     $219 = $215 >>> $218;
     $220 = $219 & 3;
     $221 = ($220|0)==(0);
     if (!($221)) {
      break;
     }
     $222 = $3;
     $223 = ((($222)) + 20|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = $13;
     $226 = (($224) + ($225<<3)|0);
     $227 = $226;
     $228 = $227;
     $229 = HEAP32[$228>>2]|0;
     $230 = (($227) + 4)|0;
     $231 = $230;
     $232 = HEAP32[$231>>2]|0;
     $233 = $15;
     $234 = $233;
     HEAP32[$234>>2] = $229;
     $235 = (($233) + 4)|0;
     $236 = $235;
     HEAP32[$236>>2] = $232;
     $237 = $9;
     $238 = $237;
     $239 = HEAP32[$238>>2]|0;
     $240 = (($237) + 4)|0;
     $241 = $240;
     $242 = HEAP32[$241>>2]|0;
     $243 = $3;
     $244 = ((($243)) + 20|0);
     $245 = HEAP32[$244>>2]|0;
     $246 = $13;
     $247 = (($245) + ($246<<3)|0);
     $248 = $247;
     $249 = $248;
     HEAP32[$249>>2] = $239;
     $250 = (($248) + 4)|0;
     $251 = $250;
     HEAP32[$251>>2] = $242;
     $252 = $15;
     $253 = $252;
     $254 = HEAP32[$253>>2]|0;
     $255 = (($252) + 4)|0;
     $256 = $255;
     $257 = HEAP32[$256>>2]|0;
     $258 = $9;
     $259 = $258;
     HEAP32[$259>>2] = $254;
     $260 = (($258) + 4)|0;
     $261 = $260;
     HEAP32[$261>>2] = $257;
     $262 = $3;
     $263 = ((($262)) + 24|0);
     $264 = HEAP32[$263>>2]|0;
     $265 = $13;
     $266 = (($264) + ($265<<4)|0);
     ;HEAP32[$16>>2]=HEAP32[$266>>2]|0;HEAP32[$16+4>>2]=HEAP32[$266+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$266+8>>2]|0;HEAP32[$16+12>>2]=HEAP32[$266+12>>2]|0;
     $267 = $3;
     $268 = ((($267)) + 24|0);
     $269 = HEAP32[$268>>2]|0;
     $270 = $13;
     $271 = (($269) + ($270<<4)|0);
     ;HEAP32[$271>>2]=HEAP32[$10>>2]|0;HEAP32[$271+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$271+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$271+12>>2]=HEAP32[$10+12>>2]|0;
     ;HEAP32[$10>>2]=HEAP32[$16>>2]|0;HEAP32[$10+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$10+12>>2]=HEAP32[$16+12>>2]|0;
     $272 = $13;
     $273 = $272 & 15;
     $274 = $273 << 1;
     $275 = 1 << $274;
     $276 = $3;
     $277 = ((($276)) + 16|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = $13;
     $$sink = $279;$$sink3 = $275;$$sink4 = $278;
    }
    $280 = $9;
    $281 = $280;
    $282 = HEAP32[$281>>2]|0;
    $283 = (($280) + 4)|0;
    $284 = $283;
    $285 = HEAP32[$284>>2]|0;
    $286 = $3;
    $287 = ((($286)) + 20|0);
    $288 = HEAP32[$287>>2]|0;
    $289 = $13;
    $290 = (($288) + ($289<<3)|0);
    $291 = $290;
    $292 = $291;
    HEAP32[$292>>2] = $282;
    $293 = (($291) + 4)|0;
    $294 = $293;
    HEAP32[$294>>2] = $285;
    $295 = $3;
    $296 = ((($295)) + 24|0);
    $297 = HEAP32[$296>>2]|0;
    $298 = $13;
    $299 = (($297) + ($298<<4)|0);
    ;HEAP32[$299>>2]=HEAP32[$10>>2]|0;HEAP32[$299+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$299+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$299+12>>2]=HEAP32[$10+12>>2]|0;
   }
   $300 = $6;
   $301 = (($300) + 1)|0;
   $6 = $301;
  }
  $302 = HEAP32[$102>>2]|0;
  $303 = $4;
  $304 = ($302>>>0)>($303>>>0);
  if ($304) {
   $305 = $3;
   $306 = ((($305)) + 20|0);
   $307 = HEAP32[$306>>2]|0;
   $308 = $4;
   $309 = $308<<3;
   $310 = (_realloc($307,$309)|0);
   $311 = $3;
   $312 = ((($311)) + 20|0);
   HEAP32[$312>>2] = $310;
   $313 = $3;
   $314 = ((($313)) + 24|0);
   $315 = HEAP32[$314>>2]|0;
   $316 = $4;
   $317 = $316<<4;
   $318 = (_realloc($315,$317)|0);
   $319 = $3;
   $320 = ((($319)) + 24|0);
   HEAP32[$320>>2] = $318;
  }
  $321 = $3;
  $322 = ((($321)) + 16|0);
  $323 = HEAP32[$322>>2]|0;
  _free($323);
  $324 = $5;
  $325 = $3;
  $326 = ((($325)) + 16|0);
  HEAP32[$326>>2] = $324;
  $327 = $4;
  $328 = $3;
  HEAP32[$328>>2] = $327;
  $329 = $3;
  $330 = ((($329)) + 4|0);
  $331 = HEAP32[$330>>2]|0;
  $332 = $3;
  $333 = ((($332)) + 8|0);
  HEAP32[$333>>2] = $331;
  $334 = $3;
  $335 = HEAP32[$334>>2]|0;
  $336 = (+($335>>>0));
  $337 = $336 * 0.77000000000000001;
  $338 = $337 + 0.5;
  $339 = (~~(($338))>>>0);
  $340 = $3;
  $341 = ((($340)) + 12|0);
  HEAP32[$341>>2] = $339;
 }
 $2 = 0;
 $342 = $2;
 STACKTOP = sp;return ($342|0);
}
function _kh_get_cache($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp;
 $4 = $0;
 $11 = $5;
 $12 = $11;
 HEAP32[$12>>2] = $1;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $2;
 $15 = $4;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $3 = 0;
  $125 = $3;
  STACKTOP = sp;return ($125|0);
 }
 $10 = 0;
 $18 = $4;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) - 1)|0;
 $9 = $20;
 $21 = $5;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) + 4)|0;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (_bitshift64Lshr(($23|0),($26|0),33)|0);
 $28 = tempRet0;
 $29 = $5;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($29) + 4)|0;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = $27 ^ $31;
 $36 = $28 ^ $34;
 $37 = $5;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = (($37) + 4)|0;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = (_bitshift64Shl(($39|0),($42|0),11)|0);
 $44 = tempRet0;
 $45 = $35 ^ $43;
 $36 ^ $44;
 $6 = $45;
 $46 = $6;
 $47 = $9;
 $48 = $46 & $47;
 $7 = $48;
 $49 = $7;
 $8 = $49;
 while(1) {
  $50 = $4;
  $51 = ((($50)) + 16|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $7;
  $54 = $53 >>> 4;
  $55 = (($52) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $7;
  $58 = $57 & 15;
  $59 = $58 << 1;
  $60 = $56 >>> $59;
  $61 = $60 & 2;
  $62 = ($61|0)!=(0);
  if ($62) {
   break;
  }
  $63 = $4;
  $64 = ((($63)) + 16|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $7;
  $67 = $66 >>> 4;
  $68 = (($65) + ($67<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $7;
  $71 = $70 & 15;
  $72 = $71 << 1;
  $73 = $69 >>> $72;
  $74 = $73 & 1;
  $75 = ($74|0)!=(0);
  if (!($75)) {
   $76 = $4;
   $77 = ((($76)) + 20|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $7;
   $80 = (($78) + ($79<<3)|0);
   $81 = $80;
   $82 = $81;
   $83 = HEAP32[$82>>2]|0;
   $84 = (($81) + 4)|0;
   $85 = $84;
   $86 = HEAP32[$85>>2]|0;
   $87 = $5;
   $88 = $87;
   $89 = HEAP32[$88>>2]|0;
   $90 = (($87) + 4)|0;
   $91 = $90;
   $92 = HEAP32[$91>>2]|0;
   $93 = ($83|0)==($89|0);
   $94 = ($86|0)==($92|0);
   $95 = $93 & $94;
   $96 = $95 ^ 1;
   if (!($96)) {
    break;
   }
  }
  $97 = $7;
  $98 = $10;
  $99 = (($98) + 1)|0;
  $10 = $99;
  $100 = (($97) + ($99))|0;
  $101 = $9;
  $102 = $100 & $101;
  $7 = $102;
  $103 = $7;
  $104 = $8;
  $105 = ($103|0)==($104|0);
  if ($105) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  $106 = $4;
  $107 = HEAP32[$106>>2]|0;
  $3 = $107;
  $125 = $3;
  STACKTOP = sp;return ($125|0);
 }
 $108 = $4;
 $109 = ((($108)) + 16|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $7;
 $112 = $111 >>> 4;
 $113 = (($110) + ($112<<2)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $7;
 $116 = $115 & 15;
 $117 = $116 << 1;
 $118 = $114 >>> $117;
 $119 = $118 & 3;
 $120 = ($119|0)!=(0);
 if ($120) {
  $121 = $4;
  $122 = HEAP32[$121>>2]|0;
  $124 = $122;
 } else {
  $123 = $7;
  $124 = $123;
 }
 $3 = $124;
 $125 = $3;
 STACKTOP = sp;return ($125|0);
}
function _worker_aux($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = sp + 12|0;
 $2 = $0;
 $4 = 0;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 36|0);
 (___pthread_mutex_lock($9)|0);
 while(1) {
  $10 = $2;
  $11 = ((($10)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)!=(0);
  if ($13) {
   $122 = 0;
  } else {
   $14 = $2;
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($15)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)!=(0);
   $19 = $18 ^ 1;
   $122 = $19;
  }
  $20 = $2;
  $21 = HEAP32[$20>>2]|0;
  if (!($122)) {
   break;
  }
  $22 = ((($21)) + 64|0);
  $23 = $2;
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 36|0);
  (_pthread_cond_wait($22,$25)|0);
 }
 $26 = ((($21)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0);
 if ($28) {
  $4 = 1;
 }
 $29 = $2;
 $30 = ((($29)) + 16|0);
 HEAP32[$30>>2] = 0;
 $31 = $2;
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 36|0);
 (___pthread_mutex_unlock($33)|0);
 $34 = $4;
 $35 = ($34|0)!=(0);
 if ($35) {
  $1 = 1;
  $121 = $1;
  STACKTOP = sp;return ($121|0);
 }
 $36 = $2;
 $37 = ((($36)) + 12|0);
 HEAP32[$37>>2] = 0;
 $38 = $2;
 $39 = ((($38)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $3 = $40;
 while(1) {
  $41 = $3;
  $42 = $2;
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($43)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($41|0)<($45|0);
  if (!($46)) {
   break;
  }
  HEAP32[$5>>2] = 65536;
  $47 = $2;
  $48 = ((($47)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $2;
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($51)) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $3;
  $55 = (($53) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $2;
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($58)) + 24|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $3;
  $62 = (($60) + ($61<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $2;
  $65 = ((($64)) + 20|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (_bgzf_compress($49,$5,$56,$63,$66)|0);
  $6 = $67;
  $68 = $6;
  $69 = ($68|0)!=(0);
  if ($69) {
   label = 13;
   break;
  }
  $94 = $2;
  $95 = HEAP32[$94>>2]|0;
  $96 = ((($95)) + 20|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = $3;
  $99 = (($97) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $2;
  $102 = ((($101)) + 4|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = HEAP32[$5>>2]|0;
  _memcpy(($100|0),($103|0),($104|0))|0;
  $105 = HEAP32[$5>>2]|0;
  $106 = $2;
  $107 = HEAP32[$106>>2]|0;
  $108 = ((($107)) + 24|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = $3;
  $111 = (($109) + ($110<<2)|0);
  HEAP32[$111>>2] = $105;
  $112 = $2;
  $113 = HEAP32[$112>>2]|0;
  $114 = HEAP32[$113>>2]|0;
  $115 = $3;
  $116 = (($115) + ($114))|0;
  $3 = $116;
 }
 L19: do {
  if ((label|0) == 13) {
   $70 = (3)>=(2);
   if ($70) {
    $71 = HEAP32[2398]|0;
    $72 = $6;
    HEAP32[$vararg_buffer>>2] = 15571;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $72;
    (_fprintf($71,15539,$vararg_buffer)|0);
   }
   $73 = $2;
   $74 = ((($73)) + 12|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $75 | 1;
   HEAP32[$74>>2] = $76;
   while(1) {
    $77 = $3;
    $78 = $2;
    $79 = HEAP32[$78>>2]|0;
    $80 = ((($79)) + 8|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($77|0)<($81|0);
    if (!($82)) {
     break L19;
    }
    $83 = $2;
    $84 = HEAP32[$83>>2]|0;
    $85 = ((($84)) + 24|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $3;
    $88 = (($86) + ($87<<2)|0);
    HEAP32[$88>>2] = 0;
    $89 = $2;
    $90 = HEAP32[$89>>2]|0;
    $91 = HEAP32[$90>>2]|0;
    $92 = $3;
    $93 = (($92) + ($91))|0;
    $3 = $93;
   }
  }
 } while(0);
 $117 = $2;
 $118 = HEAP32[$117>>2]|0;
 $119 = ((($118)) + 16|0);
 $120 = (Atomics_add(HEAP32, $119>>2, 1)|0);
 $1 = 0;
 $121 = $1;
 STACKTOP = sp;return ($121|0);
}
function _bgzf_flush($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 16;
 $7 = $6 & 3;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $1 = 0;
  $97 = $1;
  STACKTOP = sp;return ($97|0);
 }
 $9 = $2;
 $10 = ((($9)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0);
  if ($16) {
   $17 = $2;
   _mt_queue($17);
  }
  $18 = $2;
  $19 = (_mt_flush_queue($18)|0);
  $1 = $19;
  $97 = $1;
  STACKTOP = sp;return ($97|0);
 }
 while(1) {
  $20 = $2;
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)>(0);
  if (!($23)) {
   label = 19;
   break;
  }
  $24 = $2;
  $25 = ((($24)) + 56|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)!=(0);
  if ($27) {
   $28 = $2;
   (_bgzf_index_add_block($28)|0);
   $29 = $2;
   $30 = ((($29)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)<(0);
   $33 = $32 << 31 >> 31;
   $34 = $2;
   $35 = ((($34)) + 52|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($36)) + 16|0);
   $38 = $37;
   $39 = $38;
   $40 = HEAP32[$39>>2]|0;
   $41 = (($38) + 4)|0;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = (_i64Add(($40|0),($43|0),($31|0),($33|0))|0);
   $45 = tempRet0;
   $46 = $37;
   $47 = $46;
   HEAP32[$47>>2] = $44;
   $48 = (($46) + 4)|0;
   $49 = $48;
   HEAP32[$49>>2] = $45;
  }
  $50 = $2;
  $51 = $2;
  $52 = ((($51)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (_deflate_block($50,$53)|0);
  $3 = $54;
  $55 = $3;
  $56 = ($55|0)<(0);
  if ($56) {
   label = 11;
   break;
  }
  $60 = $2;
  $61 = ((($60)) + 44|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $2;
  $64 = ((($63)) + 36|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $3;
  $67 = (_hwrite_463($62,$65,$66)|0);
  $68 = $3;
  $69 = ($67|0)!=($68|0);
  if ($69) {
   label = 15;
   break;
  }
  $80 = $3;
  $81 = ($80|0)<(0);
  $82 = $81 << 31 >> 31;
  $83 = $2;
  $84 = ((($83)) + 16|0);
  $85 = $84;
  $86 = $85;
  $87 = HEAP32[$86>>2]|0;
  $88 = (($85) + 4)|0;
  $89 = $88;
  $90 = HEAP32[$89>>2]|0;
  $91 = (_i64Add(($87|0),($90|0),($80|0),($82|0))|0);
  $92 = tempRet0;
  $93 = $84;
  $94 = $93;
  HEAP32[$94>>2] = $91;
  $95 = (($93) + 4)|0;
  $96 = $95;
  HEAP32[$96>>2] = $92;
 }
 if ((label|0) == 11) {
  $57 = (3)>=(3);
  if ($57) {
   $58 = HEAP32[2398]|0;
   $59 = $3;
   HEAP32[$vararg_buffer>>2] = 15614;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $59;
   (_fprintf($58,15582,$vararg_buffer)|0);
  }
  $1 = -1;
  $97 = $1;
  STACKTOP = sp;return ($97|0);
 }
 else if ((label|0) == 15) {
  $70 = (3)>=(1);
  if ($70) {
   $71 = HEAP32[2398]|0;
   HEAP32[$vararg_buffer2>>2] = 15614;
   (_fprintf($71,15625,$vararg_buffer2)|0);
  }
  $72 = $2;
  $73 = HEAP32[$72>>2]|0;
  $74 = $73 & 65535;
  $75 = $74 | 4;
  $76 = HEAP32[$72>>2]|0;
  $77 = $75 & 65535;
  $78 = $76 & -65536;
  $79 = $78 | $77;
  HEAP32[$72>>2] = $79;
  $1 = -1;
  $97 = $1;
  STACKTOP = sp;return ($97|0);
 }
 else if ((label|0) == 19) {
  $1 = 0;
  $97 = $1;
  STACKTOP = sp;return ($97|0);
 }
 return (0)|0;
}
function _mt_queue($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)<($11|0);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($15) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $1;
  $22 = ((($21)) + 32|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $1;
  $25 = ((($24)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  _memcpy(($20|0),($23|0),($26|0))|0;
  $27 = $1;
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $2;
  $31 = ((($30)) + 24|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $2;
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($32) + ($35<<2)|0);
  HEAP32[$36>>2] = $29;
  $37 = $1;
  $38 = ((($37)) + 12|0);
  HEAP32[$38>>2] = 0;
  $39 = $2;
  $40 = ((($39)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[$40>>2] = $42;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((15723|0),(14901|0),833,(15745|0));
  // unreachable;
 }
}
function _mt_flush_queue($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 $7 = $3;
 $8 = ((($7)) + 36|0);
 (___pthread_mutex_lock($8)|0);
 $2 = 0;
 while(1) {
  $9 = $2;
  $10 = $3;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9|0)<($11|0);
  $13 = $3;
  if (!($12)) {
   break;
  }
  $14 = ((($13)) + 28|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = (($15) + (($16*24)|0)|0);
  $18 = ((($17)) + 16|0);
  HEAP32[$18>>2] = 1;
  $19 = $2;
  $20 = (($19) + 1)|0;
  $2 = $20;
 }
 $21 = ((($13)) + 16|0);
 Atomics_store(HEAP32,$21>>2,0)|0;
 $22 = $3;
 $23 = ((($22)) + 64|0);
 (_pthread_cond_broadcast($23)|0);
 $24 = $3;
 $25 = ((($24)) + 36|0);
 (___pthread_mutex_unlock($25)|0);
 $26 = $3;
 $27 = ((($26)) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 (_worker_aux($28)|0);
 while(1) {
  $29 = $3;
  $30 = ((($29)) + 16|0);
  $31 = (Atomics_load(HEAP32,$30>>2)|0);
  $32 = $3;
  $33 = HEAP32[$32>>2]|0;
  $34 = ($31|0)<($33|0);
  if (!($34)) {
   break;
  }
 }
 $2 = 0;
 while(1) {
  $35 = $2;
  $36 = $3;
  $37 = HEAP32[$36>>2]|0;
  $38 = ($35|0)<($37|0);
  if (!($38)) {
   break;
  }
  $39 = $3;
  $40 = ((($39)) + 28|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $2;
  $43 = (($41) + (($42*24)|0)|0);
  $44 = ((($43)) + 12|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $1;
  $47 = HEAP32[$46>>2]|0;
  $48 = $47 & 65535;
  $49 = $48 | $45;
  $50 = HEAP32[$46>>2]|0;
  $51 = $49 & 65535;
  $52 = $50 & -65536;
  $53 = $52 | $51;
  HEAP32[$46>>2] = $53;
  $54 = $2;
  $55 = (($54) + 1)|0;
  $2 = $55;
 }
 $56 = $1;
 $57 = HEAP32[$56>>2]|0;
 $58 = $57 & 65535;
 $59 = ($58|0)==(0);
 if (!($59)) {
  $98 = $3;
  $99 = ((($98)) + 8|0);
  HEAP32[$99>>2] = 0;
  $100 = $1;
  $101 = HEAP32[$100>>2]|0;
  $102 = $101 & 65535;
  $103 = ($102|0)==(0);
  $104 = $103 ? 0 : -1;
  STACKTOP = sp;return ($104|0);
 }
 $2 = 0;
 while(1) {
  $60 = $2;
  $61 = $3;
  $62 = ((($61)) + 8|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($60|0)<($63|0);
  if (!($64)) {
   label = 15;
   break;
  }
  $65 = $1;
  $66 = ((($65)) + 44|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $3;
  $69 = ((($68)) + 20|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $2;
  $72 = (($70) + ($71<<2)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $3;
  $75 = ((($74)) + 24|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $2;
  $78 = (($76) + ($77<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (_hwrite_463($67,$73,$79)|0);
  $81 = $3;
  $82 = ((($81)) + 24|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $2;
  $85 = (($83) + ($84<<2)|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($80|0)!=($86|0);
  if ($87) {
   break;
  }
  $96 = $2;
  $97 = (($96) + 1)|0;
  $2 = $97;
 }
 if ((label|0) == 15) {
  $98 = $3;
  $99 = ((($98)) + 8|0);
  HEAP32[$99>>2] = 0;
  $100 = $1;
  $101 = HEAP32[$100>>2]|0;
  $102 = $101 & 65535;
  $103 = ($102|0)==(0);
  $104 = $103 ? 0 : -1;
  STACKTOP = sp;return ($104|0);
 }
 $88 = $1;
 $89 = HEAP32[$88>>2]|0;
 $90 = $89 & 65535;
 $91 = $90 | 4;
 $92 = HEAP32[$88>>2]|0;
 $93 = $91 & 65535;
 $94 = $92 & -65536;
 $95 = $94 | $93;
 HEAP32[$88>>2] = $95;
 $98 = $3;
 $99 = ((($98)) + 8|0);
 HEAP32[$99>>2] = 0;
 $100 = $1;
 $101 = HEAP32[$100>>2]|0;
 $102 = $101 & 65535;
 $103 = ($102|0)==(0);
 $104 = $103 ? 0 : -1;
 STACKTOP = sp;return ($104|0);
}
function _deflate_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 HEAP32[$5>>2] = 65536;
 $7 = $3;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 >>> 31;
 $10 = ($9|0)!=(0);
 $11 = $3;
 if ($10) {
  $23 = $3;
  $24 = ((($23)) + 36|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $3;
  $27 = ((($26)) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $4;
  $30 = $3;
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 << 3;
  $33 = $32 >> 23;
  $34 = (_bgzf_gzip_compress($11,$25,$5,$28,$29,$33)|0);
  $6 = $34;
 } else {
  $12 = ((($11)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $3;
  $15 = ((($14)) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $4;
  $18 = $3;
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 << 3;
  $21 = $20 >> 23;
  $22 = (_bgzf_compress($13,$5,$16,$17,$21)|0);
  $6 = $22;
 }
 $35 = $6;
 $36 = ($35|0)!=(0);
 if (!($36)) {
  $48 = $3;
  $49 = ((($48)) + 12|0);
  HEAP32[$49>>2] = 0;
  $50 = HEAP32[$5>>2]|0;
  $2 = $50;
  $51 = $2;
  STACKTOP = sp;return ($51|0);
 }
 $37 = (3)>=(3);
 if ($37) {
  $38 = HEAP32[2398]|0;
  $39 = $6;
  HEAP32[$vararg_buffer>>2] = 15690;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $39;
  (_fprintf($38,15660,$vararg_buffer)|0);
 }
 $40 = $3;
 $41 = HEAP32[$40>>2]|0;
 $42 = $41 & 65535;
 $43 = $42 | 1;
 $44 = HEAP32[$40>>2]|0;
 $45 = $43 & 65535;
 $46 = $44 & -65536;
 $47 = $46 | $45;
 HEAP32[$40>>2] = $47;
 $2 = -1;
 $51 = $2;
 STACKTOP = sp;return ($51|0);
}
function _hwrite_463($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $9;
 $14 = $12;
 $15 = (($13) - ($14))|0;
 $6 = $15;
 $16 = $6;
 $17 = $5;
 $18 = ($16>>>0)>($17>>>0);
 if ($18) {
  $19 = $5;
  $6 = $19;
 }
 $20 = $3;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $4;
 $24 = $6;
 _memcpy(($22|0),($23|0),($24|0))|0;
 $25 = $6;
 $26 = $3;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($25)|0);
 HEAP32[$27>>2] = $29;
 $30 = $6;
 $31 = $5;
 $32 = ($30|0)==($31|0);
 if ($32) {
  $33 = $6;
  $39 = $33;
  STACKTOP = sp;return ($39|0);
 } else {
  $34 = $3;
  $35 = $4;
  $36 = $5;
  $37 = $6;
  $38 = (_hwrite2($34,$35,$36,$37)|0);
  $39 = $38;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _bgzf_gzip_compress($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $17 = $8;
 $13 = $17;
 $18 = $7;
 $19 = ((($18)) + 60|0);
 $20 = HEAP32[$19>>2]|0;
 $14 = $20;
 $21 = $11;
 $22 = ($21|0)!=(0);
 $23 = $22 ? 0 : 4;
 $15 = $23;
 $24 = $10;
 $25 = $14;
 HEAP32[$25>>2] = $24;
 $26 = $11;
 $27 = $14;
 $28 = ((($27)) + 4|0);
 HEAP32[$28>>2] = $26;
 $29 = $13;
 $30 = $14;
 $31 = ((($30)) + 12|0);
 HEAP32[$31>>2] = $29;
 $32 = $9;
 $33 = HEAP32[$32>>2]|0;
 $34 = $14;
 $35 = ((($34)) + 16|0);
 HEAP32[$35>>2] = $33;
 $36 = $14;
 $37 = $15;
 $38 = (_deflate($36,$37)|0);
 $16 = $38;
 $39 = $16;
 $40 = ($39|0)==(-2);
 if (!($40)) {
  $45 = $9;
  $46 = HEAP32[$45>>2]|0;
  $47 = $14;
  $48 = ((($47)) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($46) - ($49))|0;
  $51 = $9;
  HEAP32[$51>>2] = $50;
  $6 = 0;
  $52 = $6;
  STACKTOP = sp;return ($52|0);
 }
 $41 = (3)>=(1);
 if ($41) {
  $42 = HEAP32[2398]|0;
  $43 = $16;
  $44 = (_bgzf_zerr($43,0)|0);
  HEAP32[$vararg_buffer>>2] = 15704;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $44;
  (_fprintf($42,15231,$vararg_buffer)|0);
 }
 $6 = -1;
 $52 = $6;
 STACKTOP = sp;return ($52|0);
}
function _bgzf_close($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = -1;
  $100 = $1;
  STACKTOP = sp;return ($100|0);
 }
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 >>> 16;
 $10 = $9 & 3;
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $2;
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 >>> 29;
   $15 = $14 & 3;
   $16 = ($15|0)!=(0);
   if ($16) {
    $17 = $2;
    $18 = (_bgzf_flush($17)|0);
    $19 = ($18|0)!=(0);
    if ($19) {
     $1 = -1;
     $100 = $1;
     STACKTOP = sp;return ($100|0);
    }
    $20 = $2;
    $21 = HEAP32[$20>>2]|0;
    $22 = $21 & -535822337;
    $23 = $22 | 535822336;
    HEAP32[$20>>2] = $23;
    $24 = $2;
    $25 = (_deflate_block($24,0)|0);
    $4 = $25;
    $26 = $4;
    $27 = ($26|0)<(0);
    if ($27) {
     $28 = (3)>=(3);
     if ($28) {
      $29 = HEAP32[2398]|0;
      $30 = $4;
      HEAP32[$vararg_buffer>>2] = 15754;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $30;
      (_fprintf($29,15582,$vararg_buffer)|0);
     }
     $1 = -1;
     $100 = $1;
     STACKTOP = sp;return ($100|0);
    }
    $31 = $2;
    $32 = ((($31)) + 44|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $2;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = $4;
    $38 = (_hwrite_463($33,$36,$37)|0);
    $39 = ($38|0)<(0);
    if (!($39)) {
     $40 = $2;
     $41 = ((($40)) + 44|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (_hflush($42)|0);
     $44 = ($43|0)!=(0);
     if (!($44)) {
      $55 = $2;
      $56 = ((($55)) + 48|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)!=(0|0);
      if (!($58)) {
       break;
      }
      $59 = $2;
      $60 = ((($59)) + 48|0);
      $61 = HEAP32[$60>>2]|0;
      _mt_destroy($61);
      break;
     }
    }
    $45 = (3)>=(1);
    if ($45) {
     $46 = HEAP32[2398]|0;
     HEAP32[$vararg_buffer2>>2] = 15754;
     (_fprintf($46,15765,$vararg_buffer2)|0);
    }
    $47 = $2;
    $48 = HEAP32[$47>>2]|0;
    $49 = $48 & 65535;
    $50 = $49 | 4;
    $51 = HEAP32[$47>>2]|0;
    $52 = $50 & 65535;
    $53 = $51 & -65536;
    $54 = $53 | $52;
    HEAP32[$47>>2] = $54;
    $1 = -1;
    $100 = $1;
    STACKTOP = sp;return ($100|0);
   }
  }
 } while(0);
 $62 = $2;
 $63 = HEAP32[$62>>2]|0;
 $64 = $63 >>> 31;
 $65 = ($64|0)!=(0);
 if ($65) {
  $66 = $2;
  $67 = HEAP32[$66>>2]|0;
  $68 = $67 >>> 16;
  $69 = $68 & 3;
  $70 = ($69|0)!=(0);
  $71 = $2;
  $72 = ((($71)) + 60|0);
  $73 = HEAP32[$72>>2]|0;
  if ($70) {
   $75 = (_deflateEnd($73)|0);
   $3 = $75;
  } else {
   $74 = (_inflateEnd($73)|0);
   $3 = $74;
  }
  $76 = $3;
  $77 = ($76|0)!=(0);
  $78 = (3)>=(1);
  $or$cond = $77 & $78;
  if ($or$cond) {
   $79 = HEAP32[2398]|0;
   $80 = $3;
   $81 = (_bgzf_zerr($80,0)|0);
   HEAP32[$vararg_buffer5>>2] = 15754;
   $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
   HEAP32[$vararg_ptr8>>2] = $81;
   (_fprintf($79,15791,$vararg_buffer5)|0);
  }
  $82 = $2;
  $83 = ((($82)) + 60|0);
  $84 = HEAP32[$83>>2]|0;
  _free($84);
 }
 $85 = $2;
 $86 = ((($85)) + 44|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (_hclose($87)|0);
 $3 = $88;
 $89 = $3;
 $90 = ($89|0)!=(0);
 if ($90) {
  $1 = -1;
  $100 = $1;
  STACKTOP = sp;return ($100|0);
 } else {
  $91 = $2;
  _bgzf_index_destroy($91);
  $92 = $2;
  $93 = ((($92)) + 32|0);
  $94 = HEAP32[$93>>2]|0;
  _free($94);
  $95 = $2;
  $96 = ((($95)) + 36|0);
  $97 = HEAP32[$96>>2]|0;
  _free($97);
  $98 = $2;
  _free_cache($98);
  $99 = $2;
  _free($99);
  $1 = 0;
  $100 = $1;
  STACKTOP = sp;return ($100|0);
 }
 return (0)|0;
}
function _mt_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 36|0);
 (___pthread_mutex_lock($4)|0);
 $5 = $1;
 $6 = ((($5)) + 12|0);
 HEAP32[$6>>2] = 1;
 $7 = $1;
 $8 = ((($7)) + 16|0);
 Atomics_store(HEAP32,$8>>2,0)|0;
 $9 = $1;
 $10 = ((($9)) + 64|0);
 (_pthread_cond_broadcast($10)|0);
 $11 = $1;
 $12 = ((($11)) + 36|0);
 (___pthread_mutex_unlock($12)|0);
 $2 = 1;
 while(1) {
  $13 = $2;
  $14 = $1;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($13|0)<($15|0);
  if (!($16)) {
   break;
  }
  $17 = $1;
  $18 = ((($17)) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $2;
  $21 = (($19) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  (_pthread_join(($22|0),(0|0))|0);
  $23 = $2;
  $24 = (($23) + 1)|0;
  $2 = $24;
 }
 $2 = 0;
 while(1) {
  $25 = $2;
  $26 = $1;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($25|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $1;
  $31 = ((($30)) + 20|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $2;
  $34 = (($32) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  _free($35);
  $36 = $2;
  $37 = (($36) + 1)|0;
  $2 = $37;
 }
 $2 = 0;
 while(1) {
  $38 = $2;
  $39 = $1;
  $40 = HEAP32[$39>>2]|0;
  $41 = ($38|0)<($40|0);
  $42 = $1;
  if (!($41)) {
   break;
  }
  $43 = ((($42)) + 28|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $2;
  $46 = (($44) + (($45*24)|0)|0);
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  _free($48);
  $49 = $2;
  $50 = (($49) + 1)|0;
  $2 = $50;
 }
 $51 = ((($42)) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 _free($52);
 $53 = $1;
 $54 = ((($53)) + 24|0);
 $55 = HEAP32[$54>>2]|0;
 _free($55);
 $56 = $1;
 $57 = ((($56)) + 28|0);
 $58 = HEAP32[$57>>2]|0;
 _free($58);
 $59 = $1;
 $60 = ((($59)) + 32|0);
 $61 = HEAP32[$60>>2]|0;
 _free($61);
 $62 = $1;
 $63 = ((($62)) + 64|0);
 (_pthread_cond_destroy($63)|0);
 $64 = $1;
 _free($64);
 STACKTOP = sp;return;
}
function _bgzf_index_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 _free($10);
 $11 = $1;
 $12 = ((($11)) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 _free($13);
 $14 = $1;
 $15 = ((($14)) + 52|0);
 HEAP32[$15>>2] = 0;
 $16 = $1;
 $17 = ((($16)) + 56|0);
 HEAP32[$17>>2] = 0;
 STACKTOP = sp;return;
}
function _free_cache($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 >>> 16;
 $10 = $9 & 3;
 $11 = ($10|0)!=(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $2 = 0;
 while(1) {
  $12 = $2;
  $13 = $3;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($12>>>0)<($14>>>0);
  $16 = $3;
  if (!($15)) {
   break;
  }
  $17 = ((($16)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $2;
  $20 = $19 >>> 4;
  $21 = (($18) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $2;
  $24 = $23 & 15;
  $25 = $24 << 1;
  $26 = $22 >>> $25;
  $27 = $26 & 3;
  $28 = ($27|0)!=(0);
  if (!($28)) {
   $29 = $3;
   $30 = ((($29)) + 24|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $2;
   $33 = (($31) + ($32<<4)|0);
   $34 = ((($33)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   _free($35);
  }
  $36 = $2;
  $37 = (($36) + 1)|0;
  $2 = $37;
 }
 _kh_destroy_cache($16);
 STACKTOP = sp;return;
}
function _kh_destroy_cache($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _bgzf_getc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)>=($9|0);
 if ($10) {
  $11 = $2;
  $12 = (_bgzf_read_block($11)|0);
  $13 = ($12|0)!=(0);
  if ($13) {
   $1 = -2;
   $66 = $1;
   STACKTOP = sp;return ($66|0);
  }
  $14 = $2;
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0);
  if ($17) {
   $1 = -1;
   $66 = $1;
   STACKTOP = sp;return ($66|0);
  }
 }
 $18 = $2;
 $19 = ((($18)) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $2;
 $22 = ((($21)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 1)|0;
 HEAP32[$22>>2] = $24;
 $25 = (($20) + ($23)|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $3 = $27;
 $28 = $2;
 $29 = ((($28)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $2;
 $32 = ((($31)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($30|0)==($33|0);
 if ($34) {
  $35 = $2;
  $36 = ((($35)) + 44|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (_htell_446($37)|0);
  $39 = ($38|0)<(0);
  $40 = $39 << 31 >> 31;
  $41 = $2;
  $42 = ((($41)) + 16|0);
  $43 = $42;
  $44 = $43;
  HEAP32[$44>>2] = $38;
  $45 = (($43) + 4)|0;
  $46 = $45;
  HEAP32[$46>>2] = $40;
  $47 = $2;
  $48 = ((($47)) + 12|0);
  HEAP32[$48>>2] = 0;
  $49 = $2;
  $50 = ((($49)) + 8|0);
  HEAP32[$50>>2] = 0;
 }
 $51 = $2;
 $52 = ((($51)) + 24|0);
 $53 = $52;
 $54 = $53;
 $55 = HEAP32[$54>>2]|0;
 $56 = (($53) + 4)|0;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = (_i64Add(($55|0),($58|0),1,0)|0);
 $60 = tempRet0;
 $61 = $52;
 $62 = $61;
 HEAP32[$62>>2] = $59;
 $63 = (($61) + 4)|0;
 $64 = $63;
 HEAP32[$64>>2] = $60;
 $65 = $3;
 $1 = $65;
 $66 = $1;
 STACKTOP = sp;return ($66|0);
}
function _bgzf_index_build_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 _bgzf_index_destroy($3);
 $4 = (_calloc(1,24)|0);
 $5 = $2;
 $6 = ((($5)) + 52|0);
 HEAP32[$6>>2] = $4;
 $7 = $2;
 $8 = ((($7)) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $2;
  $12 = ((($11)) + 56|0);
  HEAP32[$12>>2] = 1;
  $1 = 0;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 } else {
  $1 = -1;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _bgzf_index_dump($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0;
 var $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = $4;
 $13 = (_bgzf_flush($12)|0);
 $14 = ($13|0)!=(0);
 if ($14) {
  $3 = -1;
  $137 = $3;
  STACKTOP = sp;return ($137|0);
 }
 $15 = $4;
 $16 = ((($15)) + 52|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  ___assert_fail((15833|0),(14901|0),1149,(15841|0));
  // unreachable;
 }
 $7 = 0;
 $19 = $6;
 $20 = ($19|0)!=(0|0);
 do {
  if ($20) {
   $21 = $5;
   $22 = (_strlen($21)|0);
   $8 = $22;
   $23 = $6;
   $24 = (_strlen($23)|0);
   $9 = $24;
   $25 = $8;
   $26 = $9;
   $27 = (($25) + ($26))|0;
   $28 = (($27) + 1)|0;
   $29 = (_malloc($28)|0);
   $7 = $29;
   $30 = $7;
   $31 = ($30|0)!=(0|0);
   if ($31) {
    $32 = $7;
    $33 = $5;
    $34 = $8;
    _memcpy(($32|0),($33|0),($34|0))|0;
    $35 = $7;
    $36 = $8;
    $37 = (($35) + ($36)|0);
    $38 = $6;
    $39 = $9;
    $40 = (($39) + 1)|0;
    _memcpy(($37|0),($38|0),($40|0))|0;
    break;
   }
   $3 = -1;
   $137 = $3;
   STACKTOP = sp;return ($137|0);
  }
 } while(0);
 $41 = $7;
 $42 = ($41|0)!=(0|0);
 $43 = $7;
 $44 = $5;
 $45 = $42 ? $43 : $44;
 $46 = (_fopen($45,17490)|0);
 $10 = $46;
 $47 = $7;
 $48 = ($47|0)!=(0|0);
 if ($48) {
  $49 = $7;
  _free($49);
 }
 $50 = $10;
 $51 = ($50|0)!=(0|0);
 if (!($51)) {
  $52 = (3)>(1);
  if ($52) {
   $53 = HEAP32[2398]|0;
   $54 = $5;
   $55 = $6;
   $56 = ($55|0)!=(0|0);
   $57 = $6;
   $58 = $56 ? $57 : 27056;
   $59 = (___errno_location()|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (_strerror($60)|0);
   HEAP32[$vararg_buffer>>2] = 15841;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $54;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $58;
   $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $61;
   (_fprintf($53,15857,$vararg_buffer)|0);
  }
  $3 = -1;
  $137 = $3;
  STACKTOP = sp;return ($137|0);
 }
 $62 = $4;
 $63 = ((($62)) + 52|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) - 1)|0;
 $67 = ($66|0)<(0);
 $68 = $67 << 31 >> 31;
 $69 = $10;
 $70 = (_fwrite_uint64($66,$68,$69)|0);
 $71 = ($70|0)<(0);
 L25: do {
  if (!($71)) {
   $11 = 1;
   while(1) {
    $72 = $11;
    $73 = $4;
    $74 = ((($73)) + 52|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = HEAP32[$75>>2]|0;
    $77 = ($72|0)<($76|0);
    if (!($77)) {
     break;
    }
    $78 = $4;
    $79 = ((($78)) + 52|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($80)) + 8|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $11;
    $84 = (($82) + ($83<<4)|0);
    $85 = ((($84)) + 8|0);
    $86 = $85;
    $87 = $86;
    $88 = HEAP32[$87>>2]|0;
    $89 = (($86) + 4)|0;
    $90 = $89;
    $91 = HEAP32[$90>>2]|0;
    $92 = $10;
    $93 = (_fwrite_uint64($88,$91,$92)|0);
    $94 = ($93|0)<(0);
    if ($94) {
     break L25;
    }
    $95 = $4;
    $96 = ((($95)) + 52|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ((($97)) + 8|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = $11;
    $101 = (($99) + ($100<<4)|0);
    $102 = $101;
    $103 = $102;
    $104 = HEAP32[$103>>2]|0;
    $105 = (($102) + 4)|0;
    $106 = $105;
    $107 = HEAP32[$106>>2]|0;
    $108 = $10;
    $109 = (_fwrite_uint64($104,$107,$108)|0);
    $110 = ($109|0)<(0);
    if ($110) {
     break L25;
    }
    $111 = $11;
    $112 = (($111) + 1)|0;
    $11 = $112;
   }
   $113 = $10;
   $114 = (_fclose($113)|0);
   $115 = ($114|0)<(0);
   if (!($115)) {
    $3 = 0;
    $137 = $3;
    STACKTOP = sp;return ($137|0);
   }
   $116 = (3)>(1);
   if ($116) {
    $117 = HEAP32[2398]|0;
    $118 = $5;
    $119 = $6;
    $120 = ($119|0)!=(0|0);
    $121 = $6;
    $122 = $120 ? $121 : 27056;
    $123 = (___errno_location()|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (_strerror($124)|0);
    HEAP32[$vararg_buffer4>>2] = 15841;
    $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
    HEAP32[$vararg_ptr7>>2] = $118;
    $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
    HEAP32[$vararg_ptr8>>2] = $122;
    $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
    HEAP32[$vararg_ptr9>>2] = $125;
    (_fprintf($117,15890,$vararg_buffer4)|0);
   }
   $3 = -1;
   $137 = $3;
   STACKTOP = sp;return ($137|0);
  }
 } while(0);
 $126 = (3)>(1);
 if ($126) {
  $127 = HEAP32[2398]|0;
  $128 = $5;
  $129 = $6;
  $130 = ($129|0)!=(0|0);
  $131 = $6;
  $132 = $130 ? $131 : 27056;
  $133 = (___errno_location()|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (_strerror($134)|0);
  HEAP32[$vararg_buffer10>>2] = 15841;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $128;
  $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
  HEAP32[$vararg_ptr14>>2] = $132;
  $vararg_ptr15 = ((($vararg_buffer10)) + 12|0);
  HEAP32[$vararg_ptr15>>2] = $135;
  (_fprintf($127,15926,$vararg_buffer10)|0);
 }
 $136 = $10;
 (_fclose($136)|0);
 $3 = -1;
 $137 = $3;
 STACKTOP = sp;return ($137|0);
}
function _fwrite_uint64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $6 = $4;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $5 = $2;
 $10 = (_ed_is_big_430()|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $4;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + 4)|0;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (_ed_swap_8_488($14,$17)|0);
  $19 = tempRet0;
  $20 = $4;
  $21 = $20;
  HEAP32[$21>>2] = $18;
  $22 = (($20) + 4)|0;
  $23 = $22;
  HEAP32[$23>>2] = $19;
 }
 $24 = $5;
 $25 = (_fwrite($4,8,1,$24)|0);
 $26 = ($25|0)!=(1);
 if ($26) {
  $3 = -1;
  $27 = $3;
  STACKTOP = sp;return ($27|0);
 } else {
  $3 = 0;
  $27 = $3;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _ed_swap_8_488($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = $0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $7 = $2;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $2;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = $2;
 $20 = $19;
 HEAP32[$20>>2] = $18;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $9;
 $23 = $2;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = $25 & 65535;
 $30 = $28 & 65535;
 $31 = (_bitshift64Shl(($29|0),($30|0),16)|0);
 $32 = tempRet0;
 $33 = $2;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = $35 & -65536;
 $40 = $38 & -65536;
 $41 = (_bitshift64Lshr(($39|0),($40|0),16)|0);
 $42 = tempRet0;
 $43 = $31 | $41;
 $44 = $32 | $42;
 $45 = $2;
 $46 = $45;
 HEAP32[$46>>2] = $43;
 $47 = (($45) + 4)|0;
 $48 = $47;
 HEAP32[$48>>2] = $44;
 $49 = $2;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 $52 = (($49) + 4)|0;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = $51 & 16711935;
 $56 = $54 & 16711935;
 $57 = (_bitshift64Shl(($55|0),($56|0),8)|0);
 $58 = tempRet0;
 $59 = $2;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = (($59) + 4)|0;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = $61 & -16711936;
 $66 = $64 & -16711936;
 $67 = (_bitshift64Lshr(($65|0),($66|0),8)|0);
 $68 = tempRet0;
 $69 = $57 | $67;
 $70 = $58 | $68;
 tempRet0 = ($70);
 STACKTOP = sp;return ($69|0);
}
function _bgzf_index_load($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $11 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $13 = $6;
 $14 = ($13|0)!=(0|0);
 do {
  if ($14) {
   $15 = $5;
   $16 = (_strlen($15)|0);
   $8 = $16;
   $17 = $6;
   $18 = (_strlen($17)|0);
   $9 = $18;
   $19 = $8;
   $20 = $9;
   $21 = (($19) + ($20))|0;
   $22 = (($21) + 1)|0;
   $23 = (_malloc($22)|0);
   $7 = $23;
   $24 = $7;
   $25 = ($24|0)!=(0|0);
   if ($25) {
    $26 = $7;
    $27 = $5;
    $28 = $8;
    _memcpy(($26|0),($27|0),($28|0))|0;
    $29 = $7;
    $30 = $8;
    $31 = (($29) + ($30)|0);
    $32 = $6;
    $33 = $9;
    $34 = (($33) + 1)|0;
    _memcpy(($31|0),($32|0),($34|0))|0;
    break;
   }
   $3 = -1;
   $174 = $3;
   STACKTOP = sp;return ($174|0);
  }
 } while(0);
 $35 = $7;
 $36 = ($35|0)!=(0|0);
 $37 = $7;
 $38 = $5;
 $39 = $36 ? $37 : $38;
 $40 = (_fopen($39,15962)|0);
 $10 = $40;
 $41 = $7;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = $7;
  _free($43);
 }
 $44 = $10;
 $45 = ($44|0)!=(0|0);
 if (!($45)) {
  $46 = (3)>(1);
  if ($46) {
   $47 = HEAP32[2398]|0;
   $48 = $5;
   $49 = $6;
   $50 = ($49|0)!=(0|0);
   $51 = $6;
   $52 = $50 ? $51 : 27056;
   $53 = (___errno_location()|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (_strerror($54)|0);
   HEAP32[$vararg_buffer>>2] = 15965;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $48;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $52;
   $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $55;
   (_fprintf($47,15857,$vararg_buffer)|0);
  }
  $3 = -1;
  $174 = $3;
  STACKTOP = sp;return ($174|0);
 }
 $56 = (_calloc(1,24)|0);
 $57 = $4;
 $58 = ((($57)) + 52|0);
 HEAP32[$58>>2] = $56;
 $59 = $4;
 $60 = ((($59)) + 52|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)==(0|0);
 L18: do {
  if (!($62)) {
   $63 = $10;
   $64 = (_fread_uint64($11,$63)|0);
   $65 = ($64|0)<(0);
   if (!($65)) {
    $66 = $11;
    $67 = $66;
    $68 = HEAP32[$67>>2]|0;
    $69 = (($66) + 4)|0;
    $70 = $69;
    $71 = HEAP32[$70>>2]|0;
    $72 = (_i64Add(($68|0),($71|0),1,0)|0);
    $73 = tempRet0;
    $74 = $4;
    $75 = ((($74)) + 52|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ((($76)) + 4|0);
    HEAP32[$77>>2] = $72;
    $78 = $4;
    $79 = ((($78)) + 52|0);
    $80 = HEAP32[$79>>2]|0;
    HEAP32[$80>>2] = $72;
    $81 = $4;
    $82 = ((($81)) + 52|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ((($83)) + 4|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $85<<4;
    $87 = (_malloc($86)|0);
    $88 = $4;
    $89 = ((($88)) + 52|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ((($90)) + 8|0);
    HEAP32[$91>>2] = $87;
    $92 = $4;
    $93 = ((($92)) + 52|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ((($94)) + 8|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)==(0|0);
    if (!($97)) {
     $98 = $4;
     $99 = ((($98)) + 52|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = ((($100)) + 8|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = $102;
     $104 = $103;
     HEAP32[$104>>2] = 0;
     $105 = (($103) + 4)|0;
     $106 = $105;
     HEAP32[$106>>2] = 0;
     $107 = $4;
     $108 = ((($107)) + 52|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ((($109)) + 8|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = ((($111)) + 8|0);
     $113 = $112;
     $114 = $113;
     HEAP32[$114>>2] = 0;
     $115 = (($113) + 4)|0;
     $116 = $115;
     HEAP32[$116>>2] = 0;
     $12 = 1;
     while(1) {
      $117 = $12;
      $118 = $4;
      $119 = ((($118)) + 52|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = HEAP32[$120>>2]|0;
      $122 = ($117|0)<($121|0);
      if (!($122)) {
       break;
      }
      $123 = $4;
      $124 = ((($123)) + 52|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = ((($125)) + 8|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = $12;
      $129 = (($127) + ($128<<4)|0);
      $130 = ((($129)) + 8|0);
      $131 = $10;
      $132 = (_fread_uint64($130,$131)|0);
      $133 = ($132|0)<(0);
      if ($133) {
       break L18;
      }
      $134 = $4;
      $135 = ((($134)) + 52|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ((($136)) + 8|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = $12;
      $140 = (($138) + ($139<<4)|0);
      $141 = $10;
      $142 = (_fread_uint64($140,$141)|0);
      $143 = ($142|0)<(0);
      if ($143) {
       break L18;
      }
      $144 = $12;
      $145 = (($144) + 1)|0;
      $12 = $145;
     }
     $146 = $10;
     $147 = (_fclose($146)|0);
     $148 = ($147|0)!=(0);
     if (!($148)) {
      $3 = 0;
      $174 = $3;
      STACKTOP = sp;return ($174|0);
     }
    }
   }
  }
 } while(0);
 $149 = (3)>(1);
 if ($149) {
  $150 = HEAP32[2398]|0;
  $151 = $5;
  $152 = $6;
  $153 = ($152|0)!=(0|0);
  $154 = $6;
  $155 = $153 ? $154 : 27056;
  $156 = (___errno_location()|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = (_strerror($157)|0);
  HEAP32[$vararg_buffer4>>2] = 15965;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $151;
  $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
  HEAP32[$vararg_ptr8>>2] = $155;
  $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
  HEAP32[$vararg_ptr9>>2] = $158;
  (_fprintf($150,15981,$vararg_buffer4)|0);
 }
 $159 = $10;
 (_fclose($159)|0);
 $160 = $4;
 $161 = ((($160)) + 52|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = ($162|0)!=(0|0);
 if ($163) {
  $164 = $4;
  $165 = ((($164)) + 52|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ((($166)) + 8|0);
  $168 = HEAP32[$167>>2]|0;
  _free($168);
  $169 = $4;
  $170 = ((($169)) + 52|0);
  $171 = HEAP32[$170>>2]|0;
  _free($171);
  $172 = $4;
  $173 = ((($172)) + 52|0);
  HEAP32[$173>>2] = 0;
 }
 $3 = -1;
 $174 = $3;
 STACKTOP = sp;return ($174|0);
}
function _fread_uint64($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = $4;
 $7 = (_fread($5,8,1,$6)|0);
 $8 = ($7|0)!=(1);
 if ($8) {
  $2 = -1;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 }
 $9 = (_ed_is_big_430()|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $3;
  (_ed_swap_8p_493($11)|0);
 }
 $2 = 0;
 $12 = $2;
 STACKTOP = sp;return ($12|0);
}
function _ed_swap_8p_493($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_ed_swap_8_488($5,$8)|0);
 $10 = tempRet0;
 $11 = $1;
 $12 = $11;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $10;
 $16 = $1;
 STACKTOP = sp;return ($16|0);
}
function _bgzf_utell($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _sam_hdr_add_lines($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink10 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $14 = sp + 32|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $23 = $6;
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $25 = $5;
  $26 = (_strlen($25)|0);
  $6 = $26;
 }
 $27 = $4;
 $28 = (_ks_len($27)|0);
 $9 = $28;
 $29 = $5;
 $30 = $6;
 $31 = $4;
 $32 = (_kputsn_510($29,$30,$31)|0);
 $33 = (-1)==($32|0);
 if ($33) {
  $3 = -1;
  $376 = $3;
  STACKTOP = sp;return ($376|0);
 }
 $34 = $4;
 $35 = (_ks_str($34)|0);
 $36 = $9;
 $37 = (($35) + ($36)|0);
 $10 = $37;
 $7 = 0;
 $8 = 1;
 L8: while(1) {
  $38 = $7;
  $39 = $6;
  $40 = ($38|0)<($39|0);
  if (!($40)) {
   label = 65;
   break;
  }
  $41 = $10;
  $42 = $7;
  $43 = (($41) + ($42)|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44 << 24 >> 24;
  $46 = ($45|0)!=(0);
  if (!($46)) {
   label = 65;
   break;
  }
  $47 = $7;
  $13 = $47;
  $48 = $10;
  $49 = $7;
  $50 = (($48) + ($49)|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51 << 24 >> 24;
  $53 = ($52|0)!=(64);
  if ($53) {
   label = 9;
   break;
  }
  $79 = $10;
  $80 = $7;
  $81 = (($80) + 1)|0;
  $82 = (($79) + ($81)|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83 << 24 >> 24;
  $85 = $84 << 8;
  $86 = $10;
  $87 = $7;
  $88 = (($87) + 2)|0;
  $89 = (($86) + ($88)|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90 << 24 >> 24;
  $92 = $85 | $91;
  $11 = $92;
  $93 = $10;
  $94 = $7;
  $95 = (($94) + 1)|0;
  $96 = (($93) + ($95)|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = $97 << 24 >> 24;
  $99 = ($98|0)<(65);
  if ($99) {
   label = 19;
   break;
  }
  $100 = $10;
  $101 = $7;
  $102 = (($101) + 1)|0;
  $103 = (($100) + ($102)|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = $104 << 24 >> 24;
  $106 = ($105|0)>(122);
  if ($106) {
   label = 19;
   break;
  }
  $107 = $10;
  $108 = $7;
  $109 = (($108) + 2)|0;
  $110 = (($107) + ($109)|0);
  $111 = HEAP8[$110>>0]|0;
  $112 = $111 << 24 >> 24;
  $113 = ($112|0)<(65);
  if ($113) {
   label = 19;
   break;
  }
  $114 = $10;
  $115 = $7;
  $116 = (($115) + 2)|0;
  $117 = (($114) + ($116)|0);
  $118 = HEAP8[$117>>0]|0;
  $119 = $118 << 24 >> 24;
  $120 = ($119|0)>(122);
  if ($120) {
   label = 19;
   break;
  }
  $128 = $7;
  $129 = (($128) + 3)|0;
  $7 = $129;
  $130 = $10;
  $131 = $7;
  $132 = (($130) + ($131)|0);
  $133 = HEAP8[$132>>0]|0;
  $134 = $133 << 24 >> 24;
  $135 = ($134|0)==(10);
  if (!($135)) {
   $136 = $4;
   $137 = ((($136)) + 20|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (_pool_alloc($138)|0);
   $15 = $139;
   $140 = ($139|0)!=(0|0);
   if (!($140)) {
    label = 22;
    break;
   }
   $141 = $4;
   $142 = ((($141)) + 12|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = $11;
   $145 = (_kh_put_sam_hdr($143,$144,$14)|0);
   $12 = $145;
   $146 = (-1)==($145|0);
   if ($146) {
    label = 24;
    break;
   }
   $147 = HEAP32[$14>>2]|0;
   $148 = ($147|0)!=(0);
   if ($148) {
    $179 = $15;
    $180 = $4;
    $181 = ((($180)) + 12|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = ((($182)) + 24|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = $12;
    $186 = (($184) + ($185<<2)|0);
    HEAP32[$186>>2] = $179;
    $187 = $15;
    $188 = $15;
    HEAP32[$188>>2] = $187;
    $189 = $15;
    $190 = ((($189)) + 4|0);
    HEAP32[$190>>2] = $187;
    $191 = $15;
    $$sink = 0;$$sink4 = $191;
   } else {
    $149 = $4;
    $150 = ((($149)) + 12|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = ((($151)) + 24|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = $12;
    $155 = (($153) + ($154<<2)|0);
    $156 = HEAP32[$155>>2]|0;
    $19 = $156;
    $157 = $19;
    $158 = ((($157)) + 4|0);
    $159 = HEAP32[$158>>2]|0;
    $20 = $159;
    $160 = $20;
    $161 = HEAP32[$160>>2]|0;
    $162 = $19;
    $163 = ($161|0)==($162|0);
    if (!($163)) {
     label = 27;
     break;
    }
    $164 = $15;
    $165 = $20;
    HEAP32[$165>>2] = $164;
    $166 = $20;
    $167 = $15;
    $168 = ((($167)) + 4|0);
    HEAP32[$168>>2] = $166;
    $169 = $15;
    $170 = $19;
    $171 = ((($170)) + 4|0);
    HEAP32[$171>>2] = $169;
    $172 = $19;
    $173 = $15;
    HEAP32[$173>>2] = $172;
    $174 = $20;
    $175 = ((($174)) + 12|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = (($176) + 1)|0;
    $178 = $15;
    $$sink = $177;$$sink4 = $178;
   }
   $192 = ((($$sink4)) + 12|0);
   HEAP32[$192>>2] = $$sink;
   $17 = 0;
   $193 = $11;
   $194 = $193 >>> 8;
   $195 = ($194|0)==(67);
   if ($195) {
    $196 = $11;
    $197 = $196 & 255;
    $198 = ($197|0)==(79);
    if ($198) {
     $199 = $10;
     $200 = $7;
     $201 = (($199) + ($200)|0);
     $202 = HEAP8[$201>>0]|0;
     $203 = $202 << 24 >> 24;
     $204 = ($203|0)!=(9);
     if ($204) {
      label = 33;
      break;
     }
     $212 = $7;
     $213 = (($212) + 1)|0;
     $7 = $213;
     $21 = $213;
     while(1) {
      $214 = $21;
      $215 = $6;
      $216 = ($214|0)<($215|0);
      if (!($216)) {
       break;
      }
      $217 = $10;
      $218 = $21;
      $219 = (($217) + ($218)|0);
      $220 = HEAP8[$219>>0]|0;
      $221 = $220 << 24 >> 24;
      $222 = ($221|0)!=(0);
      if (!($222)) {
       break;
      }
      $223 = $10;
      $224 = $21;
      $225 = (($223) + ($224)|0);
      $226 = HEAP8[$225>>0]|0;
      $227 = $226 << 24 >> 24;
      $228 = ($227|0)!=(10);
      if (!($228)) {
       break;
      }
      $229 = $21;
      $230 = (($229) + 1)|0;
      $21 = $230;
     }
     $231 = $4;
     $232 = ((($231)) + 24|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = (_pool_alloc($233)|0);
     $16 = $234;
     $235 = $15;
     $236 = ((($235)) + 8|0);
     HEAP32[$236>>2] = $234;
     $237 = ($234|0)!=(0|0);
     if (!($237)) {
      label = 40;
      break;
     }
     $238 = $4;
     $239 = ((($238)) + 16|0);
     $240 = HEAP32[$239>>2]|0;
     $241 = $10;
     $242 = $7;
     $243 = (($241) + ($242)|0);
     $244 = $21;
     $245 = $7;
     $246 = (($244) - ($245))|0;
     $247 = (_string_ndup($240,$243,$246)|0);
     $248 = $16;
     $249 = ((($248)) + 4|0);
     HEAP32[$249>>2] = $247;
     $250 = $21;
     $251 = $7;
     $252 = (($250) - ($251))|0;
     $253 = $16;
     $254 = ((($253)) + 8|0);
     HEAP32[$254>>2] = $252;
     $255 = $16;
     HEAP32[$255>>2] = 0;
     $256 = $16;
     $257 = ((($256)) + 4|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = ($258|0)!=(0|0);
     if (!($259)) {
      label = 42;
      break;
     }
     $260 = $21;
     $7 = $260;
    } else {
     label = 44;
    }
   } else {
    label = 44;
   }
   L38: do {
    if ((label|0) == 44) {
     while(1) {
      label = 0;
      $261 = $10;
      $262 = $7;
      $263 = (($261) + ($262)|0);
      $264 = HEAP8[$263>>0]|0;
      $265 = $264 << 24 >> 24;
      $266 = ($265|0)!=(9);
      if ($266) {
       label = 45;
       break L8;
      }
      $274 = $7;
      $275 = (($274) + 1)|0;
      $7 = $275;
      $22 = $275;
      while(1) {
       $276 = $22;
       $277 = $6;
       $278 = ($276|0)<($277|0);
       if (!($278)) {
        break;
       }
       $279 = $10;
       $280 = $22;
       $281 = (($279) + ($280)|0);
       $282 = HEAP8[$281>>0]|0;
       $283 = $282 << 24 >> 24;
       $284 = ($283|0)!=(0);
       if (!($284)) {
        break;
       }
       $285 = $10;
       $286 = $22;
       $287 = (($285) + ($286)|0);
       $288 = HEAP8[$287>>0]|0;
       $289 = $288 << 24 >> 24;
       $290 = ($289|0)!=(10);
       if (!($290)) {
        break;
       }
       $291 = $10;
       $292 = $22;
       $293 = (($291) + ($292)|0);
       $294 = HEAP8[$293>>0]|0;
       $295 = $294 << 24 >> 24;
       $296 = ($295|0)!=(9);
       if (!($296)) {
        break;
       }
       $297 = $22;
       $298 = (($297) + 1)|0;
       $22 = $298;
      }
      $299 = $4;
      $300 = ((($299)) + 24|0);
      $301 = HEAP32[$300>>2]|0;
      $302 = (_pool_alloc($301)|0);
      $16 = $302;
      $303 = ($302|0)!=(0|0);
      if (!($303)) {
       label = 53;
       break L8;
      }
      $304 = $4;
      $305 = ((($304)) + 16|0);
      $306 = HEAP32[$305>>2]|0;
      $307 = $10;
      $308 = $7;
      $309 = (($307) + ($308)|0);
      $310 = $22;
      $311 = $7;
      $312 = (($310) - ($311))|0;
      $313 = (_string_ndup($306,$309,$312)|0);
      $314 = $16;
      $315 = ((($314)) + 4|0);
      HEAP32[$315>>2] = $313;
      $316 = $22;
      $317 = $7;
      $318 = (($316) - ($317))|0;
      $319 = $16;
      $320 = ((($319)) + 8|0);
      HEAP32[$320>>2] = $318;
      $321 = $16;
      HEAP32[$321>>2] = 0;
      $322 = $16;
      $323 = ((($322)) + 4|0);
      $324 = HEAP32[$323>>2]|0;
      $325 = ($324|0)!=(0|0);
      if (!($325)) {
       label = 55;
       break L8;
      }
      $326 = $16;
      $327 = ((($326)) + 8|0);
      $328 = HEAP32[$327>>2]|0;
      $329 = ($328|0)<(3);
      if ($329) {
       label = 58;
       break L8;
      }
      $330 = $16;
      $331 = ((($330)) + 4|0);
      $332 = HEAP32[$331>>2]|0;
      $333 = ((($332)) + 2|0);
      $334 = HEAP8[$333>>0]|0;
      $335 = $334 << 24 >> 24;
      $336 = ($335|0)!=(58);
      if ($336) {
       label = 58;
       break L8;
      }
      $344 = $17;
      $345 = ($344|0)!=(0|0);
      $346 = $16;
      $347 = $15;
      $348 = ((($347)) + 8|0);
      $349 = $17;
      $$sink10 = $345 ? $349 : $348;
      HEAP32[$$sink10>>2] = $346;
      $350 = $16;
      $17 = $350;
      $351 = $22;
      $7 = $351;
      $352 = $7;
      $353 = $6;
      $354 = ($352|0)<($353|0);
      if (!($354)) {
       break L38;
      }
      $355 = $10;
      $356 = $7;
      $357 = (($355) + ($356)|0);
      $358 = HEAP8[$357>>0]|0;
      $359 = $358 << 24 >> 24;
      $360 = ($359|0)!=(0);
      if (!($360)) {
       break L38;
      }
      $361 = $10;
      $362 = $7;
      $363 = (($361) + ($362)|0);
      $364 = HEAP8[$363>>0]|0;
      $365 = $364 << 24 >> 24;
      $366 = ($365|0)!=(10);
      if ($366) {
       label = 44;
      } else {
       break;
      }
     }
    }
   } while(0);
   $367 = $4;
   $368 = $11;
   $369 = $15;
   $370 = (_sam_hdr_update_hashes($367,$368,$369)|0);
   $371 = (-1)==($370|0);
   if ($371) {
    label = 63;
    break;
   }
  }
  $372 = $7;
  $373 = (($372) + 1)|0;
  $7 = $373;
  $374 = $8;
  $375 = (($374) + 1)|0;
  $8 = $375;
 }
 switch (label|0) {
  case 9: {
   $54 = $7;
   $18 = $54;
   while(1) {
    $55 = $18;
    $56 = $6;
    $57 = ($55|0)<($56|0);
    if (!($57)) {
     break;
    }
    $58 = $10;
    $59 = $18;
    $60 = (($58) + ($59)|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61 << 24 >> 24;
    $63 = ($62|0)!=(0);
    if (!($63)) {
     break;
    }
    $64 = $10;
    $65 = $18;
    $66 = (($64) + ($65)|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67 << 24 >> 24;
    $69 = ($68|0)!=(10);
    if (!($69)) {
     break;
    }
    $70 = $18;
    $71 = (($70) + 1)|0;
    $18 = $71;
   }
   $72 = $10;
   $73 = $13;
   $74 = (($72) + ($73)|0);
   $75 = $6;
   $76 = $13;
   $77 = (($75) - ($76))|0;
   $78 = $8;
   _sam_hdr_error(16014,$74,$77,$78);
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 19: {
   $121 = $10;
   $122 = $13;
   $123 = (($121) + ($122)|0);
   $124 = $6;
   $125 = $13;
   $126 = (($124) - ($125))|0;
   $127 = $8;
   _sam_hdr_error(16050,$123,$126,$127);
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 22: {
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 24: {
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 27: {
   ___assert_fail((16096|0),(16109|0),335,(16134|0));
   // unreachable;
   break;
  }
  case 33: {
   $205 = $10;
   $206 = $13;
   $207 = (($205) + ($206)|0);
   $208 = $6;
   $209 = $13;
   $210 = (($208) - ($209))|0;
   $211 = $8;
   _sam_hdr_error(16152,$207,$210,$211);
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 40: {
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 42: {
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 45: {
   $267 = $10;
   $268 = $13;
   $269 = (($267) + ($268)|0);
   $270 = $6;
   $271 = $13;
   $272 = (($270) - ($271))|0;
   $273 = $8;
   _sam_hdr_error(16152,$269,$272,$273);
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 53: {
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 55: {
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 58: {
   $337 = $10;
   $338 = $13;
   $339 = (($337) + ($338)|0);
   $340 = $6;
   $341 = $13;
   $342 = (($340) - ($341))|0;
   $343 = $8;
   _sam_hdr_error(16164,$339,$342,$343);
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 63: {
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 65: {
   $3 = 0;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
 }
 return (0)|0;
}
function _ks_len($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _kputsn_510($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6;
 $9 = HEAP32[$8>>2]|0;
 $10 = $5;
 $11 = (($9) + ($10))|0;
 $12 = (($11) + 1)|0;
 $13 = $6;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12>>>0)>=($15>>>0);
 do {
  if ($16) {
   $17 = $6;
   $18 = HEAP32[$17>>2]|0;
   $19 = $5;
   $20 = (($18) + ($19))|0;
   $21 = (($20) + 2)|0;
   $22 = $6;
   $23 = ((($22)) + 4|0);
   HEAP32[$23>>2] = $21;
   $24 = $6;
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + -1)|0;
   HEAP32[$25>>2] = $27;
   $28 = $6;
   $29 = ((($28)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $30 >>> 1;
   $32 = $6;
   $33 = ((($32)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $34 | $31;
   HEAP32[$33>>2] = $35;
   $36 = $6;
   $37 = ((($36)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $38 >>> 2;
   $40 = $6;
   $41 = ((($40)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $42 | $39;
   HEAP32[$41>>2] = $43;
   $44 = $6;
   $45 = ((($44)) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $46 >>> 4;
   $48 = $6;
   $49 = ((($48)) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $50 | $47;
   HEAP32[$49>>2] = $51;
   $52 = $6;
   $53 = ((($52)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 >>> 8;
   $56 = $6;
   $57 = ((($56)) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $58 | $55;
   HEAP32[$57>>2] = $59;
   $60 = $6;
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $62 >>> 16;
   $64 = $6;
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $66 | $63;
   HEAP32[$65>>2] = $67;
   $68 = $6;
   $69 = ((($68)) + 4|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($70) + 1)|0;
   HEAP32[$69>>2] = $71;
   $72 = $6;
   $73 = ((($72)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $6;
   $76 = ((($75)) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (_realloc($74,$77)|0);
   $7 = $78;
   $79 = ($78|0)!=(0|0);
   if ($79) {
    $80 = $7;
    $81 = $6;
    $82 = ((($81)) + 8|0);
    HEAP32[$82>>2] = $80;
    break;
   }
   $3 = -1;
   $102 = $3;
   STACKTOP = sp;return ($102|0);
  }
 } while(0);
 $83 = $6;
 $84 = ((($83)) + 8|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $6;
 $87 = HEAP32[$86>>2]|0;
 $88 = (($85) + ($87)|0);
 $89 = $4;
 $90 = $5;
 _memcpy(($88|0),($89|0),($90|0))|0;
 $91 = $5;
 $92 = $6;
 $93 = HEAP32[$92>>2]|0;
 $94 = (($93) + ($91))|0;
 HEAP32[$92>>2] = $94;
 $95 = $6;
 $96 = ((($95)) + 8|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = $6;
 $99 = HEAP32[$98>>2]|0;
 $100 = (($97) + ($99)|0);
 HEAP8[$100>>0] = 0;
 $101 = $5;
 $3 = $101;
 $102 = $3;
 STACKTOP = sp;return ($102|0);
}
function _ks_str($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _sam_hdr_error($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $9 = $8;
  $10 = $6;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $5;
  $13 = $8;
  $14 = (($12) + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = ($16|0)!=(10);
  if (!($17)) {
   break;
  }
  $18 = $8;
  $19 = (($18) + 1)|0;
  $8 = $19;
 }
 $20 = HEAP32[2398]|0;
 $21 = $4;
 $22 = $7;
 $23 = $8;
 $24 = $5;
 HEAP32[$vararg_buffer>>2] = $21;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $22;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $23;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $24;
 (_fprintf($20,16189,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _kh_put_sam_hdr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $4;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16>>>0)>=($19>>>0);
 do {
  if ($20) {
   $21 = $4;
   $22 = HEAP32[$21>>2]|0;
   $23 = $4;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 << 1;
   $27 = ($22>>>0)>($26>>>0);
   $28 = $4;
   $29 = $4;
   $30 = HEAP32[$29>>2]|0;
   if ($27) {
    $31 = (($30) - 1)|0;
    $32 = (_kh_resize_sam_hdr($28,$31)|0);
    $33 = ($32|0)<(0);
    if (!($33)) {
     break;
    }
    $34 = $6;
    HEAP32[$34>>2] = -1;
    $35 = $4;
    $36 = HEAP32[$35>>2]|0;
    $3 = $36;
    $228 = $3;
    STACKTOP = sp;return ($228|0);
   } else {
    $37 = (($30) + 1)|0;
    $38 = (_kh_resize_sam_hdr($28,$37)|0);
    $39 = ($38|0)<(0);
    if (!($39)) {
     break;
    }
    $40 = $6;
    HEAP32[$40>>2] = -1;
    $41 = $4;
    $42 = HEAP32[$41>>2]|0;
    $3 = $42;
    $228 = $3;
    STACKTOP = sp;return ($228|0);
   }
  }
 } while(0);
 $43 = $4;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) - 1)|0;
 $12 = $45;
 $13 = 0;
 $46 = $4;
 $47 = HEAP32[$46>>2]|0;
 $10 = $47;
 $7 = $47;
 $48 = $5;
 $8 = $48;
 $49 = $8;
 $50 = $12;
 $51 = $49 & $50;
 $9 = $51;
 $52 = $4;
 $53 = ((($52)) + 16|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $9;
 $56 = $55 >>> 4;
 $57 = (($54) + ($56<<2)|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $9;
 $60 = $59 & 15;
 $61 = $60 << 1;
 $62 = $58 >>> $61;
 $63 = $62 & 2;
 $64 = ($63|0)!=(0);
 $65 = $9;
 do {
  if ($64) {
   $7 = $65;
  } else {
   $11 = $65;
   while(1) {
    $66 = $4;
    $67 = ((($66)) + 16|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $9;
    $70 = $69 >>> 4;
    $71 = (($68) + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $9;
    $74 = $73 & 15;
    $75 = $74 << 1;
    $76 = $72 >>> $75;
    $77 = $76 & 2;
    $78 = ($77|0)!=(0);
    if ($78) {
     break;
    }
    $79 = $4;
    $80 = ((($79)) + 16|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = $9;
    $83 = $82 >>> 4;
    $84 = (($81) + ($83<<2)|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $9;
    $87 = $86 & 15;
    $88 = $87 << 1;
    $89 = $85 >>> $88;
    $90 = $89 & 1;
    $91 = ($90|0)!=(0);
    if (!($91)) {
     $92 = $4;
     $93 = ((($92)) + 20|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = $9;
     $96 = (($94) + ($95<<2)|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = $5;
     $99 = ($97|0)==($98|0);
     $100 = $99 ^ 1;
     if (!($100)) {
      break;
     }
    }
    $101 = $4;
    $102 = ((($101)) + 16|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = $9;
    $105 = $104 >>> 4;
    $106 = (($103) + ($105<<2)|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = $9;
    $109 = $108 & 15;
    $110 = $109 << 1;
    $111 = $107 >>> $110;
    $112 = $111 & 1;
    $113 = ($112|0)!=(0);
    if ($113) {
     $114 = $9;
     $10 = $114;
    }
    $115 = $9;
    $116 = $13;
    $117 = (($116) + 1)|0;
    $13 = $117;
    $118 = (($115) + ($117))|0;
    $119 = $12;
    $120 = $118 & $119;
    $9 = $120;
    $121 = $9;
    $122 = $11;
    $123 = ($121|0)==($122|0);
    if ($123) {
     label = 16;
     break;
    }
   }
   if ((label|0) == 16) {
    $124 = $10;
    $7 = $124;
   }
   $125 = $7;
   $126 = $4;
   $127 = HEAP32[$126>>2]|0;
   $128 = ($125|0)==($127|0);
   if ($128) {
    $129 = $4;
    $130 = ((($129)) + 16|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = $9;
    $133 = $132 >>> 4;
    $134 = (($131) + ($133<<2)|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $9;
    $137 = $136 & 15;
    $138 = $137 << 1;
    $139 = $135 >>> $138;
    $140 = $139 & 2;
    $141 = ($140|0)!=(0);
    if ($141) {
     $142 = $10;
     $143 = $4;
     $144 = HEAP32[$143>>2]|0;
     $145 = ($142|0)!=($144|0);
     if ($145) {
      $146 = $10;
      $7 = $146;
      break;
     }
    }
    $147 = $9;
    $7 = $147;
   }
  }
 } while(0);
 $148 = $4;
 $149 = ((($148)) + 16|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = $7;
 $152 = $151 >>> 4;
 $153 = (($150) + ($152<<2)|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = $7;
 $156 = $155 & 15;
 $157 = $156 << 1;
 $158 = $154 >>> $157;
 $159 = $158 & 2;
 $160 = ($159|0)!=(0);
 do {
  if ($160) {
   $161 = $5;
   $162 = $4;
   $163 = ((($162)) + 20|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = $7;
   $166 = (($164) + ($165<<2)|0);
   HEAP32[$166>>2] = $161;
   $167 = $7;
   $168 = $167 & 15;
   $169 = $168 << 1;
   $170 = 3 << $169;
   $171 = $170 ^ -1;
   $172 = $4;
   $173 = ((($172)) + 16|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = $7;
   $176 = $175 >>> 4;
   $177 = (($174) + ($176<<2)|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = $178 & $171;
   HEAP32[$177>>2] = $179;
   $180 = $4;
   $181 = ((($180)) + 4|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = (($182) + 1)|0;
   HEAP32[$181>>2] = $183;
   $184 = $4;
   $185 = ((($184)) + 8|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = (($186) + 1)|0;
   HEAP32[$185>>2] = $187;
   $188 = $6;
   HEAP32[$188>>2] = 1;
  } else {
   $189 = $4;
   $190 = ((($189)) + 16|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = $7;
   $193 = $192 >>> 4;
   $194 = (($191) + ($193<<2)|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = $7;
   $197 = $196 & 15;
   $198 = $197 << 1;
   $199 = $195 >>> $198;
   $200 = $199 & 1;
   $201 = ($200|0)!=(0);
   if ($201) {
    $202 = $5;
    $203 = $4;
    $204 = ((($203)) + 20|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = $7;
    $207 = (($205) + ($206<<2)|0);
    HEAP32[$207>>2] = $202;
    $208 = $7;
    $209 = $208 & 15;
    $210 = $209 << 1;
    $211 = 3 << $210;
    $212 = $211 ^ -1;
    $213 = $4;
    $214 = ((($213)) + 16|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = $7;
    $217 = $216 >>> 4;
    $218 = (($215) + ($217<<2)|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = $219 & $212;
    HEAP32[$218>>2] = $220;
    $221 = $4;
    $222 = ((($221)) + 4|0);
    $223 = HEAP32[$222>>2]|0;
    $224 = (($223) + 1)|0;
    HEAP32[$222>>2] = $224;
    $225 = $6;
    HEAP32[$225>>2] = 2;
    break;
   } else {
    $226 = $6;
    HEAP32[$226>>2] = 0;
    break;
   }
  }
 } while(0);
 $227 = $7;
 $3 = $227;
 $228 = $3;
 STACKTOP = sp;return ($228|0);
}
function _sam_hdr_update_hashes($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $11 = sp + 60|0;
 $16 = sp + 40|0;
 $25 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $28 = $5;
 $29 = $28 >> 8;
 $30 = ($29|0)==(83);
 do {
  if ($30) {
   $31 = $5;
   $32 = $31 & 255;
   $33 = ($32|0)==(81);
   if ($33) {
    $34 = $4;
    $35 = ((($34)) + 28|0);
    $36 = HEAP32[$35>>2]|0;
    $9 = $36;
    $37 = $4;
    $38 = ((($37)) + 32|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $4;
    $41 = ((($40)) + 28|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (($42) + 1)|0;
    $44 = $43<<4;
    $45 = (_realloc($39,$44)|0);
    $8 = $45;
    $46 = $8;
    $47 = ($46|0)!=(0|0);
    if (!($47)) {
     $3 = -1;
     $671 = $3;
     STACKTOP = sp;return ($671|0);
    }
    $48 = $8;
    $49 = $4;
    $50 = ((($49)) + 32|0);
    HEAP32[$50>>2] = $48;
    $51 = $6;
    $52 = ((($51)) + 8|0);
    $53 = HEAP32[$52>>2]|0;
    $7 = $53;
    $54 = $4;
    $55 = ((($54)) + 32|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $9;
    $58 = (($56) + ($57<<4)|0);
    HEAP32[$58>>2] = 0;
    $59 = $4;
    $60 = ((($59)) + 32|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = $9;
    $63 = (($61) + ($62<<4)|0);
    $64 = ((($63)) + 4|0);
    HEAP32[$64>>2] = 0;
    $65 = $6;
    $66 = $4;
    $67 = ((($66)) + 32|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $9;
    $70 = (($68) + ($69<<4)|0);
    $71 = ((($70)) + 8|0);
    HEAP32[$71>>2] = $65;
    $72 = $7;
    $73 = $4;
    $74 = ((($73)) + 32|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $9;
    $77 = (($75) + ($76<<4)|0);
    $78 = ((($77)) + 12|0);
    HEAP32[$78>>2] = $72;
    while(1) {
     $79 = $7;
     $80 = ($79|0)!=(0|0);
     if (!($80)) {
      break;
     }
     $81 = $7;
     $82 = ((($81)) + 4|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = HEAP8[$83>>0]|0;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)==(83);
     if ($86) {
      $87 = $7;
      $88 = ((($87)) + 4|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = ((($89)) + 1|0);
      $91 = HEAP8[$90>>0]|0;
      $92 = $91 << 24 >> 24;
      $93 = ($92|0)==(78);
      if ($93) {
       $94 = $7;
       $95 = ((($94)) + 8|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = (_malloc($96)|0);
       $98 = $4;
       $99 = ((($98)) + 32|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = $9;
       $102 = (($100) + ($101<<4)|0);
       HEAP32[$102>>2] = $97;
       $103 = ($97|0)!=(0|0);
       if (!($103)) {
        label = 10;
        break;
       }
       $104 = $4;
       $105 = ((($104)) + 32|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = $9;
       $108 = (($106) + ($107<<4)|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = $7;
       $111 = ((($110)) + 4|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = ((($112)) + 3|0);
       $114 = $7;
       $115 = ((($114)) + 8|0);
       $116 = HEAP32[$115>>2]|0;
       $117 = (($116) - 3)|0;
       (_strncpy($109,$113,$117)|0);
       $118 = $4;
       $119 = ((($118)) + 32|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = $9;
       $122 = (($120) + ($121<<4)|0);
       $123 = HEAP32[$122>>2]|0;
       $124 = $7;
       $125 = ((($124)) + 8|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = (($126) - 3)|0;
       $128 = (($123) + ($127)|0);
       HEAP8[$128>>0] = 0;
      } else {
       label = 12;
      }
     } else {
      label = 12;
     }
     if ((label|0) == 12) {
      label = 0;
      $129 = $7;
      $130 = ((($129)) + 4|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = HEAP8[$131>>0]|0;
      $133 = $132 << 24 >> 24;
      $134 = ($133|0)==(76);
      if ($134) {
       $135 = $7;
       $136 = ((($135)) + 4|0);
       $137 = HEAP32[$136>>2]|0;
       $138 = ((($137)) + 1|0);
       $139 = HEAP8[$138>>0]|0;
       $140 = $139 << 24 >> 24;
       $141 = ($140|0)==(78);
       if ($141) {
        $142 = $7;
        $143 = ((($142)) + 4|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = ((($144)) + 3|0);
        $146 = (_atoi($145)|0);
        $147 = $4;
        $148 = ((($147)) + 32|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = $9;
        $151 = (($149) + ($150<<4)|0);
        $152 = ((($151)) + 4|0);
        HEAP32[$152>>2] = $146;
       }
      }
     }
     $153 = $7;
     $154 = HEAP32[$153>>2]|0;
     $7 = $154;
    }
    if ((label|0) == 10) {
     $3 = -1;
     $671 = $3;
     STACKTOP = sp;return ($671|0);
    }
    $155 = $4;
    $156 = ((($155)) + 32|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = $9;
    $159 = (($157) + ($158<<4)|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = ($160|0)!=(0|0);
    if (!($161)) {
     $3 = -1;
     $671 = $3;
     STACKTOP = sp;return ($671|0);
    }
    $162 = $4;
    $163 = ((($162)) + 36|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = $4;
    $166 = ((($165)) + 32|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = $9;
    $169 = (($167) + ($168<<4)|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = (_kh_put_m_s2i($164,$170,$11)|0);
    $10 = $171;
    $172 = HEAP32[$11>>2]|0;
    $173 = (-1)==($172|0);
    if (!($173)) {
     $174 = $9;
     $175 = $4;
     $176 = ((($175)) + 36|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = ((($177)) + 24|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = $10;
     $181 = (($179) + ($180<<2)|0);
     HEAP32[$181>>2] = $174;
     $182 = $4;
     $183 = ((($182)) + 28|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = (($184) + 1)|0;
     HEAP32[$183>>2] = $185;
     break;
    }
    $3 = -1;
    $671 = $3;
    STACKTOP = sp;return ($671|0);
   }
  }
 } while(0);
 $186 = $5;
 $187 = $186 >> 8;
 $188 = ($187|0)==(82);
 do {
  if ($188) {
   $189 = $5;
   $190 = $189 & 255;
   $191 = ($190|0)==(71);
   if ($191) {
    $192 = $4;
    $193 = ((($192)) + 40|0);
    $194 = HEAP32[$193>>2]|0;
    $14 = $194;
    $195 = $4;
    $196 = ((($195)) + 44|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = $4;
    $199 = ((($198)) + 40|0);
    $200 = HEAP32[$199>>2]|0;
    $201 = (($200) + 1)|0;
    $202 = ($201*20)|0;
    $203 = (_realloc($197,$202)|0);
    $13 = $203;
    $204 = $13;
    $205 = ($204|0)!=(0|0);
    if (!($205)) {
     $3 = -1;
     $671 = $3;
     STACKTOP = sp;return ($671|0);
    }
    $206 = $13;
    $207 = $4;
    $208 = ((($207)) + 44|0);
    HEAP32[$208>>2] = $206;
    $209 = $6;
    $210 = ((($209)) + 8|0);
    $211 = HEAP32[$210>>2]|0;
    $12 = $211;
    $212 = $4;
    $213 = ((($212)) + 44|0);
    $214 = HEAP32[$213>>2]|0;
    $215 = $14;
    $216 = (($214) + (($215*20)|0)|0);
    HEAP32[$216>>2] = 0;
    $217 = $4;
    $218 = ((($217)) + 44|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = $14;
    $221 = (($219) + (($220*20)|0)|0);
    $222 = ((($221)) + 12|0);
    HEAP32[$222>>2] = 0;
    $223 = $6;
    $224 = $4;
    $225 = ((($224)) + 44|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = $14;
    $228 = (($226) + (($227*20)|0)|0);
    $229 = ((($228)) + 4|0);
    HEAP32[$229>>2] = $223;
    $230 = $12;
    $231 = $4;
    $232 = ((($231)) + 44|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = $14;
    $235 = (($233) + (($234*20)|0)|0);
    $236 = ((($235)) + 8|0);
    HEAP32[$236>>2] = $230;
    $237 = $14;
    $238 = $4;
    $239 = ((($238)) + 44|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = $14;
    $242 = (($240) + (($241*20)|0)|0);
    $243 = ((($242)) + 16|0);
    HEAP32[$243>>2] = $237;
    while(1) {
     $244 = $12;
     $245 = ($244|0)!=(0|0);
     if (!($245)) {
      break;
     }
     $246 = $12;
     $247 = ((($246)) + 4|0);
     $248 = HEAP32[$247>>2]|0;
     $249 = HEAP8[$248>>0]|0;
     $250 = $249 << 24 >> 24;
     $251 = ($250|0)==(73);
     if ($251) {
      $252 = $12;
      $253 = ((($252)) + 4|0);
      $254 = HEAP32[$253>>2]|0;
      $255 = ((($254)) + 1|0);
      $256 = HEAP8[$255>>0]|0;
      $257 = $256 << 24 >> 24;
      $258 = ($257|0)==(68);
      if ($258) {
       $259 = $12;
       $260 = ((($259)) + 8|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = (_malloc($261)|0);
       $263 = $4;
       $264 = ((($263)) + 44|0);
       $265 = HEAP32[$264>>2]|0;
       $266 = $14;
       $267 = (($265) + (($266*20)|0)|0);
       HEAP32[$267>>2] = $262;
       $268 = ($262|0)!=(0|0);
       if (!($268)) {
        label = 30;
        break;
       }
       $269 = $4;
       $270 = ((($269)) + 44|0);
       $271 = HEAP32[$270>>2]|0;
       $272 = $14;
       $273 = (($271) + (($272*20)|0)|0);
       $274 = HEAP32[$273>>2]|0;
       $275 = $12;
       $276 = ((($275)) + 4|0);
       $277 = HEAP32[$276>>2]|0;
       $278 = ((($277)) + 3|0);
       $279 = $12;
       $280 = ((($279)) + 8|0);
       $281 = HEAP32[$280>>2]|0;
       $282 = (($281) - 3)|0;
       (_strncpy($274,$278,$282)|0);
       $283 = $4;
       $284 = ((($283)) + 44|0);
       $285 = HEAP32[$284>>2]|0;
       $286 = $14;
       $287 = (($285) + (($286*20)|0)|0);
       $288 = HEAP32[$287>>2]|0;
       $289 = $12;
       $290 = ((($289)) + 8|0);
       $291 = HEAP32[$290>>2]|0;
       $292 = (($291) - 3)|0;
       $293 = (($288) + ($292)|0);
       HEAP8[$293>>0] = 0;
       $294 = $4;
       $295 = ((($294)) + 44|0);
       $296 = HEAP32[$295>>2]|0;
       $297 = $14;
       $298 = (($296) + (($297*20)|0)|0);
       $299 = HEAP32[$298>>2]|0;
       $300 = (_strlen($299)|0);
       $301 = $4;
       $302 = ((($301)) + 44|0);
       $303 = HEAP32[$302>>2]|0;
       $304 = $14;
       $305 = (($303) + (($304*20)|0)|0);
       $306 = ((($305)) + 12|0);
       HEAP32[$306>>2] = $300;
      }
     }
     $307 = $12;
     $308 = HEAP32[$307>>2]|0;
     $12 = $308;
    }
    if ((label|0) == 30) {
     $3 = -1;
     $671 = $3;
     STACKTOP = sp;return ($671|0);
    }
    $309 = $4;
    $310 = ((($309)) + 44|0);
    $311 = HEAP32[$310>>2]|0;
    $312 = $14;
    $313 = (($311) + (($312*20)|0)|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = ($314|0)!=(0|0);
    if (!($315)) {
     $3 = -1;
     $671 = $3;
     STACKTOP = sp;return ($671|0);
    }
    $316 = $4;
    $317 = ((($316)) + 48|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = $4;
    $320 = ((($319)) + 44|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = $14;
    $323 = (($321) + (($322*20)|0)|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = (_kh_put_m_s2i($318,$324,$16)|0);
    $15 = $325;
    $326 = HEAP32[$16>>2]|0;
    $327 = (-1)==($326|0);
    if (!($327)) {
     $328 = $14;
     $329 = $4;
     $330 = ((($329)) + 48|0);
     $331 = HEAP32[$330>>2]|0;
     $332 = ((($331)) + 24|0);
     $333 = HEAP32[$332>>2]|0;
     $334 = $15;
     $335 = (($333) + ($334<<2)|0);
     HEAP32[$335>>2] = $328;
     $336 = $4;
     $337 = ((($336)) + 40|0);
     $338 = HEAP32[$337>>2]|0;
     $339 = (($338) + 1)|0;
     HEAP32[$337>>2] = $339;
     break;
    }
    $3 = -1;
    $671 = $3;
    STACKTOP = sp;return ($671|0);
   }
  }
 } while(0);
 $340 = $5;
 $341 = $340 >> 8;
 $342 = ($341|0)==(80);
 if ($342) {
  $343 = $5;
  $344 = $343 & 255;
  $345 = ($344|0)==(71);
  if ($345) {
   $346 = $4;
   $347 = ((($346)) + 52|0);
   $348 = HEAP32[$347>>2]|0;
   $19 = $348;
   $349 = $4;
   $350 = ((($349)) + 64|0);
   $351 = HEAP32[$350>>2]|0;
   $352 = $4;
   $353 = ((($352)) + 52|0);
   $354 = HEAP32[$353>>2]|0;
   $355 = (($354) + 1)|0;
   $356 = ($355*24)|0;
   $357 = (_realloc($351,$356)|0);
   $18 = $357;
   $358 = $18;
   $359 = ($358|0)!=(0|0);
   if (!($359)) {
    $3 = -1;
    $671 = $3;
    STACKTOP = sp;return ($671|0);
   }
   $360 = $18;
   $361 = $4;
   $362 = ((($361)) + 64|0);
   HEAP32[$362>>2] = $360;
   $363 = $6;
   $364 = ((($363)) + 8|0);
   $365 = HEAP32[$364>>2]|0;
   $17 = $365;
   $366 = $4;
   $367 = ((($366)) + 64|0);
   $368 = HEAP32[$367>>2]|0;
   $369 = $19;
   $370 = (($368) + (($369*24)|0)|0);
   HEAP32[$370>>2] = 0;
   $371 = $4;
   $372 = ((($371)) + 64|0);
   $373 = HEAP32[$372>>2]|0;
   $374 = $19;
   $375 = (($373) + (($374*24)|0)|0);
   $376 = ((($375)) + 12|0);
   HEAP32[$376>>2] = 0;
   $377 = $6;
   $378 = $4;
   $379 = ((($378)) + 64|0);
   $380 = HEAP32[$379>>2]|0;
   $381 = $19;
   $382 = (($380) + (($381*24)|0)|0);
   $383 = ((($382)) + 4|0);
   HEAP32[$383>>2] = $377;
   $384 = $17;
   $385 = $4;
   $386 = ((($385)) + 64|0);
   $387 = HEAP32[$386>>2]|0;
   $388 = $19;
   $389 = (($387) + (($388*24)|0)|0);
   $390 = ((($389)) + 8|0);
   HEAP32[$390>>2] = $384;
   $391 = $19;
   $392 = $4;
   $393 = ((($392)) + 64|0);
   $394 = HEAP32[$393>>2]|0;
   $395 = $19;
   $396 = (($394) + (($395*24)|0)|0);
   $397 = ((($396)) + 16|0);
   HEAP32[$397>>2] = $391;
   $398 = $4;
   $399 = ((($398)) + 64|0);
   $400 = HEAP32[$399>>2]|0;
   $401 = $19;
   $402 = (($400) + (($401*24)|0)|0);
   $403 = ((($402)) + 20|0);
   HEAP32[$403>>2] = -1;
   while(1) {
    $404 = $17;
    $405 = ($404|0)!=(0|0);
    if (!($405)) {
     break;
    }
    $406 = $17;
    $407 = ((($406)) + 4|0);
    $408 = HEAP32[$407>>2]|0;
    $409 = HEAP8[$408>>0]|0;
    $410 = $409 << 24 >> 24;
    $411 = ($410|0)==(73);
    if ($411) {
     $412 = $17;
     $413 = ((($412)) + 4|0);
     $414 = HEAP32[$413>>2]|0;
     $415 = ((($414)) + 1|0);
     $416 = HEAP8[$415>>0]|0;
     $417 = $416 << 24 >> 24;
     $418 = ($417|0)==(68);
     if ($418) {
      $419 = $17;
      $420 = ((($419)) + 8|0);
      $421 = HEAP32[$420>>2]|0;
      $422 = (_malloc($421)|0);
      $423 = $4;
      $424 = ((($423)) + 64|0);
      $425 = HEAP32[$424>>2]|0;
      $426 = $19;
      $427 = (($425) + (($426*24)|0)|0);
      HEAP32[$427>>2] = $422;
      $428 = ($422|0)!=(0|0);
      if (!($428)) {
       label = 47;
       break;
      }
      $429 = $4;
      $430 = ((($429)) + 64|0);
      $431 = HEAP32[$430>>2]|0;
      $432 = $19;
      $433 = (($431) + (($432*24)|0)|0);
      $434 = HEAP32[$433>>2]|0;
      $435 = $17;
      $436 = ((($435)) + 4|0);
      $437 = HEAP32[$436>>2]|0;
      $438 = ((($437)) + 3|0);
      $439 = $17;
      $440 = ((($439)) + 8|0);
      $441 = HEAP32[$440>>2]|0;
      $442 = (($441) - 3)|0;
      (_strncpy($434,$438,$442)|0);
      $443 = $4;
      $444 = ((($443)) + 64|0);
      $445 = HEAP32[$444>>2]|0;
      $446 = $19;
      $447 = (($445) + (($446*24)|0)|0);
      $448 = HEAP32[$447>>2]|0;
      $449 = $17;
      $450 = ((($449)) + 8|0);
      $451 = HEAP32[$450>>2]|0;
      $452 = (($451) - 3)|0;
      $453 = (($448) + ($452)|0);
      HEAP8[$453>>0] = 0;
      $454 = $4;
      $455 = ((($454)) + 64|0);
      $456 = HEAP32[$455>>2]|0;
      $457 = $19;
      $458 = (($456) + (($457*24)|0)|0);
      $459 = HEAP32[$458>>2]|0;
      $460 = (_strlen($459)|0);
      $461 = $4;
      $462 = ((($461)) + 64|0);
      $463 = HEAP32[$462>>2]|0;
      $464 = $19;
      $465 = (($463) + (($464*24)|0)|0);
      $466 = ((($465)) + 12|0);
      HEAP32[$466>>2] = $460;
     } else {
      label = 49;
     }
    } else {
     label = 49;
    }
    L75: do {
     if ((label|0) == 49) {
      label = 0;
      $467 = $17;
      $468 = ((($467)) + 4|0);
      $469 = HEAP32[$468>>2]|0;
      $470 = HEAP8[$469>>0]|0;
      $471 = $470 << 24 >> 24;
      $472 = ($471|0)==(80);
      if ($472) {
       $473 = $17;
       $474 = ((($473)) + 4|0);
       $475 = HEAP32[$474>>2]|0;
       $476 = ((($475)) + 1|0);
       $477 = HEAP8[$476>>0]|0;
       $478 = $477 << 24 >> 24;
       $479 = ($478|0)==(80);
       if ($479) {
        $480 = $17;
        $481 = ((($480)) + 4|0);
        $482 = HEAP32[$481>>2]|0;
        $483 = $17;
        $484 = ((($483)) + 8|0);
        $485 = HEAP32[$484>>2]|0;
        $486 = (($482) + ($485)|0);
        $487 = HEAP8[$486>>0]|0;
        $21 = $487;
        $488 = $17;
        $489 = ((($488)) + 4|0);
        $490 = HEAP32[$489>>2]|0;
        $491 = $17;
        $492 = ((($491)) + 8|0);
        $493 = HEAP32[$492>>2]|0;
        $494 = (($490) + ($493)|0);
        HEAP8[$494>>0] = 0;
        $495 = $4;
        $496 = ((($495)) + 68|0);
        $497 = HEAP32[$496>>2]|0;
        $498 = $17;
        $499 = ((($498)) + 4|0);
        $500 = HEAP32[$499>>2]|0;
        $501 = ((($500)) + 3|0);
        $502 = (_kh_get_m_s2i($497,$501)|0);
        $20 = $502;
        $503 = $21;
        $504 = $17;
        $505 = ((($504)) + 4|0);
        $506 = HEAP32[$505>>2]|0;
        $507 = $17;
        $508 = ((($507)) + 8|0);
        $509 = HEAP32[$508>>2]|0;
        $510 = (($506) + ($509)|0);
        HEAP8[$510>>0] = $503;
        $511 = $20;
        $512 = $4;
        $513 = ((($512)) + 68|0);
        $514 = HEAP32[$513>>2]|0;
        $515 = HEAP32[$514>>2]|0;
        $516 = ($511|0)!=($515|0);
        $517 = $4;
        if (!($516)) {
         $594 = ((($517)) + 64|0);
         $595 = HEAP32[$594>>2]|0;
         $596 = $19;
         $597 = (($595) + (($596*24)|0)|0);
         $598 = ((($597)) + 20|0);
         HEAP32[$598>>2] = -1;
         break;
        }
        $518 = ((($517)) + 68|0);
        $519 = HEAP32[$518>>2]|0;
        $520 = ((($519)) + 24|0);
        $521 = HEAP32[$520>>2]|0;
        $522 = $20;
        $523 = (($521) + ($522<<2)|0);
        $524 = HEAP32[$523>>2]|0;
        $22 = $524;
        $525 = $4;
        $526 = ((($525)) + 64|0);
        $527 = HEAP32[$526>>2]|0;
        $528 = $22;
        $529 = (($527) + (($528*24)|0)|0);
        $530 = ((($529)) + 16|0);
        $531 = HEAP32[$530>>2]|0;
        $532 = $4;
        $533 = ((($532)) + 64|0);
        $534 = HEAP32[$533>>2]|0;
        $535 = $19;
        $536 = (($534) + (($535*24)|0)|0);
        $537 = ((($536)) + 20|0);
        HEAP32[$537>>2] = $531;
        $538 = $4;
        $539 = ((($538)) + 56|0);
        $540 = HEAP32[$539>>2]|0;
        $541 = ($540|0)>(0);
        if ($541) {
         $542 = $4;
         $543 = ((($542)) + 72|0);
         $544 = HEAP32[$543>>2]|0;
         $545 = $4;
         $546 = ((($545)) + 56|0);
         $547 = HEAP32[$546>>2]|0;
         $548 = (($547) - 1)|0;
         $549 = (($544) + ($548<<2)|0);
         $550 = HEAP32[$549>>2]|0;
         $551 = $22;
         $552 = ($550|0)==($551|0);
         if ($552) {
          $553 = $4;
          $554 = ((($553)) + 56|0);
          $555 = HEAP32[$554>>2]|0;
          $556 = (($555) + -1)|0;
          HEAP32[$554>>2] = $556;
          break;
         }
        }
        $23 = 0;
        while(1) {
         $557 = $23;
         $558 = $4;
         $559 = ((($558)) + 56|0);
         $560 = HEAP32[$559>>2]|0;
         $561 = ($557|0)<($560|0);
         if (!($561)) {
          break L75;
         }
         $562 = $4;
         $563 = ((($562)) + 72|0);
         $564 = HEAP32[$563>>2]|0;
         $565 = $23;
         $566 = (($564) + ($565<<2)|0);
         $567 = HEAP32[$566>>2]|0;
         $568 = $22;
         $569 = ($567|0)==($568|0);
         if ($569) {
          $570 = $4;
          $571 = ((($570)) + 72|0);
          $572 = HEAP32[$571>>2]|0;
          $573 = $23;
          $574 = (($572) + ($573<<2)|0);
          $575 = $4;
          $576 = ((($575)) + 72|0);
          $577 = HEAP32[$576>>2]|0;
          $578 = $23;
          $579 = (($578) + 1)|0;
          $580 = (($577) + ($579<<2)|0);
          $581 = $4;
          $582 = ((($581)) + 56|0);
          $583 = HEAP32[$582>>2]|0;
          $584 = $23;
          $585 = (($583) - ($584))|0;
          $586 = (($585) - 1)|0;
          $587 = $586<<2;
          _memmove(($574|0),($580|0),($587|0))|0;
          $588 = $4;
          $589 = ((($588)) + 56|0);
          $590 = HEAP32[$589>>2]|0;
          $591 = (($590) + -1)|0;
          HEAP32[$589>>2] = $591;
         }
         $592 = $23;
         $593 = (($592) + 1)|0;
         $23 = $593;
        }
       }
      }
     }
    } while(0);
    $599 = $17;
    $600 = HEAP32[$599>>2]|0;
    $17 = $600;
   }
   if ((label|0) == 47) {
    $3 = -1;
    $671 = $3;
    STACKTOP = sp;return ($671|0);
   }
   $601 = $4;
   $602 = ((($601)) + 64|0);
   $603 = HEAP32[$602>>2]|0;
   $604 = $19;
   $605 = (($603) + (($604*24)|0)|0);
   $606 = HEAP32[$605>>2]|0;
   $607 = ($606|0)!=(0|0);
   if (!($607)) {
    $3 = -1;
    $671 = $3;
    STACKTOP = sp;return ($671|0);
   }
   $608 = $4;
   $609 = ((($608)) + 68|0);
   $610 = HEAP32[$609>>2]|0;
   $611 = $4;
   $612 = ((($611)) + 64|0);
   $613 = HEAP32[$612>>2]|0;
   $614 = $19;
   $615 = (($613) + (($614*24)|0)|0);
   $616 = HEAP32[$615>>2]|0;
   $617 = (_kh_put_m_s2i($610,$616,$25)|0);
   $24 = $617;
   $618 = HEAP32[$25>>2]|0;
   $619 = (-1)==($618|0);
   if ($619) {
    $3 = -1;
    $671 = $3;
    STACKTOP = sp;return ($671|0);
   }
   $620 = $19;
   $621 = $4;
   $622 = ((($621)) + 68|0);
   $623 = HEAP32[$622>>2]|0;
   $624 = ((($623)) + 24|0);
   $625 = HEAP32[$624>>2]|0;
   $626 = $24;
   $627 = (($625) + ($626<<2)|0);
   HEAP32[$627>>2] = $620;
   $628 = $4;
   $629 = ((($628)) + 56|0);
   $630 = HEAP32[$629>>2]|0;
   $631 = $4;
   $632 = ((($631)) + 60|0);
   $633 = HEAP32[$632>>2]|0;
   $634 = ($630|0)>=($633|0);
   do {
    if ($634) {
     $635 = $4;
     $636 = ((($635)) + 60|0);
     $637 = HEAP32[$636>>2]|0;
     $638 = ($637|0)!=(0);
     if ($638) {
      $639 = $4;
      $640 = ((($639)) + 60|0);
      $641 = HEAP32[$640>>2]|0;
      $642 = $641<<1;
      $643 = $642;
     } else {
      $643 = 4;
     }
     $27 = $643;
     $644 = $4;
     $645 = ((($644)) + 72|0);
     $646 = HEAP32[$645>>2]|0;
     $647 = $27;
     $648 = $647<<2;
     $649 = (_realloc($646,$648)|0);
     $26 = $649;
     $650 = $26;
     $651 = ($650|0)!=(0|0);
     if ($651) {
      $652 = $27;
      $653 = $4;
      $654 = ((($653)) + 60|0);
      HEAP32[$654>>2] = $652;
      $655 = $26;
      $656 = $4;
      $657 = ((($656)) + 72|0);
      HEAP32[$657>>2] = $655;
      break;
     }
     $3 = -1;
     $671 = $3;
     STACKTOP = sp;return ($671|0);
    }
   } while(0);
   $658 = $19;
   $659 = $4;
   $660 = ((($659)) + 72|0);
   $661 = HEAP32[$660>>2]|0;
   $662 = $4;
   $663 = ((($662)) + 56|0);
   $664 = HEAP32[$663>>2]|0;
   $665 = (($664) + 1)|0;
   HEAP32[$663>>2] = $665;
   $666 = (($661) + ($664<<2)|0);
   HEAP32[$666>>2] = $658;
   $667 = $4;
   $668 = ((($667)) + 52|0);
   $669 = HEAP32[$668>>2]|0;
   $670 = (($669) + 1)|0;
   HEAP32[$668>>2] = $670;
  }
 }
 $3 = 0;
 $671 = $3;
 STACKTOP = sp;return ($671|0);
}
function _kh_put_m_s2i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $4;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16>>>0)>=($19>>>0);
 do {
  if ($20) {
   $21 = $4;
   $22 = HEAP32[$21>>2]|0;
   $23 = $4;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 << 1;
   $27 = ($22>>>0)>($26>>>0);
   $28 = $4;
   $29 = $4;
   $30 = HEAP32[$29>>2]|0;
   if ($27) {
    $31 = (($30) - 1)|0;
    $32 = (_kh_resize_m_s2i($28,$31)|0);
    $33 = ($32|0)<(0);
    if (!($33)) {
     break;
    }
    $34 = $6;
    HEAP32[$34>>2] = -1;
    $35 = $4;
    $36 = HEAP32[$35>>2]|0;
    $3 = $36;
    $230 = $3;
    STACKTOP = sp;return ($230|0);
   } else {
    $37 = (($30) + 1)|0;
    $38 = (_kh_resize_m_s2i($28,$37)|0);
    $39 = ($38|0)<(0);
    if (!($39)) {
     break;
    }
    $40 = $6;
    HEAP32[$40>>2] = -1;
    $41 = $4;
    $42 = HEAP32[$41>>2]|0;
    $3 = $42;
    $230 = $3;
    STACKTOP = sp;return ($230|0);
   }
  }
 } while(0);
 $43 = $4;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) - 1)|0;
 $12 = $45;
 $13 = 0;
 $46 = $4;
 $47 = HEAP32[$46>>2]|0;
 $10 = $47;
 $7 = $47;
 $48 = $5;
 $49 = (___ac_X31_hash_string_517($48)|0);
 $8 = $49;
 $50 = $8;
 $51 = $12;
 $52 = $50 & $51;
 $9 = $52;
 $53 = $4;
 $54 = ((($53)) + 16|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $9;
 $57 = $56 >>> 4;
 $58 = (($55) + ($57<<2)|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $9;
 $61 = $60 & 15;
 $62 = $61 << 1;
 $63 = $59 >>> $62;
 $64 = $63 & 2;
 $65 = ($64|0)!=(0);
 $66 = $9;
 do {
  if ($65) {
   $7 = $66;
  } else {
   $11 = $66;
   while(1) {
    $67 = $4;
    $68 = ((($67)) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $9;
    $71 = $70 >>> 4;
    $72 = (($69) + ($71<<2)|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $9;
    $75 = $74 & 15;
    $76 = $75 << 1;
    $77 = $73 >>> $76;
    $78 = $77 & 2;
    $79 = ($78|0)!=(0);
    if ($79) {
     break;
    }
    $80 = $4;
    $81 = ((($80)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $9;
    $84 = $83 >>> 4;
    $85 = (($82) + ($84<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $9;
    $88 = $87 & 15;
    $89 = $88 << 1;
    $90 = $86 >>> $89;
    $91 = $90 & 1;
    $92 = ($91|0)!=(0);
    if (!($92)) {
     $93 = $4;
     $94 = ((($93)) + 20|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = $9;
     $97 = (($95) + ($96<<2)|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $5;
     $100 = (_strcmp($98,$99)|0);
     $101 = ($100|0)==(0);
     $102 = $101 ^ 1;
     if (!($102)) {
      break;
     }
    }
    $103 = $4;
    $104 = ((($103)) + 16|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $9;
    $107 = $106 >>> 4;
    $108 = (($105) + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $9;
    $111 = $110 & 15;
    $112 = $111 << 1;
    $113 = $109 >>> $112;
    $114 = $113 & 1;
    $115 = ($114|0)!=(0);
    if ($115) {
     $116 = $9;
     $10 = $116;
    }
    $117 = $9;
    $118 = $13;
    $119 = (($118) + 1)|0;
    $13 = $119;
    $120 = (($117) + ($119))|0;
    $121 = $12;
    $122 = $120 & $121;
    $9 = $122;
    $123 = $9;
    $124 = $11;
    $125 = ($123|0)==($124|0);
    if ($125) {
     label = 16;
     break;
    }
   }
   if ((label|0) == 16) {
    $126 = $10;
    $7 = $126;
   }
   $127 = $7;
   $128 = $4;
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = $4;
    $132 = ((($131)) + 16|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = $9;
    $135 = $134 >>> 4;
    $136 = (($133) + ($135<<2)|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $9;
    $139 = $138 & 15;
    $140 = $139 << 1;
    $141 = $137 >>> $140;
    $142 = $141 & 2;
    $143 = ($142|0)!=(0);
    if ($143) {
     $144 = $10;
     $145 = $4;
     $146 = HEAP32[$145>>2]|0;
     $147 = ($144|0)!=($146|0);
     if ($147) {
      $148 = $10;
      $7 = $148;
      break;
     }
    }
    $149 = $9;
    $7 = $149;
   }
  }
 } while(0);
 $150 = $4;
 $151 = ((($150)) + 16|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = $7;
 $154 = $153 >>> 4;
 $155 = (($152) + ($154<<2)|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $7;
 $158 = $157 & 15;
 $159 = $158 << 1;
 $160 = $156 >>> $159;
 $161 = $160 & 2;
 $162 = ($161|0)!=(0);
 do {
  if ($162) {
   $163 = $5;
   $164 = $4;
   $165 = ((($164)) + 20|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = $7;
   $168 = (($166) + ($167<<2)|0);
   HEAP32[$168>>2] = $163;
   $169 = $7;
   $170 = $169 & 15;
   $171 = $170 << 1;
   $172 = 3 << $171;
   $173 = $172 ^ -1;
   $174 = $4;
   $175 = ((($174)) + 16|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = $7;
   $178 = $177 >>> 4;
   $179 = (($176) + ($178<<2)|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $180 & $173;
   HEAP32[$179>>2] = $181;
   $182 = $4;
   $183 = ((($182)) + 4|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (($184) + 1)|0;
   HEAP32[$183>>2] = $185;
   $186 = $4;
   $187 = ((($186)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = (($188) + 1)|0;
   HEAP32[$187>>2] = $189;
   $190 = $6;
   HEAP32[$190>>2] = 1;
  } else {
   $191 = $4;
   $192 = ((($191)) + 16|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $7;
   $195 = $194 >>> 4;
   $196 = (($193) + ($195<<2)|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $7;
   $199 = $198 & 15;
   $200 = $199 << 1;
   $201 = $197 >>> $200;
   $202 = $201 & 1;
   $203 = ($202|0)!=(0);
   if ($203) {
    $204 = $5;
    $205 = $4;
    $206 = ((($205)) + 20|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = $7;
    $209 = (($207) + ($208<<2)|0);
    HEAP32[$209>>2] = $204;
    $210 = $7;
    $211 = $210 & 15;
    $212 = $211 << 1;
    $213 = 3 << $212;
    $214 = $213 ^ -1;
    $215 = $4;
    $216 = ((($215)) + 16|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = $7;
    $219 = $218 >>> 4;
    $220 = (($217) + ($219<<2)|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = $221 & $214;
    HEAP32[$220>>2] = $222;
    $223 = $4;
    $224 = ((($223)) + 4|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = (($225) + 1)|0;
    HEAP32[$224>>2] = $226;
    $227 = $6;
    HEAP32[$227>>2] = 2;
    break;
   } else {
    $228 = $6;
    HEAP32[$228>>2] = 0;
    break;
   }
  }
 } while(0);
 $229 = $7;
 $3 = $229;
 $230 = $3;
 STACKTOP = sp;return ($230|0);
}
function _kh_get_m_s2i($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $2 = 0;
  $86 = $2;
  STACKTOP = sp;return ($86|0);
 }
 $9 = 0;
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - 1)|0;
 $8 = $15;
 $16 = $4;
 $17 = (___ac_X31_hash_string_517($16)|0);
 $5 = $17;
 $18 = $5;
 $19 = $8;
 $20 = $18 & $19;
 $6 = $20;
 $21 = $6;
 $7 = $21;
 while(1) {
  $22 = $3;
  $23 = ((($22)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $6;
  $26 = $25 >>> 4;
  $27 = (($24) + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $6;
  $30 = $29 & 15;
  $31 = $30 << 1;
  $32 = $28 >>> $31;
  $33 = $32 & 2;
  $34 = ($33|0)!=(0);
  if ($34) {
   break;
  }
  $35 = $3;
  $36 = ((($35)) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $6;
  $39 = $38 >>> 4;
  $40 = (($37) + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $6;
  $43 = $42 & 15;
  $44 = $43 << 1;
  $45 = $41 >>> $44;
  $46 = $45 & 1;
  $47 = ($46|0)!=(0);
  if (!($47)) {
   $48 = $3;
   $49 = ((($48)) + 20|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $6;
   $52 = (($50) + ($51<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $4;
   $55 = (_strcmp($53,$54)|0);
   $56 = ($55|0)==(0);
   $57 = $56 ^ 1;
   if (!($57)) {
    break;
   }
  }
  $58 = $6;
  $59 = $9;
  $60 = (($59) + 1)|0;
  $9 = $60;
  $61 = (($58) + ($60))|0;
  $62 = $8;
  $63 = $61 & $62;
  $6 = $63;
  $64 = $6;
  $65 = $7;
  $66 = ($64|0)==($65|0);
  if ($66) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  $67 = $3;
  $68 = HEAP32[$67>>2]|0;
  $2 = $68;
  $86 = $2;
  STACKTOP = sp;return ($86|0);
 }
 $69 = $3;
 $70 = ((($69)) + 16|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $6;
 $73 = $72 >>> 4;
 $74 = (($71) + ($73<<2)|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $6;
 $77 = $76 & 15;
 $78 = $77 << 1;
 $79 = $75 >>> $78;
 $80 = $79 & 3;
 $81 = ($80|0)!=(0);
 if ($81) {
  $82 = $3;
  $83 = HEAP32[$82>>2]|0;
  $85 = $83;
 } else {
  $84 = $6;
  $85 = $84;
 }
 $2 = $85;
 $86 = $2;
 STACKTOP = sp;return ($86|0);
}
function ___ac_X31_hash_string_517($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 << 24 >> 24;
 $2 = $5;
 $6 = $2;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 $8 = $1;
 $9 = ((($8)) + 1|0);
 $1 = $9;
 while(1) {
  $10 = $1;
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)!=(0);
  if (!($12)) {
   break;
  }
  $13 = $2;
  $14 = $13 << 5;
  $15 = $2;
  $16 = (($14) - ($15))|0;
  $17 = $1;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = (($16) + ($19))|0;
  $2 = $20;
  $21 = $1;
  $22 = ((($21)) + 1|0);
  $1 = $22;
 }
 $23 = $2;
 STACKTOP = sp;return ($23|0);
}
function _kh_resize_m_s2i($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$sink = 0, $$sink3 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = 1;
 $17 = $4;
 $18 = (($17) + -1)|0;
 $4 = $18;
 $19 = $4;
 $20 = $19 >>> 1;
 $21 = $4;
 $22 = $21 | $20;
 $4 = $22;
 $23 = $4;
 $24 = $23 >>> 2;
 $25 = $4;
 $26 = $25 | $24;
 $4 = $26;
 $27 = $4;
 $28 = $27 >>> 4;
 $29 = $4;
 $30 = $29 | $28;
 $4 = $30;
 $31 = $4;
 $32 = $31 >>> 8;
 $33 = $4;
 $34 = $33 | $32;
 $4 = $34;
 $35 = $4;
 $36 = $35 >>> 16;
 $37 = $4;
 $38 = $37 | $36;
 $4 = $38;
 $39 = $4;
 $40 = (($39) + 1)|0;
 $4 = $40;
 $41 = $4;
 $42 = ($41>>>0)<(4);
 $$ = $42 ? 4 : $40;
 $4 = $$;
 $43 = $3;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $4;
 $47 = (+($46>>>0));
 $48 = $47 * 0.77000000000000001;
 $49 = $48 + 0.5;
 $50 = (~~(($49))>>>0);
 $51 = ($45>>>0)>=($50>>>0);
 do {
  if ($51) {
   $6 = 0;
  } else {
   $52 = $4;
   $53 = ($52>>>0)<(16);
   $54 = $4;
   $55 = $54 >>> 4;
   $56 = $53 ? 1 : $55;
   $57 = $56<<2;
   $58 = (_malloc($57)|0);
   $5 = $58;
   $59 = $5;
   $60 = ($59|0)!=(0|0);
   if (!($60)) {
    $2 = -1;
    $279 = $2;
    STACKTOP = sp;return ($279|0);
   }
   $61 = $5;
   $62 = $4;
   $63 = ($62>>>0)<(16);
   $64 = $4;
   $65 = $64 >>> 4;
   $66 = $63 ? 1 : $65;
   $67 = $66<<2;
   _memset(($61|0),-86,($67|0))|0;
   $68 = $3;
   $69 = HEAP32[$68>>2]|0;
   $70 = $4;
   $71 = ($69>>>0)<($70>>>0);
   if ($71) {
    $72 = $3;
    $73 = ((($72)) + 20|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $4;
    $76 = $75<<2;
    $77 = (_realloc($74,$76)|0);
    $7 = $77;
    $78 = $7;
    $79 = ($78|0)!=(0|0);
    if (!($79)) {
     $80 = $5;
     _free($80);
     $2 = -1;
     $279 = $2;
     STACKTOP = sp;return ($279|0);
    }
    $81 = $7;
    $82 = $3;
    $83 = ((($82)) + 20|0);
    HEAP32[$83>>2] = $81;
    $84 = $3;
    $85 = ((($84)) + 24|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $4;
    $88 = $87<<2;
    $89 = (_realloc($86,$88)|0);
    $8 = $89;
    $90 = $8;
    $91 = ($90|0)!=(0|0);
    if ($91) {
     $93 = $8;
     $94 = $3;
     $95 = ((($94)) + 24|0);
     HEAP32[$95>>2] = $93;
     break;
    }
    $92 = $5;
    _free($92);
    $2 = -1;
    $279 = $2;
    STACKTOP = sp;return ($279|0);
   }
  }
 } while(0);
 $96 = $6;
 $97 = ($96|0)!=(0);
 if ($97) {
  $6 = 0;
  while(1) {
   $98 = $6;
   $99 = $3;
   $100 = HEAP32[$99>>2]|0;
   $101 = ($98|0)!=($100|0);
   $102 = $3;
   if (!($101)) {
    break;
   }
   $103 = ((($102)) + 16|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $6;
   $106 = $105 >>> 4;
   $107 = (($104) + ($106<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $6;
   $110 = $109 & 15;
   $111 = $110 << 1;
   $112 = $108 >>> $111;
   $113 = $112 & 3;
   $114 = ($113|0)==(0);
   if ($114) {
    $115 = $3;
    $116 = ((($115)) + 20|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = $6;
    $119 = (($117) + ($118<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $9 = $120;
    $121 = $4;
    $122 = (($121) - 1)|0;
    $11 = $122;
    $123 = $3;
    $124 = ((($123)) + 24|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $6;
    $127 = (($125) + ($126<<2)|0);
    $128 = HEAP32[$127>>2]|0;
    $10 = $128;
    $129 = $6;
    $130 = $129 & 15;
    $131 = $130 << 1;
    $132 = 1 << $131;
    $133 = $3;
    $134 = ((($133)) + 16|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $6;
    $$sink = $136;$$sink3 = $132;$$sink4 = $135;
    while(1) {
     $137 = $$sink >>> 4;
     $138 = (($$sink4) + ($137<<2)|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = $139 | $$sink3;
     HEAP32[$138>>2] = $140;
     $14 = 0;
     $141 = $9;
     $142 = (___ac_X31_hash_string_517($141)|0);
     $12 = $142;
     $143 = $12;
     $144 = $11;
     $145 = $143 & $144;
     $13 = $145;
     while(1) {
      $146 = $5;
      $147 = $13;
      $148 = $147 >>> 4;
      $149 = (($146) + ($148<<2)|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = $13;
      $152 = $151 & 15;
      $153 = $152 << 1;
      $154 = $150 >>> $153;
      $155 = $154 & 2;
      $156 = ($155|0)!=(0);
      $157 = $156 ^ 1;
      $158 = $13;
      if (!($157)) {
       break;
      }
      $159 = $14;
      $160 = (($159) + 1)|0;
      $14 = $160;
      $161 = (($158) + ($160))|0;
      $162 = $11;
      $163 = $161 & $162;
      $13 = $163;
     }
     $164 = $158 & 15;
     $165 = $164 << 1;
     $166 = 2 << $165;
     $167 = $166 ^ -1;
     $168 = $5;
     $169 = $13;
     $170 = $169 >>> 4;
     $171 = (($168) + ($170<<2)|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = $172 & $167;
     HEAP32[$171>>2] = $173;
     $174 = $13;
     $175 = $3;
     $176 = HEAP32[$175>>2]|0;
     $177 = ($174>>>0)<($176>>>0);
     if (!($177)) {
      break;
     }
     $178 = $3;
     $179 = ((($178)) + 16|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = $13;
     $182 = $181 >>> 4;
     $183 = (($180) + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = $13;
     $186 = $185 & 15;
     $187 = $186 << 1;
     $188 = $184 >>> $187;
     $189 = $188 & 3;
     $190 = ($189|0)==(0);
     if (!($190)) {
      break;
     }
     $191 = $3;
     $192 = ((($191)) + 20|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = $13;
     $195 = (($193) + ($194<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $15 = $196;
     $197 = $9;
     $198 = $3;
     $199 = ((($198)) + 20|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = $13;
     $202 = (($200) + ($201<<2)|0);
     HEAP32[$202>>2] = $197;
     $203 = $15;
     $9 = $203;
     $204 = $3;
     $205 = ((($204)) + 24|0);
     $206 = HEAP32[$205>>2]|0;
     $207 = $13;
     $208 = (($206) + ($207<<2)|0);
     $209 = HEAP32[$208>>2]|0;
     $16 = $209;
     $210 = $10;
     $211 = $3;
     $212 = ((($211)) + 24|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = $13;
     $215 = (($213) + ($214<<2)|0);
     HEAP32[$215>>2] = $210;
     $216 = $16;
     $10 = $216;
     $217 = $13;
     $218 = $217 & 15;
     $219 = $218 << 1;
     $220 = 1 << $219;
     $221 = $3;
     $222 = ((($221)) + 16|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = $13;
     $$sink = $224;$$sink3 = $220;$$sink4 = $223;
    }
    $225 = $9;
    $226 = $3;
    $227 = ((($226)) + 20|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = $13;
    $230 = (($228) + ($229<<2)|0);
    HEAP32[$230>>2] = $225;
    $231 = $10;
    $232 = $3;
    $233 = ((($232)) + 24|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = $13;
    $236 = (($234) + ($235<<2)|0);
    HEAP32[$236>>2] = $231;
   }
   $237 = $6;
   $238 = (($237) + 1)|0;
   $6 = $238;
  }
  $239 = HEAP32[$102>>2]|0;
  $240 = $4;
  $241 = ($239>>>0)>($240>>>0);
  if ($241) {
   $242 = $3;
   $243 = ((($242)) + 20|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = $4;
   $246 = $245<<2;
   $247 = (_realloc($244,$246)|0);
   $248 = $3;
   $249 = ((($248)) + 20|0);
   HEAP32[$249>>2] = $247;
   $250 = $3;
   $251 = ((($250)) + 24|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = $4;
   $254 = $253<<2;
   $255 = (_realloc($252,$254)|0);
   $256 = $3;
   $257 = ((($256)) + 24|0);
   HEAP32[$257>>2] = $255;
  }
  $258 = $3;
  $259 = ((($258)) + 16|0);
  $260 = HEAP32[$259>>2]|0;
  _free($260);
  $261 = $5;
  $262 = $3;
  $263 = ((($262)) + 16|0);
  HEAP32[$263>>2] = $261;
  $264 = $4;
  $265 = $3;
  HEAP32[$265>>2] = $264;
  $266 = $3;
  $267 = ((($266)) + 4|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = $3;
  $270 = ((($269)) + 8|0);
  HEAP32[$270>>2] = $268;
  $271 = $3;
  $272 = HEAP32[$271>>2]|0;
  $273 = (+($272>>>0));
  $274 = $273 * 0.77000000000000001;
  $275 = $274 + 0.5;
  $276 = (~~(($275))>>>0);
  $277 = $3;
  $278 = ((($277)) + 12|0);
  HEAP32[$278>>2] = $276;
 }
 $2 = 0;
 $279 = $2;
 STACKTOP = sp;return ($279|0);
}
function _kh_resize_sam_hdr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$sink = 0, $$sink3 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = 1;
 $17 = $4;
 $18 = (($17) + -1)|0;
 $4 = $18;
 $19 = $4;
 $20 = $19 >>> 1;
 $21 = $4;
 $22 = $21 | $20;
 $4 = $22;
 $23 = $4;
 $24 = $23 >>> 2;
 $25 = $4;
 $26 = $25 | $24;
 $4 = $26;
 $27 = $4;
 $28 = $27 >>> 4;
 $29 = $4;
 $30 = $29 | $28;
 $4 = $30;
 $31 = $4;
 $32 = $31 >>> 8;
 $33 = $4;
 $34 = $33 | $32;
 $4 = $34;
 $35 = $4;
 $36 = $35 >>> 16;
 $37 = $4;
 $38 = $37 | $36;
 $4 = $38;
 $39 = $4;
 $40 = (($39) + 1)|0;
 $4 = $40;
 $41 = $4;
 $42 = ($41>>>0)<(4);
 $$ = $42 ? 4 : $40;
 $4 = $$;
 $43 = $3;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $4;
 $47 = (+($46>>>0));
 $48 = $47 * 0.77000000000000001;
 $49 = $48 + 0.5;
 $50 = (~~(($49))>>>0);
 $51 = ($45>>>0)>=($50>>>0);
 do {
  if ($51) {
   $6 = 0;
  } else {
   $52 = $4;
   $53 = ($52>>>0)<(16);
   $54 = $4;
   $55 = $54 >>> 4;
   $56 = $53 ? 1 : $55;
   $57 = $56<<2;
   $58 = (_malloc($57)|0);
   $5 = $58;
   $59 = $5;
   $60 = ($59|0)!=(0|0);
   if (!($60)) {
    $2 = -1;
    $278 = $2;
    STACKTOP = sp;return ($278|0);
   }
   $61 = $5;
   $62 = $4;
   $63 = ($62>>>0)<(16);
   $64 = $4;
   $65 = $64 >>> 4;
   $66 = $63 ? 1 : $65;
   $67 = $66<<2;
   _memset(($61|0),-86,($67|0))|0;
   $68 = $3;
   $69 = HEAP32[$68>>2]|0;
   $70 = $4;
   $71 = ($69>>>0)<($70>>>0);
   if ($71) {
    $72 = $3;
    $73 = ((($72)) + 20|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $4;
    $76 = $75<<2;
    $77 = (_realloc($74,$76)|0);
    $7 = $77;
    $78 = $7;
    $79 = ($78|0)!=(0|0);
    if (!($79)) {
     $80 = $5;
     _free($80);
     $2 = -1;
     $278 = $2;
     STACKTOP = sp;return ($278|0);
    }
    $81 = $7;
    $82 = $3;
    $83 = ((($82)) + 20|0);
    HEAP32[$83>>2] = $81;
    $84 = $3;
    $85 = ((($84)) + 24|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $4;
    $88 = $87<<2;
    $89 = (_realloc($86,$88)|0);
    $8 = $89;
    $90 = $8;
    $91 = ($90|0)!=(0|0);
    if ($91) {
     $93 = $8;
     $94 = $3;
     $95 = ((($94)) + 24|0);
     HEAP32[$95>>2] = $93;
     break;
    }
    $92 = $5;
    _free($92);
    $2 = -1;
    $278 = $2;
    STACKTOP = sp;return ($278|0);
   }
  }
 } while(0);
 $96 = $6;
 $97 = ($96|0)!=(0);
 if ($97) {
  $6 = 0;
  while(1) {
   $98 = $6;
   $99 = $3;
   $100 = HEAP32[$99>>2]|0;
   $101 = ($98|0)!=($100|0);
   $102 = $3;
   if (!($101)) {
    break;
   }
   $103 = ((($102)) + 16|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $6;
   $106 = $105 >>> 4;
   $107 = (($104) + ($106<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $6;
   $110 = $109 & 15;
   $111 = $110 << 1;
   $112 = $108 >>> $111;
   $113 = $112 & 3;
   $114 = ($113|0)==(0);
   if ($114) {
    $115 = $3;
    $116 = ((($115)) + 20|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = $6;
    $119 = (($117) + ($118<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $9 = $120;
    $121 = $4;
    $122 = (($121) - 1)|0;
    $11 = $122;
    $123 = $3;
    $124 = ((($123)) + 24|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $6;
    $127 = (($125) + ($126<<2)|0);
    $128 = HEAP32[$127>>2]|0;
    $10 = $128;
    $129 = $6;
    $130 = $129 & 15;
    $131 = $130 << 1;
    $132 = 1 << $131;
    $133 = $3;
    $134 = ((($133)) + 16|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $6;
    $$sink = $136;$$sink3 = $132;$$sink4 = $135;
    while(1) {
     $137 = $$sink >>> 4;
     $138 = (($$sink4) + ($137<<2)|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = $139 | $$sink3;
     HEAP32[$138>>2] = $140;
     $14 = 0;
     $141 = $9;
     $12 = $141;
     $142 = $12;
     $143 = $11;
     $144 = $142 & $143;
     $13 = $144;
     while(1) {
      $145 = $5;
      $146 = $13;
      $147 = $146 >>> 4;
      $148 = (($145) + ($147<<2)|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = $13;
      $151 = $150 & 15;
      $152 = $151 << 1;
      $153 = $149 >>> $152;
      $154 = $153 & 2;
      $155 = ($154|0)!=(0);
      $156 = $155 ^ 1;
      $157 = $13;
      if (!($156)) {
       break;
      }
      $158 = $14;
      $159 = (($158) + 1)|0;
      $14 = $159;
      $160 = (($157) + ($159))|0;
      $161 = $11;
      $162 = $160 & $161;
      $13 = $162;
     }
     $163 = $157 & 15;
     $164 = $163 << 1;
     $165 = 2 << $164;
     $166 = $165 ^ -1;
     $167 = $5;
     $168 = $13;
     $169 = $168 >>> 4;
     $170 = (($167) + ($169<<2)|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = $171 & $166;
     HEAP32[$170>>2] = $172;
     $173 = $13;
     $174 = $3;
     $175 = HEAP32[$174>>2]|0;
     $176 = ($173>>>0)<($175>>>0);
     if (!($176)) {
      break;
     }
     $177 = $3;
     $178 = ((($177)) + 16|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = $13;
     $181 = $180 >>> 4;
     $182 = (($179) + ($181<<2)|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = $13;
     $185 = $184 & 15;
     $186 = $185 << 1;
     $187 = $183 >>> $186;
     $188 = $187 & 3;
     $189 = ($188|0)==(0);
     if (!($189)) {
      break;
     }
     $190 = $3;
     $191 = ((($190)) + 20|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = $13;
     $194 = (($192) + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $15 = $195;
     $196 = $9;
     $197 = $3;
     $198 = ((($197)) + 20|0);
     $199 = HEAP32[$198>>2]|0;
     $200 = $13;
     $201 = (($199) + ($200<<2)|0);
     HEAP32[$201>>2] = $196;
     $202 = $15;
     $9 = $202;
     $203 = $3;
     $204 = ((($203)) + 24|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = $13;
     $207 = (($205) + ($206<<2)|0);
     $208 = HEAP32[$207>>2]|0;
     $16 = $208;
     $209 = $10;
     $210 = $3;
     $211 = ((($210)) + 24|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = $13;
     $214 = (($212) + ($213<<2)|0);
     HEAP32[$214>>2] = $209;
     $215 = $16;
     $10 = $215;
     $216 = $13;
     $217 = $216 & 15;
     $218 = $217 << 1;
     $219 = 1 << $218;
     $220 = $3;
     $221 = ((($220)) + 16|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = $13;
     $$sink = $223;$$sink3 = $219;$$sink4 = $222;
    }
    $224 = $9;
    $225 = $3;
    $226 = ((($225)) + 20|0);
    $227 = HEAP32[$226>>2]|0;
    $228 = $13;
    $229 = (($227) + ($228<<2)|0);
    HEAP32[$229>>2] = $224;
    $230 = $10;
    $231 = $3;
    $232 = ((($231)) + 24|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = $13;
    $235 = (($233) + ($234<<2)|0);
    HEAP32[$235>>2] = $230;
   }
   $236 = $6;
   $237 = (($236) + 1)|0;
   $6 = $237;
  }
  $238 = HEAP32[$102>>2]|0;
  $239 = $4;
  $240 = ($238>>>0)>($239>>>0);
  if ($240) {
   $241 = $3;
   $242 = ((($241)) + 20|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = $4;
   $245 = $244<<2;
   $246 = (_realloc($243,$245)|0);
   $247 = $3;
   $248 = ((($247)) + 20|0);
   HEAP32[$248>>2] = $246;
   $249 = $3;
   $250 = ((($249)) + 24|0);
   $251 = HEAP32[$250>>2]|0;
   $252 = $4;
   $253 = $252<<2;
   $254 = (_realloc($251,$253)|0);
   $255 = $3;
   $256 = ((($255)) + 24|0);
   HEAP32[$256>>2] = $254;
  }
  $257 = $3;
  $258 = ((($257)) + 16|0);
  $259 = HEAP32[$258>>2]|0;
  _free($259);
  $260 = $5;
  $261 = $3;
  $262 = ((($261)) + 16|0);
  HEAP32[$262>>2] = $260;
  $263 = $4;
  $264 = $3;
  HEAP32[$264>>2] = $263;
  $265 = $3;
  $266 = ((($265)) + 4|0);
  $267 = HEAP32[$266>>2]|0;
  $268 = $3;
  $269 = ((($268)) + 8|0);
  HEAP32[$269>>2] = $267;
  $270 = $3;
  $271 = HEAP32[$270>>2]|0;
  $272 = (+($271>>>0));
  $273 = $272 * 0.77000000000000001;
  $274 = $273 + 0.5;
  $275 = (~~(($274))>>>0);
  $276 = $3;
  $277 = ((($276)) + 12|0);
  HEAP32[$277>>2] = $275;
 }
 $2 = 0;
 $278 = $2;
 STACKTOP = sp;return ($278|0);
}
function _sam_hdr_find($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $16 = $6;
 $17 = HEAP8[$16>>0]|0;
 $18 = $17 << 24 >> 24;
 $19 = $18 << 8;
 $20 = $6;
 $21 = ((($20)) + 1|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22 << 24 >> 24;
 $24 = $19 | $23;
 $11 = $24;
 $25 = $7;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $27 = $6;
  $28 = HEAP8[$27>>0]|0;
  $29 = $28 << 24 >> 24;
  $30 = ($29|0)==(83);
  if ($30) {
   $31 = $6;
   $32 = ((($31)) + 1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33 << 24 >> 24;
   $35 = ($34|0)==(81);
   if ($35) {
    $36 = $7;
    $37 = HEAP8[$36>>0]|0;
    $38 = $37 << 24 >> 24;
    $39 = ($38|0)==(83);
    if ($39) {
     $40 = $7;
     $41 = ((($40)) + 1|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = $42 << 24 >> 24;
     $44 = ($43|0)==(78);
     if ($44) {
      $45 = $5;
      $46 = ((($45)) + 36|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = $8;
      $49 = (_kh_get_m_s2i($47,$48)|0);
      $12 = $49;
      $50 = $12;
      $51 = $5;
      $52 = ((($51)) + 36|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = HEAP32[$53>>2]|0;
      $55 = ($50|0)!=($54|0);
      if ($55) {
       $56 = $5;
       $57 = ((($56)) + 32|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = $5;
       $60 = ((($59)) + 36|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = ((($61)) + 24|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = $12;
       $65 = (($63) + ($64<<2)|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = (($58) + ($66<<4)|0);
       $68 = ((($67)) + 8|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = $69;
      } else {
       $70 = 0;
      }
      $4 = $70;
      $241 = $4;
      STACKTOP = sp;return ($241|0);
     }
    }
   }
  }
  $71 = $6;
  $72 = HEAP8[$71>>0]|0;
  $73 = $72 << 24 >> 24;
  $74 = ($73|0)==(82);
  if ($74) {
   $75 = $6;
   $76 = ((($75)) + 1|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77 << 24 >> 24;
   $79 = ($78|0)==(71);
   if ($79) {
    $80 = $7;
    $81 = HEAP8[$80>>0]|0;
    $82 = $81 << 24 >> 24;
    $83 = ($82|0)==(73);
    if ($83) {
     $84 = $7;
     $85 = ((($84)) + 1|0);
     $86 = HEAP8[$85>>0]|0;
     $87 = $86 << 24 >> 24;
     $88 = ($87|0)==(68);
     if ($88) {
      $89 = $5;
      $90 = ((($89)) + 48|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = $8;
      $93 = (_kh_get_m_s2i($91,$92)|0);
      $12 = $93;
      $94 = $12;
      $95 = $5;
      $96 = ((($95)) + 48|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = HEAP32[$97>>2]|0;
      $99 = ($94|0)!=($98|0);
      if ($99) {
       $100 = $5;
       $101 = ((($100)) + 44|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = $5;
       $104 = ((($103)) + 48|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = ((($105)) + 24|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = $12;
       $109 = (($107) + ($108<<2)|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = (($102) + (($110*20)|0)|0);
       $112 = ((($111)) + 4|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = $113;
      } else {
       $114 = 0;
      }
      $4 = $114;
      $241 = $4;
      STACKTOP = sp;return ($241|0);
     }
    }
   }
  }
  $115 = $6;
  $116 = HEAP8[$115>>0]|0;
  $117 = $116 << 24 >> 24;
  $118 = ($117|0)==(80);
  if ($118) {
   $119 = $6;
   $120 = ((($119)) + 1|0);
   $121 = HEAP8[$120>>0]|0;
   $122 = $121 << 24 >> 24;
   $123 = ($122|0)==(71);
   if ($123) {
    $124 = $7;
    $125 = HEAP8[$124>>0]|0;
    $126 = $125 << 24 >> 24;
    $127 = ($126|0)==(73);
    if ($127) {
     $128 = $7;
     $129 = ((($128)) + 1|0);
     $130 = HEAP8[$129>>0]|0;
     $131 = $130 << 24 >> 24;
     $132 = ($131|0)==(68);
     if ($132) {
      $133 = $5;
      $134 = ((($133)) + 68|0);
      $135 = HEAP32[$134>>2]|0;
      $136 = $8;
      $137 = (_kh_get_m_s2i($135,$136)|0);
      $12 = $137;
      $138 = $12;
      $139 = $5;
      $140 = ((($139)) + 68|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = HEAP32[$141>>2]|0;
      $143 = ($138|0)!=($142|0);
      if ($143) {
       $144 = $5;
       $145 = ((($144)) + 64|0);
       $146 = HEAP32[$145>>2]|0;
       $147 = $5;
       $148 = ((($147)) + 68|0);
       $149 = HEAP32[$148>>2]|0;
       $150 = ((($149)) + 24|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = $12;
       $153 = (($151) + ($152<<2)|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = (($146) + (($154*24)|0)|0);
       $156 = ((($155)) + 4|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = $157;
      } else {
       $158 = 0;
      }
      $4 = $158;
      $241 = $4;
      STACKTOP = sp;return ($241|0);
     }
    }
   }
  }
 }
 $159 = $5;
 $160 = ((($159)) + 12|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = $11;
 $163 = (_kh_get_sam_hdr($161,$162)|0);
 $12 = $163;
 $164 = $12;
 $165 = $5;
 $166 = ((($165)) + 12|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = HEAP32[$167>>2]|0;
 $169 = ($164|0)==($168|0);
 if ($169) {
  $4 = 0;
  $241 = $4;
  STACKTOP = sp;return ($241|0);
 }
 $170 = $7;
 $171 = ($170|0)!=(0|0);
 $172 = $5;
 $173 = ((($172)) + 12|0);
 $174 = HEAP32[$173>>2]|0;
 $175 = ((($174)) + 24|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = $12;
 $178 = (($176) + ($177<<2)|0);
 $179 = HEAP32[$178>>2]|0;
 if (!($171)) {
  $4 = $179;
  $241 = $4;
  STACKTOP = sp;return ($241|0);
 }
 $10 = $179;
 $9 = $179;
 L40: while(1) {
  $180 = $9;
  $181 = ((($180)) + 8|0);
  $182 = HEAP32[$181>>2]|0;
  $13 = $182;
  while(1) {
   $183 = $13;
   $184 = ($183|0)!=(0|0);
   if (!($184)) {
    break;
   }
   $185 = $13;
   $186 = ((($185)) + 4|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = HEAP8[$187>>0]|0;
   $189 = $188 << 24 >> 24;
   $190 = $7;
   $191 = HEAP8[$190>>0]|0;
   $192 = $191 << 24 >> 24;
   $193 = ($189|0)==($192|0);
   if ($193) {
    $194 = $13;
    $195 = ((($194)) + 4|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = ((($196)) + 1|0);
    $198 = HEAP8[$197>>0]|0;
    $199 = $198 << 24 >> 24;
    $200 = $7;
    $201 = ((($200)) + 1|0);
    $202 = HEAP8[$201>>0]|0;
    $203 = $202 << 24 >> 24;
    $204 = ($199|0)==($203|0);
    if ($204) {
     $205 = $13;
     $206 = ((($205)) + 4|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ((($207)) + 3|0);
     $14 = $208;
     $209 = $8;
     $15 = $209;
     while(1) {
      $210 = $14;
      $211 = HEAP8[$210>>0]|0;
      $212 = $211 << 24 >> 24;
      $213 = ($212|0)!=(0);
      if (!($213)) {
       break;
      }
      $214 = $14;
      $215 = HEAP8[$214>>0]|0;
      $216 = $215 << 24 >> 24;
      $217 = $15;
      $218 = HEAP8[$217>>0]|0;
      $219 = $218 << 24 >> 24;
      $220 = ($216|0)==($219|0);
      if (!($220)) {
       break;
      }
      $221 = $14;
      $222 = ((($221)) + 1|0);
      $14 = $222;
      $223 = $15;
      $224 = ((($223)) + 1|0);
      $15 = $224;
     }
     $225 = $15;
     $226 = HEAP8[$225>>0]|0;
     $227 = $226 << 24 >> 24;
     $228 = ($227|0)!=(0);
     if (!($228)) {
      $229 = $14;
      $230 = HEAP8[$229>>0]|0;
      $231 = $230 << 24 >> 24;
      $232 = ($231|0)!=(0);
      if (!($232)) {
       label = 38;
       break L40;
      }
     }
    }
   }
   $234 = $13;
   $235 = HEAP32[$234>>2]|0;
   $13 = $235;
  }
  $236 = $9;
  $237 = HEAP32[$236>>2]|0;
  $9 = $237;
  $238 = $9;
  $239 = $10;
  $240 = ($238|0)!=($239|0);
  if (!($240)) {
   label = 41;
   break;
  }
 }
 if ((label|0) == 38) {
  $233 = $9;
  $4 = $233;
  $241 = $4;
  STACKTOP = sp;return ($241|0);
 }
 else if ((label|0) == 41) {
  $4 = 0;
  $241 = $4;
  STACKTOP = sp;return ($241|0);
 }
 return (0)|0;
}
function _kh_get_sam_hdr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $2 = 0;
  $84 = $2;
  STACKTOP = sp;return ($84|0);
 }
 $9 = 0;
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - 1)|0;
 $8 = $15;
 $16 = $4;
 $5 = $16;
 $17 = $5;
 $18 = $8;
 $19 = $17 & $18;
 $6 = $19;
 $20 = $6;
 $7 = $20;
 while(1) {
  $21 = $3;
  $22 = ((($21)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $6;
  $25 = $24 >>> 4;
  $26 = (($23) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $6;
  $29 = $28 & 15;
  $30 = $29 << 1;
  $31 = $27 >>> $30;
  $32 = $31 & 2;
  $33 = ($32|0)!=(0);
  if ($33) {
   break;
  }
  $34 = $3;
  $35 = ((($34)) + 16|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $6;
  $38 = $37 >>> 4;
  $39 = (($36) + ($38<<2)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $6;
  $42 = $41 & 15;
  $43 = $42 << 1;
  $44 = $40 >>> $43;
  $45 = $44 & 1;
  $46 = ($45|0)!=(0);
  if (!($46)) {
   $47 = $3;
   $48 = ((($47)) + 20|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $6;
   $51 = (($49) + ($50<<2)|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $4;
   $54 = ($52|0)==($53|0);
   $55 = $54 ^ 1;
   if (!($55)) {
    break;
   }
  }
  $56 = $6;
  $57 = $9;
  $58 = (($57) + 1)|0;
  $9 = $58;
  $59 = (($56) + ($58))|0;
  $60 = $8;
  $61 = $59 & $60;
  $6 = $61;
  $62 = $6;
  $63 = $7;
  $64 = ($62|0)==($63|0);
  if ($64) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  $65 = $3;
  $66 = HEAP32[$65>>2]|0;
  $2 = $66;
  $84 = $2;
  STACKTOP = sp;return ($84|0);
 }
 $67 = $3;
 $68 = ((($67)) + 16|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $6;
 $71 = $70 >>> 4;
 $72 = (($69) + ($71<<2)|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $6;
 $75 = $74 & 15;
 $76 = $75 << 1;
 $77 = $73 >>> $76;
 $78 = $77 & 3;
 $79 = ($78|0)!=(0);
 if ($79) {
  $80 = $3;
  $81 = HEAP32[$80>>2]|0;
  $83 = $81;
 } else {
  $82 = $6;
  $83 = $82;
 }
 $2 = $83;
 $84 = $2;
 STACKTOP = sp;return ($84|0);
}
function _sam_hdr_find_key($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = 0;
 $11 = $6;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $9 = $13;
 while(1) {
  $14 = $9;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   label = 9;
   break;
  }
  $16 = $9;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = $7;
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 << 24 >> 24;
  $24 = ($20|0)==($23|0);
  if ($24) {
   $25 = $9;
   $26 = ((($25)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 1|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29 << 24 >> 24;
   $31 = $7;
   $32 = ((($31)) + 1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33 << 24 >> 24;
   $35 = ($30|0)==($34|0);
   if ($35) {
    label = 5;
    break;
   }
  }
  $41 = $9;
  $10 = $41;
  $42 = $9;
  $43 = HEAP32[$42>>2]|0;
  $9 = $43;
 }
 if ((label|0) == 5) {
  $36 = $8;
  $37 = ($36|0)!=(0|0);
  if ($37) {
   $38 = $10;
   $39 = $8;
   HEAP32[$39>>2] = $38;
  }
  $40 = $9;
  $4 = $40;
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 }
 else if ((label|0) == 9) {
  $44 = $8;
  $45 = ($44|0)!=(0|0);
  if ($45) {
   $46 = $10;
   $47 = $8;
   HEAP32[$47>>2] = $46;
  }
  $4 = 0;
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function _sam_hdr_new() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = (_calloc(1,1112)|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $0 = 0;
  $93 = $0;
  STACKTOP = sp;return ($93|0);
 }
 $5 = (_kh_init_sam_hdr()|0);
 $6 = $1;
 $7 = ((($6)) + 12|0);
 HEAP32[$7>>2] = $5;
 $8 = $1;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $1;
  $13 = ((($12)) + 1104|0);
  HEAP32[$13>>2] = 1;
  $14 = $1;
  $15 = ((($14)) + 1108|0);
  HEAP32[$15>>2] = 1;
  $16 = $1;
  $17 = ((($16)) + 28|0);
  HEAP32[$17>>2] = 0;
  $18 = $1;
  $19 = ((($18)) + 32|0);
  HEAP32[$19>>2] = 0;
  $20 = (_kh_init_m_s2i_536()|0);
  $21 = $1;
  $22 = ((($21)) + 36|0);
  HEAP32[$22>>2] = $20;
  $23 = ($20|0)!=(0|0);
  if ($23) {
   $24 = $1;
   $25 = ((($24)) + 40|0);
   HEAP32[$25>>2] = 0;
   $26 = $1;
   $27 = ((($26)) + 44|0);
   HEAP32[$27>>2] = 0;
   $28 = (_kh_init_m_s2i_536()|0);
   $29 = $1;
   $30 = ((($29)) + 48|0);
   HEAP32[$30>>2] = $28;
   $31 = ($28|0)!=(0|0);
   if ($31) {
    $32 = $1;
    $33 = ((($32)) + 52|0);
    HEAP32[$33>>2] = 0;
    $34 = $1;
    $35 = ((($34)) + 64|0);
    HEAP32[$35>>2] = 0;
    $36 = $1;
    $37 = ((($36)) + 60|0);
    HEAP32[$37>>2] = 0;
    $38 = $1;
    $39 = ((($38)) + 56|0);
    HEAP32[$39>>2] = 0;
    $40 = $1;
    $41 = ((($40)) + 72|0);
    HEAP32[$41>>2] = 0;
    $42 = (_kh_init_m_s2i_536()|0);
    $43 = $1;
    $44 = ((($43)) + 68|0);
    HEAP32[$44>>2] = $42;
    $45 = ($42|0)!=(0|0);
    if ($45) {
     $46 = $1;
     HEAP32[$46>>2] = 0;
     $47 = $1;
     $48 = ((($47)) + 4|0);
     HEAP32[$48>>2] = 0;
     $49 = $1;
     $50 = ((($49)) + 8|0);
     HEAP32[$50>>2] = 0;
     $51 = (_pool_create(12)|0);
     $52 = $1;
     $53 = ((($52)) + 24|0);
     HEAP32[$53>>2] = $51;
     $54 = ($51|0)!=(0|0);
     if ($54) {
      $55 = (_pool_create(16)|0);
      $56 = $1;
      $57 = ((($56)) + 20|0);
      HEAP32[$57>>2] = $55;
      $58 = ($55|0)!=(0|0);
      if ($58) {
       $59 = (_string_pool_create(8192)|0);
       $60 = $1;
       $61 = ((($60)) + 16|0);
       HEAP32[$61>>2] = $59;
       $62 = ($59|0)!=(0|0);
       if ($62) {
        $63 = $1;
        $0 = $63;
        $93 = $0;
        STACKTOP = sp;return ($93|0);
       }
      }
     }
    }
   }
  }
 }
 $64 = $1;
 $65 = ((($64)) + 12|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)!=(0|0);
 if ($67) {
  $68 = $1;
  $69 = ((($68)) + 12|0);
  $70 = HEAP32[$69>>2]|0;
  _kh_destroy_sam_hdr($70);
 }
 $71 = $1;
 $72 = ((($71)) + 24|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)!=(0|0);
 if ($74) {
  $75 = $1;
  $76 = ((($75)) + 24|0);
  $77 = HEAP32[$76>>2]|0;
  _pool_destroy($77);
 }
 $78 = $1;
 $79 = ((($78)) + 20|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($80|0)!=(0|0);
 if ($81) {
  $82 = $1;
  $83 = ((($82)) + 20|0);
  $84 = HEAP32[$83>>2]|0;
  _pool_destroy($84);
 }
 $85 = $1;
 $86 = ((($85)) + 16|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)!=(0|0);
 if ($88) {
  $89 = $1;
  $90 = ((($89)) + 16|0);
  $91 = HEAP32[$90>>2]|0;
  _string_pool_destroy($91);
 }
 $92 = $1;
 _free($92);
 $0 = 0;
 $93 = $0;
 STACKTOP = sp;return ($93|0);
}
function _kh_init_sam_hdr() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,28)|0);
 return ($0|0);
}
function _kh_init_m_s2i_536() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,28)|0);
 return ($0|0);
}
function _kh_destroy_sam_hdr($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _sam_hdr_parse_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = (_sam_hdr_new()|0);
 $5 = $6;
 $7 = $5;
 $8 = (0|0)==($7|0);
 do {
  if ($8) {
   $2 = 0;
  } else {
   $9 = $3;
   $10 = (0|0)==($9|0);
   $11 = $5;
   if ($10) {
    $2 = $11;
    break;
   }
   $12 = $3;
   $13 = $4;
   $14 = (_sam_hdr_add_lines($11,$12,$13)|0);
   $15 = (-1)==($14|0);
   $16 = $5;
   if ($15) {
    _sam_hdr_free($16);
    $2 = 0;
    break;
   } else {
    $17 = (_sam_hdr_parse_sort_order($16)|0);
    $18 = $5;
    $19 = ((($18)) + 76|0);
    HEAP32[$19>>2] = $17;
    $20 = $5;
    (_sam_hdr_link_pg($20)|0);
    $21 = $5;
    $2 = $21;
    break;
   }
  }
 } while(0);
 $22 = $2;
 STACKTOP = sp;return ($22|0);
}
function _sam_hdr_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = ((($7)) + 1108|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + -1)|0;
 HEAP32[$8>>2] = $10;
 $11 = ($10|0)>(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = $1;
 $13 = (_ks_str($12)|0);
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $1;
  $16 = ((($15)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $1;
   $20 = ((($19)) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   _free($21);
  }
 }
 $22 = $1;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $1;
  $27 = ((($26)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  _kh_destroy_sam_hdr($28);
 }
 $29 = $1;
 $30 = ((($29)) + 36|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if ($32) {
  $33 = $1;
  $34 = ((($33)) + 36|0);
  $35 = HEAP32[$34>>2]|0;
  _kh_destroy_m_s2i_546($35);
 }
 $36 = $1;
 $37 = ((($36)) + 32|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $2 = 0;
  while(1) {
   $40 = $2;
   $41 = $1;
   $42 = ((($41)) + 28|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($40|0)<($43|0);
   $45 = $1;
   $46 = ((($45)) + 32|0);
   $47 = HEAP32[$46>>2]|0;
   if (!($44)) {
    break;
   }
   $48 = $2;
   $49 = (($47) + ($48<<4)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)!=(0|0);
   if ($51) {
    $52 = $1;
    $53 = ((($52)) + 32|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = $2;
    $56 = (($54) + ($55<<4)|0);
    $57 = HEAP32[$56>>2]|0;
    _free($57);
   }
   $58 = $2;
   $59 = (($58) + 1)|0;
   $2 = $59;
  }
  _free($47);
 }
 $60 = $1;
 $61 = ((($60)) + 48|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)!=(0|0);
 if ($63) {
  $64 = $1;
  $65 = ((($64)) + 48|0);
  $66 = HEAP32[$65>>2]|0;
  _kh_destroy_m_s2i_546($66);
 }
 $67 = $1;
 $68 = ((($67)) + 44|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($69|0)!=(0|0);
 if ($70) {
  $3 = 0;
  while(1) {
   $71 = $3;
   $72 = $1;
   $73 = ((($72)) + 40|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($71|0)<($74|0);
   $76 = $1;
   $77 = ((($76)) + 44|0);
   $78 = HEAP32[$77>>2]|0;
   if (!($75)) {
    break;
   }
   $79 = $3;
   $80 = (($78) + (($79*20)|0)|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)!=(0|0);
   if ($82) {
    $83 = $1;
    $84 = ((($83)) + 44|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $3;
    $87 = (($85) + (($86*20)|0)|0);
    $88 = HEAP32[$87>>2]|0;
    _free($88);
   }
   $89 = $3;
   $90 = (($89) + 1)|0;
   $3 = $90;
  }
  _free($78);
 }
 $91 = $1;
 $92 = ((($91)) + 68|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ($93|0)!=(0|0);
 if ($94) {
  $95 = $1;
  $96 = ((($95)) + 68|0);
  $97 = HEAP32[$96>>2]|0;
  _kh_destroy_m_s2i_546($97);
 }
 $98 = $1;
 $99 = ((($98)) + 64|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ($100|0)!=(0|0);
 if ($101) {
  $4 = 0;
  while(1) {
   $102 = $4;
   $103 = $1;
   $104 = ((($103)) + 52|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ($102|0)<($105|0);
   $107 = $1;
   $108 = ((($107)) + 64|0);
   $109 = HEAP32[$108>>2]|0;
   if (!($106)) {
    break;
   }
   $110 = $4;
   $111 = (($109) + (($110*24)|0)|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = ($112|0)!=(0|0);
   if ($113) {
    $114 = $1;
    $115 = ((($114)) + 64|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = $4;
    $118 = (($116) + (($117*24)|0)|0);
    $119 = HEAP32[$118>>2]|0;
    _free($119);
   }
   $120 = $4;
   $121 = (($120) + 1)|0;
   $4 = $121;
  }
  _free($109);
 }
 $122 = $1;
 $123 = ((($122)) + 72|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ($124|0)!=(0|0);
 if ($125) {
  $126 = $1;
  $127 = ((($126)) + 72|0);
  $128 = HEAP32[$127>>2]|0;
  _free($128);
 }
 $129 = $1;
 $130 = ((($129)) + 20|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = ($131|0)!=(0|0);
 if ($132) {
  $133 = $1;
  $134 = ((($133)) + 20|0);
  $135 = HEAP32[$134>>2]|0;
  _pool_destroy($135);
 }
 $136 = $1;
 $137 = ((($136)) + 24|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = ($138|0)!=(0|0);
 if ($139) {
  $140 = $1;
  $141 = ((($140)) + 24|0);
  $142 = HEAP32[$141>>2]|0;
  _pool_destroy($142);
 }
 $143 = $1;
 $144 = ((($143)) + 16|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = ($145|0)!=(0|0);
 if ($146) {
  $147 = $1;
  $148 = ((($147)) + 16|0);
  $149 = HEAP32[$148>>2]|0;
  _string_pool_destroy($149);
 }
 $150 = $1;
 _free($150);
 STACKTOP = sp;return;
}
function _sam_hdr_parse_sort_order($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $1 = $0;
 $3 = -1;
 $6 = $1;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP8[16212]|0;
 $10 = $9 << 24 >> 24;
 $11 = $10 << 8;
 $12 = HEAP8[(16213)>>0]|0;
 $13 = $12 << 24 >> 24;
 $14 = $11 | $13;
 $15 = (_kh_get_sam_hdr($8,$14)|0);
 $2 = $15;
 $16 = $2;
 $17 = $1;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($16|0)!=($20|0);
 if (!($21)) {
  $79 = $3;
  STACKTOP = sp;return ($79|0);
 }
 $22 = $1;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $2;
 $28 = (($26) + ($27<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 $4 = $29;
 $30 = $4;
 $31 = ((($30)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $5 = $32;
 while(1) {
  $33 = $5;
  $34 = ($33|0)!=(0|0);
  if (!($34)) {
   break;
  }
  $35 = $5;
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = HEAP8[$37>>0]|0;
  $39 = $38 << 24 >> 24;
  $40 = ($39|0)==(83);
  do {
   if ($40) {
    $41 = $5;
    $42 = ((($41)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ((($43)) + 1|0);
    $45 = HEAP8[$44>>0]|0;
    $46 = $45 << 24 >> 24;
    $47 = ($46|0)==(79);
    if ($47) {
     $48 = $5;
     $49 = ((($48)) + 4|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ((($50)) + 3|0);
     $52 = (_strcmp($51,16215)|0);
     $53 = ($52|0)==(0);
     if ($53) {
      $3 = 0;
      break;
     }
     $54 = $5;
     $55 = ((($54)) + 4|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ((($56)) + 3|0);
     $58 = (_strcmp($57,16224)|0);
     $59 = ($58|0)==(0);
     if ($59) {
      $3 = 1;
      break;
     }
     $60 = $5;
     $61 = ((($60)) + 4|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ((($62)) + 3|0);
     $64 = (_strcmp($63,16234)|0);
     $65 = ($64|0)==(0);
     if ($65) {
      $3 = 2;
      break;
     }
     $66 = $5;
     $67 = ((($66)) + 4|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 3|0);
     $70 = (_strcmp($69,16245)|0);
     $71 = ($70|0)!=(0);
     if ($71) {
      $72 = HEAP32[2398]|0;
      $73 = $5;
      $74 = ((($73)) + 4|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = ((($75)) + 3|0);
      HEAP32[$vararg_buffer>>2] = $76;
      (_fprintf($72,16253,$vararg_buffer)|0);
     }
    }
   }
  } while(0);
  $77 = $5;
  $78 = HEAP32[$77>>2]|0;
  $5 = $78;
 }
 $79 = $3;
 STACKTOP = sp;return ($79|0);
}
function _sam_hdr_link_pg($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $5 = 0;
 $9 = $2;
 $10 = ((($9)) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = ((($12)) + 60|0);
 HEAP32[$13>>2] = $11;
 $14 = $2;
 $15 = ((($14)) + 72|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = ((($17)) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19<<2;
 $21 = (_realloc($16,$20)|0);
 $22 = $2;
 $23 = ((($22)) + 72|0);
 HEAP32[$23>>2] = $21;
 $24 = $2;
 $25 = ((($24)) + 72|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  $1 = -1;
  $173 = $1;
  STACKTOP = sp;return ($173|0);
 }
 $3 = 0;
 while(1) {
  $28 = $3;
  $29 = $2;
  $30 = ((($29)) + 52|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($28|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = $3;
  $34 = $2;
  $35 = ((($34)) + 72|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $3;
  $38 = (($36) + ($37<<2)|0);
  HEAP32[$38>>2] = $33;
  $39 = $3;
  $40 = (($39) + 1)|0;
  $3 = $40;
 }
 $3 = 0;
 while(1) {
  $41 = $3;
  $42 = $2;
  $43 = ((($42)) + 52|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($41|0)<($44|0);
  if (!($45)) {
   break;
  }
  $46 = $2;
  $47 = ((($46)) + 64|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $3;
  $50 = (($48) + (($49*24)|0)|0);
  $51 = ((($50)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $7 = $52;
  while(1) {
   $53 = $7;
   $54 = ($53|0)!=(0|0);
   if (!($54)) {
    break;
   }
   $55 = $7;
   $56 = ((($55)) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = HEAP8[$57>>0]|0;
   $59 = $58 << 24 >> 24;
   $60 = ($59|0)==(80);
   if ($60) {
    $61 = $7;
    $62 = ((($61)) + 4|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ((($63)) + 1|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 << 24 >> 24;
    $67 = ($66|0)==(80);
    if ($67) {
     break;
    }
   }
   $68 = $7;
   $69 = HEAP32[$68>>2]|0;
   $7 = $69;
  }
  $70 = $7;
  $71 = ($70|0)!=(0|0);
  do {
   if ($71) {
    $72 = $7;
    $73 = ((($72)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $7;
    $76 = ((($75)) + 8|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (($74) + ($77)|0);
    $79 = HEAP8[$78>>0]|0;
    $8 = $79;
    $80 = $7;
    $81 = ((($80)) + 4|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $7;
    $84 = ((($83)) + 8|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = (($82) + ($85)|0);
    HEAP8[$86>>0] = 0;
    $87 = $2;
    $88 = ((($87)) + 68|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = $7;
    $91 = ((($90)) + 4|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ((($92)) + 3|0);
    $94 = (_kh_get_m_s2i($89,$93)|0);
    $6 = $94;
    $95 = $8;
    $96 = $7;
    $97 = ((($96)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = $7;
    $100 = ((($99)) + 8|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (($98) + ($101)|0);
    HEAP8[$102>>0] = $95;
    $103 = $6;
    $104 = $2;
    $105 = ((($104)) + 68|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = HEAP32[$106>>2]|0;
    $108 = ($103|0)==($107|0);
    if ($108) {
     $5 = -1;
     break;
    } else {
     $109 = $2;
     $110 = ((($109)) + 64|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = $2;
     $113 = ((($112)) + 68|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = ((($114)) + 24|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = $6;
     $118 = (($116) + ($117<<2)|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = (($111) + (($119*24)|0)|0);
     $121 = ((($120)) + 16|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = $2;
     $124 = ((($123)) + 64|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = $3;
     $127 = (($125) + (($126*24)|0)|0);
     $128 = ((($127)) + 20|0);
     HEAP32[$128>>2] = $122;
     $129 = $2;
     $130 = ((($129)) + 72|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = $2;
     $133 = ((($132)) + 68|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 24|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $6;
     $138 = (($136) + ($137<<2)|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (($131) + ($139<<2)|0);
     HEAP32[$140>>2] = -1;
     break;
    }
   }
  } while(0);
  $141 = $3;
  $142 = (($141) + 1)|0;
  $3 = $142;
 }
 $4 = 0;
 $3 = 0;
 while(1) {
  $143 = $3;
  $144 = $2;
  $145 = ((($144)) + 52|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = ($143|0)<($146|0);
  if (!($147)) {
   break;
  }
  $148 = $2;
  $149 = ((($148)) + 72|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = $3;
  $152 = (($150) + ($151<<2)|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = ($153|0)!=(-1);
  if ($154) {
   $155 = $2;
   $156 = ((($155)) + 72|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = $3;
   $159 = (($157) + ($158<<2)|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = $2;
   $162 = ((($161)) + 72|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $4;
   $165 = (($164) + 1)|0;
   $4 = $165;
   $166 = (($163) + ($164<<2)|0);
   HEAP32[$166>>2] = $160;
  }
  $167 = $3;
  $168 = (($167) + 1)|0;
  $3 = $168;
 }
 $169 = $4;
 $170 = $2;
 $171 = ((($170)) + 56|0);
 HEAP32[$171>>2] = $169;
 $172 = $5;
 $1 = $172;
 $173 = $1;
 STACKTOP = sp;return ($173|0);
}
function _kh_destroy_m_s2i_546($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _string_pool_create($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_malloc(12)|0);
 $3 = $4;
 $5 = (0|0)==($4|0);
 if ($5) {
  $1 = 0;
  $15 = $1;
  STACKTOP = sp;return ($15|0);
 }
 $6 = $2;
 $7 = ($6>>>0)<(1024);
 if ($7) {
  $2 = 1024;
 }
 $8 = $3;
 $9 = ((($8)) + 4|0);
 HEAP32[$9>>2] = 0;
 $10 = $2;
 $11 = $3;
 HEAP32[$11>>2] = $10;
 $12 = $3;
 $13 = ((($12)) + 8|0);
 HEAP32[$13>>2] = 0;
 $14 = $3;
 $1 = $14;
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _string_pool_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3>>>0)<($6>>>0);
  $8 = $1;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  if (!($7)) {
   break;
  }
  $11 = $2;
  $12 = (($10) + ($11<<3)|0);
  $13 = HEAP32[$12>>2]|0;
  _free($13);
  $14 = $2;
  $15 = (($14) + 1)|0;
  $2 = $15;
 }
 _free($10);
 $16 = $1;
 _free($16);
 STACKTOP = sp;return;
}
function _string_alloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = ($7>>>0)<=(0);
 if ($8) {
  $2 = 0;
  $56 = $2;
  STACKTOP = sp;return ($56|0);
 }
 $9 = $3;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $3;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $3;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) - 1)|0;
  $20 = (($15) + ($19<<3)|0);
  $5 = $20;
  $21 = $5;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $4;
  $25 = (($23) + ($24))|0;
  $26 = $3;
  $27 = HEAP32[$26>>2]|0;
  $28 = ($25>>>0)<($27>>>0);
  if ($28) {
   $29 = $5;
   $30 = HEAP32[$29>>2]|0;
   $31 = $5;
   $32 = ((($31)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($30) + ($33)|0);
   $6 = $34;
   $35 = $4;
   $36 = $5;
   $37 = ((($36)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + ($35))|0;
   HEAP32[$37>>2] = $39;
   $40 = $6;
   $2 = $40;
   $56 = $2;
   STACKTOP = sp;return ($56|0);
  }
 }
 $41 = $4;
 $42 = $3;
 $43 = HEAP32[$42>>2]|0;
 $44 = ($41>>>0)>($43>>>0);
 if ($44) {
  $45 = $4;
  $46 = $3;
  HEAP32[$46>>2] = $45;
 }
 $47 = $3;
 $48 = (_new_string_pool($47)|0);
 $5 = $48;
 $49 = $5;
 $50 = (0|0)==($49|0);
 if ($50) {
  $2 = 0;
  $56 = $2;
  STACKTOP = sp;return ($56|0);
 } else {
  $51 = $4;
  $52 = $5;
  $53 = ((($52)) + 4|0);
  HEAP32[$53>>2] = $51;
  $54 = $5;
  $55 = HEAP32[$54>>2]|0;
  $2 = $55;
  $56 = $2;
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function _new_string_pool($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 $11 = $10<<3;
 $12 = (_realloc($6,$11)|0);
 $3 = $12;
 $13 = $3;
 $14 = (0|0)==($13|0);
 if ($14) {
  $1 = 0;
  $39 = $1;
  STACKTOP = sp;return ($39|0);
 }
 $15 = $3;
 $16 = $2;
 $17 = ((($16)) + 8|0);
 HEAP32[$17>>2] = $15;
 $18 = $2;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $2;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($20) + ($23<<3)|0);
 $3 = $24;
 $25 = $2;
 $26 = HEAP32[$25>>2]|0;
 $27 = (_malloc($26)|0);
 $28 = $3;
 HEAP32[$28>>2] = $27;
 $29 = $3;
 $30 = HEAP32[$29>>2]|0;
 $31 = (0|0)==($30|0);
 if ($31) {
  $1 = 0;
  $39 = $1;
  STACKTOP = sp;return ($39|0);
 } else {
  $32 = $3;
  $33 = ((($32)) + 4|0);
  HEAP32[$33>>2] = 0;
  $34 = $2;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 1)|0;
  HEAP32[$35>>2] = $37;
  $38 = $3;
  $1 = $38;
  $39 = $1;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _string_dup($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $3;
 $7 = (_strlen($6)|0);
 $8 = (_string_ndup($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _string_ndup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = $6;
 $10 = (($9) + 1)|0;
 $11 = (_string_alloc($8,$10)|0);
 $7 = $11;
 $12 = $7;
 $13 = (0|0)==($12|0);
 if ($13) {
  $3 = 0;
  $21 = $3;
  STACKTOP = sp;return ($21|0);
 } else {
  $14 = $7;
  $15 = $5;
  $16 = $6;
  (_strncpy($14,$15,$16)|0);
  $17 = $7;
  $18 = $6;
  $19 = (($17) + ($18)|0);
  HEAP8[$19>>0] = 0;
  $20 = $7;
  $3 = $20;
  $21 = $3;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _cram_stats_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4096|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 4096|0);
  $8 = HEAP32[$7>>2]|0;
  _kh_destroy_m_i2i($8);
 }
 $9 = $1;
 _free($9);
 STACKTOP = sp;return;
}
function _kh_destroy_m_i2i($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _t_results_queue_init() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(100)|0);
 $0 = $1;
 $2 = $0;
 $3 = ((($2)) + 24|0);
 (_pthread_mutex_init($3,0)|0);
 $4 = $0;
 $5 = ((($4)) + 52|0);
 (_pthread_cond_init($5,0)|0);
 $6 = $0;
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = ((($9)) + 8|0);
 HEAP32[$10>>2] = 0;
 $11 = $0;
 $12 = ((($11)) + 12|0);
 HEAP32[$12>>2] = 0;
 $13 = $0;
 $14 = ((($13)) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = $0;
 $16 = ((($15)) + 20|0);
 HEAP32[$16>>2] = 0;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _t_pool_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = (_malloc(232)|0);
 $6 = $8;
 $9 = $3;
 $10 = $6;
 HEAP32[$10>>2] = $9;
 $11 = $4;
 $12 = $6;
 $13 = ((($12)) + 24|0);
 HEAP32[$13>>2] = $11;
 $14 = $6;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = 0;
 $16 = $6;
 $17 = ((($16)) + 8|0);
 HEAP32[$17>>2] = 0;
 $18 = $6;
 $19 = ((($18)) + 12|0);
 HEAP32[$19>>2] = 0;
 $20 = $6;
 $21 = ((($20)) + 20|0);
 HEAP32[$21>>2] = 0;
 $22 = $6;
 $23 = ((($22)) + 16|0);
 HEAP32[$23>>2] = 0;
 $24 = $6;
 $25 = ((($24)) + 204|0);
 HEAP32[$25>>2] = 0;
 $26 = $4;
 $27 = ($26*72)|0;
 $28 = (_malloc($27)|0);
 $29 = $6;
 $30 = ((($29)) + 28|0);
 HEAP32[$30>>2] = $28;
 $31 = $6;
 $32 = ((($31)) + 32|0);
 (_pthread_mutex_init($32,0)|0);
 $33 = $6;
 $34 = ((($33)) + 60|0);
 (_pthread_cond_init($34,0)|0);
 $35 = $6;
 $36 = ((($35)) + 156|0);
 (_pthread_cond_init($36,0)|0);
 $37 = $6;
 $38 = ((($37)) + 32|0);
 (___pthread_mutex_lock($38)|0);
 $39 = $4;
 $40 = $39<<2;
 $41 = (_malloc($40)|0);
 $42 = $6;
 $43 = ((($42)) + 204|0);
 HEAP32[$43>>2] = $41;
 $44 = ($41|0)!=(0|0);
 if (!($44)) {
  $2 = 0;
  $82 = $2;
  STACKTOP = sp;return ($82|0);
 }
 $45 = $6;
 $46 = ((($45)) + 208|0);
 HEAP32[$46>>2] = -1;
 $5 = 0;
 while(1) {
  $47 = $5;
  $48 = $4;
  $49 = ($47|0)<($48|0);
  $50 = $6;
  if (!($49)) {
   label = 8;
   break;
  }
  $51 = ((($50)) + 28|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $5;
  $54 = (($52) + (($53*72)|0)|0);
  $7 = $54;
  $55 = $6;
  $56 = ((($55)) + 204|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $5;
  $59 = (($57) + ($58<<2)|0);
  HEAP32[$59>>2] = 0;
  $60 = $6;
  $61 = $7;
  HEAP32[$61>>2] = $60;
  $62 = $5;
  $63 = $7;
  $64 = ((($63)) + 4|0);
  HEAP32[$64>>2] = $62;
  $65 = $7;
  $66 = ((($65)) + 64|0);
  $67 = $66;
  $68 = $67;
  HEAP32[$68>>2] = 0;
  $69 = (($67) + 4)|0;
  $70 = $69;
  HEAP32[$70>>2] = 0;
  $71 = $7;
  $72 = ((($71)) + 12|0);
  (_pthread_cond_init($72,0)|0);
  $73 = $7;
  $74 = ((($73)) + 8|0);
  $75 = $7;
  $76 = (_pthread_create(($74|0),(0|0),(51|0),($75|0))|0);
  $77 = (0)!=($76|0);
  if ($77) {
   label = 6;
   break;
  }
  $78 = $5;
  $79 = (($78) + 1)|0;
  $5 = $79;
 }
 if ((label|0) == 6) {
  $2 = 0;
  $82 = $2;
  STACKTOP = sp;return ($82|0);
 }
 else if ((label|0) == 8) {
  $80 = ((($50)) + 32|0);
  (___pthread_mutex_unlock($80)|0);
  $81 = $6;
  $2 = $81;
  $82 = $2;
  STACKTOP = sp;return ($82|0);
 }
 return (0)|0;
}
function _t_pool_worker($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $6 = $1;
 $2 = $6;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $3 = $8;
 while(1) {
  $9 = $3;
  $10 = ((($9)) + 32|0);
  (___pthread_mutex_lock($10)|0);
  while(1) {
   $11 = $3;
   $12 = ((($11)) + 16|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)!=(0|0);
   if ($14) {
    $127 = 0;
   } else {
    $15 = $3;
    $16 = ((($15)) + 12|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)!=(0);
    $19 = $18 ^ 1;
    $127 = $19;
   }
   $20 = $3;
   if (!($127)) {
    break;
   }
   $21 = ((($20)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + 1)|0;
   HEAP32[$21>>2] = $23;
   $24 = $3;
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0);
   if ($27) {
    $28 = $3;
    $29 = ((($28)) + 60|0);
    (_pthread_cond_signal($29)|0);
   }
   $30 = $3;
   $31 = ((($30)) + 208|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(-1);
   if ($33) {
    label = 10;
   } else {
    $34 = $3;
    $35 = ((($34)) + 208|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = $2;
    $38 = ((($37)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($36|0)>($39|0);
    if ($40) {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    label = 0;
    $41 = $2;
    $42 = ((($41)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = $3;
    $45 = ((($44)) + 208|0);
    HEAP32[$45>>2] = $43;
   }
   $46 = $3;
   $47 = ((($46)) + 204|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $2;
   $50 = ((($49)) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($48) + ($51<<2)|0);
   HEAP32[$52>>2] = 1;
   $53 = $2;
   $54 = ((($53)) + 12|0);
   $55 = $3;
   $56 = ((($55)) + 32|0);
   (_pthread_cond_wait($54,$56)|0);
   $57 = $3;
   $58 = ((($57)) + 204|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $2;
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (($59) + ($62<<2)|0);
   HEAP32[$63>>2] = 0;
   $64 = $3;
   $65 = ((($64)) + 208|0);
   HEAP32[$65>>2] = -1;
   $5 = 0;
   while(1) {
    $66 = $5;
    $67 = $3;
    $68 = ((($67)) + 24|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($66|0)<($69|0);
    if (!($70)) {
     break;
    }
    $71 = $3;
    $72 = ((($71)) + 204|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $5;
    $75 = (($73) + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)!=(0);
    $78 = $5;
    if ($77) {
     label = 14;
     break;
    }
    $81 = (($78) + 1)|0;
    $5 = $81;
   }
   if ((label|0) == 14) {
    label = 0;
    $79 = $3;
    $80 = ((($79)) + 208|0);
    HEAP32[$80>>2] = $78;
   }
   $82 = $3;
   $83 = ((($82)) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + -1)|0;
   HEAP32[$83>>2] = $85;
  }
  $86 = ((($20)) + 12|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ($87|0)!=(0);
  $89 = $3;
  if ($88) {
   break;
  }
  $91 = ((($89)) + 16|0);
  $92 = HEAP32[$91>>2]|0;
  $4 = $92;
  $93 = $4;
  $94 = ((($93)) + 8|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $3;
  $97 = ((($96)) + 16|0);
  HEAP32[$97>>2] = $95;
  $98 = ($95|0)!=(0|0);
  if (!($98)) {
   $99 = $3;
   $100 = ((($99)) + 20|0);
   HEAP32[$100>>2] = 0;
  }
  $101 = $3;
  $102 = ((($101)) + 4|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (($103) + -1)|0;
  HEAP32[$102>>2] = $104;
  $105 = $3;
  $106 = HEAP32[$105>>2]|0;
  $107 = ($103|0)>=($106|0);
  if ($107) {
   $108 = $3;
   $109 = ((($108)) + 156|0);
   (_pthread_cond_signal($109)|0);
  }
  $110 = $3;
  $111 = ((($110)) + 4|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($112|0)==(0);
  if ($113) {
   $114 = $3;
   $115 = ((($114)) + 60|0);
   (_pthread_cond_signal($115)|0);
  }
  $116 = $3;
  $117 = ((($116)) + 32|0);
  (___pthread_mutex_unlock($117)|0);
  $118 = $4;
  $119 = $4;
  $120 = HEAP32[$119>>2]|0;
  $121 = $4;
  $122 = ((($121)) + 4|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (FUNCTION_TABLE_ii[$120 & 63]($123)|0);
  (_t_pool_add_result($118,$124)|0);
  $125 = $4;
  ;HEAP32[$125>>2]=3149642683|0;HEAP32[$125+4>>2]=3149642683|0;HEAP32[$125+8>>2]=3149642683|0;HEAP32[$125+12>>2]=3149642683|0;HEAP32[$125+16>>2]=3149642683|0;HEAP32[$125+20>>2]=3149642683|0;
  $126 = $4;
  _free($126);
 }
 $90 = ((($89)) + 32|0);
 (___pthread_mutex_unlock($90)|0);
 _pthread_exit((0|0));
 // unreachable;
 return (0)|0;
}
function _t_pool_add_result($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $10 = $5;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  $2 = 0;
  $49 = $2;
  STACKTOP = sp;return ($49|0);
 }
 $12 = (_malloc(12)|0);
 $6 = $12;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $2 = -1;
  $49 = $2;
  STACKTOP = sp;return ($49|0);
 }
 $14 = $6;
 HEAP32[$14>>2] = 0;
 $15 = $4;
 $16 = $6;
 $17 = ((($16)) + 8|0);
 HEAP32[$17>>2] = $15;
 $18 = $3;
 $19 = ((($18)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $6;
 $22 = ((($21)) + 4|0);
 HEAP32[$22>>2] = $20;
 $23 = $5;
 $24 = ((($23)) + 24|0);
 (___pthread_mutex_lock($24)|0);
 $25 = $5;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 $29 = $6;
 $30 = $5;
 $31 = ((($30)) + 4|0);
 if ($28) {
  $32 = HEAP32[$31>>2]|0;
  HEAP32[$32>>2] = $29;
  $33 = $6;
  $34 = $5;
  $35 = ((($34)) + 4|0);
  HEAP32[$35>>2] = $33;
 } else {
  HEAP32[$31>>2] = $29;
  $36 = $5;
  HEAP32[$36>>2] = $29;
 }
 $37 = $5;
 $38 = ((($37)) + 16|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + 1)|0;
 HEAP32[$38>>2] = $40;
 $41 = $5;
 $42 = ((($41)) + 20|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + -1)|0;
 HEAP32[$42>>2] = $44;
 $45 = $5;
 $46 = ((($45)) + 52|0);
 (_pthread_cond_signal($46)|0);
 $47 = $5;
 $48 = ((($47)) + 24|0);
 (___pthread_mutex_unlock($48)|0);
 $2 = 0;
 $49 = $2;
 STACKTOP = sp;return ($49|0);
}
function _pool_create($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_malloc(20)|0);
 $3 = $4;
 $5 = (0|0)==($4|0);
 if ($5) {
  $1 = 0;
  $33 = $1;
  STACKTOP = sp;return ($33|0);
 }
 $6 = $2;
 $7 = (($6) + 4)|0;
 $8 = (($7) - 1)|0;
 $9 = $8 & -4;
 $2 = $9;
 $10 = $2;
 $11 = ($10>>>0)<(4);
 $$ = $11 ? 4 : $9;
 $2 = $$;
 $12 = $2;
 $13 = $3;
 HEAP32[$13>>2] = $12;
 $14 = $3;
 $15 = HEAP32[$14>>2]|0;
 $16 = $15<<10;
 $17 = (_next_power_2($16)|0);
 $18 = (1048576)<($17|0);
 if ($18) {
  $25 = 1048576;
 } else {
  $19 = $3;
  $20 = HEAP32[$19>>2]|0;
  $21 = $20<<10;
  $22 = (_next_power_2($21)|0);
  $25 = $22;
 }
 $23 = $3;
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = $25;
 $26 = $3;
 $27 = ((($26)) + 8|0);
 HEAP32[$27>>2] = 0;
 $28 = $3;
 $29 = ((($28)) + 12|0);
 HEAP32[$29>>2] = 0;
 $30 = $3;
 $31 = ((($30)) + 16|0);
 HEAP32[$31>>2] = 0;
 $32 = $3;
 $1 = $32;
 $33 = $1;
 STACKTOP = sp;return ($33|0);
}
function _next_power_2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (($2) + -1)|0;
 $1 = $3;
 $4 = $1;
 $5 = $4 >>> 1;
 $6 = $1;
 $7 = $6 | $5;
 $1 = $7;
 $8 = $1;
 $9 = $8 >>> 2;
 $10 = $1;
 $11 = $10 | $9;
 $1 = $11;
 $12 = $1;
 $13 = $12 >>> 4;
 $14 = $1;
 $15 = $14 | $13;
 $1 = $15;
 $16 = $1;
 $17 = $16 >>> 8;
 $18 = $1;
 $19 = $18 | $17;
 $1 = $19;
 $20 = $1;
 $21 = $20 >>> 16;
 $22 = $1;
 $23 = $22 | $21;
 $1 = $23;
 $24 = $1;
 $25 = (($24) + 1)|0;
 $1 = $25;
 $26 = $1;
 STACKTOP = sp;return ($26|0);
}
function _pool_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3>>>0)<($6>>>0);
  $8 = $1;
  $9 = ((($8)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  if (!($7)) {
   break;
  }
  $11 = $2;
  $12 = (($10) + ($11<<3)|0);
  $13 = HEAP32[$12>>2]|0;
  _free($13);
  $14 = $2;
  $15 = (($14) + 1)|0;
  $2 = $15;
 }
 _free($10);
 $16 = $1;
 _free($16);
 STACKTOP = sp;return;
}
function _pool_alloc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (0|0)!=($7|0);
 $9 = $2;
 if ($8) {
  $10 = ((($9)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $4 = $11;
  $12 = $2;
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = ((($16)) + 16|0);
  HEAP32[$17>>2] = $15;
  $18 = $4;
  $1 = $18;
  $63 = $1;
  STACKTOP = sp;return ($63|0);
 }
 $19 = ((($9)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $2;
  $23 = ((($22)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $2;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) - 1)|0;
  $29 = (($24) + ($28<<3)|0);
  $3 = $29;
  $30 = $3;
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $2;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($32) + ($34))|0;
  $36 = $2;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($35>>>0)<($38>>>0);
  if ($39) {
   $40 = $3;
   $41 = HEAP32[$40>>2]|0;
   $42 = $3;
   $43 = ((($42)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($41) + ($44)|0);
   $4 = $45;
   $46 = $2;
   $47 = HEAP32[$46>>2]|0;
   $48 = $3;
   $49 = ((($48)) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + ($47))|0;
   HEAP32[$49>>2] = $51;
   $52 = $4;
   $1 = $52;
   $63 = $1;
   STACKTOP = sp;return ($63|0);
  }
 }
 $53 = $2;
 $54 = (_new_pool($53)|0);
 $3 = $54;
 $55 = $3;
 $56 = (0|0)==($55|0);
 if ($56) {
  $1 = 0;
  $63 = $1;
  STACKTOP = sp;return ($63|0);
 } else {
  $57 = $2;
  $58 = HEAP32[$57>>2]|0;
  $59 = $3;
  $60 = ((($59)) + 4|0);
  HEAP32[$60>>2] = $58;
  $61 = $3;
  $62 = HEAP32[$61>>2]|0;
  $1 = $62;
  $63 = $1;
  STACKTOP = sp;return ($63|0);
 }
 return (0)|0;
}
function _new_pool($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7>>>0) / ($9>>>0))&-1;
 $3 = $10;
 $11 = $2;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 1)|0;
 $18 = $17<<3;
 $19 = (_realloc($13,$18)|0);
 $4 = $19;
 $20 = $4;
 $21 = (0|0)==($20|0);
 if ($21) {
  $1 = 0;
  $48 = $1;
  STACKTOP = sp;return ($48|0);
 }
 $22 = $4;
 $23 = $2;
 $24 = ((($23)) + 12|0);
 HEAP32[$24>>2] = $22;
 $25 = $2;
 $26 = ((($25)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $2;
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($27) + ($30<<3)|0);
 $4 = $31;
 $32 = $3;
 $33 = $2;
 $34 = HEAP32[$33>>2]|0;
 $35 = Math_imul($32, $34)|0;
 $36 = (_malloc($35)|0);
 $37 = $4;
 HEAP32[$37>>2] = $36;
 $38 = $4;
 $39 = HEAP32[$38>>2]|0;
 $40 = (0|0)==($39|0);
 if ($40) {
  $1 = 0;
  $48 = $1;
  STACKTOP = sp;return ($48|0);
 } else {
  $41 = $4;
  $42 = ((($41)) + 4|0);
  HEAP32[$42>>2] = 0;
  $43 = $2;
  $44 = ((($43)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 1)|0;
  HEAP32[$44>>2] = $46;
  $47 = $4;
  $1 = $47;
  $48 = $1;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function _rans_uncompress_O0($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3200|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(3200|0);
 $15 = sp + 64|0;
 $16 = sp + 2168|0;
 $17 = sp + 60|0;
 $18 = sp + 56|0;
 $19 = sp + 52|0;
 $20 = sp + 48|0;
 $21 = sp + 44|0;
 $23 = sp + 24|0;
 $25 = sp;
 $26 = sp + 3196|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $28 = $4;
 $29 = ((($28)) + 9|0);
 $7 = $29;
 _memset(($15|0),0,2052)|0;
 $30 = $4;
 $31 = ((($30)) + 1|0);
 $4 = $31;
 $32 = HEAP8[$30>>0]|0;
 $33 = $32&255;
 $34 = ($33|0)!=(0);
 if ($34) {
  $3 = 0;
  $444 = $3;
  STACKTOP = sp;return ($444|0);
 }
 $35 = $4;
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = $37 << 0;
 $39 = $4;
 $40 = ((($39)) + 1|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = $42 << 8;
 $44 = $38 | $43;
 $45 = $4;
 $46 = ((($45)) + 2|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = $48 << 16;
 $50 = $44 | $49;
 $51 = $4;
 $52 = ((($51)) + 3|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 $55 = $54 << 24;
 $56 = $50 | $55;
 $12 = $56;
 $57 = $4;
 $58 = ((($57)) + 4|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = $60 << 0;
 $62 = $4;
 $63 = ((($62)) + 5|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = $65 << 8;
 $67 = $61 | $66;
 $68 = $4;
 $69 = ((($68)) + 6|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = $70&255;
 $72 = $71 << 16;
 $73 = $67 | $72;
 $74 = $4;
 $75 = ((($74)) + 7|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&255;
 $78 = $77 << 24;
 $79 = $73 | $78;
 $11 = $79;
 $80 = $12;
 $81 = $5;
 $82 = (($81) - 9)|0;
 $83 = ($80|0)!=($82|0);
 if ($83) {
  $3 = 0;
  $444 = $3;
  STACKTOP = sp;return ($444|0);
 }
 $84 = $11;
 $85 = (_malloc($84)|0);
 $14 = $85;
 $86 = $14;
 $87 = ($86|0)!=(0|0);
 if (!($87)) {
  $3 = 0;
  $444 = $3;
  STACKTOP = sp;return ($444|0);
 }
 $10 = 0;
 $13 = 0;
 $88 = $7;
 $89 = ((($88)) + 1|0);
 $7 = $89;
 $90 = HEAP8[$88>>0]|0;
 $91 = $90&255;
 $9 = $91;
 while(1) {
  $92 = $7;
  $93 = ((($92)) + 1|0);
  $7 = $93;
  $94 = HEAP8[$92>>0]|0;
  $95 = $94&255;
  $96 = $9;
  $97 = (($15) + ($96<<3)|0);
  HEAP32[$97>>2] = $95;
  $98 = ($95|0)>=(128);
  if ($98) {
   $99 = $9;
   $100 = (($15) + ($99<<3)|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = $101 & -129;
   HEAP32[$100>>2] = $102;
   $103 = $9;
   $104 = (($15) + ($103<<3)|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $105 & 127;
   $107 = $106 << 8;
   $108 = $7;
   $109 = ((($108)) + 1|0);
   $7 = $109;
   $110 = HEAP8[$108>>0]|0;
   $111 = $110&255;
   $112 = $107 | $111;
   $113 = $9;
   $114 = (($15) + ($113<<3)|0);
   HEAP32[$114>>2] = $112;
  }
  $115 = $10;
  $116 = $9;
  $117 = (($15) + ($116<<3)|0);
  $118 = ((($117)) + 4|0);
  HEAP32[$118>>2] = $115;
  $119 = $9;
  $120 = (($16) + ($119<<2)|0);
  $121 = $9;
  $122 = (($15) + ($121<<3)|0);
  $123 = ((($122)) + 4|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $9;
  $126 = (($15) + ($125<<3)|0);
  $127 = HEAP32[$126>>2]|0;
  _RansDecSymbolInit($120,$124,$127);
  $128 = ((($15)) + 2048|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = ($129|0)!=(0|0);
  if (!($130)) {
   $131 = (_malloc(4096)|0);
   $132 = ((($15)) + 2048|0);
   HEAP32[$132>>2] = $131;
  }
  $133 = ((($15)) + 2048|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $10;
  $136 = (($134) + ($135)|0);
  $137 = $9;
  $138 = $137&255;
  $139 = $9;
  $140 = (($15) + ($139<<3)|0);
  $141 = HEAP32[$140>>2]|0;
  _memset(($136|0),($138|0),($141|0))|0;
  $142 = $9;
  $143 = (($15) + ($142<<3)|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = $10;
  $146 = (($145) + ($144))|0;
  $10 = $146;
  $147 = $13;
  $148 = ($147|0)!=(0);
  if ($148) {
   label = 15;
  } else {
   $149 = $9;
   $150 = (($149) + 1)|0;
   $151 = $7;
   $152 = HEAP8[$151>>0]|0;
   $153 = $152&255;
   $154 = ($150|0)==($153|0);
   if ($154) {
    $155 = $7;
    $156 = ((($155)) + 1|0);
    $7 = $156;
    $157 = HEAP8[$155>>0]|0;
    $158 = $157&255;
    $9 = $158;
    $159 = $7;
    $160 = ((($159)) + 1|0);
    $7 = $160;
    $161 = HEAP8[$159>>0]|0;
    $162 = $161&255;
    $13 = $162;
   } else {
    label = 15;
   }
  }
  do {
   if ((label|0) == 15) {
    label = 0;
    $163 = $13;
    $164 = ($163|0)!=(0);
    if ($164) {
     $165 = $13;
     $166 = (($165) + -1)|0;
     $13 = $166;
     $167 = $9;
     $168 = (($167) + 1)|0;
     $9 = $168;
     break;
    } else {
     $169 = $7;
     $170 = ((($169)) + 1|0);
     $7 = $170;
     $171 = HEAP8[$169>>0]|0;
     $172 = $171&255;
     $9 = $172;
     break;
    }
   }
  } while(0);
  $173 = $9;
  $174 = ($173|0)!=(0);
  if (!($174)) {
   break;
  }
 }
 $175 = $10;
 $176 = ($175|0)<(4096);
 if (!($176)) {
  ___assert_fail((16333|0),(16283|0),260,(16345|0));
  // unreachable;
 }
 $177 = $7;
 HEAP32[$21>>2] = $177;
 _RansDecInit($17,$21);
 _RansDecInit($18,$21);
 _RansDecInit($19,$21);
 _RansDecInit($20,$21);
 $178 = $11;
 $179 = $178 & -4;
 $22 = $179;
 $180 = HEAP32[$17>>2]|0;
 HEAP32[$23>>2] = $180;
 $181 = HEAP32[$18>>2]|0;
 $182 = ((($23)) + 4|0);
 HEAP32[$182>>2] = $181;
 $183 = HEAP32[$19>>2]|0;
 $184 = ((($23)) + 8|0);
 HEAP32[$184>>2] = $183;
 $185 = HEAP32[$20>>2]|0;
 $186 = ((($23)) + 12|0);
 HEAP32[$186>>2] = $185;
 $24 = 4095;
 $8 = 0;
 while(1) {
  $187 = $8;
  $188 = $22;
  $189 = ($187|0)<($188|0);
  if (!($189)) {
   break;
  }
  $190 = HEAP32[$23>>2]|0;
  $191 = $24;
  $192 = $190 & $191;
  HEAP32[$25>>2] = $192;
  $193 = ((($25)) + 4|0);
  $194 = ((($23)) + 4|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = $24;
  $197 = $195 & $196;
  HEAP32[$193>>2] = $197;
  $198 = ((($193)) + 4|0);
  $199 = ((($23)) + 8|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = $24;
  $202 = $200 & $201;
  HEAP32[$198>>2] = $202;
  $203 = ((($198)) + 4|0);
  $204 = ((($23)) + 12|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = $24;
  $207 = $205 & $206;
  HEAP32[$203>>2] = $207;
  $208 = ((($15)) + 2048|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = HEAP32[$25>>2]|0;
  $211 = (($209) + ($210)|0);
  $212 = HEAP8[$211>>0]|0;
  HEAP8[$26>>0] = $212;
  $213 = ((($26)) + 1|0);
  $214 = ((($15)) + 2048|0);
  $215 = HEAP32[$214>>2]|0;
  $216 = ((($25)) + 4|0);
  $217 = HEAP32[$216>>2]|0;
  $218 = (($215) + ($217)|0);
  $219 = HEAP8[$218>>0]|0;
  HEAP8[$213>>0] = $219;
  $220 = ((($213)) + 1|0);
  $221 = ((($15)) + 2048|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = ((($25)) + 8|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = (($222) + ($224)|0);
  $226 = HEAP8[$225>>0]|0;
  HEAP8[$220>>0] = $226;
  $227 = ((($220)) + 1|0);
  $228 = ((($15)) + 2048|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = ((($25)) + 12|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = (($229) + ($231)|0);
  $233 = HEAP8[$232>>0]|0;
  HEAP8[$227>>0] = $233;
  $234 = HEAP8[$26>>0]|0;
  $235 = $14;
  $236 = $8;
  $237 = (($236) + 0)|0;
  $238 = (($235) + ($237)|0);
  HEAP8[$238>>0] = $234;
  $239 = ((($26)) + 1|0);
  $240 = HEAP8[$239>>0]|0;
  $241 = $14;
  $242 = $8;
  $243 = (($242) + 1)|0;
  $244 = (($241) + ($243)|0);
  HEAP8[$244>>0] = $240;
  $245 = ((($26)) + 2|0);
  $246 = HEAP8[$245>>0]|0;
  $247 = $14;
  $248 = $8;
  $249 = (($248) + 2)|0;
  $250 = (($247) + ($249)|0);
  HEAP8[$250>>0] = $246;
  $251 = ((($26)) + 3|0);
  $252 = HEAP8[$251>>0]|0;
  $253 = $14;
  $254 = $8;
  $255 = (($254) + 3)|0;
  $256 = (($253) + ($255)|0);
  HEAP8[$256>>0] = $252;
  $257 = HEAP8[$26>>0]|0;
  $258 = $257&255;
  $259 = (($16) + ($258<<2)|0);
  $260 = ((($259)) + 2|0);
  $261 = HEAP16[$260>>1]|0;
  $262 = $261&65535;
  $263 = HEAP32[$23>>2]|0;
  $264 = $263 >>> 12;
  $265 = Math_imul($262, $264)|0;
  HEAP32[$23>>2] = $265;
  $266 = ((($26)) + 1|0);
  $267 = HEAP8[$266>>0]|0;
  $268 = $267&255;
  $269 = (($16) + ($268<<2)|0);
  $270 = ((($269)) + 2|0);
  $271 = HEAP16[$270>>1]|0;
  $272 = $271&65535;
  $273 = ((($23)) + 4|0);
  $274 = HEAP32[$273>>2]|0;
  $275 = $274 >>> 12;
  $276 = Math_imul($272, $275)|0;
  $277 = ((($23)) + 4|0);
  HEAP32[$277>>2] = $276;
  $278 = ((($26)) + 2|0);
  $279 = HEAP8[$278>>0]|0;
  $280 = $279&255;
  $281 = (($16) + ($280<<2)|0);
  $282 = ((($281)) + 2|0);
  $283 = HEAP16[$282>>1]|0;
  $284 = $283&65535;
  $285 = ((($23)) + 8|0);
  $286 = HEAP32[$285>>2]|0;
  $287 = $286 >>> 12;
  $288 = Math_imul($284, $287)|0;
  $289 = ((($23)) + 8|0);
  HEAP32[$289>>2] = $288;
  $290 = ((($26)) + 3|0);
  $291 = HEAP8[$290>>0]|0;
  $292 = $291&255;
  $293 = (($16) + ($292<<2)|0);
  $294 = ((($293)) + 2|0);
  $295 = HEAP16[$294>>1]|0;
  $296 = $295&65535;
  $297 = ((($23)) + 12|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = $298 >>> 12;
  $300 = Math_imul($296, $299)|0;
  $301 = ((($23)) + 12|0);
  HEAP32[$301>>2] = $300;
  $302 = HEAP32[$25>>2]|0;
  $303 = HEAP8[$26>>0]|0;
  $304 = $303&255;
  $305 = (($16) + ($304<<2)|0);
  $306 = HEAP16[$305>>1]|0;
  $307 = $306&65535;
  $308 = (($302) - ($307))|0;
  $309 = HEAP32[$23>>2]|0;
  $310 = (($309) + ($308))|0;
  HEAP32[$23>>2] = $310;
  $311 = ((($25)) + 4|0);
  $312 = HEAP32[$311>>2]|0;
  $313 = ((($26)) + 1|0);
  $314 = HEAP8[$313>>0]|0;
  $315 = $314&255;
  $316 = (($16) + ($315<<2)|0);
  $317 = HEAP16[$316>>1]|0;
  $318 = $317&65535;
  $319 = (($312) - ($318))|0;
  $320 = ((($23)) + 4|0);
  $321 = HEAP32[$320>>2]|0;
  $322 = (($321) + ($319))|0;
  HEAP32[$320>>2] = $322;
  $323 = ((($25)) + 8|0);
  $324 = HEAP32[$323>>2]|0;
  $325 = ((($26)) + 2|0);
  $326 = HEAP8[$325>>0]|0;
  $327 = $326&255;
  $328 = (($16) + ($327<<2)|0);
  $329 = HEAP16[$328>>1]|0;
  $330 = $329&65535;
  $331 = (($324) - ($330))|0;
  $332 = ((($23)) + 8|0);
  $333 = HEAP32[$332>>2]|0;
  $334 = (($333) + ($331))|0;
  HEAP32[$332>>2] = $334;
  $335 = ((($25)) + 12|0);
  $336 = HEAP32[$335>>2]|0;
  $337 = ((($26)) + 3|0);
  $338 = HEAP8[$337>>0]|0;
  $339 = $338&255;
  $340 = (($16) + ($339<<2)|0);
  $341 = HEAP16[$340>>1]|0;
  $342 = $341&65535;
  $343 = (($336) - ($342))|0;
  $344 = ((($23)) + 12|0);
  $345 = HEAP32[$344>>2]|0;
  $346 = (($345) + ($343))|0;
  HEAP32[$344>>2] = $346;
  _RansDecRenorm($23,$21);
  $347 = ((($23)) + 4|0);
  _RansDecRenorm($347,$21);
  $348 = ((($23)) + 8|0);
  _RansDecRenorm($348,$21);
  $349 = ((($23)) + 12|0);
  _RansDecRenorm($349,$21);
  $350 = $8;
  $351 = (($350) + 4)|0;
  $8 = $351;
 }
 $352 = HEAP32[$23>>2]|0;
 HEAP32[$17>>2] = $352;
 $353 = ((($23)) + 4|0);
 $354 = HEAP32[$353>>2]|0;
 HEAP32[$18>>2] = $354;
 $355 = ((($23)) + 8|0);
 $356 = HEAP32[$355>>2]|0;
 HEAP32[$19>>2] = $356;
 $357 = ((($23)) + 12|0);
 $358 = HEAP32[$357>>2]|0;
 HEAP32[$20>>2] = $358;
 $359 = $11;
 $360 = $359 & 3;
 switch ($360|0) {
 case 0:  {
  break;
 }
 case 1:  {
  $361 = ((($15)) + 2048|0);
  $362 = HEAP32[$361>>2]|0;
  $363 = (_RansDecGet($17,12)|0);
  $364 = (($362) + ($363)|0);
  $365 = HEAP8[$364>>0]|0;
  $27 = $365;
  $366 = $27;
  $367 = $366&255;
  $368 = (($16) + ($367<<2)|0);
  _RansDecAdvanceSymbol($17,$21,$368,12);
  $369 = $27;
  $370 = $14;
  $371 = $22;
  $372 = (($370) + ($371)|0);
  $$sink = $369;$$sink1 = $372;
  label = 29;
  break;
 }
 case 2:  {
  $373 = ((($15)) + 2048|0);
  $374 = HEAP32[$373>>2]|0;
  $375 = (_RansDecGet($17,12)|0);
  $376 = (($374) + ($375)|0);
  $377 = HEAP8[$376>>0]|0;
  $27 = $377;
  $378 = $27;
  $379 = $378&255;
  $380 = (($16) + ($379<<2)|0);
  _RansDecAdvanceSymbol($17,$21,$380,12);
  $381 = $27;
  $382 = $14;
  $383 = $22;
  $384 = (($382) + ($383)|0);
  HEAP8[$384>>0] = $381;
  $385 = ((($15)) + 2048|0);
  $386 = HEAP32[$385>>2]|0;
  $387 = (_RansDecGet($18,12)|0);
  $388 = (($386) + ($387)|0);
  $389 = HEAP8[$388>>0]|0;
  $27 = $389;
  $390 = $27;
  $391 = $390&255;
  $392 = (($16) + ($391<<2)|0);
  _RansDecAdvanceSymbol($18,$21,$392,12);
  $393 = $27;
  $394 = $14;
  $395 = $22;
  $396 = (($395) + 1)|0;
  $397 = (($394) + ($396)|0);
  $$sink = $393;$$sink1 = $397;
  label = 29;
  break;
 }
 case 3:  {
  $398 = ((($15)) + 2048|0);
  $399 = HEAP32[$398>>2]|0;
  $400 = (_RansDecGet($17,12)|0);
  $401 = (($399) + ($400)|0);
  $402 = HEAP8[$401>>0]|0;
  $27 = $402;
  $403 = $27;
  $404 = $403&255;
  $405 = (($16) + ($404<<2)|0);
  _RansDecAdvanceSymbol($17,$21,$405,12);
  $406 = $27;
  $407 = $14;
  $408 = $22;
  $409 = (($407) + ($408)|0);
  HEAP8[$409>>0] = $406;
  $410 = ((($15)) + 2048|0);
  $411 = HEAP32[$410>>2]|0;
  $412 = (_RansDecGet($18,12)|0);
  $413 = (($411) + ($412)|0);
  $414 = HEAP8[$413>>0]|0;
  $27 = $414;
  $415 = $27;
  $416 = $415&255;
  $417 = (($16) + ($416<<2)|0);
  _RansDecAdvanceSymbol($18,$21,$417,12);
  $418 = $27;
  $419 = $14;
  $420 = $22;
  $421 = (($420) + 1)|0;
  $422 = (($419) + ($421)|0);
  HEAP8[$422>>0] = $418;
  $423 = ((($15)) + 2048|0);
  $424 = HEAP32[$423>>2]|0;
  $425 = (_RansDecGet($19,12)|0);
  $426 = (($424) + ($425)|0);
  $427 = HEAP8[$426>>0]|0;
  $27 = $427;
  $428 = $27;
  $429 = $428&255;
  $430 = (($16) + ($429<<2)|0);
  _RansDecAdvanceSymbol($19,$21,$430,12);
  $431 = $27;
  $432 = $14;
  $433 = $22;
  $434 = (($433) + 2)|0;
  $435 = (($432) + ($434)|0);
  $$sink = $431;$$sink1 = $435;
  label = 29;
  break;
 }
 default: {
  // unreachable;
 }
 }
 if ((label|0) == 29) {
  HEAP8[$$sink1>>0] = $$sink;
 }
 $436 = $11;
 $437 = $6;
 HEAP32[$437>>2] = $436;
 $438 = ((($15)) + 2048|0);
 $439 = HEAP32[$438>>2]|0;
 $440 = ($439|0)!=(0|0);
 if ($440) {
  $441 = ((($15)) + 2048|0);
  $442 = HEAP32[$441>>2]|0;
  _free($442);
 }
 $443 = $14;
 $3 = $443;
 $444 = $3;
 STACKTOP = sp;return ($444|0);
}
function _RansDecSymbolInit($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = ($6>>>0)<=(65536);
 if (!($7)) {
  ___assert_fail((16364|0),(16309|0),259,(16383|0));
  // unreachable;
 }
 $8 = $5;
 $9 = $4;
 $10 = (65536 - ($9))|0;
 $11 = ($8>>>0)<=($10>>>0);
 if ($11) {
  $12 = $4;
  $13 = $12&65535;
  $14 = $3;
  HEAP16[$14>>1] = $13;
  $15 = $5;
  $16 = $15&65535;
  $17 = $3;
  $18 = ((($17)) + 2|0);
  HEAP16[$18>>1] = $16;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((16401|0),(16309|0),260,(16383|0));
  // unreachable;
 }
}
function _RansDecInit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $5 = $7;
 $8 = $5;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 0;
 $4 = $11;
 $12 = $5;
 $13 = ((($12)) + 1|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 << 8;
 $17 = $4;
 $18 = $17 | $16;
 $4 = $18;
 $19 = $5;
 $20 = ((($19)) + 2|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $22 << 16;
 $24 = $4;
 $25 = $24 | $23;
 $4 = $25;
 $26 = $5;
 $27 = ((($26)) + 3|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 << 24;
 $31 = $4;
 $32 = $31 | $30;
 $4 = $32;
 $33 = $5;
 $34 = ((($33)) + 4|0);
 $5 = $34;
 $35 = $5;
 $36 = $3;
 HEAP32[$36>>2] = $35;
 $37 = $4;
 $38 = $2;
 HEAP32[$38>>2] = $37;
 STACKTOP = sp;return;
}
function _RansDecRenorm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 $4 = $7;
 $8 = $4;
 $9 = ($8>>>0)<(8388608);
 if (!($9)) {
  $23 = $4;
  $24 = $2;
  HEAP32[$24>>2] = $23;
  STACKTOP = sp;return;
 }
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 while(1) {
  $12 = $4;
  $13 = $12 << 8;
  $14 = $5;
  $15 = ((($14)) + 1|0);
  $5 = $15;
  $16 = HEAP8[$14>>0]|0;
  $17 = $16&255;
  $18 = $13 | $17;
  $4 = $18;
  $19 = $4;
  $20 = ($19>>>0)<(8388608);
  if (!($20)) {
   break;
  }
 }
 $21 = $5;
 $22 = $3;
 HEAP32[$22>>2] = $21;
 $23 = $4;
 $24 = $2;
 HEAP32[$24>>2] = $23;
 STACKTOP = sp;return;
}
function _RansDecGet($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = 1 << $6;
 $8 = (($7) - 1)|0;
 $9 = $5 & $8;
 STACKTOP = sp;return ($9|0);
}
function _RansDecAdvanceSymbol($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = $6;
 $14 = ((($13)) + 2|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = $7;
 _RansDecAdvance($8,$9,$12,$16,$17);
 STACKTOP = sp;return;
}
function _RansDecAdvance($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $13 = $9;
 $14 = 1 << $13;
 $15 = (($14) - 1)|0;
 $10 = $15;
 $16 = $5;
 $17 = HEAP32[$16>>2]|0;
 $11 = $17;
 $18 = $8;
 $19 = $11;
 $20 = $9;
 $21 = $19 >>> $20;
 $22 = Math_imul($18, $21)|0;
 $23 = $11;
 $24 = $10;
 $25 = $23 & $24;
 $26 = (($22) + ($25))|0;
 $27 = $7;
 $28 = (($26) - ($27))|0;
 $11 = $28;
 $29 = $11;
 $30 = ($29>>>0)<(8388608);
 if (!($30)) {
  $44 = $11;
  $45 = $5;
  HEAP32[$45>>2] = $44;
  STACKTOP = sp;return;
 }
 $31 = $6;
 $32 = HEAP32[$31>>2]|0;
 $12 = $32;
 while(1) {
  $33 = $11;
  $34 = $33 << 8;
  $35 = $12;
  $36 = ((($35)) + 1|0);
  $12 = $36;
  $37 = HEAP8[$35>>0]|0;
  $38 = $37&255;
  $39 = $34 | $38;
  $11 = $39;
  $40 = $11;
  $41 = ($40>>>0)<(8388608);
  if (!($41)) {
   break;
  }
 }
 $42 = $12;
 $43 = $6;
 HEAP32[$43>>2] = $42;
 $44 = $11;
 $45 = $5;
 HEAP32[$45>>2] = $44;
 STACKTOP = sp;return;
}
function _rans_uncompress_O1($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $18 = sp + 84|0;
 $19 = sp + 80|0;
 $20 = sp + 76|0;
 $21 = sp + 72|0;
 $22 = sp + 68|0;
 $28 = sp + 32|0;
 $29 = sp + 16|0;
 $30 = sp;
 $31 = sp + 152|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $33 = $4;
 $34 = ((($33)) + 9|0);
 $7 = $34;
 $9 = -999;
 $15 = 0;
 $16 = 0;
 $17 = 0;
 $35 = $4;
 $36 = ((($35)) + 1|0);
 $4 = $36;
 $37 = HEAP8[$35>>0]|0;
 $38 = $37&255;
 $39 = ($38|0)!=(1);
 if ($39) {
  $3 = 0;
  $570 = $3;
  STACKTOP = sp;return ($570|0);
 }
 $40 = $4;
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = $42 << 0;
 $44 = $4;
 $45 = ((($44)) + 1|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = $47 << 8;
 $49 = $43 | $48;
 $50 = $4;
 $51 = ((($50)) + 2|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52&255;
 $54 = $53 << 16;
 $55 = $49 | $54;
 $56 = $4;
 $57 = ((($56)) + 3|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 $60 = $59 << 24;
 $61 = $55 | $60;
 $12 = $61;
 $62 = $4;
 $63 = ((($62)) + 4|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = $65 << 0;
 $67 = $4;
 $68 = ((($67)) + 5|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&255;
 $71 = $70 << 8;
 $72 = $66 | $71;
 $73 = $4;
 $74 = ((($73)) + 6|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $77 = $76 << 16;
 $78 = $72 | $77;
 $79 = $4;
 $80 = ((($79)) + 7|0);
 $81 = HEAP8[$80>>0]|0;
 $82 = $81&255;
 $83 = $82 << 24;
 $84 = $78 | $83;
 $11 = $84;
 $85 = $12;
 $86 = $5;
 $87 = (($86) - 9)|0;
 $88 = ($85|0)!=($87|0);
 if ($88) {
  $3 = 0;
  $570 = $3;
  STACKTOP = sp;return ($570|0);
 }
 $89 = (_calloc(256,2052)|0);
 $16 = $89;
 $90 = $16;
 $91 = ($90|0)!=(0|0);
 L9: do {
  if ($91) {
   $92 = (_malloc(262144)|0);
   $17 = $92;
   $93 = $17;
   $94 = ($93|0)!=(0|0);
   if ($94) {
    $13 = 0;
    $95 = $7;
    $96 = ((($95)) + 1|0);
    $7 = $96;
    $97 = HEAP8[$95>>0]|0;
    $98 = $97&255;
    $8 = $98;
    L12: while(1) {
     $10 = 0;
     $14 = 0;
     $99 = $7;
     $100 = ((($99)) + 1|0);
     $7 = $100;
     $101 = HEAP8[$99>>0]|0;
     $102 = $101&255;
     $9 = $102;
     while(1) {
      $103 = $7;
      $104 = ((($103)) + 1|0);
      $7 = $104;
      $105 = HEAP8[$103>>0]|0;
      $106 = $105&255;
      $107 = $16;
      $108 = $8;
      $109 = (($107) + (($108*2052)|0)|0);
      $110 = $9;
      $111 = (($109) + ($110<<3)|0);
      HEAP32[$111>>2] = $106;
      $112 = ($106|0)>=(128);
      if ($112) {
       $113 = $16;
       $114 = $8;
       $115 = (($113) + (($114*2052)|0)|0);
       $116 = $9;
       $117 = (($115) + ($116<<3)|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = $118 & -129;
       HEAP32[$117>>2] = $119;
       $120 = $16;
       $121 = $8;
       $122 = (($120) + (($121*2052)|0)|0);
       $123 = $9;
       $124 = (($122) + ($123<<3)|0);
       $125 = HEAP32[$124>>2]|0;
       $126 = $125 & 127;
       $127 = $126 << 8;
       $128 = $7;
       $129 = ((($128)) + 1|0);
       $7 = $129;
       $130 = HEAP8[$128>>0]|0;
       $131 = $130&255;
       $132 = $127 | $131;
       $133 = $16;
       $134 = $8;
       $135 = (($133) + (($134*2052)|0)|0);
       $136 = $9;
       $137 = (($135) + ($136<<3)|0);
       HEAP32[$137>>2] = $132;
      }
      $138 = $10;
      $139 = $16;
      $140 = $8;
      $141 = (($139) + (($140*2052)|0)|0);
      $142 = $9;
      $143 = (($141) + ($142<<3)|0);
      $144 = ((($143)) + 4|0);
      HEAP32[$144>>2] = $138;
      $145 = $16;
      $146 = $8;
      $147 = (($145) + (($146*2052)|0)|0);
      $148 = $9;
      $149 = (($147) + ($148<<3)|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ($150|0)!=(0);
      if (!($151)) {
       $152 = $16;
       $153 = $8;
       $154 = (($152) + (($153*2052)|0)|0);
       $155 = $9;
       $156 = (($154) + ($155<<3)|0);
       HEAP32[$156>>2] = 4096;
      }
      $157 = $17;
      $158 = $8;
      $159 = (($157) + ($158<<10)|0);
      $160 = $9;
      $161 = (($159) + ($160<<2)|0);
      $162 = $16;
      $163 = $8;
      $164 = (($162) + (($163*2052)|0)|0);
      $165 = $9;
      $166 = (($164) + ($165<<3)|0);
      $167 = ((($166)) + 4|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = $16;
      $170 = $8;
      $171 = (($169) + (($170*2052)|0)|0);
      $172 = $9;
      $173 = (($171) + ($172<<3)|0);
      $174 = HEAP32[$173>>2]|0;
      _RansDecSymbolInit($161,$168,$174);
      $175 = $16;
      $176 = $8;
      $177 = (($175) + (($176*2052)|0)|0);
      $178 = ((($177)) + 2048|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)!=(0|0);
      if (!($180)) {
       $181 = (_malloc(4096)|0);
       $182 = $16;
       $183 = $8;
       $184 = (($182) + (($183*2052)|0)|0);
       $185 = ((($184)) + 2048|0);
       HEAP32[$185>>2] = $181;
       $186 = $16;
       $187 = $8;
       $188 = (($186) + (($187*2052)|0)|0);
       $189 = ((($188)) + 2048|0);
       $190 = HEAP32[$189>>2]|0;
       $191 = ($190|0)!=(0|0);
       if (!($191)) {
        break L9;
       }
      }
      $192 = $16;
      $193 = $8;
      $194 = (($192) + (($193*2052)|0)|0);
      $195 = ((($194)) + 2048|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = $10;
      $198 = (($196) + ($197)|0);
      $199 = $9;
      $200 = $199&255;
      $201 = $16;
      $202 = $8;
      $203 = (($201) + (($202*2052)|0)|0);
      $204 = $9;
      $205 = (($203) + ($204<<3)|0);
      $206 = HEAP32[$205>>2]|0;
      _memset(($198|0),($200|0),($206|0))|0;
      $207 = $16;
      $208 = $8;
      $209 = (($207) + (($208*2052)|0)|0);
      $210 = $9;
      $211 = (($209) + ($210<<3)|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = $10;
      $214 = (($213) + ($212))|0;
      $10 = $214;
      $215 = $10;
      $216 = ($215|0)<=(4096);
      if (!($216)) {
       label = 16;
       break L12;
      }
      $217 = $14;
      $218 = ($217|0)!=(0);
      if ($218) {
       label = 20;
      } else {
       $219 = $9;
       $220 = (($219) + 1)|0;
       $221 = $7;
       $222 = HEAP8[$221>>0]|0;
       $223 = $222&255;
       $224 = ($220|0)==($223|0);
       if ($224) {
        $225 = $7;
        $226 = ((($225)) + 1|0);
        $7 = $226;
        $227 = HEAP8[$225>>0]|0;
        $228 = $227&255;
        $9 = $228;
        $229 = $7;
        $230 = ((($229)) + 1|0);
        $7 = $230;
        $231 = HEAP8[$229>>0]|0;
        $232 = $231&255;
        $14 = $232;
       } else {
        label = 20;
       }
      }
      do {
       if ((label|0) == 20) {
        label = 0;
        $233 = $14;
        $234 = ($233|0)!=(0);
        if ($234) {
         $235 = $14;
         $236 = (($235) + -1)|0;
         $14 = $236;
         $237 = $9;
         $238 = (($237) + 1)|0;
         $9 = $238;
         break;
        } else {
         $239 = $7;
         $240 = ((($239)) + 1|0);
         $7 = $240;
         $241 = HEAP8[$239>>0]|0;
         $242 = $241&255;
         $9 = $242;
         break;
        }
       }
      } while(0);
      $243 = $9;
      $244 = ($243|0)!=(0);
      if (!($244)) {
       break;
      }
     }
     $245 = $13;
     $246 = ($245|0)!=(0);
     if ($246) {
      label = 27;
     } else {
      $247 = $8;
      $248 = (($247) + 1)|0;
      $249 = $7;
      $250 = HEAP8[$249>>0]|0;
      $251 = $250&255;
      $252 = ($248|0)==($251|0);
      if ($252) {
       $253 = $7;
       $254 = ((($253)) + 1|0);
       $7 = $254;
       $255 = HEAP8[$253>>0]|0;
       $256 = $255&255;
       $8 = $256;
       $257 = $7;
       $258 = ((($257)) + 1|0);
       $7 = $258;
       $259 = HEAP8[$257>>0]|0;
       $260 = $259&255;
       $13 = $260;
      } else {
       label = 27;
      }
     }
     do {
      if ((label|0) == 27) {
       label = 0;
       $261 = $13;
       $262 = ($261|0)!=(0);
       if ($262) {
        $263 = $13;
        $264 = (($263) + -1)|0;
        $13 = $264;
        $265 = $8;
        $266 = (($265) + 1)|0;
        $8 = $266;
        break;
       } else {
        $267 = $7;
        $268 = ((($267)) + 1|0);
        $7 = $268;
        $269 = HEAP8[$267>>0]|0;
        $270 = $269&255;
        $8 = $270;
        break;
       }
      }
     } while(0);
     $271 = $8;
     $272 = ($271|0)!=(0);
     if (!($272)) {
      break;
     }
    }
    if ((label|0) == 16) {
     ___assert_fail((16427|0),(16283|0),618,(16440|0));
     // unreachable;
    }
    $273 = $7;
    HEAP32[$22>>2] = $273;
    _RansDecInit($18,$22);
    _RansDecInit($19,$22);
    _RansDecInit($20,$22);
    _RansDecInit($21,$22);
    $274 = $11;
    $275 = $274 >> 2;
    $23 = $275;
    $24 = 0;
    $25 = 0;
    $26 = 0;
    $27 = 0;
    $276 = $23;
    $277 = 0;
    HEAP32[$28>>2] = $277;
    $278 = ((($28)) + 4|0);
    $279 = $23;
    $280 = $279;
    HEAP32[$278>>2] = $280;
    $281 = ((($278)) + 4|0);
    $282 = $23;
    $283 = $282<<1;
    HEAP32[$281>>2] = $283;
    $284 = ((($281)) + 4|0);
    $285 = $23;
    $286 = ($285*3)|0;
    HEAP32[$284>>2] = $286;
    $287 = HEAP32[$18>>2]|0;
    HEAP32[$29>>2] = $287;
    $288 = HEAP32[$19>>2]|0;
    $289 = ((($29)) + 4|0);
    HEAP32[$289>>2] = $288;
    $290 = HEAP32[$20>>2]|0;
    $291 = ((($29)) + 8|0);
    HEAP32[$291>>2] = $290;
    $292 = HEAP32[$21>>2]|0;
    $293 = ((($29)) + 12|0);
    HEAP32[$293>>2] = $292;
    $294 = $11;
    $295 = (_malloc($294)|0);
    $15 = $295;
    $296 = $15;
    $297 = ($296|0)!=(0|0);
    if ($297) {
     while(1) {
      $298 = HEAP32[$28>>2]|0;
      $299 = $23;
      $300 = ($298|0)<($299|0);
      if (!($300)) {
       break;
      }
      $301 = HEAP32[$29>>2]|0;
      $302 = $301 & 4095;
      HEAP32[$30>>2] = $302;
      $303 = ((($30)) + 4|0);
      $304 = ((($29)) + 4|0);
      $305 = HEAP32[$304>>2]|0;
      $306 = $305 & 4095;
      HEAP32[$303>>2] = $306;
      $307 = ((($303)) + 4|0);
      $308 = ((($29)) + 8|0);
      $309 = HEAP32[$308>>2]|0;
      $310 = $309 & 4095;
      HEAP32[$307>>2] = $310;
      $311 = ((($307)) + 4|0);
      $312 = ((($29)) + 12|0);
      $313 = HEAP32[$312>>2]|0;
      $314 = $313 & 4095;
      HEAP32[$311>>2] = $314;
      $315 = $16;
      $316 = $24;
      $317 = (($315) + (($316*2052)|0)|0);
      $318 = ((($317)) + 2048|0);
      $319 = HEAP32[$318>>2]|0;
      $320 = HEAP32[$30>>2]|0;
      $321 = (($319) + ($320)|0);
      $322 = HEAP8[$321>>0]|0;
      HEAP8[$31>>0] = $322;
      $323 = ((($31)) + 1|0);
      $324 = $16;
      $325 = $25;
      $326 = (($324) + (($325*2052)|0)|0);
      $327 = ((($326)) + 2048|0);
      $328 = HEAP32[$327>>2]|0;
      $329 = ((($30)) + 4|0);
      $330 = HEAP32[$329>>2]|0;
      $331 = (($328) + ($330)|0);
      $332 = HEAP8[$331>>0]|0;
      HEAP8[$323>>0] = $332;
      $333 = ((($323)) + 1|0);
      $334 = $16;
      $335 = $26;
      $336 = (($334) + (($335*2052)|0)|0);
      $337 = ((($336)) + 2048|0);
      $338 = HEAP32[$337>>2]|0;
      $339 = ((($30)) + 8|0);
      $340 = HEAP32[$339>>2]|0;
      $341 = (($338) + ($340)|0);
      $342 = HEAP8[$341>>0]|0;
      HEAP8[$333>>0] = $342;
      $343 = ((($333)) + 1|0);
      $344 = $16;
      $345 = $27;
      $346 = (($344) + (($345*2052)|0)|0);
      $347 = ((($346)) + 2048|0);
      $348 = HEAP32[$347>>2]|0;
      $349 = ((($30)) + 12|0);
      $350 = HEAP32[$349>>2]|0;
      $351 = (($348) + ($350)|0);
      $352 = HEAP8[$351>>0]|0;
      HEAP8[$343>>0] = $352;
      $353 = HEAP8[$31>>0]|0;
      $354 = $15;
      $355 = HEAP32[$28>>2]|0;
      $356 = (($354) + ($355)|0);
      HEAP8[$356>>0] = $353;
      $357 = ((($31)) + 1|0);
      $358 = HEAP8[$357>>0]|0;
      $359 = $15;
      $360 = ((($28)) + 4|0);
      $361 = HEAP32[$360>>2]|0;
      $362 = (($359) + ($361)|0);
      HEAP8[$362>>0] = $358;
      $363 = ((($31)) + 2|0);
      $364 = HEAP8[$363>>0]|0;
      $365 = $15;
      $366 = ((($28)) + 8|0);
      $367 = HEAP32[$366>>2]|0;
      $368 = (($365) + ($367)|0);
      HEAP8[$368>>0] = $364;
      $369 = ((($31)) + 3|0);
      $370 = HEAP8[$369>>0]|0;
      $371 = $15;
      $372 = ((($28)) + 12|0);
      $373 = HEAP32[$372>>2]|0;
      $374 = (($371) + ($373)|0);
      HEAP8[$374>>0] = $370;
      $375 = $17;
      $376 = $24;
      $377 = (($375) + ($376<<10)|0);
      $378 = HEAP8[$31>>0]|0;
      $379 = $378&255;
      $380 = (($377) + ($379<<2)|0);
      $381 = ((($380)) + 2|0);
      $382 = HEAP16[$381>>1]|0;
      $383 = $382&65535;
      $384 = HEAP32[$29>>2]|0;
      $385 = $384 >>> 12;
      $386 = Math_imul($383, $385)|0;
      HEAP32[$29>>2] = $386;
      $387 = $17;
      $388 = $25;
      $389 = (($387) + ($388<<10)|0);
      $390 = ((($31)) + 1|0);
      $391 = HEAP8[$390>>0]|0;
      $392 = $391&255;
      $393 = (($389) + ($392<<2)|0);
      $394 = ((($393)) + 2|0);
      $395 = HEAP16[$394>>1]|0;
      $396 = $395&65535;
      $397 = ((($29)) + 4|0);
      $398 = HEAP32[$397>>2]|0;
      $399 = $398 >>> 12;
      $400 = Math_imul($396, $399)|0;
      $401 = ((($29)) + 4|0);
      HEAP32[$401>>2] = $400;
      $402 = $17;
      $403 = $26;
      $404 = (($402) + ($403<<10)|0);
      $405 = ((($31)) + 2|0);
      $406 = HEAP8[$405>>0]|0;
      $407 = $406&255;
      $408 = (($404) + ($407<<2)|0);
      $409 = ((($408)) + 2|0);
      $410 = HEAP16[$409>>1]|0;
      $411 = $410&65535;
      $412 = ((($29)) + 8|0);
      $413 = HEAP32[$412>>2]|0;
      $414 = $413 >>> 12;
      $415 = Math_imul($411, $414)|0;
      $416 = ((($29)) + 8|0);
      HEAP32[$416>>2] = $415;
      $417 = $17;
      $418 = $27;
      $419 = (($417) + ($418<<10)|0);
      $420 = ((($31)) + 3|0);
      $421 = HEAP8[$420>>0]|0;
      $422 = $421&255;
      $423 = (($419) + ($422<<2)|0);
      $424 = ((($423)) + 2|0);
      $425 = HEAP16[$424>>1]|0;
      $426 = $425&65535;
      $427 = ((($29)) + 12|0);
      $428 = HEAP32[$427>>2]|0;
      $429 = $428 >>> 12;
      $430 = Math_imul($426, $429)|0;
      $431 = ((($29)) + 12|0);
      HEAP32[$431>>2] = $430;
      $432 = HEAP32[$30>>2]|0;
      $433 = $17;
      $434 = $24;
      $435 = (($433) + ($434<<10)|0);
      $436 = HEAP8[$31>>0]|0;
      $437 = $436&255;
      $438 = (($435) + ($437<<2)|0);
      $439 = HEAP16[$438>>1]|0;
      $440 = $439&65535;
      $441 = (($432) - ($440))|0;
      $442 = HEAP32[$29>>2]|0;
      $443 = (($442) + ($441))|0;
      HEAP32[$29>>2] = $443;
      $444 = ((($30)) + 4|0);
      $445 = HEAP32[$444>>2]|0;
      $446 = $17;
      $447 = $25;
      $448 = (($446) + ($447<<10)|0);
      $449 = ((($31)) + 1|0);
      $450 = HEAP8[$449>>0]|0;
      $451 = $450&255;
      $452 = (($448) + ($451<<2)|0);
      $453 = HEAP16[$452>>1]|0;
      $454 = $453&65535;
      $455 = (($445) - ($454))|0;
      $456 = ((($29)) + 4|0);
      $457 = HEAP32[$456>>2]|0;
      $458 = (($457) + ($455))|0;
      HEAP32[$456>>2] = $458;
      $459 = ((($30)) + 8|0);
      $460 = HEAP32[$459>>2]|0;
      $461 = $17;
      $462 = $26;
      $463 = (($461) + ($462<<10)|0);
      $464 = ((($31)) + 2|0);
      $465 = HEAP8[$464>>0]|0;
      $466 = $465&255;
      $467 = (($463) + ($466<<2)|0);
      $468 = HEAP16[$467>>1]|0;
      $469 = $468&65535;
      $470 = (($460) - ($469))|0;
      $471 = ((($29)) + 8|0);
      $472 = HEAP32[$471>>2]|0;
      $473 = (($472) + ($470))|0;
      HEAP32[$471>>2] = $473;
      $474 = ((($30)) + 12|0);
      $475 = HEAP32[$474>>2]|0;
      $476 = $17;
      $477 = $27;
      $478 = (($476) + ($477<<10)|0);
      $479 = ((($31)) + 3|0);
      $480 = HEAP8[$479>>0]|0;
      $481 = $480&255;
      $482 = (($478) + ($481<<2)|0);
      $483 = HEAP16[$482>>1]|0;
      $484 = $483&65535;
      $485 = (($475) - ($484))|0;
      $486 = ((($29)) + 12|0);
      $487 = HEAP32[$486>>2]|0;
      $488 = (($487) + ($485))|0;
      HEAP32[$486>>2] = $488;
      _RansDecRenorm($29,$22);
      $489 = ((($29)) + 4|0);
      _RansDecRenorm($489,$22);
      $490 = ((($29)) + 8|0);
      _RansDecRenorm($490,$22);
      $491 = ((($29)) + 12|0);
      _RansDecRenorm($491,$22);
      $492 = HEAP8[$31>>0]|0;
      $493 = $492&255;
      $24 = $493;
      $494 = ((($31)) + 1|0);
      $495 = HEAP8[$494>>0]|0;
      $496 = $495&255;
      $25 = $496;
      $497 = ((($31)) + 2|0);
      $498 = HEAP8[$497>>0]|0;
      $499 = $498&255;
      $26 = $499;
      $500 = ((($31)) + 3|0);
      $501 = HEAP8[$500>>0]|0;
      $502 = $501&255;
      $27 = $502;
      $503 = HEAP32[$28>>2]|0;
      $504 = (($503) + 1)|0;
      HEAP32[$28>>2] = $504;
      $505 = ((($28)) + 4|0);
      $506 = HEAP32[$505>>2]|0;
      $507 = (($506) + 1)|0;
      HEAP32[$505>>2] = $507;
      $508 = ((($28)) + 8|0);
      $509 = HEAP32[$508>>2]|0;
      $510 = (($509) + 1)|0;
      HEAP32[$508>>2] = $510;
      $511 = ((($28)) + 12|0);
      $512 = HEAP32[$511>>2]|0;
      $513 = (($512) + 1)|0;
      HEAP32[$511>>2] = $513;
     }
     $514 = HEAP32[$29>>2]|0;
     HEAP32[$18>>2] = $514;
     $515 = ((($29)) + 4|0);
     $516 = HEAP32[$515>>2]|0;
     HEAP32[$19>>2] = $516;
     $517 = ((($29)) + 8|0);
     $518 = HEAP32[$517>>2]|0;
     HEAP32[$20>>2] = $518;
     $519 = ((($29)) + 12|0);
     $520 = HEAP32[$519>>2]|0;
     HEAP32[$21>>2] = $520;
     while(1) {
      $521 = ((($28)) + 12|0);
      $522 = HEAP32[$521>>2]|0;
      $523 = $11;
      $524 = ($522|0)<($523|0);
      if (!($524)) {
       break;
      }
      $525 = $16;
      $526 = $27;
      $527 = (($525) + (($526*2052)|0)|0);
      $528 = ((($527)) + 2048|0);
      $529 = HEAP32[$528>>2]|0;
      $530 = (_RansDecGet($21,12)|0);
      $531 = (($529) + ($530)|0);
      $532 = HEAP8[$531>>0]|0;
      $32 = $532;
      $533 = $32;
      $534 = $15;
      $535 = ((($28)) + 12|0);
      $536 = HEAP32[$535>>2]|0;
      $537 = (($534) + ($536)|0);
      HEAP8[$537>>0] = $533;
      $538 = $17;
      $539 = $27;
      $540 = (($538) + ($539<<10)|0);
      $541 = $32;
      $542 = $541&255;
      $543 = (($540) + ($542<<2)|0);
      _RansDecAdvanceSymbol($21,$22,$543,12);
      $544 = $32;
      $545 = $544&255;
      $27 = $545;
      $546 = ((($28)) + 12|0);
      $547 = HEAP32[$546>>2]|0;
      $548 = (($547) + 1)|0;
      HEAP32[$546>>2] = $548;
     }
     $549 = $11;
     $550 = $6;
     HEAP32[$550>>2] = $549;
    }
   }
  }
 } while(0);
 $551 = $16;
 $552 = ($551|0)!=(0|0);
 if ($552) {
  $8 = 0;
  while(1) {
   $553 = $8;
   $554 = ($553|0)<(256);
   $555 = $16;
   if (!($554)) {
    break;
   }
   $556 = $8;
   $557 = (($555) + (($556*2052)|0)|0);
   $558 = ((($557)) + 2048|0);
   $559 = HEAP32[$558>>2]|0;
   $560 = ($559|0)!=(0|0);
   if ($560) {
    $561 = $16;
    $562 = $8;
    $563 = (($561) + (($562*2052)|0)|0);
    $564 = ((($563)) + 2048|0);
    $565 = HEAP32[$564>>2]|0;
    _free($565);
   }
   $566 = $8;
   $567 = (($566) + 1)|0;
   $8 = $567;
  }
  _free($555);
 }
 $568 = $17;
 _free($568);
 $569 = $15;
 $3 = $569;
 $570 = $3;
 STACKTOP = sp;return ($570|0);
}
function _rans_uncompress($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $5;
 $8 = ($7>>>0)<(9);
 if ($8) {
  $3 = 0;
  $19 = $3;
  STACKTOP = sp;return ($19|0);
 }
 $9 = $4;
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)!=(0);
 $13 = $4;
 $14 = $5;
 $15 = $6;
 if ($12) {
  $16 = (_rans_uncompress_O1($13,$14,$15)|0);
  $18 = $16;
 } else {
  $17 = (_rans_uncompress_O0($13,$14,$15)|0);
  $18 = $17;
 }
 $3 = $18;
 $19 = $3;
 STACKTOP = sp;return ($19|0);
}
function _mfclose($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $1 = -1;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 }
 $5 = $2;
 (_mfflush($5)|0);
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  (_fclose($10)|0);
 }
 $11 = $2;
 (_mfdestroy($11)|0);
 $1 = 0;
 $12 = $1;
 STACKTOP = sp;return ($12|0);
}
function _mfflush($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $1 = 0;
  $112 = $1;
  STACKTOP = sp;return ($112|0);
 }
 $8 = $2;
 $9 = ($8|0)==(0|0);
 $10 = $2;
 $11 = ($10|0)==(0|0);
 $or$cond = $9 | $11;
 if ($or$cond) {
  $12 = $2;
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $2;
  $16 = ((($15)) + 20|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14>>>0)<($17>>>0);
  if ($18) {
   $19 = $2;
   $20 = ((($19)) + 20|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $2;
   $23 = ((($22)) + 28|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($21) - ($24))|0;
   $3 = $25;
   $26 = $2;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $2;
   $30 = ((($29)) + 28|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($28) + ($31)|0);
   $33 = $3;
   $34 = $2;
   $35 = HEAP32[$34>>2]|0;
   $36 = (_fwrite($32,1,$33,$35)|0);
   $37 = $3;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $1 = -1;
    $112 = $1;
    STACKTOP = sp;return ($112|0);
   }
   $39 = $2;
   $40 = HEAP32[$39>>2]|0;
   $41 = (_fflush($40)|0);
   $42 = (0)!=($41|0);
   if ($42) {
    $1 = -1;
    $112 = $1;
    STACKTOP = sp;return ($112|0);
   }
  }
  $43 = $2;
  $44 = ((($43)) + 28|0);
  HEAP32[$44>>2] = 0;
  $45 = $2;
  $46 = ((($45)) + 20|0);
  HEAP32[$46>>2] = 0;
  $47 = $2;
  $48 = ((($47)) + 24|0);
  HEAP32[$48>>2] = 0;
 }
 $49 = $2;
 $50 = ((($49)) + 16|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $51 & 2;
 $53 = ($52|0)!=(0);
 if ($53) {
  $54 = $2;
  $55 = ((($54)) + 28|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $2;
  $58 = ((($57)) + 20|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($56>>>0)<($59>>>0);
  if ($60) {
   $61 = $2;
   $62 = ((($61)) + 20|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $2;
   $65 = ((($64)) + 28|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($63) - ($66))|0;
   $4 = $67;
   $68 = $2;
   $69 = ((($68)) + 16|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $70 & 32;
   $72 = ($71|0)!=(0);
   if (!($72)) {
    $73 = $2;
    $74 = HEAP32[$73>>2]|0;
    $75 = $2;
    $76 = ((($75)) + 28|0);
    $77 = HEAP32[$76>>2]|0;
    (_fseek($74,$77,0)|0);
   }
   $78 = $2;
   $79 = ((($78)) + 4|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $2;
   $82 = ((($81)) + 28|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($80) + ($83)|0);
   $85 = $4;
   $86 = $2;
   $87 = HEAP32[$86>>2]|0;
   $88 = (_fwrite($84,1,$85,$87)|0);
   $89 = $4;
   $90 = ($88>>>0)<($89>>>0);
   if ($90) {
    $1 = -1;
    $112 = $1;
    STACKTOP = sp;return ($112|0);
   }
   $91 = $2;
   $92 = HEAP32[$91>>2]|0;
   $93 = (_fflush($92)|0);
   $94 = (0)!=($93|0);
   if ($94) {
    $1 = -1;
    $112 = $1;
    STACKTOP = sp;return ($112|0);
   }
  }
  $95 = $2;
  $96 = HEAP32[$95>>2]|0;
  $97 = (_ftell($96)|0);
  $98 = ($97|0)!=(-1);
  if ($98) {
   $99 = $2;
   $100 = HEAP32[$99>>2]|0;
   $101 = (_fileno($100)|0);
   $102 = $2;
   $103 = HEAP32[$102>>2]|0;
   $104 = (_ftell($103)|0);
   $105 = (_ftruncate($101,$104)|0);
   $106 = ($105|0)==(-1);
   if ($106) {
    $1 = -1;
    $112 = $1;
    STACKTOP = sp;return ($112|0);
   }
  }
  $107 = $2;
  $108 = ((($107)) + 20|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = $2;
  $111 = ((($110)) + 28|0);
  HEAP32[$111>>2] = $109;
 }
 $1 = 0;
 $112 = $1;
 STACKTOP = sp;return ($112|0);
}
function _mfdestroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $1 = -1;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 }
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $2;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  _free($11);
 }
 $12 = $2;
 _free($12);
 $1 = 0;
 $13 = $1;
 STACKTOP = sp;return ($13|0);
}
function _cram_index_query($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $6;
 $14 = (($13) + 1)|0;
 $15 = ($14|0)<(0);
 if (!($15)) {
  $16 = $6;
  $17 = (($16) + 1)|0;
  $18 = $5;
  $19 = ((($18)) + 34632|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($17|0)>=($20|0);
  if (!($21)) {
   $22 = $8;
   $23 = ($22|0)!=(0|0);
   if (!($23)) {
    $24 = $5;
    $25 = ((($24)) + 34636|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $6;
    $28 = (($27) + 1)|0;
    $29 = (($26) + (($28*48)|0)|0);
    $8 = $29;
   }
   $30 = $8;
   $31 = ((($30)) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)!=(0|0);
   if (!($33)) {
    $4 = 0;
    $159 = $4;
    STACKTOP = sp;return ($159|0);
   }
   $9 = 0;
   $34 = $5;
   $35 = ((($34)) + 34636|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $6;
   $38 = (($37) + 1)|0;
   $39 = (($36) + (($38*48)|0)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) - 1)|0;
   $10 = $41;
   $42 = $10;
   $43 = (($42|0) / 2)&-1;
   $11 = $43;
   while(1) {
    $44 = $11;
    $45 = $9;
    $46 = ($44|0)!=($45|0);
    if (!($46)) {
     break;
    }
    $47 = $8;
    $48 = ((($47)) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $11;
    $51 = (($49) + (($50*48)|0)|0);
    $52 = ((($51)) + 12|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $6;
    $55 = ($53|0)>($54|0);
    do {
     if ($55) {
      $56 = $11;
      $10 = $56;
     } else {
      $57 = $8;
      $58 = ((($57)) + 8|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = $11;
      $61 = (($59) + (($60*48)|0)|0);
      $62 = ((($61)) + 12|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = $6;
      $65 = ($63|0)<($64|0);
      if ($65) {
       $66 = $11;
       $9 = $66;
       break;
      }
      $67 = $8;
      $68 = ((($67)) + 8|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = $11;
      $71 = (($69) + (($70*48)|0)|0);
      $72 = ((($71)) + 16|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = $7;
      $75 = ($73|0)>=($74|0);
      if ($75) {
       $76 = $11;
       $10 = $76;
       break;
      }
      $77 = $8;
      $78 = ((($77)) + 8|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = $11;
      $81 = (($79) + (($80*48)|0)|0);
      $82 = ((($81)) + 16|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = $7;
      $85 = ($83|0)<($84|0);
      if ($85) {
       $86 = $11;
       $9 = $86;
      }
     }
    } while(0);
    $87 = $10;
    $88 = $9;
    $89 = (($87) - ($88))|0;
    $90 = (($89|0) / 2)&-1;
    $91 = $9;
    $92 = (($90) + ($91))|0;
    $11 = $92;
   }
   $93 = $10;
   $94 = ($93|0)>=(0);
   if ($94) {
    $95 = $8;
    $96 = ((($95)) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = $10;
    $99 = (($97) + (($98*48)|0)|0);
    $100 = ((($99)) + 16|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $7;
    $103 = ($101|0)<($102|0);
    if ($103) {
     $104 = $8;
     $105 = ((($104)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = $10;
     $108 = (($106) + (($107*48)|0)|0);
     $109 = ((($108)) + 12|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = $6;
     $112 = ($110|0)==($111|0);
     if ($112) {
      $113 = $10;
      $9 = $113;
     }
    }
   }
   while(1) {
    $114 = $9;
    $115 = ($114|0)>(0);
    if (!($115)) {
     break;
    }
    $116 = $8;
    $117 = ((($116)) + 8|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = $9;
    $120 = (($119) - 1)|0;
    $121 = (($118) + (($120*48)|0)|0);
    $122 = ((($121)) + 20|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = $7;
    $125 = ($123|0)>=($124|0);
    if (!($125)) {
     break;
    }
    $126 = $9;
    $127 = (($126) + -1)|0;
    $9 = $127;
   }
   while(1) {
    $128 = $9;
    $129 = (($128) + 1)|0;
    $130 = $8;
    $131 = HEAP32[$130>>2]|0;
    $132 = ($129|0)<($131|0);
    if (!($132)) {
     break;
    }
    $133 = $8;
    $134 = ((($133)) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $9;
    $137 = (($135) + (($136*48)|0)|0);
    $138 = ((($137)) + 12|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $6;
    $141 = ($139|0)<($140|0);
    if (!($141)) {
     $142 = $8;
     $143 = ((($142)) + 8|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = $9;
     $146 = (($144) + (($145*48)|0)|0);
     $147 = ((($146)) + 20|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = $7;
     $150 = ($148|0)<($149|0);
     if (!($150)) {
      break;
     }
    }
    $151 = $9;
    $152 = (($151) + 1)|0;
    $9 = $152;
   }
   $153 = $8;
   $154 = ((($153)) + 8|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = $9;
   $157 = (($155) + (($156*48)|0)|0);
   $12 = $157;
   $158 = $12;
   $4 = $158;
   $159 = $4;
   STACKTOP = sp;return ($159|0);
  }
 }
 $4 = 0;
 $159 = $4;
 STACKTOP = sp;return ($159|0);
}
function _cram_seek_to_refpos($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = HEAP32[$7>>2]|0;
 $9 = $4;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_cram_index_query($6,$8,$11,0)|0);
 $5 = $12;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $2 = -2;
  $54 = $2;
  STACKTOP = sp;return ($54|0);
 }
 $14 = $3;
 $15 = $5;
 $16 = ((($15)) + 40|0);
 $17 = $16;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (_cram_seek($14,$19,0)|0);
 $24 = (0)!=($23|0);
 if ($24) {
  $25 = $3;
  $26 = $5;
  $27 = ((($26)) + 40|0);
  $28 = $27;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($28) + 4)|0;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = $3;
  $35 = ((($34)) + 34640|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)<(0);
  $38 = $37 << 31 >> 31;
  $39 = (_i64Subtract(($30|0),($33|0),($36|0),($38|0))|0);
  $40 = tempRet0;
  $41 = (_cram_seek($25,$39,1)|0);
  $42 = (0)!=($41|0);
  if ($42) {
   $2 = -1;
   $54 = $2;
   STACKTOP = sp;return ($54|0);
  }
 }
 $43 = $3;
 $44 = ((($43)) + 36|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)!=(0|0);
 if ($46) {
  $47 = $3;
  $48 = ((($47)) + 36|0);
  $49 = HEAP32[$48>>2]|0;
  _cram_free_container($49);
  $50 = $3;
  $51 = ((($50)) + 36|0);
  HEAP32[$51>>2] = 0;
  $52 = $3;
  $53 = ((($52)) + 34768|0);
  HEAP32[$53>>2] = 0;
 }
 $2 = 0;
 $54 = $2;
 STACKTOP = sp;return ($54|0);
}
function _hopen_net($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = HEAP32[5937]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  label = 4;
 } else {
  $8 = (_net_init()|0);
  $9 = ($8|0)<(0);
  if ($9) {
   $2 = 0;
  } else {
   label = 4;
  }
 }
 do {
  if ((label|0) == 4) {
   $10 = $4;
   $11 = (_hfile_init(36,$10,0)|0);
   $5 = $11;
   $12 = $5;
   $13 = ($12|0)==(0|0);
   if ($13) {
    $2 = 0;
    break;
   }
   $14 = $3;
   $15 = $4;
   $16 = (_knet_open($14,$15)|0);
   $17 = $5;
   $18 = ((($17)) + 32|0);
   HEAP32[$18>>2] = $16;
   $19 = $5;
   $20 = ((($19)) + 32|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(0|0);
   $23 = $5;
   if ($22) {
    _hfile_destroy($23);
    $2 = 0;
    break;
   } else {
    $24 = ((($23)) + 16|0);
    HEAP32[$24>>2] = 368;
    $25 = $5;
    $2 = $25;
    break;
   }
  }
 } while(0);
 $26 = $2;
 STACKTOP = sp;return ($26|0);
}
function _net_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[5937] = 1;
 return 0;
}
function _net_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $6 = $7;
 $8 = $6;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $4;
 $12 = $5;
 $13 = (_knet_read($10,$11,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function _net_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $6 = $7;
 $8 = $6;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $4;
 $12 = $5;
 $13 = (_knet_seek($10,$11,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function _net_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_knet_close($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _hfile_plugin_init_net($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 HEAP32[$3>>2] = 16459;
 _hfile_add_scheme_handler(16468,388);
 _hfile_add_scheme_handler(16473,388);
 STACKTOP = sp;return 0;
}
function _kftp_connect($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_socket_connect($5,$8)|0);
 $10 = $2;
 $11 = ((($10)) + 24|0);
 HEAP32[$11>>2] = $9;
 $12 = $2;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(-1);
 if ($15) {
  $1 = -1;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 } else {
  $16 = $2;
  (_kftp_get_response($16)|0);
  $17 = $2;
  (_kftp_send_cmd($17,16477,1)|0);
  $18 = $2;
  (_kftp_send_cmd($18,16494,1)|0);
  $19 = $2;
  (_kftp_send_cmd($19,16507,1)|0);
  $1 = 0;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _socket_connect($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $6 = sp + 60|0;
 $8 = sp + 48|0;
 $9 = sp + 16|0;
 $10 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 HEAP32[$6>>2] = 1;
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;
 HEAP32[$10>>2] = 0;
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;HEAP32[$9+12>>2]=0|0;HEAP32[$9+16>>2]=0|0;HEAP32[$9+20>>2]=0|0;HEAP32[$9+24>>2]=0|0;HEAP32[$9+28>>2]=0|0;
 $11 = ((($9)) + 4|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($9)) + 8|0);
 HEAP32[$12>>2] = 1;
 $13 = $3;
 $14 = $4;
 $15 = (_getaddrinfo(($13|0),($14|0),($9|0),($10|0))|0);
 $5 = $15;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = HEAP32[2398]|0;
  $18 = $3;
  $19 = $4;
  $20 = $5;
  $21 = (_gai_strerror(($20|0))|0);
  HEAP32[$vararg_buffer>>2] = $18;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $19;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $21;
  (_fprintf($17,16523,$vararg_buffer)|0);
  $2 = -1;
  $54 = $2;
  STACKTOP = sp;return ($54|0);
 }
 $22 = HEAP32[$10>>2]|0;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$10>>2]|0;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$10>>2]|0;
 $29 = ((($28)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (_socket($24,$27,$30)|0);
 $7 = $31;
 $32 = ($31|0)==(-1);
 if ($32) {
  _perror(16548);
  $33 = HEAP32[$10>>2]|0;
  _freeaddrinfo($33);
  $2 = -1;
  $54 = $2;
  STACKTOP = sp;return ($54|0);
 }
 $34 = $7;
 $35 = (_setsockopt($34,1,2,$6,4)|0);
 $36 = ($35|0)==(-1);
 if ($36) {
  _perror(16555);
  $37 = HEAP32[$10>>2]|0;
  _freeaddrinfo($37);
  $2 = -1;
  $54 = $2;
  STACKTOP = sp;return ($54|0);
 }
 $38 = $7;
 $39 = (_setsockopt($38,1,13,$8,8)|0);
 $40 = ($39|0)==(-1);
 if ($40) {
  _perror(16555);
  $41 = HEAP32[$10>>2]|0;
  _freeaddrinfo($41);
  $2 = -1;
  $54 = $2;
  STACKTOP = sp;return ($54|0);
 }
 $42 = $7;
 $43 = HEAP32[$10>>2]|0;
 $44 = ((($43)) + 20|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$10>>2]|0;
 $47 = ((($46)) + 16|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (_connect($42,$45,$48)|0);
 $50 = ($49|0)!=(0);
 if ($50) {
  _perror(16566);
  $51 = HEAP32[$10>>2]|0;
  _freeaddrinfo($51);
  $2 = -1;
  $54 = $2;
  STACKTOP = sp;return ($54|0);
 } else {
  $52 = HEAP32[$10>>2]|0;
  _freeaddrinfo($52);
  $53 = $7;
  $2 = $53;
  $54 = $2;
  STACKTOP = sp;return ($54|0);
 }
 return (0)|0;
}
function _kftp_get_response($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $5 = sp;
 $2 = $0;
 $4 = 0;
 $6 = $2;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_socket_wait($8,1)|0);
 $10 = ($9|0)<=(0);
 if ($10) {
  $1 = 0;
  $95 = $1;
  STACKTOP = sp;return ($95|0);
 }
 while(1) {
  $11 = $2;
  $12 = ((($11)) + 24|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_read($13,$3,1)|0);
  $15 = ($14|0)!=(0);
  if (!($15)) {
   break;
  }
  $16 = $4;
  $17 = $2;
  $18 = ((($17)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($16|0)>=($19|0);
  if ($20) {
   $21 = $2;
   $22 = ((($21)) + 48|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)!=(0);
   if ($24) {
    $25 = $2;
    $26 = ((($25)) + 48|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $27 << 1;
    $31 = $28;
   } else {
    $31 = 256;
   }
   $29 = $2;
   $30 = ((($29)) + 48|0);
   HEAP32[$30>>2] = $31;
   $32 = $2;
   $33 = ((($32)) + 60|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $2;
   $36 = ((($35)) + 48|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (_realloc($34,$37)|0);
   $39 = $2;
   $40 = ((($39)) + 60|0);
   HEAP32[$40>>2] = $38;
  }
  $41 = HEAP8[$3>>0]|0;
  $42 = $2;
  $43 = ((($42)) + 60|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $4;
  $46 = (($45) + 1)|0;
  $4 = $46;
  $47 = (($44) + ($45)|0);
  HEAP8[$47>>0] = $41;
  $48 = HEAP8[$3>>0]|0;
  $49 = $48&255;
  $50 = ($49|0)==(10);
  if (!($50)) {
   continue;
  }
  $51 = $4;
  $52 = ($51|0)>=(4);
  if ($52) {
   $53 = $2;
   $54 = ((($53)) + 60|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = HEAP8[$55>>0]|0;
   $57 = $56 << 24 >> 24;
   $58 = (_isdigit($57)|0);
   $59 = ($58|0)!=(0);
   if ($59) {
    $60 = $2;
    $61 = ((($60)) + 60|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ((($62)) + 1|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $64 << 24 >> 24;
    $66 = (_isdigit($65)|0);
    $67 = ($66|0)!=(0);
    if ($67) {
     $68 = $2;
     $69 = ((($68)) + 60|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ((($70)) + 2|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $72 << 24 >> 24;
     $74 = (_isdigit($73)|0);
     $75 = ($74|0)!=(0);
     if ($75) {
      $76 = $2;
      $77 = ((($76)) + 60|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ((($78)) + 3|0);
      $80 = HEAP8[$79>>0]|0;
      $81 = $80 << 24 >> 24;
      $82 = ($81|0)!=(45);
      if ($82) {
       break;
      }
     }
    }
   }
  }
  $4 = 0;
 }
 $83 = $4;
 $84 = ($83|0)<(2);
 if ($84) {
  $1 = -1;
  $95 = $1;
  STACKTOP = sp;return ($95|0);
 } else {
  $85 = $2;
  $86 = ((($85)) + 60|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $4;
  $89 = (($88) - 2)|0;
  $90 = (($87) + ($89)|0);
  HEAP8[$90>>0] = 0;
  $91 = $2;
  $92 = ((($91)) + 60|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (_strtol($93,$5,0)|0);
  $1 = $94;
  $95 = $1;
  STACKTOP = sp;return ($95|0);
 }
 return (0)|0;
}
function _kftp_send_cmd($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_socket_wait($10,0)|0);
 $12 = ($11|0)<=(0);
 if ($12) {
  $3 = -1;
  $28 = $3;
  STACKTOP = sp;return ($28|0);
 }
 $13 = $5;
 $14 = (_strlen($13)|0);
 $7 = $14;
 $15 = $4;
 $16 = ((($15)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = $7;
 $20 = (_write($17,$18,$19)|0);
 $21 = $7;
 $22 = ($20|0)!=($21|0);
 if ($22) {
  $3 = -1;
  $28 = $3;
  STACKTOP = sp;return ($28|0);
 }
 $23 = $6;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $4;
  $26 = (_kftp_get_response($25)|0);
  $27 = $26;
 } else {
  $27 = 0;
 }
 $3 = $27;
 $28 = $3;
 STACKTOP = sp;return ($28|0);
}
function _socket_wait($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $4 = sp + 32|0;
 $7 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $5 = 0;
 $6 = 0;
 HEAP32[$7>>2] = 5;
 $11 = ((($7)) + 4|0);
 HEAP32[$11>>2] = 0;
 $10 = $4;
 $9 = 32;
 while(1) {
  $12 = $9;
  $13 = ($12|0)!=(0);
  if (!($13)) {
   break;
  }
  $14 = $10;
  $15 = ((($14)) + 4|0);
  $10 = $15;
  HEAP32[$14>>2] = 0;
  $16 = $9;
  $17 = (($16) + -1)|0;
  $9 = $17;
 }
 $18 = $2;
 $19 = (($18>>>0) % 32)&-1;
 $20 = 1 << $19;
 $21 = $2;
 $22 = (($21>>>0) / 32)&-1;
 $23 = (($4) + ($22<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 | $20;
 HEAP32[$23>>2] = $25;
 $26 = $3;
 $27 = ($26|0)!=(0);
 if ($27) {
  $5 = $4;
 } else {
  $6 = $4;
 }
 $28 = $2;
 $29 = (($28) + 1)|0;
 $30 = $5;
 $31 = $6;
 $32 = (_select($29,$30,$31,0,$7)|0);
 $8 = $32;
 $33 = $8;
 $34 = ($33|0)==(-1);
 if (!($34)) {
  $35 = $8;
  STACKTOP = sp;return ($35|0);
 }
 _perror(16516);
 $35 = $8;
 STACKTOP = sp;return ($35|0);
}
function _kftp_reconnect($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(-1);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  (_close($8)|0);
  $9 = $1;
  $10 = ((($9)) + 24|0);
  HEAP32[$10>>2] = -1;
 }
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 (_close($13)|0);
 $14 = $1;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = -1;
 $16 = $1;
 $17 = (_kftp_connect($16)|0);
 STACKTOP = sp;return ($17|0);
}
function _kftp_parse_url($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = (_strstr($8,16574)|0);
 $10 = $3;
 $11 = ($9|0)!=($10|0);
 if ($11) {
  $2 = 0;
  $84 = $2;
  STACKTOP = sp;return ($84|0);
 }
 $12 = $3;
 $13 = ((($12)) + 6|0);
 $6 = $13;
 while(1) {
  $14 = $6;
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = ($16|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $6;
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)!=(47);
  if (!($21)) {
   break;
  }
  $22 = $6;
  $23 = ((($22)) + 1|0);
  $6 = $23;
 }
 $24 = $6;
 $25 = HEAP8[$24>>0]|0;
 $26 = $25 << 24 >> 24;
 $27 = ($26|0)!=(47);
 if ($27) {
  $2 = 0;
  $84 = $2;
  STACKTOP = sp;return ($84|0);
 }
 $28 = $6;
 $29 = $3;
 $30 = $28;
 $31 = $29;
 $32 = (($30) - ($31))|0;
 $33 = (($32) - 6)|0;
 $7 = $33;
 $34 = (_calloc(1,96)|0);
 $5 = $34;
 $35 = $5;
 HEAP32[$35>>2] = 2;
 $36 = $5;
 $37 = ((($36)) + 4|0);
 HEAP32[$37>>2] = -1;
 $38 = (___strdup(16581)|0);
 $39 = $5;
 $40 = ((($39)) + 20|0);
 HEAP32[$40>>2] = $38;
 $41 = $7;
 $42 = (($41) + 1)|0;
 $43 = (_calloc($42,1)|0);
 $44 = $5;
 $45 = ((($44)) + 16|0);
 HEAP32[$45>>2] = $43;
 $46 = $4;
 $47 = (_strchr($46,99)|0);
 $48 = ($47|0)!=(0|0);
 if ($48) {
  $49 = $5;
  $50 = ((($49)) + 52|0);
  HEAP32[$50>>2] = 1;
 }
 $51 = $5;
 $52 = ((($51)) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $3;
 $55 = ((($54)) + 6|0);
 $56 = $7;
 (_strncpy($53,$55,$56)|0);
 $57 = $6;
 $58 = (_strlen($57)|0);
 $59 = (($58) + 8)|0;
 $60 = (_calloc($59,1)|0);
 $61 = $5;
 $62 = ((($61)) + 64|0);
 HEAP32[$62>>2] = $60;
 $63 = $5;
 $64 = ((($63)) + 64|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $6;
 HEAP32[$vararg_buffer>>2] = $66;
 (_sprintf($65,16584,$vararg_buffer)|0);
 $67 = $6;
 $68 = (_strlen($67)|0);
 $69 = (($68) + 8)|0;
 $70 = (_calloc($69,1)|0);
 $71 = $5;
 $72 = ((($71)) + 68|0);
 HEAP32[$72>>2] = $70;
 $73 = $5;
 $74 = ((($73)) + 68|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $6;
 HEAP32[$vararg_buffer1>>2] = $76;
 (_sprintf($75,16594,$vararg_buffer1)|0);
 $77 = $5;
 $78 = ((($77)) + 72|0);
 $79 = $78;
 $80 = $79;
 HEAP32[$80>>2] = 0;
 $81 = (($79) + 4)|0;
 $82 = $81;
 HEAP32[$82>>2] = 0;
 $83 = $5;
 $2 = $83;
 $84 = $2;
 STACKTOP = sp;return ($84|0);
}
function _kftp_connect_file($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $4 = sp;
 $5 = sp + 40|0;
 $2 = $0;
 $6 = $2;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(-1);
 if ($9) {
  $10 = $2;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  (_close($12)|0);
  $13 = $2;
  $14 = ((($13)) + 52|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0);
  if ($16) {
   $17 = $2;
   (_kftp_get_response($17)|0);
  }
 }
 $18 = $2;
 (_kftp_pasv_prep($18)|0);
 $19 = $2;
 $20 = $2;
 $21 = ((($20)) + 68|0);
 $22 = HEAP32[$21>>2]|0;
 (_kftp_send_cmd($19,$22,1)|0);
 $23 = $2;
 $24 = ((($23)) + 60|0);
 $25 = HEAP32[$24>>2]|0;
 HEAP32[$vararg_buffer>>2] = $4;
 $26 = (_sscanf($25,16604,$vararg_buffer)|0);
 $27 = ($26|0)!=(1);
 if ($27) {
  $1 = -1;
  $86 = $1;
  STACKTOP = sp;return ($86|0);
 }
 $28 = $4;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = ((($34)) + 80|0);
 $36 = $35;
 $37 = $36;
 HEAP32[$37>>2] = $30;
 $38 = (($36) + 4)|0;
 $39 = $38;
 HEAP32[$39>>2] = $33;
 $40 = $2;
 $41 = ((($40)) + 8|0);
 $42 = $41;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)>(0);
 $49 = ($44>>>0)>=(0);
 $50 = ($47|0)==(0);
 $51 = $50 & $49;
 $52 = $48 | $51;
 if ($52) {
  $53 = $2;
  $54 = ((($53)) + 8|0);
  $55 = $54;
  $56 = $55;
  $57 = HEAP32[$56>>2]|0;
  $58 = (($55) + 4)|0;
  $59 = $58;
  $60 = HEAP32[$59>>2]|0;
  $61 = $vararg_buffer1;
  $62 = $61;
  HEAP32[$62>>2] = $57;
  $63 = (($61) + 4)|0;
  $64 = $63;
  HEAP32[$64>>2] = $60;
  (_sprintf($5,16613,$vararg_buffer1)|0);
  $65 = $2;
  (_kftp_send_cmd($65,$5,1)|0);
 }
 $66 = $2;
 $67 = $2;
 $68 = ((($67)) + 64|0);
 $69 = HEAP32[$68>>2]|0;
 (_kftp_send_cmd($66,$69,0)|0);
 $70 = $2;
 (_kftp_pasv_connect($70)|0);
 $71 = $2;
 $72 = (_kftp_get_response($71)|0);
 $3 = $72;
 $73 = $3;
 $74 = ($73|0)!=(150);
 if ($74) {
  $75 = HEAP32[2398]|0;
  $76 = $2;
  $77 = ((($76)) + 60|0);
  $78 = HEAP32[$77>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $78;
  (_fprintf($75,16625,$vararg_buffer4)|0);
  $79 = $2;
  $80 = ((($79)) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  (_close($81)|0);
  $82 = $2;
  $83 = ((($82)) + 4|0);
  HEAP32[$83>>2] = -1;
  $1 = -1;
  $86 = $1;
  STACKTOP = sp;return ($86|0);
 } else {
  $84 = $2;
  $85 = ((($84)) + 56|0);
  HEAP32[$85>>2] = 1;
  $1 = 0;
  $86 = $1;
  STACKTOP = sp;return ($86|0);
 }
 return (0)|0;
}
function _kftp_pasv_prep($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $4 = sp + 24|0;
 $2 = $0;
 $5 = $2;
 (_kftp_send_cmd($5,16729,1)|0);
 $6 = $2;
 $7 = ((($6)) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 $3 = $8;
 while(1) {
  $9 = $3;
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   break;
  }
  $13 = $3;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($15|0)!=(40);
  if (!($16)) {
   break;
  }
  $17 = $3;
  $18 = ((($17)) + 1|0);
  $3 = $18;
 }
 $19 = $3;
 $20 = HEAP8[$19>>0]|0;
 $21 = $20 << 24 >> 24;
 $22 = ($21|0)!=(40);
 if ($22) {
  $1 = -1;
  $42 = $1;
  STACKTOP = sp;return ($42|0);
 } else {
  $23 = $3;
  $24 = ((($23)) + 1|0);
  $3 = $24;
  $25 = $3;
  $26 = ((($4)) + 4|0);
  $27 = ((($4)) + 8|0);
  $28 = ((($4)) + 12|0);
  $29 = ((($4)) + 16|0);
  $30 = ((($4)) + 20|0);
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $26;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $27;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $28;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $29;
  $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
  HEAP32[$vararg_ptr5>>2] = $30;
  (_sscanf($25,16736,$vararg_buffer)|0);
  $31 = $2;
  $32 = ((($31)) + 28|0);
  ;HEAP32[$32>>2]=HEAP32[$4>>2]|0;HEAP32[$32+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$32+12>>2]=HEAP32[$4+12>>2]|0;
  $33 = ((($4)) + 16|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $34 << 8;
  $36 = $35 & 65280;
  $37 = ((($4)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($36) + ($38))|0;
  $40 = $2;
  $41 = ((($40)) + 44|0);
  HEAP32[$41>>2] = $39;
  $1 = 0;
  $42 = $1;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _kftp_pasv_connect($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer6 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0;
 var $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 48|0;
 $4 = sp + 36|0;
 $2 = $0;
 $5 = $2;
 $6 = ((($5)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = HEAP32[2398]|0;
  (_fprintf($9,16649,$vararg_buffer)|0);
  $1 = -1;
  $35 = $1;
  STACKTOP = sp;return ($35|0);
 }
 $10 = $2;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $2;
 $14 = ((($13)) + 28|0);
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = ((($17)) + 28|0);
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $2;
 $22 = ((($21)) + 28|0);
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $12;
 $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr3>>2] = $16;
 $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
 HEAP32[$vararg_ptr4>>2] = $20;
 $vararg_ptr5 = ((($vararg_buffer1)) + 12|0);
 HEAP32[$vararg_ptr5>>2] = $24;
 (_sprintf($3,16714,$vararg_buffer1)|0);
 $25 = $2;
 $26 = ((($25)) + 44|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$vararg_buffer6>>2] = $27;
 (_sprintf($4,16726,$vararg_buffer6)|0);
 $28 = (_socket_connect($3,$4)|0);
 $29 = $2;
 $30 = ((($29)) + 4|0);
 HEAP32[$30>>2] = $28;
 $31 = $2;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(-1);
 if ($34) {
  $1 = -1;
  $35 = $1;
  STACKTOP = sp;return ($35|0);
 } else {
  $1 = 0;
  $35 = $1;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _khttp_parse_url($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink3 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $11 = (_strstr($10,16754)|0);
 $12 = $3;
 $13 = ($11|0)!=($12|0);
 if ($13) {
  $2 = 0;
  $147 = $2;
  STACKTOP = sp;return ($147|0);
 }
 $14 = $3;
 $15 = ((($14)) + 7|0);
 $6 = $15;
 while(1) {
  $16 = $6;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   break;
  }
  $20 = $6;
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 << 24 >> 24;
  $23 = ($22|0)!=(47);
  if (!($23)) {
   break;
  }
  $24 = $6;
  $25 = ((($24)) + 1|0);
  $6 = $25;
 }
 $26 = $6;
 $27 = $3;
 $28 = $26;
 $29 = $27;
 $30 = (($28) - ($29))|0;
 $31 = (($30) - 7)|0;
 $9 = $31;
 $32 = (_calloc(1,96)|0);
 $5 = $32;
 $33 = $9;
 $34 = (($33) + 1)|0;
 $35 = (_calloc($34,1)|0);
 $36 = $5;
 $37 = ((($36)) + 92|0);
 HEAP32[$37>>2] = $35;
 $38 = $5;
 $39 = ((($38)) + 92|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $3;
 $42 = ((($41)) + 7|0);
 $43 = $9;
 (_strncpy($40,$42,$43)|0);
 $44 = $5;
 $45 = ((($44)) + 92|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $9;
 $48 = (($46) + ($47)|0);
 HEAP8[$48>>0] = 0;
 $49 = $5;
 $50 = ((($49)) + 92|0);
 $51 = HEAP32[$50>>2]|0;
 $8 = $51;
 while(1) {
  $52 = $8;
  $53 = HEAP8[$52>>0]|0;
  $54 = $53 << 24 >> 24;
  $55 = ($54|0)!=(0);
  if (!($55)) {
   break;
  }
  $56 = $8;
  $57 = HEAP8[$56>>0]|0;
  $58 = $57 << 24 >> 24;
  $59 = ($58|0)!=(58);
  if (!($59)) {
   break;
  }
  $60 = $8;
  $61 = ((($60)) + 1|0);
  $8 = $61;
 }
 $62 = $8;
 $63 = HEAP8[$62>>0]|0;
 $64 = $63 << 24 >> 24;
 $65 = ($64|0)==(58);
 if ($65) {
  $66 = $8;
  $67 = ((($66)) + 1|0);
  $8 = $67;
  HEAP8[$66>>0] = 0;
 }
 $68 = (_getenv((16762|0))|0);
 $7 = $68;
 $69 = $7;
 $70 = ($69|0)==(0|0);
 if ($70) {
  $71 = $5;
  $72 = ((($71)) + 92|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (___strdup($73)|0);
  $75 = $5;
  $76 = ((($75)) + 16|0);
  HEAP32[$76>>2] = $74;
  $77 = $8;
  $78 = HEAP8[$77>>0]|0;
  $79 = $78 << 24 >> 24;
  $80 = ($79|0)!=(0);
  $81 = $8;
  $82 = $80 ? $81 : 16773;
  $83 = (___strdup($82)|0);
  $84 = $5;
  $85 = ((($84)) + 20|0);
  HEAP32[$85>>2] = $83;
  $86 = $6;
  $87 = HEAP8[$86>>0]|0;
  $88 = $87 << 24 >> 24;
  $89 = ($88|0)!=(0);
  $90 = $6;
  $91 = $89 ? $90 : 16776;
  $92 = (___strdup($91)|0);
  $93 = $5;
  $$sink = $92;$$sink3 = $93;
 } else {
  $94 = $7;
  $95 = (_strstr($94,16754)|0);
  $96 = $7;
  $97 = ($95|0)==($96|0);
  $98 = $7;
  $99 = ((($98)) + 7|0);
  $$sink4 = $97 ? $99 : $98;
  $100 = (___strdup($$sink4)|0);
  $101 = $5;
  $102 = ((($101)) + 16|0);
  HEAP32[$102>>2] = $100;
  $103 = $5;
  $104 = ((($103)) + 16|0);
  $105 = HEAP32[$104>>2]|0;
  $8 = $105;
  while(1) {
   $106 = $8;
   $107 = HEAP8[$106>>0]|0;
   $108 = $107 << 24 >> 24;
   $109 = ($108|0)!=(0);
   if (!($109)) {
    break;
   }
   $110 = $8;
   $111 = HEAP8[$110>>0]|0;
   $112 = $111 << 24 >> 24;
   $113 = ($112|0)!=(58);
   if (!($113)) {
    break;
   }
   $114 = $8;
   $115 = ((($114)) + 1|0);
   $8 = $115;
  }
  $116 = $8;
  $117 = HEAP8[$116>>0]|0;
  $118 = $117 << 24 >> 24;
  $119 = ($118|0)==(58);
  if ($119) {
   $120 = $8;
   $121 = ((($120)) + 1|0);
   $8 = $121;
   HEAP8[$120>>0] = 0;
  }
  $122 = $8;
  $123 = HEAP8[$122>>0]|0;
  $124 = $123 << 24 >> 24;
  $125 = ($124|0)!=(0);
  $126 = $8;
  $127 = $125 ? $126 : 16773;
  $128 = (___strdup($127)|0);
  $129 = $5;
  $130 = ((($129)) + 20|0);
  HEAP32[$130>>2] = $128;
  $131 = $3;
  $132 = (___strdup($131)|0);
  $133 = $5;
  $$sink = $132;$$sink3 = $133;
 }
 $134 = ((($$sink3)) + 88|0);
 HEAP32[$134>>2] = $$sink;
 $135 = $5;
 HEAP32[$135>>2] = 3;
 $136 = $5;
 $137 = ((($136)) + 4|0);
 HEAP32[$137>>2] = -1;
 $138 = $5;
 $139 = ((($138)) + 24|0);
 HEAP32[$139>>2] = -1;
 $140 = $5;
 $141 = ((($140)) + 72|0);
 $142 = $141;
 $143 = $142;
 HEAP32[$143>>2] = 0;
 $144 = (($142) + 4)|0;
 $145 = $144;
 HEAP32[$145>>2] = 0;
 $146 = $5;
 $2 = $146;
 $147 = $2;
 STACKTOP = sp;return ($147|0);
}
function _khttp_connect_file($0) {
 $0 = $0|0;
 var $$sink = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer9 = sp + 16|0;
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = sp + 28|0;
 $2 = $0;
 $4 = 0;
 $9 = $2;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(-1);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  (_close($15)|0);
 }
 $16 = $2;
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $2;
 $20 = ((($19)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_socket_connect($18,$21)|0);
 $23 = $2;
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = $22;
 $25 = (_calloc(65536,1)|0);
 $5 = $25;
 $26 = $5;
 $27 = $4;
 $28 = (($26) + ($27)|0);
 $29 = $2;
 $30 = ((($29)) + 88|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $2;
 $33 = ((($32)) + 92|0);
 $34 = HEAP32[$33>>2]|0;
 HEAP32[$vararg_buffer>>2] = $31;
 $vararg_ptr5 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $34;
 $35 = (_sprintf($28,16778,$vararg_buffer)|0);
 $36 = $4;
 $37 = (($36) + ($35))|0;
 $4 = $37;
 $38 = $5;
 $39 = $4;
 $40 = (($38) + ($39)|0);
 $41 = $2;
 $42 = ((($41)) + 8|0);
 $43 = $42;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = (($43) + 4)|0;
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 $49 = $vararg_buffer6;
 $50 = $49;
 HEAP32[$50>>2] = $45;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $48;
 $53 = (_sprintf($40,16806,$vararg_buffer6)|0);
 $54 = $4;
 $55 = (($54) + ($53))|0;
 $4 = $55;
 $56 = $5;
 $57 = $4;
 $58 = (($56) + ($57)|0);
 $59 = (_sprintf($58,16827,$vararg_buffer9)|0);
 $60 = $4;
 $61 = (($60) + ($59))|0;
 $4 = $61;
 $62 = $2;
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $5;
 $66 = $4;
 $67 = (_write($64,$65,$66)|0);
 $68 = $4;
 $69 = ($67|0)!=($68|0);
 if ($69) {
  $70 = $5;
  _free($70);
  $1 = -1;
  $166 = $1;
  STACKTOP = sp;return ($166|0);
 }
 $4 = 0;
 while(1) {
  $71 = $2;
  $72 = ((($71)) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $5;
  $75 = $4;
  $76 = (($74) + ($75)|0);
  $77 = (_read($73,$76,1)|0);
  $78 = ($77|0)!=(0);
  if (!($78)) {
   break;
  }
  $79 = $5;
  $80 = $4;
  $81 = (($79) + ($80)|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82 << 24 >> 24;
  $84 = ($83|0)==(10);
  $85 = $4;
  $86 = ($85|0)>=(3);
  $or$cond = $84 & $86;
  if ($or$cond) {
   $87 = $5;
   $88 = $4;
   $89 = (($87) + ($88)|0);
   $90 = ((($89)) + -3|0);
   $91 = (_strncmp($90,16830,4)|0);
   $92 = ($91|0)==(0);
   if ($92) {
    break;
   }
  }
  $93 = $4;
  $94 = (($93) + 1)|0;
  $4 = $94;
 }
 $95 = $5;
 $96 = $4;
 $97 = (($95) + ($96)|0);
 HEAP8[$97>>0] = 0;
 $98 = $4;
 $99 = ($98|0)<(14);
 $100 = $5;
 if ($99) {
  _free($100);
  $101 = $2;
  $102 = ((($101)) + 4|0);
  $103 = HEAP32[$102>>2]|0;
  (_close($103)|0);
  $104 = $2;
  $105 = ((($104)) + 4|0);
  HEAP32[$105>>2] = -1;
  $1 = -1;
  $166 = $1;
  STACKTOP = sp;return ($166|0);
 }
 $106 = ((($100)) + 8|0);
 $107 = (_strtol($106,$6,0)|0);
 $3 = $107;
 $108 = $3;
 $109 = ($108|0)==(200);
 L19: do {
  if ($109) {
   $110 = $2;
   $111 = ((($110)) + 8|0);
   $112 = $111;
   $113 = $112;
   $114 = HEAP32[$113>>2]|0;
   $115 = (($112) + 4)|0;
   $116 = $115;
   $117 = HEAP32[$116>>2]|0;
   $118 = ($117|0)>(0);
   $119 = ($114>>>0)>(0);
   $120 = ($117|0)==(0);
   $121 = $120 & $119;
   $122 = $118 | $121;
   if ($122) {
    $123 = $2;
    $124 = ((($123)) + 8|0);
    $125 = $124;
    $126 = $125;
    $127 = HEAP32[$126>>2]|0;
    $128 = (($125) + 4)|0;
    $129 = $128;
    $130 = HEAP32[$129>>2]|0;
    $7 = $127;
    while(1) {
     $131 = $7;
     $132 = ($131|0)!=(0);
     if (!($132)) {
      break L19;
     }
     $133 = $7;
     $134 = ($133|0)<(65536);
     $135 = $7;
     $136 = $134 ? $135 : 65536;
     $8 = $136;
     $137 = $2;
     $138 = ((($137)) + 4|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = $5;
     $141 = $8;
     $142 = (_my_netread($139,$140,$141)|0);
     $143 = $7;
     $144 = (($143) - ($142))|0;
     $7 = $144;
    }
   } else {
    label = 17;
   }
  } else {
   label = 17;
  }
 } while(0);
 if ((label|0) == 17) {
  $145 = $3;
  $146 = ($145|0)!=(206);
  $147 = $3;
  $148 = ($147|0)!=(200);
  $or$cond3 = $146 & $148;
  if ($or$cond3) {
   $149 = $5;
   _free($149);
   $150 = $2;
   $151 = ((($150)) + 4|0);
   $152 = HEAP32[$151>>2]|0;
   (_close($152)|0);
   $153 = $3;
   switch ($153|0) {
   case 401:  {
    $$sink = 1;
    break;
   }
   case 403:  {
    $$sink = 13;
    break;
   }
   case 404:  {
    $$sink = 2;
    break;
   }
   case 407:  {
    $$sink = 1;
    break;
   }
   case 408:  {
    $$sink = 110;
    break;
   }
   case 410:  {
    $$sink = 2;
    break;
   }
   case 503:  {
    $$sink = 11;
    break;
   }
   case 504:  {
    $$sink = 110;
    break;
   }
   default: {
    $154 = $3;
    $155 = ($154|0)>=(400);
    $156 = $3;
    $157 = ($156|0)<(500);
    $158 = $155 ? $157 : 0;
    $159 = $158 ? 22 : 5;
    $$sink = $159;
   }
   }
   $160 = (___errno_location()|0);
   HEAP32[$160>>2] = $$sink;
   $161 = $2;
   $162 = ((($161)) + 4|0);
   HEAP32[$162>>2] = -1;
   $1 = -1;
   $166 = $1;
   STACKTOP = sp;return ($166|0);
  }
 }
 $163 = $5;
 _free($163);
 $164 = $2;
 $165 = ((($164)) + 56|0);
 HEAP32[$165>>2] = 1;
 $1 = 0;
 $166 = $1;
 STACKTOP = sp;return ($166|0);
}
function _my_netread($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $5;
 $6 = $9;
 $8 = 0;
 while(1) {
  $10 = $6;
  $11 = ($10|0)!=(0);
  if (!($11)) {
   label = 6;
   break;
  }
  $12 = $3;
  $13 = (_socket_wait($12,1)|0);
  $14 = ($13|0)<=(0);
  if ($14) {
   label = 6;
   break;
  }
  $15 = $3;
  $16 = $4;
  $17 = $8;
  $18 = (($16) + ($17)|0);
  $19 = $6;
  $20 = (_read($15,$18,$19)|0);
  $7 = $20;
  $21 = $7;
  $22 = ($21|0)==(0);
  if ($22) {
   label = 6;
   break;
  }
  $23 = $7;
  $24 = $8;
  $25 = (($24) + ($23))|0;
  $8 = $25;
  $26 = $7;
  $27 = $6;
  $28 = (($27) - ($26))|0;
  $6 = $28;
 }
 if ((label|0) == 6) {
  $29 = $8;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _knet_open($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $7 = $4;
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 << 24 >> 24;
 $10 = ($9|0)!=(114);
 if ($10) {
  $11 = HEAP32[2398]|0;
  (_fprintf($11,16835,$vararg_buffer)|0);
  $2 = 0;
  $52 = $2;
  STACKTOP = sp;return ($52|0);
 }
 $12 = $3;
 $13 = (_strstr($12,16574)|0);
 $14 = $3;
 $15 = ($13|0)==($14|0);
 $16 = $3;
 do {
  if ($15) {
   $17 = $4;
   $18 = (_kftp_parse_url($16,$17)|0);
   $5 = $18;
   $19 = $5;
   $20 = ($19|0)==(0|0);
   if ($20) {
    $2 = 0;
    $52 = $2;
    STACKTOP = sp;return ($52|0);
   }
   $21 = $5;
   $22 = (_kftp_connect($21)|0);
   $23 = ($22|0)==(-1);
   $24 = $5;
   if (!($23)) {
    (_kftp_connect_file($24)|0);
    break;
   }
   (_knet_close($24)|0);
   $2 = 0;
   $52 = $2;
   STACKTOP = sp;return ($52|0);
  } else {
   $25 = (_strstr($16,16754)|0);
   $26 = $3;
   $27 = ($25|0)==($26|0);
   $28 = $3;
   if ($27) {
    $29 = $4;
    $30 = (_khttp_parse_url($28,$29)|0);
    $5 = $30;
    $31 = $5;
    $32 = ($31|0)==(0|0);
    if (!($32)) {
     $33 = $5;
     (_khttp_connect_file($33)|0);
     break;
    }
    $2 = 0;
    $52 = $2;
    STACKTOP = sp;return ($52|0);
   } else {
    $34 = (_open($28,0,$vararg_buffer1)|0);
    $6 = $34;
    $35 = $6;
    $36 = ($35|0)==(-1);
    if (!($36)) {
     $37 = (_calloc(1,96)|0);
     $5 = $37;
     $38 = $5;
     HEAP32[$38>>2] = 1;
     $39 = $6;
     $40 = $5;
     $41 = ((($40)) + 4|0);
     HEAP32[$41>>2] = $39;
     $42 = $5;
     $43 = ((($42)) + 24|0);
     HEAP32[$43>>2] = -1;
     break;
    }
    _perror(16876);
    $2 = 0;
    $52 = $2;
    STACKTOP = sp;return ($52|0);
   }
  }
 } while(0);
 $44 = $5;
 $45 = ($44|0)!=(0|0);
 if ($45) {
  $46 = $5;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(-1);
  if ($49) {
   $50 = $5;
   (_knet_close($50)|0);
   $2 = 0;
   $52 = $2;
   STACKTOP = sp;return ($52|0);
  }
 }
 $51 = $5;
 $2 = $51;
 $52 = $2;
 STACKTOP = sp;return ($52|0);
}
function _knet_close($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $1 = 0;
  $38 = $1;
  STACKTOP = sp;return ($38|0);
 }
 $5 = $2;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(-1);
 if ($8) {
  $9 = $2;
  $10 = ((($9)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  (_close($11)|0);
 }
 $12 = $2;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(-1);
 if ($15) {
  $16 = $2;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  (_close($18)|0);
 }
 $19 = $2;
 $20 = ((($19)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 _free($21);
 $22 = $2;
 $23 = ((($22)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 _free($24);
 $25 = $2;
 $26 = ((($25)) + 60|0);
 $27 = HEAP32[$26>>2]|0;
 _free($27);
 $28 = $2;
 $29 = ((($28)) + 64|0);
 $30 = HEAP32[$29>>2]|0;
 _free($30);
 $31 = $2;
 $32 = ((($31)) + 88|0);
 $33 = HEAP32[$32>>2]|0;
 _free($33);
 $34 = $2;
 $35 = ((($34)) + 92|0);
 $36 = HEAP32[$35>>2]|0;
 _free($36);
 $37 = $2;
 _free($37);
 $1 = 0;
 $38 = $1;
 STACKTOP = sp;return ($38|0);
}
function _knet_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $10 = $4;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(-1);
 if ($13) {
  $3 = 0;
  $87 = $3;
  STACKTOP = sp;return ($87|0);
 }
 $14 = $4;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(2);
 $17 = $4;
 if ($16) {
  $18 = ((($17)) + 56|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0);
  if ($20) {
   $21 = $4;
   $22 = ((($21)) + 52|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)!=(0);
   if (!($24)) {
    $25 = $4;
    (_kftp_reconnect($25)|0);
   }
   $26 = $4;
   (_kftp_connect_file($26)|0);
  }
 } else {
  $27 = HEAP32[$17>>2]|0;
  $28 = ($27|0)==(3);
  if ($28) {
   $29 = $4;
   $30 = ((($29)) + 56|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $33 = $4;
    (_khttp_connect_file($33)|0);
   }
  }
 }
 $34 = $4;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(1);
 L15: do {
  if ($36) {
   $37 = $6;
   $8 = $37;
   while(1) {
    $38 = $8;
    $39 = ($38|0)!=(0);
    if (!($39)) {
     break L15;
    }
    while(1) {
     $40 = $4;
     $41 = ((($40)) + 4|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = $5;
     $44 = $7;
     $45 = (($43) + ($44)|0);
     $46 = $8;
     $47 = (_read($42,$45,$46)|0);
     $9 = $47;
     $48 = $9;
     $49 = ($48|0)<(0);
     if (!($49)) {
      break;
     }
     $50 = (___errno_location()|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = (4)==($51|0);
     if (!($52)) {
      break;
     }
    }
    $53 = $9;
    $54 = ($53|0)<(0);
    if ($54) {
     break;
    }
    $55 = $9;
    $56 = ($55|0)==(0);
    if ($56) {
     break L15;
    }
    $57 = $9;
    $58 = $7;
    $59 = (($58) + ($57))|0;
    $7 = $59;
    $60 = $9;
    $61 = $8;
    $62 = (($61) - ($60))|0;
    $8 = $62;
   }
   $3 = -1;
   $87 = $3;
   STACKTOP = sp;return ($87|0);
  } else {
   $63 = $4;
   $64 = ((($63)) + 4|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $5;
   $67 = $6;
   $68 = (_my_netread($65,$66,$67)|0);
   $7 = $68;
  }
 } while(0);
 $69 = $7;
 $70 = ($69|0)<(0);
 $71 = $70 << 31 >> 31;
 $72 = $4;
 $73 = ((($72)) + 8|0);
 $74 = $73;
 $75 = $74;
 $76 = HEAP32[$75>>2]|0;
 $77 = (($74) + 4)|0;
 $78 = $77;
 $79 = HEAP32[$78>>2]|0;
 $80 = (_i64Add(($76|0),($79|0),($69|0),($71|0))|0);
 $81 = tempRet0;
 $82 = $73;
 $83 = $82;
 HEAP32[$83>>2] = $80;
 $84 = (($82) + 4)|0;
 $85 = $84;
 HEAP32[$85>>2] = $81;
 $86 = $7;
 $3 = $86;
 $87 = $3;
 STACKTOP = sp;return ($87|0);
}
function _knet_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = $5;
  $11 = ($10|0)<(0);
  $12 = $11 << 31 >> 31;
  $13 = $4;
  $14 = ((($13)) + 8|0);
  $15 = $14;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = ($10|0)==($17|0);
  $22 = ($12|0)==($20|0);
  $23 = $21 & $22;
  if ($23) {
   $3 = 0;
   $167 = $3;
   STACKTOP = sp;return ($167|0);
  }
 }
 $24 = $4;
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(1);
 $27 = $4;
 if ($26) {
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $5;
  $31 = $6;
  $32 = (_lseek($29,$30,$31)|0);
  $7 = $32;
  $33 = $7;
  $34 = ($33|0)==(-1);
  if ($34) {
   $3 = -1;
   $167 = $3;
   STACKTOP = sp;return ($167|0);
  } else {
   $35 = $7;
   $36 = ($35|0)<(0);
   $37 = $36 << 31 >> 31;
   $38 = $4;
   $39 = ((($38)) + 8|0);
   $40 = $39;
   $41 = $40;
   HEAP32[$41>>2] = $35;
   $42 = (($40) + 4)|0;
   $43 = $42;
   HEAP32[$43>>2] = $37;
   $44 = $4;
   $45 = ((($44)) + 8|0);
   $46 = $45;
   $47 = $46;
   $48 = HEAP32[$47>>2]|0;
   $49 = (($46) + 4)|0;
   $50 = $49;
   $51 = HEAP32[$50>>2]|0;
   $3 = $48;
   $167 = $3;
   STACKTOP = sp;return ($167|0);
  }
 }
 $52 = HEAP32[$27>>2]|0;
 $53 = ($52|0)==(2);
 if ($53) {
  $54 = $6;
  $55 = ($54|0)==(1);
  do {
   if ($55) {
    $56 = $5;
    $57 = ($56|0)<(0);
    $58 = $57 << 31 >> 31;
    $59 = $4;
    $60 = ((($59)) + 8|0);
    $61 = $60;
    $62 = $61;
    $63 = HEAP32[$62>>2]|0;
    $64 = (($61) + 4)|0;
    $65 = $64;
    $66 = HEAP32[$65>>2]|0;
    $67 = (_i64Add(($63|0),($66|0),($56|0),($58|0))|0);
    $68 = tempRet0;
    $69 = $60;
    $70 = $69;
    HEAP32[$70>>2] = $67;
    $71 = (($69) + 4)|0;
    $72 = $71;
    HEAP32[$72>>2] = $68;
   } else {
    $73 = $6;
    $74 = ($73|0)==(0);
    if ($74) {
     $75 = $5;
     $76 = ($75|0)<(0);
     $77 = $76 << 31 >> 31;
     $78 = $4;
     $79 = ((($78)) + 8|0);
     $80 = $79;
     $81 = $80;
     HEAP32[$81>>2] = $75;
     $82 = (($80) + 4)|0;
     $83 = $82;
     HEAP32[$83>>2] = $77;
     break;
    }
    $84 = $6;
    $85 = ($84|0)==(2);
    if ($85) {
     $86 = $4;
     $87 = ((($86)) + 80|0);
     $88 = $87;
     $89 = $88;
     $90 = HEAP32[$89>>2]|0;
     $91 = (($88) + 4)|0;
     $92 = $91;
     $93 = HEAP32[$92>>2]|0;
     $94 = $5;
     $95 = ($94|0)<(0);
     $96 = $95 << 31 >> 31;
     $97 = (_i64Add(($90|0),($93|0),($94|0),($96|0))|0);
     $98 = tempRet0;
     $99 = $4;
     $100 = ((($99)) + 8|0);
     $101 = $100;
     $102 = $101;
     HEAP32[$102>>2] = $97;
     $103 = (($101) + 4)|0;
     $104 = $103;
     HEAP32[$104>>2] = $98;
     break;
    }
    $3 = -1;
    $167 = $3;
    STACKTOP = sp;return ($167|0);
   }
  } while(0);
  $105 = $4;
  $106 = ((($105)) + 56|0);
  HEAP32[$106>>2] = 0;
  $107 = $4;
  $108 = ((($107)) + 8|0);
  $109 = $108;
  $110 = $109;
  $111 = HEAP32[$110>>2]|0;
  $112 = (($109) + 4)|0;
  $113 = $112;
  $114 = HEAP32[$113>>2]|0;
  $3 = $111;
  $167 = $3;
  STACKTOP = sp;return ($167|0);
 }
 $115 = $4;
 $116 = HEAP32[$115>>2]|0;
 $117 = ($116|0)==(3);
 if (!($117)) {
  $162 = (___errno_location()|0);
  HEAP32[$162>>2] = 22;
  $163 = HEAP32[2398]|0;
  $164 = (___errno_location()|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = (_strerror($165)|0);
  HEAP32[$vararg_buffer1>>2] = $166;
  (_fprintf($163,16951,$vararg_buffer1)|0);
  $3 = -1;
  $167 = $3;
  STACKTOP = sp;return ($167|0);
 }
 $118 = $6;
 $119 = ($118|0)==(2);
 if ($119) {
  $120 = HEAP32[2398]|0;
  (_fprintf($120,16881,$vararg_buffer)|0);
  $121 = (___errno_location()|0);
  HEAP32[$121>>2] = 29;
  $3 = -1;
  $167 = $3;
  STACKTOP = sp;return ($167|0);
 }
 $122 = $6;
 $123 = ($122|0)==(1);
 do {
  if ($123) {
   $124 = $5;
   $125 = ($124|0)<(0);
   $126 = $125 << 31 >> 31;
   $127 = $4;
   $128 = ((($127)) + 8|0);
   $129 = $128;
   $130 = $129;
   $131 = HEAP32[$130>>2]|0;
   $132 = (($129) + 4)|0;
   $133 = $132;
   $134 = HEAP32[$133>>2]|0;
   $135 = (_i64Add(($131|0),($134|0),($124|0),($126|0))|0);
   $136 = tempRet0;
   $137 = $128;
   $138 = $137;
   HEAP32[$138>>2] = $135;
   $139 = (($137) + 4)|0;
   $140 = $139;
   HEAP32[$140>>2] = $136;
  } else {
   $141 = $6;
   $142 = ($141|0)==(0);
   if ($142) {
    $143 = $5;
    $144 = ($143|0)<(0);
    $145 = $144 << 31 >> 31;
    $146 = $4;
    $147 = ((($146)) + 8|0);
    $148 = $147;
    $149 = $148;
    HEAP32[$149>>2] = $143;
    $150 = (($148) + 4)|0;
    $151 = $150;
    HEAP32[$151>>2] = $145;
    break;
   }
   $3 = -1;
   $167 = $3;
   STACKTOP = sp;return ($167|0);
  }
 } while(0);
 $152 = $4;
 $153 = ((($152)) + 56|0);
 HEAP32[$153>>2] = 0;
 $154 = $4;
 $155 = ((($154)) + 8|0);
 $156 = $155;
 $157 = $156;
 $158 = HEAP32[$157>>2]|0;
 $159 = (($156) + 4)|0;
 $160 = $159;
 $161 = HEAP32[$160>>2]|0;
 $3 = $158;
 $167 = $3;
 STACKTOP = sp;return ($167|0);
}
function _fai_build_core($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $3 = sp + 64|0;
 $11 = sp + 8|0;
 $12 = sp;
 $2 = $0;
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
 $13 = (_calloc(1,20)|0);
 $10 = $13;
 $14 = (_kh_init_s()|0);
 $15 = $10;
 $16 = ((($15)) + 16|0);
 HEAP32[$16>>2] = $14;
 $6 = -1;
 $5 = -1;
 $17 = $12;
 $18 = $17;
 HEAP32[$18>>2] = -1;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = -1;
 $7 = 0;
 $9 = -1;
 $8 = -1;
 $21 = $11;
 $22 = $21;
 HEAP32[$22>>2] = 0;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = 0;
 while(1) {
  $25 = $2;
  $26 = (_bgzf_getc($25)|0);
  $4 = $26;
  $27 = ($26|0)>=(0);
  if (!($27)) {
   label = 38;
   break;
  }
  $28 = $4;
  $29 = ($28|0)==(10);
  if ($29) {
   $30 = $7;
   $31 = ($30|0)==(1);
   if ($31) {
    $32 = $2;
    $33 = (_bgzf_utell($32)|0);
    $34 = ($33|0)<(0);
    $35 = $34 << 31 >> 31;
    $36 = $11;
    $37 = $36;
    HEAP32[$37>>2] = $33;
    $38 = (($36) + 4)|0;
    $39 = $38;
    HEAP32[$39>>2] = $35;
    continue;
   }
   $40 = $7;
   $41 = ($40|0)==(0);
   $42 = $12;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = (($42) + 4)|0;
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)<(0);
   $or$cond = $41 & $48;
   $49 = $7;
   $50 = ($49|0)==(2);
   $or$cond3 = $or$cond | $50;
   if ($or$cond3) {
    continue;
   }
   $51 = $7;
   $52 = ($51|0)==(0);
   if ($52) {
    $7 = 2;
    continue;
   }
  }
  $53 = $4;
  $54 = ($53|0)==(62);
  if ($54) {
   $55 = $12;
   $56 = $55;
   $57 = HEAP32[$56>>2]|0;
   $58 = (($55) + 4)|0;
   $59 = $58;
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)>(0);
   $62 = ($57>>>0)>=(0);
   $63 = ($60|0)==(0);
   $64 = $63 & $62;
   $65 = $61 | $64;
   if ($65) {
    $66 = $10;
    $67 = ((($3)) + 8|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $12;
    $70 = $69;
    $71 = HEAP32[$70>>2]|0;
    $72 = (($69) + 4)|0;
    $73 = $72;
    $74 = HEAP32[$73>>2]|0;
    $75 = $5;
    $76 = $6;
    $77 = $11;
    $78 = $77;
    $79 = HEAP32[$78>>2]|0;
    $80 = (($77) + 4)|0;
    $81 = $80;
    $82 = HEAP32[$81>>2]|0;
    $83 = (_fai_insert_index($66,$68,$71,$75,$76,$79,$82)|0);
    $84 = ($83|0)!=(0);
    if ($84) {
     break;
    }
   }
   HEAP32[$3>>2] = 0;
   while(1) {
    $85 = $2;
    $86 = (_bgzf_getc($85)|0);
    $4 = $86;
    $87 = ($86|0)>=(0);
    if (!($87)) {
     break;
    }
    $88 = $4;
    $89 = (_isspace($88)|0);
    $90 = ($89|0)!=(0);
    if ($90) {
     $92 = HEAP32[$3>>2]|0;
     $93 = ($92>>>0)>(0);
     $94 = $4;
     $95 = ($94|0)==(10);
     $or$cond5 = $93 | $95;
     if ($or$cond5) {
      break;
     } else {
      continue;
     }
    } else {
     $91 = $4;
     (_kputc__916($91,$3)|0);
     continue;
    }
   }
   (_kputsn_918(27056,0,$3)|0);
   $96 = $4;
   $97 = ($96|0)<(0);
   if ($97) {
    label = 18;
    break;
   }
   $99 = $4;
   $100 = ($99|0)!=(10);
   if ($100) {
    while(1) {
     $101 = $2;
     $102 = (_bgzf_getc($101)|0);
     $4 = $102;
     $103 = ($102|0)>=(0);
     $104 = $4;
     $105 = ($104|0)!=(10);
     $106 = $103 ? $105 : 0;
     if (!($106)) {
      break;
     }
    }
   }
   $7 = 1;
   $107 = $12;
   $108 = $107;
   HEAP32[$108>>2] = 0;
   $109 = (($107) + 4)|0;
   $110 = $109;
   HEAP32[$110>>2] = 0;
   $111 = $2;
   $112 = (_bgzf_utell($111)|0);
   $113 = ($112|0)<(0);
   $114 = $113 << 31 >> 31;
   $115 = $11;
   $116 = $115;
   HEAP32[$116>>2] = $112;
   $117 = (($115) + 4)|0;
   $118 = $117;
   HEAP32[$118>>2] = $114;
   continue;
  }
  $119 = $7;
  $120 = ($119|0)==(3);
  if ($120) {
   label = 23;
   break;
  }
  $124 = $7;
  $125 = ($124|0)==(2);
  if ($125) {
   $7 = 3;
  }
  $9 = 0;
  $8 = 0;
  while(1) {
   $126 = $8;
   $127 = (($126) + 1)|0;
   $8 = $127;
   $128 = $4;
   $129 = (_isgraph($128)|0);
   $130 = ($129|0)!=(0);
   if ($130) {
    $131 = $9;
    $132 = (($131) + 1)|0;
    $9 = $132;
   }
   $133 = $2;
   $134 = (_bgzf_getc($133)|0);
   $4 = $134;
   $135 = ($134|0)>=(0);
   $136 = $4;
   $137 = ($136|0)!=(10);
   $138 = $135 ? $137 : 0;
   if (!($138)) {
    break;
   }
  }
  $139 = $7;
  $140 = ($139|0)==(3);
  $141 = $9;
  $142 = ($141|0)!=(0);
  $or$cond7 = $140 & $142;
  if ($or$cond7) {
   label = 31;
   break;
  }
  $146 = $8;
  $147 = (($146) + 1)|0;
  $8 = $147;
  $148 = $9;
  $149 = ($148|0)<(0);
  $150 = $149 << 31 >> 31;
  $151 = $12;
  $152 = $151;
  $153 = HEAP32[$152>>2]|0;
  $154 = (($151) + 4)|0;
  $155 = $154;
  $156 = HEAP32[$155>>2]|0;
  $157 = (_i64Add(($153|0),($156|0),($148|0),($150|0))|0);
  $158 = tempRet0;
  $159 = $12;
  $160 = $159;
  HEAP32[$160>>2] = $157;
  $161 = (($159) + 4)|0;
  $162 = $161;
  HEAP32[$162>>2] = $158;
  $163 = $7;
  $164 = ($163|0)==(1);
  if ($164) {
   $165 = $8;
   $5 = $165;
   $166 = $9;
   $6 = $166;
   $7 = 0;
   continue;
  }
  $167 = $7;
  $168 = ($167|0)==(0);
  if (!($168)) {
   continue;
  }
  $169 = $8;
  $170 = $5;
  $171 = ($169|0)!=($170|0);
  if (!($171)) {
   $172 = $9;
   $173 = $6;
   $174 = ($172|0)!=($173|0);
   if (!($174)) {
    continue;
   }
  }
  $7 = 2;
 }
 if ((label|0) == 18) {
  $98 = HEAP32[2398]|0;
  (_fprintf($98,16967,$vararg_buffer)|0);
 }
 else if ((label|0) == 23) {
  $121 = HEAP32[2398]|0;
  $122 = ((($3)) + 8|0);
  $123 = HEAP32[$122>>2]|0;
  HEAP32[$vararg_buffer8>>2] = $123;
  (_fprintf($121,17016,$vararg_buffer8)|0);
 }
 else if ((label|0) == 31) {
  $143 = HEAP32[2398]|0;
  $144 = ((($3)) + 8|0);
  $145 = HEAP32[$144>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $145;
  (_fprintf($143,17086,$vararg_buffer10)|0);
 }
 else if ((label|0) == 38) {
  $175 = $12;
  $176 = $175;
  $177 = HEAP32[$176>>2]|0;
  $178 = (($175) + 4)|0;
  $179 = $178;
  $180 = HEAP32[$179>>2]|0;
  $181 = ($180|0)>(0);
  $182 = ($177>>>0)>=(0);
  $183 = ($180|0)==(0);
  $184 = $183 & $182;
  $185 = $181 | $184;
  if ($185) {
   $186 = $10;
   $187 = ((($3)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = $12;
   $190 = $189;
   $191 = HEAP32[$190>>2]|0;
   $192 = (($189) + 4)|0;
   $193 = $192;
   $194 = HEAP32[$193>>2]|0;
   $195 = $5;
   $196 = $6;
   $197 = $11;
   $198 = $197;
   $199 = HEAP32[$198>>2]|0;
   $200 = (($197) + 4)|0;
   $201 = $200;
   $202 = HEAP32[$201>>2]|0;
   $203 = (_fai_insert_index($186,$188,$191,$195,$196,$199,$202)|0);
   $204 = ($203|0)!=(0);
   if (!($204)) {
    $205 = ((($3)) + 8|0);
    $206 = HEAP32[$205>>2]|0;
    _free($206);
    $207 = $10;
    $1 = $207;
    $211 = $1;
    STACKTOP = sp;return ($211|0);
   }
  }
 }
 $208 = ((($3)) + 8|0);
 $209 = HEAP32[$208>>2]|0;
 _free($209);
 $210 = $10;
 _fai_destroy($210);
 $1 = 0;
 $211 = $1;
 STACKTOP = sp;return ($211|0);
}
function _kh_init_s() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,28)|0);
 return ($0|0);
}
function _fai_insert_index($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer4 = sp + 32|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $13 = sp;
 $15 = sp + 48|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $19 = $13;
 $20 = $19;
 HEAP32[$20>>2] = $5;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $6;
 $23 = $9;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  $25 = HEAP32[2398]|0;
  (_fprintf($25,17144,$vararg_buffer)|0);
  $7 = -1;
  $121 = $7;
  STACKTOP = sp;return ($121|0);
 }
 $26 = $9;
 $27 = (___strdup($26)|0);
 $14 = $27;
 $28 = $8;
 $29 = ((($28)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $14;
 $32 = (_kh_put_s($30,$31,$15)|0);
 $16 = $32;
 $33 = $8;
 $34 = ((($33)) + 16|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 24|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $16;
 $39 = (($37) + (($38*24)|0)|0);
 $17 = $39;
 $40 = HEAP32[$15>>2]|0;
 $41 = ($40|0)!=(0);
 if (!($41)) {
  $42 = HEAP32[2398]|0;
  $43 = $9;
  $44 = $13;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($44) + 4)|0;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $43;
  $vararg_ptr3 = ((($vararg_buffer1)) + 8|0);
  $50 = $vararg_ptr3;
  $51 = $50;
  HEAP32[$51>>2] = $46;
  $52 = (($50) + 4)|0;
  $53 = $52;
  HEAP32[$53>>2] = $49;
  (_fprintf($42,17177,$vararg_buffer1)|0);
  $54 = $14;
  _free($54);
  $7 = 0;
  $121 = $7;
  STACKTOP = sp;return ($121|0);
 }
 $55 = $8;
 $56 = ((($55)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $8;
 $59 = ((($58)) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($57|0)==($60|0);
 do {
  if ($61) {
   $62 = $8;
   $63 = ((($62)) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64|0)!=(0);
   if ($65) {
    $66 = $8;
    $67 = ((($66)) + 8|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $68 << 1;
    $72 = $69;
   } else {
    $72 = 16;
   }
   $70 = $8;
   $71 = ((($70)) + 8|0);
   HEAP32[$71>>2] = $72;
   $73 = $8;
   $74 = ((($73)) + 12|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $8;
   $77 = ((($76)) + 8|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $78<<2;
   $80 = (_realloc($75,$79)|0);
   $18 = $80;
   $81 = ($80|0)!=(0|0);
   if ($81) {
    $83 = $18;
    $84 = $8;
    $85 = ((($84)) + 12|0);
    HEAP32[$85>>2] = $83;
    break;
   }
   $82 = HEAP32[2398]|0;
   (_fprintf($82,17248,$vararg_buffer4)|0);
   $7 = -1;
   $121 = $7;
   STACKTOP = sp;return ($121|0);
  }
 } while(0);
 $86 = $14;
 $87 = $8;
 $88 = ((($87)) + 12|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $8;
 $91 = ((($90)) + 4|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (($92) + 1)|0;
 HEAP32[$91>>2] = $93;
 $94 = (($89) + ($92<<2)|0);
 HEAP32[$94>>2] = $86;
 $95 = $10;
 $96 = ($95|0)<(0);
 $97 = $96 << 31 >> 31;
 $98 = $17;
 $99 = ((($98)) + 8|0);
 $100 = $99;
 $101 = $100;
 HEAP32[$101>>2] = $95;
 $102 = (($100) + 4)|0;
 $103 = $102;
 HEAP32[$103>>2] = $97;
 $104 = $11;
 $105 = $17;
 HEAP32[$105>>2] = $104;
 $106 = $12;
 $107 = $17;
 $108 = ((($107)) + 4|0);
 HEAP32[$108>>2] = $106;
 $109 = $13;
 $110 = $109;
 $111 = HEAP32[$110>>2]|0;
 $112 = (($109) + 4)|0;
 $113 = $112;
 $114 = HEAP32[$113>>2]|0;
 $115 = $17;
 $116 = ((($115)) + 16|0);
 $117 = $116;
 $118 = $117;
 HEAP32[$118>>2] = $111;
 $119 = (($117) + 4)|0;
 $120 = $119;
 HEAP32[$120>>2] = $114;
 $7 = 0;
 $121 = $7;
 STACKTOP = sp;return ($121|0);
}
function _kputc__916($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = $4;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8>>>0)>($11>>>0);
 do {
  if ($12) {
   $13 = $4;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 1)|0;
   $16 = $4;
   $17 = ((($16)) + 4|0);
   HEAP32[$17>>2] = $15;
   $18 = $4;
   $19 = ((($18)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + -1)|0;
   HEAP32[$19>>2] = $21;
   $22 = $4;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24 >>> 1;
   $26 = $4;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 | $25;
   HEAP32[$27>>2] = $29;
   $30 = $4;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $32 >>> 2;
   $34 = $4;
   $35 = ((($34)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $36 | $33;
   HEAP32[$35>>2] = $37;
   $38 = $4;
   $39 = ((($38)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 >>> 4;
   $42 = $4;
   $43 = ((($42)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 | $41;
   HEAP32[$43>>2] = $45;
   $46 = $4;
   $47 = ((($46)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $48 >>> 8;
   $50 = $4;
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $52 | $49;
   HEAP32[$51>>2] = $53;
   $54 = $4;
   $55 = ((($54)) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $56 >>> 16;
   $58 = $4;
   $59 = ((($58)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $60 | $57;
   HEAP32[$59>>2] = $61;
   $62 = $4;
   $63 = ((($62)) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) + 1)|0;
   HEAP32[$63>>2] = $65;
   $66 = $4;
   $67 = ((($66)) + 8|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $4;
   $70 = ((($69)) + 4|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (_realloc($68,$71)|0);
   $5 = $72;
   $73 = ($72|0)!=(0|0);
   if ($73) {
    $74 = $5;
    $75 = $4;
    $76 = ((($75)) + 8|0);
    HEAP32[$76>>2] = $74;
    break;
   }
   $2 = -1;
   $86 = $2;
   STACKTOP = sp;return ($86|0);
  }
 } while(0);
 $77 = $3;
 $78 = $77&255;
 $79 = $4;
 $80 = ((($79)) + 8|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $4;
 $83 = HEAP32[$82>>2]|0;
 $84 = (($83) + 1)|0;
 HEAP32[$82>>2] = $84;
 $85 = (($81) + ($83)|0);
 HEAP8[$85>>0] = $78;
 $2 = 1;
 $86 = $2;
 STACKTOP = sp;return ($86|0);
}
function _kputsn_918($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6;
 $9 = HEAP32[$8>>2]|0;
 $10 = $5;
 $11 = (($9) + ($10))|0;
 $12 = (($11) + 1)|0;
 $13 = $6;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12>>>0)>=($15>>>0);
 do {
  if ($16) {
   $17 = $6;
   $18 = HEAP32[$17>>2]|0;
   $19 = $5;
   $20 = (($18) + ($19))|0;
   $21 = (($20) + 2)|0;
   $22 = $6;
   $23 = ((($22)) + 4|0);
   HEAP32[$23>>2] = $21;
   $24 = $6;
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + -1)|0;
   HEAP32[$25>>2] = $27;
   $28 = $6;
   $29 = ((($28)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $30 >>> 1;
   $32 = $6;
   $33 = ((($32)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $34 | $31;
   HEAP32[$33>>2] = $35;
   $36 = $6;
   $37 = ((($36)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $38 >>> 2;
   $40 = $6;
   $41 = ((($40)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $42 | $39;
   HEAP32[$41>>2] = $43;
   $44 = $6;
   $45 = ((($44)) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $46 >>> 4;
   $48 = $6;
   $49 = ((($48)) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $50 | $47;
   HEAP32[$49>>2] = $51;
   $52 = $6;
   $53 = ((($52)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 >>> 8;
   $56 = $6;
   $57 = ((($56)) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $58 | $55;
   HEAP32[$57>>2] = $59;
   $60 = $6;
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $62 >>> 16;
   $64 = $6;
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $66 | $63;
   HEAP32[$65>>2] = $67;
   $68 = $6;
   $69 = ((($68)) + 4|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($70) + 1)|0;
   HEAP32[$69>>2] = $71;
   $72 = $6;
   $73 = ((($72)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $6;
   $76 = ((($75)) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (_realloc($74,$77)|0);
   $7 = $78;
   $79 = ($78|0)!=(0|0);
   if ($79) {
    $80 = $7;
    $81 = $6;
    $82 = ((($81)) + 8|0);
    HEAP32[$82>>2] = $80;
    break;
   }
   $3 = -1;
   $102 = $3;
   STACKTOP = sp;return ($102|0);
  }
 } while(0);
 $83 = $6;
 $84 = ((($83)) + 8|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $6;
 $87 = HEAP32[$86>>2]|0;
 $88 = (($85) + ($87)|0);
 $89 = $4;
 $90 = $5;
 _memcpy(($88|0),($89|0),($90|0))|0;
 $91 = $5;
 $92 = $6;
 $93 = HEAP32[$92>>2]|0;
 $94 = (($93) + ($91))|0;
 HEAP32[$92>>2] = $94;
 $95 = $6;
 $96 = ((($95)) + 8|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = $6;
 $99 = HEAP32[$98>>2]|0;
 $100 = (($97) + ($99)|0);
 HEAP8[$100>>0] = 0;
 $101 = $5;
 $3 = $101;
 $102 = $3;
 STACKTOP = sp;return ($102|0);
}
function _fai_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)<($6|0);
  $8 = $1;
  $9 = ((($8)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  if (!($7)) {
   break;
  }
  $11 = $2;
  $12 = (($10) + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  _free($13);
  $14 = $2;
  $15 = (($14) + 1)|0;
  $2 = $15;
 }
 _free($10);
 $16 = $1;
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 _kh_destroy_s($18);
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  $24 = $1;
  _free($24);
  STACKTOP = sp;return;
 }
 $22 = $1;
 $23 = HEAP32[$22>>2]|0;
 (_bgzf_close($23)|0);
 $24 = $1;
 _free($24);
 STACKTOP = sp;return;
}
function _kh_destroy_s($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _kh_put_s($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $4;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16>>>0)>=($19>>>0);
 do {
  if ($20) {
   $21 = $4;
   $22 = HEAP32[$21>>2]|0;
   $23 = $4;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 << 1;
   $27 = ($22>>>0)>($26>>>0);
   $28 = $4;
   $29 = $4;
   $30 = HEAP32[$29>>2]|0;
   if ($27) {
    $31 = (($30) - 1)|0;
    $32 = (_kh_resize_s($28,$31)|0);
    $33 = ($32|0)<(0);
    if (!($33)) {
     break;
    }
    $34 = $6;
    HEAP32[$34>>2] = -1;
    $35 = $4;
    $36 = HEAP32[$35>>2]|0;
    $3 = $36;
    $230 = $3;
    STACKTOP = sp;return ($230|0);
   } else {
    $37 = (($30) + 1)|0;
    $38 = (_kh_resize_s($28,$37)|0);
    $39 = ($38|0)<(0);
    if (!($39)) {
     break;
    }
    $40 = $6;
    HEAP32[$40>>2] = -1;
    $41 = $4;
    $42 = HEAP32[$41>>2]|0;
    $3 = $42;
    $230 = $3;
    STACKTOP = sp;return ($230|0);
   }
  }
 } while(0);
 $43 = $4;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) - 1)|0;
 $12 = $45;
 $13 = 0;
 $46 = $4;
 $47 = HEAP32[$46>>2]|0;
 $10 = $47;
 $7 = $47;
 $48 = $5;
 $49 = (___ac_X31_hash_string_925($48)|0);
 $8 = $49;
 $50 = $8;
 $51 = $12;
 $52 = $50 & $51;
 $9 = $52;
 $53 = $4;
 $54 = ((($53)) + 16|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $9;
 $57 = $56 >>> 4;
 $58 = (($55) + ($57<<2)|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $9;
 $61 = $60 & 15;
 $62 = $61 << 1;
 $63 = $59 >>> $62;
 $64 = $63 & 2;
 $65 = ($64|0)!=(0);
 $66 = $9;
 do {
  if ($65) {
   $7 = $66;
  } else {
   $11 = $66;
   while(1) {
    $67 = $4;
    $68 = ((($67)) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $9;
    $71 = $70 >>> 4;
    $72 = (($69) + ($71<<2)|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $9;
    $75 = $74 & 15;
    $76 = $75 << 1;
    $77 = $73 >>> $76;
    $78 = $77 & 2;
    $79 = ($78|0)!=(0);
    if ($79) {
     break;
    }
    $80 = $4;
    $81 = ((($80)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $9;
    $84 = $83 >>> 4;
    $85 = (($82) + ($84<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $9;
    $88 = $87 & 15;
    $89 = $88 << 1;
    $90 = $86 >>> $89;
    $91 = $90 & 1;
    $92 = ($91|0)!=(0);
    if (!($92)) {
     $93 = $4;
     $94 = ((($93)) + 20|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = $9;
     $97 = (($95) + ($96<<2)|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $5;
     $100 = (_strcmp($98,$99)|0);
     $101 = ($100|0)==(0);
     $102 = $101 ^ 1;
     if (!($102)) {
      break;
     }
    }
    $103 = $4;
    $104 = ((($103)) + 16|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $9;
    $107 = $106 >>> 4;
    $108 = (($105) + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $9;
    $111 = $110 & 15;
    $112 = $111 << 1;
    $113 = $109 >>> $112;
    $114 = $113 & 1;
    $115 = ($114|0)!=(0);
    if ($115) {
     $116 = $9;
     $10 = $116;
    }
    $117 = $9;
    $118 = $13;
    $119 = (($118) + 1)|0;
    $13 = $119;
    $120 = (($117) + ($119))|0;
    $121 = $12;
    $122 = $120 & $121;
    $9 = $122;
    $123 = $9;
    $124 = $11;
    $125 = ($123|0)==($124|0);
    if ($125) {
     label = 16;
     break;
    }
   }
   if ((label|0) == 16) {
    $126 = $10;
    $7 = $126;
   }
   $127 = $7;
   $128 = $4;
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = $4;
    $132 = ((($131)) + 16|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = $9;
    $135 = $134 >>> 4;
    $136 = (($133) + ($135<<2)|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $9;
    $139 = $138 & 15;
    $140 = $139 << 1;
    $141 = $137 >>> $140;
    $142 = $141 & 2;
    $143 = ($142|0)!=(0);
    if ($143) {
     $144 = $10;
     $145 = $4;
     $146 = HEAP32[$145>>2]|0;
     $147 = ($144|0)!=($146|0);
     if ($147) {
      $148 = $10;
      $7 = $148;
      break;
     }
    }
    $149 = $9;
    $7 = $149;
   }
  }
 } while(0);
 $150 = $4;
 $151 = ((($150)) + 16|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = $7;
 $154 = $153 >>> 4;
 $155 = (($152) + ($154<<2)|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $7;
 $158 = $157 & 15;
 $159 = $158 << 1;
 $160 = $156 >>> $159;
 $161 = $160 & 2;
 $162 = ($161|0)!=(0);
 do {
  if ($162) {
   $163 = $5;
   $164 = $4;
   $165 = ((($164)) + 20|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = $7;
   $168 = (($166) + ($167<<2)|0);
   HEAP32[$168>>2] = $163;
   $169 = $7;
   $170 = $169 & 15;
   $171 = $170 << 1;
   $172 = 3 << $171;
   $173 = $172 ^ -1;
   $174 = $4;
   $175 = ((($174)) + 16|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = $7;
   $178 = $177 >>> 4;
   $179 = (($176) + ($178<<2)|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $180 & $173;
   HEAP32[$179>>2] = $181;
   $182 = $4;
   $183 = ((($182)) + 4|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (($184) + 1)|0;
   HEAP32[$183>>2] = $185;
   $186 = $4;
   $187 = ((($186)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = (($188) + 1)|0;
   HEAP32[$187>>2] = $189;
   $190 = $6;
   HEAP32[$190>>2] = 1;
  } else {
   $191 = $4;
   $192 = ((($191)) + 16|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $7;
   $195 = $194 >>> 4;
   $196 = (($193) + ($195<<2)|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $7;
   $199 = $198 & 15;
   $200 = $199 << 1;
   $201 = $197 >>> $200;
   $202 = $201 & 1;
   $203 = ($202|0)!=(0);
   if ($203) {
    $204 = $5;
    $205 = $4;
    $206 = ((($205)) + 20|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = $7;
    $209 = (($207) + ($208<<2)|0);
    HEAP32[$209>>2] = $204;
    $210 = $7;
    $211 = $210 & 15;
    $212 = $211 << 1;
    $213 = 3 << $212;
    $214 = $213 ^ -1;
    $215 = $4;
    $216 = ((($215)) + 16|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = $7;
    $219 = $218 >>> 4;
    $220 = (($217) + ($219<<2)|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = $221 & $214;
    HEAP32[$220>>2] = $222;
    $223 = $4;
    $224 = ((($223)) + 4|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = (($225) + 1)|0;
    HEAP32[$224>>2] = $226;
    $227 = $6;
    HEAP32[$227>>2] = 2;
    break;
   } else {
    $228 = $6;
    HEAP32[$228>>2] = 0;
    break;
   }
  }
 } while(0);
 $229 = $7;
 $3 = $229;
 $230 = $3;
 STACKTOP = sp;return ($230|0);
}
function _kh_resize_s($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$sink = 0, $$sink3 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $10 = sp + 24|0;
 $16 = sp;
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = 1;
 $17 = $4;
 $18 = (($17) + -1)|0;
 $4 = $18;
 $19 = $4;
 $20 = $19 >>> 1;
 $21 = $4;
 $22 = $21 | $20;
 $4 = $22;
 $23 = $4;
 $24 = $23 >>> 2;
 $25 = $4;
 $26 = $25 | $24;
 $4 = $26;
 $27 = $4;
 $28 = $27 >>> 4;
 $29 = $4;
 $30 = $29 | $28;
 $4 = $30;
 $31 = $4;
 $32 = $31 >>> 8;
 $33 = $4;
 $34 = $33 | $32;
 $4 = $34;
 $35 = $4;
 $36 = $35 >>> 16;
 $37 = $4;
 $38 = $37 | $36;
 $4 = $38;
 $39 = $4;
 $40 = (($39) + 1)|0;
 $4 = $40;
 $41 = $4;
 $42 = ($41>>>0)<(4);
 $$ = $42 ? 4 : $40;
 $4 = $$;
 $43 = $3;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $4;
 $47 = (+($46>>>0));
 $48 = $47 * 0.77000000000000001;
 $49 = $48 + 0.5;
 $50 = (~~(($49))>>>0);
 $51 = ($45>>>0)>=($50>>>0);
 do {
  if ($51) {
   $6 = 0;
  } else {
   $52 = $4;
   $53 = ($52>>>0)<(16);
   $54 = $4;
   $55 = $54 >>> 4;
   $56 = $53 ? 1 : $55;
   $57 = $56<<2;
   $58 = (_malloc($57)|0);
   $5 = $58;
   $59 = $5;
   $60 = ($59|0)!=(0|0);
   if (!($60)) {
    $2 = -1;
    $274 = $2;
    STACKTOP = sp;return ($274|0);
   }
   $61 = $5;
   $62 = $4;
   $63 = ($62>>>0)<(16);
   $64 = $4;
   $65 = $64 >>> 4;
   $66 = $63 ? 1 : $65;
   $67 = $66<<2;
   _memset(($61|0),-86,($67|0))|0;
   $68 = $3;
   $69 = HEAP32[$68>>2]|0;
   $70 = $4;
   $71 = ($69>>>0)<($70>>>0);
   if ($71) {
    $72 = $3;
    $73 = ((($72)) + 20|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $4;
    $76 = $75<<2;
    $77 = (_realloc($74,$76)|0);
    $7 = $77;
    $78 = $7;
    $79 = ($78|0)!=(0|0);
    if (!($79)) {
     $80 = $5;
     _free($80);
     $2 = -1;
     $274 = $2;
     STACKTOP = sp;return ($274|0);
    }
    $81 = $7;
    $82 = $3;
    $83 = ((($82)) + 20|0);
    HEAP32[$83>>2] = $81;
    $84 = $3;
    $85 = ((($84)) + 24|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $4;
    $88 = ($87*24)|0;
    $89 = (_realloc($86,$88)|0);
    $8 = $89;
    $90 = $8;
    $91 = ($90|0)!=(0|0);
    if ($91) {
     $93 = $8;
     $94 = $3;
     $95 = ((($94)) + 24|0);
     HEAP32[$95>>2] = $93;
     break;
    }
    $92 = $5;
    _free($92);
    $2 = -1;
    $274 = $2;
    STACKTOP = sp;return ($274|0);
   }
  }
 } while(0);
 $96 = $6;
 $97 = ($96|0)!=(0);
 if ($97) {
  $6 = 0;
  while(1) {
   $98 = $6;
   $99 = $3;
   $100 = HEAP32[$99>>2]|0;
   $101 = ($98|0)!=($100|0);
   $102 = $3;
   if (!($101)) {
    break;
   }
   $103 = ((($102)) + 16|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $6;
   $106 = $105 >>> 4;
   $107 = (($104) + ($106<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $6;
   $110 = $109 & 15;
   $111 = $110 << 1;
   $112 = $108 >>> $111;
   $113 = $112 & 3;
   $114 = ($113|0)==(0);
   if ($114) {
    $115 = $3;
    $116 = ((($115)) + 20|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = $6;
    $119 = (($117) + ($118<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $9 = $120;
    $121 = $4;
    $122 = (($121) - 1)|0;
    $11 = $122;
    $123 = $3;
    $124 = ((($123)) + 24|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $6;
    $127 = (($125) + (($126*24)|0)|0);
    ;HEAP32[$10>>2]=HEAP32[$127>>2]|0;HEAP32[$10+4>>2]=HEAP32[$127+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$127+8>>2]|0;HEAP32[$10+12>>2]=HEAP32[$127+12>>2]|0;HEAP32[$10+16>>2]=HEAP32[$127+16>>2]|0;HEAP32[$10+20>>2]=HEAP32[$127+20>>2]|0;
    $128 = $6;
    $129 = $128 & 15;
    $130 = $129 << 1;
    $131 = 1 << $130;
    $132 = $3;
    $133 = ((($132)) + 16|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $6;
    $$sink = $135;$$sink3 = $131;$$sink4 = $134;
    while(1) {
     $136 = $$sink >>> 4;
     $137 = (($$sink4) + ($136<<2)|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = $138 | $$sink3;
     HEAP32[$137>>2] = $139;
     $14 = 0;
     $140 = $9;
     $141 = (___ac_X31_hash_string_925($140)|0);
     $12 = $141;
     $142 = $12;
     $143 = $11;
     $144 = $142 & $143;
     $13 = $144;
     while(1) {
      $145 = $5;
      $146 = $13;
      $147 = $146 >>> 4;
      $148 = (($145) + ($147<<2)|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = $13;
      $151 = $150 & 15;
      $152 = $151 << 1;
      $153 = $149 >>> $152;
      $154 = $153 & 2;
      $155 = ($154|0)!=(0);
      $156 = $155 ^ 1;
      $157 = $13;
      if (!($156)) {
       break;
      }
      $158 = $14;
      $159 = (($158) + 1)|0;
      $14 = $159;
      $160 = (($157) + ($159))|0;
      $161 = $11;
      $162 = $160 & $161;
      $13 = $162;
     }
     $163 = $157 & 15;
     $164 = $163 << 1;
     $165 = 2 << $164;
     $166 = $165 ^ -1;
     $167 = $5;
     $168 = $13;
     $169 = $168 >>> 4;
     $170 = (($167) + ($169<<2)|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = $171 & $166;
     HEAP32[$170>>2] = $172;
     $173 = $13;
     $174 = $3;
     $175 = HEAP32[$174>>2]|0;
     $176 = ($173>>>0)<($175>>>0);
     if (!($176)) {
      break;
     }
     $177 = $3;
     $178 = ((($177)) + 16|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = $13;
     $181 = $180 >>> 4;
     $182 = (($179) + ($181<<2)|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = $13;
     $185 = $184 & 15;
     $186 = $185 << 1;
     $187 = $183 >>> $186;
     $188 = $187 & 3;
     $189 = ($188|0)==(0);
     if (!($189)) {
      break;
     }
     $190 = $3;
     $191 = ((($190)) + 20|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = $13;
     $194 = (($192) + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $15 = $195;
     $196 = $9;
     $197 = $3;
     $198 = ((($197)) + 20|0);
     $199 = HEAP32[$198>>2]|0;
     $200 = $13;
     $201 = (($199) + ($200<<2)|0);
     HEAP32[$201>>2] = $196;
     $202 = $15;
     $9 = $202;
     $203 = $3;
     $204 = ((($203)) + 24|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = $13;
     $207 = (($205) + (($206*24)|0)|0);
     ;HEAP32[$16>>2]=HEAP32[$207>>2]|0;HEAP32[$16+4>>2]=HEAP32[$207+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$207+8>>2]|0;HEAP32[$16+12>>2]=HEAP32[$207+12>>2]|0;HEAP32[$16+16>>2]=HEAP32[$207+16>>2]|0;HEAP32[$16+20>>2]=HEAP32[$207+20>>2]|0;
     $208 = $3;
     $209 = ((($208)) + 24|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = $13;
     $212 = (($210) + (($211*24)|0)|0);
     ;HEAP32[$212>>2]=HEAP32[$10>>2]|0;HEAP32[$212+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$212+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$212+12>>2]=HEAP32[$10+12>>2]|0;HEAP32[$212+16>>2]=HEAP32[$10+16>>2]|0;HEAP32[$212+20>>2]=HEAP32[$10+20>>2]|0;
     ;HEAP32[$10>>2]=HEAP32[$16>>2]|0;HEAP32[$10+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$10+12>>2]=HEAP32[$16+12>>2]|0;HEAP32[$10+16>>2]=HEAP32[$16+16>>2]|0;HEAP32[$10+20>>2]=HEAP32[$16+20>>2]|0;
     $213 = $13;
     $214 = $213 & 15;
     $215 = $214 << 1;
     $216 = 1 << $215;
     $217 = $3;
     $218 = ((($217)) + 16|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = $13;
     $$sink = $220;$$sink3 = $216;$$sink4 = $219;
    }
    $221 = $9;
    $222 = $3;
    $223 = ((($222)) + 20|0);
    $224 = HEAP32[$223>>2]|0;
    $225 = $13;
    $226 = (($224) + ($225<<2)|0);
    HEAP32[$226>>2] = $221;
    $227 = $3;
    $228 = ((($227)) + 24|0);
    $229 = HEAP32[$228>>2]|0;
    $230 = $13;
    $231 = (($229) + (($230*24)|0)|0);
    ;HEAP32[$231>>2]=HEAP32[$10>>2]|0;HEAP32[$231+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$231+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$231+12>>2]=HEAP32[$10+12>>2]|0;HEAP32[$231+16>>2]=HEAP32[$10+16>>2]|0;HEAP32[$231+20>>2]=HEAP32[$10+20>>2]|0;
   }
   $232 = $6;
   $233 = (($232) + 1)|0;
   $6 = $233;
  }
  $234 = HEAP32[$102>>2]|0;
  $235 = $4;
  $236 = ($234>>>0)>($235>>>0);
  if ($236) {
   $237 = $3;
   $238 = ((($237)) + 20|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = $4;
   $241 = $240<<2;
   $242 = (_realloc($239,$241)|0);
   $243 = $3;
   $244 = ((($243)) + 20|0);
   HEAP32[$244>>2] = $242;
   $245 = $3;
   $246 = ((($245)) + 24|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = $4;
   $249 = ($248*24)|0;
   $250 = (_realloc($247,$249)|0);
   $251 = $3;
   $252 = ((($251)) + 24|0);
   HEAP32[$252>>2] = $250;
  }
  $253 = $3;
  $254 = ((($253)) + 16|0);
  $255 = HEAP32[$254>>2]|0;
  _free($255);
  $256 = $5;
  $257 = $3;
  $258 = ((($257)) + 16|0);
  HEAP32[$258>>2] = $256;
  $259 = $4;
  $260 = $3;
  HEAP32[$260>>2] = $259;
  $261 = $3;
  $262 = ((($261)) + 4|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = $3;
  $265 = ((($264)) + 8|0);
  HEAP32[$265>>2] = $263;
  $266 = $3;
  $267 = HEAP32[$266>>2]|0;
  $268 = (+($267>>>0));
  $269 = $268 * 0.77000000000000001;
  $270 = $269 + 0.5;
  $271 = (~~(($270))>>>0);
  $272 = $3;
  $273 = ((($272)) + 12|0);
  HEAP32[$273>>2] = $271;
 }
 $2 = 0;
 $274 = $2;
 STACKTOP = sp;return ($274|0);
}
function ___ac_X31_hash_string_925($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 << 24 >> 24;
 $2 = $5;
 $6 = $2;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 $8 = $1;
 $9 = ((($8)) + 1|0);
 $1 = $9;
 while(1) {
  $10 = $1;
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)!=(0);
  if (!($12)) {
   break;
  }
  $13 = $2;
  $14 = $13 << 5;
  $15 = $2;
  $16 = (($14) - ($15))|0;
  $17 = $1;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = (($16) + ($19))|0;
  $2 = $20;
  $21 = $1;
  $22 = ((($21)) + 1|0);
  $1 = $22;
 }
 $23 = $2;
 STACKTOP = sp;return ($23|0);
}
function _fai_save($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp + 24|0;
 $6 = sp;
 $2 = $0;
 $3 = $1;
 $5 = 0;
 while(1) {
  $7 = $5;
  $8 = $2;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $2;
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $2;
  $16 = ((($15)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $5;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_kh_get_s($14,$20)|0);
  $4 = $21;
  $22 = $2;
  $23 = ((($22)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 24|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $4;
  $28 = (($26) + (($27*24)|0)|0);
  ;HEAP32[$6>>2]=HEAP32[$28>>2]|0;HEAP32[$6+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$28+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$28+12>>2]|0;HEAP32[$6+16>>2]=HEAP32[$28+16>>2]|0;HEAP32[$6+20>>2]=HEAP32[$28+20>>2]|0;
  $29 = $3;
  $30 = $2;
  $31 = ((($30)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $5;
  $34 = (($32) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($6)) + 8|0);
  $37 = $36;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + 4)|0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($6)) + 16|0);
  $44 = $43;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($44) + 4)|0;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($6)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = HEAP32[$6>>2]|0;
  HEAP32[$vararg_buffer>>2] = $35;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $39;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  $53 = $vararg_ptr2;
  $54 = $53;
  HEAP32[$54>>2] = $46;
  $55 = (($53) + 4)|0;
  $56 = $55;
  HEAP32[$56>>2] = $49;
  $vararg_ptr3 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr3>>2] = $51;
  $vararg_ptr4 = ((($vararg_buffer)) + 20|0);
  HEAP32[$vararg_ptr4>>2] = $52;
  (_fprintf($29,17280,$vararg_buffer)|0);
  $57 = $5;
  $58 = (($57) + 1)|0;
  $5 = $58;
 }
 STACKTOP = sp;return;
}
function _kh_get_s($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $2 = 0;
  $86 = $2;
  STACKTOP = sp;return ($86|0);
 }
 $9 = 0;
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - 1)|0;
 $8 = $15;
 $16 = $4;
 $17 = (___ac_X31_hash_string_925($16)|0);
 $5 = $17;
 $18 = $5;
 $19 = $8;
 $20 = $18 & $19;
 $6 = $20;
 $21 = $6;
 $7 = $21;
 while(1) {
  $22 = $3;
  $23 = ((($22)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $6;
  $26 = $25 >>> 4;
  $27 = (($24) + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $6;
  $30 = $29 & 15;
  $31 = $30 << 1;
  $32 = $28 >>> $31;
  $33 = $32 & 2;
  $34 = ($33|0)!=(0);
  if ($34) {
   break;
  }
  $35 = $3;
  $36 = ((($35)) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $6;
  $39 = $38 >>> 4;
  $40 = (($37) + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $6;
  $43 = $42 & 15;
  $44 = $43 << 1;
  $45 = $41 >>> $44;
  $46 = $45 & 1;
  $47 = ($46|0)!=(0);
  if (!($47)) {
   $48 = $3;
   $49 = ((($48)) + 20|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $6;
   $52 = (($50) + ($51<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $4;
   $55 = (_strcmp($53,$54)|0);
   $56 = ($55|0)==(0);
   $57 = $56 ^ 1;
   if (!($57)) {
    break;
   }
  }
  $58 = $6;
  $59 = $9;
  $60 = (($59) + 1)|0;
  $9 = $60;
  $61 = (($58) + ($60))|0;
  $62 = $8;
  $63 = $61 & $62;
  $6 = $63;
  $64 = $6;
  $65 = $7;
  $66 = ($64|0)==($65|0);
  if ($66) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  $67 = $3;
  $68 = HEAP32[$67>>2]|0;
  $2 = $68;
  $86 = $2;
  STACKTOP = sp;return ($86|0);
 }
 $69 = $3;
 $70 = ((($69)) + 16|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $6;
 $73 = $72 >>> 4;
 $74 = (($71) + ($73<<2)|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $6;
 $77 = $76 & 15;
 $78 = $77 << 1;
 $79 = $75 >>> $78;
 $80 = $79 & 3;
 $81 = ($80|0)!=(0);
 if ($81) {
  $82 = $3;
  $83 = HEAP32[$82>>2]|0;
  $85 = $83;
 } else {
  $84 = $6;
  $85 = $84;
 }
 $2 = $85;
 $86 = $2;
 STACKTOP = sp;return ($86|0);
}
function _fai_build($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $7 = $2;
 $8 = (_strlen($7)|0);
 $9 = (($8) + 5)|0;
 $10 = (_calloc($9,1)|0);
 $3 = $10;
 $11 = $3;
 $12 = $2;
 HEAP32[$vararg_buffer>>2] = $12;
 (_sprintf($11,17298,$vararg_buffer)|0);
 $13 = $2;
 $14 = (_bgzf_open($13,17761)|0);
 $4 = $14;
 $15 = $4;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  $17 = HEAP32[2398]|0;
  $18 = $2;
  HEAP32[$vararg_buffer1>>2] = $18;
  (_fprintf($17,17305,$vararg_buffer1)|0);
  $19 = $3;
  _free($19);
  $1 = -1;
  $70 = $1;
  STACKTOP = sp;return ($70|0);
 }
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 >>> 29;
 $23 = $22 & 3;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $4;
  (_bgzf_index_build_init($25)|0);
 }
 $26 = $4;
 $27 = (_fai_build_core($26)|0);
 $6 = $27;
 $28 = $6;
 $29 = ($28|0)!=(0|0);
 $30 = $4;
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 >>> 29;
 $33 = $32 & 3;
 $34 = ($33|0)!=(0);
 if (!($29)) {
  if ($34) {
   $35 = $4;
   $36 = HEAP32[$35>>2]|0;
   $37 = $36 >>> 31;
   $38 = ($37|0)!=(0);
   if ($38) {
    $39 = HEAP32[2398]|0;
    (_fprintf($39,17349,$vararg_buffer4)|0);
   }
  }
  $40 = $4;
  (_bgzf_close($40)|0);
  $41 = $3;
  _free($41);
  $1 = -1;
  $70 = $1;
  STACKTOP = sp;return ($70|0);
 }
 if ($34) {
  $42 = $4;
  $43 = $2;
  $44 = (_bgzf_index_dump($42,$43,17408)|0);
  $45 = ($44|0)<(0);
  if ($45) {
   $46 = HEAP32[2398]|0;
   $47 = $2;
   HEAP32[$vararg_buffer6>>2] = $47;
   (_fprintf($46,17413,$vararg_buffer6)|0);
   $48 = $6;
   _fai_destroy($48);
   $49 = $3;
   _free($49);
   $1 = -1;
   $70 = $1;
   STACKTOP = sp;return ($70|0);
  }
 }
 $50 = $4;
 $51 = (_bgzf_close($50)|0);
 $52 = ($51|0)<(0);
 if ($52) {
  $53 = HEAP32[2398]|0;
  $54 = $2;
  HEAP32[$vararg_buffer9>>2] = $54;
  (_fprintf($53,17457,$vararg_buffer9)|0);
  $55 = $6;
  _fai_destroy($55);
  $56 = $3;
  _free($56);
  $1 = -1;
  $70 = $1;
  STACKTOP = sp;return ($70|0);
 }
 $57 = $3;
 $58 = (_fopen($57,17490)|0);
 $5 = $58;
 $59 = $5;
 $60 = ($59|0)!=(0|0);
 if ($60) {
  $65 = $6;
  $66 = $5;
  _fai_save($65,$66);
  $67 = $5;
  (_fclose($67)|0);
  $68 = $3;
  _free($68);
  $69 = $6;
  _fai_destroy($69);
  $1 = 0;
  $70 = $1;
  STACKTOP = sp;return ($70|0);
 } else {
  $61 = HEAP32[2398]|0;
  $62 = $3;
  HEAP32[$vararg_buffer12>>2] = $62;
  (_fprintf($61,17493,$vararg_buffer12)|0);
  $63 = $6;
  _fai_destroy($63);
  $64 = $3;
  _free($64);
  $1 = -1;
  $70 = $1;
  STACKTOP = sp;return ($70|0);
 }
 return (0)|0;
}
function __ZNSt3__23mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEEixERS7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(656|0);
 $18 = sp + 64|0;
 $21 = sp + 653|0;
 $24 = sp + 56|0;
 $27 = sp + 652|0;
 $51 = sp + 48|0;
 $54 = sp + 651|0;
 $57 = sp + 40|0;
 $60 = sp + 650|0;
 $92 = sp + 316|0;
 $93 = sp + 32|0;
 $96 = sp + 304|0;
 $97 = sp + 296|0;
 $98 = sp + 24|0;
 $101 = sp + 280|0;
 $102 = sp + 16|0;
 $105 = sp + 264|0;
 $114 = sp + 8|0;
 $117 = sp + 649|0;
 $120 = sp;
 $123 = sp + 648|0;
 $143 = sp + 128|0;
 $146 = sp + 116|0;
 $149 = sp + 104|0;
 $150 = sp + 92|0;
 $151 = sp + 88|0;
 $152 = sp + 76|0;
 $144 = $0;
 $145 = $1;
 $155 = $144;
 $156 = $145;
 $157 = (__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE12__find_equalIiEERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISG_EERKT_($155,$146,$156)|0);
 $147 = $157;
 $158 = $147;
 $159 = HEAP32[$158>>2]|0;
 $148 = $159;
 $160 = $147;
 $161 = HEAP32[$160>>2]|0;
 $141 = $143;
 $142 = -1;
 $162 = $141;
 HEAP32[$162>>2] = 0;
 $163 = HEAP32[$143>>2]|0;
 HEAP32[$149>>2] = $163;
 $140 = $149;
 $164 = ($161|0)==(0|0);
 if (!($164)) {
  $342 = $148;
  $343 = ((($342)) + 16|0);
  $344 = ((($343)) + 4|0);
  STACKTOP = sp;return ($344|0);
 }
 $165 = $145;
 __ZNSt3__23mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEE25__construct_node_with_keyERS7_($152,$155,$165);
 $106 = $152;
 $166 = $106;
 $103 = $105;
 $104 = $166;
 $167 = $103;
 $168 = $104;
 HEAP32[$167>>2] = $168;
 $169 = HEAP32[$105>>2]|0;
 HEAP32[$151>>2] = $169;
 ;HEAP8[$102>>0]=HEAP8[$151>>0]|0;HEAP8[$102+1>>0]=HEAP8[$151+1>>0]|0;HEAP8[$102+2>>0]=HEAP8[$151+2>>0]|0;HEAP8[$102+3>>0]=HEAP8[$151+3>>0]|0;
 $100 = $150;
 $170 = $100;
 $99 = $102;
 $171 = $99;
 $172 = HEAP32[$171>>2]|0;
 $81 = $172;
 $173 = $81;
 $80 = $173;
 $174 = $80;
 $79 = $174;
 $175 = $79;
 $176 = HEAP32[$175>>2]|0;
 $82 = $176;
 $78 = $173;
 $177 = $78;
 $77 = $177;
 $178 = $77;
 HEAP32[$178>>2] = 0;
 $179 = $82;
 $83 = $102;
 $180 = $83;
 $181 = HEAP32[$180>>2]|0;
 $86 = $181;
 $182 = $86;
 $85 = $182;
 $183 = $85;
 $84 = $183;
 $184 = $84;
 $185 = ((($184)) + 4|0);
 $87 = $185;
 $186 = $87;
 ;HEAP32[$101>>2]=HEAP32[$186>>2]|0;HEAP32[$101+4>>2]=HEAP32[$186+4>>2]|0;
 ;HEAP8[$98>>0]=HEAP8[$101>>0]|0;HEAP8[$98+1>>0]=HEAP8[$101+1>>0]|0;HEAP8[$98+2>>0]=HEAP8[$101+2>>0]|0;HEAP8[$98+3>>0]=HEAP8[$101+3>>0]|0;HEAP8[$98+4>>0]=HEAP8[$101+4>>0]|0;HEAP8[$98+5>>0]=HEAP8[$101+5>>0]|0;HEAP8[$98+6>>0]=HEAP8[$101+6>>0]|0;HEAP8[$98+7>>0]=HEAP8[$101+7>>0]|0;
 $95 = $170;
 HEAP32[$96>>2] = $179;
 $187 = $95;
 $94 = $96;
 $188 = $94;
 $189 = HEAP32[$188>>2]|0;
 $88 = $98;
 $190 = $88;
 ;HEAP32[$97>>2]=HEAP32[$190>>2]|0;HEAP32[$97+4>>2]=HEAP32[$190+4>>2]|0;
 ;HEAP8[$93>>0]=HEAP8[$97>>0]|0;HEAP8[$93+1>>0]=HEAP8[$97+1>>0]|0;HEAP8[$93+2>>0]=HEAP8[$97+2>>0]|0;HEAP8[$93+3>>0]=HEAP8[$97+3>>0]|0;HEAP8[$93+4>>0]=HEAP8[$97+4>>0]|0;HEAP8[$93+5>>0]=HEAP8[$97+5>>0]|0;HEAP8[$93+6>>0]=HEAP8[$97+6>>0]|0;HEAP8[$93+7>>0]=HEAP8[$97+7>>0]|0;
 $91 = $187;
 HEAP32[$92>>2] = $189;
 $191 = $91;
 $90 = $92;
 $192 = $90;
 $193 = HEAP32[$192>>2]|0;
 HEAP32[$191>>2] = $193;
 $194 = ((($191)) + 4|0);
 $89 = $93;
 $195 = $89;
 ;HEAP32[$194>>2]=HEAP32[$195>>2]|0;HEAP32[$194+4>>2]=HEAP32[$195+4>>2]|0;
 $43 = $152;
 $196 = $43;
 $40 = $196;
 $41 = 0;
 $197 = $40;
 $39 = $197;
 $198 = $39;
 $38 = $198;
 $199 = $38;
 $200 = HEAP32[$199>>2]|0;
 $42 = $200;
 $201 = $41;
 $14 = $197;
 $202 = $14;
 $13 = $202;
 $203 = $13;
 HEAP32[$203>>2] = $201;
 $204 = $42;
 $205 = ($204|0)!=(0|0);
 if ($205) {
  $12 = $197;
  $206 = $12;
  $11 = $206;
  $207 = $11;
  $208 = ((($207)) + 4|0);
  $209 = $42;
  $36 = $208;
  $37 = $209;
  $210 = $36;
  $211 = ((($210)) + 5|0);
  $212 = HEAP8[$211>>0]|0;
  $213 = $212&1;
  if ($213) {
   $214 = HEAP32[$210>>2]|0;
   $215 = $37;
   $216 = ((($215)) + 16|0);
   $217 = ((($216)) + 4|0);
   $35 = $217;
   $218 = $35;
   $25 = $214;
   $26 = $218;
   $219 = $25;
   $220 = $26;
   ;HEAP8[$24>>0]=HEAP8[$27>>0]|0;
   $22 = $219;
   $23 = $220;
  }
  $221 = ((($210)) + 4|0);
  $222 = HEAP8[$221>>0]|0;
  $223 = $222&1;
  if ($223) {
   $224 = HEAP32[$210>>2]|0;
   $225 = $37;
   $226 = ((($225)) + 16|0);
   $15 = $226;
   $227 = $15;
   $19 = $224;
   $20 = $227;
   $228 = $19;
   $229 = $20;
   ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
   $16 = $228;
   $17 = $229;
  }
  $230 = $37;
  $231 = ($230|0)!=(0|0);
  if ($231) {
   $232 = HEAP32[$210>>2]|0;
   $233 = $37;
   $32 = $232;
   $33 = $233;
   $34 = 1;
   $234 = $32;
   $235 = $33;
   $236 = $34;
   $29 = $234;
   $30 = $235;
   $31 = $236;
   $237 = $30;
   $28 = $237;
   $238 = $28;
   __ZdlPv($238);
  }
 }
 $239 = HEAP32[$146>>2]|0;
 $240 = $147;
 $10 = $150;
 $241 = $10;
 $9 = $241;
 $242 = $9;
 $8 = $242;
 $243 = $8;
 $244 = HEAP32[$243>>2]|0;
 __THREW__ = 0;
 invoke_viiii(52,($155|0),($239|0),($240|0),($244|0));
 $245 = __THREW__; __THREW__ = 0;
 $246 = $245&1;
 if ($246) {
  $297 = ___cxa_find_matching_catch_2()|0;
  $298 = tempRet0;
  $153 = $297;
  $154 = $298;
  $139 = $150;
  $299 = $139;
  $136 = $299;
  $137 = 0;
  $300 = $136;
  $135 = $300;
  $301 = $135;
  $134 = $301;
  $302 = $134;
  $303 = HEAP32[$302>>2]|0;
  $138 = $303;
  $304 = $137;
  $110 = $300;
  $305 = $110;
  $109 = $305;
  $306 = $109;
  HEAP32[$306>>2] = $304;
  $307 = $138;
  $308 = ($307|0)!=(0|0);
  if (!($308)) {
   $345 = $153;
   $346 = $154;
   ___resumeException($345|0);
   // unreachable;
  }
  $108 = $300;
  $309 = $108;
  $107 = $309;
  $310 = $107;
  $311 = ((($310)) + 4|0);
  $312 = $138;
  $132 = $311;
  $133 = $312;
  $313 = $132;
  $314 = ((($313)) + 5|0);
  $315 = HEAP8[$314>>0]|0;
  $316 = $315&1;
  if ($316) {
   $317 = HEAP32[$313>>2]|0;
   $318 = $133;
   $319 = ((($318)) + 16|0);
   $320 = ((($319)) + 4|0);
   $131 = $320;
   $321 = $131;
   $121 = $317;
   $122 = $321;
   $322 = $121;
   $323 = $122;
   ;HEAP8[$120>>0]=HEAP8[$123>>0]|0;
   $118 = $322;
   $119 = $323;
  }
  $324 = ((($313)) + 4|0);
  $325 = HEAP8[$324>>0]|0;
  $326 = $325&1;
  if ($326) {
   $327 = HEAP32[$313>>2]|0;
   $328 = $133;
   $329 = ((($328)) + 16|0);
   $111 = $329;
   $330 = $111;
   $115 = $327;
   $116 = $330;
   $331 = $115;
   $332 = $116;
   ;HEAP8[$114>>0]=HEAP8[$117>>0]|0;
   $112 = $331;
   $113 = $332;
  }
  $333 = $133;
  $334 = ($333|0)!=(0|0);
  if (!($334)) {
   $345 = $153;
   $346 = $154;
   ___resumeException($345|0);
   // unreachable;
  }
  $335 = HEAP32[$313>>2]|0;
  $336 = $133;
  $128 = $335;
  $129 = $336;
  $130 = 1;
  $337 = $128;
  $338 = $129;
  $339 = $130;
  $125 = $337;
  $126 = $338;
  $127 = $339;
  $340 = $126;
  $124 = $340;
  $341 = $124;
  __ZdlPv($341);
  $345 = $153;
  $346 = $154;
  ___resumeException($345|0);
  // unreachable;
 } else {
  $6 = $150;
  $247 = $6;
  $5 = $247;
  $248 = $5;
  $4 = $248;
  $249 = $4;
  $250 = HEAP32[$249>>2]|0;
  $7 = $250;
  $3 = $247;
  $251 = $3;
  $2 = $251;
  $252 = $2;
  HEAP32[$252>>2] = 0;
  $253 = $7;
  $148 = $253;
  $76 = $150;
  $254 = $76;
  $73 = $254;
  $74 = 0;
  $255 = $73;
  $72 = $255;
  $256 = $72;
  $71 = $256;
  $257 = $71;
  $258 = HEAP32[$257>>2]|0;
  $75 = $258;
  $259 = $74;
  $47 = $255;
  $260 = $47;
  $46 = $260;
  $261 = $46;
  HEAP32[$261>>2] = $259;
  $262 = $75;
  $263 = ($262|0)!=(0|0);
  if (!($263)) {
   $342 = $148;
   $343 = ((($342)) + 16|0);
   $344 = ((($343)) + 4|0);
   STACKTOP = sp;return ($344|0);
  }
  $45 = $255;
  $264 = $45;
  $44 = $264;
  $265 = $44;
  $266 = ((($265)) + 4|0);
  $267 = $75;
  $69 = $266;
  $70 = $267;
  $268 = $69;
  $269 = ((($268)) + 5|0);
  $270 = HEAP8[$269>>0]|0;
  $271 = $270&1;
  if ($271) {
   $272 = HEAP32[$268>>2]|0;
   $273 = $70;
   $274 = ((($273)) + 16|0);
   $275 = ((($274)) + 4|0);
   $68 = $275;
   $276 = $68;
   $58 = $272;
   $59 = $276;
   $277 = $58;
   $278 = $59;
   ;HEAP8[$57>>0]=HEAP8[$60>>0]|0;
   $55 = $277;
   $56 = $278;
  }
  $279 = ((($268)) + 4|0);
  $280 = HEAP8[$279>>0]|0;
  $281 = $280&1;
  if ($281) {
   $282 = HEAP32[$268>>2]|0;
   $283 = $70;
   $284 = ((($283)) + 16|0);
   $48 = $284;
   $285 = $48;
   $52 = $282;
   $53 = $285;
   $286 = $52;
   $287 = $53;
   ;HEAP8[$51>>0]=HEAP8[$54>>0]|0;
   $49 = $286;
   $50 = $287;
  }
  $288 = $70;
  $289 = ($288|0)!=(0|0);
  if (!($289)) {
   $342 = $148;
   $343 = ((($342)) + 16|0);
   $344 = ((($343)) + 4|0);
   STACKTOP = sp;return ($344|0);
  }
  $290 = HEAP32[$268>>2]|0;
  $291 = $70;
  $65 = $290;
  $66 = $291;
  $67 = 1;
  $292 = $65;
  $293 = $66;
  $294 = $67;
  $62 = $292;
  $63 = $293;
  $64 = $294;
  $295 = $63;
  $61 = $295;
  $296 = $61;
  __ZdlPv($296);
  $342 = $148;
  $343 = ((($342)) + 16|0);
  $344 = ((($343)) + 4|0);
  STACKTOP = sp;return ($344|0);
 }
 return (0)|0;
}
function __ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE12__find_equalIiEERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISG_EERKT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $5 = sp + 196|0;
 $18 = sp + 144|0;
 $32 = sp + 88|0;
 $52 = sp + 8|0;
 $53 = sp + 4|0;
 $54 = sp;
 $47 = $0;
 $48 = $1;
 $49 = $2;
 $55 = $47;
 $45 = $55;
 $56 = $45;
 $44 = $56;
 $57 = $44;
 $58 = ((($57)) + 4|0);
 $43 = $58;
 $59 = $43;
 $42 = $59;
 $60 = $42;
 $41 = $60;
 $61 = $41;
 $40 = $61;
 $62 = $40;
 $63 = HEAP32[$62>>2]|0;
 $50 = $63;
 $64 = (__ZNKSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE10__root_ptrEv($55)|0);
 $51 = $64;
 $65 = $50;
 $3 = $5;
 $4 = -1;
 $66 = $3;
 HEAP32[$66>>2] = 0;
 $67 = HEAP32[$5>>2]|0;
 HEAP32[$52>>2] = $67;
 $6 = $52;
 $68 = ($65|0)!=(0|0);
 if (!($68)) {
  $39 = $55;
  $128 = $39;
  $129 = ((($128)) + 4|0);
  $38 = $129;
  $130 = $38;
  $37 = $130;
  $131 = $37;
  $36 = $131;
  $132 = $36;
  $35 = $132;
  $133 = $35;
  $134 = $48;
  HEAP32[$134>>2] = $133;
  $135 = $48;
  $136 = HEAP32[$135>>2]|0;
  $46 = $136;
  $137 = $46;
  STACKTOP = sp;return ($137|0);
 }
 while(1) {
  $9 = $55;
  $69 = $9;
  $70 = ((($69)) + 8|0);
  $8 = $70;
  $71 = $8;
  $7 = $71;
  $72 = $7;
  $73 = $49;
  $74 = $50;
  $75 = ((($74)) + 16|0);
  $13 = $72;
  $14 = $73;
  $15 = $75;
  $76 = $13;
  $77 = $14;
  $78 = $15;
  $10 = $76;
  $11 = $77;
  $12 = $78;
  $79 = $11;
  $80 = HEAP32[$79>>2]|0;
  $81 = $12;
  $82 = HEAP32[$81>>2]|0;
  $83 = ($80|0)<($82|0);
  if ($83) {
   $84 = $50;
   $85 = HEAP32[$84>>2]|0;
   $16 = $18;
   $17 = -1;
   $86 = $16;
   HEAP32[$86>>2] = 0;
   $87 = HEAP32[$18>>2]|0;
   HEAP32[$53>>2] = $87;
   $19 = $53;
   $88 = ($85|0)!=(0|0);
   $89 = $50;
   if (!($88)) {
    label = 5;
    break;
   }
   $20 = $89;
   $90 = $20;
   $51 = $90;
   $91 = $50;
   $92 = HEAP32[$91>>2]|0;
   $50 = $92;
   continue;
  }
  $23 = $55;
  $96 = $23;
  $97 = ((($96)) + 8|0);
  $22 = $97;
  $98 = $22;
  $21 = $98;
  $99 = $21;
  $100 = $50;
  $101 = ((($100)) + 16|0);
  $102 = $49;
  $27 = $99;
  $28 = $101;
  $29 = $102;
  $103 = $27;
  $104 = $28;
  $105 = $29;
  $24 = $103;
  $25 = $104;
  $26 = $105;
  $106 = $25;
  $107 = HEAP32[$106>>2]|0;
  $108 = $26;
  $109 = HEAP32[$108>>2]|0;
  $110 = ($107|0)<($109|0);
  $111 = $50;
  if (!($110)) {
   label = 10;
   break;
  }
  $112 = ((($111)) + 4|0);
  $113 = HEAP32[$112>>2]|0;
  $30 = $32;
  $31 = -1;
  $114 = $30;
  HEAP32[$114>>2] = 0;
  $115 = HEAP32[$32>>2]|0;
  HEAP32[$54>>2] = $115;
  $33 = $54;
  $116 = ($113|0)!=(0|0);
  $117 = $50;
  if (!($116)) {
   label = 9;
   break;
  }
  $118 = ((($117)) + 4|0);
  $34 = $118;
  $119 = $34;
  $51 = $119;
  $120 = $50;
  $121 = ((($120)) + 4|0);
  $122 = HEAP32[$121>>2]|0;
  $50 = $122;
 }
 if ((label|0) == 5) {
  $93 = $48;
  HEAP32[$93>>2] = $89;
  $94 = $48;
  $95 = HEAP32[$94>>2]|0;
  $46 = $95;
  $137 = $46;
  STACKTOP = sp;return ($137|0);
 }
 else if ((label|0) == 9) {
  $123 = $48;
  HEAP32[$123>>2] = $117;
  $124 = $50;
  $125 = ((($124)) + 4|0);
  $46 = $125;
  $137 = $46;
  STACKTOP = sp;return ($137|0);
 }
 else if ((label|0) == 10) {
  $126 = $48;
  HEAP32[$126>>2] = $111;
  $127 = $51;
  $46 = $127;
  $137 = $46;
  STACKTOP = sp;return ($137|0);
 }
 return (0)|0;
}
function __ZNSt3__23mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEE25__construct_node_with_keyERS7_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1136|0);
 $21 = sp + 1052|0;
 $22 = sp + 136|0;
 $25 = sp + 1040|0;
 $26 = sp + 1032|0;
 $27 = sp + 128|0;
 $30 = sp + 1016|0;
 $31 = sp + 120|0;
 $39 = sp + 112|0;
 $42 = sp + 1133|0;
 $45 = sp + 104|0;
 $48 = sp + 1132|0;
 $67 = sp + 888|0;
 $84 = sp + 820|0;
 $85 = sp + 96|0;
 $88 = sp + 808|0;
 $89 = sp + 800|0;
 $90 = sp + 88|0;
 $93 = sp + 784|0;
 $94 = sp + 80|0;
 $98 = sp + 764|0;
 $99 = sp + 752|0;
 $100 = sp + 748|0;
 $103 = sp + 736|0;
 $120 = sp + 668|0;
 $121 = sp + 72|0;
 $124 = sp + 656|0;
 $125 = sp + 648|0;
 $126 = sp + 64|0;
 $129 = sp + 632|0;
 $130 = sp + 56|0;
 $140 = sp + 48|0;
 $143 = sp + 1131|0;
 $146 = sp + 40|0;
 $149 = sp + 1130|0;
 $174 = sp + 32|0;
 $177 = sp + 1129|0;
 $180 = sp + 24|0;
 $183 = sp + 1128|0;
 $218 = sp + 308|0;
 $219 = sp + 16|0;
 $222 = sp + 296|0;
 $223 = sp + 288|0;
 $224 = sp + 8|0;
 $227 = sp + 272|0;
 $228 = sp + 264|0;
 $229 = sp;
 $250 = sp + 168|0;
 $251 = sp + 160|0;
 $252 = sp + 156|0;
 $253 = sp + 144|0;
 $247 = $1;
 $248 = $2;
 $254 = $247;
 $246 = $254;
 $255 = $246;
 $256 = ((($255)) + 4|0);
 $245 = $256;
 $257 = $245;
 $244 = $257;
 $258 = $244;
 $249 = $258;
 $259 = $249;
 $242 = $259;
 $243 = 1;
 $260 = $242;
 $261 = $243;
 $239 = $260;
 $240 = $261;
 $241 = 0;
 $262 = $239;
 $263 = $240;
 $238 = $262;
 $264 = ($263>>>0)>(178956970);
 if ($264) {
  $234 = 17535;
  $265 = (___cxa_allocate_exception(8)|0);
  $266 = $234;
  $232 = $265;
  $233 = $266;
  $267 = $232;
  $268 = $233;
  __THREW__ = 0;
  invoke_vii(53,($267|0),($268|0));
  $269 = __THREW__; __THREW__ = 0;
  $270 = $269&1;
  if ($270) {
   $271 = ___cxa_find_matching_catch_2()|0;
   $272 = tempRet0;
   $235 = $271;
   $236 = $272;
   ___cxa_free_exception(($265|0));
   $273 = $235;
   $274 = $236;
   ___resumeException($273|0);
   // unreachable;
  } else {
   HEAP32[$267>>2] = (10148);
   ___cxa_throw(($265|0),(104|0),(45|0));
   // unreachable;
  }
 }
 $275 = $240;
 $276 = ($275*24)|0;
 $237 = $276;
 $277 = $237;
 $278 = (__Znwj($277)|0);
 $279 = $249;
 $230 = $251;
 $231 = $279;
 $280 = $230;
 $281 = $231;
 HEAP32[$280>>2] = $281;
 $282 = ((($280)) + 4|0);
 HEAP8[$282>>0] = 0;
 $283 = ((($280)) + 5|0);
 HEAP8[$283>>0] = 0;
 ;HEAP8[$229>>0]=HEAP8[$251>>0]|0;HEAP8[$229+1>>0]=HEAP8[$251+1>>0]|0;HEAP8[$229+2>>0]=HEAP8[$251+2>>0]|0;HEAP8[$229+3>>0]=HEAP8[$251+3>>0]|0;HEAP8[$229+4>>0]=HEAP8[$251+4>>0]|0;HEAP8[$229+5>>0]=HEAP8[$251+5>>0]|0;HEAP8[$229+6>>0]=HEAP8[$251+6>>0]|0;HEAP8[$229+7>>0]=HEAP8[$251+7>>0]|0;
 $226 = $250;
 HEAP32[$227>>2] = $278;
 $284 = $226;
 $225 = $227;
 $285 = $225;
 $286 = HEAP32[$285>>2]|0;
 $213 = $229;
 $287 = $213;
 ;HEAP32[$228>>2]=HEAP32[$287>>2]|0;HEAP32[$228+4>>2]=HEAP32[$287+4>>2]|0;
 ;HEAP8[$224>>0]=HEAP8[$228>>0]|0;HEAP8[$224+1>>0]=HEAP8[$228+1>>0]|0;HEAP8[$224+2>>0]=HEAP8[$228+2>>0]|0;HEAP8[$224+3>>0]=HEAP8[$228+3>>0]|0;HEAP8[$224+4>>0]=HEAP8[$228+4>>0]|0;HEAP8[$224+5>>0]=HEAP8[$228+5>>0]|0;HEAP8[$224+6>>0]=HEAP8[$228+6>>0]|0;HEAP8[$224+7>>0]=HEAP8[$228+7>>0]|0;
 $221 = $284;
 HEAP32[$222>>2] = $286;
 $288 = $221;
 $220 = $222;
 $289 = $220;
 $290 = HEAP32[$289>>2]|0;
 $214 = $224;
 $291 = $214;
 ;HEAP32[$223>>2]=HEAP32[$291>>2]|0;HEAP32[$223+4>>2]=HEAP32[$291+4>>2]|0;
 ;HEAP8[$219>>0]=HEAP8[$223>>0]|0;HEAP8[$219+1>>0]=HEAP8[$223+1>>0]|0;HEAP8[$219+2>>0]=HEAP8[$223+2>>0]|0;HEAP8[$219+3>>0]=HEAP8[$223+3>>0]|0;HEAP8[$219+4>>0]=HEAP8[$223+4>>0]|0;HEAP8[$219+5>>0]=HEAP8[$223+5>>0]|0;HEAP8[$219+6>>0]=HEAP8[$223+6>>0]|0;HEAP8[$219+7>>0]=HEAP8[$223+7>>0]|0;
 $217 = $288;
 HEAP32[$218>>2] = $290;
 $292 = $217;
 $216 = $218;
 $293 = $216;
 $294 = HEAP32[$293>>2]|0;
 HEAP32[$292>>2] = $294;
 $295 = ((($292)) + 4|0);
 $215 = $219;
 $296 = $215;
 ;HEAP32[$295>>2]=HEAP32[$296>>2]|0;HEAP32[$295+4>>2]=HEAP32[$296+4>>2]|0;
 $297 = $249;
 $212 = $250;
 $298 = $212;
 $211 = $298;
 $299 = $211;
 $210 = $299;
 $300 = $210;
 $301 = HEAP32[$300>>2]|0;
 $302 = ((($301)) + 16|0);
 $209 = $302;
 $303 = $209;
 $304 = $248;
 $206 = $297;
 $207 = $303;
 $208 = $304;
 $305 = $207;
 $306 = $208;
 $307 = HEAP32[$306>>2]|0;
 HEAP32[$305>>2] = $307;
 $205 = $250;
 $308 = $205;
 $204 = $308;
 $309 = $204;
 $203 = $309;
 $310 = $203;
 $311 = ((($310)) + 4|0);
 $312 = ((($311)) + 4|0);
 HEAP8[$312>>0] = 1;
 $313 = $249;
 $202 = $250;
 $314 = $202;
 $201 = $314;
 $315 = $201;
 $200 = $315;
 $316 = $200;
 $317 = HEAP32[$316>>2]|0;
 $318 = ((($317)) + 16|0);
 $319 = ((($318)) + 4|0);
 $166 = $319;
 $320 = $166;
 $131 = $313;
 $132 = $320;
 $321 = $132;
 HEAP32[$321>>2] = 0;
 $5 = $250;
 $322 = $5;
 $4 = $322;
 $323 = $4;
 $3 = $323;
 $324 = $3;
 $325 = ((($324)) + 4|0);
 $326 = ((($325)) + 5|0);
 HEAP8[$326>>0] = 1;
 $97 = $250;
 $327 = $97;
 $95 = $100;
 $96 = $327;
 $328 = $95;
 $329 = $96;
 HEAP32[$328>>2] = $329;
 ;HEAP8[$94>>0]=HEAP8[$100>>0]|0;HEAP8[$94+1>>0]=HEAP8[$100+1>>0]|0;HEAP8[$94+2>>0]=HEAP8[$100+2>>0]|0;HEAP8[$94+3>>0]=HEAP8[$100+3>>0]|0;
 $92 = $99;
 $330 = $92;
 $91 = $94;
 $331 = $91;
 $332 = HEAP32[$331>>2]|0;
 $73 = $332;
 $333 = $73;
 $72 = $333;
 $334 = $72;
 $71 = $334;
 $335 = $71;
 $336 = HEAP32[$335>>2]|0;
 $74 = $336;
 $70 = $333;
 $337 = $70;
 $69 = $337;
 $338 = $69;
 HEAP32[$338>>2] = 0;
 $339 = $74;
 $75 = $94;
 $340 = $75;
 $341 = HEAP32[$340>>2]|0;
 $78 = $341;
 $342 = $78;
 $77 = $342;
 $343 = $77;
 $76 = $343;
 $344 = $76;
 $345 = ((($344)) + 4|0);
 $79 = $345;
 $346 = $79;
 ;HEAP32[$93>>2]=HEAP32[$346>>2]|0;HEAP32[$93+4>>2]=HEAP32[$346+4>>2]|0;
 ;HEAP8[$90>>0]=HEAP8[$93>>0]|0;HEAP8[$90+1>>0]=HEAP8[$93+1>>0]|0;HEAP8[$90+2>>0]=HEAP8[$93+2>>0]|0;HEAP8[$90+3>>0]=HEAP8[$93+3>>0]|0;HEAP8[$90+4>>0]=HEAP8[$93+4>>0]|0;HEAP8[$90+5>>0]=HEAP8[$93+5>>0]|0;HEAP8[$90+6>>0]=HEAP8[$93+6>>0]|0;HEAP8[$90+7>>0]=HEAP8[$93+7>>0]|0;
 $87 = $330;
 HEAP32[$88>>2] = $339;
 $347 = $87;
 $86 = $88;
 $348 = $86;
 $349 = HEAP32[$348>>2]|0;
 $80 = $90;
 $350 = $80;
 ;HEAP32[$89>>2]=HEAP32[$350>>2]|0;HEAP32[$89+4>>2]=HEAP32[$350+4>>2]|0;
 ;HEAP8[$85>>0]=HEAP8[$89>>0]|0;HEAP8[$85+1>>0]=HEAP8[$89+1>>0]|0;HEAP8[$85+2>>0]=HEAP8[$89+2>>0]|0;HEAP8[$85+3>>0]=HEAP8[$89+3>>0]|0;HEAP8[$85+4>>0]=HEAP8[$89+4>>0]|0;HEAP8[$85+5>>0]=HEAP8[$89+5>>0]|0;HEAP8[$85+6>>0]=HEAP8[$89+6>>0]|0;HEAP8[$85+7>>0]=HEAP8[$89+7>>0]|0;
 $83 = $347;
 HEAP32[$84>>2] = $349;
 $351 = $83;
 $82 = $84;
 $352 = $82;
 $353 = HEAP32[$352>>2]|0;
 HEAP32[$351>>2] = $353;
 $354 = ((($351)) + 4|0);
 $81 = $85;
 $355 = $81;
 ;HEAP32[$354>>2]=HEAP32[$355>>2]|0;HEAP32[$354+4>>2]=HEAP32[$355+4>>2]|0;
 $68 = $99;
 $356 = $68;
 $65 = $67;
 $66 = $356;
 $357 = $65;
 $358 = $66;
 HEAP32[$357>>2] = $358;
 $359 = HEAP32[$67>>2]|0;
 HEAP32[$98>>2] = $359;
 ;HEAP8[$31>>0]=HEAP8[$98>>0]|0;HEAP8[$31+1>>0]=HEAP8[$98+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$98+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$98+3>>0]|0;
 $29 = $253;
 $360 = $29;
 $28 = $31;
 $361 = $28;
 $362 = HEAP32[$361>>2]|0;
 $10 = $362;
 $363 = $10;
 $9 = $363;
 $364 = $9;
 $8 = $364;
 $365 = $8;
 $366 = HEAP32[$365>>2]|0;
 $11 = $366;
 $7 = $363;
 $367 = $7;
 $6 = $367;
 $368 = $6;
 HEAP32[$368>>2] = 0;
 $369 = $11;
 $12 = $31;
 $370 = $12;
 $371 = HEAP32[$370>>2]|0;
 $15 = $371;
 $372 = $15;
 $14 = $372;
 $373 = $14;
 $13 = $373;
 $374 = $13;
 $375 = ((($374)) + 4|0);
 $16 = $375;
 $376 = $16;
 ;HEAP32[$30>>2]=HEAP32[$376>>2]|0;HEAP32[$30+4>>2]=HEAP32[$376+4>>2]|0;
 ;HEAP8[$27>>0]=HEAP8[$30>>0]|0;HEAP8[$27+1>>0]=HEAP8[$30+1>>0]|0;HEAP8[$27+2>>0]=HEAP8[$30+2>>0]|0;HEAP8[$27+3>>0]=HEAP8[$30+3>>0]|0;HEAP8[$27+4>>0]=HEAP8[$30+4>>0]|0;HEAP8[$27+5>>0]=HEAP8[$30+5>>0]|0;HEAP8[$27+6>>0]=HEAP8[$30+6>>0]|0;HEAP8[$27+7>>0]=HEAP8[$30+7>>0]|0;
 $24 = $360;
 HEAP32[$25>>2] = $369;
 $377 = $24;
 $23 = $25;
 $378 = $23;
 $379 = HEAP32[$378>>2]|0;
 $17 = $27;
 $380 = $17;
 ;HEAP32[$26>>2]=HEAP32[$380>>2]|0;HEAP32[$26+4>>2]=HEAP32[$380+4>>2]|0;
 ;HEAP8[$22>>0]=HEAP8[$26>>0]|0;HEAP8[$22+1>>0]=HEAP8[$26+1>>0]|0;HEAP8[$22+2>>0]=HEAP8[$26+2>>0]|0;HEAP8[$22+3>>0]=HEAP8[$26+3>>0]|0;HEAP8[$22+4>>0]=HEAP8[$26+4>>0]|0;HEAP8[$22+5>>0]=HEAP8[$26+5>>0]|0;HEAP8[$22+6>>0]=HEAP8[$26+6>>0]|0;HEAP8[$22+7>>0]=HEAP8[$26+7>>0]|0;
 $20 = $377;
 HEAP32[$21>>2] = $379;
 $381 = $20;
 $19 = $21;
 $382 = $19;
 $383 = HEAP32[$382>>2]|0;
 HEAP32[$381>>2] = $383;
 $384 = ((($381)) + 4|0);
 $18 = $22;
 $385 = $18;
 ;HEAP32[$384>>2]=HEAP32[$385>>2]|0;HEAP32[$384+4>>2]=HEAP32[$385+4>>2]|0;
 $64 = $99;
 $386 = $64;
 $61 = $386;
 $62 = 0;
 $387 = $61;
 $60 = $387;
 $388 = $60;
 $59 = $388;
 $389 = $59;
 $390 = HEAP32[$389>>2]|0;
 $63 = $390;
 $391 = $62;
 $35 = $387;
 $392 = $35;
 $34 = $392;
 $393 = $34;
 HEAP32[$393>>2] = $391;
 $394 = $63;
 $395 = ($394|0)!=(0|0);
 if ($395) {
  $33 = $387;
  $396 = $33;
  $32 = $396;
  $397 = $32;
  $398 = ((($397)) + 4|0);
  $399 = $63;
  $57 = $398;
  $58 = $399;
  $400 = $57;
  $401 = ((($400)) + 5|0);
  $402 = HEAP8[$401>>0]|0;
  $403 = $402&1;
  if ($403) {
   $404 = HEAP32[$400>>2]|0;
   $405 = $58;
   $406 = ((($405)) + 16|0);
   $407 = ((($406)) + 4|0);
   $56 = $407;
   $408 = $56;
   $46 = $404;
   $47 = $408;
   $409 = $46;
   $410 = $47;
   ;HEAP8[$45>>0]=HEAP8[$48>>0]|0;
   $43 = $409;
   $44 = $410;
  }
  $411 = ((($400)) + 4|0);
  $412 = HEAP8[$411>>0]|0;
  $413 = $412&1;
  if ($413) {
   $414 = HEAP32[$400>>2]|0;
   $415 = $58;
   $416 = ((($415)) + 16|0);
   $36 = $416;
   $417 = $36;
   $40 = $414;
   $41 = $417;
   $418 = $40;
   $419 = $41;
   ;HEAP8[$39>>0]=HEAP8[$42>>0]|0;
   $37 = $418;
   $38 = $419;
  }
  $420 = $58;
  $421 = ($420|0)!=(0|0);
  if ($421) {
   $422 = HEAP32[$400>>2]|0;
   $423 = $58;
   $53 = $422;
   $54 = $423;
   $55 = 1;
   $424 = $53;
   $425 = $54;
   $426 = $55;
   $50 = $424;
   $51 = $425;
   $52 = $426;
   $427 = $51;
   $49 = $427;
   $428 = $49;
   __ZdlPv($428);
  }
 }
 $104 = $253;
 $429 = $104;
 $101 = $103;
 $102 = $429;
 $430 = $101;
 $431 = $102;
 HEAP32[$430>>2] = $431;
 $432 = HEAP32[$103>>2]|0;
 HEAP32[$252>>2] = $432;
 ;HEAP8[$130>>0]=HEAP8[$252>>0]|0;HEAP8[$130+1>>0]=HEAP8[$252+1>>0]|0;HEAP8[$130+2>>0]=HEAP8[$252+2>>0]|0;HEAP8[$130+3>>0]=HEAP8[$252+3>>0]|0;
 $128 = $0;
 $433 = $128;
 $127 = $130;
 $434 = $127;
 $435 = HEAP32[$434>>2]|0;
 $109 = $435;
 $436 = $109;
 $108 = $436;
 $437 = $108;
 $107 = $437;
 $438 = $107;
 $439 = HEAP32[$438>>2]|0;
 $110 = $439;
 $106 = $436;
 $440 = $106;
 $105 = $440;
 $441 = $105;
 HEAP32[$441>>2] = 0;
 $442 = $110;
 $111 = $130;
 $443 = $111;
 $444 = HEAP32[$443>>2]|0;
 $114 = $444;
 $445 = $114;
 $113 = $445;
 $446 = $113;
 $112 = $446;
 $447 = $112;
 $448 = ((($447)) + 4|0);
 $115 = $448;
 $449 = $115;
 ;HEAP32[$129>>2]=HEAP32[$449>>2]|0;HEAP32[$129+4>>2]=HEAP32[$449+4>>2]|0;
 ;HEAP8[$126>>0]=HEAP8[$129>>0]|0;HEAP8[$126+1>>0]=HEAP8[$129+1>>0]|0;HEAP8[$126+2>>0]=HEAP8[$129+2>>0]|0;HEAP8[$126+3>>0]=HEAP8[$129+3>>0]|0;HEAP8[$126+4>>0]=HEAP8[$129+4>>0]|0;HEAP8[$126+5>>0]=HEAP8[$129+5>>0]|0;HEAP8[$126+6>>0]=HEAP8[$129+6>>0]|0;HEAP8[$126+7>>0]=HEAP8[$129+7>>0]|0;
 $123 = $433;
 HEAP32[$124>>2] = $442;
 $450 = $123;
 $122 = $124;
 $451 = $122;
 $452 = HEAP32[$451>>2]|0;
 $116 = $126;
 $453 = $116;
 ;HEAP32[$125>>2]=HEAP32[$453>>2]|0;HEAP32[$125+4>>2]=HEAP32[$453+4>>2]|0;
 ;HEAP8[$121>>0]=HEAP8[$125>>0]|0;HEAP8[$121+1>>0]=HEAP8[$125+1>>0]|0;HEAP8[$121+2>>0]=HEAP8[$125+2>>0]|0;HEAP8[$121+3>>0]=HEAP8[$125+3>>0]|0;HEAP8[$121+4>>0]=HEAP8[$125+4>>0]|0;HEAP8[$121+5>>0]=HEAP8[$125+5>>0]|0;HEAP8[$121+6>>0]=HEAP8[$125+6>>0]|0;HEAP8[$121+7>>0]=HEAP8[$125+7>>0]|0;
 $119 = $450;
 HEAP32[$120>>2] = $452;
 $454 = $119;
 $118 = $120;
 $455 = $118;
 $456 = HEAP32[$455>>2]|0;
 HEAP32[$454>>2] = $456;
 $457 = ((($454)) + 4|0);
 $117 = $121;
 $458 = $117;
 ;HEAP32[$457>>2]=HEAP32[$458>>2]|0;HEAP32[$457+4>>2]=HEAP32[$458+4>>2]|0;
 $165 = $253;
 $459 = $165;
 $162 = $459;
 $163 = 0;
 $460 = $162;
 $161 = $460;
 $461 = $161;
 $160 = $461;
 $462 = $160;
 $463 = HEAP32[$462>>2]|0;
 $164 = $463;
 $464 = $163;
 $136 = $460;
 $465 = $136;
 $135 = $465;
 $466 = $135;
 HEAP32[$466>>2] = $464;
 $467 = $164;
 $468 = ($467|0)!=(0|0);
 if ($468) {
  $134 = $460;
  $469 = $134;
  $133 = $469;
  $470 = $133;
  $471 = ((($470)) + 4|0);
  $472 = $164;
  $158 = $471;
  $159 = $472;
  $473 = $158;
  $474 = ((($473)) + 5|0);
  $475 = HEAP8[$474>>0]|0;
  $476 = $475&1;
  if ($476) {
   $477 = HEAP32[$473>>2]|0;
   $478 = $159;
   $479 = ((($478)) + 16|0);
   $480 = ((($479)) + 4|0);
   $157 = $480;
   $481 = $157;
   $147 = $477;
   $148 = $481;
   $482 = $147;
   $483 = $148;
   ;HEAP8[$146>>0]=HEAP8[$149>>0]|0;
   $144 = $482;
   $145 = $483;
  }
  $484 = ((($473)) + 4|0);
  $485 = HEAP8[$484>>0]|0;
  $486 = $485&1;
  if ($486) {
   $487 = HEAP32[$473>>2]|0;
   $488 = $159;
   $489 = ((($488)) + 16|0);
   $137 = $489;
   $490 = $137;
   $141 = $487;
   $142 = $490;
   $491 = $141;
   $492 = $142;
   ;HEAP8[$140>>0]=HEAP8[$143>>0]|0;
   $138 = $491;
   $139 = $492;
  }
  $493 = $159;
  $494 = ($493|0)!=(0|0);
  if ($494) {
   $495 = HEAP32[$473>>2]|0;
   $496 = $159;
   $154 = $495;
   $155 = $496;
   $156 = 1;
   $497 = $154;
   $498 = $155;
   $499 = $156;
   $151 = $497;
   $152 = $498;
   $153 = $499;
   $500 = $152;
   $150 = $500;
   $501 = $150;
   __ZdlPv($501);
  }
 }
 $199 = $250;
 $502 = $199;
 $196 = $502;
 $197 = 0;
 $503 = $196;
 $195 = $503;
 $504 = $195;
 $194 = $504;
 $505 = $194;
 $506 = HEAP32[$505>>2]|0;
 $198 = $506;
 $507 = $197;
 $170 = $503;
 $508 = $170;
 $169 = $508;
 $509 = $169;
 HEAP32[$509>>2] = $507;
 $510 = $198;
 $511 = ($510|0)!=(0|0);
 if (!($511)) {
  STACKTOP = sp;return;
 }
 $168 = $503;
 $512 = $168;
 $167 = $512;
 $513 = $167;
 $514 = ((($513)) + 4|0);
 $515 = $198;
 $192 = $514;
 $193 = $515;
 $516 = $192;
 $517 = ((($516)) + 5|0);
 $518 = HEAP8[$517>>0]|0;
 $519 = $518&1;
 if ($519) {
  $520 = HEAP32[$516>>2]|0;
  $521 = $193;
  $522 = ((($521)) + 16|0);
  $523 = ((($522)) + 4|0);
  $191 = $523;
  $524 = $191;
  $181 = $520;
  $182 = $524;
  $525 = $181;
  $526 = $182;
  ;HEAP8[$180>>0]=HEAP8[$183>>0]|0;
  $178 = $525;
  $179 = $526;
 }
 $527 = ((($516)) + 4|0);
 $528 = HEAP8[$527>>0]|0;
 $529 = $528&1;
 if ($529) {
  $530 = HEAP32[$516>>2]|0;
  $531 = $193;
  $532 = ((($531)) + 16|0);
  $171 = $532;
  $533 = $171;
  $175 = $530;
  $176 = $533;
  $534 = $175;
  $535 = $176;
  ;HEAP8[$174>>0]=HEAP8[$177>>0]|0;
  $172 = $534;
  $173 = $535;
 }
 $536 = $193;
 $537 = ($536|0)!=(0|0);
 if (!($537)) {
  STACKTOP = sp;return;
 }
 $538 = HEAP32[$516>>2]|0;
 $539 = $193;
 $188 = $538;
 $189 = $539;
 $190 = 1;
 $540 = $188;
 $541 = $189;
 $542 = $190;
 $185 = $540;
 $186 = $541;
 $187 = $542;
 $543 = $186;
 $184 = $543;
 $544 = $184;
 __ZdlPv($544);
 STACKTOP = sp;return;
}
function __ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSG_SG_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $6 = sp + 108|0;
 $11 = sp + 88|0;
 $26 = sp + 28|0;
 $31 = sp + 8|0;
 $32 = sp + 4|0;
 $33 = sp;
 $27 = $0;
 $28 = $1;
 $29 = $2;
 $30 = $3;
 $34 = $27;
 $24 = $26;
 $25 = -1;
 $35 = $24;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$26>>2]|0;
 HEAP32[$31>>2] = $36;
 $20 = $31;
 $37 = $30;
 HEAP32[$37>>2] = 0;
 $4 = $6;
 $5 = -1;
 $38 = $4;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$6>>2]|0;
 HEAP32[$32>>2] = $39;
 $7 = $32;
 $40 = $30;
 $41 = ((($40)) + 4|0);
 HEAP32[$41>>2] = 0;
 $42 = $28;
 $43 = $30;
 $44 = ((($43)) + 8|0);
 HEAP32[$44>>2] = $42;
 $45 = $30;
 $46 = $29;
 HEAP32[$46>>2] = $45;
 $8 = $34;
 $47 = $8;
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$48>>2]|0;
 $9 = $11;
 $10 = -1;
 $50 = $9;
 HEAP32[$50>>2] = 0;
 $51 = HEAP32[$11>>2]|0;
 HEAP32[$33>>2] = $51;
 $12 = $33;
 $52 = ($49|0)!=(0|0);
 if ($52) {
  $13 = $34;
  $53 = $13;
  $54 = HEAP32[$53>>2]|0;
  $55 = HEAP32[$54>>2]|0;
  $14 = $34;
  $56 = $14;
  HEAP32[$56>>2] = $55;
 }
 $19 = $34;
 $57 = $19;
 $58 = ((($57)) + 4|0);
 $18 = $58;
 $59 = $18;
 $17 = $59;
 $60 = $17;
 $16 = $60;
 $61 = $16;
 $15 = $61;
 $62 = $15;
 $63 = HEAP32[$62>>2]|0;
 $64 = $29;
 $65 = HEAP32[$64>>2]|0;
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($63,$65);
 $23 = $34;
 $66 = $23;
 $67 = ((($66)) + 8|0);
 $22 = $67;
 $68 = $22;
 $21 = $68;
 $69 = $21;
 $70 = HEAP32[$69>>2]|0;
 $71 = (($70) + 1)|0;
 HEAP32[$69>>2] = $71;
 STACKTOP = sp;return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 116|0;
 $17 = sp + 64|0;
 $31 = sp + 8|0;
 $33 = sp;
 $28 = $0;
 $29 = $1;
 $34 = $29;
 $35 = $28;
 $36 = ($34|0)==($35|0);
 $37 = $29;
 $38 = ((($37)) + 12|0);
 $39 = $36&1;
 HEAP8[$38>>0] = $39;
 while(1) {
  $40 = $29;
  $41 = $28;
  $42 = ($40|0)!=($41|0);
  if (!($42)) {
   label = 17;
   break;
  }
  $43 = $29;
  $27 = $43;
  $44 = $27;
  $45 = ((($44)) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 12|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&1;
  $50 = $49 ^ 1;
  if (!($50)) {
   label = 17;
   break;
  }
  $51 = $29;
  $26 = $51;
  $52 = $26;
  $53 = ((($52)) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  $23 = $54;
  $55 = $23;
  $56 = $23;
  $57 = ((($56)) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = HEAP32[$58>>2]|0;
  $60 = ($55|0)==($59|0);
  $61 = $29;
  if ($60) {
   $13 = $61;
   $62 = $13;
   $63 = ((($62)) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $10 = $64;
   $65 = $10;
   $66 = ((($65)) + 8|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ((($67)) + 4|0);
   $69 = HEAP32[$68>>2]|0;
   $30 = $69;
   $70 = $30;
   $2 = $4;
   $3 = -1;
   $71 = $2;
   HEAP32[$71>>2] = 0;
   $72 = HEAP32[$4>>2]|0;
   HEAP32[$31>>2] = $72;
   $5 = $31;
   $73 = ($70|0)!=(0|0);
   if (!($73)) {
    label = 8;
    break;
   }
   $74 = $30;
   $75 = ((($74)) + 12|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76&1;
   if ($77) {
    label = 8;
    break;
   }
   $78 = $29;
   $6 = $78;
   $79 = $6;
   $80 = ((($79)) + 8|0);
   $81 = HEAP32[$80>>2]|0;
   $29 = $81;
   $82 = $29;
   $83 = ((($82)) + 12|0);
   HEAP8[$83>>0] = 1;
   $84 = $29;
   $7 = $84;
   $85 = $7;
   $86 = ((($85)) + 8|0);
   $87 = HEAP32[$86>>2]|0;
   $29 = $87;
   $88 = $29;
   $89 = $28;
   $90 = ($88|0)==($89|0);
   $91 = $29;
   $92 = ((($91)) + 12|0);
   $93 = $90&1;
   HEAP8[$92>>0] = $93;
   $94 = $30;
   $95 = ((($94)) + 12|0);
   HEAP8[$95>>0] = 1;
   continue;
  } else {
   $14 = $61;
   $121 = $14;
   $122 = ((($121)) + 8|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = ((($123)) + 8|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = HEAP32[$125>>2]|0;
   $32 = $126;
   $127 = $32;
   $15 = $17;
   $16 = -1;
   $128 = $15;
   HEAP32[$128>>2] = 0;
   $129 = HEAP32[$17>>2]|0;
   HEAP32[$33>>2] = $129;
   $18 = $33;
   $130 = ($127|0)!=(0|0);
   if (!($130)) {
    label = 14;
    break;
   }
   $131 = $32;
   $132 = ((($131)) + 12|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&1;
   if ($134) {
    label = 14;
    break;
   }
   $135 = $29;
   $19 = $135;
   $136 = $19;
   $137 = ((($136)) + 8|0);
   $138 = HEAP32[$137>>2]|0;
   $29 = $138;
   $139 = $29;
   $140 = ((($139)) + 12|0);
   HEAP8[$140>>0] = 1;
   $141 = $29;
   $20 = $141;
   $142 = $20;
   $143 = ((($142)) + 8|0);
   $144 = HEAP32[$143>>2]|0;
   $29 = $144;
   $145 = $29;
   $146 = $28;
   $147 = ($145|0)==($146|0);
   $148 = $29;
   $149 = ((($148)) + 12|0);
   $150 = $147&1;
   HEAP8[$149>>0] = $150;
   $151 = $32;
   $152 = ((($151)) + 12|0);
   HEAP8[$152>>0] = 1;
   continue;
  }
 }
 if ((label|0) == 8) {
  $96 = $29;
  $8 = $96;
  $97 = $8;
  $98 = $8;
  $99 = ((($98)) + 8|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = HEAP32[$100>>2]|0;
  $102 = ($97|0)==($101|0);
  if (!($102)) {
   $103 = $29;
   $9 = $103;
   $104 = $9;
   $105 = ((($104)) + 8|0);
   $106 = HEAP32[$105>>2]|0;
   $29 = $106;
   $107 = $29;
   __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($107);
  }
  $108 = $29;
  $11 = $108;
  $109 = $11;
  $110 = ((($109)) + 8|0);
  $111 = HEAP32[$110>>2]|0;
  $29 = $111;
  $112 = $29;
  $113 = ((($112)) + 12|0);
  HEAP8[$113>>0] = 1;
  $114 = $29;
  $12 = $114;
  $115 = $12;
  $116 = ((($115)) + 8|0);
  $117 = HEAP32[$116>>2]|0;
  $29 = $117;
  $118 = $29;
  $119 = ((($118)) + 12|0);
  HEAP8[$119>>0] = 0;
  $120 = $29;
  __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($120);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 14) {
  $153 = $29;
  $21 = $153;
  $154 = $21;
  $155 = $21;
  $156 = ((($155)) + 8|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = HEAP32[$157>>2]|0;
  $159 = ($154|0)==($158|0);
  if ($159) {
   $160 = $29;
   $22 = $160;
   $161 = $22;
   $162 = ((($161)) + 8|0);
   $163 = HEAP32[$162>>2]|0;
   $29 = $163;
   $164 = $29;
   __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($164);
  }
  $165 = $29;
  $24 = $165;
  $166 = $24;
  $167 = ((($166)) + 8|0);
  $168 = HEAP32[$167>>2]|0;
  $29 = $168;
  $169 = $29;
  $170 = ((($169)) + 12|0);
  HEAP8[$170>>0] = 1;
  $171 = $29;
  $25 = $171;
  $172 = $25;
  $173 = ((($172)) + 8|0);
  $174 = HEAP32[$173>>2]|0;
  $29 = $174;
  $175 = $29;
  $176 = ((($175)) + 12|0);
  HEAP8[$176>>0] = 0;
  $177 = $29;
  __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($177);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($0) {
 $0 = $0|0;
 var $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $10 = sp + 12|0;
 $13 = sp;
 $11 = $0;
 $14 = $11;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $12 = $16;
 $17 = $12;
 $18 = HEAP32[$17>>2]|0;
 $19 = $11;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = $18;
 $21 = $11;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $8 = $10;
 $9 = -1;
 $24 = $8;
 HEAP32[$24>>2] = 0;
 $25 = HEAP32[$10>>2]|0;
 HEAP32[$13>>2] = $25;
 $1 = $13;
 $26 = ($23|0)!=(0|0);
 if ($26) {
  $27 = $11;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $11;
  $2 = $29;
  $3 = $30;
  $31 = $2;
  $32 = $3;
  $33 = ((($31)) + 8|0);
  HEAP32[$33>>2] = $32;
 }
 $34 = $11;
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $12;
 $38 = ((($37)) + 8|0);
 HEAP32[$38>>2] = $36;
 $39 = $11;
 $4 = $39;
 $40 = $4;
 $41 = $4;
 $42 = ((($41)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$43>>2]|0;
 $45 = ($40|0)==($44|0);
 $46 = $12;
 $47 = $11;
 if ($45) {
  $48 = ((($47)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $$sink = $49;
  HEAP32[$$sink>>2] = $46;
  $54 = $11;
  $55 = $12;
  HEAP32[$55>>2] = $54;
  $56 = $11;
  $57 = $12;
  $6 = $56;
  $7 = $57;
  $58 = $6;
  $59 = $7;
  $60 = ((($58)) + 8|0);
  HEAP32[$60>>2] = $59;
  STACKTOP = sp;return;
 } else {
  $5 = $47;
  $50 = $5;
  $51 = ((($50)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + 4|0);
  $$sink = $53;
  HEAP32[$$sink>>2] = $46;
  $54 = $11;
  $55 = $12;
  HEAP32[$55>>2] = $54;
  $56 = $11;
  $57 = $12;
  $6 = $56;
  $7 = $57;
  $58 = $6;
  $59 = $7;
  $60 = ((($58)) + 8|0);
  HEAP32[$60>>2] = $59;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($0) {
 $0 = $0|0;
 var $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $10 = sp + 12|0;
 $13 = sp;
 $11 = $0;
 $14 = $11;
 $15 = HEAP32[$14>>2]|0;
 $12 = $15;
 $16 = $12;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $11;
 HEAP32[$19>>2] = $18;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $8 = $10;
 $9 = -1;
 $22 = $8;
 HEAP32[$22>>2] = 0;
 $23 = HEAP32[$10>>2]|0;
 HEAP32[$13>>2] = $23;
 $1 = $13;
 $24 = ($21|0)!=(0|0);
 if ($24) {
  $25 = $11;
  $26 = HEAP32[$25>>2]|0;
  $27 = $11;
  $2 = $26;
  $3 = $27;
  $28 = $2;
  $29 = $3;
  $30 = ((($28)) + 8|0);
  HEAP32[$30>>2] = $29;
 }
 $31 = $11;
 $32 = ((($31)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $12;
 $35 = ((($34)) + 8|0);
 HEAP32[$35>>2] = $33;
 $36 = $11;
 $4 = $36;
 $37 = $4;
 $38 = $4;
 $39 = ((($38)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[$40>>2]|0;
 $42 = ($37|0)==($41|0);
 $43 = $12;
 $44 = $11;
 if ($42) {
  $45 = ((($44)) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $$sink = $46;
 } else {
  $5 = $44;
  $47 = $5;
  $48 = ((($47)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 4|0);
  $$sink = $50;
 }
 HEAP32[$$sink>>2] = $43;
 $51 = $11;
 $52 = $12;
 $53 = ((($52)) + 4|0);
 HEAP32[$53>>2] = $51;
 $54 = $11;
 $55 = $12;
 $6 = $54;
 $7 = $55;
 $56 = $6;
 $57 = $7;
 $58 = ((($56)) + 8|0);
 HEAP32[$58>>2] = $57;
 STACKTOP = sp;return;
}
function __ZNKSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE10__root_ptrEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $7;
 $6 = $8;
 $9 = $6;
 $10 = ((($9)) + 4|0);
 $5 = $10;
 $11 = $5;
 $4 = $11;
 $12 = $4;
 $3 = $12;
 $13 = $3;
 $2 = $13;
 $14 = $2;
 $1 = $14;
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function __GLOBAL__sub_I_interface_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function ___cxx_global_var_init() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $3 = sp + 13|0;
 $4 = sp + 12|0;
 $2 = 23752;
 $5 = $2;
 ;HEAP8[$1>>0]=HEAP8[$4>>0]|0;
 $0 = $3;
 __ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEEC2ERKS8_($5,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEEC2ERKS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $6 = sp + 72|0;
 $7 = sp + 8|0;
 $10 = sp + 60|0;
 $11 = sp + 93|0;
 $12 = sp;
 $25 = sp + 92|0;
 $23 = $0;
 $24 = $1;
 $26 = $23;
 $27 = ((($26)) + 4|0);
 $22 = $27;
 $28 = $22;
 $21 = $28;
 $29 = $21;
 $20 = $29;
 $19 = $29;
 $30 = $19;
 HEAP32[$30>>2] = 0;
 $31 = ((($26)) + 8|0);
 ;HEAP8[$12>>0]=HEAP8[$25>>0]|0;
 $9 = $31;
 HEAP32[$10>>2] = 0;
 $32 = $9;
 $8 = $10;
 $33 = $8;
 $34 = HEAP32[$33>>2]|0;
 $2 = $12;
 ;HEAP8[$7>>0]=HEAP8[$11>>0]|0;
 $5 = $32;
 HEAP32[$6>>2] = $34;
 $35 = $5;
 $4 = $7;
 $3 = $6;
 $36 = $3;
 $37 = HEAP32[$36>>2]|0;
 HEAP32[$35>>2] = $37;
 $17 = $26;
 $38 = $17;
 $39 = ((($38)) + 4|0);
 $16 = $39;
 $40 = $16;
 $15 = $40;
 $41 = $15;
 $14 = $41;
 $42 = $14;
 $13 = $42;
 $43 = $13;
 $18 = $26;
 $44 = $18;
 HEAP32[$44>>2] = $43;
 STACKTOP = sp;return;
}
function _hts_open_js($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $9 = sp + 8|0;
 $17 = sp + 76|0;
 $19 = sp + 68|0;
 $21 = sp + 60|0;
 $23 = sp;
 $24 = sp + 52|0;
 $27 = sp + 40|0;
 $29 = sp + 32|0;
 $31 = sp + 24|0;
 $32 = sp + 20|0;
 HEAP32[$29>>2] = $0;
 $30 = $1;
 $25 = 23752;
 $26 = $29;
 $35 = $25;
 $36 = $26;
 $37 = (__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE4findIiEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_($35,$36)|0);
 HEAP32[$27>>2] = $37;
 ;HEAP8[$23>>0]=HEAP8[$27>>0]|0;HEAP8[$23+1>>0]=HEAP8[$27+1>>0]|0;HEAP8[$23+2>>0]=HEAP8[$27+2>>0]|0;HEAP8[$23+3>>0]=HEAP8[$27+3>>0]|0;
 $22 = $24;
 $38 = $22;
 ;HEAP32[$38>>2]=HEAP32[$23>>2]|0;
 $39 = HEAP32[$24>>2]|0;
 HEAP32[$31>>2] = $39;
 $20 = 23752;
 $40 = $20;
 $18 = $40;
 $41 = $18;
 $16 = $41;
 $42 = $16;
 $43 = ((($42)) + 4|0);
 $15 = $43;
 $44 = $15;
 $14 = $44;
 $45 = $14;
 $13 = $45;
 $46 = $13;
 $12 = $46;
 $47 = $12;
 $10 = $17;
 $11 = $47;
 $48 = $10;
 $49 = $11;
 HEAP32[$48>>2] = $49;
 $50 = HEAP32[$17>>2]|0;
 HEAP32[$21>>2] = $50;
 ;HEAP8[$9>>0]=HEAP8[$21>>0]|0;HEAP8[$9+1>>0]=HEAP8[$21+1>>0]|0;HEAP8[$9+2>>0]=HEAP8[$21+2>>0]|0;HEAP8[$9+3>>0]=HEAP8[$21+3>>0]|0;
 $8 = $19;
 $51 = $8;
 ;HEAP32[$51>>2]=HEAP32[$9>>2]|0;
 $52 = HEAP32[$19>>2]|0;
 HEAP32[$32>>2] = $52;
 $6 = $31;
 $7 = $32;
 $53 = $6;
 $54 = $7;
 $4 = $53;
 $5 = $54;
 $55 = $4;
 $56 = $5;
 $2 = $55;
 $3 = $56;
 $57 = $2;
 $58 = HEAP32[$57>>2]|0;
 $59 = $3;
 $60 = HEAP32[$59>>2]|0;
 $61 = ($58|0)==($60|0);
 $62 = $61 ^ 1;
 if ($62) {
  $28 = 1;
  $70 = $28;
  STACKTOP = sp;return ($70|0);
 } else {
  $63 = HEAP32[$29>>2]|0;
  $64 = (__Z8hopen_jsi($63)|0);
  $33 = $64;
  $65 = $33;
  $66 = $30;
  $67 = (__Z12hts_hopen_jsP5hFILEPcPKc($65,$66,17761)|0);
  $34 = $67;
  $68 = $34;
  $69 = (__ZNSt3__23mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEEixERS7_(23752,$29)|0);
  HEAP32[$69>>2] = $68;
  $28 = 0;
  $70 = $28;
  STACKTOP = sp;return ($70|0);
 }
 return (0)|0;
}
function __ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE4findIiEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $14 = sp + 144|0;
 $38 = sp + 48|0;
 $46 = sp + 16|0;
 $49 = sp + 4|0;
 $50 = sp;
 $47 = $0;
 $48 = $1;
 $51 = $47;
 $52 = $48;
 $45 = $51;
 $53 = $45;
 $44 = $53;
 $54 = $44;
 $55 = ((($54)) + 4|0);
 $43 = $55;
 $56 = $43;
 $42 = $56;
 $57 = $42;
 $41 = $57;
 $58 = $41;
 $40 = $58;
 $59 = $40;
 $60 = HEAP32[$59>>2]|0;
 $6 = $51;
 $61 = $6;
 $62 = ((($61)) + 4|0);
 $5 = $62;
 $63 = $5;
 $4 = $63;
 $64 = $4;
 $3 = $64;
 $65 = $3;
 $2 = $65;
 $66 = $2;
 $67 = (__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE13__lower_boundIiEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_SH_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISF_EEEE($51,$52,$60,$66)|0);
 HEAP32[$49>>2] = $67;
 $15 = $51;
 $68 = $15;
 $13 = $68;
 $69 = $13;
 $70 = ((($69)) + 4|0);
 $12 = $70;
 $71 = $12;
 $11 = $71;
 $72 = $11;
 $10 = $72;
 $73 = $10;
 $9 = $73;
 $74 = $9;
 $7 = $14;
 $8 = $74;
 $75 = $7;
 $76 = $8;
 HEAP32[$75>>2] = $76;
 $77 = HEAP32[$14>>2]|0;
 HEAP32[$50>>2] = $77;
 $18 = $49;
 $19 = $50;
 $78 = $18;
 $79 = $19;
 $16 = $78;
 $17 = $79;
 $80 = $16;
 $81 = HEAP32[$80>>2]|0;
 $82 = $17;
 $83 = HEAP32[$82>>2]|0;
 $84 = ($81|0)==($83|0);
 $85 = $84 ^ 1;
 if ($85) {
  $22 = $51;
  $86 = $22;
  $87 = ((($86)) + 8|0);
  $21 = $87;
  $88 = $21;
  $20 = $88;
  $89 = $20;
  $90 = $48;
  $24 = $49;
  $91 = $24;
  $23 = $91;
  $92 = $23;
  $93 = HEAP32[$92>>2]|0;
  $94 = ((($93)) + 16|0);
  $28 = $89;
  $29 = $90;
  $30 = $94;
  $95 = $28;
  $96 = $29;
  $97 = $30;
  $25 = $95;
  $26 = $96;
  $27 = $97;
  $98 = $26;
  $99 = HEAP32[$98>>2]|0;
  $100 = $27;
  $101 = HEAP32[$100>>2]|0;
  $102 = ($99|0)<($101|0);
  $103 = $102 ^ 1;
  if ($103) {
   ;HEAP32[$46>>2]=HEAP32[$49>>2]|0;
   $114 = HEAP32[$46>>2]|0;
   STACKTOP = sp;return ($114|0);
  }
 }
 $39 = $51;
 $104 = $39;
 $37 = $104;
 $105 = $37;
 $106 = ((($105)) + 4|0);
 $36 = $106;
 $107 = $36;
 $35 = $107;
 $108 = $35;
 $34 = $108;
 $109 = $34;
 $33 = $109;
 $110 = $33;
 $31 = $38;
 $32 = $110;
 $111 = $31;
 $112 = $32;
 HEAP32[$111>>2] = $112;
 $113 = HEAP32[$38>>2]|0;
 HEAP32[$46>>2] = $113;
 $114 = HEAP32[$46>>2]|0;
 STACKTOP = sp;return ($114|0);
}
function __ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE13__lower_boundIiEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_SH_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISF_EEEE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $18 = sp + 24|0;
 $19 = sp + 20|0;
 $24 = sp;
 $20 = $0;
 $21 = $1;
 $22 = $2;
 $23 = $3;
 $25 = $20;
 while(1) {
  $26 = $22;
  $16 = $18;
  $17 = -1;
  $27 = $16;
  HEAP32[$27>>2] = 0;
  $28 = HEAP32[$18>>2]|0;
  HEAP32[$24>>2] = $28;
  $4 = $24;
  $29 = ($26|0)!=(0|0);
  if (!($29)) {
   break;
  }
  $7 = $25;
  $30 = $7;
  $31 = ((($30)) + 8|0);
  $6 = $31;
  $32 = $6;
  $5 = $32;
  $33 = $5;
  $34 = $22;
  $35 = ((($34)) + 16|0);
  $36 = $21;
  $11 = $33;
  $12 = $35;
  $13 = $36;
  $37 = $11;
  $38 = $12;
  $39 = $13;
  $8 = $37;
  $9 = $38;
  $10 = $39;
  $40 = $9;
  $41 = HEAP32[$40>>2]|0;
  $42 = $10;
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)<($43|0);
  $45 = $22;
  if ($44) {
   $48 = ((($45)) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $22 = $49;
   continue;
  } else {
   $23 = $45;
   $46 = $22;
   $47 = HEAP32[$46>>2]|0;
   $22 = $47;
   continue;
  }
 }
 $50 = $23;
 $14 = $19;
 $15 = $50;
 $51 = $14;
 $52 = $15;
 HEAP32[$51>>2] = $52;
 $53 = HEAP32[$19>>2]|0;
 STACKTOP = sp;return ($53|0);
}
function _hts_fetch_js($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = sp + 32|0;
 $2 = $0;
 $3 = $1;
 _emscripten_fetch_attr_init($4);
 (_strcpy($4,17603)|0);
 $7 = ((($4)) + 48|0);
 HEAP32[$7>>2] = 129;
 $8 = (_emscripten_fetch($4,17607)|0);
 $5 = $8;
 $6 = -8;
 while(1) {
  $9 = $6;
  $10 = ($9|0)==(-8);
  $11 = $5;
  if (!($10)) {
   break;
  }
  $12 = (_emscripten_fetch_wait($11,10.0)|0);
  $6 = $12;
 }
 $13 = ((($11)) + 42|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = ($15|0)==(200);
 $17 = $5;
 if ($16) {
  $18 = ((($17)) + 16|0);
  $19 = $18;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = $5;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $vararg_buffer;
  $29 = $28;
  HEAP32[$29>>2] = $21;
  $30 = (($28) + 4)|0;
  $31 = $30;
  HEAP32[$31>>2] = $24;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr1>>2] = $27;
  (_printf(17616,$vararg_buffer)|0);
  $38 = $5;
  (_emscripten_fetch_close($38)|0);
  STACKTOP = sp;return -1;
 } else {
  $32 = ((($17)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $5;
  $35 = ((($34)) + 42|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36&65535;
  HEAP32[$vararg_buffer2>>2] = $33;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $37;
  (_printf(17662,$vararg_buffer2)|0);
  $38 = $5;
  (_emscripten_fetch_close($38)|0);
  STACKTOP = sp;return -1;
 }
 return (0)|0;
}
function __Z7ks_initP4BGZF($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = (_calloc(1,32)|0);
 $2 = $3;
 $4 = $1;
 $5 = $2;
 $6 = ((($5)) + 24|0);
 HEAP32[$6>>2] = $4;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = $10 | 262144;
 HEAP32[$8>>2] = $11;
 $12 = (_malloc(65536)|0);
 $13 = $2;
 $14 = ((($13)) + 28|0);
 HEAP32[$14>>2] = $12;
 $15 = $2;
 STACKTOP = sp;return ($15|0);
}
function __Z12hts_hopen_jsP5hFILEPcPKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $16 = sp + 77|0;
 $17 = sp + 76|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $20 = (_calloc(1,64)|0);
 $15 = $20;
 $21 = ((($16)) + 100|0);
 HEAP8[$21>>0] = 0;
 $22 = $15;
 $23 = ($22|0)==(0|0);
 L1: do {
  if (!($23)) {
   $24 = $13;
   $25 = (___strdup($24)|0);
   $26 = $15;
   $27 = ((($26)) + 28|0);
   HEAP32[$27>>2] = $25;
   $28 = (__ZL9ed_is_bigv()|0);
   $29 = $15;
   $30 = HEAP32[$29>>2]|0;
   $31 = $28 & 1;
   $32 = $31 << 2;
   $33 = $30 & -5;
   $34 = $33 | $32;
   HEAP32[$29>>2] = $34;
   $35 = $14;
   $9 = $35;
   $10 = 44;
   $36 = $9;
   $37 = $10;
   $7 = $36;
   $8 = $37;
   $38 = $7;
   $39 = $8;
   $40 = (_strchr($38,$39)|0);
   $18 = $40;
   $41 = ($40|0)!=(0|0);
   $42 = $14;
   if ($41) {
    $43 = $18;
    $44 = $14;
    $45 = $43;
    $46 = $44;
    $47 = (($45) - ($46))|0;
    $48 = ($47|0)<=(100);
    if ($48) {
     $49 = $18;
     $50 = $14;
     $51 = $49;
     $52 = $50;
     $53 = (($51) - ($52))|0;
     $54 = $53;
    } else {
     $54 = 100;
    }
    (_strncpy($16,$42,$54)|0);
    $55 = $18;
    $56 = $14;
    $57 = $55;
    $58 = $56;
    $59 = (($57) - ($58))|0;
    $60 = (($16) + ($59)|0);
    HEAP8[$60>>0] = 0;
   } else {
    (_strncpy($16,$42,100)|0);
   }
   $5 = $16;
   $6 = 114;
   $61 = $5;
   $62 = $6;
   $3 = $61;
   $4 = $62;
   $63 = $3;
   $64 = $4;
   $65 = (_strchr($63,$64)|0);
   $66 = ($65|0)!=(0|0);
   if (!($66)) {
    $72 = (___errno_location()|0);
    HEAP32[$72>>2] = 22;
    break;
   }
   $67 = $12;
   $68 = $15;
   $69 = ((($68)) + 40|0);
   $70 = (_hts_detect_format($67,$69)|0);
   $71 = ($70|0)<(0);
   if (!($71)) {
    $73 = $15;
    $74 = ((($73)) + 40|0);
    $75 = ((($74)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    L14: do {
     switch ($76|0) {
     case 9: case 4: case 1:  {
      $77 = $12;
      $78 = (_bgzf_hopen($77,$16)|0);
      $79 = $15;
      $80 = ((($79)) + 36|0);
      HEAP32[$80>>2] = $78;
      $81 = $15;
      $82 = ((($81)) + 36|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ($83|0)==(0|0);
      if ($84) {
       break L1;
      }
      $85 = $15;
      $86 = HEAP32[$85>>2]|0;
      $87 = $86 & -2;
      $88 = $87 | 1;
      HEAP32[$85>>2] = $88;
      break;
     }
     case 6:  {
      $89 = $12;
      $90 = $13;
      $91 = (_cram_dopen($89,$90,$16)|0);
      $92 = $15;
      $93 = ((($92)) + 36|0);
      HEAP32[$93>>2] = $91;
      $94 = $15;
      $95 = ((($94)) + 36|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = ($96|0)==(0|0);
      if ($97) {
       break L1;
      }
      $98 = $15;
      $99 = HEAP32[$98>>2]|0;
      $100 = $99 >>> 1;
      $101 = $100 & 1;
      $102 = ($101|0)!=(0);
      if (!($102)) {
       $103 = $15;
       $104 = ((($103)) + 36|0);
       $105 = HEAP32[$104>>2]|0;
       HEAP32[$vararg_buffer>>2] = 1;
       (_cram_set_option($105,0,$vararg_buffer)|0);
      }
      $106 = $15;
      $107 = HEAP32[$106>>2]|0;
      $108 = $107 & -9;
      $109 = $108 | 8;
      HEAP32[$106>>2] = $109;
      break;
     }
     case 8: case 3: case 2:  {
      $110 = $12;
      $111 = (_hpeek($110,$17,1)|0);
      $112 = ($111|0)>(0);
      if ($112) {
       $113 = HEAP8[$17>>0]|0;
       $114 = $113 << 24 >> 24;
       $115 = ($114|0)==(62);
       if ($115) {
        $116 = $12;
        $117 = (_bgzf_hopen($116,$16)|0);
        $118 = $15;
        $119 = ((($118)) + 36|0);
        HEAP32[$119>>2] = $117;
        break L14;
       }
      }
      $120 = $12;
      $121 = (_bgzf_hopen($120,$16)|0);
      $19 = $121;
      $122 = $19;
      $123 = ($122|0)!=(0|0);
      if (!($123)) {
       break L1;
      }
      $124 = $19;
      $125 = (__Z7ks_initP4BGZF($124)|0);
      $126 = $15;
      $127 = ((($126)) + 36|0);
      HEAP32[$127>>2] = $125;
      break;
     }
     case 12: case 11: case 10: case 5:  {
      $128 = $12;
      $129 = $15;
      $130 = ((($129)) + 36|0);
      HEAP32[$130>>2] = $128;
      break;
     }
     default: {
      break L1;
     }
     }
    } while(0);
    $131 = $15;
    $11 = $131;
    $142 = $11;
    STACKTOP = sp;return ($142|0);
   }
  }
 } while(0);
 $132 = $13;
 HEAP32[$vararg_buffer1>>2] = 17748;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $132;
 (_printf(17716,$vararg_buffer1)|0);
 $133 = $15;
 $134 = ($133|0)!=(0|0);
 if ($134) {
  $135 = $15;
  $136 = ((($135)) + 28|0);
  $137 = HEAP32[$136>>2]|0;
  _free($137);
  $138 = $15;
  $139 = ((($138)) + 32|0);
  $140 = HEAP32[$139>>2]|0;
  _free($140);
  $141 = $15;
  _free($141);
 }
 $11 = 0;
 $142 = $11;
 STACKTOP = sp;return ($142|0);
}
function __ZL9ed_is_bigv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 HEAP32[$0>>2] = 1;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)!=(0);
 $3 = $2 ^ 1;
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function __Z8hopen_jsi($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = (_hfile_init(36,17761,32768)|0);
 $2 = $3;
 $4 = $2;
 $5 = ((($4)) + 16|0);
 HEAP32[$5>>2] = 404;
 $6 = $1;
 $7 = $2;
 $8 = ((($7)) + 32|0);
 HEAP32[$8>>2] = $6;
 $9 = $2;
 STACKTOP = sp;return ($9|0);
}
function __ZL7js_readP5hFILEPvj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $4;
 $11 = $10;
 $12 = $5;
 $13 = _emscripten_asm_const_iiii(0, ($9|0), ($11|0), ($12|0))|0;
 $6 = $13;
 $14 = $6;
 STACKTOP = sp;return ($14|0);
}
function __ZL7js_seekP5hFILEii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $4;
 $11 = $5;
 $12 = _emscripten_asm_const_iiii(1, ($9|0), ($10|0), ($11|0))|0;
 $6 = $12;
 $13 = $6;
 STACKTOP = sp;return ($13|0);
}
function __ZL8js_closeP5hFILE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $1 = 0;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 } else {
  $6 = $2;
  $7 = ((($6)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = _emscripten_asm_const_ii(2, ($8|0))|0;
  $3 = $9;
  $10 = $2;
  _free($10);
  $1 = 0;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __emscripten_get_fetch_queue() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (__emscripten_get_fetch_work_queue()|0);
 $0 = $1;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 $5 = $0;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 64;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11<<2;
 $13 = (_malloc($12)|0);
 $14 = $0;
 HEAP32[$14>>2] = $13;
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function __Z22emscripten_proxy_fetchP18emscripten_fetch_t($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = (__emscripten_get_fetch_queue()|0);
 $2 = $3;
 $4 = $1;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[$8>>2] = $10;
 $11 = (($6) + ($9<<2)|0);
 HEAP32[$11>>2] = $4;
 $12 = $2;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = _emscripten_asm_const_ii(3, ($14|0))|0;
 STACKTOP = sp;return;
}
function _emscripten_fetch_attr_init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 dest=$2; stop=dest+88|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _emscripten_fetch($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $12 = $3;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $2 = 0;
  $159 = $2;
  STACKTOP = sp;return ($159|0);
 }
 $14 = $4;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  $2 = 0;
  $159 = $2;
  STACKTOP = sp;return ($159|0);
 }
 $16 = $3;
 $17 = ((($16)) + 48|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & 128;
 $20 = ($19|0)!=(0);
 $21 = $20&1;
 $5 = $21;
 $22 = $3;
 $23 = ((($22)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 & 64;
 $26 = ($25|0)!=(0);
 $27 = $26&1;
 $6 = $27;
 $28 = $3;
 $29 = ((($28)) + 48|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 40;
 $32 = ($31|0)!=(0);
 $33 = $32&1;
 $7 = $33;
 $34 = $3;
 $35 = ((($34)) + 48|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 & 4;
 $38 = ($37|0)!=(0);
 if ($38) {
  $44 = 1;
 } else {
  $39 = $3;
  $40 = (_strncmp($39,17961,7)|0);
  $41 = ($40|0)!=(0);
  $42 = $41 ^ 1;
  $44 = $42;
 }
 $43 = $44&1;
 $8 = $43;
 $45 = $3;
 $46 = ((($45)) + 48|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $47 & 32;
 $49 = ($48|0)==(0);
 $50 = $49&1;
 $9 = $50;
 $51 = (_emscripten_is_main_browser_thread()|0);
 $52 = ($51|0)!=(0);
 $53 = $52&1;
 $10 = $53;
 $54 = $10;
 $55 = $54&1;
 do {
  if ($55) {
   $56 = $6;
   $57 = $56&1;
   if ($57) {
    $58 = $9;
    $59 = $58&1;
    if (!($59)) {
     $60 = $7;
     $61 = $60&1;
     if (!($61)) {
      $62 = $8;
      $63 = $62&1;
      if (!($63)) {
       break;
      }
     }
    }
    $64 = $4;
    $65 = _emscripten_asm_const_ii(4, ($64|0))|0;
    $2 = 0;
    $159 = $2;
    STACKTOP = sp;return ($159|0);
   }
  }
 } while(0);
 $66 = (_malloc(200)|0);
 $11 = $66;
 $67 = $11;
 _memset(($67|0),0,200)|0;
 $68 = HEAP32[106]|0;
 $69 = (($68) + 1)|0;
 HEAP32[106] = $69;
 $70 = $11;
 HEAP32[$70>>2] = $68;
 $71 = $3;
 $72 = ((($71)) + 32|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $11;
 $75 = ((($74)) + 4|0);
 HEAP32[$75>>2] = $73;
 $76 = $4;
 $77 = (___strdup($76)|0);
 $78 = $11;
 $79 = ((($78)) + 8|0);
 HEAP32[$79>>2] = $77;
 $80 = $3;
 $81 = $11;
 $82 = ((($81)) + 112|0);
 dest=$82; src=$80; stop=dest+88|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $83 = $11;
 $84 = ((($83)) + 112|0);
 $85 = ((($84)) + 60|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ($86|0)!=(0|0);
 if ($87) {
  $88 = $11;
  $89 = ((($88)) + 112|0);
  $90 = ((($89)) + 60|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (___strdup($91)|0);
  $96 = $92;
 } else {
  $96 = 0;
 }
 $93 = $11;
 $94 = ((($93)) + 112|0);
 $95 = ((($94)) + 60|0);
 HEAP32[$95>>2] = $96;
 $97 = $11;
 $98 = ((($97)) + 112|0);
 $99 = ((($98)) + 64|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ($100|0)!=(0|0);
 if ($101) {
  $102 = $11;
  $103 = ((($102)) + 112|0);
  $104 = ((($103)) + 64|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (___strdup($105)|0);
  $110 = $106;
 } else {
  $110 = 0;
 }
 $107 = $11;
 $108 = ((($107)) + 112|0);
 $109 = ((($108)) + 64|0);
 HEAP32[$109>>2] = $110;
 $111 = $11;
 $112 = ((($111)) + 112|0);
 $113 = ((($112)) + 68|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ($114|0)!=(0|0);
 if ($115) {
  $116 = $11;
  $117 = ((($116)) + 112|0);
  $118 = ((($117)) + 68|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (___strdup($119)|0);
  $124 = $120;
 } else {
  $124 = 0;
 }
 $121 = $11;
 $122 = ((($121)) + 112|0);
 $123 = ((($122)) + 68|0);
 HEAP32[$123>>2] = $124;
 $125 = $11;
 $126 = ((($125)) + 112|0);
 $127 = ((($126)) + 72|0);
 HEAP32[$127>>2] = 0;
 $128 = $11;
 $129 = ((($128)) + 112|0);
 $130 = ((($129)) + 76|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = ($131|0)!=(0|0);
 if ($132) {
  $133 = $11;
  $134 = ((($133)) + 112|0);
  $135 = ((($134)) + 76|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (___strdup($136)|0);
  $141 = $137;
 } else {
  $141 = 0;
 }
 $138 = $11;
 $139 = ((($138)) + 112|0);
 $140 = ((($139)) + 76|0);
 HEAP32[$140>>2] = $141;
 $142 = $5;
 $143 = $142&1;
 do {
  if ($143) {
   label = 25;
  } else {
   $144 = $6;
   $145 = $144&1;
   if ($145) {
    $146 = $7;
    $147 = $146&1;
    if ($147) {
     label = 25;
     break;
    }
    $148 = $8;
    $149 = $148&1;
    if ($149) {
     label = 25;
     break;
    }
   }
   $157 = $11;
   _emscripten_start_fetch(($157|0));
  }
 } while(0);
 if ((label|0) == 25) {
  $150 = $11;
  $151 = ((($150)) + 108|0);
  $152 = (Atomics_store(HEAP32, $151>>2, 1)|0);
  $153 = $11;
  __Z22emscripten_proxy_fetchP18emscripten_fetch_t($153);
  $154 = $6;
  $155 = $154&1;
  if ($155) {
   $156 = $11;
   (_emscripten_fetch_wait($156,inf)|0);
  }
 }
 $158 = $11;
 $2 = $158;
 $159 = $2;
 STACKTOP = sp;return ($159|0);
}
function _emscripten_fetch_wait($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 do {
  if ($7) {
   $8 = $3;
   $9 = ((($8)) + 108|0);
   $10 = (Atomics_load(HEAP32, $9>>2)|0);
   $5 = $10;
   $11 = $5;
   $12 = ($11|0)==(2);
   if ($12) {
    $2 = 0;
    break;
   }
   $13 = $5;
   $14 = ($13|0)!=(1);
   if ($14) {
    $2 = -5;
    break;
   }
   $15 = _emscripten_asm_const_i(5)|0;
   while(1) {
    $16 = $5;
    $17 = ($16|0)==(1);
    if (!($17)) {
     break;
    }
    $18 = $3;
    $19 = ((($18)) + 108|0);
    $20 = $5;
    (_emscripten_futex_wait(($19|0),($20|0),100.0)|0);
    $21 = $3;
    $22 = ((($21)) + 108|0);
    $23 = (Atomics_load(HEAP32, $22>>2)|0);
    $5 = $23;
   }
   $24 = _emscripten_asm_const_i(6)|0;
   $25 = $5;
   $26 = ($25|0)==(2);
   if ($26) {
    $2 = 0;
    break;
   } else {
    $2 = -6;
    break;
   }
  } else {
   $2 = -5;
  }
 } while(0);
 $27 = $2;
 STACKTOP = sp;return ($27|0);
}
function _emscripten_fetch_close($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $1 = 0;
  $40 = $1;
  STACKTOP = sp;return ($40|0);
 }
 $5 = $2;
 $6 = ((($5)) + 108|0);
 $7 = (Atomics_store(HEAP32, $6>>2, 0)|0);
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $11 = $2;
  $12 = ((($11)) + 40|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = $13&65535;
  $15 = ($14|0)>(4);
  if (!($15)) {
   $16 = $2;
   $17 = ((($16)) + 40|0);
   $18 = HEAP16[$17>>1]|0;
   $19 = $18&65535;
   $20 = ($19|0)!=(4);
   if ($20) {
    $21 = $2;
    $22 = ((($21)) + 112|0);
    $23 = ((($22)) + 40|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)!=(0|0);
    if ($25) {
     $26 = $2;
     $27 = ((($26)) + 42|0);
     HEAP16[$27>>1] = -1;
     $28 = $2;
     $29 = ((($28)) + 44|0);
     (_strcpy($29,18405)|0);
     $30 = $2;
     $31 = ((($30)) + 112|0);
     $32 = ((($31)) + 40|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = $2;
     FUNCTION_TABLE_vi[$33 & 63]($34);
    }
   }
   $35 = $2;
   HEAP32[$35>>2] = 0;
   $36 = $2;
   $37 = ((($36)) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   _free($38);
   $39 = $2;
   _free($39);
   $1 = 0;
   $40 = $1;
   STACKTOP = sp;return ($40|0);
  }
 }
 $1 = -5;
 $40 = $1;
 STACKTOP = sp;return ($40|0);
}
function _compressBound($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 >>> 12;
 $2 = $0 >>> 14;
 $3 = $0 >>> 25;
 $4 = (($0) + 13)|0;
 $5 = (($4) + ($1))|0;
 $6 = (($5) + ($2))|0;
 $7 = (($6) + ($3))|0;
 return ($7|0);
}
function _crc32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa$i = 0, $$076$masked$i = 0, $$07699$i = 0, $$07898$i = 0, $$08297$i = 0, $$092$i = 0, $$1 = 0, $$1$lcssa$i = 0, $$177$lcssa$i = 0, $$17791$i = 0, $$179$lcssa$i = 0, $$17990$i = 0, $$183$i = 0, $$187$i = 0, $$2$lcssa$i = 0, $$280$lcssa$i = 0, $$28085$i = 0, $$286$i = 0, $$3$i = 0, $$3$masked$i = 0;
 var $$381$i = 0, $$4$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep$i = 0, $scevgep115$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0|0);
 if ($3) {
  $$1 = 0;
  return ($$1|0);
 }
 $4 = $0 ^ -1;
 $5 = ($2|0)==(0);
 L4: do {
  if ($5) {
   $$4$i = $4;
  } else {
   $$07699$i = $4;$$07898$i = $2;$$08297$i = $1;
   while(1) {
    $6 = $$08297$i;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     break;
    }
    $9 = ((($$08297$i)) + 1|0);
    $10 = HEAP8[$$08297$i>>0]|0;
    $11 = $10&255;
    $$076$masked$i = $$07699$i & 255;
    $12 = $11 ^ $$076$masked$i;
    $13 = (428 + ($12<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $$07699$i >>> 8;
    $16 = $14 ^ $15;
    $17 = (($$07898$i) + -1)|0;
    $18 = ($17|0)==(0);
    if ($18) {
     $$4$i = $16;
     break L4;
    } else {
     $$07699$i = $16;$$07898$i = $17;$$08297$i = $9;
    }
   }
   $19 = ($$07898$i>>>0)>(31);
   if ($19) {
    $20 = (($$07898$i) + -32)|0;
    $21 = $20 & -32;
    $22 = (($21) + 32)|0;
    $scevgep115$i = (($$08297$i) + ($22)|0);
    $$092$i = $$08297$i;$$17791$i = $$07699$i;$$17990$i = $$07898$i;
    while(1) {
     $28 = ((($$092$i)) + 4|0);
     $29 = HEAP32[$$092$i>>2]|0;
     $30 = $29 ^ $$17791$i;
     $31 = $30 & 255;
     $32 = (3500 + ($31<<2)|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = $30 >>> 8;
     $35 = $34 & 255;
     $36 = (2476 + ($35<<2)|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = $37 ^ $33;
     $39 = $30 >>> 16;
     $40 = $39 & 255;
     $41 = (1452 + ($40<<2)|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = $38 ^ $42;
     $44 = $30 >>> 24;
     $45 = (428 + ($44<<2)|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = $43 ^ $46;
     $48 = ((($$092$i)) + 8|0);
     $49 = HEAP32[$28>>2]|0;
     $50 = $47 ^ $49;
     $51 = $50 & 255;
     $52 = (3500 + ($51<<2)|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = $50 >>> 8;
     $55 = $54 & 255;
     $56 = (2476 + ($55<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $57 ^ $53;
     $59 = $50 >>> 16;
     $60 = $59 & 255;
     $61 = (1452 + ($60<<2)|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = $58 ^ $62;
     $64 = $50 >>> 24;
     $65 = (428 + ($64<<2)|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = $63 ^ $66;
     $68 = ((($$092$i)) + 12|0);
     $69 = HEAP32[$48>>2]|0;
     $70 = $67 ^ $69;
     $71 = $70 & 255;
     $72 = (3500 + ($71<<2)|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = $70 >>> 8;
     $75 = $74 & 255;
     $76 = (2476 + ($75<<2)|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $77 ^ $73;
     $79 = $70 >>> 16;
     $80 = $79 & 255;
     $81 = (1452 + ($80<<2)|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = $78 ^ $82;
     $84 = $70 >>> 24;
     $85 = (428 + ($84<<2)|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = $83 ^ $86;
     $88 = ((($$092$i)) + 16|0);
     $89 = HEAP32[$68>>2]|0;
     $90 = $87 ^ $89;
     $91 = $90 & 255;
     $92 = (3500 + ($91<<2)|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = $90 >>> 8;
     $95 = $94 & 255;
     $96 = (2476 + ($95<<2)|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = $97 ^ $93;
     $99 = $90 >>> 16;
     $100 = $99 & 255;
     $101 = (1452 + ($100<<2)|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = $98 ^ $102;
     $104 = $90 >>> 24;
     $105 = (428 + ($104<<2)|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = $103 ^ $106;
     $108 = ((($$092$i)) + 20|0);
     $109 = HEAP32[$88>>2]|0;
     $110 = $107 ^ $109;
     $111 = $110 & 255;
     $112 = (3500 + ($111<<2)|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = $110 >>> 8;
     $115 = $114 & 255;
     $116 = (2476 + ($115<<2)|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = $117 ^ $113;
     $119 = $110 >>> 16;
     $120 = $119 & 255;
     $121 = (1452 + ($120<<2)|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = $118 ^ $122;
     $124 = $110 >>> 24;
     $125 = (428 + ($124<<2)|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $123 ^ $126;
     $128 = ((($$092$i)) + 24|0);
     $129 = HEAP32[$108>>2]|0;
     $130 = $127 ^ $129;
     $131 = $130 & 255;
     $132 = (3500 + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = $130 >>> 8;
     $135 = $134 & 255;
     $136 = (2476 + ($135<<2)|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = $137 ^ $133;
     $139 = $130 >>> 16;
     $140 = $139 & 255;
     $141 = (1452 + ($140<<2)|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = $138 ^ $142;
     $144 = $130 >>> 24;
     $145 = (428 + ($144<<2)|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = $143 ^ $146;
     $148 = ((($$092$i)) + 28|0);
     $149 = HEAP32[$128>>2]|0;
     $150 = $147 ^ $149;
     $151 = $150 & 255;
     $152 = (3500 + ($151<<2)|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = $150 >>> 8;
     $155 = $154 & 255;
     $156 = (2476 + ($155<<2)|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = $157 ^ $153;
     $159 = $150 >>> 16;
     $160 = $159 & 255;
     $161 = (1452 + ($160<<2)|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = $158 ^ $162;
     $164 = $150 >>> 24;
     $165 = (428 + ($164<<2)|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = $163 ^ $166;
     $168 = ((($$092$i)) + 32|0);
     $169 = HEAP32[$148>>2]|0;
     $170 = $167 ^ $169;
     $171 = $170 & 255;
     $172 = (3500 + ($171<<2)|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = $170 >>> 8;
     $175 = $174 & 255;
     $176 = (2476 + ($175<<2)|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = $177 ^ $173;
     $179 = $170 >>> 16;
     $180 = $179 & 255;
     $181 = (1452 + ($180<<2)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = $178 ^ $182;
     $184 = $170 >>> 24;
     $185 = (428 + ($184<<2)|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = $183 ^ $186;
     $188 = (($$17990$i) + -32)|0;
     $189 = ($188>>>0)>(31);
     if ($189) {
      $$092$i = $168;$$17791$i = $187;$$17990$i = $188;
     } else {
      break;
     }
    }
    $23 = (($20) - ($21))|0;
    $$0$lcssa$i = $scevgep115$i;$$177$lcssa$i = $187;$$179$lcssa$i = $23;
   } else {
    $$0$lcssa$i = $$08297$i;$$177$lcssa$i = $$07699$i;$$179$lcssa$i = $$07898$i;
   }
   $24 = ($$179$lcssa$i>>>0)>(3);
   if ($24) {
    $25 = (($$179$lcssa$i) + -4)|0;
    $26 = $25 >>> 2;
    $27 = (($26) + 1)|0;
    $$187$i = $$0$lcssa$i;$$28085$i = $$179$lcssa$i;$$286$i = $$177$lcssa$i;
    while(1) {
     $190 = ((($$187$i)) + 4|0);
     $191 = HEAP32[$$187$i>>2]|0;
     $192 = $191 ^ $$286$i;
     $193 = $192 & 255;
     $194 = (3500 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = $192 >>> 8;
     $197 = $196 & 255;
     $198 = (2476 + ($197<<2)|0);
     $199 = HEAP32[$198>>2]|0;
     $200 = $199 ^ $195;
     $201 = $192 >>> 16;
     $202 = $201 & 255;
     $203 = (1452 + ($202<<2)|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = $200 ^ $204;
     $206 = $192 >>> 24;
     $207 = (428 + ($206<<2)|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = $205 ^ $208;
     $210 = (($$28085$i) + -4)|0;
     $211 = ($210>>>0)>(3);
     if ($211) {
      $$187$i = $190;$$28085$i = $210;$$286$i = $209;
     } else {
      break;
     }
    }
    $212 = $26 << 2;
    $scevgep$i = (($$0$lcssa$i) + ($27<<2)|0);
    $213 = (($25) - ($212))|0;
    $$1$lcssa$i = $scevgep$i;$$2$lcssa$i = $209;$$280$lcssa$i = $213;
   } else {
    $$1$lcssa$i = $$0$lcssa$i;$$2$lcssa$i = $$177$lcssa$i;$$280$lcssa$i = $$179$lcssa$i;
   }
   $214 = ($$280$lcssa$i|0)==(0);
   if ($214) {
    $$4$i = $$2$lcssa$i;
   } else {
    $$183$i = $$1$lcssa$i;$$3$i = $$2$lcssa$i;$$381$i = $$280$lcssa$i;
    while(1) {
     $215 = ((($$183$i)) + 1|0);
     $216 = HEAP8[$$183$i>>0]|0;
     $217 = $216&255;
     $$3$masked$i = $$3$i & 255;
     $218 = $217 ^ $$3$masked$i;
     $219 = (428 + ($218<<2)|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = $$3$i >>> 8;
     $222 = $220 ^ $221;
     $223 = (($$381$i) + -1)|0;
     $224 = ($223|0)==(0);
     if ($224) {
      $$4$i = $222;
      break;
     } else {
      $$183$i = $215;$$3$i = $222;$$381$i = $223;
     }
    }
   }
  }
 } while(0);
 $225 = $$4$i ^ -1;
 $$1 = $225;
 return ($$1|0);
}
function _deflateInit2_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$ = 0, $$$0115 = 0, $$0 = 0, $$0113 = 0, $$0115 = 0, $$116 = 0, $$117 = 0, $$in$i = 0, $$in51$i = 0, $$in52$i = 0, $$off = 0, $$pre$i = 0, $$pre43$i = 0, $$pre44$i = 0, $$pre45$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond118 = 0, $or$cond5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $8 = ($6|0)==(0|0);
 if ($8) {
  $$0 = -6;
  return ($$0|0);
 }
 $9 = HEAP8[$6>>0]|0;
 $10 = ($9<<24>>24)!=(49);
 $11 = ($7|0)!=(56);
 $or$cond = $11 | $10;
 if ($or$cond) {
  $$0 = -6;
  return ($$0|0);
 }
 $12 = ($0|0)==(0|0);
 if ($12) {
  $$0 = -2;
  return ($$0|0);
 }
 $13 = ((($0)) + 24|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($0)) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  HEAP32[$14>>2] = 54;
  $17 = ((($0)) + 40|0);
  HEAP32[$17>>2] = 0;
  $38 = 54;
 } else {
  $38 = $15;
 }
 $18 = ((($0)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  HEAP32[$18>>2] = 55;
 }
 $21 = ($1|0)==(-1);
 $$ = $21 ? 6 : $1;
 $22 = ($3|0)<(0);
 if ($22) {
  $23 = (0 - ($3))|0;
  $$0113 = 0;$$0115 = $23;
 } else {
  $24 = ($3|0)>(15);
  $25 = (($3) + -16)|0;
  $$116 = $24 ? $25 : $3;
  $$117 = $24 ? 2 : 1;
  $$0113 = $$117;$$0115 = $$116;
 }
 $$off = (($4) + -1)|0;
 $26 = ($$off>>>0)>(8);
 $27 = ($2|0)!=(8);
 $or$cond5 = $27 | $26;
 $28 = $$0115 & -8;
 $29 = ($28|0)!=(8);
 $30 = $or$cond5 | $29;
 $31 = ($$>>>0)>(9);
 $32 = $31 | $30;
 $33 = ($5>>>0)>(4);
 $34 = $33 | $32;
 if ($34) {
  $$0 = -2;
  return ($$0|0);
 }
 $35 = ($$0115|0)==(8);
 $$$0115 = $35 ? 9 : $$0115;
 $36 = ((($0)) + 40|0);
 $37 = HEAP32[$36>>2]|0;
 $39 = (FUNCTION_TABLE_iiii[$38 & 63]($37,1,5828)|0);
 $40 = ($39|0)==(0|0);
 if ($40) {
  $$0 = -4;
  return ($$0|0);
 }
 $41 = ((($0)) + 28|0);
 HEAP32[$41>>2] = $39;
 HEAP32[$39>>2] = $0;
 $42 = ((($39)) + 24|0);
 HEAP32[$42>>2] = $$0113;
 $43 = ((($39)) + 28|0);
 HEAP32[$43>>2] = 0;
 $44 = ((($39)) + 48|0);
 HEAP32[$44>>2] = $$$0115;
 $45 = 1 << $$$0115;
 $46 = ((($39)) + 44|0);
 HEAP32[$46>>2] = $45;
 $47 = (($45) + -1)|0;
 $48 = ((($39)) + 52|0);
 HEAP32[$48>>2] = $47;
 $49 = (($4) + 7)|0;
 $50 = ((($39)) + 80|0);
 HEAP32[$50>>2] = $49;
 $51 = 1 << $49;
 $52 = ((($39)) + 76|0);
 HEAP32[$52>>2] = $51;
 $53 = (($51) + -1)|0;
 $54 = ((($39)) + 84|0);
 HEAP32[$54>>2] = $53;
 $55 = (($4) + 9)|0;
 $56 = (($55>>>0) / 3)&-1;
 $57 = ((($39)) + 88|0);
 HEAP32[$57>>2] = $56;
 $58 = HEAP32[$14>>2]|0;
 $59 = HEAP32[$36>>2]|0;
 $60 = (FUNCTION_TABLE_iiii[$58 & 63]($59,$45,2)|0);
 $61 = ((($39)) + 56|0);
 HEAP32[$61>>2] = $60;
 $62 = HEAP32[$14>>2]|0;
 $63 = HEAP32[$36>>2]|0;
 $64 = HEAP32[$46>>2]|0;
 $65 = (FUNCTION_TABLE_iiii[$62 & 63]($63,$64,2)|0);
 $66 = ((($39)) + 64|0);
 HEAP32[$66>>2] = $65;
 $67 = HEAP32[$14>>2]|0;
 $68 = HEAP32[$36>>2]|0;
 $69 = HEAP32[$52>>2]|0;
 $70 = (FUNCTION_TABLE_iiii[$67 & 63]($68,$69,2)|0);
 $71 = ((($39)) + 68|0);
 HEAP32[$71>>2] = $70;
 $72 = ((($39)) + 5824|0);
 HEAP32[$72>>2] = 0;
 $73 = (($4) + 6)|0;
 $74 = 1 << $73;
 $75 = ((($39)) + 5788|0);
 HEAP32[$75>>2] = $74;
 $76 = HEAP32[$14>>2]|0;
 $77 = HEAP32[$36>>2]|0;
 $78 = (FUNCTION_TABLE_iiii[$76 & 63]($77,$74,4)|0);
 $79 = ((($39)) + 8|0);
 HEAP32[$79>>2] = $78;
 $80 = HEAP32[$75>>2]|0;
 $81 = $80 << 2;
 $82 = ((($39)) + 12|0);
 HEAP32[$82>>2] = $81;
 $83 = HEAP32[$61>>2]|0;
 $84 = ($83|0)==(0|0);
 if (!($84)) {
  $85 = HEAP32[$66>>2]|0;
  $86 = ($85|0)==(0|0);
  if (!($86)) {
   $87 = HEAP32[$71>>2]|0;
   $88 = ($87|0)==(0|0);
   $89 = ($78|0)==(0|0);
   $or$cond118 = $88 | $89;
   if (!($or$cond118)) {
    $119 = $80 >>> 1;
    $120 = (($78) + ($119<<1)|0);
    $121 = ((($39)) + 5796|0);
    HEAP32[$121>>2] = $120;
    $122 = ($80*3)|0;
    $123 = (($78) + ($122)|0);
    $124 = ((($39)) + 5784|0);
    HEAP32[$124>>2] = $123;
    $125 = ((($39)) + 132|0);
    HEAP32[$125>>2] = $$;
    $126 = ((($39)) + 136|0);
    HEAP32[$126>>2] = $5;
    $127 = ((($39)) + 36|0);
    HEAP8[$127>>0] = 8;
    $128 = (_deflateReset($0)|0);
    $$0 = $128;
    return ($$0|0);
   }
  }
 }
 $90 = ((($39)) + 4|0);
 HEAP32[$90>>2] = 666;
 $91 = HEAP32[(9372)>>2]|0;
 HEAP32[$13>>2] = $91;
 $92 = HEAP32[$41>>2]|0;
 $93 = ($92|0)==(0|0);
 if ($93) {
  $$0 = -4;
  return ($$0|0);
 }
 $94 = ((($92)) + 4|0);
 $95 = HEAP32[$94>>2]|0;
 switch ($95|0) {
 case 42: case 69: case 73: case 91: case 103: case 113: case 666:  {
  break;
 }
 default: {
  $$0 = -4;
  return ($$0|0);
 }
 }
 $96 = ((($92)) + 8|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ($97|0)==(0|0);
 if ($98) {
  $$in$i = $92;
 } else {
  $99 = HEAP32[$18>>2]|0;
  $100 = HEAP32[$36>>2]|0;
  FUNCTION_TABLE_vii[$99 & 127]($100,$97);
  $$pre$i = HEAP32[$41>>2]|0;
  $$in$i = $$pre$i;
 }
 $101 = ((($$in$i)) + 68|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)==(0|0);
 if ($103) {
  $$in51$i = $$in$i;
 } else {
  $104 = HEAP32[$18>>2]|0;
  $105 = HEAP32[$36>>2]|0;
  FUNCTION_TABLE_vii[$104 & 127]($105,$102);
  $$pre43$i = HEAP32[$41>>2]|0;
  $$in51$i = $$pre43$i;
 }
 $106 = ((($$in51$i)) + 64|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)==(0|0);
 if ($108) {
  $$in52$i = $$in51$i;
 } else {
  $109 = HEAP32[$18>>2]|0;
  $110 = HEAP32[$36>>2]|0;
  FUNCTION_TABLE_vii[$109 & 127]($110,$107);
  $$pre44$i = HEAP32[$41>>2]|0;
  $$in52$i = $$pre44$i;
 }
 $111 = ((($$in52$i)) + 56|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ($112|0)==(0|0);
 if ($113) {
  $118 = $$in52$i;
 } else {
  $114 = HEAP32[$18>>2]|0;
  $115 = HEAP32[$36>>2]|0;
  FUNCTION_TABLE_vii[$114 & 127]($115,$112);
  $$pre45$i = HEAP32[$41>>2]|0;
  $118 = $$pre45$i;
 }
 $116 = HEAP32[$18>>2]|0;
 $117 = HEAP32[$36>>2]|0;
 FUNCTION_TABLE_vii[$116 & 127]($117,$118);
 HEAP32[$41>>2] = 0;
 $$0 = -4;
 return ($$0|0);
}
function _deflateReset($0) {
 $0 = $0|0;
 var $$0$i4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0$i4 = -2;
  return ($$0$i4|0);
 }
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0$i4 = -2;
  return ($$0$i4|0);
 }
 $5 = ((($0)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0$i4 = -2;
  return ($$0$i4|0);
 }
 $8 = ((($0)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0$i4 = -2;
  return ($$0$i4|0);
 }
 $11 = ((($0)) + 20|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($0)) + 8|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 24|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($0)) + 44|0);
 HEAP32[$14>>2] = 2;
 $15 = ((($3)) + 20|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 16|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($3)) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)<(0);
 $22 = (0 - ($20))|0;
 if ($21) {
  HEAP32[$19>>2] = $22;
  $23 = $22;
 } else {
  $23 = $20;
 }
 $24 = ($23|0)!=(0);
 $25 = $24 ? 42 : 113;
 $26 = ((($3)) + 4|0);
 HEAP32[$26>>2] = $25;
 $27 = ($23|0)==(2);
 if ($27) {
  $28 = (_crc32(0,0,0)|0);
  $31 = $28;
 } else {
  $29 = (_adler32(0,0,0)|0);
  $31 = $29;
 }
 $30 = ((($0)) + 48|0);
 HEAP32[$30>>2] = $31;
 $32 = ((($3)) + 40|0);
 HEAP32[$32>>2] = 0;
 __tr_init($3);
 $33 = HEAP32[$2>>2]|0;
 $34 = ((($33)) + 44|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 << 1;
 $37 = ((($33)) + 60|0);
 HEAP32[$37>>2] = $36;
 $38 = ((($33)) + 68|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($33)) + 76|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + -1)|0;
 $43 = (($39) + ($42<<1)|0);
 HEAP16[$43>>1] = 0;
 $44 = $42 << 1;
 _memset(($39|0),0,($44|0))|0;
 $45 = ((($33)) + 132|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (((8620 + (($46*12)|0)|0)) + 2|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48&65535;
 $50 = ((($33)) + 128|0);
 HEAP32[$50>>2] = $49;
 $51 = (8620 + (($46*12)|0)|0);
 $52 = HEAP16[$51>>1]|0;
 $53 = $52&65535;
 $54 = ((($33)) + 140|0);
 HEAP32[$54>>2] = $53;
 $55 = (((8620 + (($46*12)|0)|0)) + 4|0);
 $56 = HEAP16[$55>>1]|0;
 $57 = $56&65535;
 $58 = ((($33)) + 144|0);
 HEAP32[$58>>2] = $57;
 $59 = (((8620 + (($46*12)|0)|0)) + 6|0);
 $60 = HEAP16[$59>>1]|0;
 $61 = $60&65535;
 $62 = ((($33)) + 124|0);
 HEAP32[$62>>2] = $61;
 $63 = ((($33)) + 108|0);
 HEAP32[$63>>2] = 0;
 $64 = ((($33)) + 92|0);
 HEAP32[$64>>2] = 0;
 $65 = ((($33)) + 116|0);
 HEAP32[$65>>2] = 0;
 $66 = ((($33)) + 5812|0);
 HEAP32[$66>>2] = 0;
 $67 = ((($33)) + 120|0);
 HEAP32[$67>>2] = 2;
 $68 = ((($33)) + 96|0);
 HEAP32[$68>>2] = 2;
 $69 = ((($33)) + 104|0);
 HEAP32[$69>>2] = 0;
 $70 = ((($33)) + 72|0);
 HEAP32[$70>>2] = 0;
 $$0$i4 = 0;
 return ($$0$i4|0);
}
function _deflate_stored($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$i = 0, $$$i73 = 0, $$$i75 = 0, $$$i77 = 0, $$0 = 0, $$72 = 0, $$pr = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -5)|0;
 $5 = ($4>>>0)<(65535);
 $$ = $5 ? $4 : 65535;
 $6 = ((($0)) + 116|0);
 $7 = ((($0)) + 108|0);
 $8 = ((($0)) + 92|0);
 $9 = ((($0)) + 44|0);
 $10 = ((($0)) + 56|0);
 while(1) {
  $11 = HEAP32[$6>>2]|0;
  $12 = ($11>>>0)<(2);
  if ($12) {
   _fill_window($0);
   $13 = HEAP32[$6>>2]|0;
   $14 = $13 | $1;
   $15 = ($14|0)==(0);
   if ($15) {
    $$0 = 0;
    label = 35;
    break;
   }
   $16 = ($13|0)==(0);
   if ($16) {
    label = 20;
    break;
   } else {
    $19 = $13;
   }
  } else {
   $19 = $11;
  }
  $17 = HEAP32[$7>>2]|0;
  $18 = (($17) + ($19))|0;
  HEAP32[$7>>2] = $18;
  HEAP32[$6>>2] = 0;
  $20 = HEAP32[$8>>2]|0;
  $21 = (($20) + ($$))|0;
  $22 = ($18|0)!=(0);
  $23 = ($18>>>0)<($21>>>0);
  $or$cond = $22 & $23;
  if ($or$cond) {
   $62 = $20;$63 = $18;
  } else {
   $24 = (($18) - ($21))|0;
   HEAP32[$6>>2] = $24;
   HEAP32[$7>>2] = $21;
   $25 = ($20|0)>(-1);
   if ($25) {
    $26 = HEAP32[$10>>2]|0;
    $27 = (($26) + ($20)|0);
    $28 = $27;
   } else {
    $28 = 0;
   }
   __tr_flush_block($0,$28,$$,0);
   $29 = HEAP32[$7>>2]|0;
   HEAP32[$8>>2] = $29;
   $30 = HEAP32[$0>>2]|0;
   $31 = ((($30)) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   __tr_flush_bits($32);
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($30)) + 16|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($34>>>0)>($36>>>0);
   $$$i = $37 ? $36 : $34;
   $38 = ($$$i|0)==(0);
   if (!($38)) {
    $39 = ((($30)) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ((($32)) + 16|0);
    $42 = HEAP32[$41>>2]|0;
    _memcpy(($40|0),($42|0),($$$i|0))|0;
    $43 = HEAP32[$39>>2]|0;
    $44 = (($43) + ($$$i)|0);
    HEAP32[$39>>2] = $44;
    $45 = HEAP32[$41>>2]|0;
    $46 = (($45) + ($$$i)|0);
    HEAP32[$41>>2] = $46;
    $47 = ((($30)) + 20|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (($48) + ($$$i))|0;
    HEAP32[$47>>2] = $49;
    $50 = HEAP32[$35>>2]|0;
    $51 = (($50) - ($$$i))|0;
    HEAP32[$35>>2] = $51;
    $52 = HEAP32[$33>>2]|0;
    $53 = (($52) - ($$$i))|0;
    HEAP32[$33>>2] = $53;
    $54 = ($53|0)==(0);
    if ($54) {
     $55 = ((($32)) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     HEAP32[$41>>2] = $56;
    }
   }
   $57 = HEAP32[$0>>2]|0;
   $58 = ((($57)) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($59|0)==(0);
   if ($60) {
    $$0 = 0;
    label = 35;
    break;
   }
   $$pr = HEAP32[$8>>2]|0;
   $$pre = HEAP32[$7>>2]|0;
   $62 = $$pr;$63 = $$pre;
  }
  $61 = (($63) - ($62))|0;
  $64 = HEAP32[$9>>2]|0;
  $65 = (($64) + -262)|0;
  $66 = ($61>>>0)<($65>>>0);
  if ($66) {
   continue;
  }
  $67 = ($62|0)>(-1);
  if ($67) {
   $68 = HEAP32[$10>>2]|0;
   $69 = (($68) + ($62)|0);
   $70 = $69;
  } else {
   $70 = 0;
  }
  __tr_flush_block($0,$70,$61,0);
  $71 = HEAP32[$7>>2]|0;
  HEAP32[$8>>2] = $71;
  $72 = HEAP32[$0>>2]|0;
  $73 = ((($72)) + 28|0);
  $74 = HEAP32[$73>>2]|0;
  __tr_flush_bits($74);
  $75 = ((($74)) + 20|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($72)) + 16|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($76>>>0)>($78>>>0);
  $$$i73 = $79 ? $78 : $76;
  $80 = ($$$i73|0)==(0);
  if (!($80)) {
   $81 = ((($72)) + 12|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ((($74)) + 16|0);
   $84 = HEAP32[$83>>2]|0;
   _memcpy(($82|0),($84|0),($$$i73|0))|0;
   $85 = HEAP32[$81>>2]|0;
   $86 = (($85) + ($$$i73)|0);
   HEAP32[$81>>2] = $86;
   $87 = HEAP32[$83>>2]|0;
   $88 = (($87) + ($$$i73)|0);
   HEAP32[$83>>2] = $88;
   $89 = ((($72)) + 20|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = (($90) + ($$$i73))|0;
   HEAP32[$89>>2] = $91;
   $92 = HEAP32[$77>>2]|0;
   $93 = (($92) - ($$$i73))|0;
   HEAP32[$77>>2] = $93;
   $94 = HEAP32[$75>>2]|0;
   $95 = (($94) - ($$$i73))|0;
   HEAP32[$75>>2] = $95;
   $96 = ($95|0)==(0);
   if ($96) {
    $97 = ((($74)) + 8|0);
    $98 = HEAP32[$97>>2]|0;
    HEAP32[$83>>2] = $98;
   }
  }
  $99 = HEAP32[$0>>2]|0;
  $100 = ((($99)) + 16|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ($101|0)==(0);
  if ($102) {
   $$0 = 0;
   label = 35;
   break;
  }
 }
 if ((label|0) == 20) {
  $103 = ((($0)) + 5812|0);
  HEAP32[$103>>2] = 0;
  $104 = ($1|0)==(4);
  $105 = HEAP32[$7>>2]|0;
  $106 = HEAP32[$8>>2]|0;
  if ($104) {
   $107 = ($106|0)>(-1);
   if ($107) {
    $108 = HEAP32[$10>>2]|0;
    $109 = (($108) + ($106)|0);
    $111 = $109;
   } else {
    $111 = 0;
   }
   $110 = (($105) - ($106))|0;
   __tr_flush_block($0,$111,$110,1);
   $112 = HEAP32[$7>>2]|0;
   HEAP32[$8>>2] = $112;
   $113 = HEAP32[$0>>2]|0;
   $114 = ((($113)) + 28|0);
   $115 = HEAP32[$114>>2]|0;
   __tr_flush_bits($115);
   $116 = ((($115)) + 20|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = ((($113)) + 16|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ($117>>>0)>($119>>>0);
   $$$i75 = $120 ? $119 : $117;
   $121 = ($$$i75|0)==(0);
   if (!($121)) {
    $122 = ((($113)) + 12|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = ((($115)) + 16|0);
    $125 = HEAP32[$124>>2]|0;
    _memcpy(($123|0),($125|0),($$$i75|0))|0;
    $126 = HEAP32[$122>>2]|0;
    $127 = (($126) + ($$$i75)|0);
    HEAP32[$122>>2] = $127;
    $128 = HEAP32[$124>>2]|0;
    $129 = (($128) + ($$$i75)|0);
    HEAP32[$124>>2] = $129;
    $130 = ((($113)) + 20|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (($131) + ($$$i75))|0;
    HEAP32[$130>>2] = $132;
    $133 = HEAP32[$118>>2]|0;
    $134 = (($133) - ($$$i75))|0;
    HEAP32[$118>>2] = $134;
    $135 = HEAP32[$116>>2]|0;
    $136 = (($135) - ($$$i75))|0;
    HEAP32[$116>>2] = $136;
    $137 = ($136|0)==(0);
    if ($137) {
     $138 = ((($115)) + 8|0);
     $139 = HEAP32[$138>>2]|0;
     HEAP32[$124>>2] = $139;
    }
   }
   $140 = HEAP32[$0>>2]|0;
   $141 = ((($140)) + 16|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ($142|0)==(0);
   $$72 = $143 ? 2 : 3;
   $$0 = $$72;
   return ($$0|0);
  }
  $144 = ($105|0)>($106|0);
  if ($144) {
   $145 = ($106|0)>(-1);
   if ($145) {
    $146 = HEAP32[$10>>2]|0;
    $147 = (($146) + ($106)|0);
    $149 = $147;
   } else {
    $149 = 0;
   }
   $148 = (($105) - ($106))|0;
   __tr_flush_block($0,$149,$148,0);
   $150 = HEAP32[$7>>2]|0;
   HEAP32[$8>>2] = $150;
   $151 = HEAP32[$0>>2]|0;
   $152 = ((($151)) + 28|0);
   $153 = HEAP32[$152>>2]|0;
   __tr_flush_bits($153);
   $154 = ((($153)) + 20|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = ((($151)) + 16|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = ($155>>>0)>($157>>>0);
   $$$i77 = $158 ? $157 : $155;
   $159 = ($$$i77|0)==(0);
   if (!($159)) {
    $160 = ((($151)) + 12|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = ((($153)) + 16|0);
    $163 = HEAP32[$162>>2]|0;
    _memcpy(($161|0),($163|0),($$$i77|0))|0;
    $164 = HEAP32[$160>>2]|0;
    $165 = (($164) + ($$$i77)|0);
    HEAP32[$160>>2] = $165;
    $166 = HEAP32[$162>>2]|0;
    $167 = (($166) + ($$$i77)|0);
    HEAP32[$162>>2] = $167;
    $168 = ((($151)) + 20|0);
    $169 = HEAP32[$168>>2]|0;
    $170 = (($169) + ($$$i77))|0;
    HEAP32[$168>>2] = $170;
    $171 = HEAP32[$156>>2]|0;
    $172 = (($171) - ($$$i77))|0;
    HEAP32[$156>>2] = $172;
    $173 = HEAP32[$154>>2]|0;
    $174 = (($173) - ($$$i77))|0;
    HEAP32[$154>>2] = $174;
    $175 = ($174|0)==(0);
    if ($175) {
     $176 = ((($153)) + 8|0);
     $177 = HEAP32[$176>>2]|0;
     HEAP32[$162>>2] = $177;
    }
   }
   $178 = HEAP32[$0>>2]|0;
   $179 = ((($178)) + 16|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = ($180|0)==(0);
   if ($181) {
    $$0 = 0;
    return ($$0|0);
   }
  }
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 35) {
  return ($$0|0);
 }
 return (0)|0;
}
function _deflate_fast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$i = 0, $$$i139 = 0, $$$i141 = 0, $$0 = 0, $$0136 = 0, $$138 = 0, $$pr = 0, $$pre = 0, $$pre144 = 0, $$pre145 = 0, $$pre146 = 0, $$pre147 = 0, $$pre148 = 0, $$pre149 = 0, $$pre150 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond137 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 116|0);
 $3 = ($1|0)==(0);
 $4 = ((($0)) + 72|0);
 $5 = ((($0)) + 88|0);
 $6 = ((($0)) + 56|0);
 $7 = ((($0)) + 108|0);
 $8 = ((($0)) + 84|0);
 $9 = ((($0)) + 68|0);
 $10 = ((($0)) + 64|0);
 $11 = ((($0)) + 52|0);
 $12 = ((($0)) + 44|0);
 $13 = ((($0)) + 96|0);
 $14 = ((($0)) + 5784|0);
 $15 = ((($0)) + 5796|0);
 $16 = ((($0)) + 112|0);
 $17 = ((($0)) + 5792|0);
 $18 = ((($0)) + 5788|0);
 $19 = ((($0)) + 128|0);
 $20 = ((($0)) + 92|0);
 while(1) {
  $21 = HEAP32[$2>>2]|0;
  $22 = ($21>>>0)<(262);
  if ($22) {
   _fill_window($0);
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23>>>0)<(262);
   $or$cond = $3 & $24;
   if ($or$cond) {
    $$0 = 0;
    label = 39;
    break;
   }
   $25 = ($23|0)==(0);
   if ($25) {
    label = 24;
    break;
   }
   $26 = ($23>>>0)>(2);
   if ($26) {
    label = 6;
   } else {
    label = 9;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   label = 0;
   $27 = HEAP32[$4>>2]|0;
   $28 = HEAP32[$5>>2]|0;
   $29 = $27 << $28;
   $30 = HEAP32[$6>>2]|0;
   $31 = HEAP32[$7>>2]|0;
   $32 = (($31) + 2)|0;
   $33 = (($30) + ($32)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = $35 ^ $29;
   $37 = HEAP32[$8>>2]|0;
   $38 = $36 & $37;
   HEAP32[$4>>2] = $38;
   $39 = HEAP32[$9>>2]|0;
   $40 = (($39) + ($38<<1)|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = HEAP32[$10>>2]|0;
   $43 = HEAP32[$11>>2]|0;
   $44 = $43 & $31;
   $45 = (($42) + ($44<<1)|0);
   HEAP16[$45>>1] = $41;
   $46 = $41&65535;
   $47 = $31&65535;
   HEAP16[$40>>1] = $47;
   $48 = ($41<<16>>16)==(0);
   if ($48) {
    label = 9;
   } else {
    $49 = (($31) - ($46))|0;
    $50 = HEAP32[$12>>2]|0;
    $51 = (($50) + -262)|0;
    $52 = ($49>>>0)>($51>>>0);
    if ($52) {
     label = 9;
    } else {
     $53 = (_longest_match($0,$46)|0);
     HEAP32[$13>>2] = $53;
     $54 = $53;
    }
   }
  }
  if ((label|0) == 9) {
   label = 0;
   $$pr = HEAP32[$13>>2]|0;
   $54 = $$pr;
  }
  $55 = ($54>>>0)>(2);
  $56 = HEAP32[$14>>2]|0;
  $57 = HEAP32[$15>>2]|0;
  do {
   if ($55) {
    $58 = (($54) + 253)|0;
    $59 = $58&255;
    $60 = HEAP32[$7>>2]|0;
    $61 = HEAP32[$16>>2]|0;
    $62 = (($60) - ($61))|0;
    $63 = $62&65535;
    $64 = HEAP32[$17>>2]|0;
    $65 = (($57) + ($64<<1)|0);
    HEAP16[$65>>1] = $63;
    $66 = (($64) + 1)|0;
    HEAP32[$17>>2] = $66;
    $67 = (($56) + ($64)|0);
    HEAP8[$67>>0] = $59;
    $68 = (($62) + 65535)|0;
    $69 = $58 & 255;
    $70 = (19336 + ($69)|0);
    $71 = HEAP8[$70>>0]|0;
    $72 = $71&255;
    $73 = $72 | 256;
    $74 = (($73) + 1)|0;
    $75 = (((($0)) + 148|0) + ($74<<2)|0);
    $76 = HEAP16[$75>>1]|0;
    $77 = (($76) + 1)<<16>>16;
    HEAP16[$75>>1] = $77;
    $78 = $68 & 65535;
    $79 = ($78>>>0)<(256);
    $80 = $78 >>> 7;
    $81 = (($80) + 256)|0;
    $$sink = $79 ? $78 : $81;
    $82 = (18824 + ($$sink)|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $83&255;
    $85 = (((($0)) + 2440|0) + ($84<<2)|0);
    $86 = HEAP16[$85>>1]|0;
    $87 = (($86) + 1)<<16>>16;
    HEAP16[$85>>1] = $87;
    $88 = HEAP32[$17>>2]|0;
    $89 = HEAP32[$18>>2]|0;
    $90 = (($89) + -1)|0;
    $91 = ($88|0)==($90|0);
    $92 = $91&1;
    $93 = HEAP32[$13>>2]|0;
    $94 = HEAP32[$2>>2]|0;
    $95 = (($94) - ($93))|0;
    HEAP32[$2>>2] = $95;
    $96 = HEAP32[$19>>2]|0;
    $97 = ($93>>>0)<=($96>>>0);
    $98 = ($95>>>0)>(2);
    $or$cond137 = $98 & $97;
    if (!($or$cond137)) {
     $119 = HEAP32[$7>>2]|0;
     $120 = (($119) + ($93))|0;
     HEAP32[$7>>2] = $120;
     HEAP32[$13>>2] = 0;
     $121 = HEAP32[$6>>2]|0;
     $122 = (($121) + ($120)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     HEAP32[$4>>2] = $124;
     $125 = HEAP32[$5>>2]|0;
     $126 = $124 << $125;
     $127 = (($120) + 1)|0;
     $128 = (($121) + ($127)|0);
     $129 = HEAP8[$128>>0]|0;
     $130 = $129&255;
     $131 = $130 ^ $126;
     $132 = HEAP32[$8>>2]|0;
     $133 = $131 & $132;
     HEAP32[$4>>2] = $133;
     $$0136 = $92;$161 = $120;
     break;
    }
    $99 = (($93) + -1)|0;
    HEAP32[$13>>2] = $99;
    $$pre = HEAP32[$7>>2]|0;
    $$pre144 = HEAP32[$4>>2]|0;
    $$pre145 = HEAP32[$5>>2]|0;
    $$pre146 = HEAP32[$6>>2]|0;
    $$pre147 = HEAP32[$8>>2]|0;
    $$pre148 = HEAP32[$9>>2]|0;
    $$pre149 = HEAP32[$10>>2]|0;
    $$pre150 = HEAP32[$11>>2]|0;
    $101 = $$pre;$103 = $$pre144;$116 = $99;
    while(1) {
     $100 = (($101) + 1)|0;
     HEAP32[$7>>2] = $100;
     $102 = $103 << $$pre145;
     $104 = (($101) + 3)|0;
     $105 = (($$pre146) + ($104)|0);
     $106 = HEAP8[$105>>0]|0;
     $107 = $106&255;
     $108 = $107 ^ $102;
     $109 = $108 & $$pre147;
     HEAP32[$4>>2] = $109;
     $110 = (($$pre148) + ($109<<1)|0);
     $111 = HEAP16[$110>>1]|0;
     $112 = $$pre150 & $100;
     $113 = (($$pre149) + ($112<<1)|0);
     HEAP16[$113>>1] = $111;
     $114 = $100&65535;
     HEAP16[$110>>1] = $114;
     $115 = (($116) + -1)|0;
     HEAP32[$13>>2] = $115;
     $117 = ($115|0)==(0);
     if ($117) {
      break;
     } else {
      $101 = $100;$103 = $109;$116 = $115;
     }
    }
    $118 = (($101) + 2)|0;
    HEAP32[$7>>2] = $118;
    $$0136 = $92;$161 = $118;
   } else {
    $134 = HEAP32[$6>>2]|0;
    $135 = HEAP32[$7>>2]|0;
    $136 = (($134) + ($135)|0);
    $137 = HEAP8[$136>>0]|0;
    $138 = HEAP32[$17>>2]|0;
    $139 = (($57) + ($138<<1)|0);
    HEAP16[$139>>1] = 0;
    $140 = (($138) + 1)|0;
    HEAP32[$17>>2] = $140;
    $141 = (($56) + ($138)|0);
    HEAP8[$141>>0] = $137;
    $142 = $137&255;
    $143 = (((($0)) + 148|0) + ($142<<2)|0);
    $144 = HEAP16[$143>>1]|0;
    $145 = (($144) + 1)<<16>>16;
    HEAP16[$143>>1] = $145;
    $146 = HEAP32[$17>>2]|0;
    $147 = HEAP32[$18>>2]|0;
    $148 = (($147) + -1)|0;
    $149 = ($146|0)==($148|0);
    $150 = $149&1;
    $151 = HEAP32[$2>>2]|0;
    $152 = (($151) + -1)|0;
    HEAP32[$2>>2] = $152;
    $153 = HEAP32[$7>>2]|0;
    $154 = (($153) + 1)|0;
    HEAP32[$7>>2] = $154;
    $$0136 = $150;$161 = $154;
   }
  } while(0);
  $155 = ($$0136|0)==(0);
  if ($155) {
   continue;
  }
  $156 = HEAP32[$20>>2]|0;
  $157 = ($156|0)>(-1);
  if ($157) {
   $158 = HEAP32[$6>>2]|0;
   $159 = (($158) + ($156)|0);
   $162 = $159;
  } else {
   $162 = 0;
  }
  $160 = (($161) - ($156))|0;
  __tr_flush_block($0,$162,$160,0);
  $163 = HEAP32[$7>>2]|0;
  HEAP32[$20>>2] = $163;
  $164 = HEAP32[$0>>2]|0;
  $165 = ((($164)) + 28|0);
  $166 = HEAP32[$165>>2]|0;
  __tr_flush_bits($166);
  $167 = ((($166)) + 20|0);
  $168 = HEAP32[$167>>2]|0;
  $169 = ((($164)) + 16|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = ($168>>>0)>($170>>>0);
  $$$i = $171 ? $170 : $168;
  $172 = ($$$i|0)==(0);
  if (!($172)) {
   $173 = ((($164)) + 12|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = ((($166)) + 16|0);
   $176 = HEAP32[$175>>2]|0;
   _memcpy(($174|0),($176|0),($$$i|0))|0;
   $177 = HEAP32[$173>>2]|0;
   $178 = (($177) + ($$$i)|0);
   HEAP32[$173>>2] = $178;
   $179 = HEAP32[$175>>2]|0;
   $180 = (($179) + ($$$i)|0);
   HEAP32[$175>>2] = $180;
   $181 = ((($164)) + 20|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = (($182) + ($$$i))|0;
   HEAP32[$181>>2] = $183;
   $184 = HEAP32[$169>>2]|0;
   $185 = (($184) - ($$$i))|0;
   HEAP32[$169>>2] = $185;
   $186 = HEAP32[$167>>2]|0;
   $187 = (($186) - ($$$i))|0;
   HEAP32[$167>>2] = $187;
   $188 = ($187|0)==(0);
   if ($188) {
    $189 = ((($166)) + 8|0);
    $190 = HEAP32[$189>>2]|0;
    HEAP32[$175>>2] = $190;
   }
  }
  $191 = HEAP32[$0>>2]|0;
  $192 = ((($191)) + 16|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = ($193|0)==(0);
  if ($194) {
   $$0 = 0;
   label = 39;
   break;
  }
 }
 if ((label|0) == 24) {
  $195 = HEAP32[$7>>2]|0;
  $196 = ($195>>>0)<(2);
  $$ = $196 ? $195 : 2;
  $197 = ((($0)) + 5812|0);
  HEAP32[$197>>2] = $$;
  $198 = ($1|0)==(4);
  if ($198) {
   $199 = HEAP32[$20>>2]|0;
   $200 = ($199|0)>(-1);
   if ($200) {
    $201 = HEAP32[$6>>2]|0;
    $202 = (($201) + ($199)|0);
    $204 = $202;
   } else {
    $204 = 0;
   }
   $203 = (($195) - ($199))|0;
   __tr_flush_block($0,$204,$203,1);
   $205 = HEAP32[$7>>2]|0;
   HEAP32[$20>>2] = $205;
   $206 = HEAP32[$0>>2]|0;
   $207 = ((($206)) + 28|0);
   $208 = HEAP32[$207>>2]|0;
   __tr_flush_bits($208);
   $209 = ((($208)) + 20|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = ((($206)) + 16|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = ($210>>>0)>($212>>>0);
   $$$i139 = $213 ? $212 : $210;
   $214 = ($$$i139|0)==(0);
   if (!($214)) {
    $215 = ((($206)) + 12|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = ((($208)) + 16|0);
    $218 = HEAP32[$217>>2]|0;
    _memcpy(($216|0),($218|0),($$$i139|0))|0;
    $219 = HEAP32[$215>>2]|0;
    $220 = (($219) + ($$$i139)|0);
    HEAP32[$215>>2] = $220;
    $221 = HEAP32[$217>>2]|0;
    $222 = (($221) + ($$$i139)|0);
    HEAP32[$217>>2] = $222;
    $223 = ((($206)) + 20|0);
    $224 = HEAP32[$223>>2]|0;
    $225 = (($224) + ($$$i139))|0;
    HEAP32[$223>>2] = $225;
    $226 = HEAP32[$211>>2]|0;
    $227 = (($226) - ($$$i139))|0;
    HEAP32[$211>>2] = $227;
    $228 = HEAP32[$209>>2]|0;
    $229 = (($228) - ($$$i139))|0;
    HEAP32[$209>>2] = $229;
    $230 = ($229|0)==(0);
    if ($230) {
     $231 = ((($208)) + 8|0);
     $232 = HEAP32[$231>>2]|0;
     HEAP32[$217>>2] = $232;
    }
   }
   $233 = HEAP32[$0>>2]|0;
   $234 = ((($233)) + 16|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = ($235|0)==(0);
   $$138 = $236 ? 2 : 3;
   $$0 = $$138;
   return ($$0|0);
  }
  $237 = HEAP32[$17>>2]|0;
  $238 = ($237|0)==(0);
  if (!($238)) {
   $239 = HEAP32[$20>>2]|0;
   $240 = ($239|0)>(-1);
   if ($240) {
    $241 = HEAP32[$6>>2]|0;
    $242 = (($241) + ($239)|0);
    $244 = $242;
   } else {
    $244 = 0;
   }
   $243 = (($195) - ($239))|0;
   __tr_flush_block($0,$244,$243,0);
   $245 = HEAP32[$7>>2]|0;
   HEAP32[$20>>2] = $245;
   $246 = HEAP32[$0>>2]|0;
   $247 = ((($246)) + 28|0);
   $248 = HEAP32[$247>>2]|0;
   __tr_flush_bits($248);
   $249 = ((($248)) + 20|0);
   $250 = HEAP32[$249>>2]|0;
   $251 = ((($246)) + 16|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = ($250>>>0)>($252>>>0);
   $$$i141 = $253 ? $252 : $250;
   $254 = ($$$i141|0)==(0);
   if (!($254)) {
    $255 = ((($246)) + 12|0);
    $256 = HEAP32[$255>>2]|0;
    $257 = ((($248)) + 16|0);
    $258 = HEAP32[$257>>2]|0;
    _memcpy(($256|0),($258|0),($$$i141|0))|0;
    $259 = HEAP32[$255>>2]|0;
    $260 = (($259) + ($$$i141)|0);
    HEAP32[$255>>2] = $260;
    $261 = HEAP32[$257>>2]|0;
    $262 = (($261) + ($$$i141)|0);
    HEAP32[$257>>2] = $262;
    $263 = ((($246)) + 20|0);
    $264 = HEAP32[$263>>2]|0;
    $265 = (($264) + ($$$i141))|0;
    HEAP32[$263>>2] = $265;
    $266 = HEAP32[$251>>2]|0;
    $267 = (($266) - ($$$i141))|0;
    HEAP32[$251>>2] = $267;
    $268 = HEAP32[$249>>2]|0;
    $269 = (($268) - ($$$i141))|0;
    HEAP32[$249>>2] = $269;
    $270 = ($269|0)==(0);
    if ($270) {
     $271 = ((($248)) + 8|0);
     $272 = HEAP32[$271>>2]|0;
     HEAP32[$257>>2] = $272;
    }
   }
   $273 = HEAP32[$0>>2]|0;
   $274 = ((($273)) + 16|0);
   $275 = HEAP32[$274>>2]|0;
   $276 = ($275|0)==(0);
   if ($276) {
    $$0 = 0;
    return ($$0|0);
   }
  }
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 39) {
  return ($$0|0);
 }
 return (0)|0;
}
function _deflate_slow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$i = 0, $$$i174 = 0, $$$i176 = 0, $$$i178 = 0, $$173 = 0, $$2 = 0, $$neg182 = 0, $$pr = 0, $$pr180 = 0, $$pre = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond186 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 116|0);
 $3 = ($1|0)==(0);
 $4 = ((($0)) + 72|0);
 $5 = ((($0)) + 88|0);
 $6 = ((($0)) + 56|0);
 $7 = ((($0)) + 108|0);
 $8 = ((($0)) + 84|0);
 $9 = ((($0)) + 68|0);
 $10 = ((($0)) + 64|0);
 $11 = ((($0)) + 52|0);
 $12 = ((($0)) + 96|0);
 $13 = ((($0)) + 120|0);
 $14 = ((($0)) + 112|0);
 $15 = ((($0)) + 100|0);
 $16 = ((($0)) + 5796|0);
 $17 = ((($0)) + 5792|0);
 $18 = ((($0)) + 5784|0);
 $19 = ((($0)) + 5788|0);
 $20 = ((($0)) + 104|0);
 $21 = ((($0)) + 92|0);
 $22 = ((($0)) + 128|0);
 $23 = ((($0)) + 44|0);
 $24 = ((($0)) + 136|0);
 L1: while(1) {
  $$pr = HEAP32[$2>>2]|0;
  $25 = $$pr;
  while(1) {
   $26 = ($25>>>0)<(262);
   if ($26) {
    _fill_window($0);
    $27 = HEAP32[$2>>2]|0;
    $28 = ($27>>>0)<(262);
    $or$cond = $3 & $28;
    if ($or$cond) {
     $$2 = 0;
     label = 55;
     break L1;
    }
    $29 = ($27|0)==(0);
    if ($29) {
     label = 38;
     break L1;
    }
    $30 = ($27>>>0)>(2);
    if ($30) {
     label = 8;
    } else {
     $31 = HEAP32[$12>>2]|0;
     HEAP32[$13>>2] = $31;
     $32 = HEAP32[$14>>2]|0;
     HEAP32[$15>>2] = $32;
     HEAP32[$12>>2] = 2;
     $352 = 2;
     label = 16;
    }
   } else {
    label = 8;
   }
   do {
    if ((label|0) == 8) {
     label = 0;
     $33 = HEAP32[$4>>2]|0;
     $34 = HEAP32[$5>>2]|0;
     $35 = $33 << $34;
     $36 = HEAP32[$6>>2]|0;
     $37 = HEAP32[$7>>2]|0;
     $38 = (($37) + 2)|0;
     $39 = (($36) + ($38)|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = $40&255;
     $42 = $41 ^ $35;
     $43 = HEAP32[$8>>2]|0;
     $44 = $42 & $43;
     HEAP32[$4>>2] = $44;
     $45 = HEAP32[$9>>2]|0;
     $46 = (($45) + ($44<<1)|0);
     $47 = HEAP16[$46>>1]|0;
     $48 = HEAP32[$10>>2]|0;
     $49 = HEAP32[$11>>2]|0;
     $50 = $49 & $37;
     $51 = (($48) + ($50<<1)|0);
     HEAP16[$51>>1] = $47;
     $52 = $47&65535;
     $53 = $37&65535;
     HEAP16[$46>>1] = $53;
     $54 = HEAP32[$12>>2]|0;
     HEAP32[$13>>2] = $54;
     $55 = HEAP32[$14>>2]|0;
     HEAP32[$15>>2] = $55;
     HEAP32[$12>>2] = 2;
     $56 = ($47<<16>>16)==(0);
     if ($56) {
      $352 = 2;
      label = 16;
     } else {
      $57 = HEAP32[$22>>2]|0;
      $58 = ($54>>>0)<($57>>>0);
      if ($58) {
       $59 = HEAP32[$7>>2]|0;
       $60 = (($59) - ($52))|0;
       $61 = HEAP32[$23>>2]|0;
       $62 = (($61) + -262)|0;
       $63 = ($60>>>0)>($62>>>0);
       if ($63) {
        $352 = 2;
        label = 16;
       } else {
        $64 = (_longest_match($0,$52)|0);
        HEAP32[$12>>2] = $64;
        $65 = ($64>>>0)<(6);
        if ($65) {
         $66 = HEAP32[$24>>2]|0;
         $67 = ($66|0)==(1);
         if (!($67)) {
          $68 = ($64|0)==(3);
          if (!($68)) {
           $352 = $64;
           label = 16;
           break;
          }
          $69 = HEAP32[$7>>2]|0;
          $70 = HEAP32[$14>>2]|0;
          $71 = (($69) - ($70))|0;
          $72 = ($71>>>0)>(4096);
          if (!($72)) {
           $352 = 3;
           label = 16;
           break;
          }
         }
         HEAP32[$12>>2] = 2;
         $352 = 2;
         label = 16;
        } else {
         $352 = $64;
         label = 16;
        }
       }
      } else {
       $73 = $54;$75 = 2;
      }
     }
    }
   } while(0);
   if ((label|0) == 16) {
    label = 0;
    $$pr180 = HEAP32[$13>>2]|0;
    $73 = $$pr180;$75 = $352;
   }
   $74 = ($73>>>0)<(3);
   $76 = ($75>>>0)>($73>>>0);
   $or$cond186 = $74 | $76;
   if (!($or$cond186)) {
    break;
   }
   $185 = HEAP32[$20>>2]|0;
   $186 = ($185|0)==(0);
   if ($186) {
    HEAP32[$20>>2] = 1;
    $249 = HEAP32[$7>>2]|0;
    $250 = (($249) + 1)|0;
    HEAP32[$7>>2] = $250;
    $251 = HEAP32[$2>>2]|0;
    $252 = (($251) + -1)|0;
    HEAP32[$2>>2] = $252;
    $25 = $252;
    continue;
   }
   $187 = HEAP32[$6>>2]|0;
   $188 = HEAP32[$7>>2]|0;
   $189 = (($188) + -1)|0;
   $190 = (($187) + ($189)|0);
   $191 = HEAP8[$190>>0]|0;
   $192 = HEAP32[$16>>2]|0;
   $193 = HEAP32[$17>>2]|0;
   $194 = (($192) + ($193<<1)|0);
   HEAP16[$194>>1] = 0;
   $195 = HEAP32[$18>>2]|0;
   $196 = (($193) + 1)|0;
   HEAP32[$17>>2] = $196;
   $197 = (($195) + ($193)|0);
   HEAP8[$197>>0] = $191;
   $198 = $191&255;
   $199 = (((($0)) + 148|0) + ($198<<2)|0);
   $200 = HEAP16[$199>>1]|0;
   $201 = (($200) + 1)<<16>>16;
   HEAP16[$199>>1] = $201;
   $202 = HEAP32[$17>>2]|0;
   $203 = HEAP32[$19>>2]|0;
   $204 = (($203) + -1)|0;
   $205 = ($202|0)==($204|0);
   if ($205) {
    $206 = HEAP32[$21>>2]|0;
    $207 = ($206|0)>(-1);
    if ($207) {
     $208 = HEAP32[$6>>2]|0;
     $209 = (($208) + ($206)|0);
     $212 = $209;
    } else {
     $212 = 0;
    }
    $210 = HEAP32[$7>>2]|0;
    $211 = (($210) - ($206))|0;
    __tr_flush_block($0,$212,$211,0);
    $213 = HEAP32[$7>>2]|0;
    HEAP32[$21>>2] = $213;
    $214 = HEAP32[$0>>2]|0;
    $215 = ((($214)) + 28|0);
    $216 = HEAP32[$215>>2]|0;
    __tr_flush_bits($216);
    $217 = ((($216)) + 20|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = ((($214)) + 16|0);
    $220 = HEAP32[$219>>2]|0;
    $221 = ($218>>>0)>($220>>>0);
    $$$i174 = $221 ? $220 : $218;
    $222 = ($$$i174|0)==(0);
    if (!($222)) {
     $223 = ((($214)) + 12|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = ((($216)) + 16|0);
     $226 = HEAP32[$225>>2]|0;
     _memcpy(($224|0),($226|0),($$$i174|0))|0;
     $227 = HEAP32[$223>>2]|0;
     $228 = (($227) + ($$$i174)|0);
     HEAP32[$223>>2] = $228;
     $229 = HEAP32[$225>>2]|0;
     $230 = (($229) + ($$$i174)|0);
     HEAP32[$225>>2] = $230;
     $231 = ((($214)) + 20|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = (($232) + ($$$i174))|0;
     HEAP32[$231>>2] = $233;
     $234 = HEAP32[$219>>2]|0;
     $235 = (($234) - ($$$i174))|0;
     HEAP32[$219>>2] = $235;
     $236 = HEAP32[$217>>2]|0;
     $237 = (($236) - ($$$i174))|0;
     HEAP32[$217>>2] = $237;
     $238 = ($237|0)==(0);
     if ($238) {
      $239 = ((($216)) + 8|0);
      $240 = HEAP32[$239>>2]|0;
      HEAP32[$225>>2] = $240;
     }
    }
   }
   $241 = HEAP32[$7>>2]|0;
   $242 = (($241) + 1)|0;
   HEAP32[$7>>2] = $242;
   $243 = HEAP32[$2>>2]|0;
   $244 = (($243) + -1)|0;
   HEAP32[$2>>2] = $244;
   $245 = HEAP32[$0>>2]|0;
   $246 = ((($245)) + 16|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = ($247|0)==(0);
   if ($248) {
    $$2 = 0;
    label = 55;
    break L1;
   } else {
    $25 = $244;
   }
  }
  $77 = HEAP32[$7>>2]|0;
  $78 = HEAP32[$2>>2]|0;
  $79 = (($77) + -3)|0;
  $80 = (($79) + ($78))|0;
  $81 = (($73) + 253)|0;
  $82 = $81&255;
  $83 = (($77) + 65535)|0;
  $84 = HEAP32[$15>>2]|0;
  $85 = (($83) - ($84))|0;
  $86 = $85&65535;
  $87 = HEAP32[$16>>2]|0;
  $88 = HEAP32[$17>>2]|0;
  $89 = (($87) + ($88<<1)|0);
  HEAP16[$89>>1] = $86;
  $90 = HEAP32[$18>>2]|0;
  $91 = (($88) + 1)|0;
  HEAP32[$17>>2] = $91;
  $92 = (($90) + ($88)|0);
  HEAP8[$92>>0] = $82;
  $93 = (($85) + 65535)|0;
  $94 = $81 & 255;
  $95 = (19336 + ($94)|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96&255;
  $98 = $97 | 256;
  $99 = (($98) + 1)|0;
  $100 = (((($0)) + 148|0) + ($99<<2)|0);
  $101 = HEAP16[$100>>1]|0;
  $102 = (($101) + 1)<<16>>16;
  HEAP16[$100>>1] = $102;
  $103 = $93 & 65535;
  $104 = ($103>>>0)<(256);
  $105 = $103 >>> 7;
  $106 = (($105) + 256)|0;
  $$sink = $104 ? $103 : $106;
  $107 = (18824 + ($$sink)|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  $110 = (((($0)) + 2440|0) + ($109<<2)|0);
  $111 = HEAP16[$110>>1]|0;
  $112 = (($111) + 1)<<16>>16;
  HEAP16[$110>>1] = $112;
  $113 = HEAP32[$17>>2]|0;
  $114 = HEAP32[$19>>2]|0;
  $115 = (($114) + -1)|0;
  $116 = HEAP32[$13>>2]|0;
  $117 = HEAP32[$2>>2]|0;
  $$neg182 = (1 - ($116))|0;
  $118 = (($$neg182) + ($117))|0;
  HEAP32[$2>>2] = $118;
  $119 = (($116) + -2)|0;
  HEAP32[$13>>2] = $119;
  $$pre = HEAP32[$7>>2]|0;
  $121 = $$pre;$143 = $119;
  while(1) {
   $120 = (($121) + 1)|0;
   HEAP32[$7>>2] = $120;
   $122 = ($120>>>0)>($80>>>0);
   if (!($122)) {
    $123 = HEAP32[$4>>2]|0;
    $124 = HEAP32[$5>>2]|0;
    $125 = $123 << $124;
    $126 = HEAP32[$6>>2]|0;
    $127 = (($121) + 3)|0;
    $128 = (($126) + ($127)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = $130 ^ $125;
    $132 = HEAP32[$8>>2]|0;
    $133 = $131 & $132;
    HEAP32[$4>>2] = $133;
    $134 = HEAP32[$9>>2]|0;
    $135 = (($134) + ($133<<1)|0);
    $136 = HEAP16[$135>>1]|0;
    $137 = HEAP32[$10>>2]|0;
    $138 = HEAP32[$11>>2]|0;
    $139 = $138 & $120;
    $140 = (($137) + ($139<<1)|0);
    HEAP16[$140>>1] = $136;
    $141 = $120&65535;
    HEAP16[$135>>1] = $141;
   }
   $142 = (($143) + -1)|0;
   HEAP32[$13>>2] = $142;
   $144 = ($142|0)==(0);
   if ($144) {
    break;
   } else {
    $121 = $120;$143 = $142;
   }
  }
  $145 = ($113|0)==($115|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$12>>2] = 2;
  $146 = (($121) + 2)|0;
  HEAP32[$7>>2] = $146;
  if (!($145)) {
   continue;
  }
  $147 = HEAP32[$21>>2]|0;
  $148 = ($147|0)>(-1);
  if ($148) {
   $149 = HEAP32[$6>>2]|0;
   $150 = (($149) + ($147)|0);
   $152 = $150;
  } else {
   $152 = 0;
  }
  $151 = (($146) - ($147))|0;
  __tr_flush_block($0,$152,$151,0);
  $153 = HEAP32[$7>>2]|0;
  HEAP32[$21>>2] = $153;
  $154 = HEAP32[$0>>2]|0;
  $155 = ((($154)) + 28|0);
  $156 = HEAP32[$155>>2]|0;
  __tr_flush_bits($156);
  $157 = ((($156)) + 20|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = ((($154)) + 16|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = ($158>>>0)>($160>>>0);
  $$$i = $161 ? $160 : $158;
  $162 = ($$$i|0)==(0);
  if (!($162)) {
   $163 = ((($154)) + 12|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = ((($156)) + 16|0);
   $166 = HEAP32[$165>>2]|0;
   _memcpy(($164|0),($166|0),($$$i|0))|0;
   $167 = HEAP32[$163>>2]|0;
   $168 = (($167) + ($$$i)|0);
   HEAP32[$163>>2] = $168;
   $169 = HEAP32[$165>>2]|0;
   $170 = (($169) + ($$$i)|0);
   HEAP32[$165>>2] = $170;
   $171 = ((($154)) + 20|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = (($172) + ($$$i))|0;
   HEAP32[$171>>2] = $173;
   $174 = HEAP32[$159>>2]|0;
   $175 = (($174) - ($$$i))|0;
   HEAP32[$159>>2] = $175;
   $176 = HEAP32[$157>>2]|0;
   $177 = (($176) - ($$$i))|0;
   HEAP32[$157>>2] = $177;
   $178 = ($177|0)==(0);
   if ($178) {
    $179 = ((($156)) + 8|0);
    $180 = HEAP32[$179>>2]|0;
    HEAP32[$165>>2] = $180;
   }
  }
  $181 = HEAP32[$0>>2]|0;
  $182 = ((($181)) + 16|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = ($183|0)==(0);
  if ($184) {
   $$2 = 0;
   label = 55;
   break;
  }
 }
 if ((label|0) == 38) {
  $253 = HEAP32[$20>>2]|0;
  $254 = ($253|0)==(0);
  if (!($254)) {
   $255 = HEAP32[$6>>2]|0;
   $256 = HEAP32[$7>>2]|0;
   $257 = (($256) + -1)|0;
   $258 = (($255) + ($257)|0);
   $259 = HEAP8[$258>>0]|0;
   $260 = HEAP32[$16>>2]|0;
   $261 = HEAP32[$17>>2]|0;
   $262 = (($260) + ($261<<1)|0);
   HEAP16[$262>>1] = 0;
   $263 = HEAP32[$18>>2]|0;
   $264 = (($261) + 1)|0;
   HEAP32[$17>>2] = $264;
   $265 = (($263) + ($261)|0);
   HEAP8[$265>>0] = $259;
   $266 = $259&255;
   $267 = (((($0)) + 148|0) + ($266<<2)|0);
   $268 = HEAP16[$267>>1]|0;
   $269 = (($268) + 1)<<16>>16;
   HEAP16[$267>>1] = $269;
   HEAP32[$20>>2] = 0;
  }
  $270 = HEAP32[$7>>2]|0;
  $271 = ($270>>>0)<(2);
  $$ = $271 ? $270 : 2;
  $272 = ((($0)) + 5812|0);
  HEAP32[$272>>2] = $$;
  $273 = ($1|0)==(4);
  if ($273) {
   $274 = HEAP32[$21>>2]|0;
   $275 = ($274|0)>(-1);
   if ($275) {
    $276 = HEAP32[$6>>2]|0;
    $277 = (($276) + ($274)|0);
    $279 = $277;
   } else {
    $279 = 0;
   }
   $278 = (($270) - ($274))|0;
   __tr_flush_block($0,$279,$278,1);
   $280 = HEAP32[$7>>2]|0;
   HEAP32[$21>>2] = $280;
   $281 = HEAP32[$0>>2]|0;
   $282 = ((($281)) + 28|0);
   $283 = HEAP32[$282>>2]|0;
   __tr_flush_bits($283);
   $284 = ((($283)) + 20|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = ((($281)) + 16|0);
   $287 = HEAP32[$286>>2]|0;
   $288 = ($285>>>0)>($287>>>0);
   $$$i176 = $288 ? $287 : $285;
   $289 = ($$$i176|0)==(0);
   if (!($289)) {
    $290 = ((($281)) + 12|0);
    $291 = HEAP32[$290>>2]|0;
    $292 = ((($283)) + 16|0);
    $293 = HEAP32[$292>>2]|0;
    _memcpy(($291|0),($293|0),($$$i176|0))|0;
    $294 = HEAP32[$290>>2]|0;
    $295 = (($294) + ($$$i176)|0);
    HEAP32[$290>>2] = $295;
    $296 = HEAP32[$292>>2]|0;
    $297 = (($296) + ($$$i176)|0);
    HEAP32[$292>>2] = $297;
    $298 = ((($281)) + 20|0);
    $299 = HEAP32[$298>>2]|0;
    $300 = (($299) + ($$$i176))|0;
    HEAP32[$298>>2] = $300;
    $301 = HEAP32[$286>>2]|0;
    $302 = (($301) - ($$$i176))|0;
    HEAP32[$286>>2] = $302;
    $303 = HEAP32[$284>>2]|0;
    $304 = (($303) - ($$$i176))|0;
    HEAP32[$284>>2] = $304;
    $305 = ($304|0)==(0);
    if ($305) {
     $306 = ((($283)) + 8|0);
     $307 = HEAP32[$306>>2]|0;
     HEAP32[$292>>2] = $307;
    }
   }
   $308 = HEAP32[$0>>2]|0;
   $309 = ((($308)) + 16|0);
   $310 = HEAP32[$309>>2]|0;
   $311 = ($310|0)==(0);
   $$173 = $311 ? 2 : 3;
   $$2 = $$173;
   return ($$2|0);
  }
  $312 = HEAP32[$17>>2]|0;
  $313 = ($312|0)==(0);
  if (!($313)) {
   $314 = HEAP32[$21>>2]|0;
   $315 = ($314|0)>(-1);
   if ($315) {
    $316 = HEAP32[$6>>2]|0;
    $317 = (($316) + ($314)|0);
    $319 = $317;
   } else {
    $319 = 0;
   }
   $318 = (($270) - ($314))|0;
   __tr_flush_block($0,$319,$318,0);
   $320 = HEAP32[$7>>2]|0;
   HEAP32[$21>>2] = $320;
   $321 = HEAP32[$0>>2]|0;
   $322 = ((($321)) + 28|0);
   $323 = HEAP32[$322>>2]|0;
   __tr_flush_bits($323);
   $324 = ((($323)) + 20|0);
   $325 = HEAP32[$324>>2]|0;
   $326 = ((($321)) + 16|0);
   $327 = HEAP32[$326>>2]|0;
   $328 = ($325>>>0)>($327>>>0);
   $$$i178 = $328 ? $327 : $325;
   $329 = ($$$i178|0)==(0);
   if (!($329)) {
    $330 = ((($321)) + 12|0);
    $331 = HEAP32[$330>>2]|0;
    $332 = ((($323)) + 16|0);
    $333 = HEAP32[$332>>2]|0;
    _memcpy(($331|0),($333|0),($$$i178|0))|0;
    $334 = HEAP32[$330>>2]|0;
    $335 = (($334) + ($$$i178)|0);
    HEAP32[$330>>2] = $335;
    $336 = HEAP32[$332>>2]|0;
    $337 = (($336) + ($$$i178)|0);
    HEAP32[$332>>2] = $337;
    $338 = ((($321)) + 20|0);
    $339 = HEAP32[$338>>2]|0;
    $340 = (($339) + ($$$i178))|0;
    HEAP32[$338>>2] = $340;
    $341 = HEAP32[$326>>2]|0;
    $342 = (($341) - ($$$i178))|0;
    HEAP32[$326>>2] = $342;
    $343 = HEAP32[$324>>2]|0;
    $344 = (($343) - ($$$i178))|0;
    HEAP32[$324>>2] = $344;
    $345 = ($344|0)==(0);
    if ($345) {
     $346 = ((($323)) + 8|0);
     $347 = HEAP32[$346>>2]|0;
     HEAP32[$332>>2] = $347;
    }
   }
   $348 = HEAP32[$0>>2]|0;
   $349 = ((($348)) + 16|0);
   $350 = HEAP32[$349>>2]|0;
   $351 = ($350|0)==(0);
   if ($351) {
    $$2 = 0;
    return ($$2|0);
   }
  }
  $$2 = 1;
  return ($$2|0);
 }
 else if ((label|0) == 55) {
  return ($$2|0);
 }
 return (0)|0;
}
function _fill_window($0) {
 $0 = $0|0;
 var $$ = 0, $$$i = 0, $$0123 = 0, $$0124 = 0, $$0125 = 0, $$0126 = 0, $$027$i = 0, $$1 = 0, $$1127 = 0, $$130 = 0, $$pre = 0, $$pre$phi$iZ2D = 0, $$pre135 = 0, $$pre136 = 0, $$sink = 0, $$sink$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 60|0);
 $4 = ((($0)) + 116|0);
 $5 = ((($0)) + 108|0);
 $6 = (($2) + -262)|0;
 $7 = ((($0)) + 56|0);
 $8 = ((($0)) + 5812|0);
 $9 = ((($0)) + 72|0);
 $10 = ((($0)) + 88|0);
 $11 = ((($0)) + 84|0);
 $12 = ((($0)) + 68|0);
 $13 = ((($0)) + 64|0);
 $14 = ((($0)) + 52|0);
 $15 = ((($0)) + 112|0);
 $16 = ((($0)) + 92|0);
 $17 = ((($0)) + 76|0);
 $$pre = HEAP32[$4>>2]|0;
 $20 = $$pre;$24 = $2;
 while(1) {
  $18 = HEAP32[$3>>2]|0;
  $19 = (($18) - ($20))|0;
  $21 = HEAP32[$5>>2]|0;
  $22 = (($19) - ($21))|0;
  $23 = (($6) + ($24))|0;
  $25 = ($21>>>0)<($23>>>0);
  if ($25) {
   $$0125 = $22;$64 = $21;
  } else {
   $26 = HEAP32[$7>>2]|0;
   $27 = (($26) + ($2)|0);
   _memcpy(($26|0),($27|0),($2|0))|0;
   $28 = HEAP32[$15>>2]|0;
   $29 = (($28) - ($2))|0;
   HEAP32[$15>>2] = $29;
   $30 = HEAP32[$5>>2]|0;
   $31 = (($30) - ($2))|0;
   HEAP32[$5>>2] = $31;
   $32 = HEAP32[$16>>2]|0;
   $33 = (($32) - ($2))|0;
   HEAP32[$16>>2] = $33;
   $34 = HEAP32[$17>>2]|0;
   $35 = HEAP32[$12>>2]|0;
   $36 = (($35) + ($34<<1)|0);
   $$0123 = $34;$$0126 = $36;
   while(1) {
    $37 = ((($$0126)) + -2|0);
    $38 = HEAP16[$37>>1]|0;
    $39 = $38&65535;
    $40 = ($39>>>0)<($2>>>0);
    $41 = (($39) - ($2))|0;
    $42 = $41&65535;
    $43 = $40 ? 0 : $42;
    HEAP16[$37>>1] = $43;
    $44 = (($$0123) + -1)|0;
    $45 = ($44|0)==(0);
    if ($45) {
     break;
    } else {
     $$0123 = $44;$$0126 = $37;
    }
   }
   $46 = HEAP32[$13>>2]|0;
   $47 = (($46) + ($2<<1)|0);
   $$1 = $2;$$1127 = $47;
   while(1) {
    $48 = ((($$1127)) + -2|0);
    $49 = HEAP16[$48>>1]|0;
    $50 = $49&65535;
    $51 = ($50>>>0)<($2>>>0);
    $52 = (($50) - ($2))|0;
    $53 = $52&65535;
    $54 = $51 ? 0 : $53;
    HEAP16[$48>>1] = $54;
    $55 = (($$1) + -1)|0;
    $56 = ($55|0)==(0);
    if ($56) {
     break;
    } else {
     $$1 = $55;$$1127 = $48;
    }
   }
   $57 = (($22) + ($2))|0;
   $$0125 = $57;$64 = $31;
  }
  $58 = HEAP32[$0>>2]|0;
  $59 = ((($58)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)==(0);
  if ($61) {
   break;
  }
  $62 = HEAP32[$7>>2]|0;
  $63 = (($62) + ($64)|0);
  $65 = HEAP32[$4>>2]|0;
  $66 = (($63) + ($65)|0);
  $67 = ($60>>>0)>($$0125>>>0);
  $$$i = $67 ? $$0125 : $60;
  $68 = ($$$i|0)==(0);
  if ($68) {
   $$027$i = 0;$87 = $65;
  } else {
   $69 = (($60) - ($$$i))|0;
   HEAP32[$59>>2] = $69;
   $70 = HEAP32[$58>>2]|0;
   _memcpy(($66|0),($70|0),($$$i|0))|0;
   $71 = ((($58)) + 28|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($72)) + 24|0);
   $74 = HEAP32[$73>>2]|0;
   switch ($74|0) {
   case 1:  {
    $75 = ((($58)) + 48|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (_adler32($76,$66,$$$i)|0);
    $$pre$phi$iZ2D = $75;$$sink$i = $77;
    label = 13;
    break;
   }
   case 2:  {
    $78 = ((($58)) + 48|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (_crc32($79,$66,$$$i)|0);
    $$pre$phi$iZ2D = $78;$$sink$i = $80;
    label = 13;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 13) {
    label = 0;
    HEAP32[$$pre$phi$iZ2D>>2] = $$sink$i;
   }
   $81 = HEAP32[$58>>2]|0;
   $82 = (($81) + ($$$i)|0);
   HEAP32[$58>>2] = $82;
   $83 = ((($58)) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + ($$$i))|0;
   HEAP32[$83>>2] = $85;
   $$pre136 = HEAP32[$4>>2]|0;
   $$027$i = $$$i;$87 = $$pre136;
  }
  $86 = (($87) + ($$027$i))|0;
  HEAP32[$4>>2] = $86;
  $88 = HEAP32[$8>>2]|0;
  $89 = (($88) + ($86))|0;
  $90 = ($89>>>0)>(2);
  L22: do {
   if ($90) {
    $91 = HEAP32[$5>>2]|0;
    $92 = (($91) - ($88))|0;
    $93 = HEAP32[$7>>2]|0;
    $94 = (($93) + ($92)|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = $95&255;
    HEAP32[$9>>2] = $96;
    $97 = HEAP32[$10>>2]|0;
    $98 = $96 << $97;
    $99 = (($92) + 1)|0;
    $100 = (($93) + ($99)|0);
    $101 = HEAP8[$100>>0]|0;
    $102 = $101&255;
    $103 = $102 ^ $98;
    $104 = HEAP32[$11>>2]|0;
    $105 = $103 & $104;
    HEAP32[$9>>2] = $105;
    $$0124 = $92;$106 = $88;$109 = $105;
    while(1) {
     $107 = ($106|0)==(0);
     if ($107) {
      break L22;
     }
     $108 = $109 << $97;
     $110 = (($$0124) + 2)|0;
     $111 = (($93) + ($110)|0);
     $112 = HEAP8[$111>>0]|0;
     $113 = $112&255;
     $114 = $113 ^ $108;
     $115 = $114 & $104;
     HEAP32[$9>>2] = $115;
     $116 = HEAP32[$12>>2]|0;
     $117 = (($116) + ($115<<1)|0);
     $118 = HEAP16[$117>>1]|0;
     $119 = HEAP32[$13>>2]|0;
     $120 = HEAP32[$14>>2]|0;
     $121 = $120 & $$0124;
     $122 = (($119) + ($121<<1)|0);
     HEAP16[$122>>1] = $118;
     $123 = $$0124&65535;
     HEAP16[$117>>1] = $123;
     $124 = (($$0124) + 1)|0;
     $125 = (($106) + -1)|0;
     HEAP32[$8>>2] = $125;
     $126 = (($86) + ($125))|0;
     $127 = ($126>>>0)<(3);
     if ($127) {
      break;
     } else {
      $$0124 = $124;$106 = $125;$109 = $115;
     }
    }
   }
  } while(0);
  $128 = ($86>>>0)<(262);
  if (!($128)) {
   break;
  }
  $129 = HEAP32[$0>>2]|0;
  $130 = ((($129)) + 4|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = ($131|0)==(0);
  if ($132) {
   break;
  }
  $$pre135 = HEAP32[$1>>2]|0;
  $20 = $86;$24 = $$pre135;
 }
 $133 = ((($0)) + 5824|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = HEAP32[$3>>2]|0;
 $136 = ($135>>>0)>($134>>>0);
 if (!($136)) {
  return;
 }
 $137 = HEAP32[$5>>2]|0;
 $138 = HEAP32[$4>>2]|0;
 $139 = (($138) + ($137))|0;
 $140 = ($134>>>0)<($139>>>0);
 do {
  if ($140) {
   $141 = (($135) - ($139))|0;
   $142 = ($141>>>0)<(258);
   $$ = $142 ? $141 : 258;
   $143 = HEAP32[$7>>2]|0;
   $144 = (($143) + ($139)|0);
   _memset(($144|0),0,($$|0))|0;
   $145 = (($$) + ($139))|0;
   $$sink = $145;
  } else {
   $146 = (($139) + 258)|0;
   $147 = ($146>>>0)>($134>>>0);
   if ($147) {
    $148 = (($146) - ($134))|0;
    $149 = (($135) - ($134))|0;
    $150 = ($148>>>0)>($149>>>0);
    $$130 = $150 ? $149 : $148;
    $151 = HEAP32[$7>>2]|0;
    $152 = (($151) + ($134)|0);
    _memset(($152|0),0,($$130|0))|0;
    $153 = HEAP32[$133>>2]|0;
    $154 = (($153) + ($$130))|0;
    $$sink = $154;
    break;
   } else {
    return;
   }
  }
 } while(0);
 HEAP32[$133>>2] = $$sink;
 return;
}
function _longest_match($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$2116 = 0, $$0 = 0, $$0105 = 0, $$0108 = 0, $$0109 = 0, $$0114 = 0, $$1 = 0, $$1106 = 0, $$1110 = 0, $$1112$add = 0, $$1112$idx = 0, $$1112$ptr = 0, $$1115 = 0, $$118 = 0, $$2 = 0, $$2116 = 0, $$ptr = 0, $$ptr120 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 124|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 108|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + ($7)|0);
 $9 = ((($0)) + 120|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 144|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + -262)|0;
 $16 = ($7>>>0)>($15>>>0);
 $17 = (($7) - ($15))|0;
 $$ = $16 ? $17 : 0;
 $18 = ((($0)) + 64|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($0)) + 52|0);
 $21 = HEAP32[$20>>2]|0;
 $$ptr120 = ((($8)) + 258|0);
 $22 = (($10) + -1)|0;
 $23 = (($8) + ($22)|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = (($8) + ($10)|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = ((($0)) + 140|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($10>>>0)<($28>>>0);
 $30 = $3 >>> 2;
 $$0109 = $29 ? $3 : $30;
 $31 = ((($0)) + 116|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($12>>>0)>($32>>>0);
 $$118 = $33 ? $32 : $12;
 $34 = ((($0)) + 112|0);
 $35 = ((($8)) + 1|0);
 $36 = $$ptr120;
 $$0 = $26;$$0105 = $24;$$0108 = $1;$$0114 = $10;$$1110 = $$0109;
 while(1) {
  $37 = (($5) + ($$0108)|0);
  $38 = (($37) + ($$0114)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = ($39<<24>>24)==($$0<<24>>24);
  if ($40) {
   $41 = (($$0114) + -1)|0;
   $42 = (($37) + ($41)|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==($$0105<<24>>24);
   if ($44) {
    $45 = HEAP8[$37>>0]|0;
    $46 = HEAP8[$8>>0]|0;
    $47 = ($45<<24>>24)==($46<<24>>24);
    if ($47) {
     $48 = ((($37)) + 1|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = HEAP8[$35>>0]|0;
     $51 = ($49<<24>>24)==($50<<24>>24);
     if ($51) {
      $$1112$idx = 2;$55 = $48;
      while(1) {
       $$1112$ptr = (($8) + ($$1112$idx)|0);
       $52 = ((($$1112$ptr)) + 1|0);
       $53 = HEAP8[$52>>0]|0;
       $54 = ((($55)) + 2|0);
       $56 = HEAP8[$54>>0]|0;
       $57 = ($53<<24>>24)==($56<<24>>24);
       if (!($57)) {
        $$2 = $52;
        break;
       }
       $58 = ((($$1112$ptr)) + 2|0);
       $59 = HEAP8[$58>>0]|0;
       $60 = ((($55)) + 3|0);
       $61 = HEAP8[$60>>0]|0;
       $62 = ($59<<24>>24)==($61<<24>>24);
       if (!($62)) {
        $$2 = $58;
        break;
       }
       $63 = ((($$1112$ptr)) + 3|0);
       $64 = HEAP8[$63>>0]|0;
       $65 = ((($55)) + 4|0);
       $66 = HEAP8[$65>>0]|0;
       $67 = ($64<<24>>24)==($66<<24>>24);
       if (!($67)) {
        $$2 = $63;
        break;
       }
       $68 = ((($$1112$ptr)) + 4|0);
       $69 = HEAP8[$68>>0]|0;
       $70 = ((($55)) + 5|0);
       $71 = HEAP8[$70>>0]|0;
       $72 = ($69<<24>>24)==($71<<24>>24);
       if (!($72)) {
        $$2 = $68;
        break;
       }
       $73 = ((($$1112$ptr)) + 5|0);
       $74 = HEAP8[$73>>0]|0;
       $75 = ((($55)) + 6|0);
       $76 = HEAP8[$75>>0]|0;
       $77 = ($74<<24>>24)==($76<<24>>24);
       if (!($77)) {
        $$2 = $73;
        break;
       }
       $78 = ((($$1112$ptr)) + 6|0);
       $79 = HEAP8[$78>>0]|0;
       $80 = ((($55)) + 7|0);
       $81 = HEAP8[$80>>0]|0;
       $82 = ($79<<24>>24)==($81<<24>>24);
       if (!($82)) {
        $$2 = $78;
        break;
       }
       $83 = ((($$1112$ptr)) + 7|0);
       $84 = HEAP8[$83>>0]|0;
       $85 = ((($55)) + 8|0);
       $86 = HEAP8[$85>>0]|0;
       $87 = ($84<<24>>24)==($86<<24>>24);
       if (!($87)) {
        $$2 = $83;
        break;
       }
       $$1112$add = (($$1112$idx) + 8)|0;
       $$ptr = (($8) + ($$1112$add)|0);
       $88 = HEAP8[$$ptr>>0]|0;
       $89 = ((($55)) + 9|0);
       $90 = HEAP8[$89>>0]|0;
       $91 = ($88<<24>>24)==($90<<24>>24);
       $92 = ($$1112$add|0)<(258);
       $or$cond = $92 & $91;
       if ($or$cond) {
        $$1112$idx = $$1112$add;$55 = $85;
       } else {
        $$2 = $$ptr;
        break;
       }
      }
      $93 = $$2;
      $94 = (($93) - ($36))|0;
      $95 = (($94) + 258)|0;
      $96 = ($95|0)>($$0114|0);
      if ($96) {
       HEAP32[$34>>2] = $$0108;
       $97 = ($95|0)<($$118|0);
       if (!($97)) {
        $$2116 = $95;
        label = 19;
        break;
       }
       $98 = (($94) + 257)|0;
       $99 = (($8) + ($98)|0);
       $100 = HEAP8[$99>>0]|0;
       $101 = (($8) + ($95)|0);
       $102 = HEAP8[$101>>0]|0;
       $$1 = $102;$$1106 = $100;$$1115 = $95;
      } else {
       $$1 = $$0;$$1106 = $$0105;$$1115 = $$0114;
      }
     } else {
      $$1 = $$0;$$1106 = $$0105;$$1115 = $$0114;
     }
    } else {
     $$1 = $$0;$$1106 = $$0105;$$1115 = $$0114;
    }
   } else {
    $$1 = $$0;$$1106 = $$0105;$$1115 = $$0114;
   }
  } else {
   $$1 = $$0;$$1106 = $$0105;$$1115 = $$0114;
  }
  $103 = $$0108 & $21;
  $104 = (($19) + ($103<<1)|0);
  $105 = HEAP16[$104>>1]|0;
  $106 = $105&65535;
  $107 = ($106>>>0)>($$>>>0);
  if (!($107)) {
   $$2116 = $$1115;
   label = 19;
   break;
  }
  $108 = (($$1110) + -1)|0;
  $109 = ($108|0)==(0);
  if ($109) {
   $$2116 = $$1115;
   label = 19;
   break;
  } else {
   $$0 = $$1;$$0105 = $$1106;$$0108 = $106;$$0114 = $$1115;$$1110 = $108;
  }
 }
 if ((label|0) == 19) {
  $110 = ($$2116>>>0)>($32>>>0);
  $$$2116 = $110 ? $32 : $$2116;
  return ($$$2116|0);
 }
 return (0)|0;
}
function _deflateEnd($0) {
 $0 = $0|0;
 var $$0 = 0, $$in = 0, $$in51 = 0, $$in52 = 0, $$pre = 0, $$pre$phi48Z2D = 0, $$pre$phiZ2D = 0, $$pre43 = 0, $$pre44 = 0, $$pre45 = 0, $$pre46 = 0, $$pre47 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = -2;
  return ($$0|0);
 }
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = -2;
  return ($$0|0);
 }
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 switch ($6|0) {
 case 42: case 69: case 73: case 91: case 103: case 113: case 666:  {
  break;
 }
 default: {
  $$0 = -2;
  return ($$0|0);
 }
 }
 $7 = ((($3)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$in = $3;
 } else {
  $10 = ((($0)) + 36|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 40|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$11 & 127]($13,$8);
  $$pre = HEAP32[$2>>2]|0;
  $$in = $$pre;
 }
 $14 = ((($$in)) + 68|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $$in51 = $$in;
 } else {
  $17 = ((($0)) + 36|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($0)) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  FUNCTION_TABLE_vii[$18 & 127]($20,$15);
  $$pre43 = HEAP32[$2>>2]|0;
  $$in51 = $$pre43;
 }
 $21 = ((($$in51)) + 64|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $$in52 = $$in51;
 } else {
  $24 = ((($0)) + 36|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($0)) + 40|0);
  $27 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_vii[$25 & 127]($27,$22);
  $$pre44 = HEAP32[$2>>2]|0;
  $$in52 = $$pre44;
 }
 $28 = ((($$in52)) + 56|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $$pre46 = ((($0)) + 36|0);
  $$pre47 = ((($0)) + 40|0);
  $$pre$phi48Z2D = $$pre47;$$pre$phiZ2D = $$pre46;$37 = $$in52;
 } else {
  $31 = ((($0)) + 36|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($0)) + 40|0);
  $34 = HEAP32[$33>>2]|0;
  FUNCTION_TABLE_vii[$32 & 127]($34,$29);
  $$pre45 = HEAP32[$2>>2]|0;
  $$pre$phi48Z2D = $33;$$pre$phiZ2D = $31;$37 = $$pre45;
 }
 $35 = HEAP32[$$pre$phiZ2D>>2]|0;
 $36 = HEAP32[$$pre$phi48Z2D>>2]|0;
 FUNCTION_TABLE_vii[$35 & 127]($36,$37);
 HEAP32[$2>>2] = 0;
 $38 = ($6|0)==(113);
 $39 = $38 ? -3 : 0;
 $$0 = $39;
 return ($$0|0);
}
function _deflate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$366 = 0, $$$i = 0, $$$i$i = 0, $$$i$i388 = 0, $$$i139$i = 0, $$$i141$i = 0, $$$i373 = 0, $$$i375 = 0, $$$i377 = 0, $$$i379 = 0, $$$i381 = 0, $$$i383 = 0, $$$i385 = 0, $$$i387 = 0, $$$i52$i = 0, $$$i54$i = 0, $$0129$i = 0, $$0352 = 0, $$0353 = 0;
 var $$0355 = 0, $$0356 = 0, $$0359411 = 0, $$0362 = 0, $$1 = 0, $$1$i = 0, $$1354 = 0, $$1357 = 0, $$1360 = 0, $$138$i = 0, $$2 = 0, $$2358 = 0, $$2361 = 0, $$365 = 0, $$366 = 0, $$367 = 0, $$add$i = 0, $$add131$i = 0, $$idx$i = 0, $$phi$trans$insert = 0;
 var $$phi$trans$insert432 = 0, $$pr$pre = 0, $$pr392 = 0, $$pr392$pre = 0, $$pr394 = 0, $$pr398 = 0, $$pr398$pre = 0, $$pre = 0, $$pre$i = 0, $$pre$phi438Z2D = 0, $$pre$phi440Z2D = 0, $$pre$phiZ2D = 0, $$pre417 = 0, $$pre420 = 0, $$pre421$pre = 0, $$pre422 = 0, $$pre425 = 0, $$pre427 = 0, $$pre429 = 0, $$pre433 = 0;
 var $$pre437 = 0, $$pre439 = 0, $$pre441 = 0, $$ptr$i = 0, $$ptr132$i = 0, $$ptr133$i = 0, $$ptr134$i = 0, $$ptr136$i = 0, $$sink = 0, $$sink407 = 0, $$sink407$in = 0, $$sink408 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0;
 var $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0;
 var $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0;
 var $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0;
 var $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0;
 var $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0;
 var $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0;
 var $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0;
 var $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0;
 var $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0;
 var $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0;
 var $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $brmerge$demorgan = 0, $brmerge406 = 0, $not$ = 0, $or$cond = 0, $or$cond$i = 0, $or$cond11 = 0, $or$cond137$i = 0, $or$cond368 = 0, $or$cond369 = 0, $or$cond409 = 0;
 var $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$1 = -2;
  return ($$1|0);
 }
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 $6 = ($1>>>0)>(5);
 $7 = $6 | $5;
 if ($7) {
  $$1 = -2;
  return ($$1|0);
 }
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 do {
  if (!($10)) {
   $11 = HEAP32[$0>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0);
    if (!($15)) {
     break;
    }
   }
   $16 = ((($4)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(666);
   $19 = ($1|0)!=(4);
   $or$cond5 = $19 & $18;
   if (!($or$cond5)) {
    $22 = ((($0)) + 16|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==(0);
    if ($24) {
     $25 = HEAP32[(9376)>>2]|0;
     $26 = ((($0)) + 24|0);
     HEAP32[$26>>2] = $25;
     $$1 = -5;
     return ($$1|0);
    }
    HEAP32[$4>>2] = $0;
    $27 = ((($4)) + 40|0);
    $28 = HEAP32[$27>>2]|0;
    HEAP32[$27>>2] = $1;
    $29 = ($17|0)==(42);
    do {
     if ($29) {
      $30 = ((($4)) + 24|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($31|0)==(2);
      if (!($32)) {
       $204 = ((($4)) + 48|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = $205 << 12;
       $207 = (($206) + -30720)|0;
       $208 = ((($4)) + 136|0);
       $209 = HEAP32[$208>>2]|0;
       $210 = ($209|0)>(1);
       if ($210) {
        $$0362 = 0;
       } else {
        $211 = ((($4)) + 132|0);
        $212 = HEAP32[$211>>2]|0;
        $213 = ($212|0)<(2);
        if ($213) {
         $$0362 = 0;
        } else {
         $214 = ($212|0)<(6);
         $215 = ($212|0)==(6);
         $$366 = $215 ? 128 : 192;
         $$$366 = $214 ? 64 : $$366;
         $$0362 = $$$366;
        }
       }
       $216 = $$0362 | $207;
       $217 = ((($4)) + 108|0);
       $218 = HEAP32[$217>>2]|0;
       $219 = ($218|0)==(0);
       $220 = $216 | 32;
       $$367 = $219 ? $216 : $220;
       $221 = (($$367>>>0) % 31)&-1;
       $222 = $221 ^ 31;
       $223 = (($222) + ($$367))|0;
       HEAP32[$16>>2] = 113;
       $224 = $223 >>> 8;
       $225 = $224&255;
       $226 = ((($4)) + 8|0);
       $227 = HEAP32[$226>>2]|0;
       $228 = ((($4)) + 20|0);
       $229 = HEAP32[$228>>2]|0;
       $230 = (($229) + 1)|0;
       HEAP32[$228>>2] = $230;
       $231 = (($227) + ($229)|0);
       HEAP8[$231>>0] = $225;
       $232 = $223&255;
       $233 = HEAP32[$226>>2]|0;
       $234 = HEAP32[$228>>2]|0;
       $235 = (($234) + 1)|0;
       HEAP32[$228>>2] = $235;
       $236 = (($233) + ($234)|0);
       HEAP8[$236>>0] = $232;
       $237 = HEAP32[$217>>2]|0;
       $238 = ($237|0)==(0);
       $$pre441 = ((($0)) + 48|0);
       if (!($238)) {
        $239 = HEAP32[$$pre441>>2]|0;
        $240 = $239 >>> 16;
        $241 = $239 >>> 24;
        $242 = $241&255;
        $243 = HEAP32[$226>>2]|0;
        $244 = HEAP32[$228>>2]|0;
        $245 = (($244) + 1)|0;
        HEAP32[$228>>2] = $245;
        $246 = (($243) + ($244)|0);
        HEAP8[$246>>0] = $242;
        $247 = $240&255;
        $248 = HEAP32[$226>>2]|0;
        $249 = HEAP32[$228>>2]|0;
        $250 = (($249) + 1)|0;
        HEAP32[$228>>2] = $250;
        $251 = (($248) + ($249)|0);
        HEAP8[$251>>0] = $247;
        $252 = HEAP32[$$pre441>>2]|0;
        $253 = $252 >>> 8;
        $254 = $253&255;
        $255 = HEAP32[$226>>2]|0;
        $256 = HEAP32[$228>>2]|0;
        $257 = (($256) + 1)|0;
        HEAP32[$228>>2] = $257;
        $258 = (($255) + ($256)|0);
        HEAP8[$258>>0] = $254;
        $259 = $252&255;
        $260 = HEAP32[$226>>2]|0;
        $261 = HEAP32[$228>>2]|0;
        $262 = (($261) + 1)|0;
        HEAP32[$228>>2] = $262;
        $263 = (($260) + ($261)|0);
        HEAP8[$263>>0] = $259;
       }
       $264 = (_adler32(0,0,0)|0);
       HEAP32[$$pre441>>2] = $264;
       $$pr$pre = HEAP32[$16>>2]|0;
       $265 = $$pr$pre;
       break;
      }
      $33 = (_crc32(0,0,0)|0);
      $34 = ((($0)) + 48|0);
      HEAP32[$34>>2] = $33;
      $35 = ((($4)) + 8|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = ((($4)) + 20|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = (($38) + 1)|0;
      HEAP32[$37>>2] = $39;
      $40 = (($36) + ($38)|0);
      HEAP8[$40>>0] = 31;
      $41 = HEAP32[$35>>2]|0;
      $42 = HEAP32[$37>>2]|0;
      $43 = (($42) + 1)|0;
      HEAP32[$37>>2] = $43;
      $44 = (($41) + ($42)|0);
      HEAP8[$44>>0] = -117;
      $45 = HEAP32[$35>>2]|0;
      $46 = HEAP32[$37>>2]|0;
      $47 = (($46) + 1)|0;
      HEAP32[$37>>2] = $47;
      $48 = (($45) + ($46)|0);
      HEAP8[$48>>0] = 8;
      $49 = ((($4)) + 28|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ($50|0)==(0|0);
      if ($51) {
       $52 = HEAP32[$35>>2]|0;
       $53 = HEAP32[$37>>2]|0;
       $54 = (($53) + 1)|0;
       HEAP32[$37>>2] = $54;
       $55 = (($52) + ($53)|0);
       HEAP8[$55>>0] = 0;
       $56 = HEAP32[$35>>2]|0;
       $57 = HEAP32[$37>>2]|0;
       $58 = (($57) + 1)|0;
       HEAP32[$37>>2] = $58;
       $59 = (($56) + ($57)|0);
       HEAP8[$59>>0] = 0;
       $60 = HEAP32[$35>>2]|0;
       $61 = HEAP32[$37>>2]|0;
       $62 = (($61) + 1)|0;
       HEAP32[$37>>2] = $62;
       $63 = (($60) + ($61)|0);
       HEAP8[$63>>0] = 0;
       $64 = HEAP32[$35>>2]|0;
       $65 = HEAP32[$37>>2]|0;
       $66 = (($65) + 1)|0;
       HEAP32[$37>>2] = $66;
       $67 = (($64) + ($65)|0);
       HEAP8[$67>>0] = 0;
       $68 = HEAP32[$35>>2]|0;
       $69 = HEAP32[$37>>2]|0;
       $70 = (($69) + 1)|0;
       HEAP32[$37>>2] = $70;
       $71 = (($68) + ($69)|0);
       HEAP8[$71>>0] = 0;
       $72 = ((($4)) + 132|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = ($73|0)==(9);
       if ($74) {
        $81 = 2;
       } else {
        $75 = ($73|0)<(2);
        $76 = ((($4)) + 136|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = ($77|0)>(1);
        $$ = $75 | $78;
        $79 = $$ ? 4 : 0;
        $81 = $79;
       }
       $80 = $81&255;
       $82 = HEAP32[$35>>2]|0;
       $83 = HEAP32[$37>>2]|0;
       $84 = (($83) + 1)|0;
       HEAP32[$37>>2] = $84;
       $85 = (($82) + ($83)|0);
       HEAP8[$85>>0] = $80;
       $86 = HEAP32[$35>>2]|0;
       $87 = HEAP32[$37>>2]|0;
       $88 = (($87) + 1)|0;
       HEAP32[$37>>2] = $88;
       $89 = (($86) + ($87)|0);
       HEAP8[$89>>0] = 3;
       $$sink = 113;
      } else {
       $90 = HEAP32[$50>>2]|0;
       $91 = ($90|0)!=(0);
       $92 = $91&1;
       $93 = ((($50)) + 44|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = ($94|0)!=(0);
       $96 = $95 ? 2 : 0;
       $97 = $96 | $92;
       $98 = ((($50)) + 16|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = ($99|0)==(0|0);
       $101 = $100 ? 0 : 4;
       $102 = $97 | $101;
       $103 = ((($50)) + 28|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = ($104|0)==(0|0);
       $106 = $105 ? 0 : 8;
       $107 = $102 | $106;
       $108 = ((($50)) + 36|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = ($109|0)==(0|0);
       $111 = $110 ? 0 : 16;
       $112 = $107 | $111;
       $113 = $112&255;
       $114 = HEAP32[$35>>2]|0;
       $115 = HEAP32[$37>>2]|0;
       $116 = (($115) + 1)|0;
       HEAP32[$37>>2] = $116;
       $117 = (($114) + ($115)|0);
       HEAP8[$117>>0] = $113;
       $118 = HEAP32[$49>>2]|0;
       $119 = ((($118)) + 4|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = $120&255;
       $122 = HEAP32[$35>>2]|0;
       $123 = HEAP32[$37>>2]|0;
       $124 = (($123) + 1)|0;
       HEAP32[$37>>2] = $124;
       $125 = (($122) + ($123)|0);
       HEAP8[$125>>0] = $121;
       $126 = HEAP32[$49>>2]|0;
       $127 = ((($126)) + 4|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = $128 >>> 8;
       $130 = $129&255;
       $131 = HEAP32[$35>>2]|0;
       $132 = HEAP32[$37>>2]|0;
       $133 = (($132) + 1)|0;
       HEAP32[$37>>2] = $133;
       $134 = (($131) + ($132)|0);
       HEAP8[$134>>0] = $130;
       $135 = HEAP32[$49>>2]|0;
       $136 = ((($135)) + 4|0);
       $137 = HEAP32[$136>>2]|0;
       $138 = $137 >>> 16;
       $139 = $138&255;
       $140 = HEAP32[$35>>2]|0;
       $141 = HEAP32[$37>>2]|0;
       $142 = (($141) + 1)|0;
       HEAP32[$37>>2] = $142;
       $143 = (($140) + ($141)|0);
       HEAP8[$143>>0] = $139;
       $144 = HEAP32[$49>>2]|0;
       $145 = ((($144)) + 4|0);
       $146 = HEAP32[$145>>2]|0;
       $147 = $146 >>> 24;
       $148 = $147&255;
       $149 = HEAP32[$35>>2]|0;
       $150 = HEAP32[$37>>2]|0;
       $151 = (($150) + 1)|0;
       HEAP32[$37>>2] = $151;
       $152 = (($149) + ($150)|0);
       HEAP8[$152>>0] = $148;
       $153 = ((($4)) + 132|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = ($154|0)==(9);
       if ($155) {
        $162 = 2;
       } else {
        $156 = ($154|0)<(2);
        $157 = ((($4)) + 136|0);
        $158 = HEAP32[$157>>2]|0;
        $159 = ($158|0)>(1);
        $$365 = $156 | $159;
        $160 = $$365 ? 4 : 0;
        $162 = $160;
       }
       $161 = $162&255;
       $163 = HEAP32[$35>>2]|0;
       $164 = HEAP32[$37>>2]|0;
       $165 = (($164) + 1)|0;
       HEAP32[$37>>2] = $165;
       $166 = (($163) + ($164)|0);
       HEAP8[$166>>0] = $161;
       $167 = HEAP32[$49>>2]|0;
       $168 = ((($167)) + 12|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = $169&255;
       $171 = HEAP32[$35>>2]|0;
       $172 = HEAP32[$37>>2]|0;
       $173 = (($172) + 1)|0;
       HEAP32[$37>>2] = $173;
       $174 = (($171) + ($172)|0);
       HEAP8[$174>>0] = $170;
       $175 = HEAP32[$49>>2]|0;
       $176 = ((($175)) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $196 = $175;
       } else {
        $179 = ((($175)) + 20|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = $180&255;
        $182 = HEAP32[$35>>2]|0;
        $183 = HEAP32[$37>>2]|0;
        $184 = (($183) + 1)|0;
        HEAP32[$37>>2] = $184;
        $185 = (($182) + ($183)|0);
        HEAP8[$185>>0] = $181;
        $186 = HEAP32[$49>>2]|0;
        $187 = ((($186)) + 20|0);
        $188 = HEAP32[$187>>2]|0;
        $189 = $188 >>> 8;
        $190 = $189&255;
        $191 = HEAP32[$35>>2]|0;
        $192 = HEAP32[$37>>2]|0;
        $193 = (($192) + 1)|0;
        HEAP32[$37>>2] = $193;
        $194 = (($191) + ($192)|0);
        HEAP8[$194>>0] = $190;
        $$pre = HEAP32[$49>>2]|0;
        $196 = $$pre;
       }
       $195 = ((($196)) + 44|0);
       $197 = HEAP32[$195>>2]|0;
       $198 = ($197|0)==(0);
       if (!($198)) {
        $199 = HEAP32[$34>>2]|0;
        $200 = HEAP32[$35>>2]|0;
        $201 = HEAP32[$37>>2]|0;
        $202 = (_crc32($199,$200,$201)|0);
        HEAP32[$34>>2] = $202;
       }
       $203 = ((($4)) + 32|0);
       HEAP32[$203>>2] = 0;
       $$sink = 69;
      }
      HEAP32[$16>>2] = $$sink;
      $265 = $$sink;
     } else {
      $265 = $17;
     }
    } while(0);
    $266 = ($265|0)==(69);
    L46: do {
     if ($266) {
      $267 = ((($4)) + 28|0);
      $268 = HEAP32[$267>>2]|0;
      $269 = ((($268)) + 16|0);
      $270 = HEAP32[$269>>2]|0;
      $271 = ($270|0)==(0|0);
      do {
       if ($271) {
        $1178 = $268;
       } else {
        $272 = ((($4)) + 20|0);
        $273 = HEAP32[$272>>2]|0;
        $274 = ((($4)) + 32|0);
        $275 = HEAP32[$274>>2]|0;
        $276 = ((($268)) + 20|0);
        $277 = HEAP32[$276>>2]|0;
        $278 = $277 & 65535;
        $279 = ($275>>>0)<($278>>>0);
        L50: do {
         if ($279) {
          $280 = ((($4)) + 12|0);
          $281 = ((($0)) + 48|0);
          $282 = ((($4)) + 8|0);
          $283 = ((($0)) + 20|0);
          $$0359411 = $273;$1179 = $275;$285 = $273;$288 = $268;
          while(1) {
           $284 = HEAP32[$280>>2]|0;
           $286 = ($285|0)==($284|0);
           if ($286) {
            $287 = ((($288)) + 44|0);
            $289 = HEAP32[$287>>2]|0;
            $290 = ($289|0)!=(0);
            $291 = ($285>>>0)>($$0359411>>>0);
            $or$cond = $291 & $290;
            if ($or$cond) {
             $292 = HEAP32[$281>>2]|0;
             $293 = HEAP32[$282>>2]|0;
             $294 = (($293) + ($$0359411)|0);
             $295 = (($285) - ($$0359411))|0;
             $296 = (_crc32($292,$294,$295)|0);
             HEAP32[$281>>2] = $296;
            }
            $297 = HEAP32[$3>>2]|0;
            __tr_flush_bits($297);
            $298 = ((($297)) + 20|0);
            $299 = HEAP32[$298>>2]|0;
            $300 = HEAP32[$22>>2]|0;
            $301 = ($299>>>0)>($300>>>0);
            $$$i375 = $301 ? $300 : $299;
            $302 = ($$$i375|0)==(0);
            do {
             if (!($302)) {
              $303 = HEAP32[$8>>2]|0;
              $304 = ((($297)) + 16|0);
              $305 = HEAP32[$304>>2]|0;
              _memcpy(($303|0),($305|0),($$$i375|0))|0;
              $306 = HEAP32[$8>>2]|0;
              $307 = (($306) + ($$$i375)|0);
              HEAP32[$8>>2] = $307;
              $308 = HEAP32[$304>>2]|0;
              $309 = (($308) + ($$$i375)|0);
              HEAP32[$304>>2] = $309;
              $310 = HEAP32[$283>>2]|0;
              $311 = (($310) + ($$$i375))|0;
              HEAP32[$283>>2] = $311;
              $312 = HEAP32[$22>>2]|0;
              $313 = (($312) - ($$$i375))|0;
              HEAP32[$22>>2] = $313;
              $314 = HEAP32[$298>>2]|0;
              $315 = (($314) - ($$$i375))|0;
              HEAP32[$298>>2] = $315;
              $316 = ($315|0)==(0);
              if (!($316)) {
               break;
              }
              $317 = ((($297)) + 8|0);
              $318 = HEAP32[$317>>2]|0;
              HEAP32[$304>>2] = $318;
             }
            } while(0);
            $319 = HEAP32[$272>>2]|0;
            $320 = HEAP32[$280>>2]|0;
            $321 = ($319|0)==($320|0);
            $$pre421$pre = HEAP32[$267>>2]|0;
            if ($321) {
             $$2361 = $319;$340 = $$pre421$pre;
             break L50;
            }
            $$pre420 = HEAP32[$274>>2]|0;
            $$1360 = $319;$323 = $$pre421$pre;$326 = $$pre420;$330 = $319;
           } else {
            $$1360 = $$0359411;$323 = $288;$326 = $1179;$330 = $285;
           }
           $322 = ((($323)) + 16|0);
           $324 = HEAP32[$322>>2]|0;
           $325 = (($324) + ($326)|0);
           $327 = HEAP8[$325>>0]|0;
           $328 = HEAP32[$282>>2]|0;
           $329 = (($330) + 1)|0;
           HEAP32[$272>>2] = $329;
           $331 = (($328) + ($330)|0);
           HEAP8[$331>>0] = $327;
           $332 = HEAP32[$274>>2]|0;
           $333 = (($332) + 1)|0;
           HEAP32[$274>>2] = $333;
           $334 = HEAP32[$267>>2]|0;
           $335 = ((($334)) + 20|0);
           $336 = HEAP32[$335>>2]|0;
           $337 = $336 & 65535;
           $338 = ($333>>>0)<($337>>>0);
           if (!($338)) {
            $$2361 = $$1360;$340 = $334;
            break L50;
           }
           $$pre417 = HEAP32[$272>>2]|0;
           $$0359411 = $$1360;$1179 = $333;$285 = $$pre417;$288 = $334;
          }
         } else {
          $$2361 = $273;$340 = $268;
         }
        } while(0);
        $339 = ((($340)) + 44|0);
        $341 = HEAP32[$339>>2]|0;
        $342 = ($341|0)==(0);
        if ($342) {
         $354 = $340;
        } else {
         $343 = HEAP32[$272>>2]|0;
         $344 = ($343>>>0)>($$2361>>>0);
         if ($344) {
          $345 = ((($0)) + 48|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ((($4)) + 8|0);
          $348 = HEAP32[$347>>2]|0;
          $349 = (($348) + ($$2361)|0);
          $350 = (($343) - ($$2361))|0;
          $351 = (_crc32($346,$349,$350)|0);
          HEAP32[$345>>2] = $351;
          $$pre422 = HEAP32[$267>>2]|0;
          $354 = $$pre422;
         } else {
          $354 = $340;
         }
        }
        $352 = HEAP32[$274>>2]|0;
        $353 = ((($354)) + 20|0);
        $355 = HEAP32[$353>>2]|0;
        $356 = ($352|0)==($355|0);
        if ($356) {
         HEAP32[$274>>2] = 0;
         $1178 = $354;
         break;
        } else {
         $$pr392$pre = HEAP32[$16>>2]|0;
         $$pr392 = $$pr392$pre;
         label = 50;
         break L46;
        }
       }
      } while(0);
      HEAP32[$16>>2] = 73;
      $$pre$phiZ2D = $267;$359 = $1178;
      label = 53;
     } else {
      $$pr392 = $265;
      label = 50;
     }
    } while(0);
    if ((label|0) == 50) {
     $357 = ($$pr392|0)==(73);
     if ($357) {
      $$phi$trans$insert = ((($4)) + 28|0);
      $$pre425 = HEAP32[$$phi$trans$insert>>2]|0;
      $$pre$phiZ2D = $$phi$trans$insert;$359 = $$pre425;
      label = 53;
     } else {
      $432 = $$pr392;
      label = 70;
     }
    }
    L78: do {
     if ((label|0) == 53) {
      $358 = ((($359)) + 28|0);
      $360 = HEAP32[$358>>2]|0;
      $361 = ($360|0)==(0|0);
      do {
       if (!($361)) {
        $362 = ((($4)) + 20|0);
        $363 = HEAP32[$362>>2]|0;
        $364 = ((($4)) + 12|0);
        $365 = ((($0)) + 48|0);
        $366 = ((($4)) + 8|0);
        $367 = ((($0)) + 20|0);
        $368 = ((($4)) + 32|0);
        $$0356 = $363;$370 = $363;
        while(1) {
         $369 = HEAP32[$364>>2]|0;
         $371 = ($370|0)==($369|0);
         if ($371) {
          $372 = HEAP32[$$pre$phiZ2D>>2]|0;
          $373 = ((($372)) + 44|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)!=(0);
          $376 = ($370>>>0)>($$0356>>>0);
          $or$cond368 = $376 & $375;
          if ($or$cond368) {
           $377 = HEAP32[$365>>2]|0;
           $378 = HEAP32[$366>>2]|0;
           $379 = (($378) + ($$0356)|0);
           $380 = (($370) - ($$0356))|0;
           $381 = (_crc32($377,$379,$380)|0);
           HEAP32[$365>>2] = $381;
          }
          $382 = HEAP32[$3>>2]|0;
          __tr_flush_bits($382);
          $383 = ((($382)) + 20|0);
          $384 = HEAP32[$383>>2]|0;
          $385 = HEAP32[$22>>2]|0;
          $386 = ($384>>>0)>($385>>>0);
          $$$i377 = $386 ? $385 : $384;
          $387 = ($$$i377|0)==(0);
          if (!($387)) {
           $388 = HEAP32[$8>>2]|0;
           $389 = ((($382)) + 16|0);
           $390 = HEAP32[$389>>2]|0;
           _memcpy(($388|0),($390|0),($$$i377|0))|0;
           $391 = HEAP32[$8>>2]|0;
           $392 = (($391) + ($$$i377)|0);
           HEAP32[$8>>2] = $392;
           $393 = HEAP32[$389>>2]|0;
           $394 = (($393) + ($$$i377)|0);
           HEAP32[$389>>2] = $394;
           $395 = HEAP32[$367>>2]|0;
           $396 = (($395) + ($$$i377))|0;
           HEAP32[$367>>2] = $396;
           $397 = HEAP32[$22>>2]|0;
           $398 = (($397) - ($$$i377))|0;
           HEAP32[$22>>2] = $398;
           $399 = HEAP32[$383>>2]|0;
           $400 = (($399) - ($$$i377))|0;
           HEAP32[$383>>2] = $400;
           $401 = ($400|0)==(0);
           if ($401) {
            $402 = ((($382)) + 8|0);
            $403 = HEAP32[$402>>2]|0;
            HEAP32[$389>>2] = $403;
           }
          }
          $404 = HEAP32[$362>>2]|0;
          $405 = HEAP32[$364>>2]|0;
          $406 = ($404|0)==($405|0);
          if ($406) {
           $$0355 = 1;$$2358 = $404;
           break;
          } else {
           $$1357 = $404;$417 = $404;
          }
         } else {
          $$1357 = $$0356;$417 = $370;
         }
         $407 = HEAP32[$$pre$phiZ2D>>2]|0;
         $408 = ((($407)) + 28|0);
         $409 = HEAP32[$408>>2]|0;
         $410 = HEAP32[$368>>2]|0;
         $411 = (($410) + 1)|0;
         HEAP32[$368>>2] = $411;
         $412 = (($409) + ($410)|0);
         $413 = HEAP8[$412>>0]|0;
         $414 = $413&255;
         $415 = HEAP32[$366>>2]|0;
         $416 = (($417) + 1)|0;
         HEAP32[$362>>2] = $416;
         $418 = (($415) + ($417)|0);
         HEAP8[$418>>0] = $413;
         $419 = ($413<<24>>24)==(0);
         if ($419) {
          $$0355 = $414;$$2358 = $$1357;
          break;
         }
         $$pre427 = HEAP32[$362>>2]|0;
         $$0356 = $$1357;$370 = $$pre427;
        }
        $420 = HEAP32[$$pre$phiZ2D>>2]|0;
        $421 = ((($420)) + 44|0);
        $422 = HEAP32[$421>>2]|0;
        $423 = ($422|0)==(0);
        if (!($423)) {
         $424 = HEAP32[$362>>2]|0;
         $425 = ($424>>>0)>($$2358>>>0);
         if ($425) {
          $426 = HEAP32[$365>>2]|0;
          $427 = HEAP32[$366>>2]|0;
          $428 = (($427) + ($$2358)|0);
          $429 = (($424) - ($$2358))|0;
          $430 = (_crc32($426,$428,$429)|0);
          HEAP32[$365>>2] = $430;
         }
        }
        $431 = ($$0355|0)==(0);
        if ($431) {
         HEAP32[$368>>2] = 0;
         break;
        } else {
         $$pr394 = HEAP32[$16>>2]|0;
         $432 = $$pr394;
         label = 70;
         break L78;
        }
       }
      } while(0);
      HEAP32[$16>>2] = 91;
      $$pre$phi438Z2D = $$pre$phiZ2D;
      label = 73;
     }
    } while(0);
    if ((label|0) == 70) {
     $433 = ($432|0)==(91);
     if ($433) {
      $$pre437 = ((($4)) + 28|0);
      $$pre$phi438Z2D = $$pre437;
      label = 73;
     } else {
      $$pr398 = $432;
      label = 89;
     }
    }
    do {
     if ((label|0) == 73) {
      $434 = HEAP32[$$pre$phi438Z2D>>2]|0;
      $435 = ((($434)) + 36|0);
      $436 = HEAP32[$435>>2]|0;
      $437 = ($436|0)==(0|0);
      if (!($437)) {
       $438 = ((($4)) + 20|0);
       $439 = HEAP32[$438>>2]|0;
       $440 = ((($4)) + 12|0);
       $441 = ((($0)) + 48|0);
       $442 = ((($4)) + 8|0);
       $443 = ((($0)) + 20|0);
       $444 = ((($4)) + 32|0);
       $$0353 = $439;$446 = $439;
       while(1) {
        $445 = HEAP32[$440>>2]|0;
        $447 = ($446|0)==($445|0);
        if ($447) {
         $448 = HEAP32[$$pre$phi438Z2D>>2]|0;
         $449 = ((($448)) + 44|0);
         $450 = HEAP32[$449>>2]|0;
         $451 = ($450|0)!=(0);
         $452 = ($446>>>0)>($$0353>>>0);
         $or$cond369 = $452 & $451;
         if ($or$cond369) {
          $453 = HEAP32[$441>>2]|0;
          $454 = HEAP32[$442>>2]|0;
          $455 = (($454) + ($$0353)|0);
          $456 = (($446) - ($$0353))|0;
          $457 = (_crc32($453,$455,$456)|0);
          HEAP32[$441>>2] = $457;
         }
         $458 = HEAP32[$3>>2]|0;
         __tr_flush_bits($458);
         $459 = ((($458)) + 20|0);
         $460 = HEAP32[$459>>2]|0;
         $461 = HEAP32[$22>>2]|0;
         $462 = ($460>>>0)>($461>>>0);
         $$$i379 = $462 ? $461 : $460;
         $463 = ($$$i379|0)==(0);
         if (!($463)) {
          $464 = HEAP32[$8>>2]|0;
          $465 = ((($458)) + 16|0);
          $466 = HEAP32[$465>>2]|0;
          _memcpy(($464|0),($466|0),($$$i379|0))|0;
          $467 = HEAP32[$8>>2]|0;
          $468 = (($467) + ($$$i379)|0);
          HEAP32[$8>>2] = $468;
          $469 = HEAP32[$465>>2]|0;
          $470 = (($469) + ($$$i379)|0);
          HEAP32[$465>>2] = $470;
          $471 = HEAP32[$443>>2]|0;
          $472 = (($471) + ($$$i379))|0;
          HEAP32[$443>>2] = $472;
          $473 = HEAP32[$22>>2]|0;
          $474 = (($473) - ($$$i379))|0;
          HEAP32[$22>>2] = $474;
          $475 = HEAP32[$459>>2]|0;
          $476 = (($475) - ($$$i379))|0;
          HEAP32[$459>>2] = $476;
          $477 = ($476|0)==(0);
          if ($477) {
           $478 = ((($458)) + 8|0);
           $479 = HEAP32[$478>>2]|0;
           HEAP32[$465>>2] = $479;
          }
         }
         $480 = HEAP32[$438>>2]|0;
         $481 = HEAP32[$440>>2]|0;
         $482 = ($480|0)==($481|0);
         if ($482) {
          $$0352 = 1;$$2 = $480;
          break;
         } else {
          $$1354 = $480;$493 = $480;
         }
        } else {
         $$1354 = $$0353;$493 = $446;
        }
        $483 = HEAP32[$$pre$phi438Z2D>>2]|0;
        $484 = ((($483)) + 36|0);
        $485 = HEAP32[$484>>2]|0;
        $486 = HEAP32[$444>>2]|0;
        $487 = (($486) + 1)|0;
        HEAP32[$444>>2] = $487;
        $488 = (($485) + ($486)|0);
        $489 = HEAP8[$488>>0]|0;
        $490 = $489&255;
        $491 = HEAP32[$442>>2]|0;
        $492 = (($493) + 1)|0;
        HEAP32[$438>>2] = $492;
        $494 = (($491) + ($493)|0);
        HEAP8[$494>>0] = $489;
        $495 = ($489<<24>>24)==(0);
        if ($495) {
         $$0352 = $490;$$2 = $$1354;
         break;
        }
        $$pre429 = HEAP32[$438>>2]|0;
        $$0353 = $$1354;$446 = $$pre429;
       }
       $496 = HEAP32[$$pre$phi438Z2D>>2]|0;
       $497 = ((($496)) + 44|0);
       $498 = HEAP32[$497>>2]|0;
       $499 = ($498|0)==(0);
       if (!($499)) {
        $500 = HEAP32[$438>>2]|0;
        $501 = ($500>>>0)>($$2>>>0);
        if ($501) {
         $502 = HEAP32[$441>>2]|0;
         $503 = HEAP32[$442>>2]|0;
         $504 = (($503) + ($$2)|0);
         $505 = (($500) - ($$2))|0;
         $506 = (_crc32($502,$504,$505)|0);
         HEAP32[$441>>2] = $506;
        }
       }
       $507 = ($$0352|0)==(0);
       if (!($507)) {
        $$pr398$pre = HEAP32[$16>>2]|0;
        $$pr398 = $$pr398$pre;
        label = 89;
        break;
       }
      }
      HEAP32[$16>>2] = 103;
      $$pre$phi440Z2D = $$pre$phi438Z2D;
      label = 92;
     }
    } while(0);
    if ((label|0) == 89) {
     $508 = ($$pr398|0)==(103);
     if ($508) {
      $$pre439 = ((($4)) + 28|0);
      $$pre$phi440Z2D = $$pre439;
      label = 92;
     }
    }
    do {
     if ((label|0) == 92) {
      $509 = HEAP32[$$pre$phi440Z2D>>2]|0;
      $510 = ((($509)) + 44|0);
      $511 = HEAP32[$510>>2]|0;
      $512 = ($511|0)==(0);
      if (!($512)) {
       $513 = ((($4)) + 20|0);
       $514 = HEAP32[$513>>2]|0;
       $515 = (($514) + 2)|0;
       $516 = ((($4)) + 12|0);
       $517 = HEAP32[$516>>2]|0;
       $518 = ($515>>>0)>($517>>>0);
       if ($518) {
        $519 = HEAP32[$3>>2]|0;
        __tr_flush_bits($519);
        $520 = ((($519)) + 20|0);
        $521 = HEAP32[$520>>2]|0;
        $522 = HEAP32[$22>>2]|0;
        $523 = ($521>>>0)>($522>>>0);
        $$$i381 = $523 ? $522 : $521;
        $524 = ($$$i381|0)==(0);
        if (!($524)) {
         $525 = HEAP32[$8>>2]|0;
         $526 = ((($519)) + 16|0);
         $527 = HEAP32[$526>>2]|0;
         _memcpy(($525|0),($527|0),($$$i381|0))|0;
         $528 = HEAP32[$8>>2]|0;
         $529 = (($528) + ($$$i381)|0);
         HEAP32[$8>>2] = $529;
         $530 = HEAP32[$526>>2]|0;
         $531 = (($530) + ($$$i381)|0);
         HEAP32[$526>>2] = $531;
         $532 = ((($0)) + 20|0);
         $533 = HEAP32[$532>>2]|0;
         $534 = (($533) + ($$$i381))|0;
         HEAP32[$532>>2] = $534;
         $535 = HEAP32[$22>>2]|0;
         $536 = (($535) - ($$$i381))|0;
         HEAP32[$22>>2] = $536;
         $537 = HEAP32[$520>>2]|0;
         $538 = (($537) - ($$$i381))|0;
         HEAP32[$520>>2] = $538;
         $539 = ($538|0)==(0);
         if ($539) {
          $540 = ((($519)) + 8|0);
          $541 = HEAP32[$540>>2]|0;
          HEAP32[$526>>2] = $541;
         }
        }
       }
       $542 = HEAP32[$513>>2]|0;
       $543 = (($542) + 2)|0;
       $544 = HEAP32[$516>>2]|0;
       $545 = ($543>>>0)>($544>>>0);
       if ($545) {
        break;
       }
       $546 = ((($0)) + 48|0);
       $547 = HEAP32[$546>>2]|0;
       $548 = $547&255;
       $549 = ((($4)) + 8|0);
       $550 = HEAP32[$549>>2]|0;
       $551 = (($542) + 1)|0;
       HEAP32[$513>>2] = $551;
       $552 = (($550) + ($542)|0);
       HEAP8[$552>>0] = $548;
       $553 = HEAP32[$546>>2]|0;
       $554 = $553 >>> 8;
       $555 = $554&255;
       $556 = HEAP32[$549>>2]|0;
       $557 = HEAP32[$513>>2]|0;
       $558 = (($557) + 1)|0;
       HEAP32[$513>>2] = $558;
       $559 = (($556) + ($557)|0);
       HEAP8[$559>>0] = $555;
       $560 = (_crc32(0,0,0)|0);
       HEAP32[$546>>2] = $560;
      }
      HEAP32[$16>>2] = 113;
     }
    } while(0);
    $561 = ((($4)) + 20|0);
    $562 = HEAP32[$561>>2]|0;
    $563 = ($562|0)==(0);
    do {
     if ($563) {
      $589 = ((($0)) + 4|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = ($590|0)==(0);
      if ($591) {
       $592 = $1 << 1;
       $593 = ($1|0)>(4);
       $594 = $593 ? 9 : 0;
       $595 = (($592) - ($594))|0;
       $596 = $28 << 1;
       $597 = ($28|0)>(4);
       $598 = $597 ? 9 : 0;
       $599 = (($596) - ($598))|0;
       $600 = ($595|0)<=($599|0);
       $or$cond11 = $19 & $600;
       if (!($or$cond11)) {
        $601 = HEAP32[$16>>2]|0;
        $602 = ($601|0)==(666);
        $615 = $602;
        label = 114;
        break;
       }
       $603 = HEAP32[(9376)>>2]|0;
       $604 = ((($0)) + 24|0);
       HEAP32[$604>>2] = $603;
       $$1 = -5;
       return ($$1|0);
      } else {
       $607 = $590;
       label = 111;
      }
     } else {
      $564 = HEAP32[$3>>2]|0;
      __tr_flush_bits($564);
      $565 = ((($564)) + 20|0);
      $566 = HEAP32[$565>>2]|0;
      $567 = HEAP32[$22>>2]|0;
      $568 = ($566>>>0)>($567>>>0);
      $$$i383 = $568 ? $567 : $566;
      $569 = ($$$i383|0)==(0);
      if ($569) {
       $587 = $567;
      } else {
       $570 = HEAP32[$8>>2]|0;
       $571 = ((($564)) + 16|0);
       $572 = HEAP32[$571>>2]|0;
       _memcpy(($570|0),($572|0),($$$i383|0))|0;
       $573 = HEAP32[$8>>2]|0;
       $574 = (($573) + ($$$i383)|0);
       HEAP32[$8>>2] = $574;
       $575 = HEAP32[$571>>2]|0;
       $576 = (($575) + ($$$i383)|0);
       HEAP32[$571>>2] = $576;
       $577 = ((($0)) + 20|0);
       $578 = HEAP32[$577>>2]|0;
       $579 = (($578) + ($$$i383))|0;
       HEAP32[$577>>2] = $579;
       $580 = HEAP32[$22>>2]|0;
       $581 = (($580) - ($$$i383))|0;
       HEAP32[$22>>2] = $581;
       $582 = HEAP32[$565>>2]|0;
       $583 = (($582) - ($$$i383))|0;
       HEAP32[$565>>2] = $583;
       $584 = ($583|0)==(0);
       if ($584) {
        $585 = ((($564)) + 8|0);
        $586 = HEAP32[$585>>2]|0;
        HEAP32[$571>>2] = $586;
        $587 = $581;
       } else {
        $587 = $581;
       }
      }
      $588 = ($587|0)==(0);
      if (!($588)) {
       $$phi$trans$insert432 = ((($0)) + 4|0);
       $$pre433 = HEAP32[$$phi$trans$insert432>>2]|0;
       $607 = $$pre433;
       label = 111;
       break;
      }
      HEAP32[$27>>2] = -1;
      $$1 = 0;
      return ($$1|0);
     }
    } while(0);
    do {
     if ((label|0) == 111) {
      $605 = HEAP32[$16>>2]|0;
      $606 = ($605|0)==(666);
      $608 = ($607|0)!=(0);
      $brmerge$demorgan = $606 & $608;
      if (!($brmerge$demorgan)) {
       if ($608) {
        label = 115;
        break;
       } else {
        $615 = $606;
        label = 114;
        break;
       }
      }
      $609 = HEAP32[(9376)>>2]|0;
      $610 = ((($0)) + 24|0);
      HEAP32[$610>>2] = $609;
      $$1 = -5;
      return ($$1|0);
     }
    } while(0);
    if ((label|0) == 114) {
     $611 = ((($4)) + 116|0);
     $612 = HEAP32[$611>>2]|0;
     $613 = ($612|0)==(0);
     $614 = ($1|0)==(0);
     $brmerge406 = $614 | $615;
     $or$cond409 = $brmerge406 & $613;
     if (!($or$cond409)) {
      label = 115;
     }
    }
    do {
     if ((label|0) == 115) {
      $616 = ((($4)) + 136|0);
      $617 = HEAP32[$616>>2]|0;
      L172: do {
       switch ($617|0) {
       case 2:  {
        $618 = ((($4)) + 116|0);
        $619 = ((($4)) + 96|0);
        $620 = ((($4)) + 56|0);
        $621 = ((($4)) + 108|0);
        $622 = ((($4)) + 5796|0);
        $623 = ((($4)) + 5792|0);
        $624 = ((($4)) + 5784|0);
        $625 = ((($4)) + 5788|0);
        $626 = ((($4)) + 92|0);
        while(1) {
         $627 = HEAP32[$618>>2]|0;
         $628 = ($627|0)==(0);
         if ($628) {
          _fill_window($4);
          $629 = HEAP32[$618>>2]|0;
          $630 = ($629|0)==(0);
          if ($630) {
           break;
          }
         }
         HEAP32[$619>>2] = 0;
         $632 = HEAP32[$620>>2]|0;
         $633 = HEAP32[$621>>2]|0;
         $634 = (($632) + ($633)|0);
         $635 = HEAP8[$634>>0]|0;
         $636 = HEAP32[$622>>2]|0;
         $637 = HEAP32[$623>>2]|0;
         $638 = (($636) + ($637<<1)|0);
         HEAP16[$638>>1] = 0;
         $639 = HEAP32[$624>>2]|0;
         $640 = (($637) + 1)|0;
         HEAP32[$623>>2] = $640;
         $641 = (($639) + ($637)|0);
         HEAP8[$641>>0] = $635;
         $642 = $635&255;
         $643 = (((($4)) + 148|0) + ($642<<2)|0);
         $644 = HEAP16[$643>>1]|0;
         $645 = (($644) + 1)<<16>>16;
         HEAP16[$643>>1] = $645;
         $646 = HEAP32[$623>>2]|0;
         $647 = HEAP32[$625>>2]|0;
         $648 = (($647) + -1)|0;
         $649 = ($646|0)==($648|0);
         $650 = HEAP32[$618>>2]|0;
         $651 = (($650) + -1)|0;
         HEAP32[$618>>2] = $651;
         $652 = HEAP32[$621>>2]|0;
         $653 = (($652) + 1)|0;
         HEAP32[$621>>2] = $653;
         if (!($649)) {
          continue;
         }
         $654 = HEAP32[$626>>2]|0;
         $655 = ($654|0)>(-1);
         if ($655) {
          $656 = HEAP32[$620>>2]|0;
          $657 = (($656) + ($654)|0);
          $659 = $657;
         } else {
          $659 = 0;
         }
         $658 = (($653) - ($654))|0;
         __tr_flush_block($4,$659,$658,0);
         $660 = HEAP32[$621>>2]|0;
         HEAP32[$626>>2] = $660;
         $661 = HEAP32[$4>>2]|0;
         $662 = ((($661)) + 28|0);
         $663 = HEAP32[$662>>2]|0;
         __tr_flush_bits($663);
         $664 = ((($663)) + 20|0);
         $665 = HEAP32[$664>>2]|0;
         $666 = ((($661)) + 16|0);
         $667 = HEAP32[$666>>2]|0;
         $668 = ($665>>>0)>($667>>>0);
         $$$i$i = $668 ? $667 : $665;
         $669 = ($$$i$i|0)==(0);
         if (!($669)) {
          $670 = ((($661)) + 12|0);
          $671 = HEAP32[$670>>2]|0;
          $672 = ((($663)) + 16|0);
          $673 = HEAP32[$672>>2]|0;
          _memcpy(($671|0),($673|0),($$$i$i|0))|0;
          $674 = HEAP32[$670>>2]|0;
          $675 = (($674) + ($$$i$i)|0);
          HEAP32[$670>>2] = $675;
          $676 = HEAP32[$672>>2]|0;
          $677 = (($676) + ($$$i$i)|0);
          HEAP32[$672>>2] = $677;
          $678 = ((($661)) + 20|0);
          $679 = HEAP32[$678>>2]|0;
          $680 = (($679) + ($$$i$i))|0;
          HEAP32[$678>>2] = $680;
          $681 = HEAP32[$666>>2]|0;
          $682 = (($681) - ($$$i$i))|0;
          HEAP32[$666>>2] = $682;
          $683 = HEAP32[$664>>2]|0;
          $684 = (($683) - ($$$i$i))|0;
          HEAP32[$664>>2] = $684;
          $685 = ($684|0)==(0);
          if ($685) {
           $686 = ((($663)) + 8|0);
           $687 = HEAP32[$686>>2]|0;
           HEAP32[$672>>2] = $687;
          }
         }
         $688 = HEAP32[$4>>2]|0;
         $689 = ((($688)) + 16|0);
         $690 = HEAP32[$689>>2]|0;
         $691 = ($690|0)==(0);
         if ($691) {
          label = 190;
          break L172;
         }
        }
        $631 = ($1|0)==(0);
        if ($631) {
         label = 190;
        } else {
         $692 = ((($4)) + 5812|0);
         HEAP32[$692>>2] = 0;
         $693 = ($1|0)==(4);
         if ($693) {
          $694 = HEAP32[$626>>2]|0;
          $695 = ($694|0)>(-1);
          if ($695) {
           $696 = HEAP32[$620>>2]|0;
           $697 = (($696) + ($694)|0);
           $700 = $697;
          } else {
           $700 = 0;
          }
          $698 = HEAP32[$621>>2]|0;
          $699 = (($698) - ($694))|0;
          __tr_flush_block($4,$700,$699,1);
          $701 = HEAP32[$621>>2]|0;
          HEAP32[$626>>2] = $701;
          $702 = HEAP32[$4>>2]|0;
          $703 = ((($702)) + 28|0);
          $704 = HEAP32[$703>>2]|0;
          __tr_flush_bits($704);
          $705 = ((($704)) + 20|0);
          $706 = HEAP32[$705>>2]|0;
          $707 = ((($702)) + 16|0);
          $708 = HEAP32[$707>>2]|0;
          $709 = ($706>>>0)>($708>>>0);
          $$$i52$i = $709 ? $708 : $706;
          $710 = ($$$i52$i|0)==(0);
          if (!($710)) {
           $711 = ((($702)) + 12|0);
           $712 = HEAP32[$711>>2]|0;
           $713 = ((($704)) + 16|0);
           $714 = HEAP32[$713>>2]|0;
           _memcpy(($712|0),($714|0),($$$i52$i|0))|0;
           $715 = HEAP32[$711>>2]|0;
           $716 = (($715) + ($$$i52$i)|0);
           HEAP32[$711>>2] = $716;
           $717 = HEAP32[$713>>2]|0;
           $718 = (($717) + ($$$i52$i)|0);
           HEAP32[$713>>2] = $718;
           $719 = ((($702)) + 20|0);
           $720 = HEAP32[$719>>2]|0;
           $721 = (($720) + ($$$i52$i))|0;
           HEAP32[$719>>2] = $721;
           $722 = HEAP32[$707>>2]|0;
           $723 = (($722) - ($$$i52$i))|0;
           HEAP32[$707>>2] = $723;
           $724 = HEAP32[$705>>2]|0;
           $725 = (($724) - ($$$i52$i))|0;
           HEAP32[$705>>2] = $725;
           $726 = ($725|0)==(0);
           if ($726) {
            $727 = ((($704)) + 8|0);
            $728 = HEAP32[$727>>2]|0;
            HEAP32[$713>>2] = $728;
           }
          }
          $729 = HEAP32[$4>>2]|0;
          $730 = ((($729)) + 16|0);
          $731 = HEAP32[$730>>2]|0;
          $732 = ($731|0)==(0);
          $$$i385 = $732 ? 2 : 3;
          $1020 = $$$i385;
          label = 187;
          break L172;
         }
         $733 = HEAP32[$623>>2]|0;
         $734 = ($733|0)==(0);
         if (!($734)) {
          $735 = HEAP32[$626>>2]|0;
          $736 = ($735|0)>(-1);
          if ($736) {
           $737 = HEAP32[$620>>2]|0;
           $738 = (($737) + ($735)|0);
           $741 = $738;
          } else {
           $741 = 0;
          }
          $739 = HEAP32[$621>>2]|0;
          $740 = (($739) - ($735))|0;
          __tr_flush_block($4,$741,$740,0);
          $742 = HEAP32[$621>>2]|0;
          HEAP32[$626>>2] = $742;
          $743 = HEAP32[$4>>2]|0;
          $744 = ((($743)) + 28|0);
          $745 = HEAP32[$744>>2]|0;
          __tr_flush_bits($745);
          $746 = ((($745)) + 20|0);
          $747 = HEAP32[$746>>2]|0;
          $748 = ((($743)) + 16|0);
          $749 = HEAP32[$748>>2]|0;
          $750 = ($747>>>0)>($749>>>0);
          $$$i54$i = $750 ? $749 : $747;
          $751 = ($$$i54$i|0)==(0);
          if (!($751)) {
           $752 = ((($743)) + 12|0);
           $753 = HEAP32[$752>>2]|0;
           $754 = ((($745)) + 16|0);
           $755 = HEAP32[$754>>2]|0;
           _memcpy(($753|0),($755|0),($$$i54$i|0))|0;
           $756 = HEAP32[$752>>2]|0;
           $757 = (($756) + ($$$i54$i)|0);
           HEAP32[$752>>2] = $757;
           $758 = HEAP32[$754>>2]|0;
           $759 = (($758) + ($$$i54$i)|0);
           HEAP32[$754>>2] = $759;
           $760 = ((($743)) + 20|0);
           $761 = HEAP32[$760>>2]|0;
           $762 = (($761) + ($$$i54$i))|0;
           HEAP32[$760>>2] = $762;
           $763 = HEAP32[$748>>2]|0;
           $764 = (($763) - ($$$i54$i))|0;
           HEAP32[$748>>2] = $764;
           $765 = HEAP32[$746>>2]|0;
           $766 = (($765) - ($$$i54$i))|0;
           HEAP32[$746>>2] = $766;
           $767 = ($766|0)==(0);
           if ($767) {
            $768 = ((($745)) + 8|0);
            $769 = HEAP32[$768>>2]|0;
            HEAP32[$754>>2] = $769;
           }
          }
          $770 = HEAP32[$4>>2]|0;
          $771 = ((($770)) + 16|0);
          $772 = HEAP32[$771>>2]|0;
          $773 = ($772|0)==(0);
          if ($773) {
           label = 190;
          }
         }
        }
        break;
       }
       case 3:  {
        $774 = ((($4)) + 116|0);
        $775 = ($1|0)==(0);
        $776 = ((($4)) + 96|0);
        $777 = ((($4)) + 108|0);
        $778 = ((($4)) + 5784|0);
        $779 = ((($4)) + 5796|0);
        $780 = ((($4)) + 5792|0);
        $781 = ((($4)) + 5788|0);
        $782 = ((($4)) + 56|0);
        $783 = ((($4)) + 92|0);
        while(1) {
         $784 = HEAP32[$774>>2]|0;
         $785 = ($784>>>0)<(259);
         if ($785) {
          _fill_window($4);
          $786 = HEAP32[$774>>2]|0;
          $787 = ($786>>>0)<(259);
          $or$cond$i = $775 & $787;
          if ($or$cond$i) {
           label = 190;
           break L172;
          }
          $788 = ($786|0)==(0);
          if ($788) {
           break;
          }
          HEAP32[$776>>2] = 0;
          $789 = ($786>>>0)>(2);
          if ($789) {
           $835 = $786;
           label = 148;
          } else {
           $790 = HEAP32[$778>>2]|0;
           $791 = HEAP32[$779>>2]|0;
           $$pre$i = HEAP32[$777>>2]|0;
           $871 = $$pre$i;$875 = $791;$878 = $790;
           label = 164;
          }
         } else {
          HEAP32[$776>>2] = 0;
          $835 = $784;
          label = 148;
         }
         do {
          if ((label|0) == 148) {
           label = 0;
           $792 = HEAP32[$777>>2]|0;
           $793 = ($792|0)==(0);
           if (!($793)) {
            $794 = HEAP32[$782>>2]|0;
            $795 = (($794) + ($792)|0);
            $$ptr134$i = ((($795)) + -1|0);
            $796 = HEAP8[$$ptr134$i>>0]|0;
            $797 = HEAP8[$795>>0]|0;
            $798 = ($796<<24>>24)==($797<<24>>24);
            if ($798) {
             $$ptr136$i = ((($795)) + 1|0);
             $799 = HEAP8[$$ptr136$i>>0]|0;
             $800 = ($796<<24>>24)==($799<<24>>24);
             if ($800) {
              $801 = ((($$ptr136$i)) + 1|0);
              $802 = HEAP8[$801>>0]|0;
              $803 = ($796<<24>>24)==($802<<24>>24);
              if ($803) {
               $804 = ((($795)) + 258|0);
               $$idx$i = 1;
               while(1) {
                $$ptr$i = (($795) + ($$idx$i)|0);
                $805 = ((($$ptr$i)) + 2|0);
                $806 = HEAP8[$805>>0]|0;
                $807 = ($796<<24>>24)==($806<<24>>24);
                if (!($807)) {
                 $$1$i = $805;
                 break;
                }
                $808 = ((($$ptr$i)) + 3|0);
                $809 = HEAP8[$808>>0]|0;
                $810 = ($796<<24>>24)==($809<<24>>24);
                if (!($810)) {
                 $$1$i = $808;
                 break;
                }
                $811 = ((($$ptr$i)) + 4|0);
                $812 = HEAP8[$811>>0]|0;
                $813 = ($796<<24>>24)==($812<<24>>24);
                if (!($813)) {
                 $$1$i = $811;
                 break;
                }
                $814 = ((($$ptr$i)) + 5|0);
                $815 = HEAP8[$814>>0]|0;
                $816 = ($796<<24>>24)==($815<<24>>24);
                if (!($816)) {
                 $$1$i = $814;
                 break;
                }
                $817 = ((($$ptr$i)) + 6|0);
                $818 = HEAP8[$817>>0]|0;
                $819 = ($796<<24>>24)==($818<<24>>24);
                if (!($819)) {
                 $$1$i = $817;
                 break;
                }
                $820 = ((($$ptr$i)) + 7|0);
                $821 = HEAP8[$820>>0]|0;
                $822 = ($796<<24>>24)==($821<<24>>24);
                if (!($822)) {
                 $$1$i = $820;
                 break;
                }
                $$add131$i = (($$idx$i) + 8)|0;
                $$ptr133$i = (($795) + ($$add131$i)|0);
                $823 = HEAP8[$$ptr133$i>>0]|0;
                $824 = ($796<<24>>24)==($823<<24>>24);
                if (!($824)) {
                 $$1$i = $$ptr133$i;
                 break;
                }
                $$add$i = (($$idx$i) + 9)|0;
                $$ptr132$i = (($795) + ($$add$i)|0);
                $825 = HEAP8[$$ptr132$i>>0]|0;
                $826 = ($796<<24>>24)==($825<<24>>24);
                $827 = ($$add$i|0)<(258);
                $or$cond137$i = $827 & $826;
                if ($or$cond137$i) {
                 $$idx$i = $$add131$i;
                } else {
                 $$1$i = $$ptr132$i;
                 break;
                }
               }
               $830 = $804;
               $831 = $$1$i;
               $832 = (($831) - ($830))|0;
               $833 = (($832) + 258)|0;
               $834 = ($833>>>0)>($835>>>0);
               $$$i387 = $834 ? $835 : $833;
               HEAP32[$776>>2] = $$$i387;
               $836 = ($$$i387>>>0)>(2);
               $837 = HEAP32[$778>>2]|0;
               $838 = HEAP32[$779>>2]|0;
               if (!($836)) {
                $871 = $792;$875 = $838;$878 = $837;
                label = 164;
                break;
               }
               $839 = (($$$i387) + 253)|0;
               $840 = $839&255;
               $841 = HEAP32[$780>>2]|0;
               $842 = (($838) + ($841<<1)|0);
               HEAP16[$842>>1] = 1;
               $843 = (($841) + 1)|0;
               HEAP32[$780>>2] = $843;
               $844 = (($837) + ($841)|0);
               HEAP8[$844>>0] = $840;
               $845 = $839 & 255;
               $846 = (19336 + ($845)|0);
               $847 = HEAP8[$846>>0]|0;
               $848 = $847&255;
               $849 = $848 | 256;
               $850 = (($849) + 1)|0;
               $851 = (((($4)) + 148|0) + ($850<<2)|0);
               $852 = HEAP16[$851>>1]|0;
               $853 = (($852) + 1)<<16>>16;
               HEAP16[$851>>1] = $853;
               $854 = HEAP8[18824]|0;
               $855 = $854&255;
               $856 = (((($4)) + 2440|0) + ($855<<2)|0);
               $857 = HEAP16[$856>>1]|0;
               $858 = (($857) + 1)<<16>>16;
               HEAP16[$856>>1] = $858;
               $859 = HEAP32[$780>>2]|0;
               $860 = HEAP32[$781>>2]|0;
               $861 = (($860) + -1)|0;
               $862 = ($859|0)==($861|0);
               $863 = $862&1;
               $864 = HEAP32[$776>>2]|0;
               $865 = HEAP32[$774>>2]|0;
               $866 = (($865) - ($864))|0;
               HEAP32[$774>>2] = $866;
               $867 = HEAP32[$777>>2]|0;
               $868 = (($867) + ($864))|0;
               HEAP32[$777>>2] = $868;
               HEAP32[$776>>2] = 0;
               $$0129$i = $863;$898 = $868;
               break;
              }
             }
            }
           }
           $828 = HEAP32[$778>>2]|0;
           $829 = HEAP32[$779>>2]|0;
           $871 = $792;$875 = $829;$878 = $828;
           label = 164;
          }
         } while(0);
         if ((label|0) == 164) {
          label = 0;
          $869 = HEAP32[$782>>2]|0;
          $870 = (($869) + ($871)|0);
          $872 = HEAP8[$870>>0]|0;
          $873 = HEAP32[$780>>2]|0;
          $874 = (($875) + ($873<<1)|0);
          HEAP16[$874>>1] = 0;
          $876 = (($873) + 1)|0;
          HEAP32[$780>>2] = $876;
          $877 = (($878) + ($873)|0);
          HEAP8[$877>>0] = $872;
          $879 = $872&255;
          $880 = (((($4)) + 148|0) + ($879<<2)|0);
          $881 = HEAP16[$880>>1]|0;
          $882 = (($881) + 1)<<16>>16;
          HEAP16[$880>>1] = $882;
          $883 = HEAP32[$780>>2]|0;
          $884 = HEAP32[$781>>2]|0;
          $885 = (($884) + -1)|0;
          $886 = ($883|0)==($885|0);
          $887 = $886&1;
          $888 = HEAP32[$774>>2]|0;
          $889 = (($888) + -1)|0;
          HEAP32[$774>>2] = $889;
          $890 = HEAP32[$777>>2]|0;
          $891 = (($890) + 1)|0;
          HEAP32[$777>>2] = $891;
          $$0129$i = $887;$898 = $891;
         }
         $892 = ($$0129$i|0)==(0);
         if ($892) {
          continue;
         }
         $893 = HEAP32[$783>>2]|0;
         $894 = ($893|0)>(-1);
         if ($894) {
          $895 = HEAP32[$782>>2]|0;
          $896 = (($895) + ($893)|0);
          $899 = $896;
         } else {
          $899 = 0;
         }
         $897 = (($898) - ($893))|0;
         __tr_flush_block($4,$899,$897,0);
         $900 = HEAP32[$777>>2]|0;
         HEAP32[$783>>2] = $900;
         $901 = HEAP32[$4>>2]|0;
         $902 = ((($901)) + 28|0);
         $903 = HEAP32[$902>>2]|0;
         __tr_flush_bits($903);
         $904 = ((($903)) + 20|0);
         $905 = HEAP32[$904>>2]|0;
         $906 = ((($901)) + 16|0);
         $907 = HEAP32[$906>>2]|0;
         $908 = ($905>>>0)>($907>>>0);
         $$$i$i388 = $908 ? $907 : $905;
         $909 = ($$$i$i388|0)==(0);
         if (!($909)) {
          $910 = ((($901)) + 12|0);
          $911 = HEAP32[$910>>2]|0;
          $912 = ((($903)) + 16|0);
          $913 = HEAP32[$912>>2]|0;
          _memcpy(($911|0),($913|0),($$$i$i388|0))|0;
          $914 = HEAP32[$910>>2]|0;
          $915 = (($914) + ($$$i$i388)|0);
          HEAP32[$910>>2] = $915;
          $916 = HEAP32[$912>>2]|0;
          $917 = (($916) + ($$$i$i388)|0);
          HEAP32[$912>>2] = $917;
          $918 = ((($901)) + 20|0);
          $919 = HEAP32[$918>>2]|0;
          $920 = (($919) + ($$$i$i388))|0;
          HEAP32[$918>>2] = $920;
          $921 = HEAP32[$906>>2]|0;
          $922 = (($921) - ($$$i$i388))|0;
          HEAP32[$906>>2] = $922;
          $923 = HEAP32[$904>>2]|0;
          $924 = (($923) - ($$$i$i388))|0;
          HEAP32[$904>>2] = $924;
          $925 = ($924|0)==(0);
          if ($925) {
           $926 = ((($903)) + 8|0);
           $927 = HEAP32[$926>>2]|0;
           HEAP32[$912>>2] = $927;
          }
         }
         $928 = HEAP32[$4>>2]|0;
         $929 = ((($928)) + 16|0);
         $930 = HEAP32[$929>>2]|0;
         $931 = ($930|0)==(0);
         if ($931) {
          label = 190;
          break L172;
         }
        }
        $932 = ((($4)) + 5812|0);
        HEAP32[$932>>2] = 0;
        $933 = ($1|0)==(4);
        if ($933) {
         $934 = HEAP32[$783>>2]|0;
         $935 = ($934|0)>(-1);
         if ($935) {
          $936 = HEAP32[$782>>2]|0;
          $937 = (($936) + ($934)|0);
          $940 = $937;
         } else {
          $940 = 0;
         }
         $938 = HEAP32[$777>>2]|0;
         $939 = (($938) - ($934))|0;
         __tr_flush_block($4,$940,$939,1);
         $941 = HEAP32[$777>>2]|0;
         HEAP32[$783>>2] = $941;
         $942 = HEAP32[$4>>2]|0;
         $943 = ((($942)) + 28|0);
         $944 = HEAP32[$943>>2]|0;
         __tr_flush_bits($944);
         $945 = ((($944)) + 20|0);
         $946 = HEAP32[$945>>2]|0;
         $947 = ((($942)) + 16|0);
         $948 = HEAP32[$947>>2]|0;
         $949 = ($946>>>0)>($948>>>0);
         $$$i139$i = $949 ? $948 : $946;
         $950 = ($$$i139$i|0)==(0);
         if (!($950)) {
          $951 = ((($942)) + 12|0);
          $952 = HEAP32[$951>>2]|0;
          $953 = ((($944)) + 16|0);
          $954 = HEAP32[$953>>2]|0;
          _memcpy(($952|0),($954|0),($$$i139$i|0))|0;
          $955 = HEAP32[$951>>2]|0;
          $956 = (($955) + ($$$i139$i)|0);
          HEAP32[$951>>2] = $956;
          $957 = HEAP32[$953>>2]|0;
          $958 = (($957) + ($$$i139$i)|0);
          HEAP32[$953>>2] = $958;
          $959 = ((($942)) + 20|0);
          $960 = HEAP32[$959>>2]|0;
          $961 = (($960) + ($$$i139$i))|0;
          HEAP32[$959>>2] = $961;
          $962 = HEAP32[$947>>2]|0;
          $963 = (($962) - ($$$i139$i))|0;
          HEAP32[$947>>2] = $963;
          $964 = HEAP32[$945>>2]|0;
          $965 = (($964) - ($$$i139$i))|0;
          HEAP32[$945>>2] = $965;
          $966 = ($965|0)==(0);
          if ($966) {
           $967 = ((($944)) + 8|0);
           $968 = HEAP32[$967>>2]|0;
           HEAP32[$953>>2] = $968;
          }
         }
         $969 = HEAP32[$4>>2]|0;
         $970 = ((($969)) + 16|0);
         $971 = HEAP32[$970>>2]|0;
         $972 = ($971|0)==(0);
         $$138$i = $972 ? 2 : 3;
         $1020 = $$138$i;
         label = 187;
         break L172;
        }
        $973 = HEAP32[$780>>2]|0;
        $974 = ($973|0)==(0);
        if (!($974)) {
         $975 = HEAP32[$783>>2]|0;
         $976 = ($975|0)>(-1);
         if ($976) {
          $977 = HEAP32[$782>>2]|0;
          $978 = (($977) + ($975)|0);
          $981 = $978;
         } else {
          $981 = 0;
         }
         $979 = HEAP32[$777>>2]|0;
         $980 = (($979) - ($975))|0;
         __tr_flush_block($4,$981,$980,0);
         $982 = HEAP32[$777>>2]|0;
         HEAP32[$783>>2] = $982;
         $983 = HEAP32[$4>>2]|0;
         $984 = ((($983)) + 28|0);
         $985 = HEAP32[$984>>2]|0;
         __tr_flush_bits($985);
         $986 = ((($985)) + 20|0);
         $987 = HEAP32[$986>>2]|0;
         $988 = ((($983)) + 16|0);
         $989 = HEAP32[$988>>2]|0;
         $990 = ($987>>>0)>($989>>>0);
         $$$i141$i = $990 ? $989 : $987;
         $991 = ($$$i141$i|0)==(0);
         if (!($991)) {
          $992 = ((($983)) + 12|0);
          $993 = HEAP32[$992>>2]|0;
          $994 = ((($985)) + 16|0);
          $995 = HEAP32[$994>>2]|0;
          _memcpy(($993|0),($995|0),($$$i141$i|0))|0;
          $996 = HEAP32[$992>>2]|0;
          $997 = (($996) + ($$$i141$i)|0);
          HEAP32[$992>>2] = $997;
          $998 = HEAP32[$994>>2]|0;
          $999 = (($998) + ($$$i141$i)|0);
          HEAP32[$994>>2] = $999;
          $1000 = ((($983)) + 20|0);
          $1001 = HEAP32[$1000>>2]|0;
          $1002 = (($1001) + ($$$i141$i))|0;
          HEAP32[$1000>>2] = $1002;
          $1003 = HEAP32[$988>>2]|0;
          $1004 = (($1003) - ($$$i141$i))|0;
          HEAP32[$988>>2] = $1004;
          $1005 = HEAP32[$986>>2]|0;
          $1006 = (($1005) - ($$$i141$i))|0;
          HEAP32[$986>>2] = $1006;
          $1007 = ($1006|0)==(0);
          if ($1007) {
           $1008 = ((($985)) + 8|0);
           $1009 = HEAP32[$1008>>2]|0;
           HEAP32[$994>>2] = $1009;
          }
         }
         $1010 = HEAP32[$4>>2]|0;
         $1011 = ((($1010)) + 16|0);
         $1012 = HEAP32[$1011>>2]|0;
         $1013 = ($1012|0)==(0);
         if ($1013) {
          label = 190;
         }
        }
        break;
       }
       default: {
        $1014 = ((($4)) + 132|0);
        $1015 = HEAP32[$1014>>2]|0;
        $1016 = (((8620 + (($1015*12)|0)|0)) + 8|0);
        $1017 = HEAP32[$1016>>2]|0;
        $1018 = (FUNCTION_TABLE_iii[$1017 & 31]($4,$1)|0);
        $1020 = $1018;
        label = 187;
       }
       }
      } while(0);
      if ((label|0) == 187) {
       $1019 = $1020 | 1;
       $1021 = ($1019|0)==(3);
       if ($1021) {
        HEAP32[$16>>2] = 666;
       }
       $1022 = $1020 | 2;
       $1023 = ($1022|0)==(2);
       if ($1023) {
        label = 190;
       } else {
        $1026 = ($1020|0)==(1);
        if (!($1026)) {
         break;
        }
       }
      }
      if ((label|0) == 190) {
       $1024 = HEAP32[$22>>2]|0;
       $1025 = ($1024|0)==(0);
       if (!($1025)) {
        $$1 = 0;
        return ($$1|0);
       }
       HEAP32[$27>>2] = -1;
       $$1 = 0;
       return ($$1|0);
      }
      switch ($1|0) {
      case 1:  {
       __tr_align($4);
       break;
      }
      case 5:  {
       break;
      }
      default: {
       __tr_stored_block($4,0,0,0);
       $1027 = ($1|0)==(3);
       if ($1027) {
        $1028 = ((($4)) + 68|0);
        $1029 = HEAP32[$1028>>2]|0;
        $1030 = ((($4)) + 76|0);
        $1031 = HEAP32[$1030>>2]|0;
        $1032 = (($1031) + -1)|0;
        $1033 = (($1029) + ($1032<<1)|0);
        HEAP16[$1033>>1] = 0;
        $1034 = $1032 << 1;
        _memset(($1029|0),0,($1034|0))|0;
        $1035 = ((($4)) + 116|0);
        $1036 = HEAP32[$1035>>2]|0;
        $1037 = ($1036|0)==(0);
        if ($1037) {
         $1038 = ((($4)) + 108|0);
         HEAP32[$1038>>2] = 0;
         $1039 = ((($4)) + 92|0);
         HEAP32[$1039>>2] = 0;
         $1040 = ((($4)) + 5812|0);
         HEAP32[$1040>>2] = 0;
        }
       }
      }
      }
      $1041 = HEAP32[$3>>2]|0;
      __tr_flush_bits($1041);
      $1042 = ((($1041)) + 20|0);
      $1043 = HEAP32[$1042>>2]|0;
      $1044 = HEAP32[$22>>2]|0;
      $1045 = ($1043>>>0)>($1044>>>0);
      $$$i373 = $1045 ? $1044 : $1043;
      $1046 = ($$$i373|0)==(0);
      if ($1046) {
       $1064 = $1044;
      } else {
       $1047 = HEAP32[$8>>2]|0;
       $1048 = ((($1041)) + 16|0);
       $1049 = HEAP32[$1048>>2]|0;
       _memcpy(($1047|0),($1049|0),($$$i373|0))|0;
       $1050 = HEAP32[$8>>2]|0;
       $1051 = (($1050) + ($$$i373)|0);
       HEAP32[$8>>2] = $1051;
       $1052 = HEAP32[$1048>>2]|0;
       $1053 = (($1052) + ($$$i373)|0);
       HEAP32[$1048>>2] = $1053;
       $1054 = ((($0)) + 20|0);
       $1055 = HEAP32[$1054>>2]|0;
       $1056 = (($1055) + ($$$i373))|0;
       HEAP32[$1054>>2] = $1056;
       $1057 = HEAP32[$22>>2]|0;
       $1058 = (($1057) - ($$$i373))|0;
       HEAP32[$22>>2] = $1058;
       $1059 = HEAP32[$1042>>2]|0;
       $1060 = (($1059) - ($$$i373))|0;
       HEAP32[$1042>>2] = $1060;
       $1061 = ($1060|0)==(0);
       if ($1061) {
        $1062 = ((($1041)) + 8|0);
        $1063 = HEAP32[$1062>>2]|0;
        HEAP32[$1048>>2] = $1063;
        $1064 = $1058;
       } else {
        $1064 = $1058;
       }
      }
      $1065 = ($1064|0)==(0);
      if ($1065) {
       HEAP32[$27>>2] = -1;
       $$1 = 0;
       return ($$1|0);
      }
     }
    } while(0);
    if ($19) {
     $$1 = 0;
     return ($$1|0);
    }
    $1066 = ((($4)) + 24|0);
    $1067 = HEAP32[$1066>>2]|0;
    $1068 = ($1067|0)<(1);
    if ($1068) {
     $$1 = 1;
     return ($$1|0);
    }
    $1069 = ($1067|0)==(2);
    $1070 = ((($0)) + 48|0);
    $1071 = HEAP32[$1070>>2]|0;
    if ($1069) {
     $1072 = $1071&255;
     $1073 = ((($4)) + 8|0);
     $1074 = HEAP32[$1073>>2]|0;
     $1075 = HEAP32[$561>>2]|0;
     $1076 = (($1075) + 1)|0;
     HEAP32[$561>>2] = $1076;
     $1077 = (($1074) + ($1075)|0);
     HEAP8[$1077>>0] = $1072;
     $1078 = HEAP32[$1070>>2]|0;
     $1079 = $1078 >>> 8;
     $1080 = $1079&255;
     $1081 = HEAP32[$1073>>2]|0;
     $1082 = HEAP32[$561>>2]|0;
     $1083 = (($1082) + 1)|0;
     HEAP32[$561>>2] = $1083;
     $1084 = (($1081) + ($1082)|0);
     HEAP8[$1084>>0] = $1080;
     $1085 = HEAP32[$1070>>2]|0;
     $1086 = $1085 >>> 16;
     $1087 = $1086&255;
     $1088 = HEAP32[$1073>>2]|0;
     $1089 = HEAP32[$561>>2]|0;
     $1090 = (($1089) + 1)|0;
     HEAP32[$561>>2] = $1090;
     $1091 = (($1088) + ($1089)|0);
     HEAP8[$1091>>0] = $1087;
     $1092 = HEAP32[$1070>>2]|0;
     $1093 = $1092 >>> 24;
     $1094 = $1093&255;
     $1095 = HEAP32[$1073>>2]|0;
     $1096 = HEAP32[$561>>2]|0;
     $1097 = (($1096) + 1)|0;
     HEAP32[$561>>2] = $1097;
     $1098 = (($1095) + ($1096)|0);
     HEAP8[$1098>>0] = $1094;
     $1099 = ((($0)) + 8|0);
     $1100 = HEAP32[$1099>>2]|0;
     $1101 = $1100&255;
     $1102 = HEAP32[$1073>>2]|0;
     $1103 = HEAP32[$561>>2]|0;
     $1104 = (($1103) + 1)|0;
     HEAP32[$561>>2] = $1104;
     $1105 = (($1102) + ($1103)|0);
     HEAP8[$1105>>0] = $1101;
     $1106 = HEAP32[$1099>>2]|0;
     $1107 = $1106 >>> 8;
     $1108 = $1107&255;
     $1109 = HEAP32[$1073>>2]|0;
     $1110 = HEAP32[$561>>2]|0;
     $1111 = (($1110) + 1)|0;
     HEAP32[$561>>2] = $1111;
     $1112 = (($1109) + ($1110)|0);
     HEAP8[$1112>>0] = $1108;
     $1113 = HEAP32[$1099>>2]|0;
     $1114 = $1113 >>> 16;
     $1115 = $1114&255;
     $1116 = HEAP32[$1073>>2]|0;
     $1117 = HEAP32[$561>>2]|0;
     $1118 = (($1117) + 1)|0;
     HEAP32[$561>>2] = $1118;
     $1119 = (($1116) + ($1117)|0);
     HEAP8[$1119>>0] = $1115;
     $1120 = HEAP32[$1099>>2]|0;
     $1121 = $1120 >>> 24;
     $1122 = HEAP32[$1073>>2]|0;
     $1123 = HEAP32[$561>>2]|0;
     $1124 = (($1123) + 1)|0;
     HEAP32[$561>>2] = $1124;
     $1125 = (($1122) + ($1123)|0);
     $$sink407$in = $1121;$$sink408 = $1125;
    } else {
     $1126 = $1071 >>> 16;
     $1127 = $1071 >>> 24;
     $1128 = $1127&255;
     $1129 = ((($4)) + 8|0);
     $1130 = HEAP32[$1129>>2]|0;
     $1131 = HEAP32[$561>>2]|0;
     $1132 = (($1131) + 1)|0;
     HEAP32[$561>>2] = $1132;
     $1133 = (($1130) + ($1131)|0);
     HEAP8[$1133>>0] = $1128;
     $1134 = $1126&255;
     $1135 = HEAP32[$1129>>2]|0;
     $1136 = HEAP32[$561>>2]|0;
     $1137 = (($1136) + 1)|0;
     HEAP32[$561>>2] = $1137;
     $1138 = (($1135) + ($1136)|0);
     HEAP8[$1138>>0] = $1134;
     $1139 = HEAP32[$1070>>2]|0;
     $1140 = $1139 >>> 8;
     $1141 = $1140&255;
     $1142 = HEAP32[$1129>>2]|0;
     $1143 = HEAP32[$561>>2]|0;
     $1144 = (($1143) + 1)|0;
     HEAP32[$561>>2] = $1144;
     $1145 = (($1142) + ($1143)|0);
     HEAP8[$1145>>0] = $1141;
     $1146 = HEAP32[$1129>>2]|0;
     $1147 = HEAP32[$561>>2]|0;
     $1148 = (($1147) + 1)|0;
     HEAP32[$561>>2] = $1148;
     $1149 = (($1146) + ($1147)|0);
     $$sink407$in = $1139;$$sink408 = $1149;
    }
    $$sink407 = $$sink407$in&255;
    HEAP8[$$sink408>>0] = $$sink407;
    $1150 = HEAP32[$3>>2]|0;
    __tr_flush_bits($1150);
    $1151 = ((($1150)) + 20|0);
    $1152 = HEAP32[$1151>>2]|0;
    $1153 = HEAP32[$22>>2]|0;
    $1154 = ($1152>>>0)>($1153>>>0);
    $$$i = $1154 ? $1153 : $1152;
    $1155 = ($$$i|0)==(0);
    if (!($1155)) {
     $1156 = HEAP32[$8>>2]|0;
     $1157 = ((($1150)) + 16|0);
     $1158 = HEAP32[$1157>>2]|0;
     _memcpy(($1156|0),($1158|0),($$$i|0))|0;
     $1159 = HEAP32[$8>>2]|0;
     $1160 = (($1159) + ($$$i)|0);
     HEAP32[$8>>2] = $1160;
     $1161 = HEAP32[$1157>>2]|0;
     $1162 = (($1161) + ($$$i)|0);
     HEAP32[$1157>>2] = $1162;
     $1163 = ((($0)) + 20|0);
     $1164 = HEAP32[$1163>>2]|0;
     $1165 = (($1164) + ($$$i))|0;
     HEAP32[$1163>>2] = $1165;
     $1166 = HEAP32[$22>>2]|0;
     $1167 = (($1166) - ($$$i))|0;
     HEAP32[$22>>2] = $1167;
     $1168 = HEAP32[$1151>>2]|0;
     $1169 = (($1168) - ($$$i))|0;
     HEAP32[$1151>>2] = $1169;
     $1170 = ($1169|0)==(0);
     if ($1170) {
      $1171 = ((($1150)) + 8|0);
      $1172 = HEAP32[$1171>>2]|0;
      HEAP32[$1157>>2] = $1172;
     }
    }
    $1173 = HEAP32[$1066>>2]|0;
    $1174 = ($1173|0)>(0);
    if ($1174) {
     $1175 = (0 - ($1173))|0;
     HEAP32[$1066>>2] = $1175;
    }
    $1176 = HEAP32[$561>>2]|0;
    $not$ = ($1176|0)==(0);
    $1177 = $not$&1;
    $$1 = $1177;
    return ($$1|0);
   }
  }
 } while(0);
 $20 = HEAP32[(9364)>>2]|0;
 $21 = ((($0)) + 24|0);
 HEAP32[$21>>2] = $20;
 $$1 = -2;
 return ($$1|0);
}
function _inflateReset2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$027 = 0, $$028 = 0, $$pre = 0, $$pre30 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = -2;
  return ($$0|0);
 }
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = -2;
  return ($$0|0);
 }
 $6 = ($1|0)<(0);
 if ($6) {
  $7 = (0 - ($1))|0;
  $$027 = 0;$$028 = $7;
 } else {
  $8 = $1 >>> 4;
  $9 = (($8) + 1)|0;
  $10 = ($1|0)<(48);
  $11 = $1 & 15;
  $$ = $10 ? $11 : $1;
  $$027 = $9;$$028 = $$;
 }
 $12 = ($$028|0)==(0);
 $13 = $$028 & -8;
 $14 = ($13|0)==(8);
 $or$cond = $12 | $14;
 if (!($or$cond)) {
  $$0 = -2;
  return ($$0|0);
 }
 $15 = ((($4)) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 $$pre30 = ((($4)) + 36|0);
 if ($17) {
  label = 9;
 } else {
  $18 = HEAP32[$$pre30>>2]|0;
  $19 = ($18|0)==($$028|0);
  if ($19) {
   label = 9;
  } else {
   $21 = ((($0)) + 36|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($0)) + 40|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_vii[$22 & 127]($24,$16);
   HEAP32[$15>>2] = 0;
   $$pre = HEAP32[$3>>2]|0;
   $25 = ((($4)) + 8|0);
   HEAP32[$25>>2] = $$027;
   HEAP32[$$pre30>>2] = $$028;
   $26 = ($$pre|0)==(0|0);
   if ($26) {
    $$0 = -2;
    return ($$0|0);
   } else {
    $28 = $$pre;
   }
  }
 }
 if ((label|0) == 9) {
  $20 = ((($4)) + 8|0);
  HEAP32[$20>>2] = $$027;
  HEAP32[$$pre30>>2] = $$028;
  $28 = $4;
 }
 $27 = ((($28)) + 40|0);
 HEAP32[$27>>2] = 0;
 $29 = ((($28)) + 44|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($28)) + 48|0);
 HEAP32[$30>>2] = 0;
 $31 = ((($28)) + 28|0);
 HEAP32[$31>>2] = 0;
 $32 = ((($0)) + 20|0);
 HEAP32[$32>>2] = 0;
 $33 = ((($0)) + 8|0);
 HEAP32[$33>>2] = 0;
 $34 = ((($0)) + 24|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($28)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0);
 if (!($37)) {
  $38 = ((($0)) + 48|0);
  $39 = $36 & 1;
  HEAP32[$38>>2] = $39;
 }
 HEAP32[$28>>2] = 0;
 $40 = ((($28)) + 4|0);
 HEAP32[$40>>2] = 0;
 $41 = ((($28)) + 12|0);
 HEAP32[$41>>2] = 0;
 $42 = ((($28)) + 20|0);
 HEAP32[$42>>2] = 32768;
 $43 = ((($28)) + 32|0);
 HEAP32[$43>>2] = 0;
 $44 = ((($28)) + 56|0);
 HEAP32[$44>>2] = 0;
 $45 = ((($28)) + 60|0);
 HEAP32[$45>>2] = 0;
 $46 = ((($28)) + 1328|0);
 $47 = ((($28)) + 108|0);
 HEAP32[$47>>2] = $46;
 $48 = ((($28)) + 80|0);
 HEAP32[$48>>2] = $46;
 $49 = ((($28)) + 76|0);
 HEAP32[$49>>2] = $46;
 $50 = ((($28)) + 7104|0);
 HEAP32[$50>>2] = 1;
 $51 = ((($28)) + 7108|0);
 HEAP32[$51>>2] = -1;
 $$0 = 0;
 return ($$0|0);
}
function _inflateInit2_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($2|0)==(0|0);
 if ($4) {
  $$0 = -6;
  return ($$0|0);
 }
 $5 = HEAP8[$2>>0]|0;
 $6 = ($5<<24>>24)!=(49);
 $7 = ($3|0)!=(56);
 $or$cond = $7 | $6;
 if ($or$cond) {
  $$0 = -6;
  return ($$0|0);
 }
 $8 = ($0|0)==(0|0);
 if ($8) {
  $$0 = -2;
  return ($$0|0);
 }
 $9 = ((($0)) + 24|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  HEAP32[$10>>2] = 54;
  $13 = ((($0)) + 40|0);
  HEAP32[$13>>2] = 0;
  $19 = 54;
 } else {
  $19 = $11;
 }
 $14 = ((($0)) + 36|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  HEAP32[$14>>2] = 55;
 }
 $17 = ((($0)) + 40|0);
 $18 = HEAP32[$17>>2]|0;
 $20 = (FUNCTION_TABLE_iiii[$19 & 63]($18,1,7116)|0);
 $21 = ($20|0)==(0|0);
 if ($21) {
  $$0 = -4;
  return ($$0|0);
 }
 $22 = ((($0)) + 28|0);
 HEAP32[$22>>2] = $20;
 $23 = ((($20)) + 52|0);
 HEAP32[$23>>2] = 0;
 $24 = (_inflateReset2($0,$1)|0);
 $25 = ($24|0)==(0);
 if ($25) {
  $$0 = 0;
  return ($$0|0);
 }
 $26 = HEAP32[$14>>2]|0;
 $27 = HEAP32[$17>>2]|0;
 FUNCTION_TABLE_vii[$26 & 127]($27,$20);
 HEAP32[$22>>2] = 0;
 $$0 = $24;
 return ($$0|0);
}
function _inflate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$48985 = 0, $$$7918 = 0, $$$8 = 0, $$0 = 0, $$0$be = 0, $$01048$be = 0, $$01050 = 0, $$01050$be = 0, $$01109 = 0, $$0907 = 0, $$0908 = 0, $$0921 = 0, $$0921$be = 0, $$0926 = 0, $$0926$be = 0, $$0937 = 0, $$0937$be = 0, $$0992 = 0, $$0992$$8919 = 0, $$0992$be = 0;
 var $$0993 = 0, $$0993$be = 0, $$1$ph = 0, $$10 = 0, $$101003 = 0, $$101060 = 0, $$10936 = 0, $$10947 = 0, $$11 = 0, $$11049 = 0, $$11051$lcssa = 0, $$110511875 = 0, $$111004 = 0, $$111061 = 0, $$11948 = 0, $$12$lcssa = 0, $$121005 = 0, $$121062 = 0, $$121868 = 0, $$12949$lcssa = 0;
 var $$129491867 = 0, $$13 = 0, $$131006 = 0, $$131063 = 0, $$13950 = 0, $$141007 = 0, $$141064 = 0, $$141812 = 0, $$14951$lcssa = 0, $$149511811 = 0, $$15 = 0, $$151008 = 0, $$151065 = 0, $$15952 = 0, $$16 = 0, $$161009$lcssa = 0, $$1610091866 = 0, $$161066$lcssa = 0, $$1610661865 = 0, $$16953 = 0;
 var $$17 = 0, $$171010 = 0, $$171067 = 0, $$17954 = 0, $$18$lcssa = 0, $$181011$lcssa = 0, $$1810111810 = 0, $$181068$lcssa = 0, $$1810681809 = 0, $$18955$lcssa = 0, $$19$lcssa = 0, $$1909 = 0, $$191012 = 0, $$191069 = 0, $$1912 = 0, $$191801 = 0, $$1922 = 0, $$1927$lcssa = 0, $$19271878 = 0, $$1938$lcssa = 0;
 var $$19381877 = 0, $$1994$lcssa = 0, $$19941876 = 0, $$19956$lcssa = 0, $$199561800 = 0, $$2 = 0, $$20 = 0, $$201013 = 0, $$201070 = 0, $$20957 = 0, $$21 = 0, $$21052$lcssa = 0, $$210521828 = 0, $$211014 = 0, $$211071 = 0, $$21958 = 0, $$22$lcssa = 0, $$221015$lcssa = 0, $$221072$lcssa = 0, $$221604 = 0;
 var $$22959$lcssa = 0, $$229591603 = 0, $$23$lcssa = 0, $$23$ph2381 = 0, $$231016$lcssa = 0, $$2310161799 = 0, $$231073$lcssa = 0, $$2310731798 = 0, $$231624 = 0, $$23960$lcssa = 0, $$23960$ph2380 = 0, $$239601623 = 0, $$24$lcssa = 0, $$241017 = 0, $$241074 = 0, $$24961$lcssa = 0, $$25$be = 0, $$25$lcssa2385 = 0, $$25$ph = 0, $$251018 = 0;
 var $$251018$ = 0, $$251075 = 0, $$251689 = 0, $$25962$be = 0, $$25962$lcssa2384 = 0, $$25962$ph = 0, $$259621688 = 0, $$26$lcssa = 0, $$261019$lcssa = 0, $$2610191602 = 0, $$261076$lcssa = 0, $$2610761601 = 0, $$261642 = 0, $$26963$lcssa = 0, $$269631641 = 0, $$27$lcssa = 0, $$271020$lcssa = 0, $$271020$ph2379 = 0, $$2710201622 = 0, $$271077$lcssa = 0;
 var $$271077$ph2378 = 0, $$2710771621 = 0, $$271668 = 0, $$27964$lcssa = 0, $$279641667 = 0, $$28$lcssa = 0, $$281021$lcssa = 0, $$281078$lcssa = 0, $$281658 = 0, $$28965$lcssa = 0, $$289651657 = 0, $$29$lcssa = 0, $$2910 = 0, $$291022$be = 0, $$291022$lcssa2383 = 0, $$291022$ph = 0, $$2910221687 = 0, $$291079$be = 0, $$291079$lcssa2382 = 0, $$291079$ph = 0;
 var $$2910791686 = 0, $$2913 = 0, $$291678 = 0, $$2923 = 0, $$2928$lcssa = 0, $$29281831 = 0, $$29391830 = 0, $$2995$lcssa = 0, $$29951829 = 0, $$29966$lcssa = 0, $$299661677 = 0, $$3 = 0, $$30 = 0, $$301023$lcssa = 0, $$3010231640 = 0, $$301080$lcssa = 0, $$3010801639 = 0, $$30967 = 0, $$31 = 0, $$31053$lcssa = 0;
 var $$310531838 = 0, $$311024$lcssa = 0, $$3110241666 = 0, $$311081$lcssa = 0, $$3110811665 = 0, $$31968 = 0, $$321025$lcssa = 0, $$3210251656 = 0, $$321082$lcssa = 0, $$3210821655 = 0, $$33 = 0, $$331026$lcssa = 0, $$3310261676 = 0, $$331083$lcssa = 0, $$3310831675 = 0, $$33970 = 0, $$34 = 0, $$341027 = 0, $$341084 = 0, $$34971 = 0;
 var $$35$lcssa = 0, $$351028 = 0, $$351085 = 0, $$351706 = 0, $$35972$lcssa = 0, $$359721705 = 0, $$36$lcssa = 0, $$361728 = 0, $$36973$lcssa = 0, $$369731727 = 0, $$37 = 0, $$371030 = 0, $$371087 = 0, $$37974 = 0, $$38 = 0, $$381031 = 0, $$381088 = 0, $$38975 = 0, $$39$lcssa = 0, $$391032$lcssa = 0;
 var $$3910321704 = 0, $$391089$lcssa = 0, $$3910891703 = 0, $$391741 = 0, $$39291841 = 0, $$3940$lcssa = 0, $$39401840 = 0, $$3996$lcssa = 0, $$39961839 = 0, $$39976$lcssa = 0, $$399761740 = 0, $$4 = 0, $$40 = 0, $$401033$lcssa = 0, $$4010331726 = 0, $$401090$lcssa = 0, $$4010901725 = 0, $$40977 = 0, $$41$lcssa = 0, $$41$ph = 0;
 var $$41054$lcssa = 0, $$410541847 = 0, $$411034 = 0, $$411091 = 0, $$411757 = 0, $$41978$lcssa = 0, $$41978$ph = 0, $$419781756 = 0, $$42$lcssa = 0, $$421035 = 0, $$421092 = 0, $$421778 = 0, $$42979$lcssa = 0, $$429791777 = 0, $$43 = 0, $$431036$lcssa = 0, $$4310361739 = 0, $$431093$lcssa = 0, $$4310931738 = 0, $$43980 = 0;
 var $$44 = 0, $$441037 = 0, $$441094 = 0, $$44981 = 0, $$45$lcssa = 0, $$451038$lcssa = 0, $$451038$ph = 0, $$4510381755 = 0, $$451095$lcssa = 0, $$451095$ph = 0, $$4510951754 = 0, $$451791 = 0, $$45982$lcssa = 0, $$459821790 = 0, $$46 = 0, $$461039$lcssa = 0, $$4610391776 = 0, $$461096$lcssa = 0, $$4610961775 = 0, $$46983 = 0;
 var $$47 = 0, $$471040 = 0, $$471097 = 0, $$47984 = 0, $$48$lcssa = 0, $$481041 = 0, $$481098 = 0, $$481587 = 0, $$48985$lcssa = 0, $$489851586 = 0, $$49 = 0, $$491042$lcssa = 0, $$4910421789 = 0, $$491099$lcssa = 0, $$4910991788 = 0, $$4915 = 0, $$4925 = 0, $$49301850 = 0, $$4941$lcssa = 0, $$49411849 = 0;
 var $$4997$lcssa = 0, $$49971848 = 0, $$49986 = 0, $$5$ph = 0, $$50 = 0, $$501043 = 0, $$501100 = 0, $$50987 = 0, $$51$lcssa = 0, $$51055 = 0, $$511044 = 0, $$511101 = 0, $$511594 = 0, $$51988$lcssa = 0, $$519881593 = 0, $$52 = 0, $$521045$lcssa = 0, $$5210451585 = 0, $$521102$lcssa = 0, $$5211021584 = 0;
 var $$52989 = 0, $$531046 = 0, $$531103 = 0, $$54 = 0, $$54$ph = 0, $$541047 = 0, $$541104 = 0, $$54991 = 0, $$54991$ph = 0, $$55$lcssa = 0, $$551105$lcssa = 0, $$5511051591 = 0, $$551592 = 0, $$56 = 0, $$561106 = 0, $$58 = 0, $$58$ph = 0, $$581108 = 0, $$581108$ph = 0, $$5916 = 0;
 var $$5931 = 0, $$5942 = 0, $$5998 = 0, $$6 = 0, $$61056$lcssa = 0, $$610561856 = 0, $$69321859 = 0, $$6943$lcssa = 0, $$69431858 = 0, $$6999$lcssa = 0, $$69991857 = 0, $$7 = 0, $$71000 = 0, $$71057 = 0, $$7918 = 0, $$7933 = 0, $$7944 = 0, $$8 = 0, $$8$ph = 0, $$81001 = 0;
 var $$81001$ = 0, $$81058 = 0, $$8919 = 0, $$8934 = 0, $$8945 = 0, $$91002 = 0, $$91059 = 0, $$9935 = 0, $$9946 = 0, $$lcssa = 0, $$lcssa1192 = 0, $$lcssa1243 = 0, $$lcssa1255 = 0, $$lcssa1267 = 0, $$lcssa1279 = 0, $$off = 0, $$ph = 0, $$pn = 0, $$pn2365 = 0, $$pn2367 = 0;
 var $$pn2369 = 0, $$pr1115$pre = 0, $$pre = 0, $$pre2346 = 0, $$pre2347 = 0, $$pre2348 = 0, $$pre2349 = 0, $$pre2351 = 0, $$pre2354 = 0, $$pre2356 = 0, $$pre2358 = 0, $$pre2360 = 0, $$pre2361 = 0, $$pre2363 = 0, $$pre2364 = 0, $$sink = 0, $$sroa$061$0 = 0, $$sroa$061$0$$sroa_idx = 0, $$sroa$061$0$$sroa_idx74 = 0, $$sroa$061$0$copyload = 0;
 var $$sroa$061$0$copyload71$lcssa = 0, $$sroa$061$0$copyload71$lcssa$in = 0, $$sroa$061$0$copyload73$lcssa = 0, $$sroa$061$0$copyload73$lcssa$in = 0, $$sroa$061$0$copyload75 = 0, $$sroa$061$1 = 0, $$sroa$1878$0 = 0, $$sroa$1878$0$$sroa_idx = 0, $$sroa$1878$0$$sroa_idx1773 = 0, $$sroa$1878$0$$sroa_idx79 = 0, $$sroa$1878$0$$sroa_idx791750 = 0, $$sroa$1878$0$$sroa_idx81 = 0, $$sroa$1878$0$$sroa_idx811699 = 0, $$sroa$1878$0$$sroa_idx83 = 0, $$sroa$1878$0$$sroa_idx831723 = 0, $$sroa$1878$0$$sroa_idx85 = 0, $$sroa$1878$0$$sroa_idx851634 = 0, $$sroa$1878$0$copyload = 0, $$sroa$1878$0$copyload$lcssa = 0, $$sroa$1878$0$copyload1774 = 0;
 var $$sroa$1878$0$copyload80 = 0, $$sroa$1878$0$copyload80$lcssa = 0, $$sroa$1878$0$copyload801751 = 0, $$sroa$1878$0$copyload82 = 0, $$sroa$1878$0$copyload82$lcssa = 0, $$sroa$1878$0$copyload821700 = 0, $$sroa$1878$0$copyload84 = 0, $$sroa$1878$0$copyload84$lcssa = 0, $$sroa$1878$0$copyload841724 = 0, $$sroa$1878$0$copyload86 = 0, $$sroa$1878$0$copyload861635 = 0, $$sroa$1878$1 = 0, $$sroa$42$0 = 0, $$sroa$42$0$$sroa_idx108 = 0, $$sroa$42$0$$sroa_idx114 = 0, $$sroa$42$0$copyload = 0, $$sroa$42$0$copyload111$lcssa = 0, $$sroa$42$0$copyload111$lcssa$in = 0, $$sroa$42$0$copyload113$lcssa = 0, $$sroa$42$0$copyload113$lcssa$in = 0;
 var $$sroa$42$0$copyload115 = 0, $$sroa$42$0$copyload117$lcssa = 0, $$sroa$42$0$copyload117$lcssa$in = 0, $$sroa$42$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $or$cond = 0, $or$cond11 = 0, $or$cond1110 = 0, $or$cond1111 = 0, $or$cond1114 = 0, $or$cond15 = 0, $or$cond17 = 0;
 var $or$cond2817 = 0, $or$cond7 = 0, $or$cond9 = 0, $scevgep = 0, $scevgep2344 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $$01109 = -2;
  STACKTOP = sp;return ($$01109|0);
 }
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$01109 = -2;
  STACKTOP = sp;return ($$01109|0);
 }
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$01109 = -2;
  STACKTOP = sp;return ($$01109|0);
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if (!($14)) {
   $$01109 = -2;
   STACKTOP = sp;return ($$01109|0);
  }
 }
 $15 = HEAP32[$5>>2]|0;
 $16 = ($15|0)==(11);
 if ($16) {
  HEAP32[$5>>2] = 12;
  $868 = 12;
 } else {
  $868 = $15;
 }
 $17 = ((($0)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($0)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($5)) + 56|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($5)) + 60|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($5)) + 8|0);
 $26 = ((($5)) + 24|0);
 $27 = ((($2)) + 1|0);
 $28 = ((($5)) + 16|0);
 $29 = ((($5)) + 32|0);
 $30 = ((($0)) + 24|0);
 $31 = ((($5)) + 36|0);
 $32 = ((($5)) + 20|0);
 $33 = ((($0)) + 48|0);
 $34 = ((($5)) + 64|0);
 $35 = ((($5)) + 12|0);
 $$off = (($1) + -5)|0;
 $36 = ($$off>>>0)<(2);
 $37 = ((($5)) + 4|0);
 $38 = ((($5)) + 76|0);
 $39 = ((($5)) + 84|0);
 $40 = ((($5)) + 80|0);
 $41 = ((($5)) + 88|0);
 $42 = ($1|0)==(6);
 $43 = ((($5)) + 7108|0);
 $44 = ((($5)) + 72|0);
 $45 = ((($5)) + 7112|0);
 $46 = ((($5)) + 68|0);
 $47 = ((($5)) + 44|0);
 $48 = ((($5)) + 7104|0);
 $49 = ((($5)) + 48|0);
 $50 = ((($5)) + 52|0);
 $51 = ((($5)) + 40|0);
 $52 = ((($0)) + 20|0);
 $53 = ((($5)) + 28|0);
 $54 = ((($2)) + 2|0);
 $55 = ((($2)) + 3|0);
 $56 = ((($5)) + 104|0);
 $57 = ((($5)) + 96|0);
 $58 = ((($5)) + 100|0);
 $59 = ((($5)) + 624|0);
 $60 = ((($5)) + 1328|0);
 $61 = ((($5)) + 108|0);
 $62 = ((($5)) + 112|0);
 $63 = ((($5)) + 752|0);
 $64 = ((($5)) + 92|0);
 $$0 = 0;$$01050 = $10;$$0921 = $18;$$0926 = $24;$$0937 = $22;$$0992 = $18;$$0993 = $20;$338 = $8;$65 = $868;
 L17: while(1) {
  L19: do {
   switch ($65|0) {
   case 28:  {
    $$54$ph = $$0926;$$54991$ph = $$0937;$$58$ph = $$0993;$$581108$ph = $$01050;$$8$ph = 1;$$ph = $$0992;
    label = 281;
    break L17;
    break;
   }
   case 29:  {
    $$4925 = $$0921;$$54 = $$0926;$$54991 = $$0937;$$58 = $$0993;$$581108 = $$01050;$$8 = -3;$815 = $$0992;
    break L17;
    break;
   }
   case 30:  {
    label = 295;
    break L17;
    break;
   }
   case 0:  {
    $69 = HEAP32[$25>>2]|0;
    $70 = ($69|0)==(0);
    if ($70) {
     HEAP32[$5>>2] = 12;
     $$0$be = $$0;$$01048$be = $338;$$01050$be = $$01050;$$0921$be = $$0921;$$0926$be = $$0926;$$0937$be = $$0937;$$0992$be = $$0992;$$0993$be = $$0993;
     break L19;
    }
    $71 = ($$0926>>>0)<(16);
    if ($71) {
     $$110511875 = $$01050;$$19271878 = $$0926;$$19381877 = $$0937;$$19941876 = $$0993;
     while(1) {
      $72 = ($$19941876|0)==(0);
      if ($72) {
       $$4925 = $$0921;$$54 = $$19271878;$$54991 = $$19381877;$$58 = 0;$$581108 = $$110511875;$$8 = $$0;$815 = $$0992;
       break L17;
      }
      $73 = (($$19941876) + -1)|0;
      $74 = ((($$110511875)) + 1|0);
      $75 = HEAP8[$$110511875>>0]|0;
      $76 = $75&255;
      $77 = $76 << $$19271878;
      $78 = (($77) + ($$19381877))|0;
      $79 = (($$19271878) + 8)|0;
      $80 = ($79>>>0)<(16);
      if ($80) {
       $$110511875 = $74;$$19271878 = $79;$$19381877 = $78;$$19941876 = $73;
      } else {
       $$11051$lcssa = $74;$$1927$lcssa = $79;$$1938$lcssa = $78;$$1994$lcssa = $73;
       break;
      }
     }
    } else {
     $$11051$lcssa = $$01050;$$1927$lcssa = $$0926;$$1938$lcssa = $$0937;$$1994$lcssa = $$0993;
    }
    $81 = $69 & 2;
    $82 = ($81|0)!=(0);
    $83 = ($$1938$lcssa|0)==(35615);
    $or$cond = $83 & $82;
    if ($or$cond) {
     $84 = (_crc32(0,0,0)|0);
     HEAP32[$26>>2] = $84;
     HEAP8[$2>>0] = 31;
     HEAP8[$27>>0] = -117;
     $85 = (_crc32($84,$2,2)|0);
     HEAP32[$26>>2] = $85;
     HEAP32[$5>>2] = 1;
     $$0$be = $$0;$$01048$be = $338;$$01050$be = $$11051$lcssa;$$0921$be = $$0921;$$0926$be = 0;$$0937$be = 0;$$0992$be = $$0992;$$0993$be = $$1994$lcssa;
     break L19;
    }
    HEAP32[$28>>2] = 0;
    $86 = HEAP32[$29>>2]|0;
    $87 = ($86|0)==(0|0);
    if (!($87)) {
     $88 = ((($86)) + 48|0);
     HEAP32[$88>>2] = -1;
    }
    $89 = $69 & 1;
    $90 = ($89|0)==(0);
    if (!($90)) {
     $91 = $$1938$lcssa << 8;
     $92 = $91 & 65280;
     $93 = $$1938$lcssa >>> 8;
     $94 = (($92) + ($93))|0;
     $95 = (($94>>>0) % 31)&-1;
     $96 = ($95|0)==(0);
     if ($96) {
      $97 = $$1938$lcssa & 15;
      $98 = ($97|0)==(8);
      if (!($98)) {
       HEAP32[$30>>2] = 18466;
       HEAP32[$5>>2] = 29;
       $$0$be = $$0;$$01048$be = $338;$$01050$be = $$11051$lcssa;$$0921$be = $$0921;$$0926$be = $$1927$lcssa;$$0937$be = $$1938$lcssa;$$0992$be = $$0992;$$0993$be = $$1994$lcssa;
       break L19;
      }
      $99 = $$1938$lcssa >>> 4;
      $100 = (($$1927$lcssa) + -4)|0;
      $101 = $99 & 15;
      $102 = (($101) + 8)|0;
      $103 = HEAP32[$31>>2]|0;
      $104 = ($103|0)==(0);
      if ($104) {
       HEAP32[$31>>2] = $102;
      } else {
       $105 = ($102>>>0)>($103>>>0);
       if ($105) {
        HEAP32[$30>>2] = 18493;
        HEAP32[$5>>2] = 29;
        $$0$be = $$0;$$01048$be = $338;$$01050$be = $$11051$lcssa;$$0921$be = $$0921;$$0926$be = $100;$$0937$be = $99;$$0992$be = $$0992;$$0993$be = $$1994$lcssa;
        break L19;
       }
      }
      $106 = 256 << $101;
      HEAP32[$32>>2] = $106;
      $107 = (_adler32(0,0,0)|0);
      HEAP32[$26>>2] = $107;
      HEAP32[$33>>2] = $107;
      $108 = $$1938$lcssa >>> 12;
      $109 = $108 & 2;
      $110 = $109 ^ 11;
      HEAP32[$5>>2] = $110;
      $$0$be = $$0;$$01048$be = $338;$$01050$be = $$11051$lcssa;$$0921$be = $$0921;$$0926$be = 0;$$0937$be = 0;$$0992$be = $$0992;$$0993$be = $$1994$lcssa;
      break L19;
     }
    }
    HEAP32[$30>>2] = 18443;
    HEAP32[$5>>2] = 29;
    $$0$be = $$0;$$01048$be = $338;$$01050$be = $$11051$lcssa;$$0921$be = $$0921;$$0926$be = $$1927$lcssa;$$0937$be = $$1938$lcssa;$$0992$be = $$0992;$$0993$be = $$1994$lcssa;
    break;
   }
   case 1:  {
    $68 = ($$0926>>>0)<(16);
    if ($68) {
     $$210521828 = $$01050;$$29281831 = $$0926;$$29391830 = $$0937;$$29951829 = $$0993;
     while(1) {
      $111 = ($$29951829|0)==(0);
      if ($111) {
       $$4925 = $$0921;$$54 = $$29281831;$$54991 = $$29391830;$$58 = 0;$$581108 = $$210521828;$$8 = $$0;$815 = $$0992;
       break L17;
      }
      $112 = (($$29951829) + -1)|0;
      $113 = ((($$210521828)) + 1|0);
      $114 = HEAP8[$$210521828>>0]|0;
      $115 = $114&255;
      $116 = $115 << $$29281831;
      $117 = (($116) + ($$29391830))|0;
      $118 = (($$29281831) + 8)|0;
      $119 = ($118>>>0)<(16);
      if ($119) {
       $$210521828 = $113;$$29281831 = $118;$$29391830 = $117;$$29951829 = $112;
      } else {
       $$21052$lcssa = $113;$$2928$lcssa = $118;$$2995$lcssa = $112;$120 = $117;
       break;
      }
     }
    } else {
     $$21052$lcssa = $$01050;$$2928$lcssa = $$0926;$$2995$lcssa = $$0993;$120 = $$0937;
    }
    HEAP32[$28>>2] = $120;
    $121 = $120 & 255;
    $122 = ($121|0)==(8);
    if (!($122)) {
     HEAP32[$30>>2] = 18466;
     HEAP32[$5>>2] = 29;
     $$0$be = $$0;$$01048$be = $338;$$01050$be = $$21052$lcssa;$$0921$be = $$0921;$$0926$be = $$2928$lcssa;$$0937$be = $120;$$0992$be = $$0992;$$0993$be = $$2995$lcssa;
     break L19;
    }
    $123 = $120 & 57344;
    $124 = ($123|0)==(0);
    if (!($124)) {
     HEAP32[$30>>2] = 18513;
     HEAP32[$5>>2] = 29;
     $$0$be = $$0;$$01048$be = $338;$$01050$be = $$21052$lcssa;$$0921$be = $$0921;$$0926$be = $$2928$lcssa;$$0937$be = $120;$$0992$be = $$0992;$$0993$be = $$2995$lcssa;
     break L19;
    }
    $125 = HEAP32[$29>>2]|0;
    $126 = ($125|0)==(0|0);
    if (!($126)) {
     $127 = $120 >>> 8;
     $128 = $127 & 1;
     HEAP32[$125>>2] = $128;
    }
    $129 = $120 & 512;
    $130 = ($129|0)==(0);
    if (!($130)) {
     $131 = $120&255;
     HEAP8[$2>>0] = $131;
     $132 = $120 >>> 8;
     $133 = $132&255;
     HEAP8[$27>>0] = $133;
     $134 = HEAP32[$26>>2]|0;
     $135 = (_crc32($134,$2,2)|0);
     HEAP32[$26>>2] = $135;
    }
    HEAP32[$5>>2] = 2;
    $$310531838 = $$21052$lcssa;$$39291841 = 0;$$39401840 = 0;$$39961839 = $$2995$lcssa;
    label = 47;
    break;
   }
   case 2:  {
    $136 = ($$0926>>>0)<(32);
    if ($136) {
     $$310531838 = $$01050;$$39291841 = $$0926;$$39401840 = $$0937;$$39961839 = $$0993;
     label = 47;
    } else {
     $$31053$lcssa = $$01050;$$3940$lcssa = $$0937;$$3996$lcssa = $$0993;
     label = 49;
    }
    break;
   }
   case 3:  {
    $161 = ($$0926>>>0)<(16);
    if ($161) {
     $$410541847 = $$01050;$$49301850 = $$0926;$$49411849 = $$0937;$$49971848 = $$0993;
     label = 55;
    } else {
     $$41054$lcssa = $$01050;$$4941$lcssa = $$0937;$$4997$lcssa = $$0993;
     label = 57;
    }
    break;
   }
   case 4:  {
    $$51055 = $$01050;$$5931 = $$0926;$$5942 = $$0937;$$5998 = $$0993;
    label = 62;
    break;
   }
   case 5:  {
    $$81001 = $$0993;$$81058 = $$01050;$$8934 = $$0926;$$8945 = $$0937;
    label = 73;
    break;
   }
   case 6:  {
    $$111004 = $$0993;$$111061 = $$01050;$$9935 = $$0926;$$9946 = $$0937;
    label = 83;
    break;
   }
   case 7:  {
    $$10936 = $$0926;$$10947 = $$0937;$$131006 = $$0993;$$131063 = $$01050;
    label = 96;
    break;
   }
   case 8:  {
    $$11 = $$0926;$$11948 = $$0937;$$151008 = $$0993;$$151065 = $$01050;
    label = 109;
    break;
   }
   case 9:  {
    $67 = ($$0926>>>0)<(32);
    if ($67) {
     $$141812 = $$0926;$$149511811 = $$0937;$$1810111810 = $$0993;$$1810681809 = $$01050;
     while(1) {
      $326 = ($$1810111810|0)==(0);
      if ($326) {
       $$4925 = $$0921;$$54 = $$141812;$$54991 = $$149511811;$$58 = 0;$$581108 = $$1810681809;$$8 = $$0;$815 = $$0992;
       break L17;
      }
      $327 = (($$1810111810) + -1)|0;
      $328 = ((($$1810681809)) + 1|0);
      $329 = HEAP8[$$1810681809>>0]|0;
      $330 = $329&255;
      $331 = $330 << $$141812;
      $332 = (($331) + ($$149511811))|0;
      $333 = (($$141812) + 8)|0;
      $334 = ($333>>>0)<(32);
      if ($334) {
       $$141812 = $333;$$149511811 = $332;$$1810111810 = $327;$$1810681809 = $328;
      } else {
       $$14951$lcssa = $332;$$181011$lcssa = $327;$$181068$lcssa = $328;
       break;
      }
     }
    } else {
     $$14951$lcssa = $$0937;$$181011$lcssa = $$0993;$$181068$lcssa = $$01050;
    }
    $335 = (_llvm_bswap_i32(($$14951$lcssa|0))|0);
    HEAP32[$26>>2] = $335;
    HEAP32[$33>>2] = $335;
    HEAP32[$5>>2] = 10;
    $$15 = 0;$$15952 = 0;$$191012 = $$181011$lcssa;$$191069 = $$181068$lcssa;
    label = 121;
    break;
   }
   case 10:  {
    $$15 = $$0926;$$15952 = $$0937;$$191012 = $$0993;$$191069 = $$01050;
    label = 121;
    break;
   }
   case 11:  {
    $$16 = $$0926;$$16953 = $$0937;$$201013 = $$0993;$$201070 = $$01050;
    label = 124;
    break;
   }
   case 12:  {
    $$17 = $$0926;$$17954 = $$0937;$$211014 = $$0993;$$211071 = $$01050;
    label = 125;
    break;
   }
   case 13:  {
    $360 = $$0926 & 7;
    $361 = $$0937 >>> $360;
    $362 = (($$0926) - ($360))|0;
    $363 = ($362>>>0)<(32);
    if ($363) {
     $$191801 = $362;$$199561800 = $361;$$2310161799 = $$0993;$$2310731798 = $$01050;
     while(1) {
      $364 = ($$2310161799|0)==(0);
      if ($364) {
       $$4925 = $$0921;$$54 = $$191801;$$54991 = $$199561800;$$58 = 0;$$581108 = $$2310731798;$$8 = $$0;$815 = $$0992;
       break L17;
      }
      $365 = (($$2310161799) + -1)|0;
      $366 = ((($$2310731798)) + 1|0);
      $367 = HEAP8[$$2310731798>>0]|0;
      $368 = $367&255;
      $369 = $368 << $$191801;
      $370 = (($369) + ($$199561800))|0;
      $371 = (($$191801) + 8)|0;
      $372 = ($371>>>0)<(32);
      if ($372) {
       $$191801 = $371;$$199561800 = $370;$$2310161799 = $365;$$2310731798 = $366;
      } else {
       $$19$lcssa = $371;$$19956$lcssa = $370;$$231016$lcssa = $365;$$231073$lcssa = $366;
       break;
      }
     }
    } else {
     $$19$lcssa = $362;$$19956$lcssa = $361;$$231016$lcssa = $$0993;$$231073$lcssa = $$01050;
    }
    $373 = $$19956$lcssa & 65535;
    $374 = $$19956$lcssa >>> 16;
    $375 = $374 ^ 65535;
    $376 = ($373|0)==($375|0);
    if ($376) {
     HEAP32[$34>>2] = $373;
     HEAP32[$5>>2] = 14;
     if ($42) {
      $$54$ph = 0;$$54991$ph = 0;$$58$ph = $$231016$lcssa;$$581108$ph = $$231073$lcssa;$$8$ph = $$0;$$ph = $$0992;
      label = 281;
      break L17;
     } else {
      $$20 = 0;$$20957 = 0;$$241017 = $$231016$lcssa;$$241074 = $$231073$lcssa;
      label = 144;
      break L19;
     }
    } else {
     HEAP32[$30>>2] = 18577;
     HEAP32[$5>>2] = 29;
     $$0$be = $$0;$$01048$be = $338;$$01050$be = $$231073$lcssa;$$0921$be = $$0921;$$0926$be = $$19$lcssa;$$0937$be = $$19956$lcssa;$$0992$be = $$0992;$$0993$be = $$231016$lcssa;
     break L19;
    }
    break;
   }
   case 14:  {
    $$20 = $$0926;$$20957 = $$0937;$$241017 = $$0993;$$241074 = $$01050;
    label = 144;
    break;
   }
   case 15:  {
    $$21 = $$0926;$$21958 = $$0937;$$251018 = $$0993;$$251075 = $$01050;
    label = 145;
    break;
   }
   case 16:  {
    $66 = ($$0926>>>0)<(14);
    if ($66) {
     $$221604 = $$0926;$$229591603 = $$0937;$$2610191602 = $$0993;$$2610761601 = $$01050;
     while(1) {
      $388 = ($$2610191602|0)==(0);
      if ($388) {
       $$4925 = $$0921;$$54 = $$221604;$$54991 = $$229591603;$$58 = 0;$$581108 = $$2610761601;$$8 = $$0;$815 = $$0992;
       break L17;
      }
      $389 = (($$2610191602) + -1)|0;
      $390 = ((($$2610761601)) + 1|0);
      $391 = HEAP8[$$2610761601>>0]|0;
      $392 = $391&255;
      $393 = $392 << $$221604;
      $394 = (($393) + ($$229591603))|0;
      $395 = (($$221604) + 8)|0;
      $396 = ($395>>>0)<(14);
      if ($396) {
       $$221604 = $395;$$229591603 = $394;$$2610191602 = $389;$$2610761601 = $390;
      } else {
       $$22$lcssa = $395;$$22959$lcssa = $394;$$261019$lcssa = $389;$$261076$lcssa = $390;
       break;
      }
     }
    } else {
     $$22$lcssa = $$0926;$$22959$lcssa = $$0937;$$261019$lcssa = $$0993;$$261076$lcssa = $$01050;
    }
    $397 = $$22959$lcssa & 31;
    $398 = (($397) + 257)|0;
    HEAP32[$57>>2] = $398;
    $399 = $$22959$lcssa >>> 5;
    $400 = $399 & 31;
    $401 = (($400) + 1)|0;
    HEAP32[$58>>2] = $401;
    $402 = $$22959$lcssa >>> 10;
    $403 = $402 & 15;
    $404 = (($403) + 4)|0;
    HEAP32[$64>>2] = $404;
    $405 = $$22959$lcssa >>> 14;
    $406 = (($$22$lcssa) + -14)|0;
    $407 = ($398>>>0)>(286);
    $408 = ($401>>>0)>(30);
    $or$cond2817 = $407 | $408;
    if ($or$cond2817) {
     HEAP32[$30>>2] = 18606;
     HEAP32[$5>>2] = 29;
     $$0$be = $$0;$$01048$be = $338;$$01050$be = $$261076$lcssa;$$0921$be = $$0921;$$0926$be = $406;$$0937$be = $405;$$0992$be = $$0992;$$0993$be = $$261019$lcssa;
     break L19;
    } else {
     HEAP32[$56>>2] = 0;
     HEAP32[$5>>2] = 17;
     $$23$ph2381 = $406;$$23960$ph2380 = $405;$$271020$ph2379 = $$261019$lcssa;$$271077$ph2378 = $$261076$lcssa;$431 = $404;$869 = 0;
     label = 155;
     break L19;
    }
    break;
   }
   case 17:  {
    $$pre2347 = HEAP32[$56>>2]|0;
    $$pre2348 = HEAP32[$64>>2]|0;
    $409 = ($$pre2347>>>0)<($$pre2348>>>0);
    if ($409) {
     $$23$ph2381 = $$0926;$$23960$ph2380 = $$0937;$$271020$ph2379 = $$0993;$$271077$ph2378 = $$01050;$431 = $$pre2348;$869 = $$pre2347;
     label = 155;
    } else {
     $$23$lcssa = $$0926;$$23960$lcssa = $$0937;$$271020$lcssa = $$0993;$$271077$lcssa = $$01050;$$lcssa = $$pre2347;
     label = 156;
    }
    break;
   }
   case 18:  {
    $$pre2349 = HEAP32[$56>>2]|0;
    $$1$ph = $$0;$$25$ph = $$0926;$$25962$ph = $$0937;$$291022$ph = $$0993;$$291079$ph = $$01050;$443 = $$pre2349;
    label = 166;
    break;
   }
   case 19:  {
    $$2 = $$0;$$33 = $$0926;$$33970 = $$0937;$$371030 = $$0993;$$371087 = $$01050;
    label = 199;
    break;
   }
   case 20:  {
    $$3 = $$0;$$34 = $$0926;$$34971 = $$0937;$$381031 = $$0993;$$381088 = $$01050;
    label = 200;
    break;
   }
   case 21:  {
    $$pre2354 = HEAP32[$44>>2]|0;
    $$38 = $$0926;$$38975 = $$0937;$$4 = $$0;$$421035 = $$0993;$$421092 = $$01050;$628 = $$pre2354;
    label = 218;
    break;
   }
   case 22:  {
    $$41$ph = $$0926;$$41978$ph = $$0937;$$451038$ph = $$0993;$$451095$ph = $$01050;$$5$ph = $$0;
    label = 225;
    break;
   }
   case 23:  {
    $$pre2360 = HEAP32[$44>>2]|0;
    $$44 = $$0926;$$44981 = $$0937;$$481041 = $$0993;$$481098 = $$01050;$$6 = $$0;$709 = $$pre2360;
    label = 237;
    break;
   }
   case 24:  {
    $$47 = $$0926;$$47984 = $$0937;$$511044 = $$0993;$$511101 = $$01050;$$7 = $$0;
    label = 243;
    break;
   }
   case 25:  {
    $763 = ($$0992|0)==(0);
    if ($763) {
     $$54$ph = $$0926;$$54991$ph = $$0937;$$58$ph = $$0993;$$581108$ph = $$01050;$$8$ph = $$0;$$ph = 0;
     label = 281;
     break L17;
    }
    $764 = HEAP32[$34>>2]|0;
    $765 = $764&255;
    $766 = ((($338)) + 1|0);
    HEAP8[$338>>0] = $765;
    $767 = (($$0992) + -1)|0;
    HEAP32[$5>>2] = 20;
    $$0$be = $$0;$$01048$be = $766;$$01050$be = $$01050;$$0921$be = $$0921;$$0926$be = $$0926;$$0937$be = $$0937;$$0992$be = $767;$$0993$be = $$0993;
    break;
   }
   case 26:  {
    $768 = HEAP32[$25>>2]|0;
    $769 = ($768|0)==(0);
    if ($769) {
     $$1922 = $$0921;$$49 = $$0926;$$49986 = $$0937;$$531046 = $$0993;$$531103 = $$01050;
    } else {
     $770 = ($$0926>>>0)<(32);
     if ($770) {
      $$481587 = $$0926;$$489851586 = $$0937;$$5210451585 = $$0993;$$5211021584 = $$01050;
      while(1) {
       $771 = ($$5210451585|0)==(0);
       if ($771) {
        $$4925 = $$0921;$$54 = $$481587;$$54991 = $$489851586;$$58 = 0;$$581108 = $$5211021584;$$8 = $$0;$815 = $$0992;
        break L17;
       }
       $772 = (($$5210451585) + -1)|0;
       $773 = ((($$5211021584)) + 1|0);
       $774 = HEAP8[$$5211021584>>0]|0;
       $775 = $774&255;
       $776 = $775 << $$481587;
       $777 = (($776) + ($$489851586))|0;
       $778 = (($$481587) + 8)|0;
       $779 = ($778>>>0)<(32);
       if ($779) {
        $$481587 = $778;$$489851586 = $777;$$5210451585 = $772;$$5211021584 = $773;
       } else {
        $$48$lcssa = $778;$$48985$lcssa = $777;$$521045$lcssa = $772;$$521102$lcssa = $773;
        break;
       }
      }
     } else {
      $$48$lcssa = $$0926;$$48985$lcssa = $$0937;$$521045$lcssa = $$0993;$$521102$lcssa = $$01050;
     }
     $780 = (($$0921) - ($$0992))|0;
     $781 = HEAP32[$52>>2]|0;
     $782 = (($781) + ($780))|0;
     HEAP32[$52>>2] = $782;
     $783 = HEAP32[$53>>2]|0;
     $784 = (($783) + ($780))|0;
     HEAP32[$53>>2] = $784;
     $785 = ($780|0)==(0);
     if ($785) {
      $$pre2346 = HEAP32[$26>>2]|0;
      $798 = $$pre2346;
     } else {
      $786 = HEAP32[$28>>2]|0;
      $787 = ($786|0)==(0);
      $788 = HEAP32[$26>>2]|0;
      $789 = (0 - ($780))|0;
      $790 = (($338) + ($789)|0);
      if ($787) {
       $792 = (_adler32($788,$790,$780)|0);
       $793 = $792;
      } else {
       $791 = (_crc32($788,$790,$780)|0);
       $793 = $791;
      }
      HEAP32[$26>>2] = $793;
      HEAP32[$33>>2] = $793;
      $798 = $793;
     }
     $794 = HEAP32[$28>>2]|0;
     $795 = ($794|0)==(0);
     $796 = (_llvm_bswap_i32(($$48985$lcssa|0))|0);
     $$$48985 = $795 ? $796 : $$48985$lcssa;
     $797 = ($$$48985|0)==($798|0);
     if ($797) {
      $$1922 = $$0992;$$49 = 0;$$49986 = 0;$$531046 = $$521045$lcssa;$$531103 = $$521102$lcssa;
     } else {
      HEAP32[$30>>2] = 18780;
      HEAP32[$5>>2] = 29;
      $$0$be = $$0;$$01048$be = $338;$$01050$be = $$521102$lcssa;$$0921$be = $$0992;$$0926$be = $$48$lcssa;$$0937$be = $$48985$lcssa;$$0992$be = $$0992;$$0993$be = $$521045$lcssa;
      break L19;
     }
    }
    HEAP32[$5>>2] = 27;
    $$2923 = $$1922;$$50 = $$49;$$50987 = $$49986;$$541047 = $$531046;$$541104 = $$531103;
    label = 273;
    break;
   }
   case 27:  {
    $$2923 = $$0921;$$50 = $$0926;$$50987 = $$0937;$$541047 = $$0993;$$541104 = $$01050;
    label = 273;
    break;
   }
   default: {
    $$01109 = -2;
    label = 296;
    break L17;
   }
   }
  } while(0);
  if ((label|0) == 47) {
   while(1) {
    label = 0;
    $137 = ($$39961839|0)==(0);
    if ($137) {
     $$4925 = $$0921;$$54 = $$39291841;$$54991 = $$39401840;$$58 = 0;$$581108 = $$310531838;$$8 = $$0;$815 = $$0992;
     break L17;
    }
    $138 = (($$39961839) + -1)|0;
    $139 = ((($$310531838)) + 1|0);
    $140 = HEAP8[$$310531838>>0]|0;
    $141 = $140&255;
    $142 = $141 << $$39291841;
    $143 = (($142) + ($$39401840))|0;
    $144 = (($$39291841) + 8)|0;
    $145 = ($144>>>0)<(32);
    if ($145) {
     $$310531838 = $139;$$39291841 = $144;$$39401840 = $143;$$39961839 = $138;
     label = 47;
    } else {
     $$31053$lcssa = $139;$$3940$lcssa = $143;$$3996$lcssa = $138;
     label = 49;
     break;
    }
   }
  }
  else if ((label|0) == 121) {
   label = 0;
   $336 = HEAP32[$35>>2]|0;
   $337 = ($336|0)==(0);
   if ($337) {
    label = 122;
    break;
   }
   $339 = (_adler32(0,0,0)|0);
   HEAP32[$26>>2] = $339;
   HEAP32[$33>>2] = $339;
   HEAP32[$5>>2] = 11;
   $$16 = $$15;$$16953 = $$15952;$$201013 = $$191012;$$201070 = $$191069;
   label = 124;
  }
  else if ((label|0) == 144) {
   label = 0;
   HEAP32[$5>>2] = 15;
   $$21 = $$20;$$21958 = $$20957;$$251018 = $$241017;$$251075 = $$241074;
   label = 145;
  }
  else if ((label|0) == 155) {
   label = 0;
   $$231624 = $$23$ph2381;$$239601623 = $$23960$ph2380;$$2710201622 = $$271020$ph2379;$$2710771621 = $$271077$ph2378;$423 = $869;
   while(1) {
    $411 = ($$231624>>>0)<(3);
    if ($411) {
     $412 = ($$2710201622|0)==(0);
     if ($412) {
      $$4925 = $$0921;$$54 = $$231624;$$54991 = $$239601623;$$58 = 0;$$581108 = $$2710771621;$$8 = $$0;$815 = $$0992;
      break L17;
     }
     $413 = (($$2710201622) + -1)|0;
     $414 = ((($$2710771621)) + 1|0);
     $415 = HEAP8[$$2710771621>>0]|0;
     $416 = $415&255;
     $417 = $416 << $$231624;
     $418 = (($417) + ($$239601623))|0;
     $419 = (($$231624) + 8)|0;
     $$24$lcssa = $419;$$24961$lcssa = $418;$$281021$lcssa = $413;$$281078$lcssa = $414;
    } else {
     $$24$lcssa = $$231624;$$24961$lcssa = $$239601623;$$281021$lcssa = $$2710201622;$$281078$lcssa = $$2710771621;
    }
    $420 = $$24961$lcssa & 7;
    $421 = $420&65535;
    $422 = (($423) + 1)|0;
    HEAP32[$56>>2] = $422;
    $424 = (12336 + ($423<<1)|0);
    $425 = HEAP16[$424>>1]|0;
    $426 = $425&65535;
    $427 = (((($5)) + 112|0) + ($426<<1)|0);
    HEAP16[$427>>1] = $421;
    $428 = $$24961$lcssa >>> 3;
    $429 = (($$24$lcssa) + -3)|0;
    $430 = ($422>>>0)<($431>>>0);
    if ($430) {
     $$231624 = $429;$$239601623 = $428;$$2710201622 = $$281021$lcssa;$$2710771621 = $$281078$lcssa;$423 = $422;
    } else {
     $$23$lcssa = $429;$$23960$lcssa = $428;$$271020$lcssa = $$281021$lcssa;$$271077$lcssa = $$281078$lcssa;$$lcssa = $422;
     label = 156;
     break;
    }
   }
  }
  else if ((label|0) == 273) {
   label = 0;
   $799 = HEAP32[$25>>2]|0;
   $800 = ($799|0)==(0);
   if ($800) {
    $$52 = $$50;$$52989 = $$50987;$$56 = $$541047;$$561106 = $$541104;
    label = 280;
    break;
   }
   $801 = HEAP32[$28>>2]|0;
   $802 = ($801|0)==(0);
   if ($802) {
    $$52 = $$50;$$52989 = $$50987;$$56 = $$541047;$$561106 = $$541104;
    label = 280;
    break;
   }
   $803 = ($$50>>>0)<(32);
   if ($803) {
    $$511594 = $$50;$$519881593 = $$50987;$$5511051591 = $$541104;$$551592 = $$541047;
    while(1) {
     $804 = ($$551592|0)==(0);
     if ($804) {
      $$4925 = $$2923;$$54 = $$511594;$$54991 = $$519881593;$$58 = 0;$$581108 = $$5511051591;$$8 = $$0;$815 = $$0992;
      break L17;
     }
     $805 = (($$551592) + -1)|0;
     $806 = ((($$5511051591)) + 1|0);
     $807 = HEAP8[$$5511051591>>0]|0;
     $808 = $807&255;
     $809 = $808 << $$511594;
     $810 = (($809) + ($$519881593))|0;
     $811 = (($$511594) + 8)|0;
     $812 = ($811>>>0)<(32);
     if ($812) {
      $$511594 = $811;$$519881593 = $810;$$5511051591 = $806;$$551592 = $805;
     } else {
      $$51$lcssa = $811;$$51988$lcssa = $810;$$55$lcssa = $805;$$551105$lcssa = $806;
      break;
     }
    }
   } else {
    $$51$lcssa = $$50;$$51988$lcssa = $$50987;$$55$lcssa = $$541047;$$551105$lcssa = $$541104;
   }
   $813 = HEAP32[$53>>2]|0;
   $814 = ($$51988$lcssa|0)==($813|0);
   if ($814) {
    $$52 = 0;$$52989 = 0;$$56 = $$55$lcssa;$$561106 = $$551105$lcssa;
    label = 280;
    break;
   }
   HEAP32[$30>>2] = 18801;
   HEAP32[$5>>2] = 29;
   $$0$be = $$0;$$01048$be = $338;$$01050$be = $$551105$lcssa;$$0921$be = $$2923;$$0926$be = $$51$lcssa;$$0937$be = $$51988$lcssa;$$0992$be = $$0992;$$0993$be = $$55$lcssa;
  }
  do {
   if ((label|0) == 49) {
    label = 0;
    $146 = HEAP32[$29>>2]|0;
    $147 = ($146|0)==(0|0);
    if (!($147)) {
     $148 = ((($146)) + 4|0);
     HEAP32[$148>>2] = $$3940$lcssa;
    }
    $149 = HEAP32[$28>>2]|0;
    $150 = $149 & 512;
    $151 = ($150|0)==(0);
    if (!($151)) {
     $152 = $$3940$lcssa&255;
     HEAP8[$2>>0] = $152;
     $153 = $$3940$lcssa >>> 8;
     $154 = $153&255;
     HEAP8[$27>>0] = $154;
     $155 = $$3940$lcssa >>> 16;
     $156 = $155&255;
     HEAP8[$54>>0] = $156;
     $157 = $$3940$lcssa >>> 24;
     $158 = $157&255;
     HEAP8[$55>>0] = $158;
     $159 = HEAP32[$26>>2]|0;
     $160 = (_crc32($159,$2,4)|0);
     HEAP32[$26>>2] = $160;
    }
    HEAP32[$5>>2] = 3;
    $$410541847 = $$31053$lcssa;$$49301850 = 0;$$49411849 = 0;$$49971848 = $$3996$lcssa;
    label = 55;
   }
   else if ((label|0) == 124) {
    label = 0;
    if ($36) {
     $$54$ph = $$16;$$54991$ph = $$16953;$$58$ph = $$201013;$$581108$ph = $$201070;$$8$ph = $$0;$$ph = $$0992;
     label = 281;
     break L17;
    } else {
     $$17 = $$16;$$17954 = $$16953;$$211014 = $$201013;$$211071 = $$201070;
     label = 125;
    }
   }
   else if ((label|0) == 145) {
    label = 0;
    $377 = HEAP32[$34>>2]|0;
    $378 = ($377|0)==(0);
    if ($378) {
     HEAP32[$5>>2] = 11;
     $$0$be = $$0;$$01048$be = $338;$$01050$be = $$251075;$$0921$be = $$0921;$$0926$be = $$21;$$0937$be = $$21958;$$0992$be = $$0992;$$0993$be = $$251018;
     break;
    }
    $379 = ($377>>>0)>($$251018>>>0);
    $$251018$ = $379 ? $$251018 : $377;
    $380 = ($$251018$>>>0)>($$0992>>>0);
    $$4915 = $380 ? $$0992 : $$251018$;
    $381 = ($$4915|0)==(0);
    if ($381) {
     $$54$ph = $$21;$$54991$ph = $$21958;$$58$ph = $$251018;$$581108$ph = $$251075;$$8$ph = $$0;$$ph = $$0992;
     label = 281;
     break L17;
    }
    _memcpy(($338|0),($$251075|0),($$4915|0))|0;
    $382 = (($$251018) - ($$4915))|0;
    $383 = (($$251075) + ($$4915)|0);
    $384 = (($$0992) - ($$4915))|0;
    $385 = (($338) + ($$4915)|0);
    $386 = HEAP32[$34>>2]|0;
    $387 = (($386) - ($$4915))|0;
    HEAP32[$34>>2] = $387;
    $$0$be = $$0;$$01048$be = $385;$$01050$be = $383;$$0921$be = $$0921;$$0926$be = $$21;$$0937$be = $$21958;$$0992$be = $384;$$0993$be = $382;
   }
   else if ((label|0) == 156) {
    label = 0;
    $410 = ($$lcssa>>>0)<(19);
    if ($410) {
     $433 = $$lcssa;
     while(1) {
      $432 = (($433) + 1)|0;
      $434 = (12336 + ($433<<1)|0);
      $435 = HEAP16[$434>>1]|0;
      $436 = $435&65535;
      $437 = (((($5)) + 112|0) + ($436<<1)|0);
      HEAP16[$437>>1] = 0;
      $exitcond = ($432|0)==(19);
      if ($exitcond) {
       break;
      } else {
       $433 = $432;
      }
     }
     HEAP32[$56>>2] = 19;
    }
    HEAP32[$61>>2] = $60;
    HEAP32[$38>>2] = $60;
    HEAP32[$39>>2] = 7;
    $438 = (_inflate_table(0,$62,19,$61,$39,$63)|0);
    $439 = ($438|0)==(0);
    if ($439) {
     HEAP32[$56>>2] = 0;
     HEAP32[$5>>2] = 18;
     $$1$ph = 0;$$25$ph = $$23$lcssa;$$25962$ph = $$23960$lcssa;$$291022$ph = $$271020$lcssa;$$291079$ph = $$271077$lcssa;$443 = 0;
     label = 166;
     break;
    } else {
     HEAP32[$30>>2] = 18642;
     HEAP32[$5>>2] = 29;
     $$0$be = $438;$$01048$be = $338;$$01050$be = $$271077$lcssa;$$0921$be = $$0921;$$0926$be = $$23$lcssa;$$0937$be = $$23960$lcssa;$$0992$be = $$0992;$$0993$be = $$271020$lcssa;
     break;
    }
   }
  } while(0);
  L161: do {
   if ((label|0) == 55) {
    while(1) {
     label = 0;
     $162 = ($$49971848|0)==(0);
     if ($162) {
      $$4925 = $$0921;$$54 = $$49301850;$$54991 = $$49411849;$$58 = 0;$$581108 = $$410541847;$$8 = $$0;$815 = $$0992;
      break L17;
     }
     $163 = (($$49971848) + -1)|0;
     $164 = ((($$410541847)) + 1|0);
     $165 = HEAP8[$$410541847>>0]|0;
     $166 = $165&255;
     $167 = $166 << $$49301850;
     $168 = (($167) + ($$49411849))|0;
     $169 = (($$49301850) + 8)|0;
     $170 = ($169>>>0)<(16);
     if ($170) {
      $$410541847 = $164;$$49301850 = $169;$$49411849 = $168;$$49971848 = $163;
      label = 55;
     } else {
      $$41054$lcssa = $164;$$4941$lcssa = $168;$$4997$lcssa = $163;
      label = 57;
      break;
     }
    }
   }
   else if ((label|0) == 125) {
    label = 0;
    $340 = HEAP32[$37>>2]|0;
    $341 = ($340|0)==(0);
    if (!($341)) {
     $344 = $$17 & 7;
     $345 = $$17954 >>> $344;
     $346 = (($$17) - ($344))|0;
     HEAP32[$5>>2] = 26;
     $$0$be = $$0;$$01048$be = $338;$$01050$be = $$211071;$$0921$be = $$0921;$$0926$be = $346;$$0937$be = $345;$$0992$be = $$0992;$$0993$be = $$211014;
     break;
    }
    $342 = ($$17>>>0)<(3);
    if ($342) {
     $343 = ($$211014|0)==(0);
     if ($343) {
      $$54$ph = $$17;$$54991$ph = $$17954;$$58$ph = 0;$$581108$ph = $$211071;$$8$ph = $$0;$$ph = $$0992;
      label = 281;
      break L17;
     }
     $347 = (($$211014) + -1)|0;
     $348 = ((($$211071)) + 1|0);
     $349 = HEAP8[$$211071>>0]|0;
     $350 = $349&255;
     $351 = $350 << $$17;
     $352 = (($351) + ($$17954))|0;
     $353 = (($$17) + 8)|0;
     $$18$lcssa = $353;$$18955$lcssa = $352;$$221015$lcssa = $347;$$221072$lcssa = $348;
    } else {
     $$18$lcssa = $$17;$$18955$lcssa = $$17954;$$221015$lcssa = $$211014;$$221072$lcssa = $$211071;
    }
    $354 = $$18955$lcssa & 1;
    HEAP32[$37>>2] = $354;
    $355 = $$18955$lcssa >>> 1;
    $trunc = $355&255;
    $trunc$clear = $trunc & 3;
    switch ($trunc$clear<<24>>24) {
    case 0:  {
     $$sink = 13;
     label = 136;
     break;
    }
    case 1:  {
     HEAP32[$38>>2] = 10160;
     HEAP32[$39>>2] = 9;
     HEAP32[$40>>2] = 12208;
     HEAP32[$41>>2] = 5;
     HEAP32[$5>>2] = 19;
     if ($42) {
      label = 132;
      break L17;
     }
     break;
    }
    case 2:  {
     $$sink = 16;
     label = 136;
     break;
    }
    case 3:  {
     HEAP32[$30>>2] = 18558;
     $$sink = 29;
     label = 136;
     break;
    }
    default: {
     label = 135;
     break L17;
    }
    }
    if ((label|0) == 136) {
     label = 0;
     HEAP32[$5>>2] = $$sink;
    }
    $358 = $$18955$lcssa >>> 3;
    $359 = (($$18$lcssa) + -3)|0;
    $$0$be = $$0;$$01048$be = $338;$$01050$be = $$221072$lcssa;$$0921$be = $$0921;$$0926$be = $359;$$0937$be = $358;$$0992$be = $$0992;$$0993$be = $$221015$lcssa;
   }
   else if ((label|0) == 166) {
    label = 0;
    $440 = HEAP32[$57>>2]|0;
    $441 = HEAP32[$58>>2]|0;
    $442 = (($441) + ($440))|0;
    $444 = ($443>>>0)<($442>>>0);
    do {
     if ($444) {
      $$251689 = $$25$ph;$$259621688 = $$25962$ph;$$2910221687 = $$291022$ph;$$2910791686 = $$291079$ph;$467 = $443;$532 = $440;$533 = $441;
      L182: while(1) {
       $445 = HEAP32[$38>>2]|0;
       $446 = HEAP32[$39>>2]|0;
       $447 = 1 << $446;
       $448 = (($447) + -1)|0;
       $449 = $448 & $$259621688;
       $$sroa$1878$0$$sroa_idx851634 = (((($445) + ($449<<2)|0)) + 1|0);
       $$sroa$1878$0$copyload861635 = HEAP8[$$sroa$1878$0$$sroa_idx851634>>0]|0;
       $450 = $$sroa$1878$0$copyload861635&255;
       $451 = ($$251689>>>0)<($450>>>0);
       if ($451) {
        $$261642 = $$251689;$$269631641 = $$259621688;$$3010231640 = $$2910221687;$$3010801639 = $$2910791686;
        while(1) {
         $452 = ($$3010231640|0)==(0);
         if ($452) {
          $$4925 = $$0921;$$54 = $$261642;$$54991 = $$269631641;$$58 = 0;$$581108 = $$3010801639;$$8 = $$1$ph;$815 = $$0992;
          break L17;
         }
         $453 = (($$3010231640) + -1)|0;
         $454 = ((($$3010801639)) + 1|0);
         $455 = HEAP8[$$3010801639>>0]|0;
         $456 = $455&255;
         $457 = $456 << $$261642;
         $458 = (($457) + ($$269631641))|0;
         $459 = (($$261642) + 8)|0;
         $460 = $448 & $458;
         $$sroa$1878$0$$sroa_idx85 = (((($445) + ($460<<2)|0)) + 1|0);
         $$sroa$1878$0$copyload86 = HEAP8[$$sroa$1878$0$$sroa_idx85>>0]|0;
         $461 = $$sroa$1878$0$copyload86&255;
         $462 = ($459>>>0)<($461>>>0);
         if ($462) {
          $$261642 = $459;$$269631641 = $458;$$3010231640 = $453;$$3010801639 = $454;
         } else {
          $$26$lcssa = $459;$$26963$lcssa = $458;$$301023$lcssa = $453;$$301080$lcssa = $454;$$lcssa1192 = $461;$$pn2369 = $460;
          break;
         }
        }
       } else {
        $$26$lcssa = $$251689;$$26963$lcssa = $$259621688;$$301023$lcssa = $$2910221687;$$301080$lcssa = $$2910791686;$$lcssa1192 = $450;$$pn2369 = $449;
       }
       $$sroa$42$0$copyload117$lcssa$in = (((($445) + ($$pn2369<<2)|0)) + 2|0);
       $$sroa$42$0$copyload117$lcssa = HEAP16[$$sroa$42$0$copyload117$lcssa$in>>1]|0;
       $463 = ($$sroa$42$0$copyload117$lcssa&65535)<(16);
       if ($463) {
        $464 = $$26963$lcssa >>> $$lcssa1192;
        $465 = (($$26$lcssa) - ($$lcssa1192))|0;
        $466 = (($467) + 1)|0;
        HEAP32[$56>>2] = $466;
        $468 = (((($5)) + 112|0) + ($467<<1)|0);
        HEAP16[$468>>1] = $$sroa$42$0$copyload117$lcssa;
        $$25$be = $465;$$25962$be = $464;$$291022$be = $$301023$lcssa;$$291079$be = $$301080$lcssa;
       } else {
        switch ($$sroa$42$0$copyload117$lcssa<<16>>16) {
        case 16:  {
         $476 = (($$lcssa1192) + 2)|0;
         $477 = ($$26$lcssa>>>0)<($476>>>0);
         if ($477) {
          $$271668 = $$26$lcssa;$$279641667 = $$26963$lcssa;$$3110241666 = $$301023$lcssa;$$3110811665 = $$301080$lcssa;
          while(1) {
           $480 = ($$3110241666|0)==(0);
           if ($480) {
            $$4925 = $$0921;$$54 = $$271668;$$54991 = $$279641667;$$58 = 0;$$581108 = $$3110811665;$$8 = $$1$ph;$815 = $$0992;
            break L17;
           }
           $481 = (($$3110241666) + -1)|0;
           $482 = ((($$3110811665)) + 1|0);
           $483 = HEAP8[$$3110811665>>0]|0;
           $484 = $483&255;
           $485 = $484 << $$271668;
           $486 = (($485) + ($$279641667))|0;
           $487 = (($$271668) + 8)|0;
           $488 = ($487>>>0)<($476>>>0);
           if ($488) {
            $$271668 = $487;$$279641667 = $486;$$3110241666 = $481;$$3110811665 = $482;
           } else {
            $$27$lcssa = $487;$$27964$lcssa = $486;$$311024$lcssa = $481;$$311081$lcssa = $482;
            break;
           }
          }
         } else {
          $$27$lcssa = $$26$lcssa;$$27964$lcssa = $$26963$lcssa;$$311024$lcssa = $$301023$lcssa;$$311081$lcssa = $$301080$lcssa;
         }
         $489 = $$27964$lcssa >>> $$lcssa1192;
         $490 = (($$27$lcssa) - ($$lcssa1192))|0;
         $491 = ($467|0)==(0);
         if ($491) {
          $$31 = $490;$$31968 = $489;$$351028 = $$311024$lcssa;$$351085 = $$311081$lcssa;
          label = 190;
          break L182;
         }
         $492 = (($467) + -1)|0;
         $493 = (((($5)) + 112|0) + ($492<<1)|0);
         $494 = HEAP16[$493>>1]|0;
         $495 = $494&65535;
         $496 = $489 & 3;
         $497 = (($496) + 3)|0;
         $498 = $489 >>> 2;
         $499 = (($490) + -2)|0;
         $$0907 = $495;$$30 = $499;$$30967 = $498;$$341027 = $$311024$lcssa;$$341084 = $$311081$lcssa;$$5916 = $497;
         break;
        }
        case 17:  {
         $474 = (($$lcssa1192) + 3)|0;
         $475 = ($$26$lcssa>>>0)<($474>>>0);
         if ($475) {
          $$281658 = $$26$lcssa;$$289651657 = $$26963$lcssa;$$3210251656 = $$301023$lcssa;$$3210821655 = $$301080$lcssa;
          while(1) {
           $500 = ($$3210251656|0)==(0);
           if ($500) {
            $$4925 = $$0921;$$54 = $$281658;$$54991 = $$289651657;$$58 = 0;$$581108 = $$3210821655;$$8 = $$1$ph;$815 = $$0992;
            break L17;
           }
           $501 = (($$3210251656) + -1)|0;
           $502 = ((($$3210821655)) + 1|0);
           $503 = HEAP8[$$3210821655>>0]|0;
           $504 = $503&255;
           $505 = $504 << $$281658;
           $506 = (($505) + ($$289651657))|0;
           $507 = (($$281658) + 8)|0;
           $508 = ($507>>>0)<($474>>>0);
           if ($508) {
            $$281658 = $507;$$289651657 = $506;$$3210251656 = $501;$$3210821655 = $502;
           } else {
            $$28$lcssa = $507;$$28965$lcssa = $506;$$321025$lcssa = $501;$$321082$lcssa = $502;
            break;
           }
          }
         } else {
          $$28$lcssa = $$26$lcssa;$$28965$lcssa = $$26963$lcssa;$$321025$lcssa = $$301023$lcssa;$$321082$lcssa = $$301080$lcssa;
         }
         $509 = $$28965$lcssa >>> $$lcssa1192;
         $510 = $509 & 7;
         $511 = (($510) + 3)|0;
         $512 = $509 >>> 3;
         $513 = (-3 - ($$lcssa1192))|0;
         $514 = (($513) + ($$28$lcssa))|0;
         $$0907 = 0;$$30 = $514;$$30967 = $512;$$341027 = $$321025$lcssa;$$341084 = $$321082$lcssa;$$5916 = $511;
         break;
        }
        default: {
         $478 = (($$lcssa1192) + 7)|0;
         $479 = ($$26$lcssa>>>0)<($478>>>0);
         if ($479) {
          $$291678 = $$26$lcssa;$$299661677 = $$26963$lcssa;$$3310261676 = $$301023$lcssa;$$3310831675 = $$301080$lcssa;
          while(1) {
           $515 = ($$3310261676|0)==(0);
           if ($515) {
            $$4925 = $$0921;$$54 = $$291678;$$54991 = $$299661677;$$58 = 0;$$581108 = $$3310831675;$$8 = $$1$ph;$815 = $$0992;
            break L17;
           }
           $516 = (($$3310261676) + -1)|0;
           $517 = ((($$3310831675)) + 1|0);
           $518 = HEAP8[$$3310831675>>0]|0;
           $519 = $518&255;
           $520 = $519 << $$291678;
           $521 = (($520) + ($$299661677))|0;
           $522 = (($$291678) + 8)|0;
           $523 = ($522>>>0)<($478>>>0);
           if ($523) {
            $$291678 = $522;$$299661677 = $521;$$3310261676 = $516;$$3310831675 = $517;
           } else {
            $$29$lcssa = $522;$$29966$lcssa = $521;$$331026$lcssa = $516;$$331083$lcssa = $517;
            break;
           }
          }
         } else {
          $$29$lcssa = $$26$lcssa;$$29966$lcssa = $$26963$lcssa;$$331026$lcssa = $$301023$lcssa;$$331083$lcssa = $$301080$lcssa;
         }
         $524 = $$29966$lcssa >>> $$lcssa1192;
         $525 = $524 & 127;
         $526 = (($525) + 11)|0;
         $527 = $524 >>> 7;
         $528 = (-7 - ($$lcssa1192))|0;
         $529 = (($528) + ($$29$lcssa))|0;
         $$0907 = 0;$$30 = $529;$$30967 = $527;$$341027 = $$331026$lcssa;$$341084 = $$331083$lcssa;$$5916 = $526;
        }
        }
        $530 = (($467) + ($$5916))|0;
        $531 = (($533) + ($532))|0;
        $534 = ($530>>>0)>($531>>>0);
        if ($534) {
         $$31 = $$30;$$31968 = $$30967;$$351028 = $$341027;$$351085 = $$341084;
         label = 190;
         break;
        }
        $535 = $$0907&65535;
        $536 = (($$5916) + -1)|0;
        $537 = (($467) + 1)|0;
        HEAP32[$56>>2] = $537;
        $538 = (((($5)) + 112|0) + ($467<<1)|0);
        HEAP16[$538>>1] = $535;
        $539 = ($536|0)==(0);
        if ($539) {
         $$25$be = $$30;$$25962$be = $$30967;$$291022$be = $$341027;$$291079$be = $$341084;
        } else {
         $541 = $536;
         while(1) {
          $$pre2351 = HEAP32[$56>>2]|0;
          $540 = (($541) + -1)|0;
          $542 = (($$pre2351) + 1)|0;
          HEAP32[$56>>2] = $542;
          $543 = (((($5)) + 112|0) + ($$pre2351<<1)|0);
          HEAP16[$543>>1] = $535;
          $544 = ($540|0)==(0);
          if ($544) {
           $$25$be = $$30;$$25962$be = $$30967;$$291022$be = $$341027;$$291079$be = $$341084;
           break;
          } else {
           $541 = $540;
          }
         }
        }
       }
       $469 = HEAP32[$56>>2]|0;
       $470 = HEAP32[$57>>2]|0;
       $471 = HEAP32[$58>>2]|0;
       $472 = (($471) + ($470))|0;
       $473 = ($469>>>0)<($472>>>0);
       if ($473) {
        $$251689 = $$25$be;$$259621688 = $$25962$be;$$2910221687 = $$291022$be;$$2910791686 = $$291079$be;$467 = $469;$532 = $470;$533 = $471;
       } else {
        label = 191;
        break;
       }
      }
      if ((label|0) == 190) {
       label = 0;
       HEAP32[$30>>2] = 18667;
       HEAP32[$5>>2] = 29;
       $$0$be = $$1$ph;$$01048$be = $338;$$01050$be = $$351085;$$0921$be = $$0921;$$0926$be = $$31;$$0937$be = $$31968;$$0992$be = $$0992;$$0993$be = $$351028;
       break L161;
      }
      else if ((label|0) == 191) {
       label = 0;
       $$pr1115$pre = HEAP32[$5>>2]|0;
       $545 = ($$pr1115$pre|0)==(29);
       if ($545) {
        $$0$be = $$1$ph;$$01048$be = $338;$$01050$be = $$291079$be;$$0921$be = $$0921;$$0926$be = $$25$be;$$0937$be = $$25962$be;$$0992$be = $$0992;$$0993$be = $$291022$be;
        break L161;
       } else {
        $$25$lcssa2385 = $$25$be;$$25962$lcssa2384 = $$25962$be;$$291022$lcssa2383 = $$291022$be;$$291079$lcssa2382 = $$291079$be;$548 = $470;
        break;
       }
      }
     } else {
      $$25$lcssa2385 = $$25$ph;$$25962$lcssa2384 = $$25962$ph;$$291022$lcssa2383 = $$291022$ph;$$291079$lcssa2382 = $$291079$ph;$548 = $440;
     }
    } while(0);
    $546 = HEAP16[$59>>1]|0;
    $547 = ($546<<16>>16)==(0);
    if ($547) {
     HEAP32[$30>>2] = 18693;
     HEAP32[$5>>2] = 29;
     $$0$be = $$1$ph;$$01048$be = $338;$$01050$be = $$291079$lcssa2382;$$0921$be = $$0921;$$0926$be = $$25$lcssa2385;$$0937$be = $$25962$lcssa2384;$$0992$be = $$0992;$$0993$be = $$291022$lcssa2383;
     break;
    }
    HEAP32[$61>>2] = $60;
    HEAP32[$38>>2] = $60;
    HEAP32[$39>>2] = 9;
    $549 = (_inflate_table(1,$62,$548,$61,$39,$63)|0);
    $550 = ($549|0)==(0);
    if (!($550)) {
     HEAP32[$30>>2] = 18730;
     HEAP32[$5>>2] = 29;
     $$0$be = $549;$$01048$be = $338;$$01050$be = $$291079$lcssa2382;$$0921$be = $$0921;$$0926$be = $$25$lcssa2385;$$0937$be = $$25962$lcssa2384;$$0992$be = $$0992;$$0993$be = $$291022$lcssa2383;
     break;
    }
    $551 = HEAP32[$61>>2]|0;
    HEAP32[$40>>2] = $551;
    HEAP32[$41>>2] = 6;
    $552 = HEAP32[$57>>2]|0;
    $553 = (((($5)) + 112|0) + ($552<<1)|0);
    $554 = HEAP32[$58>>2]|0;
    $555 = (_inflate_table(2,$553,$554,$61,$41,$63)|0);
    $556 = ($555|0)==(0);
    if ($556) {
     HEAP32[$5>>2] = 19;
     if ($42) {
      $$54$ph = $$25$lcssa2385;$$54991$ph = $$25962$lcssa2384;$$58$ph = $$291022$lcssa2383;$$581108$ph = $$291079$lcssa2382;$$8$ph = 0;$$ph = $$0992;
      label = 281;
      break L17;
     } else {
      $$2 = 0;$$33 = $$25$lcssa2385;$$33970 = $$25962$lcssa2384;$$371030 = $$291022$lcssa2383;$$371087 = $$291079$lcssa2382;
      label = 199;
      break;
     }
    } else {
     HEAP32[$30>>2] = 18758;
     HEAP32[$5>>2] = 29;
     $$0$be = $555;$$01048$be = $338;$$01050$be = $$291079$lcssa2382;$$0921$be = $$0921;$$0926$be = $$25$lcssa2385;$$0937$be = $$25962$lcssa2384;$$0992$be = $$0992;$$0993$be = $$291022$lcssa2383;
     break;
    }
   }
  } while(0);
  if ((label|0) == 57) {
   label = 0;
   $171 = HEAP32[$29>>2]|0;
   $172 = ($171|0)==(0|0);
   if (!($172)) {
    $173 = ((($171)) + 12|0);
    $174 = $$4941$lcssa >>> 8;
    $175 = ((($171)) + 8|0);
    $176 = $$4941$lcssa & 255;
    HEAP32[$175>>2] = $176;
    HEAP32[$173>>2] = $174;
   }
   $177 = HEAP32[$28>>2]|0;
   $178 = $177 & 512;
   $179 = ($178|0)==(0);
   if (!($179)) {
    $180 = $$4941$lcssa&255;
    HEAP8[$2>>0] = $180;
    $181 = $$4941$lcssa >>> 8;
    $182 = $181&255;
    HEAP8[$27>>0] = $182;
    $183 = HEAP32[$26>>2]|0;
    $184 = (_crc32($183,$2,2)|0);
    HEAP32[$26>>2] = $184;
   }
   HEAP32[$5>>2] = 4;
   $$51055 = $$41054$lcssa;$$5931 = 0;$$5942 = 0;$$5998 = $$4997$lcssa;
   label = 62;
  }
  else if ((label|0) == 199) {
   label = 0;
   HEAP32[$5>>2] = 20;
   $$3 = $$2;$$34 = $$33;$$34971 = $$33970;$$381031 = $$371030;$$381088 = $$371087;
   label = 200;
  }
  do {
   if ((label|0) == 62) {
    label = 0;
    $185 = HEAP32[$28>>2]|0;
    $186 = $185 & 1024;
    $187 = ($186|0)==(0);
    if ($187) {
     $208 = HEAP32[$29>>2]|0;
     $209 = ($208|0)==(0|0);
     if ($209) {
      $$71000 = $$5998;$$71057 = $$51055;$$7933 = $$5931;$$7944 = $$5942;
     } else {
      $210 = ((($208)) + 16|0);
      HEAP32[$210>>2] = 0;
      $$71000 = $$5998;$$71057 = $$51055;$$7933 = $$5931;$$7944 = $$5942;
     }
    } else {
     $188 = ($$5931>>>0)<(16);
     if ($188) {
      $$610561856 = $$51055;$$69321859 = $$5931;$$69431858 = $$5942;$$69991857 = $$5998;
      while(1) {
       $189 = ($$69991857|0)==(0);
       if ($189) {
        $$4925 = $$0921;$$54 = $$69321859;$$54991 = $$69431858;$$58 = 0;$$581108 = $$610561856;$$8 = $$0;$815 = $$0992;
        break L17;
       }
       $190 = (($$69991857) + -1)|0;
       $191 = ((($$610561856)) + 1|0);
       $192 = HEAP8[$$610561856>>0]|0;
       $193 = $192&255;
       $194 = $193 << $$69321859;
       $195 = (($194) + ($$69431858))|0;
       $196 = (($$69321859) + 8)|0;
       $197 = ($196>>>0)<(16);
       if ($197) {
        $$610561856 = $191;$$69321859 = $196;$$69431858 = $195;$$69991857 = $190;
       } else {
        $$61056$lcssa = $191;$$6943$lcssa = $195;$$6999$lcssa = $190;
        break;
       }
      }
     } else {
      $$61056$lcssa = $$51055;$$6943$lcssa = $$5942;$$6999$lcssa = $$5998;
     }
     HEAP32[$34>>2] = $$6943$lcssa;
     $198 = HEAP32[$29>>2]|0;
     $199 = ($198|0)==(0|0);
     if (!($199)) {
      $200 = ((($198)) + 20|0);
      HEAP32[$200>>2] = $$6943$lcssa;
     }
     $201 = $185 & 512;
     $202 = ($201|0)==(0);
     if ($202) {
      $$71000 = $$6999$lcssa;$$71057 = $$61056$lcssa;$$7933 = 0;$$7944 = 0;
     } else {
      $203 = $$6943$lcssa&255;
      HEAP8[$2>>0] = $203;
      $204 = $$6943$lcssa >>> 8;
      $205 = $204&255;
      HEAP8[$27>>0] = $205;
      $206 = HEAP32[$26>>2]|0;
      $207 = (_crc32($206,$2,2)|0);
      HEAP32[$26>>2] = $207;
      $$71000 = $$6999$lcssa;$$71057 = $$61056$lcssa;$$7933 = 0;$$7944 = 0;
     }
    }
    HEAP32[$5>>2] = 5;
    $$81001 = $$71000;$$81058 = $$71057;$$8934 = $$7933;$$8945 = $$7944;
    label = 73;
   }
   else if ((label|0) == 200) {
    label = 0;
    $557 = ($$381031>>>0)>(5);
    $558 = ($$0992>>>0)>(257);
    $or$cond7 = $558 & $557;
    if ($or$cond7) {
     HEAP32[$7>>2] = $338;
     HEAP32[$17>>2] = $$0992;
     HEAP32[$0>>2] = $$381088;
     HEAP32[$19>>2] = $$381031;
     HEAP32[$21>>2] = $$34971;
     HEAP32[$23>>2] = $$34;
     _inflate_fast($0,$$0921);
     $559 = HEAP32[$7>>2]|0;
     $560 = HEAP32[$17>>2]|0;
     $561 = HEAP32[$0>>2]|0;
     $562 = HEAP32[$19>>2]|0;
     $563 = HEAP32[$21>>2]|0;
     $564 = HEAP32[$23>>2]|0;
     $565 = HEAP32[$5>>2]|0;
     $566 = ($565|0)==(11);
     if (!($566)) {
      $$0$be = $$3;$$01048$be = $559;$$01050$be = $561;$$0921$be = $$0921;$$0926$be = $564;$$0937$be = $563;$$0992$be = $560;$$0993$be = $562;
      break;
     }
     HEAP32[$43>>2] = -1;
     $$0$be = $$3;$$01048$be = $559;$$01050$be = $561;$$0921$be = $$0921;$$0926$be = $564;$$0937$be = $563;$$0992$be = $560;$$0993$be = $562;
     break;
    }
    HEAP32[$43>>2] = 0;
    $567 = HEAP32[$38>>2]|0;
    $568 = HEAP32[$39>>2]|0;
    $569 = 1 << $568;
    $570 = (($569) + -1)|0;
    $571 = $570 & $$34971;
    $$sroa$1878$0$$sroa_idx811699 = (((($567) + ($571<<2)|0)) + 1|0);
    $$sroa$1878$0$copyload821700 = HEAP8[$$sroa$1878$0$$sroa_idx811699>>0]|0;
    $572 = $$sroa$1878$0$copyload821700&255;
    $573 = ($572>>>0)>($$34>>>0);
    if ($573) {
     $$351706 = $$34;$$359721705 = $$34971;$$3910321704 = $$381031;$$3910891703 = $$381088;
     while(1) {
      $574 = ($$3910321704|0)==(0);
      if ($574) {
       $$4925 = $$0921;$$54 = $$351706;$$54991 = $$359721705;$$58 = 0;$$581108 = $$3910891703;$$8 = $$3;$815 = $$0992;
       break L17;
      }
      $575 = (($$3910321704) + -1)|0;
      $576 = ((($$3910891703)) + 1|0);
      $577 = HEAP8[$$3910891703>>0]|0;
      $578 = $577&255;
      $579 = $578 << $$351706;
      $580 = (($579) + ($$359721705))|0;
      $581 = (($$351706) + 8)|0;
      $582 = $570 & $580;
      $$sroa$1878$0$$sroa_idx81 = (((($567) + ($582<<2)|0)) + 1|0);
      $$sroa$1878$0$copyload82 = HEAP8[$$sroa$1878$0$$sroa_idx81>>0]|0;
      $583 = $$sroa$1878$0$copyload82&255;
      $584 = ($583>>>0)>($581>>>0);
      if ($584) {
       $$351706 = $581;$$359721705 = $580;$$3910321704 = $575;$$3910891703 = $576;
      } else {
       $$35$lcssa = $581;$$35972$lcssa = $580;$$391032$lcssa = $575;$$391089$lcssa = $576;$$lcssa1243 = $583;$$pn2367 = $582;$$sroa$1878$0$copyload82$lcssa = $$sroa$1878$0$copyload82;
       break;
      }
     }
    } else {
     $$35$lcssa = $$34;$$35972$lcssa = $$34971;$$391032$lcssa = $$381031;$$391089$lcssa = $$381088;$$lcssa1243 = $572;$$pn2367 = $571;$$sroa$1878$0$copyload82$lcssa = $$sroa$1878$0$copyload821700;
    }
    $$sroa$42$0$copyload113$lcssa$in = (((($567) + ($$pn2367<<2)|0)) + 2|0);
    $$sroa$061$0$copyload73$lcssa$in = (($567) + ($$pn2367<<2)|0);
    $$sroa$42$0$copyload113$lcssa = HEAP16[$$sroa$42$0$copyload113$lcssa$in>>1]|0;
    $$sroa$061$0$copyload73$lcssa = HEAP8[$$sroa$061$0$copyload73$lcssa$in>>0]|0;
    $585 = $$sroa$061$0$copyload73$lcssa&255;
    $586 = ($$sroa$061$0$copyload73$lcssa<<24>>24)!=(0);
    $587 = $585 & 240;
    $588 = ($587|0)==(0);
    $or$cond1114 = $586 & $588;
    if ($or$cond1114) {
     $589 = $$sroa$42$0$copyload113$lcssa&65535;
     $590 = (($$lcssa1243) + ($585))|0;
     $591 = 1 << $590;
     $592 = (($591) + -1)|0;
     $593 = $$35972$lcssa & $592;
     $594 = $593 >>> $$lcssa1243;
     $595 = (($594) + ($589))|0;
     $$sroa$1878$0$$sroa_idx831723 = (((($567) + ($595<<2)|0)) + 1|0);
     $$sroa$1878$0$copyload841724 = HEAP8[$$sroa$1878$0$$sroa_idx831723>>0]|0;
     $596 = $$sroa$1878$0$copyload841724&255;
     $597 = (($596) + ($$lcssa1243))|0;
     $598 = ($597>>>0)>($$35$lcssa>>>0);
     if ($598) {
      $$361728 = $$35$lcssa;$$369731727 = $$35972$lcssa;$$4010331726 = $$391032$lcssa;$$4010901725 = $$391089$lcssa;
      while(1) {
       $599 = ($$4010331726|0)==(0);
       if ($599) {
        $$4925 = $$0921;$$54 = $$361728;$$54991 = $$369731727;$$58 = 0;$$581108 = $$4010901725;$$8 = $$3;$815 = $$0992;
        break L17;
       }
       $600 = (($$4010331726) + -1)|0;
       $601 = ((($$4010901725)) + 1|0);
       $602 = HEAP8[$$4010901725>>0]|0;
       $603 = $602&255;
       $604 = $603 << $$361728;
       $605 = (($604) + ($$369731727))|0;
       $606 = (($$361728) + 8)|0;
       $607 = $605 & $592;
       $608 = $607 >>> $$lcssa1243;
       $609 = (($608) + ($589))|0;
       $$sroa$1878$0$$sroa_idx83 = (((($567) + ($609<<2)|0)) + 1|0);
       $$sroa$1878$0$copyload84 = HEAP8[$$sroa$1878$0$$sroa_idx83>>0]|0;
       $610 = $$sroa$1878$0$copyload84&255;
       $611 = (($610) + ($$lcssa1243))|0;
       $612 = ($611>>>0)>($606>>>0);
       if ($612) {
        $$361728 = $606;$$369731727 = $605;$$4010331726 = $600;$$4010901725 = $601;
       } else {
        $$36$lcssa = $606;$$36973$lcssa = $605;$$401033$lcssa = $600;$$401090$lcssa = $601;$$lcssa1255 = $609;$$sroa$1878$0$copyload84$lcssa = $$sroa$1878$0$copyload84;
        break;
       }
      }
     } else {
      $$36$lcssa = $$35$lcssa;$$36973$lcssa = $$35972$lcssa;$$401033$lcssa = $$391032$lcssa;$$401090$lcssa = $$391089$lcssa;$$lcssa1255 = $595;$$sroa$1878$0$copyload84$lcssa = $$sroa$1878$0$copyload841724;
     }
     $$sroa$42$0$$sroa_idx114 = (((($567) + ($$lcssa1255<<2)|0)) + 2|0);
     $$sroa$42$0$copyload115 = HEAP16[$$sroa$42$0$$sroa_idx114>>1]|0;
     $$sroa$061$0$$sroa_idx74 = (($567) + ($$lcssa1255<<2)|0);
     $$sroa$061$0$copyload75 = HEAP8[$$sroa$061$0$$sroa_idx74>>0]|0;
     $613 = $$36973$lcssa >>> $$lcssa1243;
     $614 = (($$36$lcssa) - ($$lcssa1243))|0;
     HEAP32[$43>>2] = $$lcssa1243;
     $$37 = $614;$$37974 = $613;$$411034 = $$401033$lcssa;$$411091 = $$401090$lcssa;$$sroa$061$0 = $$sroa$061$0$copyload75;$$sroa$1878$0 = $$sroa$1878$0$copyload84$lcssa;$$sroa$42$0 = $$sroa$42$0$copyload115;$619 = $$lcssa1243;
    } else {
     $$37 = $$35$lcssa;$$37974 = $$35972$lcssa;$$411034 = $$391032$lcssa;$$411091 = $$391089$lcssa;$$sroa$061$0 = $$sroa$061$0$copyload73$lcssa;$$sroa$1878$0 = $$sroa$1878$0$copyload82$lcssa;$$sroa$42$0 = $$sroa$42$0$copyload113$lcssa;$619 = 0;
    }
    $615 = $$sroa$1878$0&255;
    $616 = $$37974 >>> $615;
    $617 = (($$37) - ($615))|0;
    $618 = (($619) + ($615))|0;
    HEAP32[$43>>2] = $618;
    $620 = $$sroa$42$0&65535;
    HEAP32[$34>>2] = $620;
    $621 = $$sroa$061$0&255;
    $622 = ($$sroa$061$0<<24>>24)==(0);
    if ($622) {
     HEAP32[$5>>2] = 25;
     $$0$be = $$3;$$01048$be = $338;$$01050$be = $$411091;$$0921$be = $$0921;$$0926$be = $617;$$0937$be = $616;$$0992$be = $$0992;$$0993$be = $$411034;
     break;
    }
    $623 = $621 & 32;
    $624 = ($623|0)==(0);
    if (!($624)) {
     HEAP32[$43>>2] = -1;
     HEAP32[$5>>2] = 11;
     $$0$be = $$3;$$01048$be = $338;$$01050$be = $$411091;$$0921$be = $$0921;$$0926$be = $617;$$0937$be = $616;$$0992$be = $$0992;$$0993$be = $$411034;
     break;
    }
    $625 = $621 & 64;
    $626 = ($625|0)==(0);
    if ($626) {
     $627 = $621 & 15;
     HEAP32[$44>>2] = $627;
     HEAP32[$5>>2] = 21;
     $$38 = $617;$$38975 = $616;$$4 = $$3;$$421035 = $$411034;$$421092 = $$411091;$628 = $627;
     label = 218;
     break;
    } else {
     HEAP32[$30>>2] = 19727;
     HEAP32[$5>>2] = 29;
     $$0$be = $$3;$$01048$be = $338;$$01050$be = $$411091;$$0921$be = $$0921;$$0926$be = $617;$$0937$be = $616;$$0992$be = $$0992;$$0993$be = $$411034;
     break;
    }
   }
  } while(0);
  if ((label|0) == 73) {
   label = 0;
   $211 = HEAP32[$28>>2]|0;
   $212 = $211 & 1024;
   $213 = ($212|0)==(0);
   if ($213) {
    $$101003 = $$81001;$$101060 = $$81058;
   } else {
    $214 = HEAP32[$34>>2]|0;
    $215 = ($214>>>0)>($$81001>>>0);
    $$81001$ = $215 ? $$81001 : $214;
    $216 = ($$81001$|0)==(0);
    if ($216) {
     $$91002 = $$81001;$$91059 = $$81058;$241 = $214;
    } else {
     $217 = HEAP32[$29>>2]|0;
     $218 = ($217|0)==(0|0);
     if ($218) {
      $233 = $211;
     } else {
      $219 = ((($217)) + 16|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = ($220|0)==(0|0);
      if ($221) {
       $233 = $211;
      } else {
       $222 = ((($217)) + 20|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = (($223) - ($214))|0;
       $225 = (($220) + ($224)|0);
       $226 = (($224) + ($$81001$))|0;
       $227 = ((($217)) + 24|0);
       $228 = HEAP32[$227>>2]|0;
       $229 = ($226>>>0)>($228>>>0);
       $230 = (($228) - ($224))|0;
       $231 = $229 ? $230 : $$81001$;
       _memcpy(($225|0),($$81058|0),($231|0))|0;
       $$pre2361 = HEAP32[$28>>2]|0;
       $233 = $$pre2361;
      }
     }
     $232 = $233 & 512;
     $234 = ($232|0)==(0);
     if (!($234)) {
      $235 = HEAP32[$26>>2]|0;
      $236 = (_crc32($235,$$81058,$$81001$)|0);
      HEAP32[$26>>2] = $236;
     }
     $237 = (($$81001) - ($$81001$))|0;
     $238 = (($$81058) + ($$81001$)|0);
     $239 = HEAP32[$34>>2]|0;
     $240 = (($239) - ($$81001$))|0;
     HEAP32[$34>>2] = $240;
     $$91002 = $237;$$91059 = $238;$241 = $240;
    }
    $242 = ($241|0)==(0);
    if ($242) {
     $$101003 = $$91002;$$101060 = $$91059;
    } else {
     $$54$ph = $$8934;$$54991$ph = $$8945;$$58$ph = $$91002;$$581108$ph = $$91059;$$8$ph = $$0;$$ph = $$0992;
     label = 281;
     break;
    }
   }
   HEAP32[$34>>2] = 0;
   HEAP32[$5>>2] = 6;
   $$111004 = $$101003;$$111061 = $$101060;$$9935 = $$8934;$$9946 = $$8945;
   label = 83;
  }
  else if ((label|0) == 218) {
   label = 0;
   $629 = ($628|0)==(0);
   if ($629) {
    $$pre2356 = HEAP32[$34>>2]|0;
    $$40 = $$38;$$40977 = $$38975;$$441037 = $$421035;$$441094 = $$421092;$649 = $$pre2356;
   } else {
    $630 = ($$38>>>0)<($628>>>0);
    if ($630) {
     $$391741 = $$38;$$399761740 = $$38975;$$4310361739 = $$421035;$$4310931738 = $$421092;
     while(1) {
      $631 = ($$4310361739|0)==(0);
      if ($631) {
       $$4925 = $$0921;$$54 = $$391741;$$54991 = $$399761740;$$58 = 0;$$581108 = $$4310931738;$$8 = $$4;$815 = $$0992;
       break L17;
      }
      $632 = (($$4310361739) + -1)|0;
      $633 = ((($$4310931738)) + 1|0);
      $634 = HEAP8[$$4310931738>>0]|0;
      $635 = $634&255;
      $636 = $635 << $$391741;
      $637 = (($636) + ($$399761740))|0;
      $638 = (($$391741) + 8)|0;
      $639 = ($638>>>0)<($628>>>0);
      if ($639) {
       $$391741 = $638;$$399761740 = $637;$$4310361739 = $632;$$4310931738 = $633;
      } else {
       $$39$lcssa = $638;$$39976$lcssa = $637;$$431036$lcssa = $632;$$431093$lcssa = $633;
       break;
      }
     }
    } else {
     $$39$lcssa = $$38;$$39976$lcssa = $$38975;$$431036$lcssa = $$421035;$$431093$lcssa = $$421092;
    }
    $640 = 1 << $628;
    $641 = (($640) + -1)|0;
    $642 = $$39976$lcssa & $641;
    $643 = HEAP32[$34>>2]|0;
    $644 = (($643) + ($642))|0;
    HEAP32[$34>>2] = $644;
    $645 = $$39976$lcssa >>> $628;
    $646 = (($$39$lcssa) - ($628))|0;
    $647 = HEAP32[$43>>2]|0;
    $648 = (($647) + ($628))|0;
    HEAP32[$43>>2] = $648;
    $$40 = $646;$$40977 = $645;$$441037 = $$431036$lcssa;$$441094 = $$431093$lcssa;$649 = $644;
   }
   HEAP32[$45>>2] = $649;
   HEAP32[$5>>2] = 22;
   $$41$ph = $$40;$$41978$ph = $$40977;$$451038$ph = $$441037;$$451095$ph = $$441094;$$5$ph = $$4;
   label = 225;
  }
  do {
   if ((label|0) == 83) {
    label = 0;
    $243 = HEAP32[$28>>2]|0;
    $244 = $243 & 2048;
    $245 = ($244|0)==(0);
    if ($245) {
     $270 = HEAP32[$29>>2]|0;
     $271 = ($270|0)==(0|0);
     if ($271) {
      $$121005 = $$111004;$$121062 = $$111061;
     } else {
      $272 = ((($270)) + 28|0);
      HEAP32[$272>>2] = 0;
      $$121005 = $$111004;$$121062 = $$111061;
     }
    } else {
     $246 = ($$111004|0)==(0);
     if ($246) {
      $$54$ph = $$9935;$$54991$ph = $$9946;$$58$ph = 0;$$581108$ph = $$111061;$$8$ph = $$0;$$ph = $$0992;
      label = 281;
      break L17;
     } else {
      $$1912 = 0;
     }
     while(1) {
      $247 = (($$1912) + 1)|0;
      $248 = (($$111061) + ($$1912)|0);
      $249 = HEAP8[$248>>0]|0;
      $250 = HEAP32[$29>>2]|0;
      $251 = ($250|0)==(0|0);
      if (!($251)) {
       $252 = ((($250)) + 28|0);
       $253 = HEAP32[$252>>2]|0;
       $254 = ($253|0)==(0|0);
       if (!($254)) {
        $255 = HEAP32[$34>>2]|0;
        $256 = ((($250)) + 32|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = ($255>>>0)<($257>>>0);
        if ($258) {
         $259 = (($253) + ($255)|0);
         $260 = (($255) + 1)|0;
         HEAP32[$34>>2] = $260;
         HEAP8[$259>>0] = $249;
        }
       }
      }
      $261 = ($249<<24>>24)!=(0);
      $262 = ($$111004>>>0)>($247>>>0);
      $or$cond1110 = $261 & $262;
      if ($or$cond1110) {
       $$1912 = $247;
      } else {
       break;
      }
     }
     $263 = HEAP32[$28>>2]|0;
     $264 = $263 & 512;
     $265 = ($264|0)==(0);
     if (!($265)) {
      $266 = HEAP32[$26>>2]|0;
      $267 = (_crc32($266,$$111061,$247)|0);
      HEAP32[$26>>2] = $267;
     }
     $268 = (($$111004) - ($247))|0;
     $269 = (($$111061) + ($247)|0);
     if ($261) {
      $$54$ph = $$9935;$$54991$ph = $$9946;$$58$ph = $268;$$581108$ph = $269;$$8$ph = $$0;$$ph = $$0992;
      label = 281;
      break L17;
     } else {
      $$121005 = $268;$$121062 = $269;
     }
    }
    HEAP32[$34>>2] = 0;
    HEAP32[$5>>2] = 7;
    $$10936 = $$9935;$$10947 = $$9946;$$131006 = $$121005;$$131063 = $$121062;
    label = 96;
   }
   else if ((label|0) == 225) {
    label = 0;
    $650 = HEAP32[$40>>2]|0;
    $651 = HEAP32[$41>>2]|0;
    $652 = 1 << $651;
    $653 = (($652) + -1)|0;
    $654 = $653 & $$41978$ph;
    $$sroa$1878$0$$sroa_idx791750 = (((($650) + ($654<<2)|0)) + 1|0);
    $$sroa$1878$0$copyload801751 = HEAP8[$$sroa$1878$0$$sroa_idx791750>>0]|0;
    $655 = $$sroa$1878$0$copyload801751&255;
    $656 = ($655>>>0)>($$41$ph>>>0);
    if ($656) {
     $$411757 = $$41$ph;$$419781756 = $$41978$ph;$$4510381755 = $$451038$ph;$$4510951754 = $$451095$ph;
     while(1) {
      $657 = ($$4510381755|0)==(0);
      if ($657) {
       $$4925 = $$0921;$$54 = $$411757;$$54991 = $$419781756;$$58 = 0;$$581108 = $$4510951754;$$8 = $$5$ph;$815 = $$0992;
       break L17;
      }
      $658 = (($$4510381755) + -1)|0;
      $659 = ((($$4510951754)) + 1|0);
      $660 = HEAP8[$$4510951754>>0]|0;
      $661 = $660&255;
      $662 = $661 << $$411757;
      $663 = (($662) + ($$419781756))|0;
      $664 = (($$411757) + 8)|0;
      $665 = $653 & $663;
      $$sroa$1878$0$$sroa_idx79 = (((($650) + ($665<<2)|0)) + 1|0);
      $$sroa$1878$0$copyload80 = HEAP8[$$sroa$1878$0$$sroa_idx79>>0]|0;
      $666 = $$sroa$1878$0$copyload80&255;
      $667 = ($666>>>0)>($664>>>0);
      if ($667) {
       $$411757 = $664;$$419781756 = $663;$$4510381755 = $658;$$4510951754 = $659;
      } else {
       $$41$lcssa = $664;$$41978$lcssa = $663;$$451038$lcssa = $658;$$451095$lcssa = $659;$$lcssa1267 = $666;$$pn2365 = $665;$$sroa$1878$0$copyload80$lcssa = $$sroa$1878$0$copyload80;
       break;
      }
     }
    } else {
     $$41$lcssa = $$41$ph;$$41978$lcssa = $$41978$ph;$$451038$lcssa = $$451038$ph;$$451095$lcssa = $$451095$ph;$$lcssa1267 = $655;$$pn2365 = $654;$$sroa$1878$0$copyload80$lcssa = $$sroa$1878$0$copyload801751;
    }
    $$sroa$42$0$copyload111$lcssa$in = (((($650) + ($$pn2365<<2)|0)) + 2|0);
    $$sroa$061$0$copyload71$lcssa$in = (($650) + ($$pn2365<<2)|0);
    $$sroa$42$0$copyload111$lcssa = HEAP16[$$sroa$42$0$copyload111$lcssa$in>>1]|0;
    $$sroa$061$0$copyload71$lcssa = HEAP8[$$sroa$061$0$copyload71$lcssa$in>>0]|0;
    $668 = $$sroa$061$0$copyload71$lcssa&255;
    $669 = $668 & 240;
    $670 = ($669|0)==(0);
    if ($670) {
     $671 = $$sroa$42$0$copyload111$lcssa&65535;
     $672 = (($$lcssa1267) + ($668))|0;
     $673 = 1 << $672;
     $674 = (($673) + -1)|0;
     $675 = $$41978$lcssa & $674;
     $676 = $675 >>> $$lcssa1267;
     $677 = (($676) + ($671))|0;
     $$sroa$1878$0$$sroa_idx1773 = (((($650) + ($677<<2)|0)) + 1|0);
     $$sroa$1878$0$copyload1774 = HEAP8[$$sroa$1878$0$$sroa_idx1773>>0]|0;
     $678 = $$sroa$1878$0$copyload1774&255;
     $679 = (($678) + ($$lcssa1267))|0;
     $680 = ($679>>>0)>($$41$lcssa>>>0);
     if ($680) {
      $$421778 = $$41$lcssa;$$429791777 = $$41978$lcssa;$$4610391776 = $$451038$lcssa;$$4610961775 = $$451095$lcssa;
      while(1) {
       $681 = ($$4610391776|0)==(0);
       if ($681) {
        $$4925 = $$0921;$$54 = $$421778;$$54991 = $$429791777;$$58 = 0;$$581108 = $$4610961775;$$8 = $$5$ph;$815 = $$0992;
        break L17;
       }
       $682 = (($$4610391776) + -1)|0;
       $683 = ((($$4610961775)) + 1|0);
       $684 = HEAP8[$$4610961775>>0]|0;
       $685 = $684&255;
       $686 = $685 << $$421778;
       $687 = (($686) + ($$429791777))|0;
       $688 = (($$421778) + 8)|0;
       $689 = $687 & $674;
       $690 = $689 >>> $$lcssa1267;
       $691 = (($690) + ($671))|0;
       $$sroa$1878$0$$sroa_idx = (((($650) + ($691<<2)|0)) + 1|0);
       $$sroa$1878$0$copyload = HEAP8[$$sroa$1878$0$$sroa_idx>>0]|0;
       $692 = $$sroa$1878$0$copyload&255;
       $693 = (($692) + ($$lcssa1267))|0;
       $694 = ($693>>>0)>($688>>>0);
       if ($694) {
        $$421778 = $688;$$429791777 = $687;$$4610391776 = $682;$$4610961775 = $683;
       } else {
        $$42$lcssa = $688;$$42979$lcssa = $687;$$461039$lcssa = $682;$$461096$lcssa = $683;$$lcssa1279 = $691;$$sroa$1878$0$copyload$lcssa = $$sroa$1878$0$copyload;
        break;
       }
      }
     } else {
      $$42$lcssa = $$41$lcssa;$$42979$lcssa = $$41978$lcssa;$$461039$lcssa = $$451038$lcssa;$$461096$lcssa = $$451095$lcssa;$$lcssa1279 = $677;$$sroa$1878$0$copyload$lcssa = $$sroa$1878$0$copyload1774;
     }
     $$sroa$42$0$$sroa_idx108 = (((($650) + ($$lcssa1279<<2)|0)) + 2|0);
     $$sroa$42$0$copyload = HEAP16[$$sroa$42$0$$sroa_idx108>>1]|0;
     $$sroa$061$0$$sroa_idx = (($650) + ($$lcssa1279<<2)|0);
     $$sroa$061$0$copyload = HEAP8[$$sroa$061$0$$sroa_idx>>0]|0;
     $695 = $$42979$lcssa >>> $$lcssa1267;
     $696 = (($$42$lcssa) - ($$lcssa1267))|0;
     $697 = HEAP32[$43>>2]|0;
     $698 = (($697) + ($$lcssa1267))|0;
     HEAP32[$43>>2] = $698;
     $$43 = $696;$$43980 = $695;$$471040 = $$461039$lcssa;$$471097 = $$461096$lcssa;$$sroa$061$1 = $$sroa$061$0$copyload;$$sroa$1878$1 = $$sroa$1878$0$copyload$lcssa;$$sroa$42$1 = $$sroa$42$0$copyload;$703 = $698;
    } else {
     $$pre2358 = HEAP32[$43>>2]|0;
     $$43 = $$41$lcssa;$$43980 = $$41978$lcssa;$$471040 = $$451038$lcssa;$$471097 = $$451095$lcssa;$$sroa$061$1 = $$sroa$061$0$copyload71$lcssa;$$sroa$1878$1 = $$sroa$1878$0$copyload80$lcssa;$$sroa$42$1 = $$sroa$42$0$copyload111$lcssa;$703 = $$pre2358;
    }
    $699 = $$sroa$1878$1&255;
    $700 = $$43980 >>> $699;
    $701 = (($$43) - ($699))|0;
    $702 = (($703) + ($699))|0;
    HEAP32[$43>>2] = $702;
    $704 = $$sroa$061$1&255;
    $705 = $704 & 64;
    $706 = ($705|0)==(0);
    if ($706) {
     $707 = $$sroa$42$1&65535;
     HEAP32[$46>>2] = $707;
     $708 = $704 & 15;
     HEAP32[$44>>2] = $708;
     HEAP32[$5>>2] = 23;
     $$44 = $701;$$44981 = $700;$$481041 = $$471040;$$481098 = $$471097;$$6 = $$5$ph;$709 = $708;
     label = 237;
     break;
    } else {
     HEAP32[$30>>2] = 19755;
     HEAP32[$5>>2] = 29;
     $$0$be = $$5$ph;$$01048$be = $338;$$01050$be = $$471097;$$0921$be = $$0921;$$0926$be = $701;$$0937$be = $700;$$0992$be = $$0992;$$0993$be = $$471040;
     break;
    }
   }
  } while(0);
  if ((label|0) == 96) {
   label = 0;
   $273 = HEAP32[$28>>2]|0;
   $274 = $273 & 4096;
   $275 = ($274|0)==(0);
   if ($275) {
    $300 = HEAP32[$29>>2]|0;
    $301 = ($300|0)==(0|0);
    if ($301) {
     $$141007 = $$131006;$$141064 = $$131063;
    } else {
     $302 = ((($300)) + 36|0);
     HEAP32[$302>>2] = 0;
     $$141007 = $$131006;$$141064 = $$131063;
    }
   } else {
    $276 = ($$131006|0)==(0);
    if ($276) {
     $$54$ph = $$10936;$$54991$ph = $$10947;$$58$ph = 0;$$581108$ph = $$131063;$$8$ph = $$0;$$ph = $$0992;
     label = 281;
     break;
    } else {
     $$2913 = 0;
    }
    while(1) {
     $277 = (($$2913) + 1)|0;
     $278 = (($$131063) + ($$2913)|0);
     $279 = HEAP8[$278>>0]|0;
     $280 = HEAP32[$29>>2]|0;
     $281 = ($280|0)==(0|0);
     if (!($281)) {
      $282 = ((($280)) + 36|0);
      $283 = HEAP32[$282>>2]|0;
      $284 = ($283|0)==(0|0);
      if (!($284)) {
       $285 = HEAP32[$34>>2]|0;
       $286 = ((($280)) + 40|0);
       $287 = HEAP32[$286>>2]|0;
       $288 = ($285>>>0)<($287>>>0);
       if ($288) {
        $289 = (($283) + ($285)|0);
        $290 = (($285) + 1)|0;
        HEAP32[$34>>2] = $290;
        HEAP8[$289>>0] = $279;
       }
      }
     }
     $291 = ($279<<24>>24)!=(0);
     $292 = ($$131006>>>0)>($277>>>0);
     $or$cond1111 = $291 & $292;
     if ($or$cond1111) {
      $$2913 = $277;
     } else {
      break;
     }
    }
    $293 = HEAP32[$28>>2]|0;
    $294 = $293 & 512;
    $295 = ($294|0)==(0);
    if (!($295)) {
     $296 = HEAP32[$26>>2]|0;
     $297 = (_crc32($296,$$131063,$277)|0);
     HEAP32[$26>>2] = $297;
    }
    $298 = (($$131006) - ($277))|0;
    $299 = (($$131063) + ($277)|0);
    if ($291) {
     $$54$ph = $$10936;$$54991$ph = $$10947;$$58$ph = $298;$$581108$ph = $299;$$8$ph = $$0;$$ph = $$0992;
     label = 281;
     break;
    } else {
     $$141007 = $298;$$141064 = $299;
    }
   }
   HEAP32[$5>>2] = 8;
   $$11 = $$10936;$$11948 = $$10947;$$151008 = $$141007;$$151065 = $$141064;
   label = 109;
  }
  else if ((label|0) == 237) {
   label = 0;
   $710 = ($709|0)==(0);
   if ($710) {
    $$46 = $$44;$$46983 = $$44981;$$501043 = $$481041;$$501100 = $$481098;
   } else {
    $711 = ($$44>>>0)<($709>>>0);
    if ($711) {
     $$451791 = $$44;$$459821790 = $$44981;$$4910421789 = $$481041;$$4910991788 = $$481098;
     while(1) {
      $712 = ($$4910421789|0)==(0);
      if ($712) {
       $$4925 = $$0921;$$54 = $$451791;$$54991 = $$459821790;$$58 = 0;$$581108 = $$4910991788;$$8 = $$6;$815 = $$0992;
       break L17;
      }
      $713 = (($$4910421789) + -1)|0;
      $714 = ((($$4910991788)) + 1|0);
      $715 = HEAP8[$$4910991788>>0]|0;
      $716 = $715&255;
      $717 = $716 << $$451791;
      $718 = (($717) + ($$459821790))|0;
      $719 = (($$451791) + 8)|0;
      $720 = ($719>>>0)<($709>>>0);
      if ($720) {
       $$451791 = $719;$$459821790 = $718;$$4910421789 = $713;$$4910991788 = $714;
      } else {
       $$45$lcssa = $719;$$45982$lcssa = $718;$$491042$lcssa = $713;$$491099$lcssa = $714;
       break;
      }
     }
    } else {
     $$45$lcssa = $$44;$$45982$lcssa = $$44981;$$491042$lcssa = $$481041;$$491099$lcssa = $$481098;
    }
    $721 = 1 << $709;
    $722 = (($721) + -1)|0;
    $723 = $$45982$lcssa & $722;
    $724 = HEAP32[$46>>2]|0;
    $725 = (($724) + ($723))|0;
    HEAP32[$46>>2] = $725;
    $726 = $$45982$lcssa >>> $709;
    $727 = (($$45$lcssa) - ($709))|0;
    $728 = HEAP32[$43>>2]|0;
    $729 = (($728) + ($709))|0;
    HEAP32[$43>>2] = $729;
    $$46 = $727;$$46983 = $726;$$501043 = $$491042$lcssa;$$501100 = $$491099$lcssa;
   }
   HEAP32[$5>>2] = 24;
   $$47 = $$46;$$47984 = $$46983;$$511044 = $$501043;$$511101 = $$501100;$$7 = $$6;
   label = 243;
  }
  do {
   if ((label|0) == 109) {
    label = 0;
    $303 = HEAP32[$28>>2]|0;
    $304 = $303 & 512;
    $305 = ($304|0)==(0);
    if ($305) {
     $$13 = $$11;$$13950 = $$11948;$$171010 = $$151008;$$171067 = $$151065;
    } else {
     $306 = ($$11>>>0)<(16);
     if ($306) {
      $$121868 = $$11;$$129491867 = $$11948;$$1610091866 = $$151008;$$1610661865 = $$151065;
      while(1) {
       $307 = ($$1610091866|0)==(0);
       if ($307) {
        $$4925 = $$0921;$$54 = $$121868;$$54991 = $$129491867;$$58 = 0;$$581108 = $$1610661865;$$8 = $$0;$815 = $$0992;
        break L17;
       }
       $308 = (($$1610091866) + -1)|0;
       $309 = ((($$1610661865)) + 1|0);
       $310 = HEAP8[$$1610661865>>0]|0;
       $311 = $310&255;
       $312 = $311 << $$121868;
       $313 = (($312) + ($$129491867))|0;
       $314 = (($$121868) + 8)|0;
       $315 = ($314>>>0)<(16);
       if ($315) {
        $$121868 = $314;$$129491867 = $313;$$1610091866 = $308;$$1610661865 = $309;
       } else {
        $$12$lcssa = $314;$$12949$lcssa = $313;$$161009$lcssa = $308;$$161066$lcssa = $309;
        break;
       }
      }
     } else {
      $$12$lcssa = $$11;$$12949$lcssa = $$11948;$$161009$lcssa = $$151008;$$161066$lcssa = $$151065;
     }
     $316 = HEAP32[$26>>2]|0;
     $317 = $316 & 65535;
     $318 = ($$12949$lcssa|0)==($317|0);
     if ($318) {
      $$13 = 0;$$13950 = 0;$$171010 = $$161009$lcssa;$$171067 = $$161066$lcssa;
     } else {
      HEAP32[$30>>2] = 18538;
      HEAP32[$5>>2] = 29;
      $$0$be = $$0;$$01048$be = $338;$$01050$be = $$161066$lcssa;$$0921$be = $$0921;$$0926$be = $$12$lcssa;$$0937$be = $$12949$lcssa;$$0992$be = $$0992;$$0993$be = $$161009$lcssa;
      break;
     }
    }
    $319 = HEAP32[$29>>2]|0;
    $320 = ($319|0)==(0|0);
    if (!($320)) {
     $321 = $303 >>> 9;
     $322 = $321 & 1;
     $323 = ((($319)) + 44|0);
     HEAP32[$323>>2] = $322;
     $324 = ((($319)) + 48|0);
     HEAP32[$324>>2] = 1;
    }
    $325 = (_crc32(0,0,0)|0);
    HEAP32[$26>>2] = $325;
    HEAP32[$33>>2] = $325;
    HEAP32[$5>>2] = 11;
    $$0$be = $$0;$$01048$be = $338;$$01050$be = $$171067;$$0921$be = $$0921;$$0926$be = $$13;$$0937$be = $$13950;$$0992$be = $$0992;$$0993$be = $$171010;
   }
   else if ((label|0) == 243) {
    label = 0;
    $730 = ($$0992|0)==(0);
    if ($730) {
     $$54$ph = $$47;$$54991$ph = $$47984;$$58$ph = $$511044;$$581108$ph = $$511101;$$8$ph = $$7;$$ph = 0;
     label = 281;
     break L17;
    }
    $731 = (($$0921) - ($$0992))|0;
    $732 = HEAP32[$46>>2]|0;
    $733 = ($732>>>0)>($731>>>0);
    if ($733) {
     $734 = (($732) - ($731))|0;
     $735 = HEAP32[$47>>2]|0;
     $736 = ($734>>>0)>($735>>>0);
     if ($736) {
      $737 = HEAP32[$48>>2]|0;
      $738 = ($737|0)==(0);
      if (!($738)) {
       HEAP32[$30>>2] = 19777;
       HEAP32[$5>>2] = 29;
       $$0$be = $$7;$$01048$be = $338;$$01050$be = $$511101;$$0921$be = $$0921;$$0926$be = $$47;$$0937$be = $$47984;$$0992$be = $$0992;$$0993$be = $$511044;
       break;
      }
     }
     $739 = HEAP32[$49>>2]|0;
     $740 = ($734>>>0)>($739>>>0);
     $741 = HEAP32[$50>>2]|0;
     if ($740) {
      $742 = (($734) - ($739))|0;
      $743 = HEAP32[$51>>2]|0;
      $744 = (($743) - ($742))|0;
      $$7918 = $742;$$pn = $744;
     } else {
      $745 = (($739) - ($734))|0;
      $$7918 = $734;$$pn = $745;
     }
     $$0908 = (($741) + ($$pn)|0);
     $746 = HEAP32[$34>>2]|0;
     $747 = ($$7918>>>0)>($746>>>0);
     $$$7918 = $747 ? $746 : $$7918;
     $$1909 = $$0908;$$8919 = $$$7918;$753 = $746;
    } else {
     $748 = (0 - ($732))|0;
     $749 = (($338) + ($748)|0);
     $750 = HEAP32[$34>>2]|0;
     $$1909 = $749;$$8919 = $750;$753 = $750;
    }
    $751 = ($$8919>>>0)>($$0992>>>0);
    $$0992$$8919 = $751 ? $$0992 : $$8919;
    $752 = (($753) - ($$0992$$8919))|0;
    HEAP32[$34>>2] = $752;
    $754 = (($$0992$$8919) + 1)|0;
    $$10 = $$0992$$8919;$$11049 = $338;$$2910 = $$1909;
    while(1) {
     $755 = ((($$2910)) + 1|0);
     $756 = HEAP8[$$2910>>0]|0;
     $757 = ((($$11049)) + 1|0);
     HEAP8[$$11049>>0] = $756;
     $758 = (($$10) + -1)|0;
     $759 = ($758|0)==(0);
     if ($759) {
      break;
     } else {
      $$10 = $758;$$11049 = $757;$$2910 = $755;
     }
    }
    $760 = (($$0992) - ($$0992$$8919))|0;
    $scevgep = ((($338)) + -1|0);
    $scevgep2344 = (($scevgep) + ($754)|0);
    $761 = HEAP32[$34>>2]|0;
    $762 = ($761|0)==(0);
    if ($762) {
     HEAP32[$5>>2] = 20;
     $$0$be = $$7;$$01048$be = $scevgep2344;$$01050$be = $$511101;$$0921$be = $$0921;$$0926$be = $$47;$$0937$be = $$47984;$$0992$be = $760;$$0993$be = $$511044;
    } else {
     $$0$be = $$7;$$01048$be = $scevgep2344;$$01050$be = $$511101;$$0921$be = $$0921;$$0926$be = $$47;$$0937$be = $$47984;$$0992$be = $760;$$0993$be = $$511044;
    }
   }
  } while(0);
  $$pre = HEAP32[$5>>2]|0;
  $$0 = $$0$be;$$01050 = $$01050$be;$$0921 = $$0921$be;$$0926 = $$0926$be;$$0937 = $$0937$be;$$0992 = $$0992$be;$$0993 = $$0993$be;$338 = $$01048$be;$65 = $$pre;
 }
 if ((label|0) == 122) {
  HEAP32[$7>>2] = $338;
  HEAP32[$17>>2] = $$0992;
  HEAP32[$0>>2] = $$191069;
  HEAP32[$19>>2] = $$191012;
  HEAP32[$21>>2] = $$15952;
  HEAP32[$23>>2] = $$15;
  $$01109 = 2;
  STACKTOP = sp;return ($$01109|0);
 }
 else if ((label|0) == 132) {
  $356 = $$18955$lcssa >>> 3;
  $357 = (($$18$lcssa) + -3)|0;
  $$4925 = $$0921;$$54 = $357;$$54991 = $356;$$58 = $$221015$lcssa;$$581108 = $$221072$lcssa;$$8 = $$0;$815 = $$0992;
 }
 else if ((label|0) == 135) {
  // unreachable;
 }
 else if ((label|0) == 280) {
  HEAP32[$5>>2] = 28;
  $$4925 = $$2923;$$54 = $$52;$$54991 = $$52989;$$58 = $$56;$$581108 = $$561106;$$8 = 1;$815 = $$0992;
 }
 else if ((label|0) == 281) {
  $$4925 = $$0921;$$54 = $$54$ph;$$54991 = $$54991$ph;$$58 = $$58$ph;$$581108 = $$581108$ph;$$8 = $$8$ph;$815 = $$ph;
 }
 else if ((label|0) == 295) {
  $$01109 = -4;
  STACKTOP = sp;return ($$01109|0);
 }
 else if ((label|0) == 296) {
  STACKTOP = sp;return ($$01109|0);
 }
 HEAP32[$7>>2] = $338;
 HEAP32[$17>>2] = $815;
 HEAP32[$0>>2] = $$581108;
 HEAP32[$19>>2] = $$58;
 HEAP32[$21>>2] = $$54991;
 HEAP32[$23>>2] = $$54;
 $816 = HEAP32[$51>>2]|0;
 $817 = ($816|0)==(0);
 if ($817) {
  $818 = ($$4925|0)==($815|0);
  if ($818) {
   $827 = $$58;$829 = $815;
  } else {
   $819 = HEAP32[$5>>2]|0;
   $820 = ($819>>>0)<(29);
   if ($820) {
    $821 = ($819>>>0)<(26);
    $822 = ($1|0)!=(4);
    $or$cond9 = $822 | $821;
    if ($or$cond9) {
     label = 286;
    } else {
     $827 = $$58;$829 = $815;
    }
   } else {
    $827 = $$58;$829 = $815;
   }
  }
 } else {
  label = 286;
 }
 do {
  if ((label|0) == 286) {
   $823 = (($$4925) - ($815))|0;
   $824 = (_updatewindow($0,$338,$823)|0);
   $825 = ($824|0)==(0);
   if ($825) {
    $$pre2363 = HEAP32[$19>>2]|0;
    $$pre2364 = HEAP32[$17>>2]|0;
    $827 = $$pre2363;$829 = $$pre2364;
    break;
   }
   HEAP32[$5>>2] = 30;
   $$01109 = -4;
   STACKTOP = sp;return ($$01109|0);
  }
 } while(0);
 $826 = (($20) - ($827))|0;
 $828 = (($$4925) - ($829))|0;
 $830 = ((($0)) + 8|0);
 $831 = HEAP32[$830>>2]|0;
 $832 = (($831) + ($826))|0;
 HEAP32[$830>>2] = $832;
 $833 = HEAP32[$52>>2]|0;
 $834 = (($833) + ($828))|0;
 HEAP32[$52>>2] = $834;
 $835 = HEAP32[$53>>2]|0;
 $836 = (($835) + ($828))|0;
 HEAP32[$53>>2] = $836;
 $837 = HEAP32[$25>>2]|0;
 $838 = ($837|0)!=(0);
 $839 = ($828|0)!=(0);
 $or$cond11 = $839 & $838;
 if ($or$cond11) {
  $840 = HEAP32[$28>>2]|0;
  $841 = ($840|0)==(0);
  $842 = HEAP32[$26>>2]|0;
  $843 = HEAP32[$7>>2]|0;
  $844 = (0 - ($828))|0;
  $845 = (($843) + ($844)|0);
  if ($841) {
   $847 = (_adler32($842,$845,$828)|0);
   $848 = $847;
  } else {
   $846 = (_crc32($842,$845,$828)|0);
   $848 = $846;
  }
  HEAP32[$26>>2] = $848;
  HEAP32[$33>>2] = $848;
 }
 $849 = HEAP32[$23>>2]|0;
 $850 = HEAP32[$37>>2]|0;
 $851 = ($850|0)!=(0);
 $852 = $851 ? 64 : 0;
 $853 = (($852) + ($849))|0;
 $854 = HEAP32[$5>>2]|0;
 $855 = ($854|0)==(11);
 $856 = $855 ? 128 : 0;
 $857 = (($853) + ($856))|0;
 $858 = ($854|0)==(19);
 $859 = ($854|0)==(14);
 $860 = $858 | $859;
 $861 = $860 ? 256 : 0;
 $862 = (($857) + ($861))|0;
 $863 = ((($0)) + 44|0);
 HEAP32[$863>>2] = $862;
 $864 = $828 | $826;
 $865 = ($864|0)==(0);
 $866 = ($1|0)==(4);
 $or$cond15 = $866 | $865;
 $867 = ($$8|0)==(0);
 $or$cond17 = $867 & $or$cond15;
 $$$8 = $or$cond17 ? -5 : $$8;
 $$01109 = $$$8;
 STACKTOP = sp;return ($$01109|0);
}
function _updatewindow($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$053 = 0, $$54 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = ((($0)) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($0)) + 40|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($4)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = 1 << $13;
  $15 = (FUNCTION_TABLE_iiii[$9 & 63]($11,$14,1)|0);
  HEAP32[$5>>2] = $15;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $$053 = 1;
   return ($$053|0);
  } else {
   $29 = $15;
  }
 } else {
  $29 = $6;
 }
 $17 = ((($4)) + 40|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = ((($4)) + 36|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = 1 << $21;
  HEAP32[$17>>2] = $22;
  $23 = ((($4)) + 48|0);
  HEAP32[$23>>2] = 0;
  $24 = ((($4)) + 44|0);
  HEAP32[$24>>2] = 0;
  $25 = $22;
 } else {
  $25 = $18;
 }
 $26 = ($25>>>0)>($2>>>0);
 if (!($26)) {
  $27 = (0 - ($25))|0;
  $28 = (($1) + ($27)|0);
  _memcpy(($29|0),($28|0),($25|0))|0;
  $30 = ((($4)) + 48|0);
  HEAP32[$30>>2] = 0;
  $31 = HEAP32[$17>>2]|0;
  $32 = ((($4)) + 44|0);
  HEAP32[$32>>2] = $31;
  $$053 = 0;
  return ($$053|0);
 }
 $33 = ((($4)) + 48|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($25) - ($34))|0;
 $36 = ($35>>>0)>($2>>>0);
 $$ = $36 ? $2 : $35;
 $37 = (($29) + ($34)|0);
 $38 = (0 - ($2))|0;
 $39 = (($1) + ($38)|0);
 _memcpy(($37|0),($39|0),($$|0))|0;
 $40 = (($2) - ($$))|0;
 $41 = ($40|0)==(0);
 if (!($41)) {
  $42 = HEAP32[$5>>2]|0;
  $43 = (0 - ($40))|0;
  $44 = (($1) + ($43)|0);
  _memcpy(($42|0),($44|0),($40|0))|0;
  HEAP32[$33>>2] = $40;
  $45 = HEAP32[$17>>2]|0;
  $46 = ((($4)) + 44|0);
  HEAP32[$46>>2] = $45;
  $$053 = 0;
  return ($$053|0);
 }
 $47 = HEAP32[$33>>2]|0;
 $48 = (($47) + ($$))|0;
 $49 = HEAP32[$17>>2]|0;
 $50 = ($48|0)==($49|0);
 $$54 = $50 ? 0 : $48;
 HEAP32[$33>>2] = $$54;
 $51 = ((($4)) + 44|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52>>>0)<($49>>>0);
 if (!($53)) {
  $$053 = 0;
  return ($$053|0);
 }
 $54 = (($52) + ($$))|0;
 HEAP32[$51>>2] = $54;
 $$053 = 0;
 return ($$053|0);
}
function _inflateEnd($0) {
 $0 = $0|0;
 var $$0 = 0, $$pre = 0, $$pre13 = 0, $$pre14 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = -2;
  return ($$0|0);
 }
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = -2;
  return ($$0|0);
 }
 $5 = ((($0)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = -2;
  return ($$0|0);
 }
 $8 = ((($3)) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 $$pre14 = ((($0)) + 40|0);
 if ($10) {
  $13 = $6;$14 = $3;
 } else {
  $11 = HEAP32[$$pre14>>2]|0;
  FUNCTION_TABLE_vii[$6 & 127]($11,$9);
  $$pre = HEAP32[$5>>2]|0;
  $$pre13 = HEAP32[$2>>2]|0;
  $13 = $$pre;$14 = $$pre13;
 }
 $12 = HEAP32[$$pre14>>2]|0;
 FUNCTION_TABLE_vii[$13 & 127]($12,$14);
 HEAP32[$2>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function _inflate_table($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0217247252$ph = 0, $$0218246253$ph = 0, $$0219$ph = 0, $$0219$ph257 = 0, $$0220 = 0, $$0221$ph = 0, $$0222 = 0, $$0223 = 0, $$0224 = 0, $$0224$ph = 0, $$0225$ph256 = 0, $$0228$ph = 0, $$0230$ph = 0, $$0234$ = 0, $$0234$324 = 0, $$0234$327 = 0, $$0234291$lcssa$ph = 0, $$0234291$lcssa325 = 0, $$0235$$0234$ = 0;
 var $$0235$$0234$$$0228 = 0, $$0235$lcssa = 0, $$0235284 = 0, $$0236292 = 0, $$0248251$ph = 0, $$1227274 = 0, $$1231$lcssa = 0, $$1231273 = 0, $$1237277 = 0, $$2 = 0, $$2$ph = 0, $$3 = 0, $$3$ph = 0, $$4 = 0, $$ph = 0, $$ph254 = 0, $$ph254$in = 0, $$ph255 = 0, $$ph322 = 0, $$ph323 = 0;
 var $$phi$trans$insert = 0, $$pre = 0, $$sink$sink = 0, $$sroa$0$0 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$$sroa_idx31 = 0, $$sroa$11$0$$sroa_idx = 0, $$sroa$11$0$$sroa_idx33 = 0, $$sroa$11$0$$sroa_idx35 = 0, $$sroa$11$0$$sroa_idx37 = 0, $$sroa$14$0$$sroa_idx39 = 0, $$sroa$14$0$$sroa_idx40 = 0, $$sroa$14$0$$sroa_idx42 = 0, $$sroa$14$0$$sroa_idx44 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $exitcond = 0, $exitcond309 = 0, $fold = 0, $fold312 = 0, $fold313 = 0, $fold314 = 0, $fold315 = 0, $fold316 = 0, $fold317 = 0, $fold318 = 0, $fold319 = 0, $fold320 = 0, $fold321 = 0, $not$ = 0, $or$cond = 0, $or$cond11 = 0, $or$cond243 = 0, $or$cond5 = 0;
 var $or$cond9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 32|0;
 $7 = sp;
 dest=$6; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $8 = ($2|0)==(0);
 if ($8) {
  $9 = HEAP32[$4>>2]|0;
  $22 = $9;
  label = 5;
 } else {
  $$0236292 = 0;
  while(1) {
   $10 = (($1) + ($$0236292<<1)|0);
   $11 = HEAP16[$10>>1]|0;
   $12 = $11&65535;
   $13 = (($6) + ($12<<1)|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = (($14) + 1)<<16>>16;
   HEAP16[$13>>1] = $15;
   $16 = (($$0236292) + 1)|0;
   $exitcond309 = ($16|0)==($2|0);
   if ($exitcond309) {
    break;
   } else {
    $$0236292 = $16;
   }
  }
  $$phi$trans$insert = ((($6)) + 30|0);
  $$pre = HEAP16[$$phi$trans$insert>>1]|0;
  $17 = HEAP32[$4>>2]|0;
  $18 = ($$pre<<16>>16)==(0);
  if ($18) {
   $22 = $17;
   label = 5;
  } else {
   $$0234291$lcssa$ph = 15;$$ph322 = $17;$$ph323 = $$pre;
   label = 7;
  }
 }
 do {
  if ((label|0) == 5) {
   $19 = ((($6)) + 28|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = ($20<<16>>16)==(0);
   if ($21) {
    $251 = ((($6)) + 26|0);
    $252 = HEAP16[$251>>1]|0;
    $253 = ($252<<16>>16)==(0);
    if ($253) {
     $254 = ((($6)) + 24|0);
     $255 = HEAP16[$254>>1]|0;
     $256 = ($255<<16>>16)==(0);
     if ($256) {
      $257 = ((($6)) + 22|0);
      $258 = HEAP16[$257>>1]|0;
      $259 = ($258<<16>>16)==(0);
      if ($259) {
       $260 = ((($6)) + 20|0);
       $261 = HEAP16[$260>>1]|0;
       $262 = ($261<<16>>16)==(0);
       if ($262) {
        $263 = ((($6)) + 18|0);
        $264 = HEAP16[$263>>1]|0;
        $265 = ($264<<16>>16)==(0);
        if ($265) {
         $266 = ((($6)) + 16|0);
         $267 = HEAP16[$266>>1]|0;
         $268 = ($267<<16>>16)==(0);
         if ($268) {
          $269 = ((($6)) + 14|0);
          $270 = HEAP16[$269>>1]|0;
          $271 = ($270<<16>>16)==(0);
          if ($271) {
           $272 = ((($6)) + 12|0);
           $273 = HEAP16[$272>>1]|0;
           $274 = ($273<<16>>16)==(0);
           if ($274) {
            $275 = ((($6)) + 10|0);
            $276 = HEAP16[$275>>1]|0;
            $277 = ($276<<16>>16)==(0);
            if ($277) {
             $278 = ((($6)) + 8|0);
             $279 = HEAP16[$278>>1]|0;
             $280 = ($279<<16>>16)==(0);
             if ($280) {
              $281 = ((($6)) + 6|0);
              $282 = HEAP16[$281>>1]|0;
              $283 = ($282<<16>>16)==(0);
              if ($283) {
               $284 = ((($6)) + 4|0);
               $285 = HEAP16[$284>>1]|0;
               $286 = ($285<<16>>16)==(0);
               if ($286) {
                $287 = ((($6)) + 2|0);
                $288 = HEAP16[$287>>1]|0;
                $289 = ($288<<16>>16)==(0);
                if (!($289)) {
                 $not$ = ($22|0)!=(0);
                 $$0234$ = $not$&1;
                 $$0234$327 = $$0234$;$$0234291$lcssa325 = 1;$$0235$lcssa = 1;$247 = 0;
                 break;
                }
                $290 = HEAP32[$3>>2]|0;
                $291 = ((($290)) + 4|0);
                HEAP32[$3>>2] = $291;
                HEAP8[$290>>0] = 64;
                $$sroa$11$0$$sroa_idx35 = ((($290)) + 1|0);
                HEAP8[$$sroa$11$0$$sroa_idx35>>0] = 1;
                $$sroa$14$0$$sroa_idx42 = ((($290)) + 2|0);
                HEAP16[$$sroa$14$0$$sroa_idx42>>1] = 0;
                $292 = HEAP32[$3>>2]|0;
                $293 = ((($292)) + 4|0);
                HEAP32[$3>>2] = $293;
                HEAP8[$292>>0] = 64;
                $$sroa$11$0$$sroa_idx33 = ((($292)) + 1|0);
                HEAP8[$$sroa$11$0$$sroa_idx33>>0] = 1;
                $$sroa$14$0$$sroa_idx40 = ((($292)) + 2|0);
                HEAP16[$$sroa$14$0$$sroa_idx40>>1] = 0;
                HEAP32[$4>>2] = 1;
                $$0220 = 0;
                STACKTOP = sp;return ($$0220|0);
               } else {
                $$0234291$lcssa$ph = 2;$$ph322 = $22;$$ph323 = 0;
                label = 7;
               }
              } else {
               $$0234291$lcssa$ph = 3;$$ph322 = $22;$$ph323 = 0;
               label = 7;
              }
             } else {
              $$0234291$lcssa$ph = 4;$$ph322 = $22;$$ph323 = 0;
              label = 7;
             }
            } else {
             $$0234291$lcssa$ph = 5;$$ph322 = $22;$$ph323 = 0;
             label = 7;
            }
           } else {
            $$0234291$lcssa$ph = 6;$$ph322 = $22;$$ph323 = 0;
            label = 7;
           }
          } else {
           $$0234291$lcssa$ph = 7;$$ph322 = $22;$$ph323 = 0;
           label = 7;
          }
         } else {
          $$0234291$lcssa$ph = 8;$$ph322 = $22;$$ph323 = 0;
          label = 7;
         }
        } else {
         $$0234291$lcssa$ph = 9;$$ph322 = $22;$$ph323 = 0;
         label = 7;
        }
       } else {
        $$0234291$lcssa$ph = 10;$$ph322 = $22;$$ph323 = 0;
        label = 7;
       }
      } else {
       $$0234291$lcssa$ph = 11;$$ph322 = $22;$$ph323 = 0;
       label = 7;
      }
     } else {
      $$0234291$lcssa$ph = 12;$$ph322 = $22;$$ph323 = 0;
      label = 7;
     }
    } else {
     $$0234291$lcssa$ph = 13;$$ph322 = $22;$$ph323 = 0;
     label = 7;
    }
   } else {
    $$0234291$lcssa$ph = 14;$$ph322 = $22;$$ph323 = 0;
    label = 7;
   }
  }
 } while(0);
 L25: do {
  if ((label|0) == 7) {
   $23 = ($$ph322>>>0)>($$0234291$lcssa$ph>>>0);
   $$0234$324 = $23 ? $$0234291$lcssa$ph : $$ph322;
   $$0235284 = 1;
   while(1) {
    $24 = (($6) + ($$0235284<<1)|0);
    $25 = HEAP16[$24>>1]|0;
    $26 = ($25<<16>>16)==(0);
    if (!($26)) {
     $$0234$327 = $$0234$324;$$0234291$lcssa325 = $$0234291$lcssa$ph;$$0235$lcssa = $$0235284;$247 = $$ph323;
     break L25;
    }
    $27 = (($$0235284) + 1)|0;
    $28 = ($27>>>0)<($$0234291$lcssa$ph>>>0);
    if ($28) {
     $$0235284 = $27;
    } else {
     $$0234$327 = $$0234$324;$$0234291$lcssa325 = $$0234291$lcssa$ph;$$0235$lcssa = $27;$247 = $$ph323;
     break;
    }
   }
  }
 } while(0);
 $29 = ($$0234$327>>>0)<($$0235$lcssa>>>0);
 $$0235$$0234$ = $29 ? $$0235$lcssa : $$0234$327;
 $30 = ((($6)) + 2|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = (2 - ($32))|0;
 $34 = ($33|0)<(0);
 if ($34) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $35 = $33 << 1;
 $36 = ((($6)) + 4|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $37&65535;
 $39 = (($35) - ($38))|0;
 $40 = ($39|0)<(0);
 if ($40) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $185 = $39 << 1;
 $186 = ((($6)) + 6|0);
 $187 = HEAP16[$186>>1]|0;
 $49 = $187&65535;
 $188 = (($185) - ($49))|0;
 $189 = ($188|0)<(0);
 if ($189) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $190 = $188 << 1;
 $191 = ((($6)) + 8|0);
 $192 = HEAP16[$191>>1]|0;
 $53 = $192&65535;
 $193 = (($190) - ($53))|0;
 $194 = ($193|0)<(0);
 if ($194) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $195 = $193 << 1;
 $196 = ((($6)) + 10|0);
 $197 = HEAP16[$196>>1]|0;
 $57 = $197&65535;
 $198 = (($195) - ($57))|0;
 $199 = ($198|0)<(0);
 if ($199) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $200 = $198 << 1;
 $201 = ((($6)) + 12|0);
 $202 = HEAP16[$201>>1]|0;
 $61 = $202&65535;
 $203 = (($200) - ($61))|0;
 $204 = ($203|0)<(0);
 if ($204) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $205 = $203 << 1;
 $206 = ((($6)) + 14|0);
 $207 = HEAP16[$206>>1]|0;
 $65 = $207&65535;
 $208 = (($205) - ($65))|0;
 $209 = ($208|0)<(0);
 if ($209) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $210 = $208 << 1;
 $211 = ((($6)) + 16|0);
 $212 = HEAP16[$211>>1]|0;
 $69 = $212&65535;
 $213 = (($210) - ($69))|0;
 $214 = ($213|0)<(0);
 if ($214) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $215 = $213 << 1;
 $216 = ((($6)) + 18|0);
 $217 = HEAP16[$216>>1]|0;
 $73 = $217&65535;
 $218 = (($215) - ($73))|0;
 $219 = ($218|0)<(0);
 if ($219) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $220 = $218 << 1;
 $221 = ((($6)) + 20|0);
 $222 = HEAP16[$221>>1]|0;
 $77 = $222&65535;
 $223 = (($220) - ($77))|0;
 $224 = ($223|0)<(0);
 if ($224) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $225 = $223 << 1;
 $226 = ((($6)) + 22|0);
 $227 = HEAP16[$226>>1]|0;
 $81 = $227&65535;
 $228 = (($225) - ($81))|0;
 $229 = ($228|0)<(0);
 if ($229) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $230 = $228 << 1;
 $231 = ((($6)) + 24|0);
 $232 = HEAP16[$231>>1]|0;
 $85 = $232&65535;
 $233 = (($230) - ($85))|0;
 $234 = ($233|0)<(0);
 if ($234) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $235 = $233 << 1;
 $236 = ((($6)) + 26|0);
 $237 = HEAP16[$236>>1]|0;
 $89 = $237&65535;
 $238 = (($235) - ($89))|0;
 $239 = ($238|0)<(0);
 if ($239) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $240 = $238 << 1;
 $241 = ((($6)) + 28|0);
 $242 = HEAP16[$241>>1]|0;
 $93 = $242&65535;
 $243 = (($240) - ($93))|0;
 $244 = ($243|0)<(0);
 if ($244) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $245 = $243 << 1;
 $246 = $247&65535;
 $248 = (($245) - ($246))|0;
 $249 = ($248|0)<(0);
 if ($249) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $250 = ($248|0)==(0);
 if (!($250)) {
  $41 = ($0|0)==(0);
  $42 = ($$0234291$lcssa325|0)!=(1);
  $or$cond = $41 | $42;
  if ($or$cond) {
   $$0220 = -1;
   STACKTOP = sp;return ($$0220|0);
  }
 }
 $43 = ((($7)) + 2|0);
 HEAP16[$43>>1] = 0;
 $44 = ((($7)) + 4|0);
 HEAP16[$44>>1] = $31;
 $45 = (($38) + ($32))|0;
 $46 = $45&65535;
 $47 = ((($7)) + 6|0);
 HEAP16[$47>>1] = $46;
 $48 = (($49) + ($45))|0;
 $50 = $48&65535;
 $51 = ((($7)) + 8|0);
 HEAP16[$51>>1] = $50;
 $fold = (($45) + ($49))|0;
 $52 = (($53) + ($fold))|0;
 $54 = $52&65535;
 $55 = ((($7)) + 10|0);
 HEAP16[$55>>1] = $54;
 $fold312 = (($fold) + ($53))|0;
 $56 = (($57) + ($fold312))|0;
 $58 = $56&65535;
 $59 = ((($7)) + 12|0);
 HEAP16[$59>>1] = $58;
 $fold313 = (($fold312) + ($57))|0;
 $60 = (($61) + ($fold313))|0;
 $62 = $60&65535;
 $63 = ((($7)) + 14|0);
 HEAP16[$63>>1] = $62;
 $fold314 = (($fold313) + ($61))|0;
 $64 = (($65) + ($fold314))|0;
 $66 = $64&65535;
 $67 = ((($7)) + 16|0);
 HEAP16[$67>>1] = $66;
 $fold315 = (($fold314) + ($65))|0;
 $68 = (($69) + ($fold315))|0;
 $70 = $68&65535;
 $71 = ((($7)) + 18|0);
 HEAP16[$71>>1] = $70;
 $fold316 = (($fold315) + ($69))|0;
 $72 = (($73) + ($fold316))|0;
 $74 = $72&65535;
 $75 = ((($7)) + 20|0);
 HEAP16[$75>>1] = $74;
 $fold317 = (($fold316) + ($73))|0;
 $76 = (($77) + ($fold317))|0;
 $78 = $76&65535;
 $79 = ((($7)) + 22|0);
 HEAP16[$79>>1] = $78;
 $fold318 = (($fold317) + ($77))|0;
 $80 = (($81) + ($fold318))|0;
 $82 = $80&65535;
 $83 = ((($7)) + 24|0);
 HEAP16[$83>>1] = $82;
 $fold319 = (($fold318) + ($81))|0;
 $84 = (($85) + ($fold319))|0;
 $86 = $84&65535;
 $87 = ((($7)) + 26|0);
 HEAP16[$87>>1] = $86;
 $fold320 = (($fold319) + ($85))|0;
 $88 = (($89) + ($fold320))|0;
 $90 = $88&65535;
 $91 = ((($7)) + 28|0);
 HEAP16[$91>>1] = $90;
 $fold321 = (($fold320) + ($89))|0;
 $92 = (($93) + ($fold321))|0;
 $94 = $92&65535;
 $95 = ((($7)) + 30|0);
 HEAP16[$95>>1] = $94;
 if (!($8)) {
  $$1237277 = 0;
  while(1) {
   $96 = (($1) + ($$1237277<<1)|0);
   $97 = HEAP16[$96>>1]|0;
   $98 = ($97<<16>>16)==(0);
   if (!($98)) {
    $99 = $97&65535;
    $100 = $$1237277&65535;
    $101 = (($7) + ($99<<1)|0);
    $102 = HEAP16[$101>>1]|0;
    $103 = (($102) + 1)<<16>>16;
    HEAP16[$101>>1] = $103;
    $104 = $102&65535;
    $105 = (($5) + ($104<<1)|0);
    HEAP16[$105>>1] = $100;
   }
   $106 = (($$1237277) + 1)|0;
   $exitcond = ($106|0)==($2|0);
   if ($exitcond) {
    break;
   } else {
    $$1237277 = $106;
   }
  }
 }
 switch ($0|0) {
 case 0:  {
  $$0217247252$ph = $5;$$0218246253$ph = $5;$$0248251$ph = 19;$$ph = 0;$$ph255 = 0;
  break;
 }
 case 1:  {
  $107 = ($$0235$$0234$>>>0)>(9);
  if ($107) {
   $$0220 = 1;
   STACKTOP = sp;return ($$0220|0);
  } else {
   $$0217247252$ph = (12050);$$0218246253$ph = (11924);$$0248251$ph = 256;$$ph = 0;$$ph255 = 1;
  }
  break;
 }
 default: {
  $108 = ($$0235$$0234$>>>0)>(9);
  $109 = ($0|0)==(2);
  $or$cond5 = $109 & $108;
  if ($or$cond5) {
   $$0220 = 1;
   STACKTOP = sp;return ($$0220|0);
  } else {
   $$0217247252$ph = 12500;$$0218246253$ph = 12374;$$0248251$ph = -1;$$ph = $109;$$ph255 = 0;
  }
 }
 }
 $$ph254$in = 1 << $$0235$$0234$;
 $$0219$ph = HEAP32[$3>>2]|0;
 $$ph254 = (($$ph254$in) + -1)|0;
 $110 = $$0235$$0234$&255;
 $$0219$ph257 = $$0219$ph;$$0221$ph = -1;$$0224$ph = 0;$$0225$ph256 = $$ph254$in;$$0228$ph = 0;$$0230$ph = $$0235$$0234$;$$2$ph = 0;$$3$ph = $$0235$lcssa;
 L93: while(1) {
  $111 = 1 << $$0230$ph;
  $$0224 = $$0224$ph;$$2 = $$2$ph;$$3 = $$3$ph;
  while(1) {
   $112 = (($$3) - ($$0228$ph))|0;
   $113 = $112&255;
   $114 = (($5) + ($$2<<1)|0);
   $115 = HEAP16[$114>>1]|0;
   $116 = $115&65535;
   $117 = ($116|0)<($$0248251$ph|0);
   do {
    if ($117) {
     $$sink$sink = $115;$$sroa$0$0 = 0;
    } else {
     $118 = ($116|0)>($$0248251$ph|0);
     if (!($118)) {
      $$sink$sink = 0;$$sroa$0$0 = 96;
      break;
     }
     $119 = (($$0218246253$ph) + ($116<<1)|0);
     $120 = (($$0217247252$ph) + ($116<<1)|0);
     $121 = HEAP16[$120>>1]|0;
     $122 = $121&255;
     $123 = HEAP16[$119>>1]|0;
     $$sink$sink = $123;$$sroa$0$0 = $122;
    }
   } while(0);
   $124 = 1 << $112;
   $125 = $$0224 >>> $$0228$ph;
   $$0222 = $111;
   while(1) {
    $126 = (($$0222) - ($124))|0;
    $127 = (($126) + ($125))|0;
    $$sroa$0$0$$sroa_idx = (($$0219$ph257) + ($127<<2)|0);
    HEAP8[$$sroa$0$0$$sroa_idx>>0] = $$sroa$0$0;
    $$sroa$11$0$$sroa_idx = (((($$0219$ph257) + ($127<<2)|0)) + 1|0);
    HEAP8[$$sroa$11$0$$sroa_idx>>0] = $113;
    $$sroa$14$0$$sroa_idx39 = (((($$0219$ph257) + ($127<<2)|0)) + 2|0);
    HEAP16[$$sroa$14$0$$sroa_idx39>>1] = $$sink$sink;
    $128 = ($126|0)==(0);
    if ($128) {
     break;
    } else {
     $$0222 = $126;
    }
   }
   $129 = (($$3) + -1)|0;
   $130 = 1 << $129;
   $$0223 = $130;
   while(1) {
    $131 = $$0223 & $$0224;
    $132 = ($131|0)==(0);
    $133 = $$0223 >>> 1;
    if ($132) {
     break;
    } else {
     $$0223 = $133;
    }
   }
   $134 = ($$0223|0)==(0);
   $135 = (($$0223) + -1)|0;
   $136 = $135 & $$0224;
   $137 = (($136) + ($$0223))|0;
   $$ = $134 ? 0 : $137;
   $138 = (($$2) + 1)|0;
   $139 = (($6) + ($$3<<1)|0);
   $140 = HEAP16[$139>>1]|0;
   $141 = (($140) + -1)<<16>>16;
   HEAP16[$139>>1] = $141;
   $142 = ($141<<16>>16)==(0);
   if ($142) {
    $143 = ($$3|0)==($$0234291$lcssa325|0);
    if ($143) {
     break L93;
    }
    $144 = (($5) + ($138<<1)|0);
    $145 = HEAP16[$144>>1]|0;
    $146 = $145&65535;
    $147 = (($1) + ($146<<1)|0);
    $148 = HEAP16[$147>>1]|0;
    $149 = $148&65535;
    $$4 = $149;
   } else {
    $$4 = $$3;
   }
   $150 = ($$4>>>0)>($$0235$$0234$>>>0);
   if (!($150)) {
    $$0224 = $$;$$2 = $138;$$3 = $$4;
    continue;
   }
   $151 = $$ & $$ph254;
   $152 = ($151|0)==($$0221$ph|0);
   if ($152) {
    $$0224 = $$;$$2 = $138;$$3 = $$4;
   } else {
    break;
   }
  }
  $153 = ($$0228$ph|0)==(0);
  $$0235$$0234$$$0228 = $153 ? $$0235$$0234$ : $$0228$ph;
  $154 = (($$0219$ph257) + ($111<<2)|0);
  $155 = (($$4) - ($$0235$$0234$$$0228))|0;
  $156 = ($$4>>>0)<($$0234291$lcssa325>>>0);
  L113: do {
   if ($156) {
    $157 = 1 << $155;
    $$1227274 = $157;$$1231273 = $155;$159 = $$4;
    while(1) {
     $158 = (($6) + ($159<<1)|0);
     $160 = HEAP16[$158>>1]|0;
     $161 = $160&65535;
     $162 = (($$1227274) - ($161))|0;
     $163 = ($162|0)<(1);
     if ($163) {
      $$1231$lcssa = $$1231273;
      break L113;
     }
     $164 = (($$1231273) + 1)|0;
     $165 = $162 << 1;
     $166 = (($164) + ($$0235$$0234$$$0228))|0;
     $167 = ($166>>>0)<($$0234291$lcssa325>>>0);
     if ($167) {
      $$1227274 = $165;$$1231273 = $164;$159 = $166;
     } else {
      $$1231$lcssa = $164;
      break;
     }
    }
   } else {
    $$1231$lcssa = $155;
   }
  } while(0);
  $168 = 1 << $$1231$lcssa;
  $169 = (($168) + ($$0225$ph256))|0;
  $170 = ($169>>>0)>(852);
  $or$cond9 = $$ph255 & $170;
  $171 = ($169>>>0)>(592);
  $or$cond11 = $$ph & $171;
  $or$cond243 = $or$cond9 | $or$cond11;
  if ($or$cond243) {
   $$0220 = 1;
   label = 43;
   break;
  }
  $172 = $$1231$lcssa&255;
  $173 = HEAP32[$3>>2]|0;
  $174 = (($173) + ($151<<2)|0);
  HEAP8[$174>>0] = $172;
  $175 = (((($173) + ($151<<2)|0)) + 1|0);
  HEAP8[$175>>0] = $110;
  $176 = $154;
  $177 = $173;
  $178 = (($176) - ($177))|0;
  $179 = $178 >>> 2;
  $180 = $179&65535;
  $181 = (((($173) + ($151<<2)|0)) + 2|0);
  HEAP16[$181>>1] = $180;
  $$0219$ph257 = $154;$$0221$ph = $151;$$0224$ph = $$;$$0225$ph256 = $169;$$0228$ph = $$0235$$0234$$$0228;$$0230$ph = $$1231$lcssa;$$2$ph = $138;$$3$ph = $$4;
 }
 if ((label|0) == 43) {
  STACKTOP = sp;return ($$0220|0);
 }
 $182 = ($$|0)==(0);
 if (!($182)) {
  $$sroa$14$0$$sroa_idx44 = (((($$0219$ph257) + ($$<<2)|0)) + 2|0);
  $$sroa$11$0$$sroa_idx37 = (((($$0219$ph257) + ($$<<2)|0)) + 1|0);
  $$sroa$0$0$$sroa_idx31 = (($$0219$ph257) + ($$<<2)|0);
  HEAP8[$$sroa$0$0$$sroa_idx31>>0] = 64;
  HEAP8[$$sroa$11$0$$sroa_idx37>>0] = $113;
  HEAP16[$$sroa$14$0$$sroa_idx44>>1] = 0;
 }
 $183 = HEAP32[$3>>2]|0;
 $184 = (($183) + ($$0225$ph256<<2)|0);
 HEAP32[$3>>2] = $184;
 HEAP32[$4>>2] = $$0235$$0234$;
 $$0220 = 0;
 STACKTOP = sp;return ($$0220|0);
}
function __tr_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 148|0);
 $2 = ((($0)) + 2840|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 2848|0);
 HEAP32[$3>>2] = 8740;
 $4 = ((($0)) + 2440|0);
 $5 = ((($0)) + 2852|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($0)) + 2860|0);
 HEAP32[$6>>2] = 8760;
 $7 = ((($0)) + 2684|0);
 $8 = ((($0)) + 2864|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($0)) + 2872|0);
 HEAP32[$9>>2] = 8780;
 $10 = ((($0)) + 5816|0);
 HEAP16[$10>>1] = 0;
 $11 = ((($0)) + 5820|0);
 HEAP32[$11>>2] = 0;
 _init_block($0);
 return;
}
function _init_block($0) {
 $0 = $0|0;
 var $$019 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$019 = 0;
 while(1) {
  $1 = (((($0)) + 148|0) + ($$019<<2)|0);
  HEAP16[$1>>1] = 0;
  $2 = (($$019) + 1)|0;
  $exitcond = ($2|0)==(286);
  if ($exitcond) {
   break;
  } else {
   $$019 = $2;
  }
 }
 $3 = ((($0)) + 2440|0);
 HEAP16[$3>>1] = 0;
 $4 = ((($0)) + 2444|0);
 HEAP16[$4>>1] = 0;
 $5 = ((($0)) + 2448|0);
 HEAP16[$5>>1] = 0;
 $6 = ((($0)) + 2452|0);
 HEAP16[$6>>1] = 0;
 $7 = ((($0)) + 2456|0);
 HEAP16[$7>>1] = 0;
 $8 = ((($0)) + 2460|0);
 HEAP16[$8>>1] = 0;
 $9 = ((($0)) + 2464|0);
 HEAP16[$9>>1] = 0;
 $10 = ((($0)) + 2468|0);
 HEAP16[$10>>1] = 0;
 $11 = ((($0)) + 2472|0);
 HEAP16[$11>>1] = 0;
 $12 = ((($0)) + 2476|0);
 HEAP16[$12>>1] = 0;
 $13 = ((($0)) + 2480|0);
 HEAP16[$13>>1] = 0;
 $14 = ((($0)) + 2484|0);
 HEAP16[$14>>1] = 0;
 $15 = ((($0)) + 2488|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($0)) + 2492|0);
 HEAP16[$16>>1] = 0;
 $17 = ((($0)) + 2496|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($0)) + 2500|0);
 HEAP16[$18>>1] = 0;
 $19 = ((($0)) + 2504|0);
 HEAP16[$19>>1] = 0;
 $20 = ((($0)) + 2508|0);
 HEAP16[$20>>1] = 0;
 $21 = ((($0)) + 2512|0);
 HEAP16[$21>>1] = 0;
 $22 = ((($0)) + 2516|0);
 HEAP16[$22>>1] = 0;
 $23 = ((($0)) + 2520|0);
 HEAP16[$23>>1] = 0;
 $24 = ((($0)) + 2524|0);
 HEAP16[$24>>1] = 0;
 $25 = ((($0)) + 2528|0);
 HEAP16[$25>>1] = 0;
 $26 = ((($0)) + 2532|0);
 HEAP16[$26>>1] = 0;
 $27 = ((($0)) + 2536|0);
 HEAP16[$27>>1] = 0;
 $28 = ((($0)) + 2540|0);
 HEAP16[$28>>1] = 0;
 $29 = ((($0)) + 2544|0);
 HEAP16[$29>>1] = 0;
 $30 = ((($0)) + 2548|0);
 HEAP16[$30>>1] = 0;
 $31 = ((($0)) + 2552|0);
 HEAP16[$31>>1] = 0;
 $32 = ((($0)) + 2556|0);
 HEAP16[$32>>1] = 0;
 $33 = ((($0)) + 2684|0);
 HEAP16[$33>>1] = 0;
 $34 = ((($0)) + 2688|0);
 HEAP16[$34>>1] = 0;
 $35 = ((($0)) + 2692|0);
 HEAP16[$35>>1] = 0;
 $36 = ((($0)) + 2696|0);
 HEAP16[$36>>1] = 0;
 $37 = ((($0)) + 2700|0);
 HEAP16[$37>>1] = 0;
 $38 = ((($0)) + 2704|0);
 HEAP16[$38>>1] = 0;
 $39 = ((($0)) + 2708|0);
 HEAP16[$39>>1] = 0;
 $40 = ((($0)) + 2712|0);
 HEAP16[$40>>1] = 0;
 $41 = ((($0)) + 2716|0);
 HEAP16[$41>>1] = 0;
 $42 = ((($0)) + 2720|0);
 HEAP16[$42>>1] = 0;
 $43 = ((($0)) + 2724|0);
 HEAP16[$43>>1] = 0;
 $44 = ((($0)) + 2728|0);
 HEAP16[$44>>1] = 0;
 $45 = ((($0)) + 2732|0);
 HEAP16[$45>>1] = 0;
 $46 = ((($0)) + 2736|0);
 HEAP16[$46>>1] = 0;
 $47 = ((($0)) + 2740|0);
 HEAP16[$47>>1] = 0;
 $48 = ((($0)) + 2744|0);
 HEAP16[$48>>1] = 0;
 $49 = ((($0)) + 2748|0);
 HEAP16[$49>>1] = 0;
 $50 = ((($0)) + 2752|0);
 HEAP16[$50>>1] = 0;
 $51 = ((($0)) + 2756|0);
 HEAP16[$51>>1] = 0;
 $52 = ((($0)) + 1172|0);
 HEAP16[$52>>1] = 1;
 $53 = ((($0)) + 5804|0);
 HEAP32[$53>>2] = 0;
 $54 = ((($0)) + 5800|0);
 HEAP32[$54>>2] = 0;
 $55 = ((($0)) + 5808|0);
 HEAP32[$55>>2] = 0;
 $56 = ((($0)) + 5792|0);
 HEAP32[$56>>2] = 0;
 return;
}
function __tr_stored_block($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0181$i = 0, $$02$i = 0, $$off0 = 0, $$off0$in = 0, $$sink$i$i = 0, $$sink1$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 5820|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(13);
 $7 = $3 & 65535;
 $8 = $7 << $5;
 $9 = ((($0)) + 5816|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = $11 | $8;
 $13 = $12&65535;
 HEAP16[$9>>1] = $13;
 if ($6) {
  $14 = $12&255;
  $15 = ((($0)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($0)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[$17>>2] = $19;
  $20 = (($16) + ($18)|0);
  HEAP8[$20>>0] = $14;
  $21 = HEAP16[$9>>1]|0;
  $22 = ($21&65535) >>> 8;
  $23 = $22&255;
  $24 = HEAP32[$15>>2]|0;
  $25 = HEAP32[$17>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$17>>2] = $26;
  $27 = (($24) + ($25)|0);
  HEAP8[$27>>0] = $23;
  $28 = HEAP32[$4>>2]|0;
  $29 = (16 - ($28))|0;
  $30 = $7 >>> $29;
  $31 = $30&65535;
  HEAP16[$9>>1] = $31;
  $32 = (($28) + -13)|0;
  $$off0$in = $30;$storemerge = $32;
 } else {
  $33 = (($5) + 3)|0;
  $$off0$in = $12;$storemerge = $33;
 }
 $$off0 = $$off0$in&255;
 HEAP32[$4>>2] = $storemerge;
 $34 = ($storemerge|0)>(8);
 if ($34) {
  $35 = ((($0)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($0)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 1)|0;
  HEAP32[$37>>2] = $39;
  $40 = (($36) + ($38)|0);
  HEAP8[$40>>0] = $$off0;
  $41 = HEAP16[$9>>1]|0;
  $42 = ($41&65535) >>> 8;
  $43 = $42&255;
  $44 = HEAP32[$35>>2]|0;
  $45 = HEAP32[$37>>2]|0;
  $46 = (($45) + 1)|0;
  HEAP32[$37>>2] = $46;
  $47 = (($44) + ($45)|0);
  $$sink$i$i = $43;$$sink1$i$i = $47;
  label = 8;
 } else {
  $48 = ($storemerge|0)>(0);
  if ($48) {
   $49 = ((($0)) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($0)) + 20|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + 1)|0;
   HEAP32[$51>>2] = $53;
   $54 = (($50) + ($52)|0);
   $$sink$i$i = $$off0;$$sink1$i$i = $54;
   label = 8;
  }
 }
 if ((label|0) == 8) {
  HEAP8[$$sink1$i$i>>0] = $$sink$i$i;
 }
 HEAP16[$9>>1] = 0;
 HEAP32[$4>>2] = 0;
 $55 = $2&255;
 $56 = ((($0)) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($0)) + 20|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (($59) + 1)|0;
 HEAP32[$58>>2] = $60;
 $61 = (($57) + ($59)|0);
 HEAP8[$61>>0] = $55;
 $62 = $2 >>> 8;
 $63 = $62&255;
 $64 = HEAP32[$56>>2]|0;
 $65 = HEAP32[$58>>2]|0;
 $66 = (($65) + 1)|0;
 HEAP32[$58>>2] = $66;
 $67 = (($64) + ($65)|0);
 HEAP8[$67>>0] = $63;
 $68 = $2 & 65535;
 $69 = $68 ^ 65535;
 $70 = $69&255;
 $71 = HEAP32[$56>>2]|0;
 $72 = HEAP32[$58>>2]|0;
 $73 = (($72) + 1)|0;
 HEAP32[$58>>2] = $73;
 $74 = (($71) + ($72)|0);
 HEAP8[$74>>0] = $70;
 $75 = $69 >>> 8;
 $76 = $75&255;
 $77 = HEAP32[$56>>2]|0;
 $78 = HEAP32[$58>>2]|0;
 $79 = (($78) + 1)|0;
 HEAP32[$58>>2] = $79;
 $80 = (($77) + ($78)|0);
 HEAP8[$80>>0] = $76;
 $81 = ($2|0)==(0);
 if ($81) {
  return;
 } else {
  $$0181$i = $2;$$02$i = $1;
 }
 while(1) {
  $82 = (($$0181$i) + -1)|0;
  $83 = ((($$02$i)) + 1|0);
  $84 = HEAP8[$$02$i>>0]|0;
  $85 = HEAP32[$56>>2]|0;
  $86 = HEAP32[$58>>2]|0;
  $87 = (($86) + 1)|0;
  HEAP32[$58>>2] = $87;
  $88 = (($85) + ($86)|0);
  HEAP8[$88>>0] = $84;
  $89 = ($82|0)==(0);
  if ($89) {
   break;
  } else {
   $$0181$i = $82;$$02$i = $83;
  }
 }
 return;
}
function __tr_flush_bits($0) {
 $0 = $0|0;
 var $$sink$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 5820|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(16);
 do {
  if ($3) {
   $4 = ((($0)) + 5816|0);
   $5 = HEAP16[$4>>1]|0;
   $6 = $5&255;
   $7 = ((($0)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + 1)|0;
   HEAP32[$9>>2] = $11;
   $12 = (($8) + ($10)|0);
   HEAP8[$12>>0] = $6;
   $13 = HEAP16[$4>>1]|0;
   $14 = ($13&65535) >>> 8;
   $15 = $14&255;
   $16 = HEAP32[$7>>2]|0;
   $17 = HEAP32[$9>>2]|0;
   $18 = (($17) + 1)|0;
   HEAP32[$9>>2] = $18;
   $19 = (($16) + ($17)|0);
   HEAP8[$19>>0] = $15;
   HEAP16[$4>>1] = 0;
   $$sink$i = 0;
  } else {
   $20 = ($2|0)>(7);
   if ($20) {
    $21 = ((($0)) + 5816|0);
    $22 = HEAP16[$21>>1]|0;
    $23 = $22&255;
    $24 = ((($0)) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($0)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($27) + 1)|0;
    HEAP32[$26>>2] = $28;
    $29 = (($25) + ($27)|0);
    HEAP8[$29>>0] = $23;
    $30 = HEAP16[$21>>1]|0;
    $31 = ($30&65535) >>> 8;
    HEAP16[$21>>1] = $31;
    $32 = HEAP32[$1>>2]|0;
    $33 = (($32) + -8)|0;
    $$sink$i = $33;
    break;
   } else {
    return;
   }
  }
 } while(0);
 HEAP32[$1>>2] = $$sink$i;
 return;
}
function __tr_align($0) {
 $0 = $0|0;
 var $$off0 = 0, $$off0$in = 0, $$off049 = 0, $$sink$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $storemerge = 0, $storemerge47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 5820|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(13);
 $4 = 2 << $2;
 $5 = ((($0)) + 5816|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = $7 | $4;
 $9 = $8&65535;
 HEAP16[$5>>1] = $9;
 if ($3) {
  $10 = $8&255;
  $11 = ((($0)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($0)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$13>>2] = $15;
  $16 = (($12) + ($14)|0);
  HEAP8[$16>>0] = $10;
  $17 = HEAP16[$5>>1]|0;
  $18 = ($17&65535) >>> 8;
  $19 = $18&255;
  $20 = HEAP32[$11>>2]|0;
  $21 = HEAP32[$13>>2]|0;
  $22 = (($21) + 1)|0;
  HEAP32[$13>>2] = $22;
  $23 = (($20) + ($21)|0);
  HEAP8[$23>>0] = $19;
  $24 = HEAP32[$1>>2]|0;
  $25 = (16 - ($24))|0;
  $26 = 2 >>> $25;
  $27 = $26&65535;
  HEAP16[$5>>1] = $27;
  $28 = (($24) + -13)|0;
  $$off0$in = $26;$storemerge = $28;
 } else {
  $29 = (($2) + 3)|0;
  $$off0$in = $8;$storemerge = $29;
 }
 $$off0 = $$off0$in&255;
 HEAP32[$1>>2] = $storemerge;
 $30 = ($storemerge|0)>(9);
 if ($30) {
  $31 = ((($0)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($0)) + 20|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 1)|0;
  HEAP32[$33>>2] = $35;
  $36 = (($32) + ($34)|0);
  HEAP8[$36>>0] = $$off0;
  $37 = HEAP16[$5>>1]|0;
  $38 = ($37&65535) >>> 8;
  $39 = $38&255;
  $40 = HEAP32[$31>>2]|0;
  $41 = HEAP32[$33>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[$33>>2] = $42;
  $43 = (($40) + ($41)|0);
  HEAP8[$43>>0] = $39;
  $44 = HEAP32[$1>>2]|0;
  HEAP16[$5>>1] = 0;
  $45 = (($44) + -9)|0;
  $$off049 = 0;$storemerge47 = $45;
 } else {
  $46 = (($storemerge) + 7)|0;
  $$off049 = $$off0;$storemerge47 = $46;
 }
 HEAP32[$1>>2] = $storemerge47;
 $47 = ($storemerge47|0)==(16);
 do {
  if ($47) {
   $48 = ((($0)) + 8|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($0)) + 20|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + 1)|0;
   HEAP32[$50>>2] = $52;
   $53 = (($49) + ($51)|0);
   HEAP8[$53>>0] = $$off049;
   $54 = HEAP16[$5>>1]|0;
   $55 = ($54&65535) >>> 8;
   $56 = $55&255;
   $57 = HEAP32[$48>>2]|0;
   $58 = HEAP32[$50>>2]|0;
   $59 = (($58) + 1)|0;
   HEAP32[$50>>2] = $59;
   $60 = (($57) + ($58)|0);
   HEAP8[$60>>0] = $56;
   HEAP16[$5>>1] = 0;
   $$sink$i = 0;
  } else {
   $61 = ($storemerge47|0)>(7);
   if ($61) {
    $62 = ((($0)) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ((($0)) + 20|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($65) + 1)|0;
    HEAP32[$64>>2] = $66;
    $67 = (($63) + ($65)|0);
    HEAP8[$67>>0] = $$off049;
    $68 = HEAP16[$5>>1]|0;
    $69 = ($68&65535) >>> 8;
    HEAP16[$5>>1] = $69;
    $70 = HEAP32[$1>>2]|0;
    $71 = (($70) + -8)|0;
    $$sink$i = $71;
    break;
   } else {
    return;
   }
  }
 } while(0);
 HEAP32[$1>>2] = $$sink$i;
 return;
}
function __tr_flush_block($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$$58$i$i = 0, $$$58$i29$i = 0, $$$59$i$i = 0, $$$59$i30$i = 0, $$$i = 0, $$$i$i = 0, $$$i15$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0118$i = 0, $$01620$i = 0, $$017$i = 0, $$021$i = 0, $$051$i$i = 0, $$051$i24$i = 0, $$053$ph$i$i = 0, $$053$ph$i19$i = 0, $$054$i$i = 0, $$054$i23$i = 0;
 var $$054$ph$i$i = 0, $$054$ph$i18$i = 0, $$055$ph$i$i = 0, $$055$ph$i$i$phi = 0, $$055$ph$i17$i = 0, $$055$ph$i17$i$phi = 0, $$092 = 0, $$093 = 0, $$1$ph$i$i = 0, $$1$ph$i21$i = 0, $$119$i = 0, $$149$ph$i$i = 0, $$149$ph$i20$i = 0, $$57$i$i = 0, $$57$i16$i = 0, $$58$i$i = 0, $$58$i28$i = 0, $$pre = 0, $$pre$phi117Z2D = 0, $$pre$phiZ2D = 0;
 var $$pre116 = 0, $$sink$i = 0, $$sink$i$i = 0, $$sink$i26$i = 0, $$sink$sink5$i$i = 0, $$sink$sink5$i27$i = 0, $$sink1$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $or$cond = 0, $or$cond$i$i = 0, $or$cond$i25$i = 0, $or$cond95 = 0, $storemerge = 0, $storemerge116$i = 0, $storemerge117$i = 0, $storemerge94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 132|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  $7 = HEAP32[$0>>2]|0;
  $8 = ((($7)) + 44|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(2);
  if ($10) {
   $$01620$i = -201342849;$$021$i = 0;
   while(1) {
    $11 = $$01620$i & 1;
    $12 = ($11|0)==(0);
    if (!($12)) {
     $13 = (((($0)) + 148|0) + ($$021$i<<2)|0);
     $14 = HEAP16[$13>>1]|0;
     $15 = ($14<<16>>16)==(0);
     if (!($15)) {
      $$017$i = 0;
      break;
     }
    }
    $16 = (($$021$i) + 1)|0;
    $17 = $$01620$i >>> 1;
    $18 = ($16|0)<(32);
    if ($18) {
     $$01620$i = $17;$$021$i = $16;
    } else {
     label = 6;
     break;
    }
   }
   L9: do {
    if ((label|0) == 6) {
     $19 = ((($0)) + 184|0);
     $20 = HEAP16[$19>>1]|0;
     $21 = ($20<<16>>16)==(0);
     if ($21) {
      $22 = ((($0)) + 188|0);
      $23 = HEAP16[$22>>1]|0;
      $24 = ($23<<16>>16)==(0);
      if ($24) {
       $25 = ((($0)) + 200|0);
       $26 = HEAP16[$25>>1]|0;
       $27 = ($26<<16>>16)==(0);
       if ($27) {
        $$119$i = 32;
        while(1) {
         $30 = (((($0)) + 148|0) + ($$119$i<<2)|0);
         $31 = HEAP16[$30>>1]|0;
         $32 = ($31<<16>>16)==(0);
         $28 = (($$119$i) + 1)|0;
         if (!($32)) {
          $$017$i = 1;
          break L9;
         }
         $29 = ($28|0)<(256);
         if ($29) {
          $$119$i = $28;
         } else {
          $$017$i = 0;
          break;
         }
        }
       } else {
        $$017$i = 1;
       }
      } else {
       $$017$i = 1;
      }
     } else {
      $$017$i = 1;
     }
    }
   } while(0);
   HEAP32[$8>>2] = $$017$i;
  }
  $33 = ((($0)) + 2840|0);
  _build_tree($0,$33);
  $34 = ((($0)) + 2852|0);
  _build_tree($0,$34);
  $35 = ((($0)) + 2844|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($0)) + 150|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38&65535;
  $40 = ($38<<16>>16)==(0);
  $$$i$i = $40 ? 138 : 7;
  $$57$i$i = $40 ? 3 : 4;
  $41 = (($36) + 1)|0;
  $42 = (((((($0)) + 148|0) + ($41<<2)|0)) + 2|0);
  HEAP16[$42>>1] = -1;
  $43 = ((($0)) + 2756|0);
  $44 = ((($0)) + 2752|0);
  $45 = ((($0)) + 2748|0);
  $$053$ph$i$i = $39;$$054$ph$i$i = 0;$$055$ph$i$i = -1;$$1$ph$i$i = $$57$i$i;$$149$ph$i$i = $$$i$i;
  L18: while(1) {
   $$051$i$i = 0;$$054$i$i = $$054$ph$i$i;
   while(1) {
    $46 = ($$054$i$i|0)>($36|0);
    if ($46) {
     break L18;
    }
    $47 = (($$054$i$i) + 1)|0;
    $48 = (((((($0)) + 148|0) + ($47<<2)|0)) + 2|0);
    $49 = HEAP16[$48>>1]|0;
    $50 = $49&65535;
    $51 = (($$051$i$i) + 1)|0;
    $52 = ($51|0)<($$149$ph$i$i|0);
    $53 = ($$053$ph$i$i|0)==($50|0);
    $or$cond$i$i = $52 & $53;
    if ($or$cond$i$i) {
     $$051$i$i = $51;$$054$i$i = $47;
    } else {
     break;
    }
   }
   $54 = ($51|0)<($$1$ph$i$i|0);
   if ($54) {
    $55 = (((($0)) + 2684|0) + ($$053$ph$i$i<<2)|0);
    $56 = HEAP16[$55>>1]|0;
    $57 = $56&65535;
    $58 = (($57) + ($51))|0;
    $59 = $58&65535;
    HEAP16[$55>>1] = $59;
   } else {
    $60 = ($$053$ph$i$i|0)==(0);
    if ($60) {
     $65 = ($51|0)<(11);
     $$sink$i$i = $65 ? $44 : $43;
     $$sink$sink5$i$i = $$sink$i$i;
    } else {
     $61 = ($$053$ph$i$i|0)==($$055$ph$i$i|0);
     $62 = (((($0)) + 2684|0) + ($$053$ph$i$i<<2)|0);
     if ($61) {
      $$sink$sink5$i$i = $45;
     } else {
      $63 = HEAP16[$62>>1]|0;
      $64 = (($63) + 1)<<16>>16;
      HEAP16[$62>>1] = $64;
      $$sink$sink5$i$i = $45;
     }
    }
    $66 = HEAP16[$$sink$sink5$i$i>>1]|0;
    $67 = (($66) + 1)<<16>>16;
    HEAP16[$$sink$sink5$i$i>>1] = $67;
   }
   $68 = ($49<<16>>16)==(0);
   $$58$i$i = $53 ? 6 : 7;
   $$$58$i$i = $68 ? 138 : $$58$i$i;
   $69 = $68 | $53;
   $$$59$i$i = $69 ? 3 : 4;
   $$055$ph$i$i$phi = $$053$ph$i$i;$$053$ph$i$i = $50;$$054$ph$i$i = $47;$$1$ph$i$i = $$$59$i$i;$$149$ph$i$i = $$$58$i$i;$$055$ph$i$i = $$055$ph$i$i$phi;
  }
  $70 = ((($0)) + 2856|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ((($0)) + 2442|0);
  $73 = HEAP16[$72>>1]|0;
  $74 = $73&65535;
  $75 = ($73<<16>>16)==(0);
  $$$i15$i = $75 ? 138 : 7;
  $$57$i16$i = $75 ? 3 : 4;
  $76 = (($71) + 1)|0;
  $77 = (((((($0)) + 2440|0) + ($76<<2)|0)) + 2|0);
  HEAP16[$77>>1] = -1;
  $$053$ph$i19$i = $74;$$054$ph$i18$i = 0;$$055$ph$i17$i = -1;$$1$ph$i21$i = $$57$i16$i;$$149$ph$i20$i = $$$i15$i;
  L34: while(1) {
   $$051$i24$i = 0;$$054$i23$i = $$054$ph$i18$i;
   while(1) {
    $78 = ($$054$i23$i|0)>($71|0);
    if ($78) {
     break L34;
    }
    $79 = (($$054$i23$i) + 1)|0;
    $80 = (((((($0)) + 2440|0) + ($79<<2)|0)) + 2|0);
    $81 = HEAP16[$80>>1]|0;
    $82 = $81&65535;
    $83 = (($$051$i24$i) + 1)|0;
    $84 = ($83|0)<($$149$ph$i20$i|0);
    $85 = ($$053$ph$i19$i|0)==($82|0);
    $or$cond$i25$i = $84 & $85;
    if ($or$cond$i25$i) {
     $$051$i24$i = $83;$$054$i23$i = $79;
    } else {
     break;
    }
   }
   $86 = ($83|0)<($$1$ph$i21$i|0);
   if ($86) {
    $87 = (((($0)) + 2684|0) + ($$053$ph$i19$i<<2)|0);
    $88 = HEAP16[$87>>1]|0;
    $89 = $88&65535;
    $90 = (($89) + ($83))|0;
    $91 = $90&65535;
    HEAP16[$87>>1] = $91;
   } else {
    $92 = ($$053$ph$i19$i|0)==(0);
    if ($92) {
     $97 = ($83|0)<(11);
     $$sink$i26$i = $97 ? $44 : $43;
     $$sink$sink5$i27$i = $$sink$i26$i;
    } else {
     $93 = ($$053$ph$i19$i|0)==($$055$ph$i17$i|0);
     $94 = (((($0)) + 2684|0) + ($$053$ph$i19$i<<2)|0);
     if ($93) {
      $$sink$sink5$i27$i = $45;
     } else {
      $95 = HEAP16[$94>>1]|0;
      $96 = (($95) + 1)<<16>>16;
      HEAP16[$94>>1] = $96;
      $$sink$sink5$i27$i = $45;
     }
    }
    $98 = HEAP16[$$sink$sink5$i27$i>>1]|0;
    $99 = (($98) + 1)<<16>>16;
    HEAP16[$$sink$sink5$i27$i>>1] = $99;
   }
   $100 = ($81<<16>>16)==(0);
   $$58$i28$i = $85 ? 6 : 7;
   $$$58$i29$i = $100 ? 138 : $$58$i28$i;
   $101 = $100 | $85;
   $$$59$i30$i = $101 ? 3 : 4;
   $$055$ph$i17$i$phi = $$053$ph$i19$i;$$053$ph$i19$i = $82;$$054$ph$i18$i = $79;$$1$ph$i21$i = $$$59$i30$i;$$149$ph$i20$i = $$$58$i29$i;$$055$ph$i17$i = $$055$ph$i17$i$phi;
  }
  $102 = ((($0)) + 2864|0);
  _build_tree($0,$102);
  $103 = ((($0)) + 2746|0);
  $104 = HEAP16[$103>>1]|0;
  $105 = ($104<<16>>16)==(0);
  if ($105) {
   $106 = ((($0)) + 2690|0);
   $107 = HEAP16[$106>>1]|0;
   $108 = ($107<<16>>16)==(0);
   if ($108) {
    $109 = ((($0)) + 2742|0);
    $110 = HEAP16[$109>>1]|0;
    $111 = ($110<<16>>16)==(0);
    if ($111) {
     $112 = ((($0)) + 2694|0);
     $113 = HEAP16[$112>>1]|0;
     $114 = ($113<<16>>16)==(0);
     if ($114) {
      $115 = ((($0)) + 2738|0);
      $116 = HEAP16[$115>>1]|0;
      $117 = ($116<<16>>16)==(0);
      if ($117) {
       $118 = ((($0)) + 2698|0);
       $119 = HEAP16[$118>>1]|0;
       $120 = ($119<<16>>16)==(0);
       if ($120) {
        $121 = ((($0)) + 2734|0);
        $122 = HEAP16[$121>>1]|0;
        $123 = ($122<<16>>16)==(0);
        if ($123) {
         $124 = ((($0)) + 2702|0);
         $125 = HEAP16[$124>>1]|0;
         $126 = ($125<<16>>16)==(0);
         if ($126) {
          $127 = ((($0)) + 2730|0);
          $128 = HEAP16[$127>>1]|0;
          $129 = ($128<<16>>16)==(0);
          if ($129) {
           $130 = ((($0)) + 2706|0);
           $131 = HEAP16[$130>>1]|0;
           $132 = ($131<<16>>16)==(0);
           if ($132) {
            $133 = ((($0)) + 2726|0);
            $134 = HEAP16[$133>>1]|0;
            $135 = ($134<<16>>16)==(0);
            if ($135) {
             $136 = ((($0)) + 2710|0);
             $137 = HEAP16[$136>>1]|0;
             $138 = ($137<<16>>16)==(0);
             if ($138) {
              $139 = ((($0)) + 2722|0);
              $140 = HEAP16[$139>>1]|0;
              $141 = ($140<<16>>16)==(0);
              if ($141) {
               $142 = ((($0)) + 2714|0);
               $143 = HEAP16[$142>>1]|0;
               $144 = ($143<<16>>16)==(0);
               if ($144) {
                $145 = ((($0)) + 2718|0);
                $146 = HEAP16[$145>>1]|0;
                $147 = ($146<<16>>16)==(0);
                if ($147) {
                 $148 = ((($0)) + 2686|0);
                 $149 = HEAP16[$148>>1]|0;
                 $150 = ($149<<16>>16)==(0);
                 $$$i = $150 ? 2 : 3;
                 $$0$lcssa$i = $$$i;
                } else {
                 $$0$lcssa$i = 4;
                }
               } else {
                $$0$lcssa$i = 5;
               }
              } else {
               $$0$lcssa$i = 6;
              }
             } else {
              $$0$lcssa$i = 7;
             }
            } else {
             $$0$lcssa$i = 8;
            }
           } else {
            $$0$lcssa$i = 9;
           }
          } else {
           $$0$lcssa$i = 10;
          }
         } else {
          $$0$lcssa$i = 11;
         }
        } else {
         $$0$lcssa$i = 12;
        }
       } else {
        $$0$lcssa$i = 13;
       }
      } else {
       $$0$lcssa$i = 14;
      }
     } else {
      $$0$lcssa$i = 15;
     }
    } else {
     $$0$lcssa$i = 16;
    }
   } else {
    $$0$lcssa$i = 17;
   }
  } else {
   $$0$lcssa$i = 18;
  }
  $151 = ($$0$lcssa$i*3)|0;
  $152 = (($151) + 17)|0;
  $153 = ((($0)) + 5800|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (($152) + ($154))|0;
  HEAP32[$153>>2] = $155;
  $156 = (($155) + 10)|0;
  $157 = $156 >>> 3;
  $158 = ((($0)) + 5804|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = (($159) + 10)|0;
  $161 = $160 >>> 3;
  $162 = ($161>>>0)>($157>>>0);
  $$ = $162 ? $157 : $161;
  $$0 = $$;$$092 = $161;$$093 = $$0$lcssa$i;
 } else {
  $163 = (($2) + 5)|0;
  $$0 = $163;$$092 = $163;$$093 = 0;
 }
 $164 = (($2) + 4)|0;
 $165 = ($164>>>0)<=($$0>>>0);
 $166 = ($1|0)!=(0|0);
 $or$cond = $166 & $165;
 do {
  if ($or$cond) {
   __tr_stored_block($0,$1,$2,$3);
  } else {
   $167 = ((($0)) + 136|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = ($168|0)==(4);
   $170 = ($$092|0)==($$0|0);
   $or$cond95 = $170 | $169;
   $171 = ((($0)) + 5820|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = ($172|0)>(13);
   if ($or$cond95) {
    $174 = (($3) + 2)|0;
    $175 = $174 & 65535;
    $176 = $175 << $172;
    $177 = ((($0)) + 5816|0);
    $178 = HEAP16[$177>>1]|0;
    $179 = $178&65535;
    $180 = $179 | $176;
    $181 = $180&65535;
    HEAP16[$177>>1] = $181;
    if ($173) {
     $182 = $180&255;
     $183 = ((($0)) + 8|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((($0)) + 20|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = (($186) + 1)|0;
     HEAP32[$185>>2] = $187;
     $188 = (($184) + ($186)|0);
     HEAP8[$188>>0] = $182;
     $189 = HEAP16[$177>>1]|0;
     $190 = ($189&65535) >>> 8;
     $191 = $190&255;
     $192 = HEAP32[$183>>2]|0;
     $193 = HEAP32[$185>>2]|0;
     $194 = (($193) + 1)|0;
     HEAP32[$185>>2] = $194;
     $195 = (($192) + ($193)|0);
     HEAP8[$195>>0] = $191;
     $196 = HEAP32[$171>>2]|0;
     $197 = (16 - ($196))|0;
     $198 = $175 >>> $197;
     $199 = $198&65535;
     HEAP16[$177>>1] = $199;
     $200 = (($196) + -13)|0;
     $storemerge94 = $200;
    } else {
     $201 = (($172) + 3)|0;
     $storemerge94 = $201;
    }
    HEAP32[$171>>2] = $storemerge94;
    _compress_block($0,12746,12626);
    break;
   }
   $202 = (($3) + 4)|0;
   $203 = $202 & 65535;
   $204 = $203 << $172;
   $205 = ((($0)) + 5816|0);
   $206 = HEAP16[$205>>1]|0;
   $207 = $206&65535;
   $208 = $207 | $204;
   $209 = $208&65535;
   HEAP16[$205>>1] = $209;
   if ($173) {
    $210 = $208&255;
    $211 = ((($0)) + 8|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = ((($0)) + 20|0);
    $214 = HEAP32[$213>>2]|0;
    $215 = (($214) + 1)|0;
    HEAP32[$213>>2] = $215;
    $216 = (($212) + ($214)|0);
    HEAP8[$216>>0] = $210;
    $217 = HEAP16[$205>>1]|0;
    $218 = ($217&65535) >>> 8;
    $219 = $218&255;
    $220 = HEAP32[$211>>2]|0;
    $221 = HEAP32[$213>>2]|0;
    $222 = (($221) + 1)|0;
    HEAP32[$213>>2] = $222;
    $223 = (($220) + ($221)|0);
    HEAP8[$223>>0] = $219;
    $224 = HEAP32[$171>>2]|0;
    $225 = (16 - ($224))|0;
    $226 = $203 >>> $225;
    $227 = $226&65535;
    HEAP16[$205>>1] = $227;
    $228 = (($224) + -13)|0;
    $239 = $226;$storemerge = $228;
   } else {
    $229 = (($172) + 3)|0;
    $239 = $208;$storemerge = $229;
   }
   HEAP32[$171>>2] = $storemerge;
   $230 = ((($0)) + 2844|0);
   $231 = HEAP32[$230>>2]|0;
   $232 = ((($0)) + 2856|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = ($storemerge|0)>(11);
   $235 = (($231) + 65280)|0;
   $236 = $235 & 65535;
   $237 = $236 << $storemerge;
   $238 = $239 & 65535;
   $240 = $238 | $237;
   $241 = $240&65535;
   HEAP16[$205>>1] = $241;
   if ($234) {
    $242 = $240&255;
    $243 = ((($0)) + 8|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = ((($0)) + 20|0);
    $246 = HEAP32[$245>>2]|0;
    $247 = (($246) + 1)|0;
    HEAP32[$245>>2] = $247;
    $248 = (($244) + ($246)|0);
    HEAP8[$248>>0] = $242;
    $249 = HEAP16[$205>>1]|0;
    $250 = ($249&65535) >>> 8;
    $251 = $250&255;
    $252 = HEAP32[$243>>2]|0;
    $253 = HEAP32[$245>>2]|0;
    $254 = (($253) + 1)|0;
    HEAP32[$245>>2] = $254;
    $255 = (($252) + ($253)|0);
    HEAP8[$255>>0] = $251;
    $256 = HEAP32[$171>>2]|0;
    $257 = (16 - ($256))|0;
    $258 = $236 >>> $257;
    $259 = $258&65535;
    HEAP16[$205>>1] = $259;
    $260 = (($256) + -11)|0;
    $262 = $260;$267 = $258;
   } else {
    $261 = (($storemerge) + 5)|0;
    $262 = $261;$267 = $240;
   }
   HEAP32[$171>>2] = $262;
   $263 = ($262|0)>(11);
   $264 = $233 & 65535;
   $265 = $264 << $262;
   $266 = $267 & 65535;
   $268 = $265 | $266;
   $269 = $268&65535;
   HEAP16[$205>>1] = $269;
   if ($263) {
    $270 = $268&255;
    $271 = ((($0)) + 8|0);
    $272 = HEAP32[$271>>2]|0;
    $273 = ((($0)) + 20|0);
    $274 = HEAP32[$273>>2]|0;
    $275 = (($274) + 1)|0;
    HEAP32[$273>>2] = $275;
    $276 = (($272) + ($274)|0);
    HEAP8[$276>>0] = $270;
    $277 = HEAP16[$205>>1]|0;
    $278 = ($277&65535) >>> 8;
    $279 = $278&255;
    $280 = HEAP32[$271>>2]|0;
    $281 = HEAP32[$273>>2]|0;
    $282 = (($281) + 1)|0;
    HEAP32[$273>>2] = $282;
    $283 = (($280) + ($281)|0);
    HEAP8[$283>>0] = $279;
    $284 = HEAP32[$171>>2]|0;
    $285 = (16 - ($284))|0;
    $286 = $264 >>> $285;
    $287 = $286&65535;
    HEAP16[$205>>1] = $287;
    $288 = (($284) + -11)|0;
    $290 = $288;$296 = $286;
   } else {
    $289 = (($262) + 5)|0;
    $290 = $289;$296 = $268;
   }
   HEAP32[$171>>2] = $290;
   $291 = ($290|0)>(12);
   $292 = (($$093) + 65533)|0;
   $293 = $292 & 65535;
   $294 = $293 << $290;
   $295 = $296 & 65535;
   $297 = $294 | $295;
   $298 = $297&65535;
   HEAP16[$205>>1] = $298;
   if ($291) {
    $299 = $297&255;
    $300 = ((($0)) + 8|0);
    $301 = HEAP32[$300>>2]|0;
    $302 = ((($0)) + 20|0);
    $303 = HEAP32[$302>>2]|0;
    $304 = (($303) + 1)|0;
    HEAP32[$302>>2] = $304;
    $305 = (($301) + ($303)|0);
    HEAP8[$305>>0] = $299;
    $306 = HEAP16[$205>>1]|0;
    $307 = ($306&65535) >>> 8;
    $308 = $307&255;
    $309 = HEAP32[$300>>2]|0;
    $310 = HEAP32[$302>>2]|0;
    $311 = (($310) + 1)|0;
    HEAP32[$302>>2] = $311;
    $312 = (($309) + ($310)|0);
    HEAP8[$312>>0] = $308;
    $313 = HEAP32[$171>>2]|0;
    $314 = (16 - ($313))|0;
    $315 = $293 >>> $314;
    $316 = $315&65535;
    HEAP16[$205>>1] = $316;
    $317 = (($313) + -12)|0;
    $$pre$phi117Z2D = $302;$$pre$phiZ2D = $300;$384 = $315;$storemerge116$i = $317;
   } else {
    $318 = (($290) + 4)|0;
    $$pre = ((($0)) + 8|0);
    $$pre116 = ((($0)) + 20|0);
    $$pre$phi117Z2D = $$pre116;$$pre$phiZ2D = $$pre;$384 = $297;$storemerge116$i = $318;
   }
   HEAP32[$171>>2] = $storemerge116$i;
   $$0118$i = 0;$319 = $storemerge116$i;$329 = $384;
   while(1) {
    $320 = ($319|0)>(13);
    $321 = (19592 + ($$0118$i)|0);
    $322 = HEAP8[$321>>0]|0;
    $323 = $322&255;
    $324 = (((((($0)) + 2684|0) + ($323<<2)|0)) + 2|0);
    $325 = HEAP16[$324>>1]|0;
    $326 = $325&65535;
    $327 = $326 << $319;
    $328 = $329 & 65535;
    $330 = $327 | $328;
    $331 = $330&65535;
    HEAP16[$205>>1] = $331;
    if ($320) {
     $332 = $330&255;
     $333 = HEAP32[$$pre$phiZ2D>>2]|0;
     $334 = HEAP32[$$pre$phi117Z2D>>2]|0;
     $335 = (($334) + 1)|0;
     HEAP32[$$pre$phi117Z2D>>2] = $335;
     $336 = (($333) + ($334)|0);
     HEAP8[$336>>0] = $332;
     $337 = HEAP16[$205>>1]|0;
     $338 = ($337&65535) >>> 8;
     $339 = $338&255;
     $340 = HEAP32[$$pre$phiZ2D>>2]|0;
     $341 = HEAP32[$$pre$phi117Z2D>>2]|0;
     $342 = (($341) + 1)|0;
     HEAP32[$$pre$phi117Z2D>>2] = $342;
     $343 = (($340) + ($341)|0);
     HEAP8[$343>>0] = $339;
     $344 = HEAP32[$171>>2]|0;
     $345 = (16 - ($344))|0;
     $346 = $326 >>> $345;
     $347 = $346&65535;
     HEAP16[$205>>1] = $347;
     $348 = (($344) + -13)|0;
     $385 = $346;$storemerge117$i = $348;
    } else {
     $349 = (($319) + 3)|0;
     $385 = $330;$storemerge117$i = $349;
    }
    HEAP32[$171>>2] = $storemerge117$i;
    $350 = (($$0118$i) + 1)|0;
    $exitcond$i = ($$0118$i|0)==($$093|0);
    if ($exitcond$i) {
     break;
    } else {
     $$0118$i = $350;$319 = $storemerge117$i;$329 = $385;
    }
   }
   $351 = ((($0)) + 148|0);
   _send_tree($0,$351,$231);
   $352 = ((($0)) + 2440|0);
   _send_tree($0,$352,$233);
   _compress_block($0,$351,$352);
  }
 } while(0);
 _init_block($0);
 $353 = ($3|0)==(0);
 if ($353) {
  return;
 }
 $354 = ((($0)) + 5820|0);
 $355 = HEAP32[$354>>2]|0;
 $356 = ($355|0)>(8);
 if ($356) {
  $357 = ((($0)) + 5816|0);
  $358 = HEAP16[$357>>1]|0;
  $359 = $358&255;
  $360 = ((($0)) + 8|0);
  $361 = HEAP32[$360>>2]|0;
  $362 = ((($0)) + 20|0);
  $363 = HEAP32[$362>>2]|0;
  $364 = (($363) + 1)|0;
  HEAP32[$362>>2] = $364;
  $365 = (($361) + ($363)|0);
  HEAP8[$365>>0] = $359;
  $366 = HEAP16[$357>>1]|0;
  $367 = ($366&65535) >>> 8;
  $368 = $367&255;
  $369 = HEAP32[$360>>2]|0;
  $370 = HEAP32[$362>>2]|0;
  $371 = (($370) + 1)|0;
  HEAP32[$362>>2] = $371;
  $372 = (($369) + ($370)|0);
  $$sink$i = $368;$$sink1$i = $372;
  label = 84;
 } else {
  $373 = ($355|0)>(0);
  if ($373) {
   $374 = ((($0)) + 5816|0);
   $375 = HEAP16[$374>>1]|0;
   $376 = $375&255;
   $377 = ((($0)) + 8|0);
   $378 = HEAP32[$377>>2]|0;
   $379 = ((($0)) + 20|0);
   $380 = HEAP32[$379>>2]|0;
   $381 = (($380) + 1)|0;
   HEAP32[$379>>2] = $381;
   $382 = (($378) + ($380)|0);
   $$sink$i = $376;$$sink1$i = $382;
   label = 84;
  }
 }
 if ((label|0) == 84) {
  HEAP8[$$sink1$i>>0] = $$sink$i;
 }
 $383 = ((($0)) + 5816|0);
 HEAP16[$383>>1] = 0;
 HEAP32[$354>>2] = 0;
 return;
}
function _build_tree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$2 = 0, $$$2$us = 0, $$$i = 0, $$$us = 0, $$$us$i = 0, $$0 = 0, $$0$$i = 0, $$0$$us$i = 0, $$0$i = 0, $$0$i$i = 0, $$0$i111 = 0, $$0$i119 = 0, $$0$lcssa$i = 0, $$0109$i = 0, $$0109$us$i = 0, $$010910$i = 0, $$010912$i = 0, $$010912$us$i = 0, $$011$i = 0;
 var $$011$us$i = 0, $$0112$i = 0, $$0112$us$i = 0, $$0116$ph$i132 = 0, $$02329$i = 0, $$02426$i = 0, $$02528$i = 0, $$052$lcssa$i = 0, $$052$lcssa$i112 = 0, $$052$lcssa$i120 = 0, $$05254$i = 0, $$05254$i109 = 0, $$05254$i117 = 0, $$053$i = 0, $$055$i = 0, $$055$i108 = 0, $$055$i116 = 0, $$07$i$i = 0, $$08$i$i = 0, $$098$lcssa156 = 0;
 var $$098140 = 0, $$099139 = 0, $$1 = 0, $$1$i = 0, $$1$i110 = 0, $$1$i118 = 0, $$1100134 = 0, $$11109$i = 0, $$2$i = 0, $$2$lcssa = 0, $$2111$i = 0, $$2111$ph$i$lcssa = 0, $$2111$ph$i133 = 0, $$2115$i = 0, $$2115$in$i = 0, $$2135 = 0, $$2135$us = 0, $$37$i = 0, $$idx$val = 0, $$idx101$val = 0;
 var $$idx102$val = 0, $$lcssa131 = 0, $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $$pre153 = 0, $$pre154 = 0, $$pre154$pre = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i104 = 0, $exitcond21$i = 0, $exitcond30$i = 0, $not$$i = 0, $not$$us$i = 0, $scevgep$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($5)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 5200|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 5204|0);
 HEAP32[$10>>2] = 573;
 $11 = ($8|0)>(0);
 if ($11) {
  $$098140 = -1;$$099139 = 0;
  while(1) {
   $27 = (($3) + ($$099139<<2)|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = ($28<<16>>16)==(0);
   if ($29) {
    $34 = (((($3) + ($$099139<<2)|0)) + 2|0);
    HEAP16[$34>>1] = 0;
    $$1 = $$098140;
   } else {
    $30 = HEAP32[$9>>2]|0;
    $31 = (($30) + 1)|0;
    HEAP32[$9>>2] = $31;
    $32 = (((($0)) + 2908|0) + ($31<<2)|0);
    HEAP32[$32>>2] = $$099139;
    $33 = (((($0)) + 5208|0) + ($$099139)|0);
    HEAP8[$33>>0] = 0;
    $$1 = $$099139;
   }
   $35 = (($$099139) + 1)|0;
   $exitcond = ($35|0)==($8|0);
   if ($exitcond) {
    break;
   } else {
    $$098140 = $$1;$$099139 = $35;
   }
  }
  $$pre = HEAP32[$9>>2]|0;
  $12 = ($$pre|0)<(2);
  if ($12) {
   $$098$lcssa156 = $$1;$353 = $$pre;
   label = 3;
  } else {
   $$2$lcssa = $$1;$$lcssa131 = $$pre;
  }
 } else {
  $$098$lcssa156 = -1;$353 = 0;
  label = 3;
 }
 if ((label|0) == 3) {
  $13 = ((($0)) + 5800|0);
  $14 = ($6|0)==(0|0);
  $15 = ((($0)) + 5804|0);
  if ($14) {
   $$2135$us = $$098$lcssa156;$19 = $353;
   while(1) {
    $16 = ($$2135$us|0)<(2);
    $17 = (($$2135$us) + 1)|0;
    $$$2$us = $16 ? $17 : $$2135$us;
    $$$us = $16 ? $17 : 0;
    $18 = (($19) + 1)|0;
    HEAP32[$9>>2] = $18;
    $20 = (((($0)) + 2908|0) + ($18<<2)|0);
    HEAP32[$20>>2] = $$$us;
    $21 = (($3) + ($$$us<<2)|0);
    HEAP16[$21>>1] = 1;
    $22 = (((($0)) + 5208|0) + ($$$us)|0);
    HEAP8[$22>>0] = 0;
    $23 = HEAP32[$13>>2]|0;
    $24 = (($23) + -1)|0;
    HEAP32[$13>>2] = $24;
    $25 = HEAP32[$9>>2]|0;
    $26 = ($25|0)<(2);
    if ($26) {
     $$2135$us = $$$2$us;$19 = $25;
    } else {
     $$2$lcssa = $$$2$us;$$lcssa131 = $25;
     break;
    }
   }
  } else {
   $$2135 = $$098$lcssa156;$39 = $353;
   while(1) {
    $36 = ($$2135|0)<(2);
    $37 = (($$2135) + 1)|0;
    $$$2 = $36 ? $37 : $$2135;
    $$ = $36 ? $37 : 0;
    $38 = (($39) + 1)|0;
    HEAP32[$9>>2] = $38;
    $40 = (((($0)) + 2908|0) + ($38<<2)|0);
    HEAP32[$40>>2] = $$;
    $41 = (($3) + ($$<<2)|0);
    HEAP16[$41>>1] = 1;
    $42 = (((($0)) + 5208|0) + ($$)|0);
    HEAP8[$42>>0] = 0;
    $43 = HEAP32[$13>>2]|0;
    $44 = (($43) + -1)|0;
    HEAP32[$13>>2] = $44;
    $45 = (((($6) + ($$<<2)|0)) + 2|0);
    $46 = HEAP16[$45>>1]|0;
    $47 = $46&65535;
    $48 = HEAP32[$15>>2]|0;
    $49 = (($48) - ($47))|0;
    HEAP32[$15>>2] = $49;
    $50 = HEAP32[$9>>2]|0;
    $51 = ($50|0)<(2);
    if ($51) {
     $$2135 = $$$2;$39 = $50;
    } else {
     $$2$lcssa = $$$2;$$lcssa131 = $50;
     break;
    }
   }
  }
 }
 $52 = ((($1)) + 4|0);
 HEAP32[$52>>2] = $$2$lcssa;
 $53 = $$lcssa131 >>> 1;
 $54 = ($53|0)==(0);
 if ($54) {
  $$pre154 = $$lcssa131;
 } else {
  $$1100134 = $53;$60 = $$lcssa131;
  while(1) {
   $56 = (((($0)) + 2908|0) + ($$1100134<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (((($0)) + 5208|0) + ($57)|0);
   $$053$i = $$1100134 << 1;
   $59 = ($$053$i|0)>($60|0);
   L20: do {
    if ($59) {
     $$052$lcssa$i = $$1100134;
    } else {
     $61 = (($3) + ($57<<2)|0);
     $$05254$i = $$1100134;$$055$i = $$053$i;$63 = $60;
     while(1) {
      $62 = ($$055$i|0)<($63|0);
      do {
       if ($62) {
        $64 = $$055$i | 1;
        $65 = (((($0)) + 2908|0) + ($64<<2)|0);
        $66 = HEAP32[$65>>2]|0;
        $67 = (($3) + ($66<<2)|0);
        $68 = HEAP16[$67>>1]|0;
        $69 = (((($0)) + 2908|0) + ($$055$i<<2)|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = (($3) + ($70<<2)|0);
        $72 = HEAP16[$71>>1]|0;
        $73 = ($68&65535)<($72&65535);
        if (!($73)) {
         $74 = ($68<<16>>16)==($72<<16>>16);
         if (!($74)) {
          $$1$i = $$055$i;
          break;
         }
         $75 = (((($0)) + 5208|0) + ($66)|0);
         $76 = HEAP8[$75>>0]|0;
         $77 = (((($0)) + 5208|0) + ($70)|0);
         $78 = HEAP8[$77>>0]|0;
         $79 = ($76&255)>($78&255);
         if ($79) {
          $$1$i = $$055$i;
          break;
         }
        }
        $$1$i = $64;
       } else {
        $$1$i = $$055$i;
       }
      } while(0);
      $80 = HEAP16[$61>>1]|0;
      $81 = (((($0)) + 2908|0) + ($$1$i<<2)|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = (($3) + ($82<<2)|0);
      $84 = HEAP16[$83>>1]|0;
      $85 = ($80&65535)<($84&65535);
      if ($85) {
       $$052$lcssa$i = $$05254$i;
       break L20;
      }
      $86 = ($80<<16>>16)==($84<<16>>16);
      if ($86) {
       $87 = HEAP8[$58>>0]|0;
       $88 = (((($0)) + 5208|0) + ($82)|0);
       $89 = HEAP8[$88>>0]|0;
       $90 = ($87&255)>($89&255);
       if (!($90)) {
        $$052$lcssa$i = $$05254$i;
        break L20;
       }
      }
      $91 = (((($0)) + 2908|0) + ($$05254$i<<2)|0);
      HEAP32[$91>>2] = $82;
      $$0$i = $$1$i << 1;
      $92 = HEAP32[$9>>2]|0;
      $93 = ($$0$i|0)>($92|0);
      if ($93) {
       $$052$lcssa$i = $$1$i;
       break;
      } else {
       $$05254$i = $$1$i;$$055$i = $$0$i;$63 = $92;
      }
     }
    }
   } while(0);
   $94 = (((($0)) + 2908|0) + ($$052$lcssa$i<<2)|0);
   HEAP32[$94>>2] = $57;
   $95 = ($$1100134|0)>(1);
   if (!($95)) {
    break;
   }
   $96 = (($$1100134) + -1)|0;
   $$pre153 = HEAP32[$9>>2]|0;
   $$1100134 = $96;$60 = $$pre153;
  }
  $$pre154$pre = HEAP32[$9>>2]|0;
  $$pre154 = $$pre154$pre;
 }
 $55 = ((($0)) + 2912|0);
 $$0 = $8;$99 = $$pre154;
 while(1) {
  $97 = HEAP32[$55>>2]|0;
  $98 = (($99) + -1)|0;
  HEAP32[$9>>2] = $98;
  $100 = (((($0)) + 2908|0) + ($99<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  HEAP32[$55>>2] = $101;
  $102 = (((($0)) + 5208|0) + ($101)|0);
  $103 = ($99|0)<(3);
  L41: do {
   if ($103) {
    $$052$lcssa$i120 = 1;
   } else {
    $104 = (($3) + ($101<<2)|0);
    $$05254$i117 = 1;$$055$i116 = 2;$106 = $98;
    while(1) {
     $105 = ($$055$i116|0)<($106|0);
     do {
      if ($105) {
       $107 = $$055$i116 | 1;
       $108 = (((($0)) + 2908|0) + ($107<<2)|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = (($3) + ($109<<2)|0);
       $111 = HEAP16[$110>>1]|0;
       $112 = (((($0)) + 2908|0) + ($$055$i116<<2)|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = (($3) + ($113<<2)|0);
       $115 = HEAP16[$114>>1]|0;
       $116 = ($111&65535)<($115&65535);
       if (!($116)) {
        $117 = ($111<<16>>16)==($115<<16>>16);
        if (!($117)) {
         $$1$i118 = $$055$i116;
         break;
        }
        $118 = (((($0)) + 5208|0) + ($109)|0);
        $119 = HEAP8[$118>>0]|0;
        $120 = (((($0)) + 5208|0) + ($113)|0);
        $121 = HEAP8[$120>>0]|0;
        $122 = ($119&255)>($121&255);
        if ($122) {
         $$1$i118 = $$055$i116;
         break;
        }
       }
       $$1$i118 = $107;
      } else {
       $$1$i118 = $$055$i116;
      }
     } while(0);
     $123 = HEAP16[$104>>1]|0;
     $124 = (((($0)) + 2908|0) + ($$1$i118<<2)|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = (($3) + ($125<<2)|0);
     $127 = HEAP16[$126>>1]|0;
     $128 = ($123&65535)<($127&65535);
     if ($128) {
      $$052$lcssa$i120 = $$05254$i117;
      break L41;
     }
     $129 = ($123<<16>>16)==($127<<16>>16);
     if ($129) {
      $130 = HEAP8[$102>>0]|0;
      $131 = (((($0)) + 5208|0) + ($125)|0);
      $132 = HEAP8[$131>>0]|0;
      $133 = ($130&255)>($132&255);
      if (!($133)) {
       $$052$lcssa$i120 = $$05254$i117;
       break L41;
      }
     }
     $134 = (((($0)) + 2908|0) + ($$05254$i117<<2)|0);
     HEAP32[$134>>2] = $125;
     $$0$i119 = $$1$i118 << 1;
     $135 = HEAP32[$9>>2]|0;
     $136 = ($$0$i119|0)>($135|0);
     if ($136) {
      $$052$lcssa$i120 = $$1$i118;
      break;
     } else {
      $$05254$i117 = $$1$i118;$$055$i116 = $$0$i119;$106 = $135;
     }
    }
   }
  } while(0);
  $137 = (((($0)) + 2908|0) + ($$052$lcssa$i120<<2)|0);
  HEAP32[$137>>2] = $101;
  $138 = HEAP32[$55>>2]|0;
  $139 = HEAP32[$10>>2]|0;
  $140 = (($139) + -1)|0;
  HEAP32[$10>>2] = $140;
  $141 = (((($0)) + 2908|0) + ($140<<2)|0);
  HEAP32[$141>>2] = $97;
  $142 = HEAP32[$10>>2]|0;
  $143 = (($142) + -1)|0;
  HEAP32[$10>>2] = $143;
  $144 = (((($0)) + 2908|0) + ($143<<2)|0);
  HEAP32[$144>>2] = $138;
  $145 = (($3) + ($97<<2)|0);
  $146 = HEAP16[$145>>1]|0;
  $147 = $146&65535;
  $148 = (($3) + ($138<<2)|0);
  $149 = HEAP16[$148>>1]|0;
  $150 = $149&65535;
  $151 = (($150) + ($147))|0;
  $152 = $151&65535;
  $153 = (($3) + ($$0<<2)|0);
  HEAP16[$153>>1] = $152;
  $154 = (((($0)) + 5208|0) + ($97)|0);
  $155 = HEAP8[$154>>0]|0;
  $156 = (((($0)) + 5208|0) + ($138)|0);
  $157 = HEAP8[$156>>0]|0;
  $158 = ($155&255)>=($157&255);
  $$sink = $158 ? $97 : $138;
  $159 = (((($0)) + 5208|0) + ($$sink)|0);
  $160 = HEAP8[$159>>0]|0;
  $161 = $160&255;
  $162 = (($161) + 1)|0;
  $163 = $162&255;
  $164 = (((($0)) + 5208|0) + ($$0)|0);
  HEAP8[$164>>0] = $163;
  $165 = $$0&65535;
  $166 = (((($3) + ($138<<2)|0)) + 2|0);
  HEAP16[$166>>1] = $165;
  $167 = (((($3) + ($97<<2)|0)) + 2|0);
  HEAP16[$167>>1] = $165;
  $168 = (($$0) + 1)|0;
  HEAP32[$55>>2] = $$0;
  $169 = HEAP32[$9>>2]|0;
  $170 = ($169|0)<(2);
  L57: do {
   if ($170) {
    $$052$lcssa$i112 = 1;
   } else {
    $$05254$i109 = 1;$$055$i108 = 2;$172 = $169;
    while(1) {
     $171 = ($$055$i108|0)<($172|0);
     do {
      if ($171) {
       $173 = $$055$i108 | 1;
       $174 = (((($0)) + 2908|0) + ($173<<2)|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = (($3) + ($175<<2)|0);
       $177 = HEAP16[$176>>1]|0;
       $178 = (((($0)) + 2908|0) + ($$055$i108<<2)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = (($3) + ($179<<2)|0);
       $181 = HEAP16[$180>>1]|0;
       $182 = ($177&65535)<($181&65535);
       if (!($182)) {
        $183 = ($177<<16>>16)==($181<<16>>16);
        if (!($183)) {
         $$1$i110 = $$055$i108;
         break;
        }
        $184 = (((($0)) + 5208|0) + ($175)|0);
        $185 = HEAP8[$184>>0]|0;
        $186 = (((($0)) + 5208|0) + ($179)|0);
        $187 = HEAP8[$186>>0]|0;
        $188 = ($185&255)>($187&255);
        if ($188) {
         $$1$i110 = $$055$i108;
         break;
        }
       }
       $$1$i110 = $173;
      } else {
       $$1$i110 = $$055$i108;
      }
     } while(0);
     $189 = HEAP16[$153>>1]|0;
     $190 = (((($0)) + 2908|0) + ($$1$i110<<2)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (($3) + ($191<<2)|0);
     $193 = HEAP16[$192>>1]|0;
     $194 = ($189&65535)<($193&65535);
     if ($194) {
      $$052$lcssa$i112 = $$05254$i109;
      break L57;
     }
     $195 = ($189<<16>>16)==($193<<16>>16);
     if ($195) {
      $196 = HEAP8[$164>>0]|0;
      $197 = (((($0)) + 5208|0) + ($191)|0);
      $198 = HEAP8[$197>>0]|0;
      $199 = ($196&255)>($198&255);
      if (!($199)) {
       $$052$lcssa$i112 = $$05254$i109;
       break L57;
      }
     }
     $200 = (((($0)) + 2908|0) + ($$05254$i109<<2)|0);
     HEAP32[$200>>2] = $191;
     $$0$i111 = $$1$i110 << 1;
     $201 = HEAP32[$9>>2]|0;
     $202 = ($$0$i111|0)>($201|0);
     if ($202) {
      $$052$lcssa$i112 = $$1$i110;
      break;
     } else {
      $$05254$i109 = $$1$i110;$$055$i108 = $$0$i111;$172 = $201;
     }
    }
   }
  } while(0);
  $203 = (((($0)) + 2908|0) + ($$052$lcssa$i112<<2)|0);
  HEAP32[$203>>2] = $$0;
  $204 = HEAP32[$9>>2]|0;
  $205 = ($204|0)>(1);
  if ($205) {
   $$0 = $168;$99 = $204;
  } else {
   break;
  }
 }
 $206 = HEAP32[$55>>2]|0;
 $207 = HEAP32[$10>>2]|0;
 $208 = (($207) + -1)|0;
 HEAP32[$10>>2] = $208;
 $209 = (((($0)) + 2908|0) + ($208<<2)|0);
 HEAP32[$209>>2] = $206;
 $$idx$val = HEAP32[$1>>2]|0;
 $$idx101$val = HEAP32[$52>>2]|0;
 $$idx102$val = HEAP32[$4>>2]|0;
 $210 = HEAP32[$$idx102$val>>2]|0;
 $211 = ((($$idx102$val)) + 4|0);
 $212 = HEAP32[$211>>2]|0;
 $213 = ((($$idx102$val)) + 8|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = ((($$idx102$val)) + 16|0);
 $216 = HEAP32[$215>>2]|0;
 $scevgep$i = ((($0)) + 2876|0);
 dest=$scevgep$i; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $217 = HEAP32[$10>>2]|0;
 $218 = (((($0)) + 2908|0) + ($217<<2)|0);
 $219 = HEAP32[$218>>2]|0;
 $220 = (((($$idx$val) + ($219<<2)|0)) + 2|0);
 HEAP16[$220>>1] = 0;
 $$010910$i = (($217) + 1)|0;
 $221 = ($$010910$i|0)<(573);
 L73: do {
  if ($221) {
   $222 = ((($0)) + 5800|0);
   $223 = ($210|0)==(0|0);
   $224 = ((($0)) + 5804|0);
   if ($223) {
    $$010912$us$i = $$010910$i;$$011$us$i = 0;
    while(1) {
     $225 = (((($0)) + 2908|0) + ($$010912$us$i<<2)|0);
     $226 = HEAP32[$225>>2]|0;
     $227 = (((($$idx$val) + ($226<<2)|0)) + 2|0);
     $228 = HEAP16[$227>>1]|0;
     $229 = $228&65535;
     $230 = (((($$idx$val) + ($229<<2)|0)) + 2|0);
     $231 = HEAP16[$230>>1]|0;
     $232 = $231&65535;
     $233 = (($232) + 1)|0;
     $234 = ($232|0)<($216|0);
     $$$us$i = $234 ? $233 : $216;
     $not$$us$i = $234 ^ 1;
     $235 = $not$$us$i&1;
     $$0$$us$i = (($235) + ($$011$us$i))|0;
     $236 = $$$us$i&65535;
     HEAP16[$227>>1] = $236;
     $237 = ($226|0)>($$idx101$val|0);
     if (!($237)) {
      $238 = (((($0)) + 2876|0) + ($$$us$i<<1)|0);
      $239 = HEAP16[$238>>1]|0;
      $240 = (($239) + 1)<<16>>16;
      HEAP16[$238>>1] = $240;
      $241 = ($226|0)<($214|0);
      if ($241) {
       $$0112$us$i = 0;
      } else {
       $242 = (($226) - ($214))|0;
       $243 = (($212) + ($242<<2)|0);
       $244 = HEAP32[$243>>2]|0;
       $$0112$us$i = $244;
      }
      $245 = (($$idx$val) + ($226<<2)|0);
      $246 = HEAP16[$245>>1]|0;
      $247 = $246&65535;
      $248 = (($$0112$us$i) + ($$$us$i))|0;
      $249 = Math_imul($247, $248)|0;
      $250 = HEAP32[$222>>2]|0;
      $251 = (($249) + ($250))|0;
      HEAP32[$222>>2] = $251;
     }
     $$0109$us$i = (($$010912$us$i) + 1)|0;
     $exitcond$i104 = ($$0109$us$i|0)==(573);
     if ($exitcond$i104) {
      $$0$lcssa$i = $$0$$us$i;
      break;
     } else {
      $$010912$us$i = $$0109$us$i;$$011$us$i = $$0$$us$i;
     }
    }
   } else {
    $$010912$i = $$010910$i;$$011$i = 0;
    while(1) {
     $252 = (((($0)) + 2908|0) + ($$010912$i<<2)|0);
     $253 = HEAP32[$252>>2]|0;
     $254 = (((($$idx$val) + ($253<<2)|0)) + 2|0);
     $255 = HEAP16[$254>>1]|0;
     $256 = $255&65535;
     $257 = (((($$idx$val) + ($256<<2)|0)) + 2|0);
     $258 = HEAP16[$257>>1]|0;
     $259 = $258&65535;
     $260 = (($259) + 1)|0;
     $261 = ($259|0)<($216|0);
     $$$i = $261 ? $260 : $216;
     $not$$i = $261 ^ 1;
     $262 = $not$$i&1;
     $$0$$i = (($262) + ($$011$i))|0;
     $263 = $$$i&65535;
     HEAP16[$254>>1] = $263;
     $264 = ($253|0)>($$idx101$val|0);
     if (!($264)) {
      $265 = (((($0)) + 2876|0) + ($$$i<<1)|0);
      $266 = HEAP16[$265>>1]|0;
      $267 = (($266) + 1)<<16>>16;
      HEAP16[$265>>1] = $267;
      $268 = ($253|0)<($214|0);
      if ($268) {
       $$0112$i = 0;
      } else {
       $269 = (($253) - ($214))|0;
       $270 = (($212) + ($269<<2)|0);
       $271 = HEAP32[$270>>2]|0;
       $$0112$i = $271;
      }
      $272 = (($$idx$val) + ($253<<2)|0);
      $273 = HEAP16[$272>>1]|0;
      $274 = $273&65535;
      $275 = (($$0112$i) + ($$$i))|0;
      $276 = Math_imul($274, $275)|0;
      $277 = HEAP32[$222>>2]|0;
      $278 = (($276) + ($277))|0;
      HEAP32[$222>>2] = $278;
      $279 = (((($210) + ($253<<2)|0)) + 2|0);
      $280 = HEAP16[$279>>1]|0;
      $281 = $280&65535;
      $282 = (($281) + ($$0112$i))|0;
      $283 = Math_imul($282, $274)|0;
      $284 = HEAP32[$224>>2]|0;
      $285 = (($283) + ($284))|0;
      HEAP32[$224>>2] = $285;
     }
     $$0109$i = (($$010912$i) + 1)|0;
     $exitcond21$i = ($$0109$i|0)==(573);
     if ($exitcond21$i) {
      $$0$lcssa$i = $$0$$i;
      break;
     } else {
      $$010912$i = $$0109$i;$$011$i = $$0$$i;
     }
    }
   }
   $286 = ($$0$lcssa$i|0)==(0);
   if (!($286)) {
    $287 = (((($0)) + 2876|0) + ($216<<1)|0);
    $$2$i = $$0$lcssa$i;
    while(1) {
     $$2115$in$i = $216;
     while(1) {
      $$2115$i = (($$2115$in$i) + -1)|0;
      $288 = (((($0)) + 2876|0) + ($$2115$i<<1)|0);
      $289 = HEAP16[$288>>1]|0;
      $290 = ($289<<16>>16)==(0);
      if ($290) {
       $$2115$in$i = $$2115$i;
      } else {
       break;
      }
     }
     $291 = (($289) + -1)<<16>>16;
     HEAP16[$288>>1] = $291;
     $292 = (((($0)) + 2876|0) + ($$2115$in$i<<1)|0);
     $293 = HEAP16[$292>>1]|0;
     $294 = $293&65535;
     $295 = (($294) + 2)|0;
     $296 = $295&65535;
     HEAP16[$292>>1] = $296;
     $297 = HEAP16[$287>>1]|0;
     $298 = (($297) + -1)<<16>>16;
     HEAP16[$287>>1] = $298;
     $299 = (($$2$i) + -2)|0;
     $300 = ($$2$i|0)>(2);
     if ($300) {
      $$2$i = $299;
     } else {
      break;
     }
    }
    $301 = ($216|0)==(0);
    if (!($301)) {
     $$11109$i = 573;$$37$i = $216;$303 = $298;
     while(1) {
      $302 = $$37$i&65535;
      $304 = ($303<<16>>16)==(0);
      if ($304) {
       $$2111$ph$i$lcssa = $$11109$i;
      } else {
       $305 = $303&65535;
       $$0116$ph$i132 = $305;$$2111$ph$i133 = $$11109$i;
       while(1) {
        $$2111$i = $$2111$ph$i133;
        while(1) {
         $306 = (($$2111$i) + -1)|0;
         $307 = (((($0)) + 2908|0) + ($306<<2)|0);
         $308 = HEAP32[$307>>2]|0;
         $309 = ($308|0)>($$idx101$val|0);
         if ($309) {
          $$2111$i = $306;
         } else {
          break;
         }
        }
        $310 = (((($$idx$val) + ($308<<2)|0)) + 2|0);
        $311 = HEAP16[$310>>1]|0;
        $312 = $311&65535;
        $313 = ($$37$i|0)==($312|0);
        if (!($313)) {
         $314 = (($$37$i) - ($312))|0;
         $315 = (($$idx$val) + ($308<<2)|0);
         $316 = HEAP16[$315>>1]|0;
         $317 = $316&65535;
         $318 = Math_imul($317, $314)|0;
         $319 = HEAP32[$222>>2]|0;
         $320 = (($318) + ($319))|0;
         HEAP32[$222>>2] = $320;
         HEAP16[$310>>1] = $302;
        }
        $321 = (($$0116$ph$i132) + -1)|0;
        $322 = ($321|0)==(0);
        if ($322) {
         $$2111$ph$i$lcssa = $306;
         break;
        } else {
         $$0116$ph$i132 = $321;$$2111$ph$i133 = $306;
        }
       }
      }
      $323 = (($$37$i) + -1)|0;
      $324 = ($323|0)==(0);
      if ($324) {
       break L73;
      }
      $$phi$trans$insert$i = (((($0)) + 2876|0) + ($323<<1)|0);
      $$pre$i = HEAP16[$$phi$trans$insert$i>>1]|0;
      $$11109$i = $$2111$ph$i$lcssa;$$37$i = $323;$303 = $$pre$i;
     }
    }
   }
  }
 } while(0);
 $$02329$i = 0;$$02528$i = 1;
 while(1) {
  $326 = $$02329$i & 65534;
  $327 = (($$02528$i) + -1)|0;
  $328 = (((($0)) + 2876|0) + ($327<<1)|0);
  $329 = HEAP16[$328>>1]|0;
  $330 = $329&65535;
  $331 = (($330) + ($326))|0;
  $332 = $331 << 1;
  $333 = $332&65535;
  $334 = (($2) + ($$02528$i<<1)|0);
  HEAP16[$334>>1] = $333;
  $335 = (($$02528$i) + 1)|0;
  $exitcond30$i = ($335|0)==(16);
  if ($exitcond30$i) {
   break;
  } else {
   $$02329$i = $332;$$02528$i = $335;
  }
 }
 $325 = ($$2$lcssa|0)<(0);
 if ($325) {
  STACKTOP = sp;return;
 } else {
  $$02426$i = 0;
 }
 while(1) {
  $336 = (((($3) + ($$02426$i<<2)|0)) + 2|0);
  $337 = HEAP16[$336>>1]|0;
  $338 = $337&65535;
  $339 = ($337<<16>>16)==(0);
  if (!($339)) {
   $340 = (($2) + ($338<<1)|0);
   $341 = HEAP16[$340>>1]|0;
   $342 = (($341) + 1)<<16>>16;
   HEAP16[$340>>1] = $342;
   $343 = $341&65535;
   $$0$i$i = 0;$$07$i$i = $338;$$08$i$i = $343;
   while(1) {
    $344 = $$08$i$i & 1;
    $345 = $$0$i$i | $344;
    $346 = $$08$i$i >>> 1;
    $347 = $345 << 1;
    $348 = (($$07$i$i) + -1)|0;
    $349 = ($$07$i$i|0)>(1);
    if ($349) {
     $$0$i$i = $347;$$07$i$i = $348;$$08$i$i = $346;
    } else {
     break;
    }
   }
   $350 = $345&65535;
   $351 = (($3) + ($$02426$i<<2)|0);
   HEAP16[$351>>1] = $350;
  }
  $352 = (($$02426$i) + 1)|0;
  $exitcond$i = ($$02426$i|0)==($$2$lcssa|0);
  if ($exitcond$i) {
   break;
  } else {
   $$02426$i = $352;
  }
 }
 STACKTOP = sp;return;
}
function _compress_block($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$ph = 0, $$phi$trans$insert = 0, $$phi$trans$insert205 = 0, $$pre = 0, $$pre$phi207Z2D = 0, $$pre$phiZ2D = 0, $$pre206 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, $storemerge203 = 0, $storemerge204$sink = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 5792|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$phi$trans$insert = ((($0)) + 5820|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$phi$trans$insert205 = ((($0)) + 5816|0);
  $$pre206 = HEAP16[$$phi$trans$insert205>>1]|0;
  $$pre$phi207Z2D = $$phi$trans$insert205;$$pre$phiZ2D = $$phi$trans$insert;$209 = $$pre;$216 = $$pre206;
 } else {
  $6 = ((($0)) + 5796|0);
  $7 = ((($0)) + 5784|0);
  $8 = ((($0)) + 5820|0);
  $9 = ((($0)) + 5816|0);
  $10 = ((($0)) + 8|0);
  $11 = ((($0)) + 20|0);
  $$0 = 0;
  while(1) {
   $12 = HEAP32[$6>>2]|0;
   $13 = (($12) + ($$0<<1)|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = $14&65535;
   $16 = HEAP32[$7>>2]|0;
   $17 = (($$0) + 1)|0;
   $18 = (($16) + ($$0)|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $21 = ($14<<16>>16)==(0);
   do {
    if ($21) {
     $22 = (((($1) + ($20<<2)|0)) + 2|0);
     $23 = HEAP16[$22>>1]|0;
     $24 = $23&65535;
     $25 = HEAP32[$8>>2]|0;
     $26 = (16 - ($24))|0;
     $27 = ($25|0)>($26|0);
     $28 = (($1) + ($20<<2)|0);
     $29 = HEAP16[$28>>1]|0;
     $30 = $29&65535;
     $31 = $30 << $25;
     $32 = HEAP16[$9>>1]|0;
     $33 = $32&65535;
     $34 = $33 | $31;
     $35 = $34&65535;
     HEAP16[$9>>1] = $35;
     if ($27) {
      $36 = $34&255;
      $37 = HEAP32[$10>>2]|0;
      $38 = HEAP32[$11>>2]|0;
      $39 = (($38) + 1)|0;
      HEAP32[$11>>2] = $39;
      $40 = (($37) + ($38)|0);
      HEAP8[$40>>0] = $36;
      $41 = HEAP16[$9>>1]|0;
      $42 = ($41&65535) >>> 8;
      $43 = $42&255;
      $44 = HEAP32[$10>>2]|0;
      $45 = HEAP32[$11>>2]|0;
      $46 = (($45) + 1)|0;
      HEAP32[$11>>2] = $46;
      $47 = (($44) + ($45)|0);
      HEAP8[$47>>0] = $43;
      $48 = HEAP32[$8>>2]|0;
      $49 = (16 - ($48))|0;
      $50 = $30 >>> $49;
      $51 = $50&65535;
      HEAP16[$9>>1] = $51;
      $52 = (($24) + -16)|0;
      $53 = (($52) + ($48))|0;
      $$ph = $51;$storemerge204$sink = $53;
      label = 23;
      break;
     } else {
      $54 = (($25) + ($24))|0;
      $$ph = $35;$storemerge204$sink = $54;
      label = 23;
      break;
     }
    } else {
     $55 = (19336 + ($20)|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56&255;
     $58 = $57 | 256;
     $59 = (($58) + 1)|0;
     $60 = (((($1) + ($59<<2)|0)) + 2|0);
     $61 = HEAP16[$60>>1]|0;
     $62 = $61&65535;
     $63 = HEAP32[$8>>2]|0;
     $64 = (16 - ($62))|0;
     $65 = ($63|0)>($64|0);
     $66 = (($1) + ($59<<2)|0);
     $67 = HEAP16[$66>>1]|0;
     $68 = $67&65535;
     $69 = $68 << $63;
     $70 = HEAP16[$9>>1]|0;
     $71 = $70&65535;
     $72 = $71 | $69;
     $73 = $72&65535;
     HEAP16[$9>>1] = $73;
     if ($65) {
      $74 = $72&255;
      $75 = HEAP32[$10>>2]|0;
      $76 = HEAP32[$11>>2]|0;
      $77 = (($76) + 1)|0;
      HEAP32[$11>>2] = $77;
      $78 = (($75) + ($76)|0);
      HEAP8[$78>>0] = $74;
      $79 = HEAP16[$9>>1]|0;
      $80 = ($79&65535) >>> 8;
      $81 = $80&255;
      $82 = HEAP32[$10>>2]|0;
      $83 = HEAP32[$11>>2]|0;
      $84 = (($83) + 1)|0;
      HEAP32[$11>>2] = $84;
      $85 = (($82) + ($83)|0);
      HEAP8[$85>>0] = $81;
      $86 = HEAP32[$8>>2]|0;
      $87 = (16 - ($86))|0;
      $88 = $68 >>> $87;
      $89 = $88&65535;
      HEAP16[$9>>1] = $89;
      $90 = (($62) + -16)|0;
      $91 = (($90) + ($86))|0;
      $106 = $89;$93 = $91;
     } else {
      $92 = (($63) + ($62))|0;
      $106 = $73;$93 = $92;
     }
     HEAP32[$8>>2] = $93;
     $94 = (8996 + ($57<<2)|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = (($57) + -8)|0;
     $97 = ($96>>>0)<(20);
     if ($97) {
      $98 = (9112 + ($57<<2)|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = (($20) - ($99))|0;
      $101 = (16 - ($95))|0;
      $102 = ($93|0)>($101|0);
      $103 = $100 & 65535;
      $104 = $103 << $93;
      $105 = $106&65535;
      $107 = $104 | $105;
      $108 = $107&65535;
      HEAP16[$9>>1] = $108;
      if ($102) {
       $109 = $107&255;
       $110 = HEAP32[$10>>2]|0;
       $111 = HEAP32[$11>>2]|0;
       $112 = (($111) + 1)|0;
       HEAP32[$11>>2] = $112;
       $113 = (($110) + ($111)|0);
       HEAP8[$113>>0] = $109;
       $114 = HEAP16[$9>>1]|0;
       $115 = ($114&65535) >>> 8;
       $116 = $115&255;
       $117 = HEAP32[$10>>2]|0;
       $118 = HEAP32[$11>>2]|0;
       $119 = (($118) + 1)|0;
       HEAP32[$11>>2] = $119;
       $120 = (($117) + ($118)|0);
       HEAP8[$120>>0] = $116;
       $121 = HEAP32[$8>>2]|0;
       $122 = (16 - ($121))|0;
       $123 = $103 >>> $122;
       $124 = $123&65535;
       HEAP16[$9>>1] = $124;
       $125 = (($95) + -16)|0;
       $126 = (($125) + ($121))|0;
       $240 = $124;$storemerge203 = $126;
      } else {
       $127 = (($93) + ($95))|0;
       $240 = $108;$storemerge203 = $127;
      }
      HEAP32[$8>>2] = $storemerge203;
      $139 = $storemerge203;$146 = $240;
     } else {
      $139 = $93;$146 = $106;
     }
     $128 = (($15) + -1)|0;
     $129 = ($128>>>0)<(256);
     $130 = $128 >>> 7;
     $131 = (($130) + 256)|0;
     $$sink = $129 ? $128 : $131;
     $132 = (18824 + ($$sink)|0);
     $133 = HEAP8[$132>>0]|0;
     $134 = $133&255;
     $135 = (((($2) + ($134<<2)|0)) + 2|0);
     $136 = HEAP16[$135>>1]|0;
     $137 = $136&65535;
     $138 = (16 - ($137))|0;
     $140 = ($139|0)>($138|0);
     $141 = (($2) + ($134<<2)|0);
     $142 = HEAP16[$141>>1]|0;
     $143 = $142&65535;
     $144 = $143 << $139;
     $145 = $146&65535;
     $147 = $145 | $144;
     $148 = $147&65535;
     HEAP16[$9>>1] = $148;
     if ($140) {
      $149 = $147&255;
      $150 = HEAP32[$10>>2]|0;
      $151 = HEAP32[$11>>2]|0;
      $152 = (($151) + 1)|0;
      HEAP32[$11>>2] = $152;
      $153 = (($150) + ($151)|0);
      HEAP8[$153>>0] = $149;
      $154 = HEAP16[$9>>1]|0;
      $155 = ($154&65535) >>> 8;
      $156 = $155&255;
      $157 = HEAP32[$10>>2]|0;
      $158 = HEAP32[$11>>2]|0;
      $159 = (($158) + 1)|0;
      HEAP32[$11>>2] = $159;
      $160 = (($157) + ($158)|0);
      HEAP8[$160>>0] = $156;
      $161 = HEAP32[$8>>2]|0;
      $162 = (16 - ($161))|0;
      $163 = $143 >>> $162;
      $164 = $163&65535;
      HEAP16[$9>>1] = $164;
      $165 = (($137) + -16)|0;
      $166 = (($165) + ($161))|0;
      $168 = $166;$181 = $164;
     } else {
      $167 = (($139) + ($137))|0;
      $168 = $167;$181 = $148;
     }
     HEAP32[$8>>2] = $168;
     $169 = (8876 + ($134<<2)|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = (($134) + -4)|0;
     $172 = ($171>>>0)<(26);
     if ($172) {
      $173 = (9228 + ($134<<2)|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = (($128) - ($174))|0;
      $176 = (16 - ($170))|0;
      $177 = ($168|0)>($176|0);
      $178 = $175 & 65535;
      $179 = $178 << $168;
      $180 = $181&65535;
      $182 = $179 | $180;
      $183 = $182&65535;
      HEAP16[$9>>1] = $183;
      if ($177) {
       $184 = $182&255;
       $185 = HEAP32[$10>>2]|0;
       $186 = HEAP32[$11>>2]|0;
       $187 = (($186) + 1)|0;
       HEAP32[$11>>2] = $187;
       $188 = (($185) + ($186)|0);
       HEAP8[$188>>0] = $184;
       $189 = HEAP16[$9>>1]|0;
       $190 = ($189&65535) >>> 8;
       $191 = $190&255;
       $192 = HEAP32[$10>>2]|0;
       $193 = HEAP32[$11>>2]|0;
       $194 = (($193) + 1)|0;
       HEAP32[$11>>2] = $194;
       $195 = (($192) + ($193)|0);
       HEAP8[$195>>0] = $191;
       $196 = HEAP32[$8>>2]|0;
       $197 = (16 - ($196))|0;
       $198 = $178 >>> $197;
       $199 = $198&65535;
       HEAP16[$9>>1] = $199;
       $200 = (($170) + -16)|0;
       $201 = (($200) + ($196))|0;
       $$ph = $199;$storemerge204$sink = $201;
       label = 23;
       break;
      } else {
       $202 = (($168) + ($170))|0;
       $$ph = $183;$storemerge204$sink = $202;
       label = 23;
       break;
      }
     } else {
      $241 = $181;$242 = $168;
     }
    }
   } while(0);
   if ((label|0) == 23) {
    label = 0;
    HEAP32[$8>>2] = $storemerge204$sink;
    $241 = $$ph;$242 = $storemerge204$sink;
   }
   $203 = HEAP32[$3>>2]|0;
   $204 = ($17>>>0)<($203>>>0);
   if ($204) {
    $$0 = $17;
   } else {
    $$pre$phi207Z2D = $9;$$pre$phiZ2D = $8;$209 = $242;$216 = $241;
    break;
   }
  }
 }
 $205 = ((($1)) + 1026|0);
 $206 = HEAP16[$205>>1]|0;
 $207 = $206&65535;
 $208 = (16 - ($207))|0;
 $210 = ($209|0)>($208|0);
 $211 = ((($1)) + 1024|0);
 $212 = HEAP16[$211>>1]|0;
 $213 = $212&65535;
 $214 = $213 << $209;
 $215 = $216&65535;
 $217 = $215 | $214;
 $218 = $217&65535;
 HEAP16[$$pre$phi207Z2D>>1] = $218;
 if ($210) {
  $219 = $217&255;
  $220 = ((($0)) + 8|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = ((($0)) + 20|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = (($223) + 1)|0;
  HEAP32[$222>>2] = $224;
  $225 = (($221) + ($223)|0);
  HEAP8[$225>>0] = $219;
  $226 = HEAP16[$$pre$phi207Z2D>>1]|0;
  $227 = ($226&65535) >>> 8;
  $228 = $227&255;
  $229 = HEAP32[$220>>2]|0;
  $230 = HEAP32[$222>>2]|0;
  $231 = (($230) + 1)|0;
  HEAP32[$222>>2] = $231;
  $232 = (($229) + ($230)|0);
  HEAP8[$232>>0] = $228;
  $233 = HEAP32[$$pre$phiZ2D>>2]|0;
  $234 = (16 - ($233))|0;
  $235 = $213 >>> $234;
  $236 = $235&65535;
  HEAP16[$$pre$phi207Z2D>>1] = $236;
  $237 = (($207) + -16)|0;
  $238 = (($237) + ($233))|0;
  $storemerge = $238;
  HEAP32[$$pre$phiZ2D>>2] = $storemerge;
  return;
 } else {
  $239 = (($209) + ($207))|0;
  $storemerge = $239;
  HEAP32[$$pre$phiZ2D>>2] = $storemerge;
  return;
 }
}
function _send_tree($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$273 = 0, $$$274 = 0, $$0 = 0, $$0$ph = 0, $$0255$ph = 0, $$0255$ph$phi = 0, $$0256$ph = 0, $$0257 = 0, $$1258 = 0, $$1260$ph = 0, $$1263$ph = 0, $$2 = 0, $$272 = 0, $$274 = 0, $$pre = 0, $$pre287 = 0, $$pre288 = 0, $$pre289 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $storemerge267$sink = 0, $storemerge270 = 0, $storemerge271 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 2|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ($4<<16>>16)==(0);
 $$ = $6 ? 3 : 4;
 $$272 = $6 ? 138 : 7;
 $7 = ((($0)) + 2754|0);
 $8 = ((($0)) + 5820|0);
 $9 = ((($0)) + 2752|0);
 $10 = ((($0)) + 5816|0);
 $11 = ((($0)) + 8|0);
 $12 = ((($0)) + 20|0);
 $13 = ((($0)) + 2758|0);
 $14 = ((($0)) + 2756|0);
 $15 = ((($0)) + 2750|0);
 $16 = ((($0)) + 2748|0);
 $$0$ph = 0;$$0255$ph = -1;$$0256$ph = $5;$$1260$ph = $$272;$$1263$ph = $$;
 L1: while(1) {
  $$0 = $$0$ph;$$0257 = 0;
  while(1) {
   $17 = ($$0|0)>($2|0);
   if ($17) {
    break L1;
   }
   $18 = (($$0) + 1)|0;
   $19 = (((($1) + ($18<<2)|0)) + 2|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = $20&65535;
   $22 = (($$0257) + 1)|0;
   $23 = ($22|0)<($$1260$ph|0);
   $24 = ($$0256$ph|0)==($21|0);
   $or$cond = $23 & $24;
   if ($or$cond) {
    $$0 = $18;$$0257 = $22;
   } else {
    break;
   }
  }
  $25 = ($22|0)<($$1263$ph|0);
  if ($25) {
   $26 = (((((($0)) + 2684|0) + ($$0256$ph<<2)|0)) + 2|0);
   $27 = (((($0)) + 2684|0) + ($$0256$ph<<2)|0);
   $$pre288 = HEAP32[$8>>2]|0;
   $$pre289 = HEAP16[$10>>1]|0;
   $$1258 = $22;$31 = $$pre288;$37 = $$pre289;
   while(1) {
    $28 = HEAP16[$26>>1]|0;
    $29 = $28&65535;
    $30 = (16 - ($29))|0;
    $32 = ($31|0)>($30|0);
    $33 = HEAP16[$27>>1]|0;
    $34 = $33&65535;
    $35 = $34 << $31;
    $36 = $37&65535;
    $38 = $36 | $35;
    $39 = $38&65535;
    HEAP16[$10>>1] = $39;
    if ($32) {
     $40 = $38&255;
     $41 = HEAP32[$11>>2]|0;
     $42 = HEAP32[$12>>2]|0;
     $43 = (($42) + 1)|0;
     HEAP32[$12>>2] = $43;
     $44 = (($41) + ($42)|0);
     HEAP8[$44>>0] = $40;
     $45 = HEAP16[$10>>1]|0;
     $46 = ($45&65535) >>> 8;
     $47 = $46&255;
     $48 = HEAP32[$11>>2]|0;
     $49 = HEAP32[$12>>2]|0;
     $50 = (($49) + 1)|0;
     HEAP32[$12>>2] = $50;
     $51 = (($48) + ($49)|0);
     HEAP8[$51>>0] = $47;
     $52 = HEAP32[$8>>2]|0;
     $53 = (16 - ($52))|0;
     $54 = $34 >>> $53;
     $55 = $54&65535;
     HEAP16[$10>>1] = $55;
     $56 = (($29) + -16)|0;
     $57 = (($56) + ($52))|0;
     $273 = $55;$storemerge271 = $57;
    } else {
     $58 = (($31) + ($29))|0;
     $273 = $39;$storemerge271 = $58;
    }
    HEAP32[$8>>2] = $storemerge271;
    $59 = (($$1258) + -1)|0;
    $60 = ($59|0)==(0);
    if ($60) {
     break;
    } else {
     $$1258 = $59;$31 = $storemerge271;$37 = $273;
    }
   }
  } else {
   $61 = ($$0256$ph|0)==(0);
   do {
    if ($61) {
     $154 = ($22|0)<(11);
     if ($154) {
      $155 = HEAP16[$7>>1]|0;
      $156 = $155&65535;
      $157 = HEAP32[$8>>2]|0;
      $158 = (16 - ($156))|0;
      $159 = ($157|0)>($158|0);
      $160 = HEAP16[$9>>1]|0;
      $161 = $160&65535;
      $162 = $161 << $157;
      $163 = HEAP16[$10>>1]|0;
      $164 = $163&65535;
      $165 = $164 | $162;
      $166 = $165&65535;
      HEAP16[$10>>1] = $166;
      if ($159) {
       $167 = $165&255;
       $168 = HEAP32[$11>>2]|0;
       $169 = HEAP32[$12>>2]|0;
       $170 = (($169) + 1)|0;
       HEAP32[$12>>2] = $170;
       $171 = (($168) + ($169)|0);
       HEAP8[$171>>0] = $167;
       $172 = HEAP16[$10>>1]|0;
       $173 = ($172&65535) >>> 8;
       $174 = $173&255;
       $175 = HEAP32[$11>>2]|0;
       $176 = HEAP32[$12>>2]|0;
       $177 = (($176) + 1)|0;
       HEAP32[$12>>2] = $177;
       $178 = (($175) + ($176)|0);
       HEAP8[$178>>0] = $174;
       $179 = HEAP32[$8>>2]|0;
       $180 = (16 - ($179))|0;
       $181 = $161 >>> $180;
       $182 = $181&65535;
       HEAP16[$10>>1] = $182;
       $183 = (($156) + -16)|0;
       $184 = (($183) + ($179))|0;
       $186 = $184;$192 = $181;
      } else {
       $185 = (($157) + ($156))|0;
       $186 = $185;$192 = $165;
      }
      HEAP32[$8>>2] = $186;
      $187 = ($186|0)>(13);
      $188 = (($$0257) + 65534)|0;
      $189 = $188 & 65535;
      $190 = $189 << $186;
      $191 = $192 & 65535;
      $193 = $191 | $190;
      $194 = $193&65535;
      HEAP16[$10>>1] = $194;
      if ($187) {
       $195 = $193&255;
       $196 = HEAP32[$11>>2]|0;
       $197 = HEAP32[$12>>2]|0;
       $198 = (($197) + 1)|0;
       HEAP32[$12>>2] = $198;
       $199 = (($196) + ($197)|0);
       HEAP8[$199>>0] = $195;
       $200 = HEAP16[$10>>1]|0;
       $201 = ($200&65535) >>> 8;
       $202 = $201&255;
       $203 = HEAP32[$11>>2]|0;
       $204 = HEAP32[$12>>2]|0;
       $205 = (($204) + 1)|0;
       HEAP32[$12>>2] = $205;
       $206 = (($203) + ($204)|0);
       HEAP8[$206>>0] = $202;
       $207 = HEAP32[$8>>2]|0;
       $208 = (16 - ($207))|0;
       $209 = $189 >>> $208;
       $210 = $209&65535;
       HEAP16[$10>>1] = $210;
       $211 = (($207) + -13)|0;
       $storemerge267$sink = $211;
       break;
      } else {
       $212 = (($186) + 3)|0;
       $storemerge267$sink = $212;
       break;
      }
     } else {
      $213 = HEAP16[$13>>1]|0;
      $214 = $213&65535;
      $215 = HEAP32[$8>>2]|0;
      $216 = (16 - ($214))|0;
      $217 = ($215|0)>($216|0);
      $218 = HEAP16[$14>>1]|0;
      $219 = $218&65535;
      $220 = $219 << $215;
      $221 = HEAP16[$10>>1]|0;
      $222 = $221&65535;
      $223 = $222 | $220;
      $224 = $223&65535;
      HEAP16[$10>>1] = $224;
      if ($217) {
       $225 = $223&255;
       $226 = HEAP32[$11>>2]|0;
       $227 = HEAP32[$12>>2]|0;
       $228 = (($227) + 1)|0;
       HEAP32[$12>>2] = $228;
       $229 = (($226) + ($227)|0);
       HEAP8[$229>>0] = $225;
       $230 = HEAP16[$10>>1]|0;
       $231 = ($230&65535) >>> 8;
       $232 = $231&255;
       $233 = HEAP32[$11>>2]|0;
       $234 = HEAP32[$12>>2]|0;
       $235 = (($234) + 1)|0;
       HEAP32[$12>>2] = $235;
       $236 = (($233) + ($234)|0);
       HEAP8[$236>>0] = $232;
       $237 = HEAP32[$8>>2]|0;
       $238 = (16 - ($237))|0;
       $239 = $219 >>> $238;
       $240 = $239&65535;
       HEAP16[$10>>1] = $240;
       $241 = (($214) + -16)|0;
       $242 = (($241) + ($237))|0;
       $244 = $242;$250 = $239;
      } else {
       $243 = (($215) + ($214))|0;
       $244 = $243;$250 = $223;
      }
      HEAP32[$8>>2] = $244;
      $245 = ($244|0)>(9);
      $246 = (($$0257) + 65526)|0;
      $247 = $246 & 65535;
      $248 = $247 << $244;
      $249 = $250 & 65535;
      $251 = $249 | $248;
      $252 = $251&65535;
      HEAP16[$10>>1] = $252;
      if ($245) {
       $253 = $251&255;
       $254 = HEAP32[$11>>2]|0;
       $255 = HEAP32[$12>>2]|0;
       $256 = (($255) + 1)|0;
       HEAP32[$12>>2] = $256;
       $257 = (($254) + ($255)|0);
       HEAP8[$257>>0] = $253;
       $258 = HEAP16[$10>>1]|0;
       $259 = ($258&65535) >>> 8;
       $260 = $259&255;
       $261 = HEAP32[$11>>2]|0;
       $262 = HEAP32[$12>>2]|0;
       $263 = (($262) + 1)|0;
       HEAP32[$12>>2] = $263;
       $264 = (($261) + ($262)|0);
       HEAP8[$264>>0] = $260;
       $265 = HEAP32[$8>>2]|0;
       $266 = (16 - ($265))|0;
       $267 = $247 >>> $266;
       $268 = $267&65535;
       HEAP16[$10>>1] = $268;
       $269 = (($265) + -9)|0;
       $storemerge267$sink = $269;
       break;
      } else {
       $270 = (($244) + 7)|0;
       $storemerge267$sink = $270;
       break;
      }
     }
    } else {
     $62 = ($$0256$ph|0)==($$0255$ph|0);
     if ($62) {
      $$pre = HEAP32[$8>>2]|0;
      $$pre287 = HEAP16[$10>>1]|0;
      $$2 = $22;$105 = $$pre287;$99 = $$pre;
     } else {
      $63 = (((((($0)) + 2684|0) + ($$0256$ph<<2)|0)) + 2|0);
      $64 = HEAP16[$63>>1]|0;
      $65 = $64&65535;
      $66 = HEAP32[$8>>2]|0;
      $67 = (16 - ($65))|0;
      $68 = ($66|0)>($67|0);
      $69 = (((($0)) + 2684|0) + ($$0256$ph<<2)|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = $70&65535;
      $72 = $71 << $66;
      $73 = HEAP16[$10>>1]|0;
      $74 = $73&65535;
      $75 = $74 | $72;
      $76 = $75&65535;
      HEAP16[$10>>1] = $76;
      if ($68) {
       $77 = $75&255;
       $78 = HEAP32[$11>>2]|0;
       $79 = HEAP32[$12>>2]|0;
       $80 = (($79) + 1)|0;
       HEAP32[$12>>2] = $80;
       $81 = (($78) + ($79)|0);
       HEAP8[$81>>0] = $77;
       $82 = HEAP16[$10>>1]|0;
       $83 = ($82&65535) >>> 8;
       $84 = $83&255;
       $85 = HEAP32[$11>>2]|0;
       $86 = HEAP32[$12>>2]|0;
       $87 = (($86) + 1)|0;
       HEAP32[$12>>2] = $87;
       $88 = (($85) + ($86)|0);
       HEAP8[$88>>0] = $84;
       $89 = HEAP32[$8>>2]|0;
       $90 = (16 - ($89))|0;
       $91 = $71 >>> $90;
       $92 = $91&65535;
       HEAP16[$10>>1] = $92;
       $93 = (($65) + -16)|0;
       $94 = (($93) + ($89))|0;
       $274 = $92;$storemerge270 = $94;
      } else {
       $95 = (($66) + ($65))|0;
       $274 = $76;$storemerge270 = $95;
      }
      HEAP32[$8>>2] = $storemerge270;
      $$2 = $$0257;$105 = $274;$99 = $storemerge270;
     }
     $96 = HEAP16[$15>>1]|0;
     $97 = $96&65535;
     $98 = (16 - ($97))|0;
     $100 = ($99|0)>($98|0);
     $101 = HEAP16[$16>>1]|0;
     $102 = $101&65535;
     $103 = $102 << $99;
     $104 = $105&65535;
     $106 = $104 | $103;
     $107 = $106&65535;
     HEAP16[$10>>1] = $107;
     if ($100) {
      $108 = $106&255;
      $109 = HEAP32[$11>>2]|0;
      $110 = HEAP32[$12>>2]|0;
      $111 = (($110) + 1)|0;
      HEAP32[$12>>2] = $111;
      $112 = (($109) + ($110)|0);
      HEAP8[$112>>0] = $108;
      $113 = HEAP16[$10>>1]|0;
      $114 = ($113&65535) >>> 8;
      $115 = $114&255;
      $116 = HEAP32[$11>>2]|0;
      $117 = HEAP32[$12>>2]|0;
      $118 = (($117) + 1)|0;
      HEAP32[$12>>2] = $118;
      $119 = (($116) + ($117)|0);
      HEAP8[$119>>0] = $115;
      $120 = HEAP32[$8>>2]|0;
      $121 = (16 - ($120))|0;
      $122 = $102 >>> $121;
      $123 = $122&65535;
      HEAP16[$10>>1] = $123;
      $124 = (($97) + -16)|0;
      $125 = (($124) + ($120))|0;
      $127 = $125;$133 = $122;
     } else {
      $126 = (($99) + ($97))|0;
      $127 = $126;$133 = $106;
     }
     HEAP32[$8>>2] = $127;
     $128 = ($127|0)>(14);
     $129 = (($$2) + 65533)|0;
     $130 = $129 & 65535;
     $131 = $130 << $127;
     $132 = $133 & 65535;
     $134 = $132 | $131;
     $135 = $134&65535;
     HEAP16[$10>>1] = $135;
     if ($128) {
      $136 = $134&255;
      $137 = HEAP32[$11>>2]|0;
      $138 = HEAP32[$12>>2]|0;
      $139 = (($138) + 1)|0;
      HEAP32[$12>>2] = $139;
      $140 = (($137) + ($138)|0);
      HEAP8[$140>>0] = $136;
      $141 = HEAP16[$10>>1]|0;
      $142 = ($141&65535) >>> 8;
      $143 = $142&255;
      $144 = HEAP32[$11>>2]|0;
      $145 = HEAP32[$12>>2]|0;
      $146 = (($145) + 1)|0;
      HEAP32[$12>>2] = $146;
      $147 = (($144) + ($145)|0);
      HEAP8[$147>>0] = $143;
      $148 = HEAP32[$8>>2]|0;
      $149 = (16 - ($148))|0;
      $150 = $130 >>> $149;
      $151 = $150&65535;
      HEAP16[$10>>1] = $151;
      $152 = (($148) + -14)|0;
      $storemerge267$sink = $152;
      break;
     } else {
      $153 = (($127) + 2)|0;
      $storemerge267$sink = $153;
      break;
     }
    }
   } while(0);
   HEAP32[$8>>2] = $storemerge267$sink;
  }
  $271 = ($20<<16>>16)==(0);
  $$274 = $24 ? 6 : 7;
  $272 = $271 | $24;
  $$$273 = $272 ? 3 : 4;
  $$$274 = $271 ? 138 : $$274;
  $$0255$ph$phi = $$0256$ph;$$0$ph = $18;$$0256$ph = $21;$$1260$ph = $$$274;$$1263$ph = $$$273;$$0255$ph = $$0255$ph$phi;
 }
 return;
}
function _zcalloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = Math_imul($2, $1)|0;
 $4 = (_malloc($3)|0);
 return ($4|0);
}
function _zcfree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($1);
 return;
}
function _adler32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$1184 = 0, $$0 = 0, $$0173 = 0, $$0174198 = 0, $$0178197 = 0, $$0190 = 0, $$1$lcssa = 0, $$1175$lcssa245248 = 0, $$1175220 = 0, $$1179$lcssa244249 = 0, $$1179219 = 0, $$1184$lcssa = 0, $$1184196 = 0, $$1199 = 0, $$2$lcssa246247 = 0, $$2176211 = 0, $$2180 = 0, $$2221 = 0, $$3 = 0;
 var $$3177203 = 0, $$3181210 = 0, $$3186$lcssa243250 = 0, $$3186218 = 0, $$4182202 = 0, $$4187 = 0, $$4212 = 0, $$5$lcssa = 0, $$5188209 = 0, $$5204 = 0, $$6 = 0, $$6189$lcssa = 0, $$6189201 = 0, $$7 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep = 0, $scevgep241 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0 >>> 16;
 $4 = $0 & 65535;
 $5 = ($2|0)==(1);
 if ($5) {
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $8 = (($7) + ($4))|0;
  $9 = ($8>>>0)>(65520);
  $10 = (($8) + -65521)|0;
  $$ = $9 ? $10 : $8;
  $11 = (($$) + ($3))|0;
  $12 = ($11>>>0)>(65520);
  $13 = (($11) + 15)|0;
  $$0173 = $12 ? $13 : $11;
  $14 = $$0173 << 16;
  $15 = $14 | $$;
  $$0190 = $15;
  return ($$0190|0);
 }
 $16 = ($1|0)==(0|0);
 if ($16) {
  $$0190 = 1;
  return ($$0190|0);
 }
 $17 = ($2>>>0)<(16);
 if ($17) {
  $19 = ($2|0)==(0);
  if ($19) {
   $$1$lcssa = $3;$$1184$lcssa = $4;
  } else {
   $$0174198 = $2;$$0178197 = $1;$$1184196 = $4;$$1199 = $3;
   while(1) {
    $20 = (($$0174198) + -1)|0;
    $21 = ((($$0178197)) + 1|0);
    $22 = HEAP8[$$0178197>>0]|0;
    $23 = $22&255;
    $24 = (($23) + ($$1184196))|0;
    $25 = (($24) + ($$1199))|0;
    $26 = ($20|0)==(0);
    if ($26) {
     $$1$lcssa = $25;$$1184$lcssa = $24;
     break;
    } else {
     $$0174198 = $20;$$0178197 = $21;$$1184196 = $24;$$1199 = $25;
    }
   }
  }
  $27 = ($$1184$lcssa>>>0)>(65520);
  $28 = (($$1184$lcssa) + -65521)|0;
  $$$1184 = $27 ? $28 : $$1184$lcssa;
  $29 = (($$1$lcssa>>>0) % 65521)&-1;
  $30 = $29 << 16;
  $31 = $30 | $$$1184;
  $$0190 = $31;
  return ($$0190|0);
 }
 $18 = ($2>>>0)>(5551);
 if ($18) {
  $$1175220 = $2;$$1179219 = $1;$$2221 = $3;$$3186218 = $4;
  while(1) {
   $32 = (($$1175220) + -5552)|0;
   $$0 = 347;$$2180 = $$1179219;$$3 = $$2221;$$4187 = $$3186218;
   while(1) {
    $33 = HEAP8[$$2180>>0]|0;
    $34 = $33&255;
    $35 = (($34) + ($$4187))|0;
    $36 = (($35) + ($$3))|0;
    $37 = ((($$2180)) + 1|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38&255;
    $40 = (($35) + ($39))|0;
    $41 = (($36) + ($40))|0;
    $42 = ((($$2180)) + 2|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43&255;
    $45 = (($40) + ($44))|0;
    $46 = (($41) + ($45))|0;
    $47 = ((($$2180)) + 3|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48&255;
    $50 = (($45) + ($49))|0;
    $51 = (($46) + ($50))|0;
    $52 = ((($$2180)) + 4|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = (($50) + ($54))|0;
    $56 = (($51) + ($55))|0;
    $57 = ((($$2180)) + 5|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = $58&255;
    $60 = (($55) + ($59))|0;
    $61 = (($56) + ($60))|0;
    $62 = ((($$2180)) + 6|0);
    $63 = HEAP8[$62>>0]|0;
    $64 = $63&255;
    $65 = (($60) + ($64))|0;
    $66 = (($61) + ($65))|0;
    $67 = ((($$2180)) + 7|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68&255;
    $70 = (($65) + ($69))|0;
    $71 = (($66) + ($70))|0;
    $72 = ((($$2180)) + 8|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = $73&255;
    $75 = (($70) + ($74))|0;
    $76 = (($71) + ($75))|0;
    $77 = ((($$2180)) + 9|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = $78&255;
    $80 = (($75) + ($79))|0;
    $81 = (($76) + ($80))|0;
    $82 = ((($$2180)) + 10|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $83&255;
    $85 = (($80) + ($84))|0;
    $86 = (($81) + ($85))|0;
    $87 = ((($$2180)) + 11|0);
    $88 = HEAP8[$87>>0]|0;
    $89 = $88&255;
    $90 = (($85) + ($89))|0;
    $91 = (($86) + ($90))|0;
    $92 = ((($$2180)) + 12|0);
    $93 = HEAP8[$92>>0]|0;
    $94 = $93&255;
    $95 = (($90) + ($94))|0;
    $96 = (($91) + ($95))|0;
    $97 = ((($$2180)) + 13|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = $98&255;
    $100 = (($95) + ($99))|0;
    $101 = (($96) + ($100))|0;
    $102 = ((($$2180)) + 14|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103&255;
    $105 = (($100) + ($104))|0;
    $106 = (($101) + ($105))|0;
    $107 = ((($$2180)) + 15|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = $108&255;
    $110 = (($105) + ($109))|0;
    $111 = (($106) + ($110))|0;
    $112 = ((($$2180)) + 16|0);
    $113 = (($$0) + -1)|0;
    $114 = ($113|0)==(0);
    if ($114) {
     break;
    } else {
     $$0 = $113;$$2180 = $112;$$3 = $111;$$4187 = $110;
    }
   }
   $scevgep241 = ((($$1179219)) + 5552|0);
   $115 = (($110>>>0) % 65521)&-1;
   $116 = (($111>>>0) % 65521)&-1;
   $117 = ($32>>>0)>(5551);
   if ($117) {
    $$1175220 = $32;$$1179219 = $scevgep241;$$2221 = $116;$$3186218 = $115;
   } else {
    break;
   }
  }
  $118 = ($32|0)==(0);
  if ($118) {
   $$6 = $116;$$7 = $115;
  } else {
   $119 = ($32>>>0)>(15);
   if ($119) {
    $$1175$lcssa245248 = $32;$$1179$lcssa244249 = $scevgep241;$$2$lcssa246247 = $116;$$3186$lcssa243250 = $115;
    label = 14;
   } else {
    $$3177203 = $32;$$4182202 = $scevgep241;$$5204 = $116;$$6189201 = $115;
    label = 17;
   }
  }
 } else {
  $$1175$lcssa245248 = $2;$$1179$lcssa244249 = $1;$$2$lcssa246247 = $3;$$3186$lcssa243250 = $4;
  label = 14;
 }
 if ((label|0) == 14) {
  $120 = (($$1175$lcssa245248) + -16)|0;
  $121 = $120 & -16;
  $122 = (($121) + 16)|0;
  $$2176211 = $$1175$lcssa245248;$$3181210 = $$1179$lcssa244249;$$4212 = $$2$lcssa246247;$$5188209 = $$3186$lcssa243250;
  while(1) {
   $125 = (($$2176211) + -16)|0;
   $126 = HEAP8[$$3181210>>0]|0;
   $127 = $126&255;
   $128 = (($127) + ($$5188209))|0;
   $129 = (($128) + ($$4212))|0;
   $130 = ((($$3181210)) + 1|0);
   $131 = HEAP8[$130>>0]|0;
   $132 = $131&255;
   $133 = (($128) + ($132))|0;
   $134 = (($129) + ($133))|0;
   $135 = ((($$3181210)) + 2|0);
   $136 = HEAP8[$135>>0]|0;
   $137 = $136&255;
   $138 = (($133) + ($137))|0;
   $139 = (($134) + ($138))|0;
   $140 = ((($$3181210)) + 3|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = (($138) + ($142))|0;
   $144 = (($139) + ($143))|0;
   $145 = ((($$3181210)) + 4|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = $146&255;
   $148 = (($143) + ($147))|0;
   $149 = (($144) + ($148))|0;
   $150 = ((($$3181210)) + 5|0);
   $151 = HEAP8[$150>>0]|0;
   $152 = $151&255;
   $153 = (($148) + ($152))|0;
   $154 = (($149) + ($153))|0;
   $155 = ((($$3181210)) + 6|0);
   $156 = HEAP8[$155>>0]|0;
   $157 = $156&255;
   $158 = (($153) + ($157))|0;
   $159 = (($154) + ($158))|0;
   $160 = ((($$3181210)) + 7|0);
   $161 = HEAP8[$160>>0]|0;
   $162 = $161&255;
   $163 = (($158) + ($162))|0;
   $164 = (($159) + ($163))|0;
   $165 = ((($$3181210)) + 8|0);
   $166 = HEAP8[$165>>0]|0;
   $167 = $166&255;
   $168 = (($163) + ($167))|0;
   $169 = (($164) + ($168))|0;
   $170 = ((($$3181210)) + 9|0);
   $171 = HEAP8[$170>>0]|0;
   $172 = $171&255;
   $173 = (($168) + ($172))|0;
   $174 = (($169) + ($173))|0;
   $175 = ((($$3181210)) + 10|0);
   $176 = HEAP8[$175>>0]|0;
   $177 = $176&255;
   $178 = (($173) + ($177))|0;
   $179 = (($174) + ($178))|0;
   $180 = ((($$3181210)) + 11|0);
   $181 = HEAP8[$180>>0]|0;
   $182 = $181&255;
   $183 = (($178) + ($182))|0;
   $184 = (($179) + ($183))|0;
   $185 = ((($$3181210)) + 12|0);
   $186 = HEAP8[$185>>0]|0;
   $187 = $186&255;
   $188 = (($183) + ($187))|0;
   $189 = (($184) + ($188))|0;
   $190 = ((($$3181210)) + 13|0);
   $191 = HEAP8[$190>>0]|0;
   $192 = $191&255;
   $193 = (($188) + ($192))|0;
   $194 = (($189) + ($193))|0;
   $195 = ((($$3181210)) + 14|0);
   $196 = HEAP8[$195>>0]|0;
   $197 = $196&255;
   $198 = (($193) + ($197))|0;
   $199 = (($194) + ($198))|0;
   $200 = ((($$3181210)) + 15|0);
   $201 = HEAP8[$200>>0]|0;
   $202 = $201&255;
   $203 = (($198) + ($202))|0;
   $204 = (($199) + ($203))|0;
   $205 = ((($$3181210)) + 16|0);
   $206 = ($125>>>0)>(15);
   if ($206) {
    $$2176211 = $125;$$3181210 = $205;$$4212 = $204;$$5188209 = $203;
   } else {
    break;
   }
  }
  $123 = (($120) - ($121))|0;
  $scevgep = (($$1179$lcssa244249) + ($122)|0);
  $124 = ($123|0)==(0);
  if ($124) {
   $$5$lcssa = $204;$$6189$lcssa = $203;
   label = 18;
  } else {
   $$3177203 = $123;$$4182202 = $scevgep;$$5204 = $204;$$6189201 = $203;
   label = 17;
  }
 }
 if ((label|0) == 17) {
  while(1) {
   label = 0;
   $207 = (($$3177203) + -1)|0;
   $208 = ((($$4182202)) + 1|0);
   $209 = HEAP8[$$4182202>>0]|0;
   $210 = $209&255;
   $211 = (($210) + ($$6189201))|0;
   $212 = (($211) + ($$5204))|0;
   $213 = ($207|0)==(0);
   if ($213) {
    $$5$lcssa = $212;$$6189$lcssa = $211;
    label = 18;
    break;
   } else {
    $$3177203 = $207;$$4182202 = $208;$$5204 = $212;$$6189201 = $211;
    label = 17;
   }
  }
 }
 if ((label|0) == 18) {
  $214 = (($$6189$lcssa>>>0) % 65521)&-1;
  $215 = (($$5$lcssa>>>0) % 65521)&-1;
  $$6 = $215;$$7 = $214;
 }
 $216 = $$6 << 16;
 $217 = $216 | $$7;
 $$0190 = $217;
 return ($$0190|0);
}
function _inflate_fast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0297 = 0, $$0300 = 0, $$0304 = 0, $$0310 = 0, $$0319 = 0, $$0328 = 0, $$1 = 0, $$10 = 0, $$10338 = 0, $$1298$lcssa = 0, $$1298$ph = 0, $$1298407 = 0, $$1301 = 0, $$1305 = 0, $$1311 = 0, $$1320 = 0, $$1329 = 0, $$2 = 0, $$2299 = 0;
 var $$2302 = 0, $$2306 = 0, $$2312 = 0, $$3 = 0, $$3303 = 0, $$3307 = 0, $$3313 = 0, $$3322 = 0, $$3331 = 0, $$4$lcssa = 0, $$4$ph = 0, $$4308 = 0, $$4314 = 0, $$4323 = 0, $$4332 = 0, $$4408 = 0, $$5 = 0, $$5309 = 0, $$5315$lcssa = 0, $$5315$ph = 0;
 var $$5315406 = 0, $$5324 = 0, $$5333 = 0, $$6 = 0, $$6316 = 0, $$7 = 0, $$7$ph = 0, $$7317 = 0, $$7326 = 0, $$7335 = 0, $$8 = 0, $$8318 = 0, $$8327 = 0, $$8336 = 0, $$9 = 0, $$9$ph = 0, $$9337 = 0, $$9337$ph = 0, $$in = 0, $$in339 = 0;
 var $$lcssa = 0, $$lcssa352 = 0, $$lcssa355 = 0, $$lcssa361 = 0, $$lcssa363 = 0, $$sink = 0, $$sink345 = 0, $$sroa$0$0 = 0, $$sroa$0$0$in = 0, $$sroa$0$0$in383 = 0, $$sroa$0$0386 = 0, $$sroa$0$1 = 0, $$sroa$0$1$in = 0, $$sroa$0$1$in392 = 0, $$sroa$0$1395 = 0, $$sroa$10$0 = 0, $$sroa$10$0$in = 0, $$sroa$10$0$in385 = 0, $$sroa$10$0$lcssa$off0 = 0, $$sroa$10$0388 = 0;
 var $$sroa$10$0389 = 0, $$sroa$10$1 = 0, $$sroa$10$1$in = 0, $$sroa$10$1$in394 = 0, $$sroa$10$1$lcssa = 0, $$sroa$10$1397 = 0, $$sroa$10$1398 = 0, $$sroa$8$0 = 0, $$sroa$8$0$in = 0, $$sroa$8$0$in384 = 0, $$sroa$8$0387 = 0, $$sroa$8$1 = 0, $$sroa$8$1$in = 0, $$sroa$8$1$in393 = 0, $$sroa$8$1396 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $extract$t = 0, $extract$t414 = 0, $or$cond = 0, $scevgep = 0, $scevgep460 = 0, $scevgep462 = 0, $scevgep463 = 0, $scevgep465 = 0, $scevgep466 = 0, $scevgep469 = 0, $scevgep470 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + -1|0);
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -5)|0;
 $9 = (($5) + ($8)|0);
 $10 = ((($0)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + -1|0);
 $13 = ((($0)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - ($1))|0;
 $16 = (($12) + ($15)|0);
 $17 = (($14) + -257)|0;
 $18 = (($12) + ($17)|0);
 $19 = ((($3)) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($3)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($3)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($3)) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($3)) + 56|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($3)) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($3)) + 76|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($3)) + 80|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($3)) + 84|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = 1 << $36;
 $38 = (($37) + -1)|0;
 $39 = ((($3)) + 88|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = 1 << $40;
 $42 = (($41) + -1)|0;
 $43 = $16;
 $44 = ((($3)) + 7104|0);
 $45 = ((($26)) + -1|0);
 $46 = ($24|0)==(0);
 $47 = (($24) + ($20))|0;
 $48 = (($43) - ($24))|0;
 $$0304 = $5;$$0310 = $12;$$0319 = $28;$$0328 = $30;
 L1: while(1) {
  $49 = ($$0328>>>0)<(15);
  if ($49) {
   $50 = ((($$0304)) + 1|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $53 = $52 << $$0328;
   $54 = (($53) + ($$0319))|0;
   $55 = (($$0328) + 8)|0;
   $56 = ((($$0304)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = $58 << $55;
   $60 = (($54) + ($59))|0;
   $61 = (($$0328) + 16)|0;
   $$1305 = $56;$$1320 = $60;$$1329 = $61;
  } else {
   $$1305 = $$0304;$$1320 = $$0319;$$1329 = $$0328;
  }
  $62 = $$1320 & $38;
  $$sroa$0$0$in383 = (($32) + ($62<<2)|0);
  $$sroa$8$0$in384 = (((($32) + ($62<<2)|0)) + 1|0);
  $$sroa$10$0$in385 = (((($32) + ($62<<2)|0)) + 2|0);
  $$sroa$0$0386 = HEAP8[$$sroa$0$0$in383>>0]|0;
  $$sroa$8$0387 = HEAP8[$$sroa$8$0$in384>>0]|0;
  $$sroa$10$0388 = HEAP16[$$sroa$10$0$in385>>1]|0;
  $63 = $$sroa$8$0387&255;
  $64 = $$1320 >>> $63;
  $65 = (($$1329) - ($63))|0;
  $66 = ($$sroa$0$0386<<24>>24)==(0);
  $extract$t = $$sroa$10$0388&255;
  do {
   if ($66) {
    $$lcssa352 = $65;$$lcssa355 = $64;$$sroa$10$0$lcssa$off0 = $extract$t;
    label = 7;
   } else {
    $67 = $$sroa$0$0386&255;
    $$sroa$10$0389 = $$sroa$10$0388;$70 = $67;$75 = $65;$83 = $64;
    while(1) {
     $69 = $70 & 16;
     $71 = ($69|0)==(0);
     if (!($71)) {
      break;
     }
     $241 = $70 & 64;
     $242 = ($241|0)==(0);
     if (!($242)) {
      label = 53;
      break L1;
     }
     $243 = $$sroa$10$0389&65535;
     $244 = 1 << $70;
     $245 = (($244) + -1)|0;
     $246 = $83 & $245;
     $247 = (($246) + ($243))|0;
     $$sroa$0$0$in = (($32) + ($247<<2)|0);
     $$sroa$8$0$in = (((($32) + ($247<<2)|0)) + 1|0);
     $$sroa$10$0$in = (((($32) + ($247<<2)|0)) + 2|0);
     $$sroa$0$0 = HEAP8[$$sroa$0$0$in>>0]|0;
     $$sroa$8$0 = HEAP8[$$sroa$8$0$in>>0]|0;
     $$sroa$10$0 = HEAP16[$$sroa$10$0$in>>1]|0;
     $248 = $$sroa$8$0&255;
     $249 = $83 >>> $248;
     $250 = (($75) - ($248))|0;
     $251 = $$sroa$0$0&255;
     $252 = ($$sroa$0$0<<24>>24)==(0);
     if ($252) {
      label = 6;
      break;
     } else {
      $$sroa$10$0389 = $$sroa$10$0;$70 = $251;$75 = $250;$83 = $249;
     }
    }
    if ((label|0) == 6) {
     label = 0;
     $extract$t414 = $$sroa$10$0&255;
     $$lcssa352 = $250;$$lcssa355 = $249;$$sroa$10$0$lcssa$off0 = $extract$t414;
     label = 7;
     break;
    }
    $72 = $$sroa$10$0389&65535;
    $73 = $70 & 15;
    $74 = ($73|0)==(0);
    if ($74) {
     $$0297 = $72;$$3307 = $$1305;$$4323 = $83;$$4332 = $75;
    } else {
     $76 = ($75>>>0)<($73>>>0);
     $77 = ((($$1305)) + 1|0);
     if ($76) {
      $78 = (($75) + 8)|0;
      $79 = HEAP8[$77>>0]|0;
      $80 = $79&255;
      $81 = $80 << $75;
      $82 = (($81) + ($83))|0;
      $$2306 = $77;$$3322 = $82;$$3331 = $78;
     } else {
      $$2306 = $$1305;$$3322 = $83;$$3331 = $75;
     }
     $84 = 1 << $73;
     $85 = (($84) + -1)|0;
     $86 = $$3322 & $85;
     $87 = (($86) + ($72))|0;
     $88 = $$3322 >>> $73;
     $89 = (($$3331) - ($73))|0;
     $$0297 = $87;$$3307 = $$2306;$$4323 = $88;$$4332 = $89;
    }
    $90 = ($$4332>>>0)<(15);
    if ($90) {
     $91 = ((($$3307)) + 1|0);
     $92 = HEAP8[$91>>0]|0;
     $93 = $92&255;
     $94 = $93 << $$4332;
     $95 = (($94) + ($$4323))|0;
     $96 = (($$4332) + 8)|0;
     $97 = ((($$3307)) + 2|0);
     $98 = HEAP8[$97>>0]|0;
     $99 = $98&255;
     $100 = $99 << $96;
     $101 = (($95) + ($100))|0;
     $102 = (($$4332) + 16)|0;
     $$4308 = $97;$$5324 = $101;$$5333 = $102;
    } else {
     $$4308 = $$3307;$$5324 = $$4323;$$5333 = $$4332;
    }
    $103 = $$5324 & $42;
    $$sroa$0$1$in392 = (($34) + ($103<<2)|0);
    $$sroa$8$1$in393 = (((($34) + ($103<<2)|0)) + 1|0);
    $$sroa$10$1$in394 = (((($34) + ($103<<2)|0)) + 2|0);
    $$sroa$0$1395 = HEAP8[$$sroa$0$1$in392>>0]|0;
    $$sroa$8$1396 = HEAP8[$$sroa$8$1$in393>>0]|0;
    $$sroa$10$1397 = HEAP16[$$sroa$10$1$in394>>1]|0;
    $104 = $$sroa$8$1396&255;
    $105 = $$5324 >>> $104;
    $106 = (($$5333) - ($104))|0;
    $107 = $$sroa$0$1395&255;
    $108 = $107 & 16;
    $109 = ($108|0)==(0);
    if ($109) {
     $$sroa$10$1398 = $$sroa$10$1397;$226 = $107;$232 = $105;$237 = $106;
     while(1) {
      $225 = $226 & 64;
      $227 = ($225|0)==(0);
      if (!($227)) {
       $$7$ph = $$4308;$$9$ph = $232;$$9337$ph = $237;$$sink345 = 19755;
       label = 55;
       break L1;
      }
      $228 = $$sroa$10$1398&65535;
      $229 = 1 << $226;
      $230 = (($229) + -1)|0;
      $231 = $232 & $230;
      $233 = (($231) + ($228))|0;
      $$sroa$0$1$in = (($34) + ($233<<2)|0);
      $$sroa$8$1$in = (((($34) + ($233<<2)|0)) + 1|0);
      $$sroa$10$1$in = (((($34) + ($233<<2)|0)) + 2|0);
      $$sroa$0$1 = HEAP8[$$sroa$0$1$in>>0]|0;
      $$sroa$8$1 = HEAP8[$$sroa$8$1$in>>0]|0;
      $$sroa$10$1 = HEAP16[$$sroa$10$1$in>>1]|0;
      $234 = $$sroa$8$1&255;
      $235 = $232 >>> $234;
      $236 = (($237) - ($234))|0;
      $238 = $$sroa$0$1&255;
      $239 = $238 & 16;
      $240 = ($239|0)==(0);
      if ($240) {
       $$sroa$10$1398 = $$sroa$10$1;$226 = $238;$232 = $235;$237 = $236;
      } else {
       $$lcssa = $238;$$lcssa361 = $236;$$lcssa363 = $235;$$sroa$10$1$lcssa = $$sroa$10$1;
       break;
      }
     }
    } else {
     $$lcssa = $107;$$lcssa361 = $106;$$lcssa363 = $105;$$sroa$10$1$lcssa = $$sroa$10$1397;
    }
    $110 = $$sroa$10$1$lcssa&65535;
    $111 = $$lcssa & 15;
    $112 = ($$lcssa361>>>0)<($111>>>0);
    if ($112) {
     $113 = ((($$4308)) + 1|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = $114&255;
     $116 = $115 << $$lcssa361;
     $117 = (($116) + ($$lcssa363))|0;
     $118 = (($$lcssa361) + 8)|0;
     $119 = ($118>>>0)<($111>>>0);
     $120 = ((($$4308)) + 2|0);
     if ($119) {
      $121 = (($$lcssa361) + 16)|0;
      $122 = HEAP8[$120>>0]|0;
      $123 = $122&255;
      $124 = $123 << $118;
      $125 = (($124) + ($117))|0;
      $$5309 = $120;$$7326 = $125;$$7335 = $121;
     } else {
      $$5309 = $113;$$7326 = $117;$$7335 = $118;
     }
    } else {
     $$5309 = $$4308;$$7326 = $$lcssa363;$$7335 = $$lcssa361;
    }
    $126 = 1 << $111;
    $127 = (($126) + -1)|0;
    $128 = $$7326 & $127;
    $129 = (($128) + ($110))|0;
    $130 = $$7326 >>> $111;
    $131 = (($$7335) - ($111))|0;
    $132 = $$0310;
    $133 = (($132) - ($43))|0;
    $134 = ($129>>>0)>($133>>>0);
    if (!($134)) {
     $204 = (0 - ($129))|0;
     $205 = (($$0310) + ($204)|0);
     $$2299 = $$0297;$$5 = $205;$$6316 = $$0310;
     while(1) {
      $206 = ((($$5)) + 1|0);
      $207 = HEAP8[$206>>0]|0;
      $208 = ((($$6316)) + 1|0);
      HEAP8[$208>>0] = $207;
      $209 = ((($$5)) + 2|0);
      $210 = HEAP8[$209>>0]|0;
      $211 = ((($$6316)) + 2|0);
      HEAP8[$211>>0] = $210;
      $212 = ((($$5)) + 3|0);
      $213 = HEAP8[$212>>0]|0;
      $214 = ((($$6316)) + 3|0);
      HEAP8[$214>>0] = $213;
      $215 = (($$2299) + -3)|0;
      $216 = ($215>>>0)>(2);
      if ($216) {
       $$2299 = $215;$$5 = $212;$$6316 = $214;
      } else {
       break;
      }
     }
     $217 = ($215|0)==(0);
     if ($217) {
      $$6 = $$5309;$$7317 = $214;$$8327 = $130;$$8336 = $131;
      break;
     }
     $218 = ((($$5)) + 4|0);
     $219 = HEAP8[$218>>0]|0;
     $220 = ((($$6316)) + 4|0);
     HEAP8[$220>>0] = $219;
     $221 = ($215|0)==(1);
     if ($221) {
      $$6 = $$5309;$$7317 = $220;$$8327 = $130;$$8336 = $131;
      break;
     }
     $222 = ((($$5)) + 5|0);
     $223 = HEAP8[$222>>0]|0;
     $224 = ((($$6316)) + 5|0);
     HEAP8[$224>>0] = $223;
     $$6 = $$5309;$$7317 = $224;$$8327 = $130;$$8336 = $131;
     break;
    }
    $135 = (($129) - ($133))|0;
    $136 = ($135>>>0)>($22>>>0);
    if ($136) {
     $137 = HEAP32[$44>>2]|0;
     $138 = ($137|0)==(0);
     if (!($138)) {
      $$7$ph = $$5309;$$9$ph = $130;$$9337$ph = $131;$$sink345 = 19777;
      label = 55;
      break L1;
     }
    }
    do {
     if ($46) {
      $139 = (($20) - ($135))|0;
      $140 = (($45) + ($139)|0);
      $141 = ($$0297>>>0)>($135>>>0);
      if ($141) {
       $142 = (($$0297) - ($135))|0;
       $143 = (($129) - ($132))|0;
       $$0 = $140;$$0300 = $135;$$1311 = $$0310;
       while(1) {
        $144 = ((($$0)) + 1|0);
        $145 = HEAP8[$144>>0]|0;
        $146 = ((($$1311)) + 1|0);
        HEAP8[$146>>0] = $145;
        $147 = (($$0300) + -1)|0;
        $148 = ($147|0)==(0);
        if ($148) {
         break;
        } else {
         $$0 = $144;$$0300 = $147;$$1311 = $146;
        }
       }
       $scevgep469 = (($$0310) + ($43)|0);
       $scevgep470 = (($scevgep469) + ($143)|0);
       $149 = (0 - ($129))|0;
       $150 = (($scevgep470) + ($149)|0);
       $$1298$ph = $142;$$4$ph = $150;$$5315$ph = $scevgep470;
      } else {
       $$1298$ph = $$0297;$$4$ph = $140;$$5315$ph = $$0310;
      }
     } else {
      $151 = ($24>>>0)<($135>>>0);
      if (!($151)) {
       $172 = (($24) - ($135))|0;
       $173 = (($45) + ($172)|0);
       $174 = ($$0297>>>0)>($135>>>0);
       if (!($174)) {
        $$1298$ph = $$0297;$$4$ph = $173;$$5315$ph = $$0310;
        break;
       }
       $175 = (($$0297) - ($135))|0;
       $176 = (($129) - ($132))|0;
       $$3 = $173;$$3303 = $135;$$4314 = $$0310;
       while(1) {
        $177 = ((($$3)) + 1|0);
        $178 = HEAP8[$177>>0]|0;
        $179 = ((($$4314)) + 1|0);
        HEAP8[$179>>0] = $178;
        $180 = (($$3303) + -1)|0;
        $181 = ($180|0)==(0);
        if ($181) {
         break;
        } else {
         $$3 = $177;$$3303 = $180;$$4314 = $179;
        }
       }
       $scevgep = (($$0310) + ($43)|0);
       $scevgep460 = (($scevgep) + ($176)|0);
       $182 = (0 - ($129))|0;
       $183 = (($scevgep460) + ($182)|0);
       $$1298$ph = $175;$$4$ph = $183;$$5315$ph = $scevgep460;
       break;
      }
      $152 = (($47) - ($135))|0;
      $153 = (($45) + ($152)|0);
      $154 = (($135) - ($24))|0;
      $155 = ($$0297>>>0)>($154>>>0);
      if ($155) {
       $156 = (($$0297) - ($154))|0;
       $157 = (($129) - ($132))|0;
       $$1 = $153;$$1301 = $154;$$2312 = $$0310;
       while(1) {
        $158 = ((($$1)) + 1|0);
        $159 = HEAP8[$158>>0]|0;
        $160 = ((($$2312)) + 1|0);
        HEAP8[$160>>0] = $159;
        $161 = (($$1301) + -1)|0;
        $162 = ($161|0)==(0);
        if ($162) {
         break;
        } else {
         $$1 = $158;$$1301 = $161;$$2312 = $160;
        }
       }
       $scevgep462 = (($$0310) + ($48)|0);
       $scevgep463 = (($scevgep462) + ($157)|0);
       $163 = ($156>>>0)>($24>>>0);
       if ($163) {
        $scevgep465 = (($$0310) + ($43)|0);
        $$2 = $45;$$2302 = $24;$$3313 = $scevgep463;
        while(1) {
         $164 = ((($$2)) + 1|0);
         $165 = HEAP8[$164>>0]|0;
         $166 = ((($$3313)) + 1|0);
         HEAP8[$166>>0] = $165;
         $167 = (($$2302) + -1)|0;
         $168 = ($167|0)==(0);
         if ($168) {
          break;
         } else {
          $$2 = $164;$$2302 = $167;$$3313 = $166;
         }
        }
        $169 = (($156) - ($24))|0;
        $scevgep466 = (($scevgep465) + ($157)|0);
        $170 = (0 - ($129))|0;
        $171 = (($scevgep466) + ($170)|0);
        $$1298$ph = $169;$$4$ph = $171;$$5315$ph = $scevgep466;
       } else {
        $$1298$ph = $156;$$4$ph = $45;$$5315$ph = $scevgep463;
       }
      } else {
       $$1298$ph = $$0297;$$4$ph = $153;$$5315$ph = $$0310;
      }
     }
    } while(0);
    $184 = ($$1298$ph>>>0)>(2);
    if ($184) {
     $$1298407 = $$1298$ph;$$4408 = $$4$ph;$$5315406 = $$5315$ph;
     while(1) {
      $185 = ((($$4408)) + 1|0);
      $186 = HEAP8[$185>>0]|0;
      $187 = ((($$5315406)) + 1|0);
      HEAP8[$187>>0] = $186;
      $188 = ((($$4408)) + 2|0);
      $189 = HEAP8[$188>>0]|0;
      $190 = ((($$5315406)) + 2|0);
      HEAP8[$190>>0] = $189;
      $191 = ((($$4408)) + 3|0);
      $192 = HEAP8[$191>>0]|0;
      $193 = ((($$5315406)) + 3|0);
      HEAP8[$193>>0] = $192;
      $194 = (($$1298407) + -3)|0;
      $195 = ($194>>>0)>(2);
      if ($195) {
       $$1298407 = $194;$$4408 = $191;$$5315406 = $193;
      } else {
       $$1298$lcssa = $194;$$4$lcssa = $191;$$5315$lcssa = $193;
       break;
      }
     }
    } else {
     $$1298$lcssa = $$1298$ph;$$4$lcssa = $$4$ph;$$5315$lcssa = $$5315$ph;
    }
    $196 = ($$1298$lcssa|0)==(0);
    if ($196) {
     $$6 = $$5309;$$7317 = $$5315$lcssa;$$8327 = $130;$$8336 = $131;
    } else {
     $197 = ((($$4$lcssa)) + 1|0);
     $198 = HEAP8[$197>>0]|0;
     $199 = ((($$5315$lcssa)) + 1|0);
     HEAP8[$199>>0] = $198;
     $200 = ($$1298$lcssa|0)==(1);
     if ($200) {
      $$6 = $$5309;$$7317 = $199;$$8327 = $130;$$8336 = $131;
     } else {
      $201 = ((($$4$lcssa)) + 2|0);
      $202 = HEAP8[$201>>0]|0;
      $203 = ((($$5315$lcssa)) + 2|0);
      HEAP8[$203>>0] = $202;
      $$6 = $$5309;$$7317 = $203;$$8327 = $130;$$8336 = $131;
     }
    }
   }
  } while(0);
  if ((label|0) == 7) {
   label = 0;
   $68 = ((($$0310)) + 1|0);
   HEAP8[$68>>0] = $$sroa$10$0$lcssa$off0;
   $$6 = $$1305;$$7317 = $68;$$8327 = $$lcssa355;$$8336 = $$lcssa352;
  }
  $255 = ($$6>>>0)<($9>>>0);
  $256 = ($$7317>>>0)<($18>>>0);
  $or$cond = $256 & $255;
  if ($or$cond) {
   $$0304 = $$6;$$0310 = $$7317;$$0319 = $$8327;$$0328 = $$8336;
  } else {
   $$10 = $$8327;$$10338 = $$8336;$$8 = $$6;$$8318 = $$7317;
   label = 57;
   break;
  }
 }
 if ((label|0) == 53) {
  $253 = $70 & 32;
  $254 = ($253|0)==(0);
  if ($254) {
   $$7$ph = $$1305;$$9$ph = $83;$$9337$ph = $75;$$sink345 = 19727;
   label = 55;
  } else {
   $$7 = $$1305;$$9 = $83;$$9337 = $75;$$sink = 11;
  }
 }
 else if ((label|0) == 57) {
  $258 = $$10338 >>> 3;
  $259 = (0 - ($258))|0;
  $260 = (($$8) + ($259)|0);
  $261 = $258 << 3;
  $262 = (($$10338) - ($261))|0;
  $263 = 1 << $262;
  $264 = (($263) + -1)|0;
  $265 = $264 & $$10;
  $266 = ((($260)) + 1|0);
  HEAP32[$0>>2] = $266;
  $267 = ((($$8318)) + 1|0);
  HEAP32[$10>>2] = $267;
  $268 = $260;
  $269 = $9;
  $$in339 = (($269) + 5)|0;
  $270 = (($$in339) - ($268))|0;
  HEAP32[$6>>2] = $270;
  $271 = $$8318;
  $272 = $18;
  $$in = (($272) + 257)|0;
  $273 = (($$in) - ($271))|0;
  HEAP32[$13>>2] = $273;
  HEAP32[$27>>2] = $265;
  HEAP32[$29>>2] = $262;
  return;
 }
 if ((label|0) == 55) {
  $257 = ((($0)) + 24|0);
  HEAP32[$257>>2] = $$sink345;
  $$7 = $$7$ph;$$9 = $$9$ph;$$9337 = $$9337$ph;$$sink = 29;
 }
 HEAP32[$3>>2] = $$sink;
 $$10 = $$9;$$10338 = $$9337;$$8 = $$7;$$8318 = $$0310;
 $258 = $$10338 >>> 3;
 $259 = (0 - ($258))|0;
 $260 = (($$8) + ($259)|0);
 $261 = $258 << 3;
 $262 = (($$10338) - ($261))|0;
 $263 = 1 << $262;
 $264 = (($263) + -1)|0;
 $265 = $264 & $$10;
 $266 = ((($260)) + 1|0);
 HEAP32[$0>>2] = $266;
 $267 = ((($$8318)) + 1|0);
 HEAP32[$10>>2] = $267;
 $268 = $260;
 $269 = $9;
 $$in339 = (($269) + 5)|0;
 $270 = (($$in339) - ($268))|0;
 HEAP32[$6>>2] = $270;
 $271 = $$8318;
 $272 = $18;
 $$in = (($272) + 257)|0;
 $273 = (($$in) - ($271))|0;
 HEAP32[$13>>2] = $273;
 HEAP32[$27>>2] = $265;
 HEAP32[$29>>2] = $262;
 return;
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0172$i = 0, $$$0173$i = 0, $$$4230$i = 0, $$$4236$i = 0, $$$4329$i = 0, $$$i = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$01$i$i = 0, $$0172$lcssa$i = 0, $$01726$i = 0, $$0173$lcssa$i = 0, $$01735$i = 0, $$0193 = 0, $$0195 = 0, $$0201$i$i = 0, $$0202$i$i = 0, $$0206$i$i = 0;
 var $$0207$i$i = 0, $$024362$i = 0, $$0260$i$i = 0, $$0261$i$i = 0, $$0262$i$i = 0, $$0268$i$i = 0, $$0269$i$i = 0, $$0320$i = 0, $$0322$i = 0, $$0323$i = 0, $$0325$i = 0, $$0331$i = 0, $$0336$i = 0, $$0337$$i = 0, $$0337$i = 0, $$0339$i = 0, $$0340$i = 0, $$0345$i = 0, $$1 = 0, $$1176$i = 0;
 var $$1178$i = 0, $$124461$i = 0, $$1264$i$i = 0, $$1266$i$i = 0, $$1321$i = 0, $$1326$i = 0, $$1341$i = 0, $$1347$i = 0, $$1351$i = 0, $$2 = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2333$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i196 = 0, $$3229$i = 0, $$3235$i = 0, $$3328$i = 0;
 var $$3349$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$411$i = 0, $$4230$i = 0, $$4236$i = 0, $$4329$lcssa$i = 0, $$432910$i = 0, $$4335$$4$i = 0, $$4335$ph$i = 0, $$43359$i = 0, $$7$i = 0, $$7239$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i18$i = 0, $$pre$i205 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0;
 var $$pre$phi$i206Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink1$i = 0, $$sink1$i$i = 0, $$sink14$i = 0, $$sink2$i = 0, $$sink2$i199 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
 var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
 var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
 var $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0;
 var $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0;
 var $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0;
 var $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0;
 var $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0;
 var $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0;
 var $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0;
 var $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i203 = 0, $exitcond$i$i = 0, $not$$i = 0, $not$$i$i = 0, $not$$i204 = 0, $not$1$i = 0, $not$1$i198 = 0;
 var $not$3$i = 0, $not$5$i = 0, $or$cond$i = 0, $or$cond$i207 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i208 = 0, $or$cond42$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = HEAP32[5941]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  (___pthread_mutex_lock(23788)|0);
  $7 = HEAP32[5941]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   HEAP32[(23772)>>2] = 4096;
   HEAP32[(23768)>>2] = 4096;
   HEAP32[(23776)>>2] = -1;
   HEAP32[(23780)>>2] = -1;
   HEAP32[(23784)>>2] = 2;
   HEAP32[(24260)>>2] = 2;
   $9 = (_pthread_mutexattr_init($3)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    $11 = (_pthread_mutex_init((24264),$3)|0);
    $12 = ($11|0)==(0);
    if ($12) {
     (_pthread_mutexattr_destroy($3)|0);
    }
   }
   $13 = $4;
   $14 = $13 & -16;
   $15 = $14 ^ 1431655768;
   HEAP32[$4>>2] = $15;
   Atomics_store(HEAP32,5941,$15)|0;
  }
  (___pthread_mutex_unlock(23788)|0);
 }
 $16 = HEAP32[(24260)>>2]|0;
 $17 = $16 & 2;
 $18 = ($17|0)==(0);
 if (!($18)) {
  $19 = (___pthread_mutex_lock((24264))|0);
  $20 = ($19|0)==(0);
  if (!($20)) {
   $$1 = 0;
   STACKTOP = sp;return ($$1|0);
  }
 }
 $21 = ($0>>>0)<(245);
 do {
  if ($21) {
   $22 = ($0>>>0)<(11);
   $23 = (($0) + 11)|0;
   $24 = $23 & -8;
   $25 = $22 ? 16 : $24;
   $26 = $25 >>> 3;
   $27 = HEAP32[5954]|0;
   $28 = $27 >>> $26;
   $29 = $28 & 3;
   $30 = ($29|0)==(0);
   if (!($30)) {
    $31 = $28 & 1;
    $32 = $31 ^ 1;
    $33 = (($32) + ($26))|0;
    $34 = $33 << 1;
    $35 = (23856 + ($34<<2)|0);
    $36 = ((($35)) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ((($37)) + 8|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($35|0)==($39|0);
    if ($40) {
     $41 = 1 << $33;
     $42 = $41 ^ -1;
     $43 = $27 & $42;
     HEAP32[5954] = $43;
    } else {
     $44 = ((($39)) + 12|0);
     HEAP32[$44>>2] = $35;
     HEAP32[$36>>2] = $39;
    }
    $45 = $33 << 3;
    $46 = $45 | 3;
    $47 = ((($37)) + 4|0);
    HEAP32[$47>>2] = $46;
    $48 = (($37) + ($45)|0);
    $49 = ((($48)) + 4|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $50 | 1;
    HEAP32[$49>>2] = $51;
    $$2 = $38;
    break;
   }
   $52 = HEAP32[(23824)>>2]|0;
   $53 = ($25>>>0)>($52>>>0);
   if ($53) {
    $54 = ($28|0)==(0);
    if (!($54)) {
     $55 = $28 << $26;
     $56 = 2 << $26;
     $57 = (0 - ($56))|0;
     $58 = $56 | $57;
     $59 = $55 & $58;
     $60 = (0 - ($59))|0;
     $61 = $59 & $60;
     $62 = (($61) + -1)|0;
     $63 = $62 >>> 12;
     $64 = $63 & 16;
     $65 = $62 >>> $64;
     $66 = $65 >>> 5;
     $67 = $66 & 8;
     $68 = $67 | $64;
     $69 = $65 >>> $67;
     $70 = $69 >>> 2;
     $71 = $70 & 4;
     $72 = $68 | $71;
     $73 = $69 >>> $71;
     $74 = $73 >>> 1;
     $75 = $74 & 2;
     $76 = $72 | $75;
     $77 = $73 >>> $75;
     $78 = $77 >>> 1;
     $79 = $78 & 1;
     $80 = $76 | $79;
     $81 = $77 >>> $79;
     $82 = (($80) + ($81))|0;
     $83 = $82 << 1;
     $84 = (23856 + ($83<<2)|0);
     $85 = ((($84)) + 8|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = ((($86)) + 8|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = ($84|0)==($88|0);
     if ($89) {
      $90 = 1 << $82;
      $91 = $90 ^ -1;
      $92 = $27 & $91;
      HEAP32[5954] = $92;
      $109 = $92;
     } else {
      $93 = ((($88)) + 12|0);
      HEAP32[$93>>2] = $84;
      HEAP32[$85>>2] = $88;
      $109 = $27;
     }
     $94 = $82 << 3;
     $95 = (($94) - ($25))|0;
     $96 = $25 | 3;
     $97 = ((($86)) + 4|0);
     HEAP32[$97>>2] = $96;
     $98 = (($86) + ($25)|0);
     $99 = $95 | 1;
     $100 = ((($98)) + 4|0);
     HEAP32[$100>>2] = $99;
     $101 = (($98) + ($95)|0);
     HEAP32[$101>>2] = $95;
     $102 = ($52|0)==(0);
     if (!($102)) {
      $103 = HEAP32[(23836)>>2]|0;
      $104 = $52 >>> 3;
      $105 = $104 << 1;
      $106 = (23856 + ($105<<2)|0);
      $107 = 1 << $104;
      $108 = $109 & $107;
      $110 = ($108|0)==(0);
      if ($110) {
       $111 = $109 | $107;
       HEAP32[5954] = $111;
       $$pre = ((($106)) + 8|0);
       $$0195 = $106;$$pre$phiZ2D = $$pre;
      } else {
       $112 = ((($106)) + 8|0);
       $113 = HEAP32[$112>>2]|0;
       $$0195 = $113;$$pre$phiZ2D = $112;
      }
      HEAP32[$$pre$phiZ2D>>2] = $103;
      $114 = ((($$0195)) + 12|0);
      HEAP32[$114>>2] = $103;
      $115 = ((($103)) + 8|0);
      HEAP32[$115>>2] = $$0195;
      $116 = ((($103)) + 12|0);
      HEAP32[$116>>2] = $106;
     }
     HEAP32[(23824)>>2] = $95;
     HEAP32[(23836)>>2] = $98;
     $$2 = $87;
     break;
    }
    $117 = HEAP32[(23820)>>2]|0;
    $118 = ($117|0)==(0);
    if ($118) {
     $$0193 = $25;
     label = 108;
    } else {
     $119 = (0 - ($117))|0;
     $120 = $117 & $119;
     $121 = (($120) + -1)|0;
     $122 = $121 >>> 12;
     $123 = $122 & 16;
     $124 = $121 >>> $123;
     $125 = $124 >>> 5;
     $126 = $125 & 8;
     $127 = $126 | $123;
     $128 = $124 >>> $126;
     $129 = $128 >>> 2;
     $130 = $129 & 4;
     $131 = $127 | $130;
     $132 = $128 >>> $130;
     $133 = $132 >>> 1;
     $134 = $133 & 2;
     $135 = $131 | $134;
     $136 = $132 >>> $134;
     $137 = $136 >>> 1;
     $138 = $137 & 1;
     $139 = $135 | $138;
     $140 = $136 >>> $138;
     $141 = (($139) + ($140))|0;
     $142 = (24120 + ($141<<2)|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ((($143)) + 4|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = $145 & -8;
     $147 = (($146) - ($25))|0;
     $148 = ((($143)) + 16|0);
     $149 = HEAP32[$148>>2]|0;
     $not$3$i = ($149|0)==(0|0);
     $$sink14$i = $not$3$i&1;
     $150 = (((($143)) + 16|0) + ($$sink14$i<<2)|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==(0|0);
     if ($152) {
      $$0172$lcssa$i = $143;$$0173$lcssa$i = $147;
     } else {
      $$01726$i = $143;$$01735$i = $147;$154 = $151;
      while(1) {
       $153 = ((($154)) + 4|0);
       $155 = HEAP32[$153>>2]|0;
       $156 = $155 & -8;
       $157 = (($156) - ($25))|0;
       $158 = ($157>>>0)<($$01735$i>>>0);
       $$$0173$i = $158 ? $157 : $$01735$i;
       $$$0172$i = $158 ? $154 : $$01726$i;
       $159 = ((($154)) + 16|0);
       $160 = HEAP32[$159>>2]|0;
       $not$$i = ($160|0)==(0|0);
       $$sink1$i = $not$$i&1;
       $161 = (((($154)) + 16|0) + ($$sink1$i<<2)|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==(0|0);
       if ($163) {
        $$0172$lcssa$i = $$$0172$i;$$0173$lcssa$i = $$$0173$i;
        break;
       } else {
        $$01726$i = $$$0172$i;$$01735$i = $$$0173$i;$154 = $162;
       }
      }
     }
     $164 = (($$0172$lcssa$i) + ($25)|0);
     $165 = ($$0172$lcssa$i>>>0)<($164>>>0);
     if ($165) {
      $166 = ((($$0172$lcssa$i)) + 24|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ((($$0172$lcssa$i)) + 12|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = ($169|0)==($$0172$lcssa$i|0);
      do {
       if ($170) {
        $175 = ((($$0172$lcssa$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if ($177) {
         $178 = ((($$0172$lcssa$i)) + 16|0);
         $179 = HEAP32[$178>>2]|0;
         $180 = ($179|0)==(0|0);
         if ($180) {
          $$3$i = 0;
          break;
         } else {
          $$1176$i = $179;$$1178$i = $178;
         }
        } else {
         $$1176$i = $176;$$1178$i = $175;
        }
        while(1) {
         $181 = ((($$1176$i)) + 20|0);
         $182 = HEAP32[$181>>2]|0;
         $183 = ($182|0)==(0|0);
         if (!($183)) {
          $$1176$i = $182;$$1178$i = $181;
          continue;
         }
         $184 = ((($$1176$i)) + 16|0);
         $185 = HEAP32[$184>>2]|0;
         $186 = ($185|0)==(0|0);
         if ($186) {
          break;
         } else {
          $$1176$i = $185;$$1178$i = $184;
         }
        }
        HEAP32[$$1178$i>>2] = 0;
        $$3$i = $$1176$i;
       } else {
        $171 = ((($$0172$lcssa$i)) + 8|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ((($172)) + 12|0);
        HEAP32[$173>>2] = $169;
        $174 = ((($169)) + 8|0);
        HEAP32[$174>>2] = $172;
        $$3$i = $169;
       }
      } while(0);
      $187 = ($167|0)==(0|0);
      do {
       if (!($187)) {
        $188 = ((($$0172$lcssa$i)) + 28|0);
        $189 = HEAP32[$188>>2]|0;
        $190 = (24120 + ($189<<2)|0);
        $191 = HEAP32[$190>>2]|0;
        $192 = ($$0172$lcssa$i|0)==($191|0);
        if ($192) {
         HEAP32[$190>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $193 = 1 << $189;
          $194 = $193 ^ -1;
          $195 = $117 & $194;
          HEAP32[(23820)>>2] = $195;
          break;
         }
        } else {
         $196 = ((($167)) + 16|0);
         $197 = HEAP32[$196>>2]|0;
         $not$1$i = ($197|0)!=($$0172$lcssa$i|0);
         $$sink2$i = $not$1$i&1;
         $198 = (((($167)) + 16|0) + ($$sink2$i<<2)|0);
         HEAP32[$198>>2] = $$3$i;
         $199 = ($$3$i|0)==(0|0);
         if ($199) {
          break;
         }
        }
        $200 = ((($$3$i)) + 24|0);
        HEAP32[$200>>2] = $167;
        $201 = ((($$0172$lcssa$i)) + 16|0);
        $202 = HEAP32[$201>>2]|0;
        $203 = ($202|0)==(0|0);
        if (!($203)) {
         $204 = ((($$3$i)) + 16|0);
         HEAP32[$204>>2] = $202;
         $205 = ((($202)) + 24|0);
         HEAP32[$205>>2] = $$3$i;
        }
        $206 = ((($$0172$lcssa$i)) + 20|0);
        $207 = HEAP32[$206>>2]|0;
        $208 = ($207|0)==(0|0);
        if (!($208)) {
         $209 = ((($$3$i)) + 20|0);
         HEAP32[$209>>2] = $207;
         $210 = ((($207)) + 24|0);
         HEAP32[$210>>2] = $$3$i;
        }
       }
      } while(0);
      $211 = ($$0173$lcssa$i>>>0)<(16);
      if ($211) {
       $212 = (($$0173$lcssa$i) + ($25))|0;
       $213 = $212 | 3;
       $214 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$214>>2] = $213;
       $215 = (($$0172$lcssa$i) + ($212)|0);
       $216 = ((($215)) + 4|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = $217 | 1;
       HEAP32[$216>>2] = $218;
      } else {
       $219 = $25 | 3;
       $220 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$220>>2] = $219;
       $221 = $$0173$lcssa$i | 1;
       $222 = ((($164)) + 4|0);
       HEAP32[$222>>2] = $221;
       $223 = (($164) + ($$0173$lcssa$i)|0);
       HEAP32[$223>>2] = $$0173$lcssa$i;
       $224 = ($52|0)==(0);
       if (!($224)) {
        $225 = HEAP32[(23836)>>2]|0;
        $226 = $52 >>> 3;
        $227 = $226 << 1;
        $228 = (23856 + ($227<<2)|0);
        $229 = 1 << $226;
        $230 = $27 & $229;
        $231 = ($230|0)==(0);
        if ($231) {
         $232 = $27 | $229;
         HEAP32[5954] = $232;
         $$pre$i = ((($228)) + 8|0);
         $$0$i = $228;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $233 = ((($228)) + 8|0);
         $234 = HEAP32[$233>>2]|0;
         $$0$i = $234;$$pre$phi$iZ2D = $233;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $225;
        $235 = ((($$0$i)) + 12|0);
        HEAP32[$235>>2] = $225;
        $236 = ((($225)) + 8|0);
        HEAP32[$236>>2] = $$0$i;
        $237 = ((($225)) + 12|0);
        HEAP32[$237>>2] = $228;
       }
       HEAP32[(23824)>>2] = $$0173$lcssa$i;
       HEAP32[(23836)>>2] = $164;
      }
      $238 = ((($$0172$lcssa$i)) + 8|0);
      $$2 = $238;
     } else {
      $$0193 = $25;
      label = 108;
     }
    }
   } else {
    $$0193 = $25;
    label = 108;
   }
  } else {
   $239 = ($0>>>0)>(4294967231);
   if ($239) {
    $$0193 = -1;
    label = 108;
   } else {
    $240 = (($0) + 11)|0;
    $241 = $240 & -8;
    $242 = HEAP32[(23820)>>2]|0;
    $243 = ($242|0)==(0);
    if ($243) {
     $$0193 = $241;
     label = 108;
    } else {
     $244 = (0 - ($241))|0;
     $245 = $240 >>> 8;
     $246 = ($245|0)==(0);
     if ($246) {
      $$0336$i = 0;
     } else {
      $247 = ($241>>>0)>(16777215);
      if ($247) {
       $$0336$i = 31;
      } else {
       $248 = (($245) + 1048320)|0;
       $249 = $248 >>> 16;
       $250 = $249 & 8;
       $251 = $245 << $250;
       $252 = (($251) + 520192)|0;
       $253 = $252 >>> 16;
       $254 = $253 & 4;
       $255 = $254 | $250;
       $256 = $251 << $254;
       $257 = (($256) + 245760)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 2;
       $260 = $255 | $259;
       $261 = (14 - ($260))|0;
       $262 = $256 << $259;
       $263 = $262 >>> 15;
       $264 = (($261) + ($263))|0;
       $265 = $264 << 1;
       $266 = (($264) + 7)|0;
       $267 = $241 >>> $266;
       $268 = $267 & 1;
       $269 = $268 | $265;
       $$0336$i = $269;
      }
     }
     $270 = (24120 + ($$0336$i<<2)|0);
     $271 = HEAP32[$270>>2]|0;
     $272 = ($271|0)==(0|0);
     L85: do {
      if ($272) {
       $$2333$i = 0;$$3$i196 = 0;$$3328$i = $244;
       label = 66;
      } else {
       $273 = ($$0336$i|0)==(31);
       $274 = $$0336$i >>> 1;
       $275 = (25 - ($274))|0;
       $276 = $273 ? 0 : $275;
       $277 = $241 << $276;
       $$0320$i = 0;$$0325$i = $244;$$0331$i = $271;$$0337$i = $277;$$0340$i = 0;
       while(1) {
        $278 = ((($$0331$i)) + 4|0);
        $279 = HEAP32[$278>>2]|0;
        $280 = $279 & -8;
        $281 = (($280) - ($241))|0;
        $282 = ($281>>>0)<($$0325$i>>>0);
        if ($282) {
         $283 = ($281|0)==(0);
         if ($283) {
          $$411$i = $$0331$i;$$432910$i = 0;$$43359$i = $$0331$i;
          label = 70;
          break L85;
         } else {
          $$1321$i = $$0331$i;$$1326$i = $281;
         }
        } else {
         $$1321$i = $$0320$i;$$1326$i = $$0325$i;
        }
        $284 = ((($$0331$i)) + 20|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $$0337$i >>> 31;
        $287 = (((($$0331$i)) + 16|0) + ($286<<2)|0);
        $288 = HEAP32[$287>>2]|0;
        $289 = ($285|0)==(0|0);
        $290 = ($285|0)==($288|0);
        $or$cond2$i = $289 | $290;
        $$1341$i = $or$cond2$i ? $$0340$i : $285;
        $291 = ($288|0)==(0|0);
        $not$5$i = $291 ^ 1;
        $292 = $not$5$i&1;
        $$0337$$i = $$0337$i << $292;
        if ($291) {
         $$2333$i = $$1341$i;$$3$i196 = $$1321$i;$$3328$i = $$1326$i;
         label = 66;
         break;
        } else {
         $$0320$i = $$1321$i;$$0325$i = $$1326$i;$$0331$i = $288;$$0337$i = $$0337$$i;$$0340$i = $$1341$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 66) {
      $293 = ($$2333$i|0)==(0|0);
      $294 = ($$3$i196|0)==(0|0);
      $or$cond$i = $293 & $294;
      if ($or$cond$i) {
       $295 = 2 << $$0336$i;
       $296 = (0 - ($295))|0;
       $297 = $295 | $296;
       $298 = $242 & $297;
       $299 = ($298|0)==(0);
       if ($299) {
        $$0193 = $241;
        label = 108;
        break;
       }
       $300 = (0 - ($298))|0;
       $301 = $298 & $300;
       $302 = (($301) + -1)|0;
       $303 = $302 >>> 12;
       $304 = $303 & 16;
       $305 = $302 >>> $304;
       $306 = $305 >>> 5;
       $307 = $306 & 8;
       $308 = $307 | $304;
       $309 = $305 >>> $307;
       $310 = $309 >>> 2;
       $311 = $310 & 4;
       $312 = $308 | $311;
       $313 = $309 >>> $311;
       $314 = $313 >>> 1;
       $315 = $314 & 2;
       $316 = $312 | $315;
       $317 = $313 >>> $315;
       $318 = $317 >>> 1;
       $319 = $318 & 1;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = (($320) + ($321))|0;
       $323 = (24120 + ($322<<2)|0);
       $324 = HEAP32[$323>>2]|0;
       $$4$ph$i = 0;$$4335$ph$i = $324;
      } else {
       $$4$ph$i = $$3$i196;$$4335$ph$i = $$2333$i;
      }
      $325 = ($$4335$ph$i|0)==(0|0);
      if ($325) {
       $$4$lcssa$i = $$4$ph$i;$$4329$lcssa$i = $$3328$i;
      } else {
       $$411$i = $$4$ph$i;$$432910$i = $$3328$i;$$43359$i = $$4335$ph$i;
       label = 70;
      }
     }
     if ((label|0) == 70) {
      while(1) {
       label = 0;
       $326 = ((($$43359$i)) + 4|0);
       $327 = HEAP32[$326>>2]|0;
       $328 = $327 & -8;
       $329 = (($328) - ($241))|0;
       $330 = ($329>>>0)<($$432910$i>>>0);
       $$$4329$i = $330 ? $329 : $$432910$i;
       $$4335$$4$i = $330 ? $$43359$i : $$411$i;
       $331 = ((($$43359$i)) + 16|0);
       $332 = HEAP32[$331>>2]|0;
       $not$1$i198 = ($332|0)==(0|0);
       $$sink2$i199 = $not$1$i198&1;
       $333 = (((($$43359$i)) + 16|0) + ($$sink2$i199<<2)|0);
       $334 = HEAP32[$333>>2]|0;
       $335 = ($334|0)==(0|0);
       if ($335) {
        $$4$lcssa$i = $$4335$$4$i;$$4329$lcssa$i = $$$4329$i;
        break;
       } else {
        $$411$i = $$4335$$4$i;$$432910$i = $$$4329$i;$$43359$i = $334;
        label = 70;
       }
      }
     }
     $336 = ($$4$lcssa$i|0)==(0|0);
     if ($336) {
      $$0193 = $241;
      label = 108;
     } else {
      $337 = HEAP32[(23824)>>2]|0;
      $338 = (($337) - ($241))|0;
      $339 = ($$4329$lcssa$i>>>0)<($338>>>0);
      if ($339) {
       $340 = (($$4$lcssa$i) + ($241)|0);
       $341 = ($$4$lcssa$i>>>0)<($340>>>0);
       if ($341) {
        $342 = ((($$4$lcssa$i)) + 24|0);
        $343 = HEAP32[$342>>2]|0;
        $344 = ((($$4$lcssa$i)) + 12|0);
        $345 = HEAP32[$344>>2]|0;
        $346 = ($345|0)==($$4$lcssa$i|0);
        do {
         if ($346) {
          $351 = ((($$4$lcssa$i)) + 20|0);
          $352 = HEAP32[$351>>2]|0;
          $353 = ($352|0)==(0|0);
          if ($353) {
           $354 = ((($$4$lcssa$i)) + 16|0);
           $355 = HEAP32[$354>>2]|0;
           $356 = ($355|0)==(0|0);
           if ($356) {
            $$3349$i = 0;
            break;
           } else {
            $$1347$i = $355;$$1351$i = $354;
           }
          } else {
           $$1347$i = $352;$$1351$i = $351;
          }
          while(1) {
           $357 = ((($$1347$i)) + 20|0);
           $358 = HEAP32[$357>>2]|0;
           $359 = ($358|0)==(0|0);
           if (!($359)) {
            $$1347$i = $358;$$1351$i = $357;
            continue;
           }
           $360 = ((($$1347$i)) + 16|0);
           $361 = HEAP32[$360>>2]|0;
           $362 = ($361|0)==(0|0);
           if ($362) {
            break;
           } else {
            $$1347$i = $361;$$1351$i = $360;
           }
          }
          HEAP32[$$1351$i>>2] = 0;
          $$3349$i = $$1347$i;
         } else {
          $347 = ((($$4$lcssa$i)) + 8|0);
          $348 = HEAP32[$347>>2]|0;
          $349 = ((($348)) + 12|0);
          HEAP32[$349>>2] = $345;
          $350 = ((($345)) + 8|0);
          HEAP32[$350>>2] = $348;
          $$3349$i = $345;
         }
        } while(0);
        $363 = ($343|0)==(0|0);
        do {
         if ($363) {
          $445 = $242;
         } else {
          $364 = ((($$4$lcssa$i)) + 28|0);
          $365 = HEAP32[$364>>2]|0;
          $366 = (24120 + ($365<<2)|0);
          $367 = HEAP32[$366>>2]|0;
          $368 = ($$4$lcssa$i|0)==($367|0);
          if ($368) {
           HEAP32[$366>>2] = $$3349$i;
           $cond$i203 = ($$3349$i|0)==(0|0);
           if ($cond$i203) {
            $369 = 1 << $365;
            $370 = $369 ^ -1;
            $371 = $242 & $370;
            HEAP32[(23820)>>2] = $371;
            $445 = $371;
            break;
           }
          } else {
           $372 = ((($343)) + 16|0);
           $373 = HEAP32[$372>>2]|0;
           $not$$i204 = ($373|0)!=($$4$lcssa$i|0);
           $$sink3$i = $not$$i204&1;
           $374 = (((($343)) + 16|0) + ($$sink3$i<<2)|0);
           HEAP32[$374>>2] = $$3349$i;
           $375 = ($$3349$i|0)==(0|0);
           if ($375) {
            $445 = $242;
            break;
           }
          }
          $376 = ((($$3349$i)) + 24|0);
          HEAP32[$376>>2] = $343;
          $377 = ((($$4$lcssa$i)) + 16|0);
          $378 = HEAP32[$377>>2]|0;
          $379 = ($378|0)==(0|0);
          if (!($379)) {
           $380 = ((($$3349$i)) + 16|0);
           HEAP32[$380>>2] = $378;
           $381 = ((($378)) + 24|0);
           HEAP32[$381>>2] = $$3349$i;
          }
          $382 = ((($$4$lcssa$i)) + 20|0);
          $383 = HEAP32[$382>>2]|0;
          $384 = ($383|0)==(0|0);
          if ($384) {
           $445 = $242;
          } else {
           $385 = ((($$3349$i)) + 20|0);
           HEAP32[$385>>2] = $383;
           $386 = ((($383)) + 24|0);
           HEAP32[$386>>2] = $$3349$i;
           $445 = $242;
          }
         }
        } while(0);
        $387 = ($$4329$lcssa$i>>>0)<(16);
        do {
         if ($387) {
          $388 = (($$4329$lcssa$i) + ($241))|0;
          $389 = $388 | 3;
          $390 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$390>>2] = $389;
          $391 = (($$4$lcssa$i) + ($388)|0);
          $392 = ((($391)) + 4|0);
          $393 = HEAP32[$392>>2]|0;
          $394 = $393 | 1;
          HEAP32[$392>>2] = $394;
         } else {
          $395 = $241 | 3;
          $396 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$396>>2] = $395;
          $397 = $$4329$lcssa$i | 1;
          $398 = ((($340)) + 4|0);
          HEAP32[$398>>2] = $397;
          $399 = (($340) + ($$4329$lcssa$i)|0);
          HEAP32[$399>>2] = $$4329$lcssa$i;
          $400 = $$4329$lcssa$i >>> 3;
          $401 = ($$4329$lcssa$i>>>0)<(256);
          if ($401) {
           $402 = $400 << 1;
           $403 = (23856 + ($402<<2)|0);
           $404 = HEAP32[5954]|0;
           $405 = 1 << $400;
           $406 = $404 & $405;
           $407 = ($406|0)==(0);
           if ($407) {
            $408 = $404 | $405;
            HEAP32[5954] = $408;
            $$pre$i205 = ((($403)) + 8|0);
            $$0345$i = $403;$$pre$phi$i206Z2D = $$pre$i205;
           } else {
            $409 = ((($403)) + 8|0);
            $410 = HEAP32[$409>>2]|0;
            $$0345$i = $410;$$pre$phi$i206Z2D = $409;
           }
           HEAP32[$$pre$phi$i206Z2D>>2] = $340;
           $411 = ((($$0345$i)) + 12|0);
           HEAP32[$411>>2] = $340;
           $412 = ((($340)) + 8|0);
           HEAP32[$412>>2] = $$0345$i;
           $413 = ((($340)) + 12|0);
           HEAP32[$413>>2] = $403;
           break;
          }
          $414 = $$4329$lcssa$i >>> 8;
          $415 = ($414|0)==(0);
          if ($415) {
           $$0339$i = 0;
          } else {
           $416 = ($$4329$lcssa$i>>>0)>(16777215);
           if ($416) {
            $$0339$i = 31;
           } else {
            $417 = (($414) + 1048320)|0;
            $418 = $417 >>> 16;
            $419 = $418 & 8;
            $420 = $414 << $419;
            $421 = (($420) + 520192)|0;
            $422 = $421 >>> 16;
            $423 = $422 & 4;
            $424 = $423 | $419;
            $425 = $420 << $423;
            $426 = (($425) + 245760)|0;
            $427 = $426 >>> 16;
            $428 = $427 & 2;
            $429 = $424 | $428;
            $430 = (14 - ($429))|0;
            $431 = $425 << $428;
            $432 = $431 >>> 15;
            $433 = (($430) + ($432))|0;
            $434 = $433 << 1;
            $435 = (($433) + 7)|0;
            $436 = $$4329$lcssa$i >>> $435;
            $437 = $436 & 1;
            $438 = $437 | $434;
            $$0339$i = $438;
           }
          }
          $439 = (24120 + ($$0339$i<<2)|0);
          $440 = ((($340)) + 28|0);
          HEAP32[$440>>2] = $$0339$i;
          $441 = ((($340)) + 16|0);
          $442 = ((($441)) + 4|0);
          HEAP32[$442>>2] = 0;
          HEAP32[$441>>2] = 0;
          $443 = 1 << $$0339$i;
          $444 = $445 & $443;
          $446 = ($444|0)==(0);
          if ($446) {
           $447 = $445 | $443;
           HEAP32[(23820)>>2] = $447;
           HEAP32[$439>>2] = $340;
           $448 = ((($340)) + 24|0);
           HEAP32[$448>>2] = $439;
           $449 = ((($340)) + 12|0);
           HEAP32[$449>>2] = $340;
           $450 = ((($340)) + 8|0);
           HEAP32[$450>>2] = $340;
           break;
          }
          $451 = HEAP32[$439>>2]|0;
          $452 = ($$0339$i|0)==(31);
          $453 = $$0339$i >>> 1;
          $454 = (25 - ($453))|0;
          $455 = $452 ? 0 : $454;
          $456 = $$4329$lcssa$i << $455;
          $$0322$i = $456;$$0323$i = $451;
          while(1) {
           $457 = ((($$0323$i)) + 4|0);
           $458 = HEAP32[$457>>2]|0;
           $459 = $458 & -8;
           $460 = ($459|0)==($$4329$lcssa$i|0);
           if ($460) {
            label = 106;
            break;
           }
           $461 = $$0322$i >>> 31;
           $462 = (((($$0323$i)) + 16|0) + ($461<<2)|0);
           $463 = $$0322$i << 1;
           $464 = HEAP32[$462>>2]|0;
           $465 = ($464|0)==(0|0);
           if ($465) {
            label = 105;
            break;
           } else {
            $$0322$i = $463;$$0323$i = $464;
           }
          }
          if ((label|0) == 105) {
           HEAP32[$462>>2] = $340;
           $466 = ((($340)) + 24|0);
           HEAP32[$466>>2] = $$0323$i;
           $467 = ((($340)) + 12|0);
           HEAP32[$467>>2] = $340;
           $468 = ((($340)) + 8|0);
           HEAP32[$468>>2] = $340;
           break;
          }
          else if ((label|0) == 106) {
           $469 = ((($$0323$i)) + 8|0);
           $470 = HEAP32[$469>>2]|0;
           $471 = ((($470)) + 12|0);
           HEAP32[$471>>2] = $340;
           HEAP32[$469>>2] = $340;
           $472 = ((($340)) + 8|0);
           HEAP32[$472>>2] = $470;
           $473 = ((($340)) + 12|0);
           HEAP32[$473>>2] = $$0323$i;
           $474 = ((($340)) + 24|0);
           HEAP32[$474>>2] = 0;
           break;
          }
         }
        } while(0);
        $475 = ((($$4$lcssa$i)) + 8|0);
        $$2 = $475;
       } else {
        $$2 = 0;
       }
      } else {
       $$0193 = $241;
       label = 108;
      }
     }
    }
   }
  }
 } while(0);
 L151: do {
  if ((label|0) == 108) {
   $476 = HEAP32[(23824)>>2]|0;
   $477 = ($476>>>0)<($$0193>>>0);
   if (!($477)) {
    $478 = (($476) - ($$0193))|0;
    $479 = HEAP32[(23836)>>2]|0;
    $480 = ($478>>>0)>(15);
    if ($480) {
     $481 = (($479) + ($$0193)|0);
     HEAP32[(23836)>>2] = $481;
     HEAP32[(23824)>>2] = $478;
     $482 = $478 | 1;
     $483 = ((($481)) + 4|0);
     HEAP32[$483>>2] = $482;
     $484 = (($481) + ($478)|0);
     HEAP32[$484>>2] = $478;
     $485 = $$0193 | 3;
     $486 = ((($479)) + 4|0);
     HEAP32[$486>>2] = $485;
    } else {
     HEAP32[(23824)>>2] = 0;
     HEAP32[(23836)>>2] = 0;
     $487 = $476 | 3;
     $488 = ((($479)) + 4|0);
     HEAP32[$488>>2] = $487;
     $489 = (($479) + ($476)|0);
     $490 = ((($489)) + 4|0);
     $491 = HEAP32[$490>>2]|0;
     $492 = $491 | 1;
     HEAP32[$490>>2] = $492;
    }
    $493 = ((($479)) + 8|0);
    $$2 = $493;
    break;
   }
   $494 = HEAP32[(23828)>>2]|0;
   $495 = ($494>>>0)>($$0193>>>0);
   if ($495) {
    $496 = (($494) - ($$0193))|0;
    HEAP32[(23828)>>2] = $496;
    $497 = HEAP32[(23840)>>2]|0;
    $498 = (($497) + ($$0193)|0);
    HEAP32[(23840)>>2] = $498;
    $499 = $496 | 1;
    $500 = ((($498)) + 4|0);
    HEAP32[$500>>2] = $499;
    $501 = $$0193 | 3;
    $502 = ((($497)) + 4|0);
    HEAP32[$502>>2] = $501;
    $503 = ((($497)) + 8|0);
    $$2 = $503;
    break;
   }
   $504 = HEAP32[5941]|0;
   $505 = ($504|0)==(0);
   if ($505) {
    (___pthread_mutex_lock(23788)|0);
    $506 = HEAP32[5941]|0;
    $507 = ($506|0)==(0);
    if ($507) {
     HEAP32[(23772)>>2] = 4096;
     HEAP32[(23768)>>2] = 4096;
     HEAP32[(23776)>>2] = -1;
     HEAP32[(23780)>>2] = -1;
     HEAP32[(23784)>>2] = 2;
     HEAP32[(24260)>>2] = 2;
     $508 = (_pthread_mutexattr_init($1)|0);
     $509 = ($508|0)==(0);
     if ($509) {
      $510 = (_pthread_mutex_init((24264),$1)|0);
      $511 = ($510|0)==(0);
      if ($511) {
       (_pthread_mutexattr_destroy($1)|0);
      }
     }
     $512 = $2;
     $513 = $512 & -16;
     $514 = $513 ^ 1431655768;
     HEAP32[$2>>2] = $514;
     Atomics_store(HEAP32,5941,$514)|0;
    }
    (___pthread_mutex_unlock(23788)|0);
   }
   $515 = (($$0193) + 48)|0;
   $516 = HEAP32[(23772)>>2]|0;
   $517 = (($$0193) + 47)|0;
   $518 = (($516) + ($517))|0;
   $519 = (0 - ($516))|0;
   $520 = $518 & $519;
   $521 = ($520>>>0)>($$0193>>>0);
   if ($521) {
    $522 = HEAP32[(24256)>>2]|0;
    $523 = ($522|0)==(0);
    if (!($523)) {
     $524 = HEAP32[(24248)>>2]|0;
     $525 = (($524) + ($520))|0;
     $526 = ($525>>>0)<=($524>>>0);
     $527 = ($525>>>0)>($522>>>0);
     $or$cond1$i = $526 | $527;
     if ($or$cond1$i) {
      $$2 = 0;
      break;
     }
    }
    $528 = HEAP32[(24260)>>2]|0;
    $529 = $528 & 4;
    $530 = ($529|0)==(0);
    if ($530) {
     $531 = HEAP32[(23840)>>2]|0;
     $532 = ($531|0)==(0|0);
     L179: do {
      if ($532) {
       label = 131;
      } else {
       $$0$i$i = (24292);
       while(1) {
        $533 = HEAP32[$$0$i$i>>2]|0;
        $534 = ($533>>>0)>($531>>>0);
        if (!($534)) {
         $535 = ((($$0$i$i)) + 4|0);
         $536 = HEAP32[$535>>2]|0;
         $537 = (($533) + ($536)|0);
         $538 = ($537>>>0)>($531>>>0);
         if ($538) {
          break;
         }
        }
        $539 = ((($$0$i$i)) + 8|0);
        $540 = HEAP32[$539>>2]|0;
        $541 = ($540|0)==(0|0);
        if ($541) {
         label = 131;
         break L179;
        } else {
         $$0$i$i = $540;
        }
       }
       (___pthread_mutex_lock(23788)|0);
       $564 = HEAP32[(23828)>>2]|0;
       $565 = HEAP32[(23772)>>2]|0;
       $566 = (($517) - ($564))|0;
       $567 = (($566) + ($565))|0;
       $568 = (0 - ($565))|0;
       $569 = $567 & $568;
       $570 = ($569>>>0)<(2147483647);
       if ($570) {
        $571 = (_sbrk(($569|0))|0);
        $572 = HEAP32[$$0$i$i>>2]|0;
        $573 = HEAP32[$535>>2]|0;
        $574 = (($572) + ($573)|0);
        $575 = ($571|0)==($574|0);
        if ($575) {
         $576 = ($571|0)==((-1)|0);
         if ($576) {
          $$2234243136$i = $569;
          label = 145;
         } else {
          $$3229$i = $571;$$3235$i = $569;
         }
        } else {
         $$2247$ph$i = $571;$$2253$ph$i = $569;
         label = 139;
        }
       } else {
        $$2234243136$i = 0;
        label = 145;
       }
      }
     } while(0);
     do {
      if ((label|0) == 131) {
       (___pthread_mutex_lock(23788)|0);
       $542 = (_sbrk(0)|0);
       $543 = ($542|0)==((-1)|0);
       if ($543) {
        $$2234243136$i = 0;
        label = 145;
       } else {
        $544 = $542;
        $545 = HEAP32[(23768)>>2]|0;
        $546 = (($545) + -1)|0;
        $547 = $546 & $544;
        $548 = ($547|0)==(0);
        $549 = (($546) + ($544))|0;
        $550 = (0 - ($545))|0;
        $551 = $549 & $550;
        $552 = (($551) - ($544))|0;
        $553 = $548 ? 0 : $552;
        $$$i = (($553) + ($520))|0;
        $554 = HEAP32[(24248)>>2]|0;
        $555 = (($$$i) + ($554))|0;
        $556 = ($$$i>>>0)>($$0193>>>0);
        $557 = ($$$i>>>0)<(2147483647);
        $or$cond$i207 = $556 & $557;
        if ($or$cond$i207) {
         $558 = HEAP32[(24256)>>2]|0;
         $559 = ($558|0)==(0);
         if (!($559)) {
          $560 = ($555>>>0)<=($554>>>0);
          $561 = ($555>>>0)>($558>>>0);
          $or$cond2$i208 = $560 | $561;
          if ($or$cond2$i208) {
           $$2234243136$i = 0;
           label = 145;
           break;
          }
         }
         $562 = (_sbrk(($$$i|0))|0);
         $563 = ($562|0)==($542|0);
         if ($563) {
          $$3229$i = $542;$$3235$i = $$$i;
         } else {
          $$2247$ph$i = $562;$$2253$ph$i = $$$i;
          label = 139;
         }
        } else {
         $$2234243136$i = 0;
         label = 145;
        }
       }
      }
     } while(0);
     do {
      if ((label|0) == 139) {
       $577 = (0 - ($$2253$ph$i))|0;
       $578 = ($$2247$ph$i|0)!=((-1)|0);
       $579 = ($$2253$ph$i>>>0)<(2147483647);
       $or$cond7$i = $579 & $578;
       $580 = ($515>>>0)>($$2253$ph$i>>>0);
       $or$cond10$i = $580 & $or$cond7$i;
       if (!($or$cond10$i)) {
        $590 = ($$2247$ph$i|0)==((-1)|0);
        if ($590) {
         $$2234243136$i = 0;
         label = 145;
         break;
        } else {
         $$3229$i = $$2247$ph$i;$$3235$i = $$2253$ph$i;
         break;
        }
       }
       $581 = HEAP32[(23772)>>2]|0;
       $582 = (($517) - ($$2253$ph$i))|0;
       $583 = (($582) + ($581))|0;
       $584 = (0 - ($581))|0;
       $585 = $583 & $584;
       $586 = ($585>>>0)<(2147483647);
       if ($586) {
        $587 = (_sbrk(($585|0))|0);
        $588 = ($587|0)==((-1)|0);
        if ($588) {
         (_sbrk(($577|0))|0);
         $$2234243136$i = 0;
         label = 145;
         break;
        } else {
         $589 = (($585) + ($$2253$ph$i))|0;
         $$3229$i = $$2247$ph$i;$$3235$i = $589;
         break;
        }
       } else {
        $$3229$i = $$2247$ph$i;$$3235$i = $$2253$ph$i;
       }
      }
     } while(0);
     if ((label|0) == 145) {
      $591 = HEAP32[(24260)>>2]|0;
      $592 = $591 | 4;
      HEAP32[(24260)>>2] = $592;
      $$3229$i = (-1);$$3235$i = $$2234243136$i;
     }
     (___pthread_mutex_unlock(23788)|0);
     $$4230$i = $$3229$i;$$4236$i = $$3235$i;
    } else {
     $$4230$i = (-1);$$4236$i = 0;
    }
    $593 = ($$4230$i|0)==((-1)|0);
    $594 = ($520>>>0)<(2147483647);
    $or$cond9$i = $594 & $593;
    if ($or$cond9$i) {
     (___pthread_mutex_lock(23788)|0);
     $595 = (_sbrk(($520|0))|0);
     $596 = (_sbrk(0)|0);
     (___pthread_mutex_unlock(23788)|0);
     $597 = ($595|0)!=((-1)|0);
     $598 = ($596|0)!=((-1)|0);
     $or$cond5$i = $597 & $598;
     $599 = ($595>>>0)<($596>>>0);
     $or$cond11$i = $599 & $or$cond5$i;
     $600 = $596;
     $601 = $595;
     $602 = (($600) - ($601))|0;
     $603 = (($$0193) + 40)|0;
     $604 = ($602>>>0)>($603>>>0);
     $$$4236$i = $604 ? $602 : $$4236$i;
     $$$4230$i = $604 ? $595 : (-1);
     if ($or$cond11$i) {
      $$7$i = $$$4230$i;$$7239$i = $$$4236$i;
      label = 149;
     }
    } else {
     $$7$i = $$4230$i;$$7239$i = $$4236$i;
     label = 149;
    }
    if ((label|0) == 149) {
     $605 = ($$7$i|0)==((-1)|0);
     if (!($605)) {
      $606 = HEAP32[(24248)>>2]|0;
      $607 = (($606) + ($$7239$i))|0;
      HEAP32[(24248)>>2] = $607;
      $608 = HEAP32[(24252)>>2]|0;
      $609 = ($607>>>0)>($608>>>0);
      if ($609) {
       HEAP32[(24252)>>2] = $607;
      }
      $610 = HEAP32[(23840)>>2]|0;
      $611 = ($610|0)==(0|0);
      do {
       if ($611) {
        $612 = HEAP32[(23832)>>2]|0;
        $613 = ($612|0)==(0|0);
        $614 = ($$7$i>>>0)<($612>>>0);
        $or$cond12$i = $613 | $614;
        if ($or$cond12$i) {
         HEAP32[(23832)>>2] = $$7$i;
        }
        HEAP32[(24292)>>2] = $$7$i;
        HEAP32[(24296)>>2] = $$7239$i;
        HEAP32[(24304)>>2] = 0;
        $615 = HEAP32[5941]|0;
        HEAP32[(23852)>>2] = $615;
        HEAP32[(23848)>>2] = -1;
        $$01$i$i = 0;
        while(1) {
         $616 = $$01$i$i << 1;
         $617 = (23856 + ($616<<2)|0);
         $618 = ((($617)) + 12|0);
         HEAP32[$618>>2] = $617;
         $619 = ((($617)) + 8|0);
         HEAP32[$619>>2] = $617;
         $620 = (($$01$i$i) + 1)|0;
         $exitcond$i$i = ($620|0)==(32);
         if ($exitcond$i$i) {
          break;
         } else {
          $$01$i$i = $620;
         }
        }
        $621 = (($$7239$i) + -40)|0;
        $622 = ((($$7$i)) + 8|0);
        $623 = $622;
        $624 = $623 & 7;
        $625 = ($624|0)==(0);
        $626 = (0 - ($623))|0;
        $627 = $626 & 7;
        $628 = $625 ? 0 : $627;
        $629 = (($$7$i) + ($628)|0);
        $630 = (($621) - ($628))|0;
        HEAP32[(23840)>>2] = $629;
        HEAP32[(23828)>>2] = $630;
        $631 = $630 | 1;
        $632 = ((($629)) + 4|0);
        HEAP32[$632>>2] = $631;
        $633 = (($629) + ($630)|0);
        $634 = ((($633)) + 4|0);
        HEAP32[$634>>2] = 40;
        $635 = HEAP32[(23780)>>2]|0;
        HEAP32[(23844)>>2] = $635;
       } else {
        $$024362$i = (24292);
        while(1) {
         $636 = HEAP32[$$024362$i>>2]|0;
         $637 = ((($$024362$i)) + 4|0);
         $638 = HEAP32[$637>>2]|0;
         $639 = (($636) + ($638)|0);
         $640 = ($$7$i|0)==($639|0);
         if ($640) {
          label = 160;
          break;
         }
         $641 = ((($$024362$i)) + 8|0);
         $642 = HEAP32[$641>>2]|0;
         $643 = ($642|0)==(0|0);
         if ($643) {
          break;
         } else {
          $$024362$i = $642;
         }
        }
        if ((label|0) == 160) {
         $644 = ((($$024362$i)) + 12|0);
         $645 = HEAP32[$644>>2]|0;
         $646 = $645 & 8;
         $647 = ($646|0)==(0);
         if ($647) {
          $648 = ($610>>>0)>=($636>>>0);
          $649 = ($610>>>0)<($$7$i>>>0);
          $or$cond42$i = $649 & $648;
          if ($or$cond42$i) {
           $650 = (($638) + ($$7239$i))|0;
           HEAP32[$637>>2] = $650;
           $651 = HEAP32[(23828)>>2]|0;
           $652 = ((($610)) + 8|0);
           $653 = $652;
           $654 = $653 & 7;
           $655 = ($654|0)==(0);
           $656 = (0 - ($653))|0;
           $657 = $656 & 7;
           $658 = $655 ? 0 : $657;
           $659 = (($610) + ($658)|0);
           $660 = (($$7239$i) - ($658))|0;
           $661 = (($651) + ($660))|0;
           HEAP32[(23840)>>2] = $659;
           HEAP32[(23828)>>2] = $661;
           $662 = $661 | 1;
           $663 = ((($659)) + 4|0);
           HEAP32[$663>>2] = $662;
           $664 = (($659) + ($661)|0);
           $665 = ((($664)) + 4|0);
           HEAP32[$665>>2] = 40;
           $666 = HEAP32[(23780)>>2]|0;
           HEAP32[(23844)>>2] = $666;
           break;
          }
         }
        }
        $667 = HEAP32[(23832)>>2]|0;
        $668 = ($$7$i>>>0)<($667>>>0);
        if ($668) {
         HEAP32[(23832)>>2] = $$7$i;
        }
        $669 = (($$7$i) + ($$7239$i)|0);
        $$124461$i = (24292);
        while(1) {
         $670 = HEAP32[$$124461$i>>2]|0;
         $671 = ($670|0)==($669|0);
         if ($671) {
          label = 168;
          break;
         }
         $672 = ((($$124461$i)) + 8|0);
         $673 = HEAP32[$672>>2]|0;
         $674 = ($673|0)==(0|0);
         if ($674) {
          break;
         } else {
          $$124461$i = $673;
         }
        }
        if ((label|0) == 168) {
         $675 = ((($$124461$i)) + 12|0);
         $676 = HEAP32[$675>>2]|0;
         $677 = $676 & 8;
         $678 = ($677|0)==(0);
         if ($678) {
          HEAP32[$$124461$i>>2] = $$7$i;
          $679 = ((($$124461$i)) + 4|0);
          $680 = HEAP32[$679>>2]|0;
          $681 = (($680) + ($$7239$i))|0;
          HEAP32[$679>>2] = $681;
          $682 = ((($$7$i)) + 8|0);
          $683 = $682;
          $684 = $683 & 7;
          $685 = ($684|0)==(0);
          $686 = (0 - ($683))|0;
          $687 = $686 & 7;
          $688 = $685 ? 0 : $687;
          $689 = (($$7$i) + ($688)|0);
          $690 = ((($669)) + 8|0);
          $691 = $690;
          $692 = $691 & 7;
          $693 = ($692|0)==(0);
          $694 = (0 - ($691))|0;
          $695 = $694 & 7;
          $696 = $693 ? 0 : $695;
          $697 = (($669) + ($696)|0);
          $698 = $697;
          $699 = $689;
          $700 = (($698) - ($699))|0;
          $701 = (($689) + ($$0193)|0);
          $702 = (($700) - ($$0193))|0;
          $703 = $$0193 | 3;
          $704 = ((($689)) + 4|0);
          HEAP32[$704>>2] = $703;
          $705 = ($697|0)==($610|0);
          do {
           if ($705) {
            $706 = HEAP32[(23828)>>2]|0;
            $707 = (($706) + ($702))|0;
            HEAP32[(23828)>>2] = $707;
            HEAP32[(23840)>>2] = $701;
            $708 = $707 | 1;
            $709 = ((($701)) + 4|0);
            HEAP32[$709>>2] = $708;
           } else {
            $710 = HEAP32[(23836)>>2]|0;
            $711 = ($697|0)==($710|0);
            if ($711) {
             $712 = HEAP32[(23824)>>2]|0;
             $713 = (($712) + ($702))|0;
             HEAP32[(23824)>>2] = $713;
             HEAP32[(23836)>>2] = $701;
             $714 = $713 | 1;
             $715 = ((($701)) + 4|0);
             HEAP32[$715>>2] = $714;
             $716 = (($701) + ($713)|0);
             HEAP32[$716>>2] = $713;
             break;
            }
            $717 = ((($697)) + 4|0);
            $718 = HEAP32[$717>>2]|0;
            $719 = $718 & 3;
            $720 = ($719|0)==(1);
            if ($720) {
             $721 = $718 & -8;
             $722 = $718 >>> 3;
             $723 = ($718>>>0)<(256);
             L250: do {
              if ($723) {
               $724 = ((($697)) + 8|0);
               $725 = HEAP32[$724>>2]|0;
               $726 = ((($697)) + 12|0);
               $727 = HEAP32[$726>>2]|0;
               $728 = ($727|0)==($725|0);
               if ($728) {
                $729 = 1 << $722;
                $730 = $729 ^ -1;
                $731 = HEAP32[5954]|0;
                $732 = $731 & $730;
                HEAP32[5954] = $732;
                break;
               } else {
                $733 = ((($725)) + 12|0);
                HEAP32[$733>>2] = $727;
                $734 = ((($727)) + 8|0);
                HEAP32[$734>>2] = $725;
                break;
               }
              } else {
               $735 = ((($697)) + 24|0);
               $736 = HEAP32[$735>>2]|0;
               $737 = ((($697)) + 12|0);
               $738 = HEAP32[$737>>2]|0;
               $739 = ($738|0)==($697|0);
               do {
                if ($739) {
                 $744 = ((($697)) + 16|0);
                 $745 = ((($744)) + 4|0);
                 $746 = HEAP32[$745>>2]|0;
                 $747 = ($746|0)==(0|0);
                 if ($747) {
                  $748 = HEAP32[$744>>2]|0;
                  $749 = ($748|0)==(0|0);
                  if ($749) {
                   $$3$i$i = 0;
                   break;
                  } else {
                   $$1264$i$i = $748;$$1266$i$i = $744;
                  }
                 } else {
                  $$1264$i$i = $746;$$1266$i$i = $745;
                 }
                 while(1) {
                  $750 = ((($$1264$i$i)) + 20|0);
                  $751 = HEAP32[$750>>2]|0;
                  $752 = ($751|0)==(0|0);
                  if (!($752)) {
                   $$1264$i$i = $751;$$1266$i$i = $750;
                   continue;
                  }
                  $753 = ((($$1264$i$i)) + 16|0);
                  $754 = HEAP32[$753>>2]|0;
                  $755 = ($754|0)==(0|0);
                  if ($755) {
                   break;
                  } else {
                   $$1264$i$i = $754;$$1266$i$i = $753;
                  }
                 }
                 HEAP32[$$1266$i$i>>2] = 0;
                 $$3$i$i = $$1264$i$i;
                } else {
                 $740 = ((($697)) + 8|0);
                 $741 = HEAP32[$740>>2]|0;
                 $742 = ((($741)) + 12|0);
                 HEAP32[$742>>2] = $738;
                 $743 = ((($738)) + 8|0);
                 HEAP32[$743>>2] = $741;
                 $$3$i$i = $738;
                }
               } while(0);
               $756 = ($736|0)==(0|0);
               if ($756) {
                break;
               }
               $757 = ((($697)) + 28|0);
               $758 = HEAP32[$757>>2]|0;
               $759 = (24120 + ($758<<2)|0);
               $760 = HEAP32[$759>>2]|0;
               $761 = ($697|0)==($760|0);
               do {
                if ($761) {
                 HEAP32[$759>>2] = $$3$i$i;
                 $cond$i$i = ($$3$i$i|0)==(0|0);
                 if (!($cond$i$i)) {
                  break;
                 }
                 $762 = 1 << $758;
                 $763 = $762 ^ -1;
                 $764 = HEAP32[(23820)>>2]|0;
                 $765 = $764 & $763;
                 HEAP32[(23820)>>2] = $765;
                 break L250;
                } else {
                 $766 = ((($736)) + 16|0);
                 $767 = HEAP32[$766>>2]|0;
                 $not$$i$i = ($767|0)!=($697|0);
                 $$sink1$i$i = $not$$i$i&1;
                 $768 = (((($736)) + 16|0) + ($$sink1$i$i<<2)|0);
                 HEAP32[$768>>2] = $$3$i$i;
                 $769 = ($$3$i$i|0)==(0|0);
                 if ($769) {
                  break L250;
                 }
                }
               } while(0);
               $770 = ((($$3$i$i)) + 24|0);
               HEAP32[$770>>2] = $736;
               $771 = ((($697)) + 16|0);
               $772 = HEAP32[$771>>2]|0;
               $773 = ($772|0)==(0|0);
               if (!($773)) {
                $774 = ((($$3$i$i)) + 16|0);
                HEAP32[$774>>2] = $772;
                $775 = ((($772)) + 24|0);
                HEAP32[$775>>2] = $$3$i$i;
               }
               $776 = ((($771)) + 4|0);
               $777 = HEAP32[$776>>2]|0;
               $778 = ($777|0)==(0|0);
               if ($778) {
                break;
               }
               $779 = ((($$3$i$i)) + 20|0);
               HEAP32[$779>>2] = $777;
               $780 = ((($777)) + 24|0);
               HEAP32[$780>>2] = $$3$i$i;
              }
             } while(0);
             $781 = (($697) + ($721)|0);
             $782 = (($721) + ($702))|0;
             $$0$i17$i = $781;$$0260$i$i = $782;
            } else {
             $$0$i17$i = $697;$$0260$i$i = $702;
            }
            $783 = ((($$0$i17$i)) + 4|0);
            $784 = HEAP32[$783>>2]|0;
            $785 = $784 & -2;
            HEAP32[$783>>2] = $785;
            $786 = $$0260$i$i | 1;
            $787 = ((($701)) + 4|0);
            HEAP32[$787>>2] = $786;
            $788 = (($701) + ($$0260$i$i)|0);
            HEAP32[$788>>2] = $$0260$i$i;
            $789 = $$0260$i$i >>> 3;
            $790 = ($$0260$i$i>>>0)<(256);
            if ($790) {
             $791 = $789 << 1;
             $792 = (23856 + ($791<<2)|0);
             $793 = HEAP32[5954]|0;
             $794 = 1 << $789;
             $795 = $793 & $794;
             $796 = ($795|0)==(0);
             if ($796) {
              $797 = $793 | $794;
              HEAP32[5954] = $797;
              $$pre$i$i = ((($792)) + 8|0);
              $$0268$i$i = $792;$$pre$phi$i$iZ2D = $$pre$i$i;
             } else {
              $798 = ((($792)) + 8|0);
              $799 = HEAP32[$798>>2]|0;
              $$0268$i$i = $799;$$pre$phi$i$iZ2D = $798;
             }
             HEAP32[$$pre$phi$i$iZ2D>>2] = $701;
             $800 = ((($$0268$i$i)) + 12|0);
             HEAP32[$800>>2] = $701;
             $801 = ((($701)) + 8|0);
             HEAP32[$801>>2] = $$0268$i$i;
             $802 = ((($701)) + 12|0);
             HEAP32[$802>>2] = $792;
             break;
            }
            $803 = $$0260$i$i >>> 8;
            $804 = ($803|0)==(0);
            do {
             if ($804) {
              $$0269$i$i = 0;
             } else {
              $805 = ($$0260$i$i>>>0)>(16777215);
              if ($805) {
               $$0269$i$i = 31;
               break;
              }
              $806 = (($803) + 1048320)|0;
              $807 = $806 >>> 16;
              $808 = $807 & 8;
              $809 = $803 << $808;
              $810 = (($809) + 520192)|0;
              $811 = $810 >>> 16;
              $812 = $811 & 4;
              $813 = $812 | $808;
              $814 = $809 << $812;
              $815 = (($814) + 245760)|0;
              $816 = $815 >>> 16;
              $817 = $816 & 2;
              $818 = $813 | $817;
              $819 = (14 - ($818))|0;
              $820 = $814 << $817;
              $821 = $820 >>> 15;
              $822 = (($819) + ($821))|0;
              $823 = $822 << 1;
              $824 = (($822) + 7)|0;
              $825 = $$0260$i$i >>> $824;
              $826 = $825 & 1;
              $827 = $826 | $823;
              $$0269$i$i = $827;
             }
            } while(0);
            $828 = (24120 + ($$0269$i$i<<2)|0);
            $829 = ((($701)) + 28|0);
            HEAP32[$829>>2] = $$0269$i$i;
            $830 = ((($701)) + 16|0);
            $831 = ((($830)) + 4|0);
            HEAP32[$831>>2] = 0;
            HEAP32[$830>>2] = 0;
            $832 = HEAP32[(23820)>>2]|0;
            $833 = 1 << $$0269$i$i;
            $834 = $832 & $833;
            $835 = ($834|0)==(0);
            if ($835) {
             $836 = $832 | $833;
             HEAP32[(23820)>>2] = $836;
             HEAP32[$828>>2] = $701;
             $837 = ((($701)) + 24|0);
             HEAP32[$837>>2] = $828;
             $838 = ((($701)) + 12|0);
             HEAP32[$838>>2] = $701;
             $839 = ((($701)) + 8|0);
             HEAP32[$839>>2] = $701;
             break;
            }
            $840 = HEAP32[$828>>2]|0;
            $841 = ($$0269$i$i|0)==(31);
            $842 = $$0269$i$i >>> 1;
            $843 = (25 - ($842))|0;
            $844 = $841 ? 0 : $843;
            $845 = $$0260$i$i << $844;
            $$0261$i$i = $845;$$0262$i$i = $840;
            while(1) {
             $846 = ((($$0262$i$i)) + 4|0);
             $847 = HEAP32[$846>>2]|0;
             $848 = $847 & -8;
             $849 = ($848|0)==($$0260$i$i|0);
             if ($849) {
              label = 209;
              break;
             }
             $850 = $$0261$i$i >>> 31;
             $851 = (((($$0262$i$i)) + 16|0) + ($850<<2)|0);
             $852 = $$0261$i$i << 1;
             $853 = HEAP32[$851>>2]|0;
             $854 = ($853|0)==(0|0);
             if ($854) {
              label = 208;
              break;
             } else {
              $$0261$i$i = $852;$$0262$i$i = $853;
             }
            }
            if ((label|0) == 208) {
             HEAP32[$851>>2] = $701;
             $855 = ((($701)) + 24|0);
             HEAP32[$855>>2] = $$0262$i$i;
             $856 = ((($701)) + 12|0);
             HEAP32[$856>>2] = $701;
             $857 = ((($701)) + 8|0);
             HEAP32[$857>>2] = $701;
             break;
            }
            else if ((label|0) == 209) {
             $858 = ((($$0262$i$i)) + 8|0);
             $859 = HEAP32[$858>>2]|0;
             $860 = ((($859)) + 12|0);
             HEAP32[$860>>2] = $701;
             HEAP32[$858>>2] = $701;
             $861 = ((($701)) + 8|0);
             HEAP32[$861>>2] = $859;
             $862 = ((($701)) + 12|0);
             HEAP32[$862>>2] = $$0262$i$i;
             $863 = ((($701)) + 24|0);
             HEAP32[$863>>2] = 0;
             break;
            }
           }
          } while(0);
          $988 = ((($689)) + 8|0);
          $$2 = $988;
          break L151;
         }
        }
        $$0$i$i$i = (24292);
        while(1) {
         $864 = HEAP32[$$0$i$i$i>>2]|0;
         $865 = ($864>>>0)>($610>>>0);
         if (!($865)) {
          $866 = ((($$0$i$i$i)) + 4|0);
          $867 = HEAP32[$866>>2]|0;
          $868 = (($864) + ($867)|0);
          $869 = ($868>>>0)>($610>>>0);
          if ($869) {
           break;
          }
         }
         $870 = ((($$0$i$i$i)) + 8|0);
         $871 = HEAP32[$870>>2]|0;
         $$0$i$i$i = $871;
        }
        $872 = ((($868)) + -47|0);
        $873 = ((($872)) + 8|0);
        $874 = $873;
        $875 = $874 & 7;
        $876 = ($875|0)==(0);
        $877 = (0 - ($874))|0;
        $878 = $877 & 7;
        $879 = $876 ? 0 : $878;
        $880 = (($872) + ($879)|0);
        $881 = ((($610)) + 16|0);
        $882 = ($880>>>0)<($881>>>0);
        $883 = $882 ? $610 : $880;
        $884 = ((($883)) + 8|0);
        $885 = ((($883)) + 24|0);
        $886 = (($$7239$i) + -40)|0;
        $887 = ((($$7$i)) + 8|0);
        $888 = $887;
        $889 = $888 & 7;
        $890 = ($889|0)==(0);
        $891 = (0 - ($888))|0;
        $892 = $891 & 7;
        $893 = $890 ? 0 : $892;
        $894 = (($$7$i) + ($893)|0);
        $895 = (($886) - ($893))|0;
        HEAP32[(23840)>>2] = $894;
        HEAP32[(23828)>>2] = $895;
        $896 = $895 | 1;
        $897 = ((($894)) + 4|0);
        HEAP32[$897>>2] = $896;
        $898 = (($894) + ($895)|0);
        $899 = ((($898)) + 4|0);
        HEAP32[$899>>2] = 40;
        $900 = HEAP32[(23780)>>2]|0;
        HEAP32[(23844)>>2] = $900;
        $901 = ((($883)) + 4|0);
        HEAP32[$901>>2] = 27;
        ;HEAP32[$884>>2]=HEAP32[(24292)>>2]|0;HEAP32[$884+4>>2]=HEAP32[(24292)+4>>2]|0;HEAP32[$884+8>>2]=HEAP32[(24292)+8>>2]|0;HEAP32[$884+12>>2]=HEAP32[(24292)+12>>2]|0;
        HEAP32[(24292)>>2] = $$7$i;
        HEAP32[(24296)>>2] = $$7239$i;
        HEAP32[(24304)>>2] = 0;
        HEAP32[(24300)>>2] = $884;
        $903 = $885;
        while(1) {
         $902 = ((($903)) + 4|0);
         HEAP32[$902>>2] = 7;
         $904 = ((($903)) + 8|0);
         $905 = ($904>>>0)<($868>>>0);
         if ($905) {
          $903 = $902;
         } else {
          break;
         }
        }
        $906 = ($883|0)==($610|0);
        if (!($906)) {
         $907 = $883;
         $908 = $610;
         $909 = (($907) - ($908))|0;
         $910 = HEAP32[$901>>2]|0;
         $911 = $910 & -2;
         HEAP32[$901>>2] = $911;
         $912 = $909 | 1;
         $913 = ((($610)) + 4|0);
         HEAP32[$913>>2] = $912;
         HEAP32[$883>>2] = $909;
         $914 = $909 >>> 3;
         $915 = ($909>>>0)<(256);
         if ($915) {
          $916 = $914 << 1;
          $917 = (23856 + ($916<<2)|0);
          $918 = HEAP32[5954]|0;
          $919 = 1 << $914;
          $920 = $918 & $919;
          $921 = ($920|0)==(0);
          if ($921) {
           $922 = $918 | $919;
           HEAP32[5954] = $922;
           $$pre$i18$i = ((($917)) + 8|0);
           $$0206$i$i = $917;$$pre$phi$i19$iZ2D = $$pre$i18$i;
          } else {
           $923 = ((($917)) + 8|0);
           $924 = HEAP32[$923>>2]|0;
           $$0206$i$i = $924;$$pre$phi$i19$iZ2D = $923;
          }
          HEAP32[$$pre$phi$i19$iZ2D>>2] = $610;
          $925 = ((($$0206$i$i)) + 12|0);
          HEAP32[$925>>2] = $610;
          $926 = ((($610)) + 8|0);
          HEAP32[$926>>2] = $$0206$i$i;
          $927 = ((($610)) + 12|0);
          HEAP32[$927>>2] = $917;
          break;
         }
         $928 = $909 >>> 8;
         $929 = ($928|0)==(0);
         do {
          if ($929) {
           $$0207$i$i = 0;
          } else {
           $930 = ($909>>>0)>(16777215);
           if ($930) {
            $$0207$i$i = 31;
            break;
           }
           $931 = (($928) + 1048320)|0;
           $932 = $931 >>> 16;
           $933 = $932 & 8;
           $934 = $928 << $933;
           $935 = (($934) + 520192)|0;
           $936 = $935 >>> 16;
           $937 = $936 & 4;
           $938 = $937 | $933;
           $939 = $934 << $937;
           $940 = (($939) + 245760)|0;
           $941 = $940 >>> 16;
           $942 = $941 & 2;
           $943 = $938 | $942;
           $944 = (14 - ($943))|0;
           $945 = $939 << $942;
           $946 = $945 >>> 15;
           $947 = (($944) + ($946))|0;
           $948 = $947 << 1;
           $949 = (($947) + 7)|0;
           $950 = $909 >>> $949;
           $951 = $950 & 1;
           $952 = $951 | $948;
           $$0207$i$i = $952;
          }
         } while(0);
         $953 = (24120 + ($$0207$i$i<<2)|0);
         $954 = ((($610)) + 28|0);
         HEAP32[$954>>2] = $$0207$i$i;
         $955 = ((($610)) + 20|0);
         HEAP32[$955>>2] = 0;
         HEAP32[$881>>2] = 0;
         $956 = HEAP32[(23820)>>2]|0;
         $957 = 1 << $$0207$i$i;
         $958 = $956 & $957;
         $959 = ($958|0)==(0);
         if ($959) {
          $960 = $956 | $957;
          HEAP32[(23820)>>2] = $960;
          HEAP32[$953>>2] = $610;
          $961 = ((($610)) + 24|0);
          HEAP32[$961>>2] = $953;
          $962 = ((($610)) + 12|0);
          HEAP32[$962>>2] = $610;
          $963 = ((($610)) + 8|0);
          HEAP32[$963>>2] = $610;
          break;
         }
         $964 = HEAP32[$953>>2]|0;
         $965 = ($$0207$i$i|0)==(31);
         $966 = $$0207$i$i >>> 1;
         $967 = (25 - ($966))|0;
         $968 = $965 ? 0 : $967;
         $969 = $909 << $968;
         $$0201$i$i = $969;$$0202$i$i = $964;
         while(1) {
          $970 = ((($$0202$i$i)) + 4|0);
          $971 = HEAP32[$970>>2]|0;
          $972 = $971 & -8;
          $973 = ($972|0)==($909|0);
          if ($973) {
           label = 231;
           break;
          }
          $974 = $$0201$i$i >>> 31;
          $975 = (((($$0202$i$i)) + 16|0) + ($974<<2)|0);
          $976 = $$0201$i$i << 1;
          $977 = HEAP32[$975>>2]|0;
          $978 = ($977|0)==(0|0);
          if ($978) {
           label = 230;
           break;
          } else {
           $$0201$i$i = $976;$$0202$i$i = $977;
          }
         }
         if ((label|0) == 230) {
          HEAP32[$975>>2] = $610;
          $979 = ((($610)) + 24|0);
          HEAP32[$979>>2] = $$0202$i$i;
          $980 = ((($610)) + 12|0);
          HEAP32[$980>>2] = $610;
          $981 = ((($610)) + 8|0);
          HEAP32[$981>>2] = $610;
          break;
         }
         else if ((label|0) == 231) {
          $982 = ((($$0202$i$i)) + 8|0);
          $983 = HEAP32[$982>>2]|0;
          $984 = ((($983)) + 12|0);
          HEAP32[$984>>2] = $610;
          HEAP32[$982>>2] = $610;
          $985 = ((($610)) + 8|0);
          HEAP32[$985>>2] = $983;
          $986 = ((($610)) + 12|0);
          HEAP32[$986>>2] = $$0202$i$i;
          $987 = ((($610)) + 24|0);
          HEAP32[$987>>2] = 0;
          break;
         }
        }
       }
      } while(0);
      $989 = HEAP32[(23828)>>2]|0;
      $990 = ($989>>>0)>($$0193>>>0);
      if ($990) {
       $991 = (($989) - ($$0193))|0;
       HEAP32[(23828)>>2] = $991;
       $992 = HEAP32[(23840)>>2]|0;
       $993 = (($992) + ($$0193)|0);
       HEAP32[(23840)>>2] = $993;
       $994 = $991 | 1;
       $995 = ((($993)) + 4|0);
       HEAP32[$995>>2] = $994;
       $996 = $$0193 | 3;
       $997 = ((($992)) + 4|0);
       HEAP32[$997>>2] = $996;
       $998 = ((($992)) + 8|0);
       $$2 = $998;
       break;
      }
     }
    }
    $999 = (___errno_location()|0);
    HEAP32[$999>>2] = 12;
    $$2 = 0;
   } else {
    $$2 = 0;
   }
  }
 } while(0);
 $1000 = HEAP32[(24260)>>2]|0;
 $1001 = $1000 & 2;
 $1002 = ($1001|0)==(0);
 if ($1002) {
  $$1 = $$2;
  STACKTOP = sp;return ($$1|0);
 }
 (___pthread_mutex_unlock((24264))|0);
 $$1 = $$2;
 STACKTOP = sp;return ($$1|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0195$i = 0, $$0195$in$i = 0, $$0348 = 0, $$0349 = 0, $$0361 = 0, $$0368 = 0, $$1 = 0, $$1347 = 0, $$1352 = 0, $$1355 = 0, $$1363 = 0, $$1367 = 0, $$2 = 0, $$3 = 0, $$3365 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond374 = 0, $cond375 = 0, $not$ = 0, $not$370 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(24260)>>2]|0;
 $4 = $3 & 2;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = (___pthread_mutex_lock((24264))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   return;
  }
 }
 $8 = HEAP32[(23832)>>2]|0;
 $9 = ((($0)) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & -8;
 $12 = (($2) + ($11)|0);
 $13 = $10 & 1;
 $14 = ($13|0)==(0);
 do {
  if ($14) {
   $15 = HEAP32[$2>>2]|0;
   $16 = $10 & 3;
   $17 = ($16|0)==(0);
   if (!($17)) {
    $18 = (0 - ($15))|0;
    $19 = (($2) + ($18)|0);
    $20 = (($15) + ($11))|0;
    $21 = ($19>>>0)<($8>>>0);
    if (!($21)) {
     $22 = HEAP32[(23836)>>2]|0;
     $23 = ($19|0)==($22|0);
     if ($23) {
      $83 = ((($12)) + 4|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = $84 & 3;
      $86 = ($85|0)==(3);
      if (!($86)) {
       $$1 = $19;$$1347 = $20;$91 = $19;
       label = 30;
       break;
      }
      $87 = (($19) + ($20)|0);
      $88 = ((($19)) + 4|0);
      $89 = $20 | 1;
      $90 = $84 & -2;
      HEAP32[(23824)>>2] = $20;
      HEAP32[$83>>2] = $90;
      HEAP32[$88>>2] = $89;
      HEAP32[$87>>2] = $20;
      break;
     }
     $24 = $15 >>> 3;
     $25 = ($15>>>0)<(256);
     if ($25) {
      $26 = ((($19)) + 8|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ((($19)) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($29|0)==($27|0);
      if ($30) {
       $31 = 1 << $24;
       $32 = $31 ^ -1;
       $33 = HEAP32[5954]|0;
       $34 = $33 & $32;
       HEAP32[5954] = $34;
       $$1 = $19;$$1347 = $20;$91 = $19;
       label = 30;
       break;
      } else {
       $35 = ((($27)) + 12|0);
       HEAP32[$35>>2] = $29;
       $36 = ((($29)) + 8|0);
       HEAP32[$36>>2] = $27;
       $$1 = $19;$$1347 = $20;$91 = $19;
       label = 30;
       break;
      }
     }
     $37 = ((($19)) + 24|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($19)) + 12|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($19|0);
     do {
      if ($41) {
       $46 = ((($19)) + 16|0);
       $47 = ((($46)) + 4|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = ($48|0)==(0|0);
       if ($49) {
        $50 = HEAP32[$46>>2]|0;
        $51 = ($50|0)==(0|0);
        if ($51) {
         $$3 = 0;
         break;
        } else {
         $$1352 = $50;$$1355 = $46;
        }
       } else {
        $$1352 = $48;$$1355 = $47;
       }
       while(1) {
        $52 = ((($$1352)) + 20|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = ($53|0)==(0|0);
        if (!($54)) {
         $$1352 = $53;$$1355 = $52;
         continue;
        }
        $55 = ((($$1352)) + 16|0);
        $56 = HEAP32[$55>>2]|0;
        $57 = ($56|0)==(0|0);
        if ($57) {
         break;
        } else {
         $$1352 = $56;$$1355 = $55;
        }
       }
       HEAP32[$$1355>>2] = 0;
       $$3 = $$1352;
      } else {
       $42 = ((($19)) + 8|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = ((($43)) + 12|0);
       HEAP32[$44>>2] = $40;
       $45 = ((($40)) + 8|0);
       HEAP32[$45>>2] = $43;
       $$3 = $40;
      }
     } while(0);
     $58 = ($38|0)==(0|0);
     if ($58) {
      $$1 = $19;$$1347 = $20;$91 = $19;
      label = 30;
     } else {
      $59 = ((($19)) + 28|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = (24120 + ($60<<2)|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($19|0)==($62|0);
      if ($63) {
       HEAP32[$61>>2] = $$3;
       $cond374 = ($$3|0)==(0|0);
       if ($cond374) {
        $64 = 1 << $60;
        $65 = $64 ^ -1;
        $66 = HEAP32[(23820)>>2]|0;
        $67 = $66 & $65;
        HEAP32[(23820)>>2] = $67;
        $$1 = $19;$$1347 = $20;$91 = $19;
        label = 30;
        break;
       }
      } else {
       $68 = ((($38)) + 16|0);
       $69 = HEAP32[$68>>2]|0;
       $not$370 = ($69|0)!=($19|0);
       $$sink3 = $not$370&1;
       $70 = (((($38)) + 16|0) + ($$sink3<<2)|0);
       HEAP32[$70>>2] = $$3;
       $71 = ($$3|0)==(0|0);
       if ($71) {
        $$1 = $19;$$1347 = $20;$91 = $19;
        label = 30;
        break;
       }
      }
      $72 = ((($$3)) + 24|0);
      HEAP32[$72>>2] = $38;
      $73 = ((($19)) + 16|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = ($74|0)==(0|0);
      if (!($75)) {
       $76 = ((($$3)) + 16|0);
       HEAP32[$76>>2] = $74;
       $77 = ((($74)) + 24|0);
       HEAP32[$77>>2] = $$3;
      }
      $78 = ((($73)) + 4|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($79|0)==(0|0);
      if ($80) {
       $$1 = $19;$$1347 = $20;$91 = $19;
       label = 30;
      } else {
       $81 = ((($$3)) + 20|0);
       HEAP32[$81>>2] = $79;
       $82 = ((($79)) + 24|0);
       HEAP32[$82>>2] = $$3;
       $$1 = $19;$$1347 = $20;$91 = $19;
       label = 30;
      }
     }
    }
   }
  } else {
   $$1 = $2;$$1347 = $11;$91 = $2;
   label = 30;
  }
 } while(0);
 do {
  if ((label|0) == 30) {
   $92 = ($91>>>0)<($12>>>0);
   if ($92) {
    $93 = ((($12)) + 4|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = $94 & 1;
    $96 = ($95|0)==(0);
    if (!($96)) {
     $97 = $94 & 2;
     $98 = ($97|0)==(0);
     if ($98) {
      $99 = HEAP32[(23840)>>2]|0;
      $100 = ($12|0)==($99|0);
      $101 = HEAP32[(23836)>>2]|0;
      if ($100) {
       $102 = HEAP32[(23828)>>2]|0;
       $103 = (($102) + ($$1347))|0;
       HEAP32[(23828)>>2] = $103;
       HEAP32[(23840)>>2] = $$1;
       $104 = $103 | 1;
       $105 = ((($$1)) + 4|0);
       HEAP32[$105>>2] = $104;
       $106 = ($$1|0)==($101|0);
       if (!($106)) {
        break;
       }
       HEAP32[(23836)>>2] = 0;
       HEAP32[(23824)>>2] = 0;
       break;
      }
      $107 = ($12|0)==($101|0);
      if ($107) {
       $108 = HEAP32[(23824)>>2]|0;
       $109 = (($108) + ($$1347))|0;
       HEAP32[(23824)>>2] = $109;
       HEAP32[(23836)>>2] = $91;
       $110 = $109 | 1;
       $111 = ((($$1)) + 4|0);
       HEAP32[$111>>2] = $110;
       $112 = (($91) + ($109)|0);
       HEAP32[$112>>2] = $109;
       break;
      }
      $113 = $94 & -8;
      $114 = (($113) + ($$1347))|0;
      $115 = $94 >>> 3;
      $116 = ($94>>>0)<(256);
      do {
       if ($116) {
        $117 = ((($12)) + 8|0);
        $118 = HEAP32[$117>>2]|0;
        $119 = ((($12)) + 12|0);
        $120 = HEAP32[$119>>2]|0;
        $121 = ($120|0)==($118|0);
        if ($121) {
         $122 = 1 << $115;
         $123 = $122 ^ -1;
         $124 = HEAP32[5954]|0;
         $125 = $124 & $123;
         HEAP32[5954] = $125;
         break;
        } else {
         $126 = ((($118)) + 12|0);
         HEAP32[$126>>2] = $120;
         $127 = ((($120)) + 8|0);
         HEAP32[$127>>2] = $118;
         break;
        }
       } else {
        $128 = ((($12)) + 24|0);
        $129 = HEAP32[$128>>2]|0;
        $130 = ((($12)) + 12|0);
        $131 = HEAP32[$130>>2]|0;
        $132 = ($131|0)==($12|0);
        do {
         if ($132) {
          $137 = ((($12)) + 16|0);
          $138 = ((($137)) + 4|0);
          $139 = HEAP32[$138>>2]|0;
          $140 = ($139|0)==(0|0);
          if ($140) {
           $141 = HEAP32[$137>>2]|0;
           $142 = ($141|0)==(0|0);
           if ($142) {
            $$3365 = 0;
            break;
           } else {
            $$1363 = $141;$$1367 = $137;
           }
          } else {
           $$1363 = $139;$$1367 = $138;
          }
          while(1) {
           $143 = ((($$1363)) + 20|0);
           $144 = HEAP32[$143>>2]|0;
           $145 = ($144|0)==(0|0);
           if (!($145)) {
            $$1363 = $144;$$1367 = $143;
            continue;
           }
           $146 = ((($$1363)) + 16|0);
           $147 = HEAP32[$146>>2]|0;
           $148 = ($147|0)==(0|0);
           if ($148) {
            break;
           } else {
            $$1363 = $147;$$1367 = $146;
           }
          }
          HEAP32[$$1367>>2] = 0;
          $$3365 = $$1363;
         } else {
          $133 = ((($12)) + 8|0);
          $134 = HEAP32[$133>>2]|0;
          $135 = ((($134)) + 12|0);
          HEAP32[$135>>2] = $131;
          $136 = ((($131)) + 8|0);
          HEAP32[$136>>2] = $134;
          $$3365 = $131;
         }
        } while(0);
        $149 = ($129|0)==(0|0);
        if (!($149)) {
         $150 = ((($12)) + 28|0);
         $151 = HEAP32[$150>>2]|0;
         $152 = (24120 + ($151<<2)|0);
         $153 = HEAP32[$152>>2]|0;
         $154 = ($12|0)==($153|0);
         if ($154) {
          HEAP32[$152>>2] = $$3365;
          $cond375 = ($$3365|0)==(0|0);
          if ($cond375) {
           $155 = 1 << $151;
           $156 = $155 ^ -1;
           $157 = HEAP32[(23820)>>2]|0;
           $158 = $157 & $156;
           HEAP32[(23820)>>2] = $158;
           break;
          }
         } else {
          $159 = ((($129)) + 16|0);
          $160 = HEAP32[$159>>2]|0;
          $not$ = ($160|0)!=($12|0);
          $$sink5 = $not$&1;
          $161 = (((($129)) + 16|0) + ($$sink5<<2)|0);
          HEAP32[$161>>2] = $$3365;
          $162 = ($$3365|0)==(0|0);
          if ($162) {
           break;
          }
         }
         $163 = ((($$3365)) + 24|0);
         HEAP32[$163>>2] = $129;
         $164 = ((($12)) + 16|0);
         $165 = HEAP32[$164>>2]|0;
         $166 = ($165|0)==(0|0);
         if (!($166)) {
          $167 = ((($$3365)) + 16|0);
          HEAP32[$167>>2] = $165;
          $168 = ((($165)) + 24|0);
          HEAP32[$168>>2] = $$3365;
         }
         $169 = ((($164)) + 4|0);
         $170 = HEAP32[$169>>2]|0;
         $171 = ($170|0)==(0|0);
         if (!($171)) {
          $172 = ((($$3365)) + 20|0);
          HEAP32[$172>>2] = $170;
          $173 = ((($170)) + 24|0);
          HEAP32[$173>>2] = $$3365;
         }
        }
       }
      } while(0);
      $174 = $114 | 1;
      $175 = ((($$1)) + 4|0);
      HEAP32[$175>>2] = $174;
      $176 = (($91) + ($114)|0);
      HEAP32[$176>>2] = $114;
      $177 = HEAP32[(23836)>>2]|0;
      $178 = ($$1|0)==($177|0);
      if ($178) {
       HEAP32[(23824)>>2] = $114;
       break;
      } else {
       $$2 = $114;
      }
     } else {
      $179 = $94 & -2;
      HEAP32[$93>>2] = $179;
      $180 = $$1347 | 1;
      $181 = ((($$1)) + 4|0);
      HEAP32[$181>>2] = $180;
      $182 = (($91) + ($$1347)|0);
      HEAP32[$182>>2] = $$1347;
      $$2 = $$1347;
     }
     $183 = $$2 >>> 3;
     $184 = ($$2>>>0)<(256);
     if ($184) {
      $185 = $183 << 1;
      $186 = (23856 + ($185<<2)|0);
      $187 = HEAP32[5954]|0;
      $188 = 1 << $183;
      $189 = $187 & $188;
      $190 = ($189|0)==(0);
      if ($190) {
       $191 = $187 | $188;
       HEAP32[5954] = $191;
       $$pre = ((($186)) + 8|0);
       $$0368 = $186;$$pre$phiZ2D = $$pre;
      } else {
       $192 = ((($186)) + 8|0);
       $193 = HEAP32[$192>>2]|0;
       $$0368 = $193;$$pre$phiZ2D = $192;
      }
      HEAP32[$$pre$phiZ2D>>2] = $$1;
      $194 = ((($$0368)) + 12|0);
      HEAP32[$194>>2] = $$1;
      $195 = ((($$1)) + 8|0);
      HEAP32[$195>>2] = $$0368;
      $196 = ((($$1)) + 12|0);
      HEAP32[$196>>2] = $186;
      break;
     }
     $197 = $$2 >>> 8;
     $198 = ($197|0)==(0);
     if ($198) {
      $$0361 = 0;
     } else {
      $199 = ($$2>>>0)>(16777215);
      if ($199) {
       $$0361 = 31;
      } else {
       $200 = (($197) + 1048320)|0;
       $201 = $200 >>> 16;
       $202 = $201 & 8;
       $203 = $197 << $202;
       $204 = (($203) + 520192)|0;
       $205 = $204 >>> 16;
       $206 = $205 & 4;
       $207 = $206 | $202;
       $208 = $203 << $206;
       $209 = (($208) + 245760)|0;
       $210 = $209 >>> 16;
       $211 = $210 & 2;
       $212 = $207 | $211;
       $213 = (14 - ($212))|0;
       $214 = $208 << $211;
       $215 = $214 >>> 15;
       $216 = (($213) + ($215))|0;
       $217 = $216 << 1;
       $218 = (($216) + 7)|0;
       $219 = $$2 >>> $218;
       $220 = $219 & 1;
       $221 = $220 | $217;
       $$0361 = $221;
      }
     }
     $222 = (24120 + ($$0361<<2)|0);
     $223 = ((($$1)) + 28|0);
     HEAP32[$223>>2] = $$0361;
     $224 = ((($$1)) + 16|0);
     $225 = ((($$1)) + 20|0);
     HEAP32[$225>>2] = 0;
     HEAP32[$224>>2] = 0;
     $226 = HEAP32[(23820)>>2]|0;
     $227 = 1 << $$0361;
     $228 = $226 & $227;
     $229 = ($228|0)==(0);
     do {
      if ($229) {
       $230 = $226 | $227;
       HEAP32[(23820)>>2] = $230;
       HEAP32[$222>>2] = $$1;
       $231 = ((($$1)) + 24|0);
       HEAP32[$231>>2] = $222;
       $232 = ((($$1)) + 12|0);
       HEAP32[$232>>2] = $$1;
       $233 = ((($$1)) + 8|0);
       HEAP32[$233>>2] = $$1;
      } else {
       $234 = HEAP32[$222>>2]|0;
       $235 = ($$0361|0)==(31);
       $236 = $$0361 >>> 1;
       $237 = (25 - ($236))|0;
       $238 = $235 ? 0 : $237;
       $239 = $$2 << $238;
       $$0348 = $239;$$0349 = $234;
       while(1) {
        $240 = ((($$0349)) + 4|0);
        $241 = HEAP32[$240>>2]|0;
        $242 = $241 & -8;
        $243 = ($242|0)==($$2|0);
        if ($243) {
         label = 75;
         break;
        }
        $244 = $$0348 >>> 31;
        $245 = (((($$0349)) + 16|0) + ($244<<2)|0);
        $246 = $$0348 << 1;
        $247 = HEAP32[$245>>2]|0;
        $248 = ($247|0)==(0|0);
        if ($248) {
         label = 74;
         break;
        } else {
         $$0348 = $246;$$0349 = $247;
        }
       }
       if ((label|0) == 74) {
        HEAP32[$245>>2] = $$1;
        $249 = ((($$1)) + 24|0);
        HEAP32[$249>>2] = $$0349;
        $250 = ((($$1)) + 12|0);
        HEAP32[$250>>2] = $$1;
        $251 = ((($$1)) + 8|0);
        HEAP32[$251>>2] = $$1;
        break;
       }
       else if ((label|0) == 75) {
        $252 = ((($$0349)) + 8|0);
        $253 = HEAP32[$252>>2]|0;
        $254 = ((($253)) + 12|0);
        HEAP32[$254>>2] = $$1;
        HEAP32[$252>>2] = $$1;
        $255 = ((($$1)) + 8|0);
        HEAP32[$255>>2] = $253;
        $256 = ((($$1)) + 12|0);
        HEAP32[$256>>2] = $$0349;
        $257 = ((($$1)) + 24|0);
        HEAP32[$257>>2] = 0;
        break;
       }
      }
     } while(0);
     $258 = HEAP32[(23848)>>2]|0;
     $259 = (($258) + -1)|0;
     HEAP32[(23848)>>2] = $259;
     $260 = ($259|0)==(0);
     if ($260) {
      $$0195$in$i = (24300);
      while(1) {
       $$0195$i = HEAP32[$$0195$in$i>>2]|0;
       $261 = ($$0195$i|0)==(0|0);
       $262 = ((($$0195$i)) + 8|0);
       if ($261) {
        break;
       } else {
        $$0195$in$i = $262;
       }
      }
      HEAP32[(23848)>>2] = -1;
     }
    }
   }
  }
 } while(0);
 $263 = HEAP32[(24260)>>2]|0;
 $264 = $263 & 2;
 $265 = ($264|0)==(0);
 if ($265) {
  return;
 }
 (___pthread_mutex_unlock((24264))|0);
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $$ = $7 ? $3 : -1;
   $$0 = $$;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 _memset(($8|0),0,($$0|0))|0;
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$2 = $3;
  return ($$2|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$2 = 0;
  return ($$2|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = HEAP32[(24260)>>2]|0;
 $12 = $11 & 2;
 $13 = ($12|0)==(0);
 if (!($13)) {
  $14 = (___pthread_mutex_lock((24264))|0);
  $15 = ($14|0)==(0);
  if (!($15)) {
   $$2 = 0;
   return ($$2|0);
  }
 }
 $16 = (_try_realloc_chunk($10,$9)|0);
 $17 = HEAP32[(24260)>>2]|0;
 $18 = $17 & 2;
 $19 = ($18|0)==(0);
 if (!($19)) {
  (___pthread_mutex_unlock((24264))|0);
 }
 $20 = ($16|0)==(0|0);
 if (!($20)) {
  $21 = ((($16)) + 8|0);
  $$2 = $21;
  return ($$2|0);
 }
 $22 = (_malloc($1)|0);
 $23 = ($22|0)==(0|0);
 if ($23) {
  $$2 = 0;
  return ($$2|0);
 }
 $24 = ((($0)) + -4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 & -8;
 $27 = $25 & 3;
 $28 = ($27|0)==(0);
 $29 = $28 ? 8 : 4;
 $30 = (($26) - ($29))|0;
 $31 = ($30>>>0)<($1>>>0);
 $32 = $31 ? $30 : $1;
 _memcpy(($22|0),($0|0),($32|0))|0;
 _free($0);
 $$2 = $22;
 return ($$2|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1246 = 0, $$1249 = 0, $$2 = 0, $$3 = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $not$ = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(23772)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = (($18) + ($16)|0);
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 | 1;
  HEAP32[$25>>2] = $27;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $28 = HEAP32[(23840)>>2]|0;
 $29 = ($5|0)==($28|0);
 if ($29) {
  $30 = HEAP32[(23828)>>2]|0;
  $31 = (($30) + ($4))|0;
  $32 = ($31>>>0)>($1>>>0);
  $33 = (($31) - ($1))|0;
  $34 = (($0) + ($1)|0);
  if (!($32)) {
   $$2 = 0;
   return ($$2|0);
  }
  $35 = $33 | 1;
  $36 = ((($34)) + 4|0);
  $37 = $3 & 1;
  $38 = $37 | $1;
  $39 = $38 | 2;
  HEAP32[$2>>2] = $39;
  HEAP32[$36>>2] = $35;
  HEAP32[(23840)>>2] = $34;
  HEAP32[(23828)>>2] = $33;
  $$2 = $0;
  return ($$2|0);
 }
 $40 = HEAP32[(23836)>>2]|0;
 $41 = ($5|0)==($40|0);
 if ($41) {
  $42 = HEAP32[(23824)>>2]|0;
  $43 = (($42) + ($4))|0;
  $44 = ($43>>>0)<($1>>>0);
  if ($44) {
   $$2 = 0;
   return ($$2|0);
  }
  $45 = (($43) - ($1))|0;
  $46 = ($45>>>0)>(15);
  $47 = $3 & 1;
  if ($46) {
   $48 = (($0) + ($1)|0);
   $49 = (($48) + ($45)|0);
   $50 = $47 | $1;
   $51 = $50 | 2;
   HEAP32[$2>>2] = $51;
   $52 = ((($48)) + 4|0);
   $53 = $45 | 1;
   HEAP32[$52>>2] = $53;
   HEAP32[$49>>2] = $45;
   $54 = ((($49)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $55 & -2;
   HEAP32[$54>>2] = $56;
   $storemerge = $48;$storemerge1 = $45;
  } else {
   $57 = $47 | $43;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($43)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(23824)>>2] = $storemerge1;
  HEAP32[(23836)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[5954]|0;
    $81 = $80 & $79;
    HEAP32[5954] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1246 = $97;$$1249 = $93;
      }
     } else {
      $$1246 = $95;$$1249 = $94;
     }
     while(1) {
      $99 = ((($$1246)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if (!($101)) {
       $$1246 = $100;$$1249 = $99;
       continue;
      }
      $102 = ((($$1246)) + 16|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($103|0)==(0|0);
      if ($104) {
       break;
      } else {
       $$1246 = $103;$$1249 = $102;
      }
     }
     HEAP32[$$1249>>2] = 0;
     $$3 = $$1246;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (24120 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($5|0)==($109|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(23820)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(23820)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $not$ = ($116|0)!=($5|0);
     $$sink1 = $not$&1;
     $117 = (((($85)) + 16|0) + ($$sink1<<2)|0);
     HEAP32[$117>>2] = $$3;
     $118 = ($$3|0)==(0|0);
     if ($118) {
      break;
     }
    }
    $119 = ((($$3)) + 24|0);
    HEAP32[$119>>2] = $85;
    $120 = ((($5)) + 16|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ($121|0)==(0|0);
    if (!($122)) {
     $123 = ((($$3)) + 16|0);
     HEAP32[$123>>2] = $121;
     $124 = ((($121)) + 24|0);
     HEAP32[$124>>2] = $$3;
    }
    $125 = ((($120)) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)==(0|0);
    if (!($127)) {
     $128 = ((($$3)) + 20|0);
     HEAP32[$128>>2] = $126;
     $129 = ((($126)) + 24|0);
     HEAP32[$129>>2] = $$3;
    }
   }
  }
 } while(0);
 $130 = ($70>>>0)<(16);
 $131 = $3 & 1;
 if ($130) {
  $132 = $68 | $131;
  $133 = $132 | 2;
  HEAP32[$2>>2] = $133;
  $134 = (($0) + ($68)|0);
  $135 = ((($134)) + 4|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $136 | 1;
  HEAP32[$135>>2] = $137;
  $$2 = $0;
  return ($$2|0);
 } else {
  $138 = (($0) + ($1)|0);
  $139 = $131 | $1;
  $140 = $139 | 2;
  HEAP32[$2>>2] = $140;
  $141 = ((($138)) + 4|0);
  $142 = $70 | 3;
  HEAP32[$141>>2] = $142;
  $143 = (($138) + ($70)|0);
  $144 = ((($143)) + 4|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = $145 | 1;
  HEAP32[$144>>2] = $146;
  _dispose_chunk($138,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0366 = 0, $$0367 = 0, $$0378 = 0, $$0385 = 0, $$1 = 0, $$1365 = 0, $$1373 = 0, $$1376 = 0, $$1380 = 0, $$1384 = 0, $$2 = 0, $$3 = 0, $$3382 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink2 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $cond = 0, $cond5 = 0, $not$ = 0, $not$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(23836)>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $74 = ((($2)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $75 & 3;
    $77 = ($76|0)==(3);
    if (!($77)) {
     $$1 = $11;$$1365 = $12;
     break;
    }
    $78 = (($11) + ($12)|0);
    $79 = ((($11)) + 4|0);
    $80 = $12 | 1;
    $81 = $75 & -2;
    HEAP32[(23824)>>2] = $12;
    HEAP32[$74>>2] = $81;
    HEAP32[$79>>2] = $80;
    HEAP32[$78>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[5954]|0;
     $25 = $24 & $23;
     HEAP32[5954] = $25;
     $$1 = $11;$$1365 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1365 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1373 = $41;$$1376 = $37;
      }
     } else {
      $$1373 = $39;$$1376 = $38;
     }
     while(1) {
      $43 = ((($$1373)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if (!($45)) {
       $$1373 = $44;$$1376 = $43;
       continue;
      }
      $46 = ((($$1373)) + 16|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0|0);
      if ($48) {
       break;
      } else {
       $$1373 = $47;$$1376 = $46;
      }
     }
     HEAP32[$$1376>>2] = 0;
     $$3 = $$1373;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1365 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (24120 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($11|0)==($53|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(23820)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(23820)>>2] = $58;
      $$1 = $11;$$1365 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $not$1 = ($60|0)!=($11|0);
     $$sink2 = $not$1&1;
     $61 = (((($29)) + 16|0) + ($$sink2<<2)|0);
     HEAP32[$61>>2] = $$3;
     $62 = ($$3|0)==(0|0);
     if ($62) {
      $$1 = $11;$$1365 = $12;
      break;
     }
    }
    $63 = ((($$3)) + 24|0);
    HEAP32[$63>>2] = $29;
    $64 = ((($11)) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)==(0|0);
    if (!($66)) {
     $67 = ((($$3)) + 16|0);
     HEAP32[$67>>2] = $65;
     $68 = ((($65)) + 24|0);
     HEAP32[$68>>2] = $$3;
    }
    $69 = ((($64)) + 4|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if ($71) {
     $$1 = $11;$$1365 = $12;
    } else {
     $72 = ((($$3)) + 20|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
     $$1 = $11;$$1365 = $12;
    }
   }
  } else {
   $$1 = $0;$$1365 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(23840)>>2]|0;
  $87 = ($2|0)==($86|0);
  $88 = HEAP32[(23836)>>2]|0;
  if ($87) {
   $89 = HEAP32[(23828)>>2]|0;
   $90 = (($89) + ($$1365))|0;
   HEAP32[(23828)>>2] = $90;
   HEAP32[(23840)>>2] = $$1;
   $91 = $90 | 1;
   $92 = ((($$1)) + 4|0);
   HEAP32[$92>>2] = $91;
   $93 = ($$1|0)==($88|0);
   if (!($93)) {
    return;
   }
   HEAP32[(23836)>>2] = 0;
   HEAP32[(23824)>>2] = 0;
   return;
  }
  $94 = ($2|0)==($88|0);
  if ($94) {
   $95 = HEAP32[(23824)>>2]|0;
   $96 = (($95) + ($$1365))|0;
   HEAP32[(23824)>>2] = $96;
   HEAP32[(23836)>>2] = $$1;
   $97 = $96 | 1;
   $98 = ((($$1)) + 4|0);
   HEAP32[$98>>2] = $97;
   $99 = (($$1) + ($96)|0);
   HEAP32[$99>>2] = $96;
   return;
  }
  $100 = $83 & -8;
  $101 = (($100) + ($$1365))|0;
  $102 = $83 >>> 3;
  $103 = ($83>>>0)<(256);
  do {
   if ($103) {
    $104 = ((($2)) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ((($2)) + 12|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ($107|0)==($105|0);
    if ($108) {
     $109 = 1 << $102;
     $110 = $109 ^ -1;
     $111 = HEAP32[5954]|0;
     $112 = $111 & $110;
     HEAP32[5954] = $112;
     break;
    } else {
     $113 = ((($105)) + 12|0);
     HEAP32[$113>>2] = $107;
     $114 = ((($107)) + 8|0);
     HEAP32[$114>>2] = $105;
     break;
    }
   } else {
    $115 = ((($2)) + 24|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ((($2)) + 12|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = ($118|0)==($2|0);
    do {
     if ($119) {
      $124 = ((($2)) + 16|0);
      $125 = ((($124)) + 4|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = ($126|0)==(0|0);
      if ($127) {
       $128 = HEAP32[$124>>2]|0;
       $129 = ($128|0)==(0|0);
       if ($129) {
        $$3382 = 0;
        break;
       } else {
        $$1380 = $128;$$1384 = $124;
       }
      } else {
       $$1380 = $126;$$1384 = $125;
      }
      while(1) {
       $130 = ((($$1380)) + 20|0);
       $131 = HEAP32[$130>>2]|0;
       $132 = ($131|0)==(0|0);
       if (!($132)) {
        $$1380 = $131;$$1384 = $130;
        continue;
       }
       $133 = ((($$1380)) + 16|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = ($134|0)==(0|0);
       if ($135) {
        break;
       } else {
        $$1380 = $134;$$1384 = $133;
       }
      }
      HEAP32[$$1384>>2] = 0;
      $$3382 = $$1380;
     } else {
      $120 = ((($2)) + 8|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ((($121)) + 12|0);
      HEAP32[$122>>2] = $118;
      $123 = ((($118)) + 8|0);
      HEAP32[$123>>2] = $121;
      $$3382 = $118;
     }
    } while(0);
    $136 = ($116|0)==(0|0);
    if (!($136)) {
     $137 = ((($2)) + 28|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (24120 + ($138<<2)|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($2|0)==($140|0);
     if ($141) {
      HEAP32[$139>>2] = $$3382;
      $cond5 = ($$3382|0)==(0|0);
      if ($cond5) {
       $142 = 1 << $138;
       $143 = $142 ^ -1;
       $144 = HEAP32[(23820)>>2]|0;
       $145 = $144 & $143;
       HEAP32[(23820)>>2] = $145;
       break;
      }
     } else {
      $146 = ((($116)) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $not$ = ($147|0)!=($2|0);
      $$sink4 = $not$&1;
      $148 = (((($116)) + 16|0) + ($$sink4<<2)|0);
      HEAP32[$148>>2] = $$3382;
      $149 = ($$3382|0)==(0|0);
      if ($149) {
       break;
      }
     }
     $150 = ((($$3382)) + 24|0);
     HEAP32[$150>>2] = $116;
     $151 = ((($2)) + 16|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==(0|0);
     if (!($153)) {
      $154 = ((($$3382)) + 16|0);
      HEAP32[$154>>2] = $152;
      $155 = ((($152)) + 24|0);
      HEAP32[$155>>2] = $$3382;
     }
     $156 = ((($151)) + 4|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==(0|0);
     if (!($158)) {
      $159 = ((($$3382)) + 20|0);
      HEAP32[$159>>2] = $157;
      $160 = ((($157)) + 24|0);
      HEAP32[$160>>2] = $$3382;
     }
    }
   }
  } while(0);
  $161 = $101 | 1;
  $162 = ((($$1)) + 4|0);
  HEAP32[$162>>2] = $161;
  $163 = (($$1) + ($101)|0);
  HEAP32[$163>>2] = $101;
  $164 = HEAP32[(23836)>>2]|0;
  $165 = ($$1|0)==($164|0);
  if ($165) {
   HEAP32[(23824)>>2] = $101;
   return;
  } else {
   $$2 = $101;
  }
 } else {
  $166 = $83 & -2;
  HEAP32[$82>>2] = $166;
  $167 = $$1365 | 1;
  $168 = ((($$1)) + 4|0);
  HEAP32[$168>>2] = $167;
  $169 = (($$1) + ($$1365)|0);
  HEAP32[$169>>2] = $$1365;
  $$2 = $$1365;
 }
 $170 = $$2 >>> 3;
 $171 = ($$2>>>0)<(256);
 if ($171) {
  $172 = $170 << 1;
  $173 = (23856 + ($172<<2)|0);
  $174 = HEAP32[5954]|0;
  $175 = 1 << $170;
  $176 = $174 & $175;
  $177 = ($176|0)==(0);
  if ($177) {
   $178 = $174 | $175;
   HEAP32[5954] = $178;
   $$pre = ((($173)) + 8|0);
   $$0385 = $173;$$pre$phiZ2D = $$pre;
  } else {
   $179 = ((($173)) + 8|0);
   $180 = HEAP32[$179>>2]|0;
   $$0385 = $180;$$pre$phiZ2D = $179;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $181 = ((($$0385)) + 12|0);
  HEAP32[$181>>2] = $$1;
  $182 = ((($$1)) + 8|0);
  HEAP32[$182>>2] = $$0385;
  $183 = ((($$1)) + 12|0);
  HEAP32[$183>>2] = $173;
  return;
 }
 $184 = $$2 >>> 8;
 $185 = ($184|0)==(0);
 if ($185) {
  $$0378 = 0;
 } else {
  $186 = ($$2>>>0)>(16777215);
  if ($186) {
   $$0378 = 31;
  } else {
   $187 = (($184) + 1048320)|0;
   $188 = $187 >>> 16;
   $189 = $188 & 8;
   $190 = $184 << $189;
   $191 = (($190) + 520192)|0;
   $192 = $191 >>> 16;
   $193 = $192 & 4;
   $194 = $193 | $189;
   $195 = $190 << $193;
   $196 = (($195) + 245760)|0;
   $197 = $196 >>> 16;
   $198 = $197 & 2;
   $199 = $194 | $198;
   $200 = (14 - ($199))|0;
   $201 = $195 << $198;
   $202 = $201 >>> 15;
   $203 = (($200) + ($202))|0;
   $204 = $203 << 1;
   $205 = (($203) + 7)|0;
   $206 = $$2 >>> $205;
   $207 = $206 & 1;
   $208 = $207 | $204;
   $$0378 = $208;
  }
 }
 $209 = (24120 + ($$0378<<2)|0);
 $210 = ((($$1)) + 28|0);
 HEAP32[$210>>2] = $$0378;
 $211 = ((($$1)) + 16|0);
 $212 = ((($$1)) + 20|0);
 HEAP32[$212>>2] = 0;
 HEAP32[$211>>2] = 0;
 $213 = HEAP32[(23820)>>2]|0;
 $214 = 1 << $$0378;
 $215 = $213 & $214;
 $216 = ($215|0)==(0);
 if ($216) {
  $217 = $213 | $214;
  HEAP32[(23820)>>2] = $217;
  HEAP32[$209>>2] = $$1;
  $218 = ((($$1)) + 24|0);
  HEAP32[$218>>2] = $209;
  $219 = ((($$1)) + 12|0);
  HEAP32[$219>>2] = $$1;
  $220 = ((($$1)) + 8|0);
  HEAP32[$220>>2] = $$1;
  return;
 }
 $221 = HEAP32[$209>>2]|0;
 $222 = ($$0378|0)==(31);
 $223 = $$0378 >>> 1;
 $224 = (25 - ($223))|0;
 $225 = $222 ? 0 : $224;
 $226 = $$2 << $225;
 $$0366 = $226;$$0367 = $221;
 while(1) {
  $227 = ((($$0367)) + 4|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = $228 & -8;
  $230 = ($229|0)==($$2|0);
  if ($230) {
   label = 69;
   break;
  }
  $231 = $$0366 >>> 31;
  $232 = (((($$0367)) + 16|0) + ($231<<2)|0);
  $233 = $$0366 << 1;
  $234 = HEAP32[$232>>2]|0;
  $235 = ($234|0)==(0|0);
  if ($235) {
   label = 68;
   break;
  } else {
   $$0366 = $233;$$0367 = $234;
  }
 }
 if ((label|0) == 68) {
  HEAP32[$232>>2] = $$1;
  $236 = ((($$1)) + 24|0);
  HEAP32[$236>>2] = $$0367;
  $237 = ((($$1)) + 12|0);
  HEAP32[$237>>2] = $$1;
  $238 = ((($$1)) + 8|0);
  HEAP32[$238>>2] = $$1;
  return;
 }
 else if ((label|0) == 69) {
  $239 = ((($$0367)) + 8|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = ((($240)) + 12|0);
  HEAP32[$241>>2] = $$1;
  HEAP32[$239>>2] = $$1;
  $242 = ((($$1)) + 8|0);
  HEAP32[$242>>2] = $240;
  $243 = ((($$1)) + 12|0);
  HEAP32[$243>>2] = $$0367;
  $244 = ((($$1)) + 24|0);
  HEAP32[$244>>2] = 0;
  return;
 }
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24316|0);
}
function ___emscripten_pthread_data_constructor() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 $1 = ((($0)) + 188|0);
 HEAP32[$1>>2] = (24356);
 return;
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_568($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$25 = $17;
   while(1) {
    $26 = ($25|0)<(0);
    if ($26) {
     break;
    }
    $34 = (($$04855) - ($25))|0;
    $35 = ((($$04954)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($25>>>0)>($36>>>0);
    $38 = ((($$04954)) + 8|0);
    $$150 = $37 ? $38 : $$04954;
    $39 = $37 << 31 >> 31;
    $$1 = (($39) + ($$04756))|0;
    $40 = $37 ? $36 : 0;
    $$0 = (($25) - ($40))|0;
    $41 = HEAP32[$$150>>2]|0;
    $42 = (($41) + ($$0)|0);
    HEAP32[$$150>>2] = $42;
    $43 = ((($$150)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) - ($$0))|0;
    HEAP32[$43>>2] = $45;
    $46 = HEAP32[$13>>2]|0;
    $47 = $$150;
    HEAP32[$vararg_buffer3>>2] = $46;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $47;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $48 = (___syscall146(146,($vararg_buffer3|0))|0);
    $49 = (___syscall_ret($48)|0);
    $50 = ($34|0)==($49|0);
    if ($50) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $34;$$04954 = $$150;$25 = $49;
    }
   }
   $27 = ((($0)) + 16|0);
   HEAP32[$27>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $28 = HEAP32[$0>>2]|0;
   $29 = $28 | 32;
   HEAP32[$0>>2] = $29;
   $30 = ($$04756|0)==(2);
   if ($30) {
    $$051 = 0;
   } else {
    $31 = ((($$04954)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($2) - ($32))|0;
    $$051 = $33;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  HEAP32[$4>>2] = $20;
  HEAP32[$7>>2] = $20;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self_103()|0);
 $1 = ((($0)) + 64|0);
 return ($1|0);
}
function ___pthread_self_103() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _dummy_568($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $29 = (($27) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($27)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$27>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 25;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _tolower($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isupper($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 | 32;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _isupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -65)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _strtox_740($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($5)) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)<(0|0);
 $9 = ((($0)) + 2147483647|0);
 $$sink = $8 ? (-1) : $9;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $$sink;
 $11 = ((($5)) + 76|0);
 Atomics_store(HEAP32,$11>>2,-1)|0;
 ___shlim($5,0);
 $12 = (___intscan($5,$2,1,$3,$4)|0);
 $13 = tempRet0;
 $14 = ($1|0)==(0|0);
 if (!($14)) {
  $15 = ((($5)) + 108|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = HEAP32[$10>>2]|0;
  $19 = (($17) + ($16))|0;
  $20 = (($19) - ($18))|0;
  $21 = (($0) + ($20)|0);
  HEAP32[$1>>2] = $21;
 }
 tempRet0 = ($13);
 STACKTOP = sp;return ($12|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = ((($0)) + 108|0);
 HEAP32[$10>>2] = $9;
 $11 = ($1|0)!=(0);
 $12 = ($9|0)>($1|0);
 $or$cond = $11 & $12;
 $13 = (($6) + ($1)|0);
 $$sink = $or$cond ? $13 : $4;
 $14 = ((($0)) + 100|0);
 HEAP32[$14>>2] = $$sink;
 return;
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154222 = 0, $$0157 = 0, $$0157$ = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0;
 var $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond187 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $8 = (___errno_location()|0);
   HEAP32[$8>>2] = 22;
   $289 = 0;$290 = 0;
  } else {
   $6 = ((($0)) + 4|0);
   $7 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$6>>2]|0;
    $10 = HEAP32[$7>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$6>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $19 = ($16|0)==(45);
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$6>>2]|0;
     $22 = HEAP32[$7>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$6>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$6>>2]|0;
     $33 = HEAP32[$7>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$6>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160169 = $40;$$1165168 = 8;
       label = 46;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$6>>2]|0;
     $43 = HEAP32[$7>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$6>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((19808) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$7>>2]|0;
      $54 = ($53|0)!=(0|0);
      if ($54) {
       $55 = HEAP32[$6>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$6>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $289 = 0;$290 = 0;
       break L1;
      }
      if (!($54)) {
       $289 = 0;$290 = 0;
       break L1;
      }
      $58 = HEAP32[$6>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$6>>2] = $59;
      $289 = 0;$290 = 0;
      break L1;
     } else {
      $$1160169 = $50;$$1165168 = 16;
      label = 46;
     }
    } else {
     $$166 = $28 ? 10 : $1;
     $60 = ((19808) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($62>>>0)<($$166>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $$166;
      label = 32;
     } else {
      $64 = HEAP32[$7>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$6>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$6>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $289 = 0;$290 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $69 = ($$1165|0)==(10);
     if ($69) {
      $70 = (($$1160) + -48)|0;
      $71 = ($70>>>0)<(10);
      if ($71) {
       $$0154222 = 0;$74 = $70;
       while(1) {
        $72 = ($$0154222*10)|0;
        $73 = (($72) + ($74))|0;
        $75 = HEAP32[$6>>2]|0;
        $76 = HEAP32[$7>>2]|0;
        $77 = ($75>>>0)<($76>>>0);
        if ($77) {
         $78 = ((($75)) + 1|0);
         HEAP32[$6>>2] = $78;
         $79 = HEAP8[$75>>0]|0;
         $80 = $79&255;
         $$2161$be = $80;
        } else {
         $81 = (___shgetc($0)|0);
         $$2161$be = $81;
        }
        $82 = (($$2161$be) + -48)|0;
        $83 = ($82>>>0)<(10);
        $84 = ($73>>>0)<(429496729);
        $85 = $83 & $84;
        if ($85) {
         $$0154222 = $73;$74 = $82;
        } else {
         break;
        }
       }
       $$2161$lcssa = $$2161$be;$291 = $73;$292 = 0;
      } else {
       $$2161$lcssa = $$1160;$291 = 0;$292 = 0;
      }
      $86 = (($$2161$lcssa) + -48)|0;
      $87 = ($86>>>0)<(10);
      if ($87) {
       $$3162215 = $$2161$lcssa;$88 = $291;$89 = $292;$92 = $86;
       while(1) {
        $90 = (___muldi3(($88|0),($89|0),10,0)|0);
        $91 = tempRet0;
        $93 = ($92|0)<(0);
        $94 = $93 << 31 >> 31;
        $95 = $92 ^ -1;
        $96 = $94 ^ -1;
        $97 = ($91>>>0)>($96>>>0);
        $98 = ($90>>>0)>($95>>>0);
        $99 = ($91|0)==($96|0);
        $100 = $99 & $98;
        $101 = $97 | $100;
        if ($101) {
         $$1165167 = 10;$$8 = $$3162215;$293 = $88;$294 = $89;
         label = 72;
         break L43;
        }
        $102 = (_i64Add(($90|0),($91|0),($92|0),($94|0))|0);
        $103 = tempRet0;
        $104 = HEAP32[$6>>2]|0;
        $105 = HEAP32[$7>>2]|0;
        $106 = ($104>>>0)<($105>>>0);
        if ($106) {
         $107 = ((($104)) + 1|0);
         HEAP32[$6>>2] = $107;
         $108 = HEAP8[$104>>0]|0;
         $109 = $108&255;
         $$3162$be = $109;
        } else {
         $110 = (___shgetc($0)|0);
         $$3162$be = $110;
        }
        $111 = (($$3162$be) + -48)|0;
        $112 = ($111>>>0)<(10);
        $113 = ($103>>>0)<(429496729);
        $114 = ($102>>>0)<(2576980378);
        $115 = ($103|0)==(429496729);
        $116 = $115 & $114;
        $117 = $113 | $116;
        $or$cond7 = $112 & $117;
        if ($or$cond7) {
         $$3162215 = $$3162$be;$88 = $102;$89 = $103;$92 = $111;
        } else {
         break;
        }
       }
       $118 = ($111>>>0)>(9);
       if ($118) {
        $$1158 = $$0157;$262 = $103;$264 = $102;
       } else {
        $$1165167 = 10;$$8 = $$3162$be;$293 = $102;$294 = $103;
        label = 72;
       }
      } else {
       $$1158 = $$0157;$262 = $292;$264 = $291;
      }
     } else {
      $$1160169 = $$1160;$$1165168 = $$1165;
      label = 46;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 46) {
     $119 = (($$1165168) + -1)|0;
     $120 = $119 & $$1165168;
     $121 = ($120|0)==(0);
     if ($121) {
      $126 = ($$1165168*23)|0;
      $127 = $126 >>> 5;
      $128 = $127 & 7;
      $129 = (20064 + ($128)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = ((19808) + ($$1160169)|0);
      $133 = HEAP8[$132>>0]|0;
      $134 = $133&255;
      $135 = ($134>>>0)<($$1165168>>>0);
      if ($135) {
       $$1155192 = 0;$138 = $134;
       while(1) {
        $136 = $$1155192 << $131;
        $137 = $138 | $136;
        $139 = HEAP32[$6>>2]|0;
        $140 = HEAP32[$7>>2]|0;
        $141 = ($139>>>0)<($140>>>0);
        if ($141) {
         $142 = ((($139)) + 1|0);
         HEAP32[$6>>2] = $142;
         $143 = HEAP8[$139>>0]|0;
         $144 = $143&255;
         $$4163$be = $144;
        } else {
         $145 = (___shgetc($0)|0);
         $$4163$be = $145;
        }
        $146 = ((19808) + ($$4163$be)|0);
        $147 = HEAP8[$146>>0]|0;
        $148 = $147&255;
        $149 = ($148>>>0)<($$1165168>>>0);
        $150 = ($137>>>0)<(134217728);
        $151 = $150 & $149;
        if ($151) {
         $$1155192 = $137;$138 = $148;
        } else {
         break;
        }
       }
       $$4163$lcssa = $$4163$be;$155 = $147;$157 = 0;$159 = $137;
      } else {
       $$4163$lcssa = $$1160169;$155 = $133;$157 = 0;$159 = 0;
      }
      $152 = (_bitshift64Lshr(-1,-1,($131|0))|0);
      $153 = tempRet0;
      $154 = $155&255;
      $156 = ($154>>>0)>=($$1165168>>>0);
      $158 = ($157>>>0)>($153>>>0);
      $160 = ($159>>>0)>($152>>>0);
      $161 = ($157|0)==($153|0);
      $162 = $161 & $160;
      $163 = $158 | $162;
      $or$cond187 = $156 | $163;
      if ($or$cond187) {
       $$1165167 = $$1165168;$$8 = $$4163$lcssa;$293 = $159;$294 = $157;
       label = 72;
       break;
      } else {
       $164 = $159;$165 = $157;$169 = $155;
      }
      while(1) {
       $166 = (_bitshift64Shl(($164|0),($165|0),($131|0))|0);
       $167 = tempRet0;
       $168 = $169&255;
       $170 = $168 | $166;
       $171 = HEAP32[$6>>2]|0;
       $172 = HEAP32[$7>>2]|0;
       $173 = ($171>>>0)<($172>>>0);
       if ($173) {
        $174 = ((($171)) + 1|0);
        HEAP32[$6>>2] = $174;
        $175 = HEAP8[$171>>0]|0;
        $176 = $175&255;
        $$5$be = $176;
       } else {
        $177 = (___shgetc($0)|0);
        $$5$be = $177;
       }
       $178 = ((19808) + ($$5$be)|0);
       $179 = HEAP8[$178>>0]|0;
       $180 = $179&255;
       $181 = ($180>>>0)>=($$1165168>>>0);
       $182 = ($167>>>0)>($153>>>0);
       $183 = ($170>>>0)>($152>>>0);
       $184 = ($167|0)==($153|0);
       $185 = $184 & $183;
       $186 = $182 | $185;
       $or$cond = $181 | $186;
       if ($or$cond) {
        $$1165167 = $$1165168;$$8 = $$5$be;$293 = $170;$294 = $167;
        label = 72;
        break L63;
       } else {
        $164 = $170;$165 = $167;$169 = $179;
       }
      }
     }
     $122 = ((19808) + ($$1160169)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     $125 = ($124>>>0)<($$1165168>>>0);
     if ($125) {
      $$2156210 = 0;$189 = $124;
      while(1) {
       $187 = Math_imul($$2156210, $$1165168)|0;
       $188 = (($189) + ($187))|0;
       $190 = HEAP32[$6>>2]|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = ($190>>>0)<($191>>>0);
       if ($192) {
        $193 = ((($190)) + 1|0);
        HEAP32[$6>>2] = $193;
        $194 = HEAP8[$190>>0]|0;
        $195 = $194&255;
        $$6$be = $195;
       } else {
        $196 = (___shgetc($0)|0);
        $$6$be = $196;
       }
       $197 = ((19808) + ($$6$be)|0);
       $198 = HEAP8[$197>>0]|0;
       $199 = $198&255;
       $200 = ($199>>>0)<($$1165168>>>0);
       $201 = ($188>>>0)<(119304647);
       $202 = $201 & $200;
       if ($202) {
        $$2156210 = $188;$189 = $199;
       } else {
        break;
       }
      }
      $$6$lcssa = $$6$be;$204 = $198;$295 = $188;$296 = 0;
     } else {
      $$6$lcssa = $$1160169;$204 = $123;$295 = 0;$296 = 0;
     }
     $203 = $204&255;
     $205 = ($203>>>0)<($$1165168>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = tempRet0;
      $$7198 = $$6$lcssa;$208 = $296;$210 = $295;$218 = $204;
      while(1) {
       $209 = ($208>>>0)>($207>>>0);
       $211 = ($210>>>0)>($206>>>0);
       $212 = ($208|0)==($207|0);
       $213 = $212 & $211;
       $214 = $209 | $213;
       if ($214) {
        $$1165167 = $$1165168;$$8 = $$7198;$293 = $210;$294 = $208;
        label = 72;
        break L63;
       }
       $215 = (___muldi3(($210|0),($208|0),($$1165168|0),0)|0);
       $216 = tempRet0;
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165167 = $$1165168;$$8 = $$7198;$293 = $210;$294 = $208;
        label = 72;
        break L63;
       }
       $225 = (_i64Add(($217|0),0,($215|0),($216|0))|0);
       $226 = tempRet0;
       $227 = HEAP32[$6>>2]|0;
       $228 = HEAP32[$7>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$6>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $$7$be = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $$7$be = $233;
       }
       $234 = ((19808) + ($$7$be)|0);
       $235 = HEAP8[$234>>0]|0;
       $236 = $235&255;
       $237 = ($236>>>0)<($$1165168>>>0);
       if ($237) {
        $$7198 = $$7$be;$208 = $226;$210 = $225;$218 = $235;
       } else {
        $$1165167 = $$1165168;$$8 = $$7$be;$293 = $225;$294 = $226;
        label = 72;
        break;
       }
      }
     } else {
      $$1165167 = $$1165168;$$8 = $$6$lcssa;$293 = $295;$294 = $296;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $238 = ((19808) + ($$8)|0);
    $239 = HEAP8[$238>>0]|0;
    $240 = $239&255;
    $241 = ($240>>>0)<($$1165167>>>0);
    if ($241) {
     while(1) {
      $242 = HEAP32[$6>>2]|0;
      $243 = HEAP32[$7>>2]|0;
      $244 = ($242>>>0)<($243>>>0);
      if ($244) {
       $245 = ((($242)) + 1|0);
       HEAP32[$6>>2] = $245;
       $246 = HEAP8[$242>>0]|0;
       $247 = $246&255;
       $$9$be = $247;
      } else {
       $248 = (___shgetc($0)|0);
       $$9$be = $248;
      }
      $249 = ((19808) + ($$9$be)|0);
      $250 = HEAP8[$249>>0]|0;
      $251 = $250&255;
      $252 = ($251>>>0)<($$1165167>>>0);
      if (!($252)) {
       break;
      }
     }
     $253 = (___errno_location()|0);
     HEAP32[$253>>2] = 34;
     $254 = $3 & 1;
     $255 = ($254|0)==(0);
     $256 = (0)==(0);
     $257 = $255 & $256;
     $$0157$ = $257 ? $$0157 : 0;
     $$1158 = $$0157$;$262 = $4;$264 = $3;
    } else {
     $$1158 = $$0157;$262 = $294;$264 = $293;
    }
   }
   $258 = HEAP32[$7>>2]|0;
   $259 = ($258|0)==(0|0);
   if (!($259)) {
    $260 = HEAP32[$6>>2]|0;
    $261 = ((($260)) + -1|0);
    HEAP32[$6>>2] = $261;
   }
   $263 = ($262>>>0)<($4>>>0);
   $265 = ($264>>>0)<($3>>>0);
   $266 = ($262|0)==($4|0);
   $267 = $266 & $265;
   $268 = $263 | $267;
   if (!($268)) {
    $269 = $3 & 1;
    $270 = ($269|0)!=(0);
    $271 = (0)!=(0);
    $272 = $270 | $271;
    $273 = ($$1158|0)!=(0);
    $or$cond12 = $272 | $273;
    if (!($or$cond12)) {
     $274 = (___errno_location()|0);
     HEAP32[$274>>2] = 34;
     $275 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $276 = tempRet0;
     $289 = $276;$290 = $275;
     break;
    }
    $277 = ($262>>>0)>($4>>>0);
    $278 = ($264>>>0)>($3>>>0);
    $279 = ($262|0)==($4|0);
    $280 = $279 & $278;
    $281 = $277 | $280;
    if ($281) {
     $282 = (___errno_location()|0);
     HEAP32[$282>>2] = 34;
     $289 = $4;$290 = $3;
     break;
    }
   }
   $283 = ($$1158|0)<(0);
   $284 = $283 << 31 >> 31;
   $285 = $264 ^ $$1158;
   $286 = $262 ^ $284;
   $287 = (_i64Subtract(($285|0),($286|0),($$1158|0),($284|0))|0);
   $288 = tempRet0;
   $289 = $288;$290 = $287;
  }
 } while(0);
 tempRet0 = ($289);
 return ($290|0);
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28$phi$trans$insert = 0, $$pre = 0, $$pre$phi34Z2D = 0, $$pre29$pre = 0, $$pre35 = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   if ($11) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $$phi$trans$insert28$phi$trans$insert = ((($0)) + 4|0);
    $$pre29$pre = HEAP32[$$phi$trans$insert28$phi$trans$insert>>2]|0;
    $$pre35 = ((($0)) + 108|0);
    $$pre$phi34Z2D = $$pre35;$$sink = $$pre;$25 = $$pre;$28 = $$pre29$pre;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($12) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $12;
    if ($20) {
     $$pre$phi34Z2D = $17;$$sink = $21;$25 = $21;$28 = $14;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $$pre$phi34Z2D = $17;$$sink = $23;$25 = $21;$28 = $14;
    }
   }
   $24 = ((($0)) + 100|0);
   HEAP32[$24>>2] = $$sink;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    $27 = $25;
    $29 = $28;
    $30 = HEAP32[$$pre$phi34Z2D>>2]|0;
    $31 = (($27) + 1)|0;
    $32 = (($31) - ($29))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$$pre$phi34Z2D>>2] = $33;
   }
   $34 = ((($28)) + -1|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = ($36|0)==($7|0);
   if ($37) {
    $$0 = $7;
   } else {
    $38 = $7&255;
    HEAP8[$34>>0] = $38;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $4 = $1 | $3;
 $5 = $4&1;
 return ($5|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 63]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 63]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _strtoll($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_740($0,$1,$2,0,-2147483648)|0);
 $4 = tempRet0;
 tempRet0 = ($4);
 return ($3|0);
}
function _strtol($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_740($0,$1,$2,-2147483648,0)|0);
 $4 = tempRet0;
 return ($3|0);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01824 = 0, $$01926 = 0, $$01926$in = 0, $$020 = 0, $$025 = 0, $$lcssa = 0, $$lcssa22 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = $4&255;
  $6 = ($4<<24>>24)==(0);
  $7 = HEAP8[$1>>0]|0;
  $8 = $7&255;
  L3: do {
   if ($6) {
    $$lcssa = $8;$$lcssa22 = $5;
   } else {
    $$01824 = $0;$$01926$in = $2;$$025 = $1;$12 = $4;$22 = $8;$23 = $5;$9 = $7;
    while(1) {
     $$01926 = (($$01926$in) + -1)|0;
     $10 = ($9<<24>>24)!=(0);
     $11 = ($$01926|0)!=(0);
     $or$cond = $11 & $10;
     $13 = ($12<<24>>24)==($9<<24>>24);
     $or$cond21 = $13 & $or$cond;
     if (!($or$cond21)) {
      $$lcssa = $22;$$lcssa22 = $23;
      break L3;
     }
     $14 = ((($$01824)) + 1|0);
     $15 = ((($$025)) + 1|0);
     $16 = HEAP8[$14>>0]|0;
     $17 = $16&255;
     $18 = ($16<<24>>24)==(0);
     $19 = HEAP8[$15>>0]|0;
     $20 = $19&255;
     if ($18) {
      $$lcssa = $20;$$lcssa22 = $17;
      break;
     } else {
      $$01824 = $14;$$01926$in = $$01926;$$025 = $15;$12 = $16;$22 = $20;$23 = $17;$9 = $19;
     }
    }
   }
  } while(0);
  $21 = (($$lcssa22) - ($$lcssa))|0;
  $$020 = $21;
 }
 return ($$020|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=9852; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = (Atomics_load(HEAP32,$9>>2)|0);
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 63]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229322 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa357 = 0, $$0240321 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0;
 var $$0249306 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262311 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230333 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241332 = 0, $$1244320 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0;
 var $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242305 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$284$ = 0, $$289 = 0, $$290 = 0, $$3257 = 0, $$3265 = 0;
 var $$3272 = 0, $$3303 = 0, $$377 = 0, $$4258355 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa295 = 0, $$pre = 0, $$pre346 = 0, $$pre347 = 0, $$pre347$pre = 0, $$pre349 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit275 = 0, $isdigit277 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp274 = 0;
 var $isdigittmp276 = 0, $narrow = 0, $or$cond = 0, $or$cond281 = 0, $or$cond283 = 0, $or$cond286 = 0, $storemerge = 0, $storemerge273310 = 0, $storemerge278 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$21 = $1;
 L1: while(1) {
  $15 = ($$0247|0)>(-1);
  do {
   if ($15) {
    $16 = (2147483647 - ($$0247))|0;
    $17 = ($$0243|0)>($16|0);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = (($$0243) + ($$0247))|0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $20 = HEAP8[$21>>0]|0;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   label = 87;
   break;
  } else {
   $23 = $20;$25 = $21;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $$0249306 = $25;$27 = $25;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $25;$39 = $25;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($25)) + 1|0);
   HEAP32[$5>>2] = $24;
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($27)) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$0249$lcssa = $$0249306;$39 = $27;
      break L12;
     }
     $30 = ((($$0249306)) + 1|0);
     $31 = ((($27)) + 2|0);
     HEAP32[$5>>2] = $31;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $$0249306 = $30;$27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;$39 = $31;
      break;
     }
    }
   }
  } while(0);
  $34 = $$0249$lcssa;
  $35 = $21;
  $36 = (($34) - ($35))|0;
  if ($10) {
   _out($0,$21,$36);
  }
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0269$phi = $$0269;$$0243 = $36;$$0247 = $$1248;$21 = $39;$$0269 = $$0269$phi;
   continue;
  }
  $38 = ((($39)) + 1|0);
  $40 = HEAP8[$38>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($39)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($39)) + 3|0);
   $$377 = $44 ? $45 : $38;
   $$$0269 = $44 ? 1 : $$0269;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$storemerge = $$377;
  } else {
   $$0253 = -1;$$1270 = $$0269;$storemerge = $38;
  }
  HEAP32[$5>>2] = $storemerge;
  $46 = HEAP8[$storemerge>>0]|0;
  $47 = $46 << 24 >> 24;
  $48 = (($47) + -32)|0;
  $49 = ($48>>>0)<(32);
  L24: do {
   if ($49) {
    $$0262311 = 0;$329 = $46;$51 = $48;$storemerge273310 = $storemerge;
    while(1) {
     $50 = 1 << $51;
     $52 = $50 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $$0262$lcssa = $$0262311;$$lcssa295 = $329;$62 = $storemerge273310;
      break L24;
     }
     $54 = $50 | $$0262311;
     $55 = ((($storemerge273310)) + 1|0);
     HEAP32[$5>>2] = $55;
     $56 = HEAP8[$55>>0]|0;
     $57 = $56 << 24 >> 24;
     $58 = (($57) + -32)|0;
     $59 = ($58>>>0)<(32);
     if ($59) {
      $$0262311 = $54;$329 = $56;$51 = $58;$storemerge273310 = $55;
     } else {
      $$0262$lcssa = $54;$$lcssa295 = $56;$62 = $55;
      break;
     }
    }
   } else {
    $$0262$lcssa = 0;$$lcssa295 = $46;$62 = $storemerge;
   }
  } while(0);
  $60 = ($$lcssa295<<24>>24)==(42);
  if ($60) {
   $61 = ((($62)) + 1|0);
   $63 = HEAP8[$61>>0]|0;
   $64 = $63 << 24 >> 24;
   $isdigittmp276 = (($64) + -48)|0;
   $isdigit277 = ($isdigittmp276>>>0)<(10);
   if ($isdigit277) {
    $65 = ((($62)) + 2|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = ($66<<24>>24)==(36);
    if ($67) {
     $68 = (($4) + ($isdigittmp276<<2)|0);
     HEAP32[$68>>2] = 10;
     $69 = HEAP8[$61>>0]|0;
     $70 = $69 << 24 >> 24;
     $71 = (($70) + -48)|0;
     $72 = (($3) + ($71<<3)|0);
     $73 = $72;
     $74 = $73;
     $75 = HEAP32[$74>>2]|0;
     $76 = (($73) + 4)|0;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $79 = ((($62)) + 3|0);
     $$0259 = $75;$$2271 = 1;$storemerge278 = $79;
    } else {
     label = 23;
    }
   } else {
    label = 23;
   }
   if ((label|0) == 23) {
    label = 0;
    $80 = ($$1270|0)==(0);
    if (!($80)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $81 = $arglist_current;
     $82 = ((0) + 4|0);
     $expanded4 = $82;
     $expanded = (($expanded4) - 1)|0;
     $83 = (($81) + ($expanded))|0;
     $84 = ((0) + 4|0);
     $expanded8 = $84;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $85 = $83 & $expanded6;
     $86 = $85;
     $87 = HEAP32[$86>>2]|0;
     $arglist_next = ((($86)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $87;$$2271 = 0;$storemerge278 = $61;
    } else {
     $$0259 = 0;$$2271 = 0;$storemerge278 = $61;
    }
   }
   HEAP32[$5>>2] = $storemerge278;
   $88 = ($$0259|0)<(0);
   $89 = $$0262$lcssa | 8192;
   $90 = (0 - ($$0259))|0;
   $$$0262 = $88 ? $89 : $$0262$lcssa;
   $$$0259 = $88 ? $90 : $$0259;
   $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$94 = $storemerge278;
  } else {
   $91 = (_getint($5)|0);
   $92 = ($91|0)<(0);
   if ($92) {
    $$0 = -1;
    break;
   }
   $$pre346 = HEAP32[$5>>2]|0;
   $$1260 = $91;$$1263 = $$0262$lcssa;$$3272 = $$1270;$94 = $$pre346;
  }
  $93 = HEAP8[$94>>0]|0;
  $95 = ($93<<24>>24)==(46);
  do {
   if ($95) {
    $96 = ((($94)) + 1|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = ($97<<24>>24)==(42);
    if (!($98)) {
     $125 = ((($94)) + 1|0);
     HEAP32[$5>>2] = $125;
     $126 = (_getint($5)|0);
     $$pre347$pre = HEAP32[$5>>2]|0;
     $$0254 = $126;$$pre347 = $$pre347$pre;
     break;
    }
    $99 = ((($94)) + 2|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100 << 24 >> 24;
    $isdigittmp274 = (($101) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $102 = ((($94)) + 3|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = ($103<<24>>24)==(36);
     if ($104) {
      $105 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$105>>2] = 10;
      $106 = HEAP8[$99>>0]|0;
      $107 = $106 << 24 >> 24;
      $108 = (($107) + -48)|0;
      $109 = (($3) + ($108<<3)|0);
      $110 = $109;
      $111 = $110;
      $112 = HEAP32[$111>>2]|0;
      $113 = (($110) + 4)|0;
      $114 = $113;
      $115 = HEAP32[$114>>2]|0;
      $116 = ((($94)) + 4|0);
      HEAP32[$5>>2] = $116;
      $$0254 = $112;$$pre347 = $116;
      break;
     }
    }
    $117 = ($$3272|0)==(0);
    if (!($117)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $118 = $arglist_current2;
     $119 = ((0) + 4|0);
     $expanded11 = $119;
     $expanded10 = (($expanded11) - 1)|0;
     $120 = (($118) + ($expanded10))|0;
     $121 = ((0) + 4|0);
     $expanded15 = $121;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $122 = $120 & $expanded13;
     $123 = $122;
     $124 = HEAP32[$123>>2]|0;
     $arglist_next3 = ((($123)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $330 = $124;
    } else {
     $330 = 0;
    }
    HEAP32[$5>>2] = $99;
    $$0254 = $330;$$pre347 = $99;
   } else {
    $$0254 = -1;$$pre347 = $94;
   }
  } while(0);
  $$0252 = 0;$128 = $$pre347;
  while(1) {
   $127 = HEAP8[$128>>0]|0;
   $129 = $127 << 24 >> 24;
   $130 = (($129) + -65)|0;
   $131 = ($130>>>0)>(57);
   if ($131) {
    $$0 = -1;
    break L1;
   }
   $132 = ((($128)) + 1|0);
   HEAP32[$5>>2] = $132;
   $133 = HEAP8[$128>>0]|0;
   $134 = $133 << 24 >> 24;
   $135 = (($134) + -65)|0;
   $136 = ((20073 + (($$0252*58)|0)|0) + ($135)|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&255;
   $139 = (($138) + -1)|0;
   $140 = ($139>>>0)<(8);
   if ($140) {
    $$0252 = $138;$128 = $132;
   } else {
    break;
   }
  }
  $141 = ($137<<24>>24)==(0);
  if ($141) {
   $$0 = -1;
   break;
  }
  $142 = ($137<<24>>24)==(19);
  $143 = ($$0253|0)>(-1);
  do {
   if ($142) {
    if ($143) {
     $$0 = -1;
     break L1;
    } else {
     label = 49;
    }
   } else {
    if ($143) {
     $144 = (($4) + ($$0253<<2)|0);
     HEAP32[$144>>2] = $138;
     $145 = (($3) + ($$0253<<3)|0);
     $146 = $145;
     $147 = $146;
     $148 = HEAP32[$147>>2]|0;
     $149 = (($146) + 4)|0;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $152 = $6;
     $153 = $152;
     HEAP32[$153>>2] = $148;
     $154 = (($152) + 4)|0;
     $155 = $154;
     HEAP32[$155>>2] = $151;
     label = 49;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$138,$2);
   }
  } while(0);
  if ((label|0) == 49) {
   label = 0;
   if (!($10)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue;
   }
  }
  $156 = HEAP8[$128>>0]|0;
  $157 = $156 << 24 >> 24;
  $158 = ($$0252|0)!=(0);
  $159 = $157 & 15;
  $160 = ($159|0)==(3);
  $or$cond281 = $158 & $160;
  $161 = $157 & -33;
  $$0235 = $or$cond281 ? $161 : $157;
  $162 = $$1263 & 8192;
  $163 = ($162|0)==(0);
  $164 = $$1263 & -65537;
  $$1263$ = $163 ? $$1263 : $164;
  L71: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $171 = HEAP32[$6>>2]|0;
     HEAP32[$171>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 1:  {
     $172 = HEAP32[$6>>2]|0;
     HEAP32[$172>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 2:  {
     $173 = ($$1248|0)<(0);
     $174 = $173 << 31 >> 31;
     $175 = HEAP32[$6>>2]|0;
     $176 = $175;
     $177 = $176;
     HEAP32[$177>>2] = $$1248;
     $178 = (($176) + 4)|0;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 3:  {
     $180 = $$1248&65535;
     $181 = HEAP32[$6>>2]|0;
     HEAP16[$181>>1] = $180;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 4:  {
     $182 = $$1248&255;
     $183 = HEAP32[$6>>2]|0;
     HEAP8[$183>>0] = $182;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 6:  {
     $184 = HEAP32[$6>>2]|0;
     HEAP32[$184>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 7:  {
     $185 = ($$1248|0)<(0);
     $186 = $185 << 31 >> 31;
     $187 = HEAP32[$6>>2]|0;
     $188 = $187;
     $189 = $188;
     HEAP32[$189>>2] = $$1248;
     $190 = (($188) + 4)|0;
     $191 = $190;
     HEAP32[$191>>2] = $186;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $192 = ($$0254>>>0)>(8);
    $193 = $192 ? $$0254 : 8;
    $194 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $193;$$3265 = $194;
    label = 61;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 61;
    break;
   }
   case 111:  {
    $210 = $6;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = (($210) + 4)|0;
    $214 = $213;
    $215 = HEAP32[$214>>2]|0;
    $216 = (_fmt_o($212,$215,$11)|0);
    $217 = $$1263$ & 8;
    $218 = ($217|0)==(0);
    $219 = $216;
    $220 = (($12) - ($219))|0;
    $221 = ($$0254|0)>($220|0);
    $222 = (($220) + 1)|0;
    $223 = $218 | $221;
    $$0254$$0254$ = $223 ? $$0254 : $222;
    $$0228 = $216;$$1233 = 0;$$1238 = 20537;$$2256 = $$0254$$0254$;$$4266 = $$1263$;$247 = $212;$249 = $215;
    label = 67;
    break;
   }
   case 105: case 100:  {
    $224 = $6;
    $225 = $224;
    $226 = HEAP32[$225>>2]|0;
    $227 = (($224) + 4)|0;
    $228 = $227;
    $229 = HEAP32[$228>>2]|0;
    $230 = ($229|0)<(0);
    if ($230) {
     $231 = (_i64Subtract(0,0,($226|0),($229|0))|0);
     $232 = tempRet0;
     $233 = $6;
     $234 = $233;
     HEAP32[$234>>2] = $231;
     $235 = (($233) + 4)|0;
     $236 = $235;
     HEAP32[$236>>2] = $232;
     $$0232 = 1;$$0237 = 20537;$242 = $231;$243 = $232;
     label = 66;
     break L71;
    } else {
     $237 = $$1263$ & 2048;
     $238 = ($237|0)==(0);
     $239 = $$1263$ & 1;
     $240 = ($239|0)==(0);
     $$ = $240 ? 20537 : (20539);
     $$$ = $238 ? $$ : (20538);
     $241 = $$1263$ & 2049;
     $narrow = ($241|0)!=(0);
     $$284$ = $narrow&1;
     $$0232 = $$284$;$$0237 = $$$;$242 = $226;$243 = $229;
     label = 66;
     break L71;
    }
    break;
   }
   case 117:  {
    $165 = $6;
    $166 = $165;
    $167 = HEAP32[$166>>2]|0;
    $168 = (($165) + 4)|0;
    $169 = $168;
    $170 = HEAP32[$169>>2]|0;
    $$0232 = 0;$$0237 = 20537;$242 = $167;$243 = $170;
    label = 66;
    break;
   }
   case 99:  {
    $259 = $6;
    $260 = $259;
    $261 = HEAP32[$260>>2]|0;
    $262 = (($259) + 4)|0;
    $263 = $262;
    $264 = HEAP32[$263>>2]|0;
    $265 = $261&255;
    HEAP8[$13>>0] = $265;
    $$2 = $13;$$2234 = 0;$$2239 = 20537;$$2251 = $11;$$5 = 1;$$6268 = $164;
    break;
   }
   case 109:  {
    $266 = (___errno_location()|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = (_strerror($267)|0);
    $$1 = $268;
    label = 71;
    break;
   }
   case 115:  {
    $269 = HEAP32[$6>>2]|0;
    $270 = ($269|0)!=(0|0);
    $271 = $270 ? $269 : 20547;
    $$1 = $271;
    label = 71;
    break;
   }
   case 67:  {
    $278 = $6;
    $279 = $278;
    $280 = HEAP32[$279>>2]|0;
    $281 = (($278) + 4)|0;
    $282 = $281;
    $283 = HEAP32[$282>>2]|0;
    HEAP32[$8>>2] = $280;
    HEAP32[$14>>2] = 0;
    HEAP32[$6>>2] = $8;
    $$4258355 = -1;$331 = $8;
    label = 75;
    break;
   }
   case 83:  {
    $$pre349 = HEAP32[$6>>2]|0;
    $284 = ($$0254|0)==(0);
    if ($284) {
     _pad_682($0,32,$$1260,0,$$1263$);
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$4258355 = $$0254;$331 = $$pre349;
     label = 75;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $306 = +HEAPF64[$6>>3];
    $307 = (_fmt_fp($0,$306,$$1260,$$0254,$$1263$,$$0235)|0);
    $$0243 = $307;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue L1;
    break;
   }
   default: {
    $$2 = $21;$$2234 = 0;$$2239 = 20537;$$2251 = $11;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L95: do {
   if ((label|0) == 61) {
    label = 0;
    $195 = $6;
    $196 = $195;
    $197 = HEAP32[$196>>2]|0;
    $198 = (($195) + 4)|0;
    $199 = $198;
    $200 = HEAP32[$199>>2]|0;
    $201 = $$1236 & 32;
    $202 = (_fmt_x($197,$200,$11,$201)|0);
    $203 = ($197|0)==(0);
    $204 = ($200|0)==(0);
    $205 = $203 & $204;
    $206 = $$3265 & 8;
    $207 = ($206|0)==(0);
    $or$cond283 = $207 | $205;
    $208 = $$1236 >> 4;
    $209 = (20537 + ($208)|0);
    $$289 = $or$cond283 ? 20537 : $209;
    $$290 = $or$cond283 ? 0 : 2;
    $$0228 = $202;$$1233 = $$290;$$1238 = $$289;$$2256 = $$1255;$$4266 = $$3265;$247 = $197;$249 = $200;
    label = 67;
   }
   else if ((label|0) == 66) {
    label = 0;
    $244 = (_fmt_u($242,$243,$11)|0);
    $$0228 = $244;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;$247 = $242;$249 = $243;
    label = 67;
   }
   else if ((label|0) == 71) {
    label = 0;
    $272 = (_memchr($$1,0,$$0254)|0);
    $273 = ($272|0)==(0|0);
    $274 = $272;
    $275 = $$1;
    $276 = (($274) - ($275))|0;
    $277 = (($$1) + ($$0254)|0);
    $$3257 = $273 ? $$0254 : $276;
    $$1250 = $273 ? $277 : $272;
    $$2 = $$1;$$2234 = 0;$$2239 = 20537;$$2251 = $$1250;$$5 = $$3257;$$6268 = $164;
   }
   else if ((label|0) == 75) {
    label = 0;
    $$0229322 = $331;$$0240321 = 0;$$1244320 = 0;
    while(1) {
     $285 = HEAP32[$$0229322>>2]|0;
     $286 = ($285|0)==(0);
     if ($286) {
      $$0240$lcssa = $$0240321;$$2245 = $$1244320;
      break;
     }
     $287 = (_wctomb($9,$285)|0);
     $288 = ($287|0)<(0);
     $289 = (($$4258355) - ($$0240321))|0;
     $290 = ($287>>>0)>($289>>>0);
     $or$cond286 = $288 | $290;
     if ($or$cond286) {
      $$0240$lcssa = $$0240321;$$2245 = $287;
      break;
     }
     $291 = ((($$0229322)) + 4|0);
     $292 = (($287) + ($$0240321))|0;
     $293 = ($$4258355>>>0)>($292>>>0);
     if ($293) {
      $$0229322 = $291;$$0240321 = $292;$$1244320 = $287;
     } else {
      $$0240$lcssa = $292;$$2245 = $287;
      break;
     }
    }
    $294 = ($$2245|0)<(0);
    if ($294) {
     $$0 = -1;
     break L1;
    }
    _pad_682($0,32,$$1260,$$0240$lcssa,$$1263$);
    $295 = ($$0240$lcssa|0)==(0);
    if ($295) {
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$1230333 = $331;$$1241332 = 0;
     while(1) {
      $296 = HEAP32[$$1230333>>2]|0;
      $297 = ($296|0)==(0);
      if ($297) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $298 = (_wctomb($9,$296)|0);
      $299 = (($298) + ($$1241332))|0;
      $300 = ($299|0)>($$0240$lcssa|0);
      if ($300) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $301 = ((($$1230333)) + 4|0);
      _out($0,$9,$298);
      $302 = ($299>>>0)<($$0240$lcssa>>>0);
      if ($302) {
       $$1230333 = $301;$$1241332 = $299;
      } else {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 67) {
   label = 0;
   $245 = ($$2256|0)>(-1);
   $246 = $$4266 & -65537;
   $$$4266 = $245 ? $246 : $$4266;
   $248 = ($247|0)!=(0);
   $250 = ($249|0)!=(0);
   $251 = $248 | $250;
   $252 = ($$2256|0)!=(0);
   $or$cond = $252 | $251;
   $253 = $$0228;
   $254 = (($12) - ($253))|0;
   $255 = $251 ^ 1;
   $256 = $255&1;
   $257 = (($256) + ($254))|0;
   $258 = ($$2256|0)>($257|0);
   $$2256$ = $258 ? $$2256 : $257;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $11;$$5 = $$2256$$$2256;$$6268 = $$$4266;
  }
  else if ((label|0) == 84) {
   label = 0;
   $303 = $$1263$ ^ 8192;
   _pad_682($0,32,$$1260,$$0240$lcssa357,$303);
   $304 = ($$1260|0)>($$0240$lcssa357|0);
   $305 = $304 ? $$1260 : $$0240$lcssa357;
   $$0243 = $305;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
   continue;
  }
  $308 = $$2251;
  $309 = $$2;
  $310 = (($308) - ($309))|0;
  $311 = ($$5|0)<($310|0);
  $$$5 = $311 ? $310 : $$5;
  $312 = (($$$5) + ($$2234))|0;
  $313 = ($$1260|0)<($312|0);
  $$2261 = $313 ? $312 : $$1260;
  _pad_682($0,32,$$2261,$312,$$6268);
  _out($0,$$2239,$$2234);
  $314 = $$6268 ^ 65536;
  _pad_682($0,48,$$2261,$312,$314);
  _pad_682($0,48,$$$5,$310,0);
  _out($0,$$2,$310);
  $315 = $$6268 ^ 8192;
  _pad_682($0,32,$$2261,$312,$315);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
 }
 L114: do {
  if ((label|0) == 87) {
   $316 = ($0|0)==(0|0);
   if ($316) {
    $317 = ($$0269|0)==(0);
    if ($317) {
     $$0 = 0;
    } else {
     $$2242305 = 1;
     while(1) {
      $318 = (($4) + ($$2242305<<2)|0);
      $319 = HEAP32[$318>>2]|0;
      $320 = ($319|0)==(0);
      if ($320) {
       $$3303 = $$2242305;
       break;
      }
      $321 = (($3) + ($$2242305<<3)|0);
      _pop_arg($321,$319,$2);
      $322 = (($$2242305) + 1)|0;
      $323 = ($322|0)<(10);
      if ($323) {
       $$2242305 = $322;
      } else {
       $$0 = 1;
       break L114;
      }
     }
     while(1) {
      $326 = (($4) + ($$3303<<2)|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = ($327|0)==(0);
      $324 = (($$3303) + 1)|0;
      if (!($328)) {
       $$0 = -1;
       break L114;
      }
      $325 = ($324|0)<(10);
      if ($325) {
       $$3303 = $324;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$06 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit5 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $isdigittmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $isdigittmp4 = (($3) + -48)|0;
 $isdigit5 = ($isdigittmp4>>>0)<(10);
 if ($isdigit5) {
  $$06 = 0;$7 = $1;$isdigittmp7 = $isdigittmp4;
  while(1) {
   $4 = ($$06*10)|0;
   $5 = (($isdigittmp7) + ($4))|0;
   $6 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $6;
   $8 = HEAP8[$6>>0]|0;
   $9 = $8 << 24 >> 24;
   $isdigittmp = (($9) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$06 = $5;$7 = $6;$isdigittmp7 = $isdigittmp;
   } else {
    $$0$lcssa = $5;
    break;
   }
  }
 } else {
  $$0$lcssa = 0;
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (20585 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10&255;
   $13 = $12 | 48;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_104()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad_682($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = ($9>>>0)<(256);
  $11 = $10 ? $9 : 256;
  _memset(($5|0),($1|0),($11|0))|0;
  $12 = ($9>>>0)>(255);
  if ($12) {
   $13 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $14 = (($$011) + -256)|0;
    $15 = ($14>>>0)>(255);
    if ($15) {
     $$011 = $14;
    } else {
     break;
    }
   }
   $16 = $13 & 255;
   $$0$lcssa = $16;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$$$559 = 0.0, $$$3484 = 0, $$$3484691 = 0, $$$3484692 = 0, $$$3501 = 0, $$$4502 = 0, $$$542 = 0.0, $$$559 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463584 = 0, $$0464594 = 0, $$0471 = 0.0, $$0479 = 0, $$0487642 = 0, $$0488 = 0, $$0488653 = 0, $$0488655 = 0;
 var $$0496$$9 = 0, $$0497654 = 0, $$0498 = 0, $$0509582 = 0.0, $$0510 = 0, $$0511 = 0, $$0514637 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0525 = 0, $$0527 = 0, $$0527629 = 0, $$0527631 = 0, $$0530636 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0;
 var $$1480 = 0, $$1482$lcssa = 0, $$1482661 = 0, $$1489641 = 0, $$1499$lcssa = 0, $$1499660 = 0, $$1508583 = 0, $$1512$lcssa = 0, $$1512607 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528614 = 0, $$1531$lcssa = 0, $$1531630 = 0, $$1598 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$547 = 0;
 var $$2476$$549 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516618 = 0, $$2529 = 0, $$2532617 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484648 = 0, $$3501$lcssa = 0, $$3501647 = 0, $$3533613 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478590 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0;
 var $$5$lcssa = 0, $$534$ = 0, $$539 = 0, $$539$ = 0, $$542 = 0.0, $$546 = 0, $$548 = 0, $$5486$lcssa = 0, $$5486623 = 0, $$5493597 = 0, $$5519$ph = 0, $$555 = 0, $$556 = 0, $$559 = 0.0, $$5602 = 0, $$6 = 0, $$6494589 = 0, $$7495601 = 0, $$7505 = 0, $$7505$ = 0;
 var $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa673 = 0, $$neg = 0, $$neg567 = 0, $$pn = 0, $$pn566 = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi690Z2D = 0, $$pre689 = 0, $$sink545$lcssa = 0, $$sink545622 = 0, $$sink562 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0;
 var $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0;
 var $narrow = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond537 = 0, $or$cond541 = 0, $or$cond544 = 0, $or$cond554 = 0, $or$cond6 = 0, $scevgep684 = 0, $scevgep684685 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 (___DOUBLE_BITS_683($1)|0);
 $12 = tempRet0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = -$1;
  $$0471 = $14;$$0520 = 1;$$0521 = 20554;
 } else {
  $15 = $4 & 2048;
  $16 = ($15|0)==(0);
  $17 = $4 & 1;
  $18 = ($17|0)==(0);
  $$ = $18 ? (20555) : (20560);
  $$$ = $16 ? $$ : (20557);
  $19 = $4 & 2049;
  $narrow = ($19|0)!=(0);
  $$534$ = $narrow&1;
  $$0471 = $1;$$0520 = $$534$;$$0521 = $$$;
 }
 (___DOUBLE_BITS_683($$0471)|0);
 $20 = tempRet0;
 $21 = $20 & 2146435072;
 $22 = ($21>>>0)<(2146435072);
 $23 = (0)<(0);
 $24 = ($21|0)==(2146435072);
 $25 = $24 & $23;
 $26 = $22 | $25;
 do {
  if ($26) {
   $35 = (+_frexpl($$0471,$7));
   $36 = $35 * 2.0;
   $37 = $36 != 0.0;
   if ($37) {
    $38 = HEAP32[$7>>2]|0;
    $39 = (($38) + -1)|0;
    HEAP32[$7>>2] = $39;
   }
   $40 = $5 | 32;
   $41 = ($40|0)==(97);
   if ($41) {
    $42 = $5 & 32;
    $43 = ($42|0)==(0);
    $44 = ((($$0521)) + 9|0);
    $$0521$ = $43 ? $$0521 : $44;
    $45 = $$0520 | 2;
    $46 = ($3>>>0)>(11);
    $47 = (12 - ($3))|0;
    $48 = ($47|0)==(0);
    $49 = $46 | $48;
    do {
     if ($49) {
      $$1472 = $36;
     } else {
      $$0509582 = 8.0;$$1508583 = $47;
      while(1) {
       $50 = (($$1508583) + -1)|0;
       $51 = $$0509582 * 16.0;
       $52 = ($50|0)==(0);
       if ($52) {
        break;
       } else {
        $$0509582 = $51;$$1508583 = $50;
       }
      }
      $53 = HEAP8[$$0521$>>0]|0;
      $54 = ($53<<24>>24)==(45);
      if ($54) {
       $55 = -$36;
       $56 = $55 - $51;
       $57 = $51 + $56;
       $58 = -$57;
       $$1472 = $58;
       break;
      } else {
       $59 = $36 + $51;
       $60 = $59 - $51;
       $$1472 = $60;
       break;
      }
     }
    } while(0);
    $61 = HEAP32[$7>>2]|0;
    $62 = ($61|0)<(0);
    $63 = (0 - ($61))|0;
    $64 = $62 ? $63 : $61;
    $65 = ($64|0)<(0);
    $66 = $65 << 31 >> 31;
    $67 = (_fmt_u($64,$66,$11)|0);
    $68 = ($67|0)==($11|0);
    if ($68) {
     $69 = ((($10)) + 11|0);
     HEAP8[$69>>0] = 48;
     $$0511 = $69;
    } else {
     $$0511 = $67;
    }
    $70 = $61 >> 31;
    $71 = $70 & 2;
    $72 = (($71) + 43)|0;
    $73 = $72&255;
    $74 = ((($$0511)) + -1|0);
    HEAP8[$74>>0] = $73;
    $75 = (($5) + 15)|0;
    $76 = $75&255;
    $77 = ((($$0511)) + -2|0);
    HEAP8[$77>>0] = $76;
    $notrhs = ($3|0)<(1);
    $78 = $4 & 8;
    $79 = ($78|0)==(0);
    $$0523 = $8;$$2473 = $$1472;
    while(1) {
     $80 = (~~(($$2473)));
     $81 = (20585 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $83 | $42;
     $85 = $84&255;
     $86 = ((($$0523)) + 1|0);
     HEAP8[$$0523>>0] = $85;
     $87 = (+($80|0));
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = (($90) - ($9))|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $notlhs = $89 == 0.0;
      $or$cond3$not = $notrhs & $notlhs;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $93 = ((($$0523)) + 2|0);
       HEAP8[$86>>0] = 46;
       $$1524 = $93;
      }
     } else {
      $$1524 = $86;
     }
     $94 = $89 != 0.0;
     if ($94) {
      $$0523 = $$1524;$$2473 = $89;
     } else {
      break;
     }
    }
    $95 = ($3|0)!=(0);
    $96 = $77;
    $97 = $11;
    $98 = $$1524;
    $99 = (($98) - ($9))|0;
    $100 = (($97) - ($96))|0;
    $101 = (($99) + -2)|0;
    $102 = ($101|0)<($3|0);
    $or$cond537 = $95 & $102;
    $103 = (($3) + 2)|0;
    $$pn = $or$cond537 ? $103 : $99;
    $$0525 = (($100) + ($45))|0;
    $104 = (($$0525) + ($$pn))|0;
    _pad_682($0,32,$2,$104,$4);
    _out($0,$$0521$,$45);
    $105 = $4 ^ 65536;
    _pad_682($0,48,$2,$104,$105);
    _out($0,$8,$99);
    $106 = (($$pn) - ($99))|0;
    _pad_682($0,48,$106,0,0);
    _out($0,$77,$100);
    $107 = $4 ^ 8192;
    _pad_682($0,32,$2,$104,$107);
    $$sink562 = $104;
    break;
   }
   $108 = ($3|0)<(0);
   $$539 = $108 ? 6 : $3;
   if ($37) {
    $109 = $36 * 268435456.0;
    $110 = HEAP32[$7>>2]|0;
    $111 = (($110) + -28)|0;
    HEAP32[$7>>2] = $111;
    $$3 = $109;$$pr = $111;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $36;$$pr = $$pre;
   }
   $112 = ($$pr|0)<(0);
   $113 = ((($6)) + 288|0);
   $$556 = $112 ? $6 : $113;
   $$0498 = $$556;$$4 = $$3;
   while(1) {
    $114 = (~~(($$4))>>>0);
    HEAP32[$$0498>>2] = $114;
    $115 = ((($$0498)) + 4|0);
    $116 = (+($114>>>0));
    $117 = $$4 - $116;
    $118 = $117 * 1.0E+9;
    $119 = $118 != 0.0;
    if ($119) {
     $$0498 = $115;$$4 = $118;
    } else {
     break;
    }
   }
   $120 = ($$pr|0)>(0);
   if ($120) {
    $$1482661 = $$556;$$1499660 = $115;$121 = $$pr;
    while(1) {
     $122 = ($121|0)<(29);
     $123 = $122 ? $121 : 29;
     $$0488653 = ((($$1499660)) + -4|0);
     $124 = ($$0488653>>>0)<($$1482661>>>0);
     if ($124) {
      $$2483$ph = $$1482661;
     } else {
      $$0488655 = $$0488653;$$0497654 = 0;
      while(1) {
       $125 = HEAP32[$$0488655>>2]|0;
       $126 = (_bitshift64Shl(($125|0),0,($123|0))|0);
       $127 = tempRet0;
       $128 = (_i64Add(($126|0),($127|0),($$0497654|0),0)|0);
       $129 = tempRet0;
       $130 = (___uremdi3(($128|0),($129|0),1000000000,0)|0);
       $131 = tempRet0;
       HEAP32[$$0488655>>2] = $130;
       $132 = (___udivdi3(($128|0),($129|0),1000000000,0)|0);
       $133 = tempRet0;
       $$0488 = ((($$0488655)) + -4|0);
       $134 = ($$0488>>>0)<($$1482661>>>0);
       if ($134) {
        break;
       } else {
        $$0488655 = $$0488;$$0497654 = $132;
       }
      }
      $135 = ($132|0)==(0);
      if ($135) {
       $$2483$ph = $$1482661;
      } else {
       $136 = ((($$1482661)) + -4|0);
       HEAP32[$136>>2] = $132;
       $$2483$ph = $136;
      }
     }
     $$2500 = $$1499660;
     while(1) {
      $137 = ($$2500>>>0)>($$2483$ph>>>0);
      if (!($137)) {
       break;
      }
      $138 = ((($$2500)) + -4|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0);
      if ($140) {
       $$2500 = $138;
      } else {
       break;
      }
     }
     $141 = HEAP32[$7>>2]|0;
     $142 = (($141) - ($123))|0;
     HEAP32[$7>>2] = $142;
     $143 = ($142|0)>(0);
     if ($143) {
      $$1482661 = $$2483$ph;$$1499660 = $$2500;$121 = $142;
     } else {
      $$1482$lcssa = $$2483$ph;$$1499$lcssa = $$2500;$$pr564 = $142;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$556;$$1499$lcssa = $115;$$pr564 = $$pr;
   }
   $144 = ($$pr564|0)<(0);
   if ($144) {
    $145 = (($$539) + 25)|0;
    $146 = (($145|0) / 9)&-1;
    $147 = (($146) + 1)|0;
    $148 = ($40|0)==(102);
    $$3484648 = $$1482$lcssa;$$3501647 = $$1499$lcssa;$150 = $$pr564;
    while(1) {
     $149 = (0 - ($150))|0;
     $151 = ($149|0)<(9);
     $152 = $151 ? $149 : 9;
     $153 = ($$3484648>>>0)<($$3501647>>>0);
     if ($153) {
      $157 = 1 << $152;
      $158 = (($157) + -1)|0;
      $159 = 1000000000 >>> $152;
      $$0487642 = 0;$$1489641 = $$3484648;
      while(1) {
       $160 = HEAP32[$$1489641>>2]|0;
       $161 = $160 & $158;
       $162 = $160 >>> $152;
       $163 = (($162) + ($$0487642))|0;
       HEAP32[$$1489641>>2] = $163;
       $164 = Math_imul($161, $159)|0;
       $165 = ((($$1489641)) + 4|0);
       $166 = ($165>>>0)<($$3501647>>>0);
       if ($166) {
        $$0487642 = $164;$$1489641 = $165;
       } else {
        break;
       }
      }
      $167 = HEAP32[$$3484648>>2]|0;
      $168 = ($167|0)==(0);
      $169 = ((($$3484648)) + 4|0);
      $$$3484 = $168 ? $169 : $$3484648;
      $170 = ($164|0)==(0);
      if ($170) {
       $$$3484692 = $$$3484;$$4502 = $$3501647;
      } else {
       $171 = ((($$3501647)) + 4|0);
       HEAP32[$$3501647>>2] = $164;
       $$$3484692 = $$$3484;$$4502 = $171;
      }
     } else {
      $154 = HEAP32[$$3484648>>2]|0;
      $155 = ($154|0)==(0);
      $156 = ((($$3484648)) + 4|0);
      $$$3484691 = $155 ? $156 : $$3484648;
      $$$3484692 = $$$3484691;$$4502 = $$3501647;
     }
     $172 = $148 ? $$556 : $$$3484692;
     $173 = $$4502;
     $174 = $172;
     $175 = (($173) - ($174))|0;
     $176 = $175 >> 2;
     $177 = ($176|0)>($147|0);
     $178 = (($172) + ($147<<2)|0);
     $$$4502 = $177 ? $178 : $$4502;
     $179 = HEAP32[$7>>2]|0;
     $180 = (($179) + ($152))|0;
     HEAP32[$7>>2] = $180;
     $181 = ($180|0)<(0);
     if ($181) {
      $$3484648 = $$$3484692;$$3501647 = $$$4502;$150 = $180;
     } else {
      $$3484$lcssa = $$$3484692;$$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$3501$lcssa = $$1499$lcssa;
   }
   $182 = ($$3484$lcssa>>>0)<($$3501$lcssa>>>0);
   $183 = $$556;
   if ($182) {
    $184 = $$3484$lcssa;
    $185 = (($183) - ($184))|0;
    $186 = $185 >> 2;
    $187 = ($186*9)|0;
    $188 = HEAP32[$$3484$lcssa>>2]|0;
    $189 = ($188>>>0)<(10);
    if ($189) {
     $$1515 = $187;
    } else {
     $$0514637 = $187;$$0530636 = 10;
     while(1) {
      $190 = ($$0530636*10)|0;
      $191 = (($$0514637) + 1)|0;
      $192 = ($188>>>0)<($190>>>0);
      if ($192) {
       $$1515 = $191;
       break;
      } else {
       $$0514637 = $191;$$0530636 = $190;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $193 = ($40|0)!=(102);
   $194 = $193 ? $$1515 : 0;
   $195 = (($$539) - ($194))|0;
   $196 = ($40|0)==(103);
   $197 = ($$539|0)!=(0);
   $198 = $197 & $196;
   $$neg = $198 << 31 >> 31;
   $199 = (($195) + ($$neg))|0;
   $200 = $$3501$lcssa;
   $201 = (($200) - ($183))|0;
   $202 = $201 >> 2;
   $203 = ($202*9)|0;
   $204 = (($203) + -9)|0;
   $205 = ($199|0)<($204|0);
   if ($205) {
    $206 = ((($$556)) + 4|0);
    $207 = (($199) + 9216)|0;
    $208 = (($207|0) / 9)&-1;
    $209 = (($208) + -1024)|0;
    $210 = (($206) + ($209<<2)|0);
    $211 = (($207|0) % 9)&-1;
    $$0527629 = (($211) + 1)|0;
    $212 = ($$0527629|0)<(9);
    if ($212) {
     $$0527631 = $$0527629;$$1531630 = 10;
     while(1) {
      $213 = ($$1531630*10)|0;
      $$0527 = (($$0527631) + 1)|0;
      $exitcond = ($$0527|0)==(9);
      if ($exitcond) {
       $$1531$lcssa = $213;
       break;
      } else {
       $$0527631 = $$0527;$$1531630 = $213;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $214 = HEAP32[$210>>2]|0;
    $215 = (($214>>>0) % ($$1531$lcssa>>>0))&-1;
    $216 = ($215|0)==(0);
    $217 = ((($210)) + 4|0);
    $218 = ($217|0)==($$3501$lcssa|0);
    $or$cond541 = $218 & $216;
    if ($or$cond541) {
     $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
    } else {
     $219 = (($214>>>0) / ($$1531$lcssa>>>0))&-1;
     $220 = $219 & 1;
     $221 = ($220|0)==(0);
     $$542 = $221 ? 9007199254740992.0 : 9007199254740994.0;
     $222 = (($$1531$lcssa|0) / 2)&-1;
     $223 = ($215>>>0)<($222>>>0);
     $224 = ($215|0)==($222|0);
     $or$cond544 = $218 & $224;
     $$559 = $or$cond544 ? 1.0 : 1.5;
     $$$559 = $223 ? 0.5 : $$559;
     $225 = ($$0520|0)==(0);
     if ($225) {
      $$1467 = $$$559;$$1469 = $$542;
     } else {
      $226 = HEAP8[$$0521>>0]|0;
      $227 = ($226<<24>>24)==(45);
      $228 = -$$542;
      $229 = -$$$559;
      $$$542 = $227 ? $228 : $$542;
      $$$$559 = $227 ? $229 : $$$559;
      $$1467 = $$$$559;$$1469 = $$$542;
     }
     $230 = (($214) - ($215))|0;
     HEAP32[$210>>2] = $230;
     $231 = $$1469 + $$1467;
     $232 = $231 != $$1469;
     if ($232) {
      $233 = (($230) + ($$1531$lcssa))|0;
      HEAP32[$210>>2] = $233;
      $234 = ($233>>>0)>(999999999);
      if ($234) {
       $$5486623 = $$3484$lcssa;$$sink545622 = $210;
       while(1) {
        $235 = ((($$sink545622)) + -4|0);
        HEAP32[$$sink545622>>2] = 0;
        $236 = ($235>>>0)<($$5486623>>>0);
        if ($236) {
         $237 = ((($$5486623)) + -4|0);
         HEAP32[$237>>2] = 0;
         $$6 = $237;
        } else {
         $$6 = $$5486623;
        }
        $238 = HEAP32[$235>>2]|0;
        $239 = (($238) + 1)|0;
        HEAP32[$235>>2] = $239;
        $240 = ($239>>>0)>(999999999);
        if ($240) {
         $$5486623 = $$6;$$sink545622 = $235;
        } else {
         $$5486$lcssa = $$6;$$sink545$lcssa = $235;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;$$sink545$lcssa = $210;
      }
      $241 = $$5486$lcssa;
      $242 = (($183) - ($241))|0;
      $243 = $242 >> 2;
      $244 = ($243*9)|0;
      $245 = HEAP32[$$5486$lcssa>>2]|0;
      $246 = ($245>>>0)<(10);
      if ($246) {
       $$4492 = $$sink545$lcssa;$$4518 = $244;$$8 = $$5486$lcssa;
      } else {
       $$2516618 = $244;$$2532617 = 10;
       while(1) {
        $247 = ($$2532617*10)|0;
        $248 = (($$2516618) + 1)|0;
        $249 = ($245>>>0)<($247>>>0);
        if ($249) {
         $$4492 = $$sink545$lcssa;$$4518 = $248;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2516618 = $248;$$2532617 = $247;
        }
       }
      }
     } else {
      $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
     }
    }
    $250 = ((($$4492)) + 4|0);
    $251 = ($$3501$lcssa>>>0)>($250>>>0);
    $$$3501 = $251 ? $250 : $$3501$lcssa;
    $$5519$ph = $$4518;$$7505$ph = $$$3501;$$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;$$7505$ph = $$3501$lcssa;$$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while(1) {
    $252 = ($$7505>>>0)>($$9$ph>>>0);
    if (!($252)) {
     $$lcssa673 = 0;
     break;
    }
    $253 = ((($$7505)) + -4|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = ($254|0)==(0);
    if ($255) {
     $$7505 = $253;
    } else {
     $$lcssa673 = 1;
     break;
    }
   }
   $256 = (0 - ($$5519$ph))|0;
   do {
    if ($196) {
     $not$ = $197 ^ 1;
     $257 = $not$&1;
     $$539$ = (($257) + ($$539))|0;
     $258 = ($$539$|0)>($$5519$ph|0);
     $259 = ($$5519$ph|0)>(-5);
     $or$cond6 = $258 & $259;
     if ($or$cond6) {
      $260 = (($5) + -1)|0;
      $$neg567 = (($$539$) + -1)|0;
      $261 = (($$neg567) - ($$5519$ph))|0;
      $$0479 = $260;$$2476 = $261;
     } else {
      $262 = (($5) + -2)|0;
      $263 = (($$539$) + -1)|0;
      $$0479 = $262;$$2476 = $263;
     }
     $264 = $4 & 8;
     $265 = ($264|0)==(0);
     if ($265) {
      if ($$lcssa673) {
       $266 = ((($$7505)) + -4|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = ($267|0)==(0);
       if ($268) {
        $$2529 = 9;
       } else {
        $269 = (($267>>>0) % 10)&-1;
        $270 = ($269|0)==(0);
        if ($270) {
         $$1528614 = 0;$$3533613 = 10;
         while(1) {
          $271 = ($$3533613*10)|0;
          $272 = (($$1528614) + 1)|0;
          $273 = (($267>>>0) % ($271>>>0))&-1;
          $274 = ($273|0)==(0);
          if ($274) {
           $$1528614 = $272;$$3533613 = $271;
          } else {
           $$2529 = $272;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $275 = $$0479 | 32;
      $276 = ($275|0)==(102);
      $277 = $$7505;
      $278 = (($277) - ($183))|0;
      $279 = $278 >> 2;
      $280 = ($279*9)|0;
      $281 = (($280) + -9)|0;
      if ($276) {
       $282 = (($281) - ($$2529))|0;
       $283 = ($282|0)>(0);
       $$546 = $283 ? $282 : 0;
       $284 = ($$2476|0)<($$546|0);
       $$2476$$547 = $284 ? $$2476 : $$546;
       $$1480 = $$0479;$$3477 = $$2476$$547;$$pre$phi690Z2D = 0;
       break;
      } else {
       $285 = (($281) + ($$5519$ph))|0;
       $286 = (($285) - ($$2529))|0;
       $287 = ($286|0)>(0);
       $$548 = $287 ? $286 : 0;
       $288 = ($$2476|0)<($$548|0);
       $$2476$$549 = $288 ? $$2476 : $$548;
       $$1480 = $$0479;$$3477 = $$2476$$549;$$pre$phi690Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;$$pre$phi690Z2D = $264;
     }
    } else {
     $$pre689 = $4 & 8;
     $$1480 = $5;$$3477 = $$539;$$pre$phi690Z2D = $$pre689;
    }
   } while(0);
   $289 = $$3477 | $$pre$phi690Z2D;
   $290 = ($289|0)!=(0);
   $291 = $290&1;
   $292 = $$1480 | 32;
   $293 = ($292|0)==(102);
   if ($293) {
    $294 = ($$5519$ph|0)>(0);
    $295 = $294 ? $$5519$ph : 0;
    $$2513 = 0;$$pn566 = $295;
   } else {
    $296 = ($$5519$ph|0)<(0);
    $297 = $296 ? $256 : $$5519$ph;
    $298 = ($297|0)<(0);
    $299 = $298 << 31 >> 31;
    $300 = (_fmt_u($297,$299,$11)|0);
    $301 = $11;
    $302 = $300;
    $303 = (($301) - ($302))|0;
    $304 = ($303|0)<(2);
    if ($304) {
     $$1512607 = $300;
     while(1) {
      $305 = ((($$1512607)) + -1|0);
      HEAP8[$305>>0] = 48;
      $306 = $305;
      $307 = (($301) - ($306))|0;
      $308 = ($307|0)<(2);
      if ($308) {
       $$1512607 = $305;
      } else {
       $$1512$lcssa = $305;
       break;
      }
     }
    } else {
     $$1512$lcssa = $300;
    }
    $309 = $$5519$ph >> 31;
    $310 = $309 & 2;
    $311 = (($310) + 43)|0;
    $312 = $311&255;
    $313 = ((($$1512$lcssa)) + -1|0);
    HEAP8[$313>>0] = $312;
    $314 = $$1480&255;
    $315 = ((($$1512$lcssa)) + -2|0);
    HEAP8[$315>>0] = $314;
    $316 = $315;
    $317 = (($301) - ($316))|0;
    $$2513 = $315;$$pn566 = $317;
   }
   $318 = (($$0520) + 1)|0;
   $319 = (($318) + ($$3477))|0;
   $$1526 = (($319) + ($291))|0;
   $320 = (($$1526) + ($$pn566))|0;
   _pad_682($0,32,$2,$320,$4);
   _out($0,$$0521,$$0520);
   $321 = $4 ^ 65536;
   _pad_682($0,48,$2,$320,$321);
   if ($293) {
    $322 = ($$9$ph>>>0)>($$556>>>0);
    $$0496$$9 = $322 ? $$556 : $$9$ph;
    $323 = ((($8)) + 9|0);
    $324 = $323;
    $325 = ((($8)) + 8|0);
    $$5493597 = $$0496$$9;
    while(1) {
     $326 = HEAP32[$$5493597>>2]|0;
     $327 = (_fmt_u($326,0,$323)|0);
     $328 = ($$5493597|0)==($$0496$$9|0);
     if ($328) {
      $334 = ($327|0)==($323|0);
      if ($334) {
       HEAP8[$325>>0] = 48;
       $$1465 = $325;
      } else {
       $$1465 = $327;
      }
     } else {
      $329 = ($327>>>0)>($8>>>0);
      if ($329) {
       $330 = $327;
       $331 = (($330) - ($9))|0;
       _memset(($8|0),48,($331|0))|0;
       $$0464594 = $327;
       while(1) {
        $332 = ((($$0464594)) + -1|0);
        $333 = ($332>>>0)>($8>>>0);
        if ($333) {
         $$0464594 = $332;
        } else {
         $$1465 = $332;
         break;
        }
       }
      } else {
       $$1465 = $327;
      }
     }
     $335 = $$1465;
     $336 = (($324) - ($335))|0;
     _out($0,$$1465,$336);
     $337 = ((($$5493597)) + 4|0);
     $338 = ($337>>>0)>($$556>>>0);
     if ($338) {
      break;
     } else {
      $$5493597 = $337;
     }
    }
    $339 = ($289|0)==(0);
    if (!($339)) {
     _out($0,20601,1);
    }
    $340 = ($337>>>0)<($$7505>>>0);
    $341 = ($$3477|0)>(0);
    $342 = $340 & $341;
    if ($342) {
     $$4478590 = $$3477;$$6494589 = $337;
     while(1) {
      $343 = HEAP32[$$6494589>>2]|0;
      $344 = (_fmt_u($343,0,$323)|0);
      $345 = ($344>>>0)>($8>>>0);
      if ($345) {
       $346 = $344;
       $347 = (($346) - ($9))|0;
       _memset(($8|0),48,($347|0))|0;
       $$0463584 = $344;
       while(1) {
        $348 = ((($$0463584)) + -1|0);
        $349 = ($348>>>0)>($8>>>0);
        if ($349) {
         $$0463584 = $348;
        } else {
         $$0463$lcssa = $348;
         break;
        }
       }
      } else {
       $$0463$lcssa = $344;
      }
      $350 = ($$4478590|0)<(9);
      $351 = $350 ? $$4478590 : 9;
      _out($0,$$0463$lcssa,$351);
      $352 = ((($$6494589)) + 4|0);
      $353 = (($$4478590) + -9)|0;
      $354 = ($352>>>0)<($$7505>>>0);
      $355 = ($$4478590|0)>(9);
      $356 = $354 & $355;
      if ($356) {
       $$4478590 = $353;$$6494589 = $352;
      } else {
       $$4478$lcssa = $353;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $357 = (($$4478$lcssa) + 9)|0;
    _pad_682($0,48,$357,9,0);
   } else {
    $358 = ((($$9$ph)) + 4|0);
    $$7505$ = $$lcssa673 ? $$7505 : $358;
    $359 = ($$3477|0)>(-1);
    if ($359) {
     $360 = ((($8)) + 9|0);
     $361 = ($$pre$phi690Z2D|0)==(0);
     $362 = $360;
     $363 = (0 - ($9))|0;
     $364 = ((($8)) + 8|0);
     $$5602 = $$3477;$$7495601 = $$9$ph;
     while(1) {
      $365 = HEAP32[$$7495601>>2]|0;
      $366 = (_fmt_u($365,0,$360)|0);
      $367 = ($366|0)==($360|0);
      if ($367) {
       HEAP8[$364>>0] = 48;
       $$0 = $364;
      } else {
       $$0 = $366;
      }
      $368 = ($$7495601|0)==($$9$ph|0);
      do {
       if ($368) {
        $372 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $373 = ($$5602|0)<(1);
        $or$cond554 = $361 & $373;
        if ($or$cond554) {
         $$2 = $372;
         break;
        }
        _out($0,20601,1);
        $$2 = $372;
       } else {
        $369 = ($$0>>>0)>($8>>>0);
        if (!($369)) {
         $$2 = $$0;
         break;
        }
        $scevgep684 = (($$0) + ($363)|0);
        $scevgep684685 = $scevgep684;
        _memset(($8|0),48,($scevgep684685|0))|0;
        $$1598 = $$0;
        while(1) {
         $370 = ((($$1598)) + -1|0);
         $371 = ($370>>>0)>($8>>>0);
         if ($371) {
          $$1598 = $370;
         } else {
          $$2 = $370;
          break;
         }
        }
       }
      } while(0);
      $374 = $$2;
      $375 = (($362) - ($374))|0;
      $376 = ($$5602|0)>($375|0);
      $377 = $376 ? $375 : $$5602;
      _out($0,$$2,$377);
      $378 = (($$5602) - ($375))|0;
      $379 = ((($$7495601)) + 4|0);
      $380 = ($379>>>0)<($$7505$>>>0);
      $381 = ($378|0)>(-1);
      $382 = $380 & $381;
      if ($382) {
       $$5602 = $378;$$7495601 = $379;
      } else {
       $$5$lcssa = $378;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $383 = (($$5$lcssa) + 18)|0;
    _pad_682($0,48,$383,18,0);
    $384 = $11;
    $385 = $$2513;
    $386 = (($384) - ($385))|0;
    _out($0,$$2513,$386);
   }
   $387 = $4 ^ 8192;
   _pad_682($0,32,$2,$320,$387);
   $$sink562 = $320;
  } else {
   $27 = $5 & 32;
   $28 = ($27|0)!=(0);
   $29 = $28 ? 20573 : 20577;
   $30 = ($$0471 != $$0471) | (0.0 != 0.0);
   $31 = $28 ? 22519 : 20581;
   $$0510 = $30 ? $31 : $29;
   $32 = (($$0520) + 3)|0;
   $33 = $4 & -65537;
   _pad_682($0,32,$2,$32,$33);
   _out($0,$$0521,$$0520);
   _out($0,$$0510,3);
   $34 = $4 ^ 8192;
   _pad_682($0,32,$2,$32,$34);
   $$sink562 = $32;
  }
 } while(0);
 $388 = ($$sink562|0)<($2|0);
 $$555 = $388 ? $2 : $$sink562;
 STACKTOP = sp;return ($$555|0);
}
function ___DOUBLE_BITS_683($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_429()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (Atomics_load(HEAP32,$8>>2)|0);
   $not$ = ($9|0)==(0|0);
   if ($not$) {
    $10 = $1 & -128;
    $11 = ($10|0)==(57216);
    if ($11) {
     $13 = $1&255;
     HEAP8[$0>>0] = $13;
     $$0 = 1;
     break;
    } else {
     $12 = (___errno_location()|0);
     HEAP32[$12>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $14 = ($1>>>0)<(2048);
   if ($14) {
    $15 = $1 >>> 6;
    $16 = $15 | 192;
    $17 = $16&255;
    $18 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $17;
    $19 = $1 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    HEAP8[$18>>0] = $21;
    $$0 = 2;
    break;
   }
   $22 = ($1>>>0)<(55296);
   $23 = $1 & -8192;
   $24 = ($23|0)==(57344);
   $or$cond = $22 | $24;
   if ($or$cond) {
    $25 = $1 >>> 12;
    $26 = $25 | 224;
    $27 = $26&255;
    $28 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $27;
    $29 = $1 >>> 6;
    $30 = $29 & 63;
    $31 = $30 | 128;
    $32 = $31&255;
    $33 = ((($0)) + 2|0);
    HEAP8[$28>>0] = $32;
    $34 = $1 & 63;
    $35 = $34 | 128;
    $36 = $35&255;
    HEAP8[$33>>0] = $36;
    $$0 = 3;
    break;
   }
   $37 = (($1) + -65536)|0;
   $38 = ($37>>>0)<(1048576);
   if ($38) {
    $39 = $1 >>> 18;
    $40 = $39 | 240;
    $41 = $40&255;
    $42 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $41;
    $43 = $1 >>> 12;
    $44 = $43 & 63;
    $45 = $44 | 128;
    $46 = $45&255;
    $47 = ((($0)) + 2|0);
    HEAP8[$42>>0] = $46;
    $48 = $1 >>> 6;
    $49 = $48 & 63;
    $50 = $49 | 128;
    $51 = $50&255;
    $52 = ((($0)) + 3|0);
    HEAP8[$47>>0] = $51;
    $53 = $1 & 63;
    $54 = $53 | 128;
    $55 = $54&255;
    HEAP8[$52>>0] = $55;
    $$0 = 4;
    break;
   } else {
    $56 = (___errno_location()|0);
    HEAP32[$56>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_429() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___pthread_self_104() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (20603 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 20691;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 20691;
  } else {
   $$01214 = 20691;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = (Atomics_load(HEAP32,$14>>2)|0);
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 63]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 63]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   _memcpy(($31|0),($$141|0),($$143|0))|0;
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = ((($0)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($14) + ($18)|0);
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6;
 $8 = (($4) - ($7))|0;
 $9 = ($8>>>0)>($2>>>0);
 $$ = $9 ? $2 : $8;
 _memcpy(($6|0),($1|0),($$|0))|0;
 $10 = HEAP32[$5>>2]|0;
 $11 = (($10) + ($$)|0);
 HEAP32[$5>>2] = $11;
 return ($2|0);
}
function _isalnum($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $isdigit = 0, $isdigittmp = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isalpha($0)|0);
 $isdigittmp = (($0) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $not$ = ($1|0)!=(0);
 $2 = $isdigit | $not$;
 $3 = $2&1;
 return ($3|0);
}
function _isalpha($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 | 32;
 $2 = (($1) + -97)|0;
 $3 = ($2>>>0)<(26);
 $4 = $3&1;
 return ($4|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _isgraph($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -33)|0;
 $2 = ($1>>>0)<(94);
 $3 = $2&1;
 return ($3|0);
}
function _close($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (_dummy_568($0)|0);
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = ($2|0)==(-4);
 $$ = $3 ? 0 : $2;
 $4 = (___syscall_ret($$)|0);
 STACKTOP = sp;return ($4|0);
}
function _fstat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 24|0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (___syscall197(197,($vararg_buffer|0))|0);
 $5 = ($4|0)==(-9);
 if ($5) {
  HEAP32[$vararg_buffer2>>2] = $0;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 1;
  $6 = (___syscall221(221,($vararg_buffer2|0))|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 3;
  } else {
   ___procfdname($2,$0);
   $9 = $2;
   HEAP32[$vararg_buffer6>>2] = $9;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $3;
   $10 = (___syscall195(195,($vararg_buffer6|0))|0);
   $11 = (___syscall_ret($10)|0);
   $$0 = $11;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $8 = (___syscall_ret($4)|0);
  $$0 = $8;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___procfdname($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02324 = 0, $$027 = 0, $$126 = 0, $$225 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$0; src=22495; stop=dest+15|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $2 = ($1|0)==(0);
 if ($2) {
  $scevgep = ((($0)) + 14|0);
  HEAP8[$scevgep>>0] = 48;
  $3 = ((($0)) + 15|0);
  HEAP8[$3>>0] = 0;
 } else {
  $$027 = $1;$$126 = 14;
  while(1) {
   $4 = (($$027>>>0) / 10)&-1;
   $5 = (($$126) + 1)|0;
   $6 = ($$027>>>0)<(10);
   if ($6) {
    break;
   } else {
    $$027 = $4;$$126 = $5;
   }
  }
  $7 = (($0) + ($5)|0);
  HEAP8[$7>>0] = 0;
  $$02324 = $1;$$225 = $5;
  while(1) {
   $8 = (($$02324>>>0) % 10)&-1;
   $9 = $8 | 48;
   $10 = $9&255;
   $11 = (($$225) + -1)|0;
   $12 = (($0) + ($11)|0);
   HEAP8[$12>>0] = $10;
   $13 = (($$02324>>>0) / 10)&-1;
   $14 = ($$02324>>>0)<(10);
   if ($14) {
    break;
   } else {
    $$02324 = $13;$$225 = $11;
   }
  }
 }
 return;
}
function _open($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0;
 var $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $or$cond14 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 32|0;
 $3 = $1 & 4194368;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0;
 } else {
  HEAP32[$2>>2] = $varargs;
  $arglist_current = HEAP32[$2>>2]|0;
  $5 = $arglist_current;
  $6 = ((0) + 4|0);
  $expanded2 = $6;
  $expanded = (($expanded2) - 1)|0;
  $7 = (($5) + ($expanded))|0;
  $8 = ((0) + 4|0);
  $expanded6 = $8;
  $expanded5 = (($expanded6) - 1)|0;
  $expanded4 = $expanded5 ^ -1;
  $9 = $7 & $expanded4;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $arglist_next = ((($10)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $$0 = $11;
 }
 $12 = $0;
 $13 = $1 | 32768;
 HEAP32[$vararg_buffer>>2] = $12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $$0;
 $14 = (___syscall5(5,($vararg_buffer|0))|0);
 $15 = ($14|0)<(0);
 $16 = $1 & 524288;
 $17 = ($16|0)==(0);
 $or$cond14 = $17 | $15;
 if (!($or$cond14)) {
  HEAP32[$vararg_buffer3>>2] = $14;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 2;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 1;
  (___syscall221(221,($vararg_buffer3|0))|0);
 }
 $18 = (___syscall_ret($14)|0);
 STACKTOP = sp;return ($18|0);
}
function _lseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = $3;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $4;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $5 = (___syscall140(140,($vararg_buffer|0))|0);
 $6 = (___syscall_ret($5)|0);
 $7 = ($6|0)!=(0);
 $8 = HEAP32[$3>>2]|0;
 $9 = $7 ? -1 : $8;
 STACKTOP = sp;return ($9|0);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $$old8 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0105$ph = -149;$$0106$ph = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 default: {
  $$0114 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $3 = ((($0)) + 4|0);
   $4 = ((($0)) + 100|0);
   while(1) {
    $5 = HEAP32[$3>>2]|0;
    $6 = HEAP32[$4>>2]|0;
    $7 = ($5>>>0)<($6>>>0);
    if ($7) {
     $8 = ((($5)) + 1|0);
     HEAP32[$3>>2] = $8;
     $9 = HEAP8[$5>>0]|0;
     $10 = $9&255;
     $12 = $10;
    } else {
     $11 = (___shgetc($0)|0);
     $12 = $11;
    }
    $13 = (_isspace($12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break;
    }
   }
   L13: do {
    switch ($12|0) {
    case 43: case 45:  {
     $15 = ($12|0)==(45);
     $16 = $15&1;
     $17 = $16 << 1;
     $18 = (1 - ($17))|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = ($19>>>0)<($20>>>0);
     if ($21) {
      $22 = ((($19)) + 1|0);
      HEAP32[$3>>2] = $22;
      $23 = HEAP8[$19>>0]|0;
      $24 = $23&255;
      $$0 = $24;$$0113 = $18;
      break L13;
     } else {
      $25 = (___shgetc($0)|0);
      $$0 = $25;$$0113 = $18;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $12;$$0113 = 1;
    }
    }
   } while(0);
   $$0107127 = 0;$$1128 = $$0;
   while(1) {
    $26 = $$1128 | 32;
    $27 = (22510 + ($$0107127)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($26|0)==($29|0);
    if (!($30)) {
     $$0107$lcssa = $$0107127;$$1$lcssa = $$1128;
     break;
    }
    $31 = ($$0107127>>>0)<(7);
    do {
     if ($31) {
      $32 = HEAP32[$3>>2]|0;
      $33 = HEAP32[$4>>2]|0;
      $34 = ($32>>>0)<($33>>>0);
      if ($34) {
       $35 = ((($32)) + 1|0);
       HEAP32[$3>>2] = $35;
       $36 = HEAP8[$32>>0]|0;
       $37 = $36&255;
       $$2 = $37;
       break;
      } else {
       $38 = (___shgetc($0)|0);
       $$2 = $38;
       break;
      }
     } else {
      $$2 = $$1128;
     }
    } while(0);
    $39 = (($$0107127) + 1)|0;
    $40 = ($39>>>0)<(8);
    if ($40) {
     $$0107127 = $39;$$1128 = $$2;
    } else {
     $$0107$lcssa = $39;$$1$lcssa = $$2;
     break;
    }
   }
   L29: do {
    switch ($$0107$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $41 = ($$0107$lcssa>>>0)>(3);
     $42 = ($2|0)!=(0);
     $or$cond5 = $42 & $41;
     if ($or$cond5) {
      $43 = ($$0107$lcssa|0)==(8);
      if ($43) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $56 = ($$0107$lcssa|0)==(0);
     L34: do {
      if ($56) {
       $$2109125 = 0;$$3126 = $$1$lcssa;
       while(1) {
        $57 = $$3126 | 32;
        $58 = (22519 + ($$2109125)|0);
        $59 = HEAP8[$58>>0]|0;
        $60 = $59 << 24 >> 24;
        $61 = ($57|0)==($60|0);
        if (!($61)) {
         $$3110 = $$2109125;$$5 = $$3126;
         break L34;
        }
        $62 = ($$2109125>>>0)<(2);
        do {
         if ($62) {
          $63 = HEAP32[$3>>2]|0;
          $64 = HEAP32[$4>>2]|0;
          $65 = ($63>>>0)<($64>>>0);
          if ($65) {
           $66 = ((($63)) + 1|0);
           HEAP32[$3>>2] = $66;
           $67 = HEAP8[$63>>0]|0;
           $68 = $67&255;
           $$4 = $68;
           break;
          } else {
           $69 = (___shgetc($0)|0);
           $$4 = $69;
           break;
          }
         } else {
          $$4 = $$3126;
         }
        } while(0);
        $70 = (($$2109125) + 1)|0;
        $71 = ($70>>>0)<(3);
        if ($71) {
         $$2109125 = $70;$$3126 = $$4;
        } else {
         $$3110 = $70;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3110 = $$0107$lcssa;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3110|0) {
     case 3:  {
      $72 = HEAP32[$3>>2]|0;
      $73 = HEAP32[$4>>2]|0;
      $74 = ($72>>>0)<($73>>>0);
      if ($74) {
       $75 = ((($72)) + 1|0);
       HEAP32[$3>>2] = $75;
       $76 = HEAP8[$72>>0]|0;
       $77 = $76&255;
       $79 = $77;
      } else {
       $78 = (___shgetc($0)|0);
       $79 = $78;
      }
      $80 = ($79|0)==(40);
      if ($80) {
       $$4111 = 1;
      } else {
       $81 = HEAP32[$4>>2]|0;
       $82 = ($81|0)==(0|0);
       if ($82) {
        $$0114 = nan;
        break L4;
       }
       $83 = HEAP32[$3>>2]|0;
       $84 = ((($83)) + -1|0);
       HEAP32[$3>>2] = $84;
       $$0114 = nan;
       break L4;
      }
      while(1) {
       $85 = HEAP32[$3>>2]|0;
       $86 = HEAP32[$4>>2]|0;
       $87 = ($85>>>0)<($86>>>0);
       if ($87) {
        $88 = ((($85)) + 1|0);
        HEAP32[$3>>2] = $88;
        $89 = HEAP8[$85>>0]|0;
        $90 = $89&255;
        $93 = $90;
       } else {
        $91 = (___shgetc($0)|0);
        $93 = $91;
       }
       $92 = (($93) + -48)|0;
       $94 = ($92>>>0)<(10);
       $95 = (($93) + -65)|0;
       $96 = ($95>>>0)<(26);
       $or$cond = $94 | $96;
       if (!($or$cond)) {
        $97 = (($93) + -97)|0;
        $98 = ($97>>>0)<(26);
        $99 = ($93|0)==(95);
        $or$cond7 = $99 | $98;
        if (!($or$cond7)) {
         break;
        }
       }
       $111 = (($$4111) + 1)|0;
       $$4111 = $111;
      }
      $100 = ($93|0)==(41);
      if ($100) {
       $$0114 = nan;
       break L4;
      }
      $101 = HEAP32[$4>>2]|0;
      $102 = ($101|0)==(0|0);
      if (!($102)) {
       $103 = HEAP32[$3>>2]|0;
       $104 = ((($103)) + -1|0);
       HEAP32[$3>>2] = $104;
      }
      if (!($42)) {
       $106 = (___errno_location()|0);
       HEAP32[$106>>2] = 22;
       ___shlim($0,0);
       $$0114 = 0.0;
       break L4;
      }
      $105 = ($$4111|0)==(0);
      if ($105) {
       $$0114 = nan;
       break L4;
      } else {
       $$in = $$4111;
      }
      while(1) {
       $107 = (($$in) + -1)|0;
       if (!($102)) {
        $108 = HEAP32[$3>>2]|0;
        $109 = ((($108)) + -1|0);
        HEAP32[$3>>2] = $109;
       }
       $110 = ($107|0)==(0);
       if ($110) {
        $$0114 = nan;
        break L4;
       } else {
        $$in = $107;
       }
      }
      break;
     }
     case 0:  {
      $117 = ($$5|0)==(48);
      if ($117) {
       $118 = HEAP32[$3>>2]|0;
       $119 = HEAP32[$4>>2]|0;
       $120 = ($118>>>0)<($119>>>0);
       if ($120) {
        $121 = ((($118)) + 1|0);
        HEAP32[$3>>2] = $121;
        $122 = HEAP8[$118>>0]|0;
        $123 = $122&255;
        $126 = $123;
       } else {
        $124 = (___shgetc($0)|0);
        $126 = $124;
       }
       $125 = $126 | 32;
       $127 = ($125|0)==(120);
       if ($127) {
        $128 = (+_hexfloat($0,$$0106$ph,$$0105$ph,$$0113,$2));
        $$0114 = $128;
        break L4;
       }
       $129 = HEAP32[$4>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$6 = 48;
       } else {
        $131 = HEAP32[$3>>2]|0;
        $132 = ((($131)) + -1|0);
        HEAP32[$3>>2] = $132;
        $$6 = 48;
       }
      } else {
       $$6 = $$5;
      }
      $133 = (+_decfloat($0,$$6,$$0106$ph,$$0105$ph,$$0113,$2));
      $$0114 = $133;
      break L4;
      break;
     }
     default: {
      $112 = HEAP32[$4>>2]|0;
      $113 = ($112|0)==(0|0);
      if (!($113)) {
       $114 = HEAP32[$3>>2]|0;
       $115 = ((($114)) + -1|0);
       HEAP32[$3>>2] = $115;
      }
      $116 = (___errno_location()|0);
      HEAP32[$116>>2] = 22;
      ___shlim($0,0);
      $$0114 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $44 = HEAP32[$4>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = HEAP32[$3>>2]|0;
     $47 = ((($46)) + -1|0);
     HEAP32[$3>>2] = $47;
    }
    $48 = ($2|0)!=(0);
    $49 = ($$0107$lcssa>>>0)>(3);
    $or$cond9 = $48 & $49;
    if ($or$cond9) {
     $$1108 = $$0107$lcssa;
     while(1) {
      if (!($45)) {
       $50 = HEAP32[$3>>2]|0;
       $51 = ((($50)) + -1|0);
       HEAP32[$3>>2] = $51;
      }
      $52 = (($$1108) + -1)|0;
      $$old8 = ($52>>>0)>(3);
      if ($$old8) {
       $$1108 = $52;
      } else {
       break;
      }
     }
    }
   }
   $53 = (+($$0113|0));
   $54 = $53 * inf;
   $55 = $54;
   $$0114 = $55;
  }
 } while(0);
 return (+$$0114);
}
function _hexfloat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0148$ = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0155$ = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0;
 var $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5 = 0.0, $$5164 = 0, $$6 = 0, $$pn = 0.0;
 var $$pre = 0.0, $$pre$phiZ2D = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0.0;
 var $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond168 = 0, $or$cond206 = 0, $or$cond4 = 0;
 var $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $10;
  $11 = HEAP8[$6>>0]|0;
  $12 = $11&255;
  $$0 = $12;$$0142 = 0;
 } else {
  $13 = (___shgetc($0)|0);
  $$0 = $13;$$0142 = 0;
 }
 L4: while(1) {
  switch ($$0|0) {
  case 46:  {
   label = 8;
   break L4;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0146 = 0;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$0;$$2144 = $$0142;$100 = 0;$52 = 0;$54 = 0;$98 = 0;
   break L4;
  }
  }
  $14 = HEAP32[$5>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $$0 = $19;$$0142 = 1;
   continue;
  } else {
   $20 = (___shgetc($0)|0);
   $$0 = $20;$$0142 = 1;
   continue;
  }
 }
 if ((label|0) == 8) {
  $21 = HEAP32[$5>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $24 = ((($21)) + 1|0);
   HEAP32[$5>>2] = $24;
   $25 = HEAP8[$21>>0]|0;
   $26 = $25&255;
   $$1$ph = $26;
  } else {
   $27 = (___shgetc($0)|0);
   $$1$ph = $27;
  }
  $28 = ($$1$ph|0)==(48);
  if ($28) {
   $36 = 0;$37 = 0;
   while(1) {
    $29 = HEAP32[$5>>2]|0;
    $30 = HEAP32[$7>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$5>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $40 = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $40 = $35;
    }
    $38 = (_i64Add(($36|0),($37|0),-1,-1)|0);
    $39 = tempRet0;
    $41 = ($40|0)==(48);
    if ($41) {
     $36 = $38;$37 = $39;
    } else {
     $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $40;$$2144 = 1;$100 = $39;$52 = 0;$54 = 0;$98 = $38;
     break;
    }
   }
  } else {
   $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$1$ph;$$2144 = $$0142;$100 = 0;$52 = 0;$54 = 0;$98 = 0;
  }
 }
 while(1) {
  $42 = (($$2) + -48)|0;
  $43 = ($42>>>0)<(10);
  $44 = ($$2|0)==(46);
  if (!($43)) {
   $45 = $$2 | 32;
   $46 = (($45) + -97)|0;
   $47 = ($46>>>0)<(6);
   $or$cond6 = $44 | $47;
   if (!($or$cond6)) {
    $$2$lcssa = $$2;
    break;
   }
  }
  if ($44) {
   $48 = ($$0146|0)==(0);
   if ($48) {
    $$1147 = 1;$$2150 = $$0148;$$2154 = $$0152;$$2157 = $$0155;$$2161 = $$0159;$$3145 = $$2144;$214 = $54;$215 = $52;$216 = $54;$217 = $52;
   } else {
    $$2$lcssa = 46;
    break;
   }
  } else {
   $49 = ($$2|0)>(57);
   $50 = $$2 | 32;
   $51 = (($50) + -87)|0;
   $$0133 = $49 ? $51 : $42;
   $53 = ($52|0)<(0);
   $55 = ($54>>>0)<(8);
   $56 = ($52|0)==(0);
   $57 = $56 & $55;
   $58 = $53 | $57;
   do {
    if ($58) {
     $59 = $$0159 << 4;
     $60 = (($$0133) + ($59))|0;
     $$1149 = $$0148;$$1153 = $$0152;$$1156 = $$0155;$$1160 = $60;
    } else {
     $61 = ($52|0)<(0);
     $62 = ($54>>>0)<(14);
     $63 = ($52|0)==(0);
     $64 = $63 & $62;
     $65 = $61 | $64;
     if ($65) {
      $66 = (+($$0133|0));
      $67 = $$0152 * 0.0625;
      $68 = $67 * $66;
      $69 = $$0155 + $68;
      $$1149 = $$0148;$$1153 = $67;$$1156 = $69;$$1160 = $$0159;
      break;
     } else {
      $70 = ($$0133|0)==(0);
      $71 = ($$0148|0)!=(0);
      $or$cond = $71 | $70;
      $72 = $$0152 * 0.5;
      $73 = $$0155 + $72;
      $$0155$ = $or$cond ? $$0155 : $73;
      $$0148$ = $or$cond ? $$0148 : 1;
      $$1149 = $$0148$;$$1153 = $$0152;$$1156 = $$0155$;$$1160 = $$0159;
      break;
     }
    }
   } while(0);
   $74 = (_i64Add(($54|0),($52|0),1,0)|0);
   $75 = tempRet0;
   $$1147 = $$0146;$$2150 = $$1149;$$2154 = $$1153;$$2157 = $$1156;$$2161 = $$1160;$$3145 = 1;$214 = $98;$215 = $100;$216 = $74;$217 = $75;
  }
  $76 = HEAP32[$5>>2]|0;
  $77 = HEAP32[$7>>2]|0;
  $78 = ($76>>>0)<($77>>>0);
  if ($78) {
   $79 = ((($76)) + 1|0);
   HEAP32[$5>>2] = $79;
   $80 = HEAP8[$76>>0]|0;
   $81 = $80&255;
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $81;$$2144 = $$3145;$100 = $215;$52 = $217;$54 = $216;$98 = $214;
   continue;
  } else {
   $82 = (___shgetc($0)|0);
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $82;$$2144 = $$3145;$100 = $215;$52 = $217;$54 = $216;$98 = $214;
   continue;
  }
 }
 $83 = ($$2144|0)==(0);
 do {
  if ($83) {
   $84 = HEAP32[$7>>2]|0;
   $85 = ($84|0)!=(0|0);
   if ($85) {
    $86 = HEAP32[$5>>2]|0;
    $87 = ((($86)) + -1|0);
    HEAP32[$5>>2] = $87;
   }
   $88 = ($4|0)==(0);
   if ($88) {
    ___shlim($0,0);
   } else {
    if ($85) {
     $89 = HEAP32[$5>>2]|0;
     $90 = ((($89)) + -1|0);
     HEAP32[$5>>2] = $90;
    }
    $91 = ($$0146|0)==(0);
    $92 = ($84|0)==(0|0);
    $or$cond206 = $91 | $92;
    if (!($or$cond206)) {
     $93 = HEAP32[$5>>2]|0;
     $94 = ((($93)) + -1|0);
     HEAP32[$5>>2] = $94;
    }
   }
   $95 = (+($3|0));
   $96 = $95 * 0.0;
   $$0165 = $96;
  } else {
   $97 = ($$0146|0)==(0);
   $99 = $97 ? $54 : $98;
   $101 = $97 ? $52 : $100;
   $102 = ($52|0)<(0);
   $103 = ($54>>>0)<(8);
   $104 = ($52|0)==(0);
   $105 = $104 & $103;
   $106 = $102 | $105;
   if ($106) {
    $$3162183 = $$0159;$108 = $54;$109 = $52;
    while(1) {
     $107 = $$3162183 << 4;
     $110 = (_i64Add(($108|0),($109|0),1,0)|0);
     $111 = tempRet0;
     $112 = ($111|0)<(0);
     $113 = ($110>>>0)<(8);
     $114 = ($111|0)==(0);
     $115 = $114 & $113;
     $116 = $112 | $115;
     if ($116) {
      $$3162183 = $107;$108 = $110;$109 = $111;
     } else {
      $$3162$lcssa = $107;
      break;
     }
    }
   } else {
    $$3162$lcssa = $$0159;
   }
   $117 = $$2$lcssa | 32;
   $118 = ($117|0)==(112);
   if ($118) {
    $119 = (_scanexp($0,$4)|0);
    $120 = tempRet0;
    $121 = ($119|0)==(0);
    $122 = ($120|0)==(-2147483648);
    $123 = $121 & $122;
    if ($123) {
     $124 = ($4|0)==(0);
     if ($124) {
      ___shlim($0,0);
      $$0165 = 0.0;
      break;
     }
     $125 = HEAP32[$7>>2]|0;
     $126 = ($125|0)==(0|0);
     if ($126) {
      $137 = 0;$138 = 0;
     } else {
      $127 = HEAP32[$5>>2]|0;
      $128 = ((($127)) + -1|0);
      HEAP32[$5>>2] = $128;
      $137 = 0;$138 = 0;
     }
    } else {
     $137 = $119;$138 = $120;
    }
   } else {
    $129 = HEAP32[$7>>2]|0;
    $130 = ($129|0)==(0|0);
    if ($130) {
     $137 = 0;$138 = 0;
    } else {
     $131 = HEAP32[$5>>2]|0;
     $132 = ((($131)) + -1|0);
     HEAP32[$5>>2] = $132;
     $137 = 0;$138 = 0;
    }
   }
   $133 = (_bitshift64Shl(($99|0),($101|0),2)|0);
   $134 = tempRet0;
   $135 = (_i64Add(($133|0),($134|0),-32,-1)|0);
   $136 = tempRet0;
   $139 = (_i64Add(($135|0),($136|0),($137|0),($138|0))|0);
   $140 = tempRet0;
   $141 = ($$3162$lcssa|0)==(0);
   if ($141) {
    $142 = (+($3|0));
    $143 = $142 * 0.0;
    $$0165 = $143;
    break;
   }
   $144 = (0 - ($2))|0;
   $145 = ($144|0)<(0);
   $146 = $145 << 31 >> 31;
   $147 = ($140|0)>($146|0);
   $148 = ($139>>>0)>($144>>>0);
   $149 = ($140|0)==($146|0);
   $150 = $149 & $148;
   $151 = $147 | $150;
   if ($151) {
    $152 = (___errno_location()|0);
    HEAP32[$152>>2] = 34;
    $153 = (+($3|0));
    $154 = $153 * 1.7976931348623157E+308;
    $155 = $154 * 1.7976931348623157E+308;
    $$0165 = $155;
    break;
   }
   $156 = (($2) + -106)|0;
   $157 = ($156|0)<(0);
   $158 = $157 << 31 >> 31;
   $159 = ($140|0)<($158|0);
   $160 = ($139>>>0)<($156>>>0);
   $161 = ($140|0)==($158|0);
   $162 = $161 & $160;
   $163 = $159 | $162;
   if ($163) {
    $165 = (___errno_location()|0);
    HEAP32[$165>>2] = 34;
    $166 = (+($3|0));
    $167 = $166 * 2.2250738585072014E-308;
    $168 = $167 * 2.2250738585072014E-308;
    $$0165 = $168;
    break;
   }
   $164 = ($$3162$lcssa|0)>(-1);
   if ($164) {
    $$3158179 = $$0155;$$4163178 = $$3162$lcssa;$173 = $139;$174 = $140;
    while(1) {
     $169 = !($$3158179 >= 0.5);
     $170 = $$4163178 << 1;
     $171 = $$3158179 + -1.0;
     $not$ = $169 ^ 1;
     $172 = $not$&1;
     $$5164 = $170 | $172;
     $$pn = $169 ? $$3158179 : $171;
     $$4 = $$3158179 + $$pn;
     $175 = (_i64Add(($173|0),($174|0),-1,-1)|0);
     $176 = tempRet0;
     $177 = ($$5164|0)>(-1);
     if ($177) {
      $$3158179 = $$4;$$4163178 = $$5164;$173 = $175;$174 = $176;
     } else {
      $$3158$lcssa = $$4;$$4163$lcssa = $$5164;$184 = $175;$185 = $176;
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155;$$4163$lcssa = $$3162$lcssa;$184 = $139;$185 = $140;
   }
   $178 = ($1|0)<(0);
   $179 = $178 << 31 >> 31;
   $180 = ($2|0)<(0);
   $181 = $180 << 31 >> 31;
   $182 = (_i64Subtract(32,0,($2|0),($181|0))|0);
   $183 = tempRet0;
   $186 = (_i64Add(($182|0),($183|0),($184|0),($185|0))|0);
   $187 = tempRet0;
   $188 = ($179|0)>($187|0);
   $189 = ($1>>>0)>($186>>>0);
   $190 = ($179|0)==($187|0);
   $191 = $190 & $189;
   $192 = $188 | $191;
   if ($192) {
    $193 = ($186|0)>(0);
    if ($193) {
     $$0166 = $186;
     label = 59;
    } else {
     $$0166170 = 0;$197 = 84;
     label = 61;
    }
   } else {
    $$0166 = $1;
    label = 59;
   }
   if ((label|0) == 59) {
    $194 = ($$0166|0)<(53);
    $195 = (84 - ($$0166))|0;
    if ($194) {
     $$0166170 = $$0166;$197 = $195;
     label = 61;
    } else {
     $$pre = (+($3|0));
     $$0151 = 0.0;$$0166169 = $$0166;$$pre$phiZ2D = $$pre;
    }
   }
   if ((label|0) == 61) {
    $196 = (+($3|0));
    $198 = (+_scalbn(1.0,$197));
    $199 = (+_copysignl($198,$196));
    $$0151 = $199;$$0166169 = $$0166170;$$pre$phiZ2D = $196;
   }
   $200 = ($$0166169|0)<(32);
   $201 = $$3158$lcssa != 0.0;
   $or$cond4 = $201 & $200;
   $202 = $$4163$lcssa & 1;
   $203 = ($202|0)==(0);
   $or$cond168 = $203 & $or$cond4;
   $204 = $or$cond168&1;
   $$6 = (($204) + ($$4163$lcssa))|0;
   $$5 = $or$cond168 ? 0.0 : $$3158$lcssa;
   $205 = (+($$6>>>0));
   $206 = $$pre$phiZ2D * $205;
   $207 = $$0151 + $206;
   $208 = $$pre$phiZ2D * $$5;
   $209 = $208 + $207;
   $210 = $209 - $$0151;
   $211 = $210 != 0.0;
   if (!($211)) {
    $212 = (___errno_location()|0);
    HEAP32[$212>>2] = 34;
   }
   $213 = (+_scalbnl($210,$184));
   $$0165 = $213;
  }
 } while(0);
 return (+$$0165);
}
function _decfloat($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$0345 = 0, $$$0350 = 0, $$$0385 = 0, $$$0401 = 0, $$$5355 = 0, $$$5390 = 0, $$0329 = 0, $$0332490 = 0, $$0333 = 0, $$0334 = 0, $$0336486 = 0, $$0340496 = 0, $$0341$lcssa = 0, $$0341463 = 0, $$0341464 = 0, $$0341465 = 0, $$0341513 = 0, $$0345$lcssa = 0, $$0345467 = 0;
 var $$0345468 = 0, $$0345469 = 0, $$0345512 = 0, $$0350$lcssa554 = 0, $$0350494 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365484 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa553 = 0, $$0385493 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401473 = 0, $$0401474 = 0, $$0401475 = 0, $$0401509 = 0;
 var $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph448 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph558 = 0, $$1394$lcssa = 0, $$1394511 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph449 = 0, $$2367 = 0.0;
 var $$2371$v = 0, $$2374 = 0, $$2387$ph447 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344503 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3375 = 0, $$3383 = 0, $$3399$lcssa = 0, $$3399510 = 0, $$3514 = 0, $$413 = 0, $$425 = 0, $$4349495 = 0;
 var $$4354 = 0, $$4354$ph = 0, $$4354$ph559 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph445 = 0, $$4400 = 0, $$4485 = 0, $$5 = 0, $$5$in = 0, $$5355488 = 0, $$5390487 = 0, $$6378$ph = 0, $$6489 = 0, $$9483 = 0, $$neg442 = 0, $$neg443 = 0, $$pre = 0, $$promoted = 0;
 var $$sink = 0, $$sink421$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0.0, $335 = 0.0, $336 = 0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0.0, $351 = 0.0;
 var $352 = 0.0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $exitcond = 0, $exitcond551 = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond11 = 0, $or$cond14 = 0, $or$cond415 = 0, $or$cond417 = 0, $or$cond419 = 0, $or$cond420 = 0, $or$cond422 = 0, $or$cond422$not = 0, $or$cond423 = 0, $or$cond426 = 0, $or$cond5 = 0, $sum = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $6 = sp;
 $sum = (($3) + ($2))|0;
 $7 = (0 - ($sum))|0;
 $8 = ((($0)) + 4|0);
 $9 = ((($0)) + 100|0);
 $$0329 = $1;$$0396 = 0;
 L1: while(1) {
  switch ($$0329|0) {
  case 46:  {
   label = 6;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0393 = 0;$$2 = $$0329;$$2398 = $$0396;$366 = 0;$367 = 0;
   break L1;
  }
  }
  $10 = HEAP32[$8>>2]|0;
  $11 = HEAP32[$9>>2]|0;
  $12 = ($10>>>0)<($11>>>0);
  if ($12) {
   $13 = ((($10)) + 1|0);
   HEAP32[$8>>2] = $13;
   $14 = HEAP8[$10>>0]|0;
   $15 = $14&255;
   $$0329 = $15;$$0396 = 1;
   continue;
  } else {
   $16 = (___shgetc($0)|0);
   $$0329 = $16;$$0396 = 1;
   continue;
  }
 }
 if ((label|0) == 6) {
  $17 = HEAP32[$8>>2]|0;
  $18 = HEAP32[$9>>2]|0;
  $19 = ($17>>>0)<($18>>>0);
  if ($19) {
   $20 = ((($17)) + 1|0);
   HEAP32[$8>>2] = $20;
   $21 = HEAP8[$17>>0]|0;
   $22 = $21&255;
   $$1330$ph = $22;
  } else {
   $23 = (___shgetc($0)|0);
   $$1330$ph = $23;
  }
  $24 = ($$1330$ph|0)==(48);
  if ($24) {
   $25 = 0;$26 = 0;
   while(1) {
    $27 = (_i64Add(($25|0),($26|0),-1,-1)|0);
    $28 = tempRet0;
    $29 = HEAP32[$8>>2]|0;
    $30 = HEAP32[$9>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$8>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $$1330$be = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $$1330$be = $35;
    }
    $36 = ($$1330$be|0)==(48);
    if ($36) {
     $25 = $27;$26 = $28;
    } else {
     $$0393 = 1;$$2 = $$1330$be;$$2398 = 1;$366 = $27;$367 = $28;
     break;
    }
   }
  } else {
   $$0393 = 1;$$2 = $$1330$ph;$$2398 = $$0396;$366 = 0;$367 = 0;
  }
 }
 HEAP32[$6>>2] = 0;
 $37 = (($$2) + -48)|0;
 $38 = ($37>>>0)<(10);
 $39 = ($$2|0)==(46);
 $40 = $39 | $38;
 L20: do {
  if ($40) {
   $41 = ((($6)) + 496|0);
   $$0341513 = 0;$$0345512 = 0;$$0401509 = 0;$$1394511 = $$0393;$$3399510 = $$2398;$$3514 = $$2;$368 = $39;$369 = $37;$370 = $366;$371 = $367;$44 = 0;$45 = 0;
   L22: while(1) {
    do {
     if ($368) {
      $cond = ($$1394511|0)==(0);
      if ($cond) {
       $$2343 = $$0341513;$$2347 = $$0345512;$$2395 = 1;$$2403 = $$0401509;$$4400 = $$3399510;$372 = $44;$373 = $45;$374 = $44;$375 = $45;
      } else {
       break L22;
      }
     } else {
      $43 = ($$0345512|0)<(125);
      $46 = (_i64Add(($44|0),($45|0),1,0)|0);
      $47 = tempRet0;
      $48 = ($$3514|0)!=(48);
      if (!($43)) {
       if (!($48)) {
        $$2343 = $$0341513;$$2347 = $$0345512;$$2395 = $$1394511;$$2403 = $$0401509;$$4400 = $$3399510;$372 = $370;$373 = $371;$374 = $46;$375 = $47;
        break;
       }
       $57 = HEAP32[$41>>2]|0;
       $58 = $57 | 1;
       HEAP32[$41>>2] = $58;
       $$2343 = $$0341513;$$2347 = $$0345512;$$2395 = $$1394511;$$2403 = $$0401509;$$4400 = $$3399510;$372 = $370;$373 = $371;$374 = $46;$375 = $47;
       break;
      }
      $$$0401 = $48 ? $46 : $$0401509;
      $49 = ($$0341513|0)==(0);
      $$pre = (($6) + ($$0345512<<2)|0);
      if ($49) {
       $$sink = $369;
      } else {
       $50 = HEAP32[$$pre>>2]|0;
       $51 = ($50*10)|0;
       $52 = (($$3514) + -48)|0;
       $53 = (($52) + ($51))|0;
       $$sink = $53;
      }
      HEAP32[$$pre>>2] = $$sink;
      $54 = (($$0341513) + 1)|0;
      $55 = ($54|0)==(9);
      $56 = $55&1;
      $$$0345 = (($56) + ($$0345512))|0;
      $$413 = $55 ? 0 : $54;
      $$2343 = $$413;$$2347 = $$$0345;$$2395 = $$1394511;$$2403 = $$$0401;$$4400 = 1;$372 = $370;$373 = $371;$374 = $46;$375 = $47;
     }
    } while(0);
    $59 = HEAP32[$8>>2]|0;
    $60 = HEAP32[$9>>2]|0;
    $61 = ($59>>>0)<($60>>>0);
    if ($61) {
     $62 = ((($59)) + 1|0);
     HEAP32[$8>>2] = $62;
     $63 = HEAP8[$59>>0]|0;
     $64 = $63&255;
     $$3$be = $64;
    } else {
     $65 = (___shgetc($0)|0);
     $$3$be = $65;
    }
    $66 = (($$3$be) + -48)|0;
    $67 = ($66>>>0)<(10);
    $68 = ($$3$be|0)==(46);
    $69 = $68 | $67;
    if ($69) {
     $$0341513 = $$2343;$$0345512 = $$2347;$$0401509 = $$2403;$$1394511 = $$2395;$$3399510 = $$4400;$$3514 = $$3$be;$368 = $68;$369 = $66;$370 = $372;$371 = $373;$44 = $374;$45 = $375;
    } else {
     $$0341$lcssa = $$2343;$$0345$lcssa = $$2347;$$0401$lcssa = $$2403;$$1394$lcssa = $$2395;$$3$lcssa = $$3$be;$$3399$lcssa = $$4400;$71 = $372;$72 = $374;$74 = $373;$75 = $375;
     label = 29;
     break L20;
    }
   }
   $42 = ($$3399510|0)!=(0);
   $$0341465 = $$0341513;$$0345469 = $$0345512;$$0401475 = $$0401509;$376 = $44;$377 = $45;$378 = $370;$379 = $371;$380 = $42;
   label = 37;
  } else {
   $$0341$lcssa = 0;$$0345$lcssa = 0;$$0401$lcssa = 0;$$1394$lcssa = $$0393;$$3$lcssa = $$2;$$3399$lcssa = $$2398;$71 = $366;$72 = 0;$74 = $367;$75 = 0;
   label = 29;
  }
 } while(0);
 do {
  if ((label|0) == 29) {
   $70 = ($$1394$lcssa|0)==(0);
   $73 = $70 ? $72 : $71;
   $76 = $70 ? $75 : $74;
   $77 = ($$3399$lcssa|0)!=(0);
   $78 = $$3$lcssa | 32;
   $79 = ($78|0)==(101);
   $or$cond415 = $77 & $79;
   if (!($or$cond415)) {
    $94 = ($$3$lcssa|0)>(-1);
    if ($94) {
     $$0341465 = $$0341$lcssa;$$0345469 = $$0345$lcssa;$$0401475 = $$0401$lcssa;$376 = $72;$377 = $75;$378 = $73;$379 = $76;$380 = $77;
     label = 37;
     break;
    } else {
     $$0341464 = $$0341$lcssa;$$0345468 = $$0345$lcssa;$$0401474 = $$0401$lcssa;$381 = $72;$382 = $75;$383 = $77;$384 = $73;$385 = $76;
     label = 39;
     break;
    }
   }
   $80 = (_scanexp($0,$5)|0);
   $81 = tempRet0;
   $82 = ($80|0)==(0);
   $83 = ($81|0)==(-2147483648);
   $84 = $82 & $83;
   if ($84) {
    $85 = ($5|0)==(0);
    if ($85) {
     ___shlim($0,0);
     $$1 = 0.0;
     break;
    }
    $86 = HEAP32[$9>>2]|0;
    $87 = ($86|0)==(0|0);
    if ($87) {
     $90 = 0;$91 = 0;
    } else {
     $88 = HEAP32[$8>>2]|0;
     $89 = ((($88)) + -1|0);
     HEAP32[$8>>2] = $89;
     $90 = 0;$91 = 0;
    }
   } else {
    $90 = $80;$91 = $81;
   }
   $92 = (_i64Add(($90|0),($91|0),($73|0),($76|0))|0);
   $93 = tempRet0;
   $$0341463 = $$0341$lcssa;$$0345467 = $$0345$lcssa;$$0401473 = $$0401$lcssa;$104 = $92;$106 = $72;$107 = $93;$109 = $75;
   label = 41;
  }
 } while(0);
 if ((label|0) == 37) {
  $95 = HEAP32[$9>>2]|0;
  $96 = ($95|0)==(0|0);
  if ($96) {
   $$0341464 = $$0341465;$$0345468 = $$0345469;$$0401474 = $$0401475;$381 = $376;$382 = $377;$383 = $380;$384 = $378;$385 = $379;
   label = 39;
  } else {
   $97 = HEAP32[$8>>2]|0;
   $98 = ((($97)) + -1|0);
   HEAP32[$8>>2] = $98;
   if ($380) {
    $$0341463 = $$0341465;$$0345467 = $$0345469;$$0401473 = $$0401475;$104 = $378;$106 = $376;$107 = $379;$109 = $377;
    label = 41;
   } else {
    label = 40;
   }
  }
 }
 if ((label|0) == 39) {
  if ($383) {
   $$0341463 = $$0341464;$$0345467 = $$0345468;$$0401473 = $$0401474;$104 = $384;$106 = $381;$107 = $385;$109 = $382;
   label = 41;
  } else {
   label = 40;
  }
 }
 do {
  if ((label|0) == 40) {
   $99 = (___errno_location()|0);
   HEAP32[$99>>2] = 22;
   ___shlim($0,0);
   $$1 = 0.0;
  }
  else if ((label|0) == 41) {
   $100 = HEAP32[$6>>2]|0;
   $101 = ($100|0)==(0);
   if ($101) {
    $102 = (+($4|0));
    $103 = $102 * 0.0;
    $$1 = $103;
    break;
   }
   $105 = ($104|0)==($106|0);
   $108 = ($107|0)==($109|0);
   $110 = $105 & $108;
   $111 = ($109|0)<(0);
   $112 = ($106>>>0)<(10);
   $113 = ($109|0)==(0);
   $114 = $113 & $112;
   $115 = $111 | $114;
   $or$cond = $115 & $110;
   if ($or$cond) {
    $116 = ($2|0)>(30);
    $117 = $100 >>> $2;
    $118 = ($117|0)==(0);
    $or$cond417 = $116 | $118;
    if ($or$cond417) {
     $119 = (+($4|0));
     $120 = (+($100>>>0));
     $121 = $119 * $120;
     $$1 = $121;
     break;
    }
   }
   $122 = (($3|0) / -2)&-1;
   $123 = ($122|0)<(0);
   $124 = $123 << 31 >> 31;
   $125 = ($107|0)>($124|0);
   $126 = ($104>>>0)>($122>>>0);
   $127 = ($107|0)==($124|0);
   $128 = $127 & $126;
   $129 = $125 | $128;
   if ($129) {
    $130 = (___errno_location()|0);
    HEAP32[$130>>2] = 34;
    $131 = (+($4|0));
    $132 = $131 * 1.7976931348623157E+308;
    $133 = $132 * 1.7976931348623157E+308;
    $$1 = $133;
    break;
   }
   $134 = (($3) + -106)|0;
   $135 = ($134|0)<(0);
   $136 = $135 << 31 >> 31;
   $137 = ($107|0)<($136|0);
   $138 = ($104>>>0)<($134>>>0);
   $139 = ($107|0)==($136|0);
   $140 = $139 & $138;
   $141 = $137 | $140;
   if ($141) {
    $142 = (___errno_location()|0);
    HEAP32[$142>>2] = 34;
    $143 = (+($4|0));
    $144 = $143 * 2.2250738585072014E-308;
    $145 = $144 * 2.2250738585072014E-308;
    $$1 = $145;
    break;
   }
   $146 = ($$0341463|0)==(0);
   if ($146) {
    $$3348 = $$0345467;
   } else {
    $147 = ($$0341463|0)<(9);
    if ($147) {
     $148 = (($6) + ($$0345467<<2)|0);
     $$promoted = HEAP32[$148>>2]|0;
     $$3344503 = $$0341463;$150 = $$promoted;
     while(1) {
      $149 = ($150*10)|0;
      $151 = (($$3344503) + 1)|0;
      $exitcond551 = ($151|0)==(9);
      if ($exitcond551) {
       break;
      } else {
       $$3344503 = $151;$150 = $149;
      }
     }
     HEAP32[$148>>2] = $149;
    }
    $152 = (($$0345467) + 1)|0;
    $$3348 = $152;
   }
   $153 = ($$0401473|0)<(9);
   if ($153) {
    $154 = ($$0401473|0)<=($104|0);
    $155 = ($104|0)<(18);
    $or$cond5 = $154 & $155;
    if ($or$cond5) {
     $156 = ($104|0)==(9);
     $157 = HEAP32[$6>>2]|0;
     if ($156) {
      $158 = (+($4|0));
      $159 = (+($157>>>0));
      $160 = $158 * $159;
      $$1 = $160;
      break;
     }
     $161 = ($104|0)<(9);
     if ($161) {
      $162 = (+($4|0));
      $163 = (+($157>>>0));
      $164 = $162 * $163;
      $165 = (8 - ($104))|0;
      $166 = (9976 + ($165<<2)|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = (+($167|0));
      $169 = $164 / $168;
      $$1 = $169;
      break;
     }
     $$neg442 = Math_imul($104, -3)|0;
     $$neg443 = (($2) + 27)|0;
     $170 = (($$neg443) + ($$neg442))|0;
     $171 = ($170|0)>(30);
     $172 = $157 >>> $170;
     $173 = ($172|0)==(0);
     $or$cond419 = $171 | $173;
     if ($or$cond419) {
      $174 = (($104) + -10)|0;
      $175 = (9976 + ($174<<2)|0);
      $176 = (+($4|0));
      $177 = (+($157>>>0));
      $178 = $176 * $177;
      $179 = HEAP32[$175>>2]|0;
      $180 = (+($179|0));
      $181 = $178 * $180;
      $$1 = $181;
      break;
     }
    }
   }
   $182 = (($104|0) % 9)&-1;
   $183 = ($182|0)==(0);
   if ($183) {
    $$0380$ph = 0;$$1373$ph448 = $$3348;$$2352$ph449 = 0;$$2387$ph447 = $104;
   } else {
    $184 = ($104|0)>(-1);
    $185 = (($182) + 9)|0;
    $186 = $184 ? $182 : $185;
    $187 = (8 - ($186))|0;
    $188 = (9976 + ($187<<2)|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = ($$3348|0)==(0);
    if ($190) {
     $$0350$lcssa554 = 0;$$0372 = 0;$$0385$lcssa553 = $104;
    } else {
     $191 = (1000000000 / ($189|0))&-1;
     $$0340496 = 0;$$0350494 = 0;$$0385493 = $104;$$4349495 = 0;
     while(1) {
      $192 = (($6) + ($$4349495<<2)|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = (($193>>>0) % ($189>>>0))&-1;
      $195 = (($193>>>0) / ($189>>>0))&-1;
      $196 = (($195) + ($$0340496))|0;
      HEAP32[$192>>2] = $196;
      $197 = Math_imul($191, $194)|0;
      $198 = ($$4349495|0)==($$0350494|0);
      $199 = ($196|0)==(0);
      $or$cond420 = $198 & $199;
      $200 = (($$0350494) + 1)|0;
      $201 = $200 & 127;
      $202 = (($$0385493) + -9)|0;
      $$$0385 = $or$cond420 ? $202 : $$0385493;
      $$$0350 = $or$cond420 ? $201 : $$0350494;
      $203 = (($$4349495) + 1)|0;
      $204 = ($203|0)==($$3348|0);
      if ($204) {
       break;
      } else {
       $$0340496 = $197;$$0350494 = $$$0350;$$0385493 = $$$0385;$$4349495 = $203;
      }
     }
     $205 = ($197|0)==(0);
     if ($205) {
      $$0350$lcssa554 = $$$0350;$$0372 = $$3348;$$0385$lcssa553 = $$$0385;
     } else {
      $206 = (($6) + ($$3348<<2)|0);
      $207 = (($$3348) + 1)|0;
      HEAP32[$206>>2] = $197;
      $$0350$lcssa554 = $$$0350;$$0372 = $207;$$0385$lcssa553 = $$$0385;
     }
    }
    $208 = (9 - ($186))|0;
    $209 = (($208) + ($$0385$lcssa553))|0;
    $$0380$ph = 0;$$1373$ph448 = $$0372;$$2352$ph449 = $$0350$lcssa554;$$2387$ph447 = $209;
   }
   L101: while(1) {
    $210 = ($$2387$ph447|0)<(18);
    $211 = ($$2387$ph447|0)==(18);
    $212 = (($6) + ($$2352$ph449<<2)|0);
    $$0380 = $$0380$ph;$$1373 = $$1373$ph448;
    while(1) {
     if (!($210)) {
      if (!($211)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph449;$$4389$ph445 = $$2387$ph447;$$6378$ph = $$1373;
       break L101;
      }
      $213 = HEAP32[$212>>2]|0;
      $214 = ($213>>>0)<(9007199);
      if (!($214)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph449;$$4389$ph445 = 18;$$6378$ph = $$1373;
       break L101;
      }
     }
     $215 = (($$1373) + 127)|0;
     $$0334 = 0;$$2374 = $$1373;$$5$in = $215;
     while(1) {
      $$5 = $$5$in & 127;
      $216 = (($6) + ($$5<<2)|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = (_bitshift64Shl(($217|0),0,29)|0);
      $219 = tempRet0;
      $220 = (_i64Add(($218|0),($219|0),($$0334|0),0)|0);
      $221 = tempRet0;
      $222 = ($221>>>0)>(0);
      $223 = ($220>>>0)>(1000000000);
      $224 = ($221|0)==(0);
      $225 = $224 & $223;
      $226 = $222 | $225;
      if ($226) {
       $227 = (___udivdi3(($220|0),($221|0),1000000000,0)|0);
       $228 = tempRet0;
       $229 = (___uremdi3(($220|0),($221|0),1000000000,0)|0);
       $230 = tempRet0;
       $$1335 = $227;$$sink421$off0 = $229;
      } else {
       $$1335 = 0;$$sink421$off0 = $220;
      }
      HEAP32[$216>>2] = $$sink421$off0;
      $231 = (($$2374) + 127)|0;
      $232 = $231 & 127;
      $233 = ($$5|0)!=($232|0);
      $234 = ($$5|0)==($$2352$ph449|0);
      $or$cond422 = $233 | $234;
      $or$cond422$not = $or$cond422 ^ 1;
      $235 = ($$sink421$off0|0)==(0);
      $or$cond423 = $235 & $or$cond422$not;
      $$3375 = $or$cond423 ? $$5 : $$2374;
      $236 = (($$5) + -1)|0;
      if ($234) {
       break;
      } else {
       $$0334 = $$1335;$$2374 = $$3375;$$5$in = $236;
      }
     }
     $237 = (($$0380) + -29)|0;
     $238 = ($$1335|0)==(0);
     if ($238) {
      $$0380 = $237;$$1373 = $$3375;
     } else {
      break;
     }
    }
    $239 = (($$2387$ph447) + 9)|0;
    $240 = (($$2352$ph449) + 127)|0;
    $241 = $240 & 127;
    $242 = ($241|0)==($$3375|0);
    $243 = (($$3375) + 127)|0;
    $244 = $243 & 127;
    $245 = (($$3375) + 126)|0;
    $246 = $245 & 127;
    $247 = (($6) + ($246<<2)|0);
    if ($242) {
     $248 = (($6) + ($244<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = HEAP32[$247>>2]|0;
     $251 = $250 | $249;
     HEAP32[$247>>2] = $251;
     $$4376 = $244;
    } else {
     $$4376 = $$3375;
    }
    $252 = (($6) + ($241<<2)|0);
    HEAP32[$252>>2] = $$1335;
    $$0380$ph = $237;$$1373$ph448 = $$4376;$$2352$ph449 = $241;$$2387$ph447 = $239;
   }
   L119: while(1) {
    $289 = (($$6378$ph) + 1)|0;
    $286 = $289 & 127;
    $290 = (($$6378$ph) + 127)|0;
    $291 = $290 & 127;
    $292 = (($6) + ($291<<2)|0);
    $$1381$ph558 = $$1381$ph;$$4354$ph559 = $$4354$ph;$$4389$ph = $$4389$ph445;
    while(1) {
     $265 = ($$4389$ph|0)==(18);
     $293 = ($$4389$ph|0)>(27);
     $$425 = $293 ? 9 : 1;
     $$1381 = $$1381$ph558;$$4354 = $$4354$ph559;
     while(1) {
      $$0336486 = 0;
      while(1) {
       $253 = (($$0336486) + ($$4354))|0;
       $254 = $253 & 127;
       $255 = ($254|0)==($$6378$ph|0);
       if ($255) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $256 = (($6) + ($254<<2)|0);
       $257 = HEAP32[$256>>2]|0;
       $258 = (10008 + ($$0336486<<2)|0);
       $259 = HEAP32[$258>>2]|0;
       $260 = ($257>>>0)<($259>>>0);
       if ($260) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $261 = ($257>>>0)>($259>>>0);
       if ($261) {
        break;
       }
       $262 = (($$0336486) + 1)|0;
       $263 = ($262|0)<(2);
       if ($263) {
        $$0336486 = $262;
       } else {
        $$1337 = $262;
        label = 88;
        break;
       }
      }
      if ((label|0) == 88) {
       label = 0;
       $264 = ($$1337|0)==(2);
       $or$cond11 = $265 & $264;
       if ($or$cond11) {
        $$0365484 = 0.0;$$4485 = 0;$$9483 = $$6378$ph;
        break L119;
       }
      }
      $266 = (($$425) + ($$1381))|0;
      $267 = ($$4354|0)==($$6378$ph|0);
      if ($267) {
       $$1381 = $266;$$4354 = $$6378$ph;
      } else {
       break;
      }
     }
     $268 = 1 << $$425;
     $269 = (($268) + -1)|0;
     $270 = 1000000000 >>> $$425;
     $$0332490 = 0;$$5355488 = $$4354;$$5390487 = $$4389$ph;$$6489 = $$4354;
     while(1) {
      $271 = (($6) + ($$6489<<2)|0);
      $272 = HEAP32[$271>>2]|0;
      $273 = $272 & $269;
      $274 = $272 >>> $$425;
      $275 = (($274) + ($$0332490))|0;
      HEAP32[$271>>2] = $275;
      $276 = Math_imul($273, $270)|0;
      $277 = ($$6489|0)==($$5355488|0);
      $278 = ($275|0)==(0);
      $or$cond426 = $277 & $278;
      $279 = (($$5355488) + 1)|0;
      $280 = $279 & 127;
      $281 = (($$5390487) + -9)|0;
      $$$5390 = $or$cond426 ? $281 : $$5390487;
      $$$5355 = $or$cond426 ? $280 : $$5355488;
      $282 = (($$6489) + 1)|0;
      $283 = $282 & 127;
      $284 = ($283|0)==($$6378$ph|0);
      if ($284) {
       break;
      } else {
       $$0332490 = $276;$$5355488 = $$$5355;$$5390487 = $$$5390;$$6489 = $283;
      }
     }
     $285 = ($276|0)==(0);
     if ($285) {
      $$1381$ph558 = $266;$$4354$ph559 = $$$5355;$$4389$ph = $$$5390;
      continue;
     }
     $287 = ($286|0)==($$$5355|0);
     if (!($287)) {
      break;
     }
     $294 = HEAP32[$292>>2]|0;
     $295 = $294 | 1;
     HEAP32[$292>>2] = $295;
     $$1381$ph558 = $266;$$4354$ph559 = $$$5355;$$4389$ph = $$$5390;
    }
    $288 = (($6) + ($$6378$ph<<2)|0);
    HEAP32[$288>>2] = $276;
    $$1381$ph = $266;$$4354$ph = $$$5355;$$4389$ph445 = $$$5390;$$6378$ph = $286;
   }
   while(1) {
    $296 = (($$4485) + ($$4354))|0;
    $297 = $296 & 127;
    $298 = ($297|0)==($$9483|0);
    $299 = (($$9483) + 1)|0;
    $300 = $299 & 127;
    if ($298) {
     $301 = (($300) + -1)|0;
     $302 = (($6) + ($301<<2)|0);
     HEAP32[$302>>2] = 0;
     $$10 = $300;
    } else {
     $$10 = $$9483;
    }
    $303 = $$0365484 * 1.0E+9;
    $304 = (($6) + ($297<<2)|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = (+($305>>>0));
    $307 = $303 + $306;
    $308 = (($$4485) + 1)|0;
    $exitcond = ($308|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $$0365484 = $307;$$4485 = $308;$$9483 = $$10;
    }
   }
   $309 = (+($4|0));
   $310 = $309 * $307;
   $311 = (($$1381) + 53)|0;
   $312 = (($311) - ($3))|0;
   $313 = ($312|0)<($2|0);
   $314 = ($312|0)>(0);
   $$ = $314 ? $312 : 0;
   $$0333 = $313 ? $$ : $2;
   $315 = ($$0333|0)<(53);
   if ($315) {
    $316 = (105 - ($$0333))|0;
    $317 = (+_scalbn(1.0,$316));
    $318 = (+_copysignl($317,$310));
    $319 = (53 - ($$0333))|0;
    $320 = (+_scalbn(1.0,$319));
    $321 = (+_fmodl($310,$320));
    $322 = $310 - $321;
    $323 = $318 + $322;
    $$0360 = $318;$$0361 = $321;$$1366 = $323;
   } else {
    $$0360 = 0.0;$$0361 = 0.0;$$1366 = $310;
   }
   $324 = (($$4354) + 2)|0;
   $325 = $324 & 127;
   $326 = ($325|0)==($$10|0);
   if ($326) {
    $$3364 = $$0361;
   } else {
    $327 = (($6) + ($325<<2)|0);
    $328 = HEAP32[$327>>2]|0;
    $329 = ($328>>>0)<(500000000);
    do {
     if ($329) {
      $330 = ($328|0)==(0);
      if ($330) {
       $331 = (($$4354) + 3)|0;
       $332 = $331 & 127;
       $333 = ($332|0)==($$10|0);
       if ($333) {
        $$1362 = $$0361;
        break;
       }
      }
      $334 = $309 * 0.25;
      $335 = $334 + $$0361;
      $$1362 = $335;
     } else {
      $336 = ($328|0)==(500000000);
      if (!($336)) {
       $337 = $309 * 0.75;
       $338 = $337 + $$0361;
       $$1362 = $338;
       break;
      }
      $339 = (($$4354) + 3)|0;
      $340 = $339 & 127;
      $341 = ($340|0)==($$10|0);
      if ($341) {
       $342 = $309 * 0.5;
       $343 = $342 + $$0361;
       $$1362 = $343;
       break;
      } else {
       $344 = $309 * 0.75;
       $345 = $344 + $$0361;
       $$1362 = $345;
       break;
      }
     }
    } while(0);
    $346 = (53 - ($$0333))|0;
    $347 = ($346|0)>(1);
    if ($347) {
     $348 = (+_fmodl($$1362,1.0));
     $349 = $348 != 0.0;
     if ($349) {
      $$3364 = $$1362;
     } else {
      $350 = $$1362 + 1.0;
      $$3364 = $350;
     }
    } else {
     $$3364 = $$1362;
    }
   }
   $351 = $$1366 + $$3364;
   $352 = $351 - $$0360;
   $353 = $311 & 2147483647;
   $354 = (-2 - ($sum))|0;
   $355 = ($353|0)>($354|0);
   do {
    if ($355) {
     $356 = (+Math_abs((+$352)));
     $357 = !($356 >= 9007199254740992.0);
     $358 = $352 * 0.5;
     $not$ = $357 ^ 1;
     $359 = $not$&1;
     $$3383 = (($359) + ($$1381))|0;
     $$2367 = $357 ? $352 : $358;
     $360 = (($$3383) + 50)|0;
     $361 = ($360|0)>($7|0);
     if (!($361)) {
      $362 = ($$0333|0)!=($312|0);
      $narrow = $362 | $357;
      $$2371$v = $313 & $narrow;
      $363 = $$3364 != 0.0;
      $or$cond14 = $363 & $$2371$v;
      if (!($or$cond14)) {
       $$3368 = $$2367;$$4384 = $$3383;
       break;
      }
     }
     $364 = (___errno_location()|0);
     HEAP32[$364>>2] = 34;
     $$3368 = $$2367;$$4384 = $$3383;
    } else {
     $$3368 = $352;$$4384 = $$1381;
    }
   } while(0);
   $365 = (+_scalbnl($$3368,$$4384));
   $$1 = $365;
  }
 } while(0);
 STACKTOP = sp;return (+$$1);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04861 = 0, $$049 = 0, $$1$be = 0, $$160 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $$lcssa = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 switch ($11|0) {
 case 43: case 45:  {
  $12 = ($11|0)==(45);
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $$0 = $13;$$049 = $22;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    $$0 = $13;$$049 = $22;
   }
  } else {
   $$0 = $13;$$049 = $22;
  }
  break;
 }
 default: {
  $$0 = 0;$$049 = $11;
 }
 }
 $29 = (($$049) + -48)|0;
 $30 = ($29>>>0)>(9);
 if ($30) {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $100 = -2147483648;$101 = 0;
  } else {
   $33 = HEAP32[$2>>2]|0;
   $34 = ((($33)) + -1|0);
   HEAP32[$2>>2] = $34;
   $100 = -2147483648;$101 = 0;
  }
 } else {
  $$04861 = 0;$$160 = $$049;
  while(1) {
   $35 = ($$04861*10)|0;
   $36 = (($$160) + -48)|0;
   $37 = (($36) + ($35))|0;
   $38 = HEAP32[$2>>2]|0;
   $39 = HEAP32[$4>>2]|0;
   $40 = ($38>>>0)<($39>>>0);
   if ($40) {
    $41 = ((($38)) + 1|0);
    HEAP32[$2>>2] = $41;
    $42 = HEAP8[$38>>0]|0;
    $43 = $42&255;
    $$1$be = $43;
   } else {
    $44 = (___shgetc($0)|0);
    $$1$be = $44;
   }
   $45 = (($$1$be) + -48)|0;
   $46 = ($45>>>0)<(10);
   $47 = ($37|0)<(214748364);
   $48 = $46 & $47;
   if ($48) {
    $$04861 = $37;$$160 = $$1$be;
   } else {
    break;
   }
  }
  $49 = ($37|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = (($$1$be) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   $$254 = $$1$be;$56 = $37;$57 = $50;
   while(1) {
    $58 = (___muldi3(($56|0),($57|0),10,0)|0);
    $59 = tempRet0;
    $60 = ($$254|0)<(0);
    $61 = $60 << 31 >> 31;
    $62 = (_i64Add(($$254|0),($61|0),-48,-1)|0);
    $63 = tempRet0;
    $64 = (_i64Add(($62|0),($63|0),($58|0),($59|0))|0);
    $65 = tempRet0;
    $66 = HEAP32[$2>>2]|0;
    $67 = HEAP32[$4>>2]|0;
    $68 = ($66>>>0)<($67>>>0);
    if ($68) {
     $69 = ((($66)) + 1|0);
     HEAP32[$2>>2] = $69;
     $70 = HEAP8[$66>>0]|0;
     $71 = $70&255;
     $$2$be = $71;
    } else {
     $72 = (___shgetc($0)|0);
     $$2$be = $72;
    }
    $73 = (($$2$be) + -48)|0;
    $74 = ($73>>>0)<(10);
    $75 = ($65|0)<(21474836);
    $76 = ($64>>>0)<(2061584302);
    $77 = ($65|0)==(21474836);
    $78 = $77 & $76;
    $79 = $75 | $78;
    $80 = $74 & $79;
    if ($80) {
     $$254 = $$2$be;$56 = $64;$57 = $65;
    } else {
     $$2$lcssa = $$2$be;$94 = $64;$95 = $65;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be;$94 = $37;$95 = $50;
  }
  $53 = (($$2$lcssa) + -48)|0;
  $54 = ($53>>>0)<(10);
  $55 = HEAP32[$4>>2]|0;
  if ($54) {
   $83 = $55;
   while(1) {
    $81 = HEAP32[$2>>2]|0;
    $82 = ($81>>>0)<($83>>>0);
    if ($82) {
     $84 = ((($81)) + 1|0);
     HEAP32[$2>>2] = $84;
     $85 = HEAP8[$81>>0]|0;
     $86 = $85&255;
     $$3$be = $86;$102 = $83;
    } else {
     $87 = (___shgetc($0)|0);
     $$pre = HEAP32[$4>>2]|0;
     $$3$be = $87;$102 = $$pre;
    }
    $88 = (($$3$be) + -48)|0;
    $89 = ($88>>>0)<(10);
    if ($89) {
     $83 = $102;
    } else {
     $$lcssa = $102;
     break;
    }
   }
  } else {
   $$lcssa = $55;
  }
  $90 = ($$lcssa|0)==(0|0);
  if (!($90)) {
   $91 = HEAP32[$2>>2]|0;
   $92 = ((($91)) + -1|0);
   HEAP32[$2>>2] = $92;
  }
  $93 = ($$0|0)!=(0);
  $96 = (_i64Subtract(0,0,($94|0),($95|0))|0);
  $97 = tempRet0;
  $98 = $93 ? $96 : $94;
  $99 = $93 ? $97 : $95;
  $100 = $99;$101 = $98;
 }
 tempRet0 = ($100);
 return ($101|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $$1$ = 0, $$21 = 0.0, $$22 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0;
 var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($4|0)>(1023);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $$ = $8 ? $7 : 1023;
  $$$ = $5 ? $$ : $4;
  $$21 = $5 ? $6 : $3;
  $$0 = $$21;$$020 = $$$;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($11|0)<(-1022);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $$1 = $15 ? $14 : -1022;
   $$1$ = $12 ? $$1 : $11;
   $$22 = $12 ? $13 : $10;
   $$0 = $$22;$$020 = $$1$;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = tempRet0;
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = (___DOUBLE_BITS_272($1)|0);
   $19 = tempRet0;
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(2146435072);
   $22 = ($18>>>0)>(0);
   $23 = ($20|0)==(2146435072);
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8|0)==(2047);
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $30 = tempRet0;
    $31 = ($30>>>0)>($14>>>0);
    $32 = ($29>>>0)>($13>>>0);
    $33 = ($30|0)==($14|0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!($35)) {
     $36 = ($29|0)==($13|0);
     $37 = ($30|0)==($14|0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $$ = $38 ? $39 : $0;
     return (+$$);
    }
    $40 = ($8|0)==(0);
    if ($40) {
     $41 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $42 = tempRet0;
     $43 = ($42|0)>(-1);
     $44 = ($41>>>0)>(4294967295);
     $45 = ($42|0)==(-1);
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;$49 = $41;$50 = $42;
      while(1) {
       $48 = (($$073100) + -1)|0;
       $51 = (_bitshift64Shl(($49|0),($50|0),1)|0);
       $52 = tempRet0;
       $53 = ($52|0)>(-1);
       $54 = ($51>>>0)>(4294967295);
       $55 = ($52|0)==(-1);
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;$49 = $51;$50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = (1 - ($$073$lcssa))|0;
     $59 = (_bitshift64Shl(($2|0),($3|0),($58|0))|0);
     $60 = tempRet0;
     $$174 = $$073$lcssa;$87 = $59;$88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;$87 = $2;$88 = $62;
    }
    $63 = ($11|0)==(0);
    if ($63) {
     $64 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $65 = tempRet0;
     $66 = ($65|0)>(-1);
     $67 = ($64>>>0)>(4294967295);
     $68 = ($65|0)==(-1);
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;$72 = $64;$73 = $65;
      while(1) {
       $71 = (($$07194) + -1)|0;
       $74 = (_bitshift64Shl(($72|0),($73|0),1)|0);
       $75 = tempRet0;
       $76 = ($75|0)>(-1);
       $77 = ($74>>>0)>(4294967295);
       $78 = ($75|0)==(-1);
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;$72 = $74;$73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = (1 - ($$071$lcssa))|0;
     $82 = (_bitshift64Shl(($4|0),($5|0),($81|0))|0);
     $83 = tempRet0;
     $$172$ph = $$071$lcssa;$89 = $82;$90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172$ph = $11;$89 = $4;$90 = $85;
    }
    $86 = ($$174|0)>($$172$ph|0);
    $91 = (_i64Subtract(($87|0),($88|0),($89|0),($90|0))|0);
    $92 = tempRet0;
    $93 = ($92|0)>(-1);
    $94 = ($91>>>0)>(4294967295);
    $95 = ($92|0)==(-1);
    $96 = $95 & $94;
    $97 = $93 | $96;
    L23: do {
     if ($86) {
      $$27586 = $$174;$100 = $92;$156 = $97;$157 = $87;$158 = $88;$98 = $91;
      while(1) {
       if ($156) {
        $99 = ($98|0)==(0);
        $101 = ($100|0)==(0);
        $102 = $99 & $101;
        if ($102) {
         break;
        } else {
         $104 = $98;$105 = $100;
        }
       } else {
        $104 = $157;$105 = $158;
       }
       $106 = (_bitshift64Shl(($104|0),($105|0),1)|0);
       $107 = tempRet0;
       $108 = (($$27586) + -1)|0;
       $109 = ($108|0)>($$172$ph|0);
       $110 = (_i64Subtract(($106|0),($107|0),($89|0),($90|0))|0);
       $111 = tempRet0;
       $112 = ($111|0)>(-1);
       $113 = ($110>>>0)>(4294967295);
       $114 = ($111|0)==(-1);
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27586 = $108;$100 = $111;$156 = $116;$157 = $106;$158 = $107;$98 = $110;
       } else {
        $$275$lcssa = $108;$$lcssa = $116;$117 = $110;$119 = $111;$159 = $106;$160 = $107;
        break L23;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $97;$117 = $91;$119 = $92;$159 = $87;$160 = $88;
     }
    } while(0);
    if ($$lcssa) {
     $118 = ($117|0)==(0);
     $120 = ($119|0)==(0);
     $121 = $118 & $120;
     if ($121) {
      $129 = $0 * 0.0;
      $$070 = $129;
      break;
     } else {
      $122 = $119;$124 = $117;
     }
    } else {
     $122 = $160;$124 = $159;
    }
    $123 = ($122>>>0)<(1048576);
    $125 = ($124>>>0)<(0);
    $126 = ($122|0)==(1048576);
    $127 = $126 & $125;
    $128 = $123 | $127;
    if ($128) {
     $$37683 = $$275$lcssa;$130 = $124;$131 = $122;
     while(1) {
      $132 = (_bitshift64Shl(($130|0),($131|0),1)|0);
      $133 = tempRet0;
      $134 = (($$37683) + -1)|0;
      $135 = ($133>>>0)<(1048576);
      $136 = ($132>>>0)<(0);
      $137 = ($133|0)==(1048576);
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37683 = $134;$130 = $132;$131 = $133;
      } else {
       $$376$lcssa = $134;$141 = $132;$142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$141 = $124;$142 = $122;
    }
    $140 = ($$376$lcssa|0)>(0);
    if ($140) {
     $143 = (_i64Add(($141|0),($142|0),0,-1048576)|0);
     $144 = tempRet0;
     $145 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $146 = tempRet0;
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;$155 = $147;
    } else {
     $149 = (1 - ($$376$lcssa))|0;
     $150 = (_bitshift64Lshr(($141|0),($142|0),($149|0))|0);
     $151 = tempRet0;
     $153 = $151;$155 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr>>2] = $155;HEAP32[tempDoublePtr+4>>2] = $152;$154 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $154;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return (+$$070);
}
function ___DOUBLE_BITS_272($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _mbrtowc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$03952 = 0, $$04051 = 0, $$04350 = 0, $$1 = 0, $$141 = 0, $$144 = 0, $$2 = 0, $$47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($3|0)==(0|0);
 $$ = $5 ? 24380 : $3;
 $6 = HEAP32[$$>>2]|0;
 $7 = ($1|0)==(0|0);
 L1: do {
  if ($7) {
   $8 = ($6|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    label = 17;
   }
  } else {
   $9 = ($0|0)==(0|0);
   $$47 = $9 ? $4 : $0;
   $10 = ($2|0)==(0);
   if ($10) {
    $$0 = -2;
   } else {
    $11 = ($6|0)==(0);
    if ($11) {
     $12 = HEAP8[$1>>0]|0;
     $13 = ($12<<24>>24)>(-1);
     if ($13) {
      $14 = $12&255;
      HEAP32[$$47>>2] = $14;
      $15 = ($12<<24>>24)!=(0);
      $16 = $15&1;
      $$0 = $16;
      break;
     }
     $17 = (___pthread_self_420()|0);
     $18 = ((($17)) + 188|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (Atomics_load(HEAP32,$19>>2)|0);
     $not$ = ($20|0)==(0|0);
     $21 = HEAP8[$1>>0]|0;
     if ($not$) {
      $22 = $21 << 24 >> 24;
      $23 = $22 & 57343;
      HEAP32[$$47>>2] = $23;
      $$0 = 1;
      break;
     }
     $24 = $21&255;
     $25 = (($24) + -194)|0;
     $26 = ($25>>>0)>(50);
     if ($26) {
      label = 17;
      break;
     }
     $27 = ((($1)) + 1|0);
     $28 = (9388 + ($25<<2)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (($2) + -1)|0;
     $31 = ($30|0)==(0);
     if ($31) {
      $$2 = $29;
     } else {
      $$03952 = $27;$$04051 = $29;$$04350 = $30;
      label = 11;
     }
    } else {
     $$03952 = $1;$$04051 = $6;$$04350 = $2;
     label = 11;
    }
    L14: do {
     if ((label|0) == 11) {
      $32 = HEAP8[$$03952>>0]|0;
      $33 = $32&255;
      $34 = $33 >>> 3;
      $35 = (($34) + -16)|0;
      $36 = $$04051 >> 26;
      $37 = (($34) + ($36))|0;
      $38 = $35 | $37;
      $39 = ($38>>>0)>(7);
      if ($39) {
       label = 17;
       break L1;
      } else {
       $$1 = $$03952;$$141 = $$04051;$$144 = $$04350;$43 = $32;
      }
      while(1) {
       $40 = $$141 << 6;
       $41 = ((($$1)) + 1|0);
       $42 = $43&255;
       $44 = (($42) + -128)|0;
       $45 = $44 | $40;
       $46 = (($$144) + -1)|0;
       $47 = ($45|0)<(0);
       if (!($47)) {
        break;
       }
       $49 = ($46|0)==(0);
       if ($49) {
        $$2 = $45;
        break L14;
       }
       $50 = HEAP8[$41>>0]|0;
       $51 = $50 & -64;
       $52 = ($51<<24>>24)==(-128);
       if ($52) {
        $$1 = $41;$$141 = $45;$$144 = $46;$43 = $50;
       } else {
        label = 17;
        break L1;
       }
      }
      HEAP32[$$>>2] = 0;
      HEAP32[$$47>>2] = $45;
      $48 = (($2) - ($46))|0;
      $$0 = $48;
      break L1;
     }
    } while(0);
    HEAP32[$$>>2] = $$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 17) {
  HEAP32[$$>>2] = 0;
  $53 = (___errno_location()|0);
  HEAP32[$53>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___pthread_self_420() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function _write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall4(4,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall3(3,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _stat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (___syscall195(195,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  _memcpy(($3|0),($0|0),($2|0))|0;
  $$0 = $3;
 }
 return ($$0|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = (Atomics_load(HEAP32,$6>>2)|0);
 $8 = ($7|0)>(-1);
 if ($8) {
  $10 = (___lockfile($3)|0);
  $phitmp = ($10|0)==(0);
  $11 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $12 = $11;
  } else {
   ___unlockfile($3);
   $12 = $11;
  }
 } else {
  $9 = (___fwritex($0,$4,$3)|0);
  $12 = $9;
 }
 $13 = ($12|0)==($4|0);
 if ($13) {
  $15 = $$;
 } else {
  $14 = (($12>>>0) / ($1>>>0))&-1;
  $15 = $14;
 }
 return ($15|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $7 = HEAP32[$$pre>>2]|0;
   $8 = ((($5)) + 112|0);
   HEAP32[$8>>2] = $7;
  }
  $9 = HEAP32[$$pre>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $12 = (___pthread_self_611()|0);
   $13 = ((($12)) + 232|0);
   $$sink = $13;
  } else {
   $11 = ((($9)) + 116|0);
   $$sink = $11;
  }
  HEAP32[$$sink>>2] = $5;
 }
 return;
}
function ___pthread_self_611() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 63]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $memchr = (_memchr(22523,$3,4)|0);
 $4 = ($memchr|0)==(0|0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $0;
  $8 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $9 = (___syscall5(5,($vararg_buffer|0))|0);
  $10 = (___syscall_ret($9)|0);
  $11 = ($10|0)<(0);
  if ($11) {
   $$0 = 0;
  } else {
   $12 = $6 & 524288;
   $13 = ($12|0)==(0);
   if (!($13)) {
    HEAP32[$vararg_buffer3>>2] = $10;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $14 = (___fdopen($10,$1)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    HEAP32[$vararg_buffer8>>2] = $10;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $14;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $not$ = ($3<<24>>24)!=(114);
 $$ = $not$&1;
 $$0 = $2 ? $$ : 2;
 $4 = (_strchr($0,120)|0);
 $5 = ($4|0)==(0|0);
 $6 = $$0 | 128;
 $$0$ = $5 ? $$0 : $6;
 $7 = (_strchr($0,101)|0);
 $8 = ($7|0)==(0|0);
 $9 = $$0$ | 524288;
 $$2 = $8 ? $$0$ : $9;
 $10 = ($3<<24>>24)==(114);
 $11 = $$2 | 64;
 $$2$ = $10 ? $$2 : $11;
 $12 = ($3<<24>>24)==(119);
 $13 = $$2$ | 512;
 $$4 = $12 ? $13 : $$2$;
 $14 = ($3<<24>>24)==(97);
 $15 = $$4 | 1024;
 $$$4 = $14 ? $15 : $$4;
 return ($$$4|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre31 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $memchr = (_memchr(22523,$4,4)|0);
 $5 = ($memchr|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (_malloc(1156)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   dest=$7; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ($3<<24>>24)==(114);
    $12 = $11 ? 8 : 4;
    HEAP32[$7>>2] = $12;
   }
   $13 = (_strchr($1,101)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $15 = $3;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$1>>0]|0;
    $15 = $$pre;
   }
   $16 = ($15<<24>>24)==(97);
   if ($16) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $17 = (___syscall221(221,($vararg_buffer3|0))|0);
    $18 = $17 & 1024;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $17 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $20;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $21 = HEAP32[$7>>2]|0;
    $22 = $21 | 128;
    HEAP32[$7>>2] = $22;
    $29 = $22;
   } else {
    $$pre31 = HEAP32[$7>>2]|0;
    $29 = $$pre31;
   }
   $23 = ((($7)) + 60|0);
   HEAP32[$23>>2] = $0;
   $24 = ((($7)) + 132|0);
   $25 = ((($7)) + 44|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($7)) + 48|0);
   HEAP32[$26>>2] = 1024;
   $27 = ((($7)) + 75|0);
   HEAP8[$27>>0] = -1;
   $28 = $29 & 8;
   $30 = ($28|0)==(0);
   if ($30) {
    $31 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $31;
    $32 = (___syscall54(54,($vararg_buffer12|0))|0);
    $33 = ($32|0)==(0);
    if ($33) {
     HEAP8[$27>>0] = 10;
    }
   }
   $34 = ((($7)) + 32|0);
   HEAP32[$34>>2] = 56;
   $35 = ((($7)) + 36|0);
   HEAP32[$35>>2] = 25;
   $36 = ((($7)) + 40|0);
   HEAP32[$36>>2] = 26;
   $37 = ((($7)) + 12|0);
   HEAP32[$37>>2] = 24;
   $38 = HEAP32[(24320)>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = ((($7)) + 76|0);
    Atomics_store(HEAP32,$40>>2,-1)|0;
   }
   $41 = (___ofl_add($7)|0);
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((24384|0));
 return (24392|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((24384|0));
 return;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = (Atomics_load(HEAP32,$1>>2)|0);
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $28 = $4;
 } else {
  $28 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   $17 = ((($15)) + 52|0);
   HEAP32[$17>>2] = $12;
  }
  $18 = HEAP32[$8>>2]|0;
  $19 = ($18|0)==($0|0);
  if ($19) {
   HEAP32[$8>>2] = $15;
  }
  ___ofl_unlock();
 }
 $20 = (_fflush($0)|0);
 $21 = ((($0)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (FUNCTION_TABLE_ii[$22 & 63]($0)|0);
 $24 = $23 | $20;
 $25 = ((($0)) + 92|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  _free($26);
 }
 if ($7) {
  $29 = ($28|0)==(0);
  if (!($29)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($24|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = (Atomics_load(HEAP32,2462)|0);
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = (Atomics_load(HEAP32,2462)|0);
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = (Atomics_load(HEAP32,$14>>2)|0);
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = (Atomics_load(HEAP32,$2>>2)|0);
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 63]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 63]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fgets($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$06266 = 0, $$063 = 0, $$064 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0;
 var $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 76|0);
 $4 = (Atomics_load(HEAP32,$3>>2)|0);
 $5 = ($4|0)>(-1);
 if ($5) {
  $6 = (___lockfile($2)|0);
  $16 = $6;
 } else {
  $16 = 0;
 }
 $7 = (($1) + -1)|0;
 $8 = ($1|0)<(2);
 $9 = ($7|0)!=(0);
 if ($8) {
  $10 = ((($2)) + 74|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = (($12) + 255)|0;
  $14 = $13 | $12;
  $15 = $14&255;
  HEAP8[$10>>0] = $15;
  $17 = ($16|0)==(0);
  if (!($17)) {
   ___unlockfile($2);
  }
  if ($9) {
   $$0 = 0;
  } else {
   HEAP8[$0>>0] = 0;
   $$0 = $0;
  }
 } else {
  L11: do {
   if ($9) {
    $18 = ((($2)) + 4|0);
    $19 = ((($2)) + 8|0);
    $$063 = $7;$$064 = $0;
    while(1) {
     $20 = HEAP32[$18>>2]|0;
     $21 = HEAP32[$19>>2]|0;
     $22 = $20;
     $23 = (($21) - ($22))|0;
     $24 = (_memchr($20,10,$23)|0);
     $25 = ($24|0)==(0|0);
     $26 = $24;
     $27 = (1 - ($22))|0;
     $28 = (($27) + ($26))|0;
     $29 = $25 ? $23 : $28;
     $30 = ($29>>>0)<($$063>>>0);
     $31 = $30 ? $29 : $$063;
     _memcpy(($$064|0),($20|0),($31|0))|0;
     $32 = HEAP32[$18>>2]|0;
     $33 = (($32) + ($31)|0);
     HEAP32[$18>>2] = $33;
     $34 = (($$064) + ($31)|0);
     $35 = (($$063) - ($31))|0;
     $36 = ($35|0)!=(0);
     $or$cond = $25 & $36;
     if (!($or$cond)) {
      $$1 = $34;
      label = 17;
      break L11;
     }
     $37 = HEAP32[$19>>2]|0;
     $38 = ($33>>>0)<($37>>>0);
     if ($38) {
      $39 = ((($33)) + 1|0);
      HEAP32[$18>>2] = $39;
      $40 = HEAP8[$33>>0]|0;
      $41 = $40&255;
      $50 = $41;
     } else {
      $42 = (___uflow($2)|0);
      $43 = ($42|0)<(0);
      if ($43) {
       break;
      } else {
       $50 = $42;
      }
     }
     $48 = (($35) + -1)|0;
     $49 = $50&255;
     $51 = ((($34)) + 1|0);
     HEAP8[$34>>0] = $49;
     $sext$mask = $50 & 255;
     $52 = ($sext$mask|0)!=(10);
     $53 = ($48|0)!=(0);
     $or$cond3 = $53 & $52;
     if ($or$cond3) {
      $$063 = $48;$$064 = $51;
     } else {
      $$1 = $51;
      label = 17;
      break L11;
     }
    }
    $44 = ($34|0)==($0|0);
    if ($44) {
     $$06266 = 0;
    } else {
     $45 = HEAP32[$2>>2]|0;
     $46 = $45 & 16;
     $47 = ($46|0)==(0);
     if ($47) {
      $$06266 = 0;
     } else {
      $$1 = $34;
      label = 17;
     }
    }
   } else {
    $$1 = $0;
    label = 17;
   }
  } while(0);
  if ((label|0) == 17) {
   $54 = ($0|0)==(0|0);
   if ($54) {
    $$06266 = 0;
   } else {
    HEAP8[$$1>>0] = 0;
    $$06266 = $0;
   }
  }
  $55 = ($16|0)==(0);
  if ($55) {
   $$0 = $$06266;
  } else {
   ___unlockfile($2);
   $$0 = $$06266;
  }
 }
 return ($$0|0);
}
function _sscanf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsscanf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 32|0);
 HEAP32[$4>>2] = 57;
 $5 = ((($3)) + 44|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($3)) + 76|0);
 Atomics_store(HEAP32,$6>>2,-1)|0;
 $7 = ((($3)) + 84|0);
 HEAP32[$7>>2] = $0;
 $8 = (_vfscanf($3,$1,$2)|0);
 STACKTOP = sp;return ($8|0);
}
function _do_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___string_read($0,$1,$2)|0);
 return ($3|0);
}
function _vfscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$0266 = 0, $$$0268 = 0, $$$0305 = 0, $$$3 = 0, $$0266$lcssa = 0, $$0266417 = 0, $$0268 = 0, $$0272 = 0, $$0273429 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph336 = 0, $$0283428 = 0, $$0286420 = 0, $$0288$ = 0, $$0288425 = 0, $$0292 = 0, $$0293 = 0;
 var $$0305423 = 0, $$10 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0, $$2290 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$319 = 0;
 var $$320 = 0, $$321 = 0, $$322 = 0, $$327 = 0, $$328$le439 = 0, $$328$le441 = 0, $$3281 = 0, $$3291 = 0, $$3416 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7312 = 0, $$8 = 0;
 var $$8313 = 0, $$9 = 0, $$9314 = 0, $$9314$ph = 0, $$lcssa355 = 0, $$not = 0, $$old4 = 0, $$ph = 0, $$ph353 = 0, $$pre = 0, $$pre$phi516Z2D = 0, $$pre507 = 0, $$pre509 = 0, $$pre511 = 0, $$pre512 = 0, $$pre513 = 0, $$pre514 = 0, $$pre515 = 0, $$sink443 = 0, $$sroa$2$0$$sroa_idx13 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $factor = 0, $factor331 = 0, $isdigit = 0;
 var $isdigit316 = 0, $isdigit316415 = 0, $isdigittmp = 0, $isdigittmp315 = 0, $isdigittmp315414 = 0, $narrow = 0, $narrow469 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond318 = 0, $or$cond5 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $3 = sp + 8|0;
 $4 = sp + 17|0;
 $5 = sp;
 $6 = sp + 16|0;
 $7 = ((($0)) + 76|0);
 $8 = (Atomics_load(HEAP32,$7>>2)|0);
 $9 = ($8|0)>(-1);
 if ($9) {
  $10 = (___lockfile($0)|0);
  $305 = $10;
 } else {
  $305 = 0;
 }
 $11 = HEAP8[$1>>0]|0;
 $12 = ($11<<24>>24)==(0);
 L4: do {
  if ($12) {
   $$3291 = 0;
  } else {
   $13 = ((($0)) + 4|0);
   $14 = ((($0)) + 100|0);
   $15 = ((($0)) + 108|0);
   $16 = ((($0)) + 8|0);
   $17 = ((($4)) + 10|0);
   $18 = ((($4)) + 33|0);
   $$sroa$2$0$$sroa_idx13 = ((($3)) + 4|0);
   $19 = ((($4)) + 46|0);
   $20 = ((($4)) + 94|0);
   $21 = ((($4)) + 1|0);
   $22 = ((($4)) + 1|0);
   $$0273429 = $1;$$0283428 = 0;$$0288425 = 0;$$0305423 = 0;$102 = 0;$24 = $11;
   L6: while(1) {
    $23 = $24&255;
    $25 = (_isspace($23)|0);
    $26 = ($25|0)==(0);
    L8: do {
     if ($26) {
      $53 = ($24<<24>>24)==(37);
      L10: do {
       if ($53) {
        $54 = ((($$0273429)) + 1|0);
        $55 = HEAP8[$54>>0]|0;
        L12: do {
         switch ($55<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $76 = ((($$0273429)) + 2|0);
          $$0293 = 0;$$2275 = $76;
          break;
         }
         default: {
          $77 = $55&255;
          $isdigittmp = (($77) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $78 = ((($$0273429)) + 2|0);
           $79 = HEAP8[$78>>0]|0;
           $80 = ($79<<24>>24)==(36);
           if ($80) {
            $81 = (_arg_n($2,$isdigittmp)|0);
            $82 = ((($$0273429)) + 3|0);
            $$0293 = $81;$$2275 = $82;
            break L12;
           }
          }
          $arglist_current = HEAP32[$2>>2]|0;
          $83 = $arglist_current;
          $84 = ((0) + 4|0);
          $expanded1 = $84;
          $expanded = (($expanded1) - 1)|0;
          $85 = (($83) + ($expanded))|0;
          $86 = ((0) + 4|0);
          $expanded5 = $86;
          $expanded4 = (($expanded5) - 1)|0;
          $expanded3 = $expanded4 ^ -1;
          $87 = $85 & $expanded3;
          $88 = $87;
          $89 = HEAP32[$88>>2]|0;
          $arglist_next = ((($88)) + 4|0);
          HEAP32[$2>>2] = $arglist_next;
          $$0293 = $89;$$2275 = $54;
         }
         }
        } while(0);
        $90 = HEAP8[$$2275>>0]|0;
        $91 = $90&255;
        $isdigittmp315414 = (($91) + -48)|0;
        $isdigit316415 = ($isdigittmp315414>>>0)<(10);
        if ($isdigit316415) {
         $$0266417 = 0;$$3416 = $$2275;$95 = $91;
         while(1) {
          $92 = ($$0266417*10)|0;
          $93 = (($92) + -48)|0;
          $94 = (($93) + ($95))|0;
          $96 = ((($$3416)) + 1|0);
          $97 = HEAP8[$96>>0]|0;
          $98 = $97&255;
          $isdigittmp315 = (($98) + -48)|0;
          $isdigit316 = ($isdigittmp315>>>0)<(10);
          if ($isdigit316) {
           $$0266417 = $94;$$3416 = $96;$95 = $98;
          } else {
           $$0266$lcssa = $94;$$3$lcssa = $96;$$lcssa355 = $97;
           break;
          }
         }
        } else {
         $$0266$lcssa = 0;$$3$lcssa = $$2275;$$lcssa355 = $90;
        }
        $99 = ($$lcssa355<<24>>24)==(109);
        $100 = ($$0293|0)!=(0|0);
        $101 = ((($$3$lcssa)) + 1|0);
        $$$0305 = $99 ? 0 : $$0305423;
        $$327 = $99 ? 0 : $102;
        $$$3 = $99 ? $101 : $$3$lcssa;
        $narrow = $100 & $99;
        $103 = ((($$$3)) + 1|0);
        $104 = HEAP8[$$$3>>0]|0;
        switch ($104<<24>>24) {
        case 104:  {
         $105 = HEAP8[$103>>0]|0;
         $106 = ($105<<24>>24)==(104);
         $107 = ((($$$3)) + 2|0);
         $$319 = $106 ? $107 : $103;
         $$320 = $106 ? -2 : -1;
         $$0268 = $$320;$$5 = $$319;
         break;
        }
        case 108:  {
         $108 = HEAP8[$103>>0]|0;
         $109 = ($108<<24>>24)==(108);
         $110 = ((($$$3)) + 2|0);
         $$321 = $109 ? $110 : $103;
         $$322 = $109 ? 3 : 1;
         $$0268 = $$322;$$5 = $$321;
         break;
        }
        case 106:  {
         $$0268 = 3;$$5 = $103;
         break;
        }
        case 116: case 122:  {
         $$0268 = 1;$$5 = $103;
         break;
        }
        case 76:  {
         $$0268 = 2;$$5 = $103;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $$0268 = 0;$$5 = $$$3;
         break;
        }
        default: {
         $$7312 = $$$0305;$309 = $$327;$narrow469 = $narrow;
         label = 137;
         break L6;
        }
        }
        $111 = HEAP8[$$5>>0]|0;
        $112 = $111&255;
        $113 = $112 & 47;
        $114 = ($113|0)==(3);
        $115 = $112 | 32;
        $$ = $114 ? $115 : $112;
        $$$0268 = $114 ? 1 : $$0268;
        $trunc = $$&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $116 = ($$0266$lcssa|0)>(1);
         $$$0266 = $116 ? $$0266$lcssa : 1;
         $$1267 = $$$0266;$$1284 = $$0283428;
         break;
        }
        case 91:  {
         $$1267 = $$0266$lcssa;$$1284 = $$0283428;
         break;
        }
        case 110:  {
         $117 = ($$0283428|0)<(0);
         $118 = $117 << 31 >> 31;
         _store_int($$0293,$$$0268,$$0283428,$118);
         $$11 = $$5;$$1289 = $$0288425;$$2285 = $$0283428;$$6311 = $$$0305;$307 = $$327;
         break L8;
         break;
        }
        default: {
         ___shlim($0,0);
         while(1) {
          $119 = HEAP32[$13>>2]|0;
          $120 = HEAP32[$14>>2]|0;
          $121 = ($119>>>0)<($120>>>0);
          if ($121) {
           $122 = ((($119)) + 1|0);
           HEAP32[$13>>2] = $122;
           $123 = HEAP8[$119>>0]|0;
           $124 = $123&255;
           $126 = $124;
          } else {
           $125 = (___shgetc($0)|0);
           $126 = $125;
          }
          $127 = (_isspace($126)|0);
          $128 = ($127|0)==(0);
          if ($128) {
           break;
          }
         }
         $129 = HEAP32[$14>>2]|0;
         $130 = ($129|0)==(0|0);
         if ($130) {
          $$pre507 = HEAP32[$13>>2]|0;
          $138 = $$pre507;
         } else {
          $131 = HEAP32[$13>>2]|0;
          $132 = ((($131)) + -1|0);
          HEAP32[$13>>2] = $132;
          $133 = $132;
          $138 = $133;
         }
         $134 = HEAP32[$15>>2]|0;
         $135 = HEAP32[$16>>2]|0;
         $136 = (($134) + ($$0283428))|0;
         $137 = (($136) + ($138))|0;
         $139 = (($137) - ($135))|0;
         $$1267 = $$0266$lcssa;$$1284 = $139;
        }
        }
        ___shlim($0,$$1267);
        $140 = HEAP32[$13>>2]|0;
        $141 = HEAP32[$14>>2]|0;
        $142 = ($140>>>0)<($141>>>0);
        if ($142) {
         $143 = ((($140)) + 1|0);
         HEAP32[$13>>2] = $143;
         $146 = $141;
        } else {
         $144 = (___shgetc($0)|0);
         $145 = ($144|0)<(0);
         if ($145) {
          $$7312 = $$$0305;$309 = $$327;$narrow469 = $narrow;
          label = 137;
          break L6;
         }
         $$pre509 = HEAP32[$14>>2]|0;
         $146 = $$pre509;
        }
        $147 = ($146|0)==(0|0);
        if (!($147)) {
         $148 = HEAP32[$13>>2]|0;
         $149 = ((($148)) + -1|0);
         HEAP32[$13>>2] = $149;
        }
        L55: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $150 = ($$|0)==(99);
          $151 = $$ | 16;
          $152 = ($151|0)==(115);
          L57: do {
           if ($152) {
            $153 = ($$|0)==(115);
            _memset(($21|0),-1,256)|0;
            HEAP8[$4>>0] = 0;
            if ($153) {
             HEAP8[$18>>0] = 0;
             ;HEAP8[$17>>0]=0|0;HEAP8[$17+1>>0]=0|0;HEAP8[$17+2>>0]=0|0;HEAP8[$17+3>>0]=0|0;HEAP8[$17+4>>0]=0|0;
             $$9 = $$5;
            } else {
             $$9 = $$5;
            }
           } else {
            $154 = ((($$5)) + 1|0);
            $155 = HEAP8[$154>>0]|0;
            $156 = ($155<<24>>24)==(94);
            $157 = ((($$5)) + 2|0);
            $$0292 = $156&1;
            $$6 = $156 ? $157 : $154;
            $158 = $156&1;
            _memset(($22|0),($158|0),256)|0;
            HEAP8[$4>>0] = 0;
            $159 = HEAP8[$$6>>0]|0;
            switch ($159<<24>>24) {
            case 45:  {
             $$sink443 = $19;
             label = 64;
             break;
            }
            case 93:  {
             $$sink443 = $20;
             label = 64;
             break;
            }
            default: {
             $$pre514 = $$0292 ^ 1;
             $$pre515 = $$pre514&255;
             $$7$ph = $$6;$$pre$phi516Z2D = $$pre515;
            }
            }
            if ((label|0) == 64) {
             label = 0;
             $160 = ((($$6)) + 1|0);
             $161 = $$0292 ^ 1;
             $162 = $161&255;
             HEAP8[$$sink443>>0] = $162;
             $$7$ph = $160;$$pre$phi516Z2D = $162;
            }
            $$7 = $$7$ph;
            while(1) {
             $163 = HEAP8[$$7>>0]|0;
             L69: do {
              switch ($163<<24>>24) {
              case 0:  {
               $$7312 = $$$0305;$309 = $$327;$narrow469 = $narrow;
               label = 137;
               break L6;
               break;
              }
              case 93:  {
               $$9 = $$7;
               break L57;
               break;
              }
              case 45:  {
               $164 = ((($$7)) + 1|0);
               $165 = HEAP8[$164>>0]|0;
               switch ($165<<24>>24) {
               case 93: case 0:  {
                $$8 = $$7;$176 = 45;
                break L69;
                break;
               }
               default: {
               }
               }
               $166 = ((($$7)) + -1|0);
               $167 = HEAP8[$166>>0]|0;
               $168 = ($167&255)<($165&255);
               if ($168) {
                $169 = $167&255;
                $$0286420 = $169;
                while(1) {
                 $170 = (($$0286420) + 1)|0;
                 $171 = (($4) + ($170)|0);
                 HEAP8[$171>>0] = $$pre$phi516Z2D;
                 $172 = HEAP8[$164>>0]|0;
                 $173 = $172&255;
                 $174 = ($170|0)<($173|0);
                 if ($174) {
                  $$0286420 = $170;
                 } else {
                  $$8 = $164;$176 = $172;
                  break;
                 }
                }
               } else {
                $$8 = $164;$176 = $165;
               }
               break;
              }
              default: {
               $$8 = $$7;$176 = $163;
              }
              }
             } while(0);
             $175 = $176&255;
             $177 = (($175) + 1)|0;
             $178 = (($4) + ($177)|0);
             HEAP8[$178>>0] = $$pre$phi516Z2D;
             $179 = ((($$8)) + 1|0);
             $$7 = $179;
            }
           }
          } while(0);
          $180 = (($$1267) + 1)|0;
          $181 = $150 ? $180 : 31;
          $182 = ($$$0268|0)==(1);
          L77: do {
           if ($182) {
            if ($narrow) {
             $183 = $181 << 2;
             $184 = (_malloc($183)|0);
             $185 = ($184|0)==(0|0);
             if ($185) {
              $$7312 = 0;$309 = 0;$narrow469 = 1;
              label = 137;
              break L6;
             } else {
              $311 = $184;
             }
            } else {
             $311 = $$0293;
            }
            HEAP32[$3>>2] = 0;
            HEAP32[$$sroa$2$0$$sroa_idx13>>2] = 0;
            $$0276$ph = $181;$$0278$ph = 0;$$ph = $311;
            L82: while(1) {
             $186 = ($$ph|0)==(0|0);
             $$0278$ph336 = $$0278$ph;
             while(1) {
              L86: while(1) {
               $187 = HEAP32[$13>>2]|0;
               $188 = HEAP32[$14>>2]|0;
               $189 = ($187>>>0)<($188>>>0);
               if ($189) {
                $190 = ((($187)) + 1|0);
                HEAP32[$13>>2] = $190;
                $191 = HEAP8[$187>>0]|0;
                $192 = $191&255;
                $195 = $192;
               } else {
                $193 = (___shgetc($0)|0);
                $195 = $193;
               }
               $194 = (($195) + 1)|0;
               $196 = (($4) + ($194)|0);
               $197 = HEAP8[$196>>0]|0;
               $198 = ($197<<24>>24)==(0);
               if ($198) {
                break L82;
               }
               $199 = $195&255;
               HEAP8[$6>>0] = $199;
               $200 = (_mbrtowc($5,$6,1,$3)|0);
               switch ($200|0) {
               case -1:  {
                $$7312 = 0;$309 = $$ph;$narrow469 = $narrow;
                label = 137;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L86;
               }
               }
              }
              if ($186) {
               $$1279 = $$0278$ph336;
              } else {
               $201 = (($$ph) + ($$0278$ph336<<2)|0);
               $202 = (($$0278$ph336) + 1)|0;
               $203 = HEAP32[$5>>2]|0;
               HEAP32[$201>>2] = $203;
               $$1279 = $202;
              }
              $204 = ($$1279|0)==($$0276$ph|0);
              $or$cond = $narrow & $204;
              if ($or$cond) {
               break;
              } else {
               $$0278$ph336 = $$1279;
              }
             }
             $factor331 = $$0276$ph << 1;
             $205 = $factor331 | 1;
             $206 = $205 << 2;
             $207 = (_realloc($$ph,$206)|0);
             $208 = ($207|0)==(0|0);
             if ($208) {
              $$7312 = 0;$309 = $$ph;$narrow469 = 1;
              label = 137;
              break L6;
             } else {
              $$0278$ph$phi = $$0276$ph;$$0276$ph = $205;$$ph = $207;$$0278$ph = $$0278$ph$phi;
             }
            }
            $209 = (_mbsinit($3)|0);
            $210 = ($209|0)==(0);
            if ($210) {
             $$7312 = 0;$309 = $$ph;$narrow469 = $narrow;
             label = 137;
             break L6;
            } else {
             $$4282 = $$0278$ph336;$$4309 = 0;$$5299 = $$ph;$312 = $$ph;
            }
           } else {
            if ($narrow) {
             $211 = (_malloc($181)|0);
             $212 = ($211|0)==(0|0);
             if ($212) {
              $$7312 = 0;$309 = 0;$narrow469 = 1;
              label = 137;
              break L6;
             } else {
              $$1277$ph = $181;$$2280$ph = 0;$$2307$ph = $211;
             }
             while(1) {
              $$2280 = $$2280$ph;
              while(1) {
               $213 = HEAP32[$13>>2]|0;
               $214 = HEAP32[$14>>2]|0;
               $215 = ($213>>>0)<($214>>>0);
               if ($215) {
                $216 = ((($213)) + 1|0);
                HEAP32[$13>>2] = $216;
                $217 = HEAP8[$213>>0]|0;
                $218 = $217&255;
                $221 = $218;
               } else {
                $219 = (___shgetc($0)|0);
                $221 = $219;
               }
               $220 = (($221) + 1)|0;
               $222 = (($4) + ($220)|0);
               $223 = HEAP8[$222>>0]|0;
               $224 = ($223<<24>>24)==(0);
               if ($224) {
                $$4282 = $$2280;$$4309 = $$2307$ph;$$5299 = 0;$312 = 0;
                break L77;
               }
               $225 = $221&255;
               $226 = (($$2280) + 1)|0;
               $227 = (($$2307$ph) + ($$2280)|0);
               HEAP8[$227>>0] = $225;
               $228 = ($226|0)==($$1277$ph|0);
               if ($228) {
                break;
               } else {
                $$2280 = $226;
               }
              }
              $factor = $$1277$ph << 1;
              $229 = $factor | 1;
              $230 = (_realloc($$2307$ph,$229)|0);
              $231 = ($230|0)==(0|0);
              if ($231) {
               $$7312 = $$2307$ph;$309 = 0;$narrow469 = 1;
               label = 137;
               break L6;
              } else {
               $$2280$ph$phi = $$1277$ph;$$1277$ph = $229;$$2307$ph = $230;$$2280$ph = $$2280$ph$phi;
              }
             }
            }
            $232 = ($$0293|0)==(0|0);
            if ($232) {
             $250 = $146;
             while(1) {
              $248 = HEAP32[$13>>2]|0;
              $249 = ($248>>>0)<($250>>>0);
              if ($249) {
               $251 = ((($248)) + 1|0);
               HEAP32[$13>>2] = $251;
               $252 = HEAP8[$248>>0]|0;
               $253 = $252&255;
               $256 = $253;
              } else {
               $254 = (___shgetc($0)|0);
               $256 = $254;
              }
              $255 = (($256) + 1)|0;
              $257 = (($4) + ($255)|0);
              $258 = HEAP8[$257>>0]|0;
              $259 = ($258<<24>>24)==(0);
              if ($259) {
               $$4282 = 0;$$4309 = 0;$$5299 = 0;$312 = 0;
               break L77;
              }
              $$pre512 = HEAP32[$14>>2]|0;
              $250 = $$pre512;
             }
            } else {
             $$3281 = 0;$235 = $146;
             while(1) {
              $233 = HEAP32[$13>>2]|0;
              $234 = ($233>>>0)<($235>>>0);
              if ($234) {
               $236 = ((($233)) + 1|0);
               HEAP32[$13>>2] = $236;
               $237 = HEAP8[$233>>0]|0;
               $238 = $237&255;
               $241 = $238;
              } else {
               $239 = (___shgetc($0)|0);
               $241 = $239;
              }
              $240 = (($241) + 1)|0;
              $242 = (($4) + ($240)|0);
              $243 = HEAP8[$242>>0]|0;
              $244 = ($243<<24>>24)==(0);
              if ($244) {
               $$4282 = $$3281;$$4309 = $$0293;$$5299 = 0;$312 = 0;
               break L77;
              }
              $245 = $241&255;
              $246 = (($$3281) + 1)|0;
              $247 = (($$0293) + ($$3281)|0);
              HEAP8[$247>>0] = $245;
              $$pre511 = HEAP32[$14>>2]|0;
              $$3281 = $246;$235 = $$pre511;
             }
            }
           }
          } while(0);
          $260 = HEAP32[$14>>2]|0;
          $261 = ($260|0)==(0|0);
          if ($261) {
           $$pre513 = HEAP32[$13>>2]|0;
           $268 = $$pre513;
          } else {
           $262 = HEAP32[$13>>2]|0;
           $263 = ((($262)) + -1|0);
           HEAP32[$13>>2] = $263;
           $264 = $263;
           $268 = $264;
          }
          $265 = HEAP32[$15>>2]|0;
          $266 = HEAP32[$16>>2]|0;
          $267 = (($268) - ($266))|0;
          $269 = (($267) + ($265))|0;
          $270 = ($269|0)==(0);
          if ($270) {
           $$9314$ph = $$4309;$$ph353 = $312;
           label = 139;
           break L6;
          }
          $$not = $150 ^ 1;
          $271 = ($269|0)==($$1267|0);
          $or$cond318 = $271 | $$not;
          if (!($or$cond318)) {
           $$9314$ph = $$4309;$$ph353 = $312;
           label = 139;
           break L6;
          }
          do {
           if ($narrow) {
            if ($182) {
             HEAP32[$$0293>>2] = $$5299;
             break;
            } else {
             HEAP32[$$0293>>2] = $$4309;
             break;
            }
           }
          } while(0);
          if ($150) {
           $$10 = $$9;$$5310 = $$4309;$310 = $312;
          } else {
           $272 = ($$5299|0)==(0|0);
           if (!($272)) {
            $273 = (($$5299) + ($$4282<<2)|0);
            HEAP32[$273>>2] = 0;
           }
           $274 = ($$4309|0)==(0|0);
           if ($274) {
            $$10 = $$9;$$5310 = 0;$310 = $312;
            break L55;
           }
           $275 = (($$4309) + ($$4282)|0);
           HEAP8[$275>>0] = 0;
           $$10 = $$9;$$5310 = $$4309;$310 = $312;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $$0272 = 16;
          label = 125;
          break;
         }
         case 111:  {
          $$0272 = 8;
          label = 125;
          break;
         }
         case 117: case 100:  {
          $$0272 = 10;
          label = 125;
          break;
         }
         case 105:  {
          $$0272 = 0;
          label = 125;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $285 = (+___floatscan($0,$$$0268,0));
          $286 = HEAP32[$15>>2]|0;
          $287 = HEAP32[$13>>2]|0;
          $288 = HEAP32[$16>>2]|0;
          $289 = (($288) - ($287))|0;
          $290 = ($286|0)==($289|0);
          if ($290) {
           $$9314$ph = $$$0305;$$ph353 = $$327;
           label = 139;
           break L6;
          }
          $291 = ($$0293|0)==(0|0);
          if ($291) {
           $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
          } else {
           switch ($$$0268|0) {
           case 0:  {
            $292 = $285;
            HEAPF32[$$0293>>2] = $292;
            $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
            break L55;
            break;
           }
           case 1:  {
            HEAPF64[$$0293>>3] = $285;
            $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
            break L55;
            break;
           }
           case 2:  {
            HEAPF64[$$0293>>3] = $285;
            $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
            break L55;
            break;
           }
           default: {
            $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
            break L55;
           }
           }
          }
          break;
         }
         default: {
          $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
         }
         }
        } while(0);
        do {
         if ((label|0) == 125) {
          label = 0;
          $276 = (___intscan($0,$$0272,0,-1,-1)|0);
          $277 = tempRet0;
          $278 = HEAP32[$15>>2]|0;
          $279 = HEAP32[$13>>2]|0;
          $280 = HEAP32[$16>>2]|0;
          $281 = (($280) - ($279))|0;
          $282 = ($278|0)==($281|0);
          if ($282) {
           $$9314$ph = $$$0305;$$ph353 = $$327;
           label = 139;
           break L6;
          }
          $283 = ($$|0)==(112);
          $or$cond3 = $100 & $283;
          if ($or$cond3) {
           $284 = $276;
           HEAP32[$$0293>>2] = $284;
           $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
           break;
          } else {
           _store_int($$0293,$$$0268,$276,$277);
           $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
           break;
          }
         }
        } while(0);
        $293 = HEAP32[$15>>2]|0;
        $294 = HEAP32[$13>>2]|0;
        $295 = HEAP32[$16>>2]|0;
        $296 = (($293) + ($$1284))|0;
        $297 = (($296) + ($294))|0;
        $298 = (($297) - ($295))|0;
        $299 = $100&1;
        $$0288$ = (($299) + ($$0288425))|0;
        $$11 = $$10;$$1289 = $$0288$;$$2285 = $298;$$6311 = $$5310;$307 = $310;
        break L8;
       }
      } while(0);
      $56 = $53&1;
      $57 = (($$0273429) + ($56)|0);
      ___shlim($0,0);
      $58 = HEAP32[$13>>2]|0;
      $59 = HEAP32[$14>>2]|0;
      $60 = ($58>>>0)<($59>>>0);
      if ($60) {
       $61 = ((($58)) + 1|0);
       HEAP32[$13>>2] = $61;
       $62 = HEAP8[$58>>0]|0;
       $63 = $62&255;
       $67 = $63;
      } else {
       $64 = (___shgetc($0)|0);
       $67 = $64;
      }
      $65 = HEAP8[$57>>0]|0;
      $66 = $65&255;
      $68 = ($67|0)==($66|0);
      if (!($68)) {
       label = 22;
       break L6;
      }
      $75 = (($$0283428) + 1)|0;
      $$11 = $57;$$1289 = $$0288425;$$2285 = $75;$$6311 = $$0305423;$307 = $102;
     } else {
      $$1274 = $$0273429;
      while(1) {
       $27 = ((($$1274)) + 1|0);
       $28 = HEAP8[$27>>0]|0;
       $29 = $28&255;
       $30 = (_isspace($29)|0);
       $31 = ($30|0)==(0);
       if ($31) {
        break;
       } else {
        $$1274 = $27;
       }
      }
      ___shlim($0,0);
      while(1) {
       $32 = HEAP32[$13>>2]|0;
       $33 = HEAP32[$14>>2]|0;
       $34 = ($32>>>0)<($33>>>0);
       if ($34) {
        $35 = ((($32)) + 1|0);
        HEAP32[$13>>2] = $35;
        $36 = HEAP8[$32>>0]|0;
        $37 = $36&255;
        $39 = $37;
       } else {
        $38 = (___shgetc($0)|0);
        $39 = $38;
       }
       $40 = (_isspace($39)|0);
       $41 = ($40|0)==(0);
       if ($41) {
        break;
       }
      }
      $42 = HEAP32[$14>>2]|0;
      $43 = ($42|0)==(0|0);
      if ($43) {
       $$pre = HEAP32[$13>>2]|0;
       $51 = $$pre;
      } else {
       $44 = HEAP32[$13>>2]|0;
       $45 = ((($44)) + -1|0);
       HEAP32[$13>>2] = $45;
       $46 = $45;
       $51 = $46;
      }
      $47 = HEAP32[$15>>2]|0;
      $48 = HEAP32[$16>>2]|0;
      $49 = (($47) + ($$0283428))|0;
      $50 = (($49) + ($51))|0;
      $52 = (($50) - ($48))|0;
      $$11 = $$1274;$$1289 = $$0288425;$$2285 = $52;$$6311 = $$0305423;$307 = $102;
     }
    } while(0);
    $300 = ((($$11)) + 1|0);
    $301 = HEAP8[$300>>0]|0;
    $302 = ($301<<24>>24)==(0);
    if ($302) {
     $$3291 = $$1289;
     break L4;
    } else {
     $$0273429 = $300;$$0283428 = $$2285;$$0288425 = $$1289;$$0305423 = $$6311;$102 = $307;$24 = $301;
    }
   }
   if ((label|0) == 22) {
    $69 = HEAP32[$14>>2]|0;
    $70 = ($69|0)==(0|0);
    if (!($70)) {
     $71 = HEAP32[$13>>2]|0;
     $72 = ((($71)) + -1|0);
     HEAP32[$13>>2] = $72;
    }
    $73 = ($67|0)>(-1);
    $74 = ($$0288425|0)!=(0);
    $or$cond5 = $74 | $73;
    if ($or$cond5) {
     $$3291 = $$0288425;
     break;
    } else {
     $$1271 = 0;$$8313 = $$0305423;$308 = $102;
     label = 138;
    }
   }
   else if ((label|0) == 137) {
    $$328$le441 = $narrow469&1;
    $$old4 = ($$0288425|0)==(0);
    if ($$old4) {
     $$1271 = $$328$le441;$$8313 = $$7312;$308 = $309;
     label = 138;
    } else {
     $$2 = $$328$le441;$$2290 = $$0288425;$$9314 = $$7312;$304 = $309;
    }
   }
   else if ((label|0) == 139) {
    $$328$le439 = $narrow&1;
    $$2 = $$328$le439;$$2290 = $$0288425;$$9314 = $$9314$ph;$304 = $$ph353;
   }
   if ((label|0) == 138) {
    $$2 = $$1271;$$2290 = -1;$$9314 = $$8313;$304 = $308;
   }
   $303 = ($$2|0)==(0);
   if ($303) {
    $$3291 = $$2290;
   } else {
    _free($$9314);
    _free($304);
    $$3291 = $$2290;
   }
  }
 } while(0);
 $306 = ($305|0)==(0);
 if (!($306)) {
  ___unlockfile($0);
 }
 STACKTOP = sp;return ($$3291|0);
}
function _arg_n($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $vacopy_currentptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $vacopy_currentptr = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $vacopy_currentptr;
 $$0 = $1;
 while(1) {
  $3 = ($$0>>>0)>(1);
  $arglist_current = HEAP32[$2>>2]|0;
  $4 = $arglist_current;
  $5 = ((0) + 4|0);
  $expanded1 = $5;
  $expanded = (($expanded1) - 1)|0;
  $6 = (($4) + ($expanded))|0;
  $7 = ((0) + 4|0);
  $expanded5 = $7;
  $expanded4 = (($expanded5) - 1)|0;
  $expanded3 = $expanded4 ^ -1;
  $8 = $6 & $expanded3;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $arglist_next = ((($9)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $11 = (($$0) + -1)|0;
  if ($3) {
   $$0 = $11;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($10|0);
}
function _store_int($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 L1: do {
  if (!($4)) {
   switch ($1|0) {
   case -2:  {
    $5 = $2&255;
    HEAP8[$0>>0] = $5;
    break L1;
    break;
   }
   case -1:  {
    $6 = $2&65535;
    HEAP16[$0>>1] = $6;
    break L1;
    break;
   }
   case 0:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 1:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 3:  {
    $7 = $0;
    $8 = $7;
    HEAP32[$8>>2] = $2;
    $9 = (($7) + 4)|0;
    $10 = $9;
    HEAP32[$10>>2] = $3;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 return;
}
function _mbsinit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $5 = 1;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0);
  $5 = $3;
 }
 $4 = $5&1;
 return ($4|0);
}
function ___string_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$027 = 0, $$027$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 256)|0;
 $6 = (_memchr($4,0,$5)|0);
 $7 = ($6|0)==(0|0);
 $8 = $6;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $$027 = $7 ? $5 : $10;
 $11 = ($$027>>>0)<($2>>>0);
 $$027$ = $11 ? $$027 : $2;
 _memcpy(($1|0),($4|0),($$027$|0))|0;
 $12 = (($4) + ($$027$)|0);
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = (($4) + ($$027)|0);
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = $14;
 HEAP32[$3>>2] = $14;
 return ($$027$|0);
}
function _fseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___fseeko($0,$1,$2)|0);
 return ($3|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___fseeko($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 76|0);
 $4 = (Atomics_load(HEAP32,$3>>2)|0);
 $5 = ($4|0)>(-1);
 if ($5) {
  $7 = (___lockfile($0)|0);
  $phitmp = ($7|0)==(0);
  $8 = (___fseeko_unlocked($0,$1,$2)|0);
  if ($phitmp) {
   $9 = $8;
  } else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else {
  $6 = (___fseeko_unlocked($0,$1,$2)|0);
  $9 = $6;
 }
 return ($9|0);
}
function ___fseeko_unlocked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) - ($5))|0;
  $9 = (($8) + ($7))|0;
  $$019 = $9;
 } else {
  $$019 = $1;
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 if ($14) {
  $15 = ((($0)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiii[$16 & 63]($0,0,0)|0);
  $17 = HEAP32[$10>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($0)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $20 = ((($0)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 63]($0,$$019,$2)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   $$0 = -1;
  } else {
   $24 = ((($0)) + 8|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   $27 = $26 & -17;
   HEAP32[$0>>2] = $27;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $$0 = $0;
  } else {
   $4 = $2 << 24 >> 24;
   $5 = (_strchr($0,$4)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    $$0 = 0;
   } else {
    $7 = ((($1)) + 1|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $$0 = $5;
    } else {
     $10 = ((($5)) + 1|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)==(0);
     if ($12) {
      $$0 = 0;
     } else {
      $13 = ((($1)) + 2|0);
      $14 = HEAP8[$13>>0]|0;
      $15 = ($14<<24>>24)==(0);
      if ($15) {
       $16 = (_twobyte_strstr($5,$1)|0);
       $$0 = $16;
       break;
      }
      $17 = ((($5)) + 2|0);
      $18 = HEAP8[$17>>0]|0;
      $19 = ($18<<24>>24)==(0);
      if ($19) {
       $$0 = 0;
      } else {
       $20 = ((($1)) + 3|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = ($21<<24>>24)==(0);
       if ($22) {
        $23 = (_threebyte_strstr($5,$1)|0);
        $$0 = $23;
        break;
       }
       $24 = ((($5)) + 3|0);
       $25 = HEAP8[$24>>0]|0;
       $26 = ($25<<24>>24)==(0);
       if ($26) {
        $$0 = 0;
       } else {
        $27 = ((($1)) + 4|0);
        $28 = HEAP8[$27>>0]|0;
        $29 = ($28<<24>>24)==(0);
        if ($29) {
         $30 = (_fourbyte_strstr($5,$1)|0);
         $$0 = $30;
         break;
        } else {
         $31 = (_twoway_strstr($5,$1)|0);
         $$0 = $31;
         break;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _twobyte_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$lcssa = 0, $$sink = 0, $$sink$in = 0, $$sink$masked = 0, $$sink17$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 8;
 $5 = ((($1)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $4 | $7;
 $9 = HEAP8[$0>>0]|0;
 $10 = $9&255;
 $$sink$in = $10;$$sink17$sink = $0;
 while(1) {
  $11 = ((($$sink17$sink)) + 1|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   $$lcssa = 0;
   break;
  }
  $$sink = $$sink$in << 8;
  $14 = $12&255;
  $$sink$masked = $$sink & 65280;
  $15 = $14 | $$sink$masked;
  $16 = ($15|0)==($8|0);
  if ($16) {
   $$lcssa = $$sink17$sink;
   break;
  } else {
   $$sink$in = $15;$$sink17$sink = $11;
  }
 }
 return ($$lcssa|0);
}
function _threebyte_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$016$lcssa = 0, $$01619 = 0, $$020 = 0, $$lcssa = 0, $$not = 0, $$not17 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 24;
 $5 = ((($1)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 << 16;
 $9 = $8 | $4;
 $10 = ((($1)) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 8;
 $14 = $9 | $13;
 $15 = HEAP8[$0>>0]|0;
 $16 = $15&255;
 $17 = $16 << 24;
 $18 = ((($0)) + 1|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 << 16;
 $22 = $21 | $17;
 $23 = ((($0)) + 2|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 << 8;
 $27 = $22 | $26;
 $28 = ($24<<24>>24)!=(0);
 $$not17 = $28 ^ 1;
 $29 = ($27|0)==($14|0);
 $or$cond18 = $29 | $$not17;
 if ($or$cond18) {
  $$016$lcssa = $23;$$lcssa = $28;
 } else {
  $$01619 = $23;$$020 = $27;
  while(1) {
   $30 = ((($$01619)) + 1|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = $32 | $$020;
   $34 = $33 << 8;
   $35 = ($31<<24>>24)!=(0);
   $$not = $35 ^ 1;
   $36 = ($34|0)==($14|0);
   $or$cond = $36 | $$not;
   if ($or$cond) {
    $$016$lcssa = $30;$$lcssa = $35;
    break;
   } else {
    $$01619 = $30;$$020 = $34;
   }
  }
 }
 $37 = ((($$016$lcssa)) + -2|0);
 $38 = $$lcssa ? $37 : 0;
 return ($38|0);
}
function _fourbyte_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$lcssa = 0, $$not = 0, $$not22 = 0, $$sink21$lcssa = 0, $$sink2124 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 24;
 $5 = ((($1)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 << 16;
 $9 = $8 | $4;
 $10 = ((($1)) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 8;
 $14 = $9 | $13;
 $15 = ((($1)) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $14 | $17;
 $19 = HEAP8[$0>>0]|0;
 $20 = $19&255;
 $21 = $20 << 24;
 $22 = ((($0)) + 1|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 << 16;
 $26 = $25 | $21;
 $27 = ((($0)) + 2|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 << 8;
 $31 = $26 | $30;
 $32 = ((($0)) + 3|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $34 | $31;
 $36 = ($33<<24>>24)!=(0);
 $$not22 = $36 ^ 1;
 $37 = ($35|0)==($18|0);
 $or$cond23 = $37 | $$not22;
 if ($or$cond23) {
  $$lcssa = $36;$$sink21$lcssa = $32;
 } else {
  $$sink2124 = $32;$39 = $35;
  while(1) {
   $38 = $39 << 8;
   $40 = ((($$sink2124)) + 1|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = $42 | $38;
   $44 = ($41<<24>>24)!=(0);
   $$not = $44 ^ 1;
   $45 = ($43|0)==($18|0);
   $or$cond = $45 | $$not;
   if ($or$cond) {
    $$lcssa = $44;$$sink21$lcssa = $40;
    break;
   } else {
    $$sink2124 = $40;$39 = $43;
   }
  }
 }
 $46 = ((($$sink21$lcssa)) + -3|0);
 $47 = $$lcssa ? $46 : 0;
 return ($47|0);
}
function _twoway_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$ph$ph$lcssa220 = 0, $$0175$ph$ph$lcssa220323 = 0, $$0175$ph$ph256 = 0, $$0179244 = 0, $$0183$ph200$ph255 = 0, $$0183$ph200250 = 0, $$0183$ph262 = 0, $$0185$ph$lcssa = 0, $$0185$ph$lcssa322 = 0, $$0185$ph261 = 0, $$0187$lcssa320321 = 0, $$0187266 = 0, $$1176$$0175 = 0, $$1176$ph$ph$lcssa211 = 0, $$1176$ph$ph235 = 0;
 var $$1180224 = 0, $$1184$ph196$ph234 = 0, $$1184$ph196229 = 0, $$1184$ph241 = 0, $$1186$$0185 = 0, $$1186$$0185$ = 0, $$1186$ph$lcssa = 0, $$1186$ph240 = 0, $$2181 = 0, $$2181$sink = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182223 = 0, $$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond191 = 0, $cond191222 = 0, $cond265 = 0, $div = 0, $div188 = 0, $or$cond = 0, $or$cond190 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $2 = sp + 1024|0;
 $3 = sp;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
 $4 = HEAP8[$1>>0]|0;
 $cond265 = ($4<<24>>24)==(0);
 L1: do {
  if ($cond265) {
   $$0175$ph$ph$lcssa220323 = 1;$$0185$ph$lcssa322 = -1;$$0187$lcssa320321 = 0;$$1176$ph$ph$lcssa211 = 1;$$1186$ph$lcssa = -1;
   label = 27;
  } else {
   $5 = $4&255;
   $$0187266 = 0;$12 = $4;$20 = $5;
   while(1) {
    $8 = (($0) + ($$0187266)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(0);
    if ($10) {
     $$3 = 0;
     break L1;
    }
    $11 = $12 & 31;
    $13 = $11&255;
    $14 = 1 << $13;
    $div188 = ($12&255) >>> 5;
    $15 = $div188&255;
    $16 = (($2) + ($15<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $17 | $14;
    HEAP32[$16>>2] = $18;
    $6 = (($$0187266) + 1)|0;
    $19 = (($3) + ($20<<2)|0);
    HEAP32[$19>>2] = $6;
    $21 = (($1) + ($6)|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = $22&255;
    $cond = ($22<<24>>24)==(0);
    if ($cond) {
     break;
    } else {
     $$0187266 = $6;$12 = $22;$20 = $23;
    }
   }
   $7 = ($6>>>0)>(1);
   if ($7) {
    $$0183$ph262 = 0;$$0185$ph261 = -1;$129 = 1;
    L7: while(1) {
     $$0175$ph$ph256 = 1;$$0183$ph200$ph255 = $$0183$ph262;$132 = $129;
     while(1) {
      $$0183$ph200250 = $$0183$ph200$ph255;$131 = $132;
      L11: while(1) {
       $$0179244 = 1;$31 = $131;
       while(1) {
        $27 = (($$0179244) + ($$0185$ph261))|0;
        $28 = (($1) + ($27)|0);
        $29 = HEAP8[$28>>0]|0;
        $30 = (($1) + ($31)|0);
        $32 = HEAP8[$30>>0]|0;
        $33 = ($29<<24>>24)==($32<<24>>24);
        if (!($33)) {
         break L11;
        }
        $34 = ($$0179244|0)==($$0175$ph$ph256|0);
        $25 = (($$0179244) + 1)|0;
        if ($34) {
         break;
        }
        $24 = (($25) + ($$0183$ph200250))|0;
        $26 = ($24>>>0)<($6>>>0);
        if ($26) {
         $$0179244 = $25;$31 = $24;
        } else {
         $$0175$ph$ph$lcssa220 = $$0175$ph$ph256;$$0185$ph$lcssa = $$0185$ph261;
         break L7;
        }
       }
       $35 = (($$0175$ph$ph256) + ($$0183$ph200250))|0;
       $36 = (($35) + 1)|0;
       $37 = ($36>>>0)<($6>>>0);
       if ($37) {
        $$0183$ph200250 = $35;$131 = $36;
       } else {
        $$0175$ph$ph$lcssa220 = $$0175$ph$ph256;$$0185$ph$lcssa = $$0185$ph261;
        break L7;
       }
      }
      $38 = ($29&255)>($32&255);
      $39 = (($31) - ($$0185$ph261))|0;
      if (!($38)) {
       break;
      }
      $43 = (($31) + 1)|0;
      $44 = ($43>>>0)<($6>>>0);
      if ($44) {
       $$0175$ph$ph256 = $39;$$0183$ph200$ph255 = $31;$132 = $43;
      } else {
       $$0175$ph$ph$lcssa220 = $39;$$0185$ph$lcssa = $$0185$ph261;
       break L7;
      }
     }
     $40 = (($$0183$ph200250) + 1)|0;
     $41 = (($$0183$ph200250) + 2)|0;
     $42 = ($41>>>0)<($6>>>0);
     if ($42) {
      $$0183$ph262 = $40;$$0185$ph261 = $$0183$ph200250;$129 = $41;
     } else {
      $$0175$ph$ph$lcssa220 = 1;$$0185$ph$lcssa = $$0183$ph200250;
      break;
     }
    }
    if ($7) {
     $$1184$ph241 = 0;$$1186$ph240 = -1;$130 = 1;
     while(1) {
      $$1176$ph$ph235 = 1;$$1184$ph196$ph234 = $$1184$ph241;$134 = $130;
      while(1) {
       $$1184$ph196229 = $$1184$ph196$ph234;$133 = $134;
       L26: while(1) {
        $$1180224 = 1;$52 = $133;
        while(1) {
         $48 = (($$1180224) + ($$1186$ph240))|0;
         $49 = (($1) + ($48)|0);
         $50 = HEAP8[$49>>0]|0;
         $51 = (($1) + ($52)|0);
         $53 = HEAP8[$51>>0]|0;
         $54 = ($50<<24>>24)==($53<<24>>24);
         if (!($54)) {
          break L26;
         }
         $55 = ($$1180224|0)==($$1176$ph$ph235|0);
         $46 = (($$1180224) + 1)|0;
         if ($55) {
          break;
         }
         $45 = (($46) + ($$1184$ph196229))|0;
         $47 = ($45>>>0)<($6>>>0);
         if ($47) {
          $$1180224 = $46;$52 = $45;
         } else {
          $$0175$ph$ph$lcssa220323 = $$0175$ph$ph$lcssa220;$$0185$ph$lcssa322 = $$0185$ph$lcssa;$$0187$lcssa320321 = $6;$$1176$ph$ph$lcssa211 = $$1176$ph$ph235;$$1186$ph$lcssa = $$1186$ph240;
          label = 27;
          break L1;
         }
        }
        $56 = (($$1176$ph$ph235) + ($$1184$ph196229))|0;
        $57 = (($56) + 1)|0;
        $58 = ($57>>>0)<($6>>>0);
        if ($58) {
         $$1184$ph196229 = $56;$133 = $57;
        } else {
         $$0175$ph$ph$lcssa220323 = $$0175$ph$ph$lcssa220;$$0185$ph$lcssa322 = $$0185$ph$lcssa;$$0187$lcssa320321 = $6;$$1176$ph$ph$lcssa211 = $$1176$ph$ph235;$$1186$ph$lcssa = $$1186$ph240;
         label = 27;
         break L1;
        }
       }
       $59 = ($50&255)<($53&255);
       $60 = (($52) - ($$1186$ph240))|0;
       if (!($59)) {
        break;
       }
       $64 = (($52) + 1)|0;
       $65 = ($64>>>0)<($6>>>0);
       if ($65) {
        $$1176$ph$ph235 = $60;$$1184$ph196$ph234 = $52;$134 = $64;
       } else {
        $$0175$ph$ph$lcssa220323 = $$0175$ph$ph$lcssa220;$$0185$ph$lcssa322 = $$0185$ph$lcssa;$$0187$lcssa320321 = $6;$$1176$ph$ph$lcssa211 = $60;$$1186$ph$lcssa = $$1186$ph240;
        label = 27;
        break L1;
       }
      }
      $61 = (($$1184$ph196229) + 1)|0;
      $62 = (($$1184$ph196229) + 2)|0;
      $63 = ($62>>>0)<($6>>>0);
      if ($63) {
       $$1184$ph241 = $61;$$1186$ph240 = $$1184$ph196229;$130 = $62;
      } else {
       $$0175$ph$ph$lcssa220323 = $$0175$ph$ph$lcssa220;$$0185$ph$lcssa322 = $$0185$ph$lcssa;$$0187$lcssa320321 = $6;$$1176$ph$ph$lcssa211 = 1;$$1186$ph$lcssa = $$1184$ph196229;
       label = 27;
       break;
      }
     }
    } else {
     $$0175$ph$ph$lcssa220323 = $$0175$ph$ph$lcssa220;$$0185$ph$lcssa322 = $$0185$ph$lcssa;$$0187$lcssa320321 = $6;$$1176$ph$ph$lcssa211 = 1;$$1186$ph$lcssa = -1;
     label = 27;
    }
   } else {
    $$0175$ph$ph$lcssa220323 = 1;$$0185$ph$lcssa322 = -1;$$0187$lcssa320321 = $6;$$1176$ph$ph$lcssa211 = 1;$$1186$ph$lcssa = -1;
    label = 27;
   }
  }
 } while(0);
 L36: do {
  if ((label|0) == 27) {
   $66 = (($$1186$ph$lcssa) + 1)|0;
   $67 = (($$0185$ph$lcssa322) + 1)|0;
   $68 = ($66>>>0)>($67>>>0);
   $$1176$$0175 = $68 ? $$1176$ph$ph$lcssa211 : $$0175$ph$ph$lcssa220323;
   $$1186$$0185 = $68 ? $$1186$ph$lcssa : $$0185$ph$lcssa322;
   $69 = (($1) + ($$1176$$0175)|0);
   $70 = (($$1186$$0185) + 1)|0;
   $71 = (_memcmp($1,$69,$70)|0);
   $72 = ($71|0)==(0);
   if ($72) {
    $77 = (($$0187$lcssa320321) - ($$1176$$0175))|0;
    $$0168 = $77;$$3178 = $$1176$$0175;
   } else {
    $73 = (($$0187$lcssa320321) - ($$1186$$0185))|0;
    $74 = (($73) + -1)|0;
    $75 = ($$1186$$0185>>>0)>($74>>>0);
    $$1186$$0185$ = $75 ? $$1186$$0185 : $74;
    $76 = (($$1186$$0185$) + 1)|0;
    $$0168 = 0;$$3178 = $76;
   }
   $78 = $$0187$lcssa320321 | 63;
   $79 = (($$0187$lcssa320321) + -1)|0;
   $80 = ($$0168|0)!=(0);
   $81 = (($$0187$lcssa320321) - ($$3178))|0;
   $$0166 = $0;$$0169 = 0;$$0170 = $0;
   while(1) {
    $82 = $$0170;
    $83 = $$0166;
    $84 = (($82) - ($83))|0;
    $85 = ($84>>>0)<($$0187$lcssa320321>>>0);
    do {
     if ($85) {
      $86 = (_memchr($$0170,0,$78)|0);
      $87 = ($86|0)==(0|0);
      if ($87) {
       $91 = (($$0170) + ($78)|0);
       $$3173 = $91;
       break;
      } else {
       $88 = $86;
       $89 = (($88) - ($83))|0;
       $90 = ($89>>>0)<($$0187$lcssa320321>>>0);
       if ($90) {
        $$3 = 0;
        break L36;
       } else {
        $$3173 = $86;
        break;
       }
      }
     } else {
      $$3173 = $$0170;
     }
    } while(0);
    $92 = (($$0166) + ($79)|0);
    $93 = HEAP8[$92>>0]|0;
    $div = ($93&255) >>> 5;
    $94 = $div&255;
    $95 = (($2) + ($94<<2)|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $93 & 31;
    $98 = $97&255;
    $99 = 1 << $98;
    $100 = $99 & $96;
    $101 = ($100|0)==(0);
    L50: do {
     if ($101) {
      $$0169$be = 0;$$2181$sink = $$0187$lcssa320321;
     } else {
      $102 = $93&255;
      $103 = (($3) + ($102<<2)|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = (($$0187$lcssa320321) - ($104))|0;
      $106 = ($105|0)==(0);
      if (!($106)) {
       $107 = ($$0169|0)!=(0);
       $or$cond = $80 & $107;
       $108 = ($105>>>0)<($$3178>>>0);
       $or$cond190 = $or$cond & $108;
       $$2181 = $or$cond190 ? $81 : $105;
       $$0169$be = 0;$$2181$sink = $$2181;
       break;
      }
      $110 = ($70>>>0)>($$0169>>>0);
      $111 = $110 ? $70 : $$0169;
      $112 = (($1) + ($111)|0);
      $113 = HEAP8[$112>>0]|0;
      $cond191222 = ($113<<24>>24)==(0);
      L55: do {
       if ($cond191222) {
        $$4 = $70;
       } else {
        $$3182223 = $111;$116 = $113;
        while(1) {
         $114 = (($$0166) + ($$3182223)|0);
         $115 = HEAP8[$114>>0]|0;
         $117 = ($116<<24>>24)==($115<<24>>24);
         if (!($117)) {
          break;
         }
         $118 = (($$3182223) + 1)|0;
         $119 = (($1) + ($118)|0);
         $120 = HEAP8[$119>>0]|0;
         $cond191 = ($120<<24>>24)==(0);
         if ($cond191) {
          $$4 = $70;
          break L55;
         } else {
          $$3182223 = $118;$116 = $120;
         }
        }
        $121 = (($$3182223) - ($$1186$$0185))|0;
        $$0169$be = 0;$$2181$sink = $121;
        break L50;
       }
      } while(0);
      while(1) {
       $122 = ($$4>>>0)>($$0169>>>0);
       if (!($122)) {
        $$3 = $$0166;
        break L36;
       }
       $123 = (($$4) + -1)|0;
       $124 = (($1) + ($123)|0);
       $125 = HEAP8[$124>>0]|0;
       $126 = (($$0166) + ($123)|0);
       $127 = HEAP8[$126>>0]|0;
       $128 = ($125<<24>>24)==($127<<24>>24);
       if ($128) {
        $$4 = $123;
       } else {
        $$0169$be = $$0168;$$2181$sink = $$3178;
        break;
       }
      }
     }
    } while(0);
    $109 = (($$0166) + ($$2181$sink)|0);
    $$0166 = $109;$$0169 = $$0169$be;$$0170 = $$3173;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function _access($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $3 = (___syscall33(33,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _strrchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($2) + 1)|0;
 $4 = (___memrchr($0,$1,$3)|0);
 return ($4|0);
}
function ___memrchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$09 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1&255;
 $$09 = $2;
 while(1) {
  $4 = (($$09) + -1)|0;
  $5 = ($$09|0)==(0);
  if ($5) {
   $$0 = 0;
   break;
  }
  $6 = (($0) + ($4)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==($3<<24>>24);
  if ($8) {
   $$0 = $6;
   break;
  } else {
   $$09 = $4;
  }
 }
 return ($$0|0);
}
function _socket($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$017 = 0, $$old = 0, $$old18 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer2 = 0;
 var $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 72|0;
 $4 = sp + 48|0;
 HEAP32[$3>>2] = $0;
 $5 = ((($3)) + 4|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($3)) + 8|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($3)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($3)) + 16|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($3)) + 20|0);
 HEAP32[$9>>2] = 0;
 $10 = $3;
 HEAP32[$vararg_buffer>>2] = 1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 $11 = (___syscall102(102,($vararg_buffer|0))|0);
 $12 = (___syscall_ret($11)|0);
 $13 = ($12|0)<(0);
 do {
  if ($13) {
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(22);
   if ($16) {
    $$old = $1 & 526336;
    $$old18 = ($$old|0)==(0);
    if ($$old18) {
     $$017 = $12;
     break;
    }
   } else {
    $17 = (___errno_location()|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)!=(93);
    $20 = $1 & 526336;
    $21 = ($20|0)==(0);
    $or$cond = $21 | $19;
    if ($or$cond) {
     $$017 = $12;
     break;
    }
   }
   HEAP32[$4>>2] = $0;
   $22 = ((($4)) + 4|0);
   $23 = $1 & -526337;
   HEAP32[$22>>2] = $23;
   $24 = ((($4)) + 8|0);
   HEAP32[$24>>2] = $2;
   $25 = ((($4)) + 12|0);
   HEAP32[$25>>2] = 0;
   $26 = ((($4)) + 16|0);
   HEAP32[$26>>2] = 0;
   $27 = ((($4)) + 20|0);
   HEAP32[$27>>2] = 0;
   $28 = $4;
   HEAP32[$vararg_buffer2>>2] = 1;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $28;
   $29 = (___syscall102(102,($vararg_buffer2|0))|0);
   $30 = (___syscall_ret($29)|0);
   $31 = ($30|0)<(0);
   if ($31) {
    $$017 = $30;
   } else {
    $32 = $1 & 524288;
    $33 = ($32|0)==(0);
    if (!($33)) {
     HEAP32[$vararg_buffer6>>2] = $30;
     $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
     HEAP32[$vararg_ptr9>>2] = 2;
     $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
     HEAP32[$vararg_ptr10>>2] = 1;
     (___syscall221(221,($vararg_buffer6|0))|0);
    }
    $34 = $1 & 2048;
    $35 = ($34|0)==(0);
    if ($35) {
     $$017 = $30;
    } else {
     HEAP32[$vararg_buffer11>>2] = $30;
     $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
     HEAP32[$vararg_ptr14>>2] = 4;
     $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
     HEAP32[$vararg_ptr15>>2] = 2048;
     (___syscall221(221,($vararg_buffer11|0))|0);
     $$017 = $30;
    }
   }
  } else {
   $$017 = $12;
  }
 } while(0);
 STACKTOP = sp;return ($$017|0);
}
function _connect($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 HEAP32[$3>>2] = $0;
 $4 = ((($3)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 $6 = ((($3)) + 8|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($3)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($3)) + 16|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($3)) + 20|0);
 HEAP32[$9>>2] = 0;
 $10 = $3;
 HEAP32[$vararg_buffer>>2] = 3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 $11 = (___syscall102(102,($vararg_buffer|0))|0);
 $12 = (___syscall_ret($11)|0);
 STACKTOP = sp;return ($12|0);
}
function _send($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_sendto($0,$1,$2,$3,0,0)|0);
 return ($4|0);
}
function _sendto($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $6 = sp + 8|0;
 HEAP32[$6>>2] = $0;
 $7 = ((($6)) + 4|0);
 $8 = $1;
 HEAP32[$7>>2] = $8;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = $2;
 $10 = ((($6)) + 12|0);
 HEAP32[$10>>2] = $3;
 $11 = ((($6)) + 16|0);
 $12 = $4;
 HEAP32[$11>>2] = $12;
 $13 = ((($6)) + 20|0);
 HEAP32[$13>>2] = $5;
 $14 = $6;
 HEAP32[$vararg_buffer>>2] = 11;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $14;
 $15 = (___syscall102(102,($vararg_buffer|0))|0);
 $16 = (___syscall_ret($15)|0);
 STACKTOP = sp;return ($16|0);
}
function _htons($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___bswap_16($0)|0);
 return ($1|0);
}
function _htonl($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___bswap_32($0)|0);
 return ($1|0);
}
function _setsockopt($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = sp + 8|0;
 HEAP32[$5>>2] = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $1;
 $7 = ((($5)) + 8|0);
 HEAP32[$7>>2] = $2;
 $8 = ((($5)) + 12|0);
 $9 = $3;
 HEAP32[$8>>2] = $9;
 $10 = ((($5)) + 16|0);
 HEAP32[$10>>2] = $4;
 $11 = ((($5)) + 20|0);
 HEAP32[$11>>2] = 0;
 $12 = $5;
 HEAP32[$vararg_buffer>>2] = 14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $12;
 $13 = (___syscall102(102,($vararg_buffer|0))|0);
 $14 = (___syscall_ret($13)|0);
 STACKTOP = sp;return ($14|0);
}
function _recvfrom($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $6 = sp + 8|0;
 HEAP32[$6>>2] = $0;
 $7 = ((($6)) + 4|0);
 $8 = $1;
 HEAP32[$7>>2] = $8;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = $2;
 $10 = ((($6)) + 12|0);
 HEAP32[$10>>2] = $3;
 $11 = ((($6)) + 16|0);
 $12 = $4;
 HEAP32[$11>>2] = $12;
 $13 = ((($6)) + 20|0);
 $14 = $5;
 HEAP32[$13>>2] = $14;
 $15 = $6;
 HEAP32[$vararg_buffer>>2] = 12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $16 = (___syscall102(102,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 STACKTOP = sp;return ($17|0);
}
function ___bswap_32($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_llvm_bswap_i32(($0|0))|0);
 return ($1|0);
}
function ___bswap_16($0) {
 $0 = $0|0;
 var $rev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev = (_llvm_bswap_i16(($0|0))|0);
 return ($rev|0);
}
function _freeaddrinfo($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function _recv($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_recvfrom($0,$1,$2,$3,0,0)|0);
 return ($4|0);
}
function _strncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($0,$1,$2)|0);
 return ($0|0);
}
function ___stpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03753 = 0, $$038$lcssa = 0, $$038$lcssa79 = 0, $$03866 = 0, $$039$lcssa = 0, $$039$lcssa78 = 0, $$03965 = 0, $$041$lcssa = 0, $$041$lcssa77 = 0, $$04164 = 0, $$054 = 0, $$1$lcssa = 0, $$140$ph = 0, $$14046 = 0, $$142$ph = 0, $$14245 = 0, $$152 = 0, $$2$ph = 0;
 var $$243 = 0, $$247 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = $3 ^ $4;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = $3 & 3;
   $9 = ($8|0)!=(0);
   $10 = ($2|0)!=(0);
   $or$cond63 = $10 & $9;
   L3: do {
    if ($or$cond63) {
     $$03866 = $2;$$03965 = $1;$$04164 = $0;
     while(1) {
      $11 = HEAP8[$$03965>>0]|0;
      HEAP8[$$04164>>0] = $11;
      $12 = ($11<<24>>24)==(0);
      if ($12) {
       $$038$lcssa79 = $$03866;$$039$lcssa78 = $$03965;$$041$lcssa77 = $$04164;
       break L3;
      }
      $13 = (($$03866) + -1)|0;
      $14 = ((($$03965)) + 1|0);
      $15 = ((($$04164)) + 1|0);
      $16 = $14;
      $17 = $16 & 3;
      $18 = ($17|0)!=(0);
      $19 = ($13|0)!=(0);
      $or$cond = $19 & $18;
      if ($or$cond) {
       $$03866 = $13;$$03965 = $14;$$04164 = $15;
      } else {
       $$038$lcssa = $13;$$039$lcssa = $14;$$041$lcssa = $15;$$lcssa = $19;
       label = 5;
       break;
      }
     }
    } else {
     $$038$lcssa = $2;$$039$lcssa = $1;$$041$lcssa = $0;$$lcssa = $10;
     label = 5;
    }
   } while(0);
   if ((label|0) == 5) {
    if ($$lcssa) {
     $$038$lcssa79 = $$038$lcssa;$$039$lcssa78 = $$039$lcssa;$$041$lcssa77 = $$041$lcssa;
    } else {
     $$243 = $$041$lcssa;$$3 = 0;
     break;
    }
   }
   $20 = HEAP8[$$039$lcssa78>>0]|0;
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    $$243 = $$041$lcssa77;$$3 = $$038$lcssa79;
   } else {
    $22 = ($$038$lcssa79>>>0)>(3);
    L11: do {
     if ($22) {
      $$03753 = $$041$lcssa77;$$054 = $$039$lcssa78;$$152 = $$038$lcssa79;
      while(1) {
       $23 = HEAP32[$$054>>2]|0;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        $$0$lcssa = $$054;$$037$lcssa = $$03753;$$1$lcssa = $$152;
        break L11;
       }
       HEAP32[$$03753>>2] = $23;
       $29 = (($$152) + -4)|0;
       $30 = ((($$054)) + 4|0);
       $31 = ((($$03753)) + 4|0);
       $32 = ($29>>>0)>(3);
       if ($32) {
        $$03753 = $31;$$054 = $30;$$152 = $29;
       } else {
        $$0$lcssa = $30;$$037$lcssa = $31;$$1$lcssa = $29;
        break;
       }
      }
     } else {
      $$0$lcssa = $$039$lcssa78;$$037$lcssa = $$041$lcssa77;$$1$lcssa = $$038$lcssa79;
     }
    } while(0);
    $$140$ph = $$0$lcssa;$$142$ph = $$037$lcssa;$$2$ph = $$1$lcssa;
    label = 11;
   }
  } else {
   $$140$ph = $1;$$142$ph = $0;$$2$ph = $2;
   label = 11;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   $33 = ($$2$ph|0)==(0);
   if ($33) {
    $$243 = $$142$ph;$$3 = 0;
   } else {
    $$14046 = $$140$ph;$$14245 = $$142$ph;$$247 = $$2$ph;
    while(1) {
     $34 = HEAP8[$$14046>>0]|0;
     HEAP8[$$14245>>0] = $34;
     $35 = ($34<<24>>24)==(0);
     if ($35) {
      $$243 = $$14245;$$3 = $$247;
      break L16;
     }
     $36 = (($$247) + -1)|0;
     $37 = ((($$14046)) + 1|0);
     $38 = ((($$14245)) + 1|0);
     $39 = ($36|0)==(0);
     if ($39) {
      $$243 = $38;$$3 = 0;
      break;
     } else {
      $$14046 = $37;$$14245 = $38;$$247 = $36;
     }
    }
   }
  }
 } while(0);
 _memset(($$243|0),0,($$3|0))|0;
 return ($$243|0);
}
function _ntohs($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___bswap_16_488($0)|0);
 return ($1|0);
}
function ___bswap_16_488($0) {
 $0 = $0|0;
 var $rev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev = (_llvm_bswap_i16(($0|0))|0);
 return ($rev|0);
}
function _select($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $6;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $7;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $8;
 $9 = (___syscall142(142,($vararg_buffer|0))|0);
 $10 = (___syscall_ret($9)|0);
 STACKTOP = sp;return ($10|0);
}
function ___ftello($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = (Atomics_load(HEAP32,$1>>2)|0);
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($0)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___ftello_unlocked($0)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   $7 = $6;
  }
 } else {
  $4 = (___ftello_unlocked($0)|0);
  $7 = $4;
 }
 return ($7|0);
}
function ___ftello_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 128;
 $5 = ($4|0)==(0);
 if ($5) {
  $11 = 1;
 } else {
  $6 = ((($0)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7>>>0)>($9>>>0);
  $phitmp = $10 ? 2 : 1;
  $11 = $phitmp;
 }
 $12 = (FUNCTION_TABLE_iiii[$2 & 63]($0,0,$11)|0);
 $13 = ($12|0)<(0);
 if ($13) {
  $$0 = $12;
 } else {
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($0)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($12) - ($15))|0;
  $23 = (($22) + ($17))|0;
  $24 = (($23) + ($19))|0;
  $25 = (($24) - ($21))|0;
  $$0 = $25;
 }
 return ($$0|0);
}
function _fileno($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = (Atomics_load(HEAP32,$1>>2)|0);
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $phitmp = ($4|0)==(0);
  if (!($phitmp)) {
  }
 }
 $5 = ((($0)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = (Atomics_load(HEAP32,$2>>2)|0);
 $4 = ($3|0)<(0);
 $5 = $0&255;
 $6 = $0 & 255;
 if ($4) {
  label = 3;
 } else {
  $7 = (___lockfile($1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   label = 3;
  } else {
   $20 = ((($1)) + 75|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($6|0)==($22|0);
   if ($23) {
    label = 10;
   } else {
    $24 = ((($1)) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($1)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25>>>0)<($27>>>0);
    if ($28) {
     $29 = ((($25)) + 1|0);
     HEAP32[$24>>2] = $29;
     HEAP8[$25>>0] = $5;
     $31 = $6;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($1,$0)|0);
    $31 = $30;
   }
   ___unlockfile($1);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($6|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $5;
     $$0 = $6;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054$ph = 0, $$05460 = 0, $$056$ph = 0, $$05659 = 0, $$57 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = (Atomics_load(HEAP32,$6>>2)|0);
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $35 = $9;
 } else {
  $35 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19;
 $21 = (($17) - ($20))|0;
 $22 = ($21|0)>(0);
 $23 = ($21>>>0)<($4>>>0);
 $$57 = $23 ? $21 : $4;
 if ($22) {
  $24 = (($4) - ($$57))|0;
  $25 = (($0) + ($$57)|0);
  _memcpy(($0|0),($19|0),($$57|0))|0;
  $26 = (($19) + ($$57)|0);
  HEAP32[$18>>2] = $26;
  $$054$ph = $24;$$056$ph = $25;
 } else {
  $$054$ph = $4;$$056$ph = $0;
 }
 $27 = ($$054$ph|0)==(0);
 L7: do {
  if ($27) {
   label = 13;
  } else {
   $28 = ((($3)) + 32|0);
   $$05460 = $$054$ph;$$05659 = $$056$ph;
   while(1) {
    $29 = (___toread($3)|0);
    $30 = ($29|0)==(0);
    if (!($30)) {
     break;
    }
    $31 = HEAP32[$28>>2]|0;
    $32 = (FUNCTION_TABLE_iiii[$31 & 63]($3,$$05659,$$05460)|0);
    $33 = (($32) + 1)|0;
    $34 = ($33>>>0)<(2);
    if ($34) {
     break;
    }
    $39 = (($$05460) - ($32))|0;
    $40 = (($$05659) + ($32)|0);
    $41 = ($39|0)==(0);
    if ($41) {
     label = 13;
     break L7;
    } else {
     $$05460 = $39;$$05659 = $40;
    }
   }
   $36 = ($35|0)==(0);
   if (!($36)) {
    ___unlockfile($3);
   }
   $37 = (($4) - ($$05460))|0;
   $38 = (($37>>>0) / ($1>>>0))&-1;
   $$0 = $38;
  }
 } while(0);
 if ((label|0) == 13) {
  $42 = ($35|0)==(0);
  if ($42) {
   $$0 = $$;
  } else {
   ___unlockfile($3);
   $$0 = $$;
  }
 }
 return ($$0|0);
}
function _ftell($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ftello($0)|0);
 return ($1|0);
}
function _perror($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[2398]|0;
 $2 = (___errno_location()|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_strerror($3)|0);
 $5 = ((($1)) + 76|0);
 $6 = (Atomics_load(HEAP32,$5>>2)|0);
 $7 = ($6|0)>(-1);
 if ($7) {
  $8 = (___lockfile($1)|0);
  $14 = $8;
 } else {
  $14 = 0;
 }
 $9 = ($0|0)==(0|0);
 if (!($9)) {
  $10 = HEAP8[$0>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if (!($11)) {
   $12 = (_strlen($0)|0);
   (_fwrite($0,$12,1,$1)|0);
   (_fputc(58,$1)|0);
   (_fputc(32,$1)|0);
  }
 }
 $13 = (_strlen($4)|0);
 (_fwrite($4,$13,1,$1)|0);
 (_fputc(10,$1)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  ___unlockfile($1);
 }
 return;
}
function _printf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[2430]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 STACKTOP = sp;return ($3|0);
}
function _atoi($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01016 = 0, $$011 = 0, $$1$ph = 0, $$112$ph = 0, $$11215 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit14 = 0, $isdigittmp = 0, $isdigittmp13 = 0, $isdigittmp17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 switch ($2|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = 0;$$112$ph = $$011;$7 = $1;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$1$ph = $$0;$$112$ph = $5;$7 = $$pre;
 }
 $6 = $7 << 24 >> 24;
 $isdigittmp13 = (($6) + -48)|0;
 $isdigit14 = ($isdigittmp13>>>0)<(10);
 if ($isdigit14) {
  $$01016 = 0;$$11215 = $$112$ph;$isdigittmp17 = $isdigittmp13;
  while(1) {
   $8 = ($$01016*10)|0;
   $9 = ((($$11215)) + 1|0);
   $10 = (($8) - ($isdigittmp17))|0;
   $11 = HEAP8[$9>>0]|0;
   $12 = $11 << 24 >> 24;
   $isdigittmp = (($12) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$01016 = $10;$$11215 = $9;$isdigittmp17 = $isdigittmp;
   } else {
    $$010$lcssa = $10;
    break;
   }
  }
 } else {
  $$010$lcssa = 0;
 }
 $13 = ($$1$ph|0)!=(0);
 $14 = (0 - ($$010$lcssa))|0;
 $15 = $13 ? $$010$lcssa : $14;
 return ($15|0);
}
function _fsync($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $1 = (___syscall118(118,($vararg_buffer|0))|0);
 $2 = (___syscall_ret($1)|0);
 STACKTOP = sp;return ($2|0);
}
function _ftruncate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = ($1|0)<(0);
 $3 = $2 << 31 >> 31;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $4 = (___syscall194(194,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___pthread_tsd_run_dtors() {
 var $$02427 = 0, $$026 = 0, $$125 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 116|0);
 $$02427 = 0;
 while(1) {
  $$026 = 0;$$125 = 0;
  while(1) {
   $5 = HEAP32[$4>>2]|0;
   $6 = (($5) + ($$026<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$2 = $$125;
   } else {
    $9 = (26500 + ($$026<<2)|0);
    $10 = (Atomics_load(HEAP32,$9>>2)|0);
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$2 = $$125;
    } else {
     HEAP32[$6>>2] = 0;
     $12 = (Atomics_load(HEAP32,$9>>2)|0);
     FUNCTION_TABLE_vi[$12 & 63]($7);
     $$2 = 1;
    }
   }
   $13 = (($$026) + 1)|0;
   $exitcond = ($13|0)==(128);
   if ($exitcond) {
    break;
   } else {
    $$026 = $13;$$125 = $$2;
   }
  }
  $14 = (($$02427) + 1)|0;
  $15 = ($$2|0)!=(0);
  $16 = ($14|0)<(4);
  $17 = $16 & $15;
  if ($17) {
   $$02427 = $14;
  } else {
   break;
  }
 }
 return;
}
function __emscripten_atomic_fetch_and_add_u64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $3 >>> 3;
 $5 = $4 & 255;
 $6 = (25476 + ($5<<2)|0);
 while(1) {
  $7 = (Atomics_exchange(HEAP32, $6>>2, 1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  }
 }
 $9 = $0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (_i64Add(($11|0),($14|0),($1|0),($2|0))|0);
 $16 = tempRet0;
 $17 = $0;
 $18 = $17;
 HEAP32[$18>>2] = $15;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 $21 = (Atomics_store(HEAP32, $6>>2, 0)|0);
 tempRet0 = ($14);
 return ($11|0);
}
function __emscripten_atomic_fetch_and_and_u64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $3 >>> 3;
 $5 = $4 & 255;
 $6 = (25476 + ($5<<2)|0);
 while(1) {
  $7 = (Atomics_exchange(HEAP32, $6>>2, 1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  }
 }
 $9 = $0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $11 & $1;
 $16 = $14 & $2;
 $17 = $0;
 $18 = $17;
 HEAP32[$18>>2] = $15;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 $21 = (Atomics_store(HEAP32, $6>>2, 0)|0);
 tempRet0 = ($14);
 return ($11|0);
}
function __emscripten_atomic_fetch_and_or_u64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $3 >>> 3;
 $5 = $4 & 255;
 $6 = (25476 + ($5<<2)|0);
 while(1) {
  $7 = (Atomics_exchange(HEAP32, $6>>2, 1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  }
 }
 $9 = $0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $11 | $1;
 $16 = $14 | $2;
 $17 = $0;
 $18 = $17;
 HEAP32[$18>>2] = $15;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 $21 = (Atomics_store(HEAP32, $6>>2, 0)|0);
 tempRet0 = ($14);
 return ($11|0);
}
function __emscripten_atomic_fetch_and_sub_u64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $3 >>> 3;
 $5 = $4 & 255;
 $6 = (25476 + ($5<<2)|0);
 while(1) {
  $7 = (Atomics_exchange(HEAP32, $6>>2, 1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  }
 }
 $9 = $0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (_i64Subtract(($11|0),($14|0),($1|0),($2|0))|0);
 $16 = tempRet0;
 $17 = $0;
 $18 = $17;
 HEAP32[$18>>2] = $15;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 $21 = (Atomics_store(HEAP32, $6>>2, 0)|0);
 tempRet0 = ($14);
 return ($11|0);
}
function __emscripten_atomic_fetch_and_xor_u64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $3 >>> 3;
 $5 = $4 & 255;
 $6 = (25476 + ($5<<2)|0);
 while(1) {
  $7 = (Atomics_exchange(HEAP32, $6>>2, 1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  }
 }
 $9 = $0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $11 ^ $1;
 $16 = $14 ^ $2;
 $17 = $0;
 $18 = $17;
 HEAP32[$18>>2] = $15;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 $21 = (Atomics_store(HEAP32, $6>>2, 0)|0);
 tempRet0 = ($14);
 return ($11|0);
}
function _emscripten_async_run_in_main_thread($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$in = 0, $$0$in19 = 0, $$0$lcssa = 0, $$020 = 0, $$expand_i1_val = 0, $$lcssa = 0, $$lcssa18 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $call_queue$init$val = 0, $call_queue$init$val$pre_trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  ___assert_fail((22947|0),(22745|0),251,(22952|0));
  // unreachable;
 }
 $2 = (_emscripten_is_main_runtime_thread()|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  __do_call($0);
  return;
 }
 (___pthread_mutex_lock(24920)|0);
 $call_queue$init$val$pre_trunc = HEAP8[28097]|0;
 $call_queue$init$val = $call_queue$init$val$pre_trunc&1;
 if (!($call_queue$init$val)) {
  $$expand_i1_val = 1;
  HEAP8[28097] = $$expand_i1_val;
 }
 $4 = (Atomics_load(HEAP32, 6237)|0);
 $5 = (Atomics_load(HEAP32, 6238)|0);
 $$0$in19 = (($5) + 1)|0;
 $$020 = (($$0$in19|0) % 128)&-1;
 $6 = ($$020|0)==($4|0);
 if ($6) {
  $7 = $4;
  while(1) {
   (___pthread_mutex_unlock(24920)|0);
   (_emscripten_futex_wait((24948|0),($7|0),inf)|0);
   (___pthread_mutex_lock(24920)|0);
   $8 = (Atomics_load(HEAP32, 6237)|0);
   $9 = (Atomics_load(HEAP32, 6238)|0);
   $$0$in = (($9) + 1)|0;
   $$0 = (($$0$in|0) % 128)&-1;
   $10 = ($$0|0)==($8|0);
   if ($10) {
    $7 = $8;
   } else {
    $$0$lcssa = $$0;$$lcssa = $9;$$lcssa18 = $8;
    break;
   }
  }
 } else {
  $$0$lcssa = $$020;$$lcssa = $5;$$lcssa18 = $4;
 }
 $11 = (24956 + ($$lcssa<<2)|0);
 HEAP32[$11>>2] = $0;
 $12 = ($$lcssa18|0)==($$lcssa|0);
 if ($12) {
  $13 = _emscripten_asm_const_i(7)|0;
 }
 $14 = (Atomics_store(HEAP32, 6238, $$0$lcssa)|0);
 (___pthread_mutex_unlock(24920)|0);
 return;
}
function _emscripten_atomic_add_u64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $3 >>> 3;
 $5 = $4 & 255;
 $6 = (25476 + ($5<<2)|0);
 while(1) {
  $7 = (Atomics_exchange(HEAP32, $6>>2, 1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  }
 }
 $9 = $0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (_i64Add(($11|0),($14|0),($1|0),($2|0))|0);
 $16 = tempRet0;
 $17 = $0;
 $18 = $17;
 HEAP32[$18>>2] = $15;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 $21 = (Atomics_store(HEAP32, $6>>2, 0)|0);
 tempRet0 = ($16);
 return ($15|0);
}
function _emscripten_atomic_and_u64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $3 >>> 3;
 $5 = $4 & 255;
 $6 = (25476 + ($5<<2)|0);
 while(1) {
  $7 = (Atomics_exchange(HEAP32, $6>>2, 1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  }
 }
 $9 = $0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $11 & $1;
 $16 = $14 & $2;
 $17 = $0;
 $18 = $17;
 HEAP32[$18>>2] = $15;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 $21 = (Atomics_store(HEAP32, $6>>2, 0)|0);
 tempRet0 = ($16);
 return ($15|0);
}
function _emscripten_atomic_cas_u64($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $0;
 $6 = $5 >>> 3;
 $7 = $6 & 255;
 $8 = (25476 + ($7<<2)|0);
 while(1) {
  $9 = (Atomics_exchange(HEAP32, $8>>2, 1)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   break;
  }
 }
 $11 = $0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($1|0);
 $18 = ($16|0)==($2|0);
 $19 = $17 & $18;
 if (!($19)) {
  $24 = (Atomics_store(HEAP32, $8>>2, 0)|0);
  tempRet0 = ($16);
  return ($13|0);
 }
 $20 = $0;
 $21 = $20;
 HEAP32[$21>>2] = $3;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $4;
 $24 = (Atomics_store(HEAP32, $8>>2, 0)|0);
 tempRet0 = ($16);
 return ($13|0);
}
function _emscripten_atomic_exchange_u64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $3 >>> 3;
 $5 = $4 & 255;
 $6 = (25476 + ($5<<2)|0);
 while(1) {
  $7 = (Atomics_exchange(HEAP32, $6>>2, 1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  }
 }
 $9 = $0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = $15;
 HEAP32[$16>>2] = $1;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $2;
 $19 = (Atomics_store(HEAP32, $6>>2, 0)|0);
 tempRet0 = ($14);
 return ($11|0);
}
function _emscripten_atomic_load_f32($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (Atomics_load(HEAP32, $0>>2)|0);
 $2 = (HEAP32[tempDoublePtr>>2]=$1,+HEAPF32[tempDoublePtr>>2]);
 return (+$2);
}
function _emscripten_atomic_load_f64($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 >>> 3;
 $3 = $2 & 255;
 $4 = (25476 + ($3<<2)|0);
 while(1) {
  $5 = (Atomics_exchange(HEAP32, $4>>2, 1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  }
 }
 $7 = +HEAPF64[$0>>3];
 $8 = (Atomics_store(HEAP32, $4>>2, 0)|0);
 return (+$7);
}
function _emscripten_atomic_load_u64($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 >>> 3;
 $3 = $2 & 255;
 $4 = (25476 + ($3<<2)|0);
 while(1) {
  $5 = (Atomics_exchange(HEAP32, $4>>2, 1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  }
 }
 $7 = $0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (Atomics_store(HEAP32, $4>>2, 0)|0);
 tempRet0 = ($12);
 return ($9|0);
}
function _emscripten_atomic_or_u64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $3 >>> 3;
 $5 = $4 & 255;
 $6 = (25476 + ($5<<2)|0);
 while(1) {
  $7 = (Atomics_exchange(HEAP32, $6>>2, 1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  }
 }
 $9 = $0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $11 | $1;
 $16 = $14 | $2;
 $17 = $0;
 $18 = $17;
 HEAP32[$18>>2] = $15;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 $21 = (Atomics_store(HEAP32, $6>>2, 0)|0);
 tempRet0 = ($16);
 return ($15|0);
}
function _emscripten_atomic_store_f32($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (HEAPF32[tempDoublePtr>>2]=$1,HEAP32[tempDoublePtr>>2]|0);
 $3 = (Atomics_store(HEAP32, $0>>2, $2)|0);
 $4 = (+($3>>>0));
 return (+$4);
}
function _emscripten_atomic_store_f64($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0;
 $3 = $2 >>> 3;
 $4 = $3 & 255;
 $5 = (25476 + ($4<<2)|0);
 while(1) {
  $6 = (Atomics_exchange(HEAP32, $5>>2, 1)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   break;
  }
 }
 HEAPF64[$0>>3] = $1;
 $8 = (Atomics_store(HEAP32, $5>>2, 0)|0);
 return (+$1);
}
function _emscripten_atomic_store_u64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $3 >>> 3;
 $5 = $4 & 255;
 $6 = (25476 + ($5<<2)|0);
 while(1) {
  $7 = (Atomics_exchange(HEAP32, $6>>2, 1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  }
 }
 $9 = $0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $2;
 $13 = (Atomics_store(HEAP32, $6>>2, 0)|0);
 tempRet0 = ($2);
 return ($1|0);
}
function _emscripten_atomic_sub_u64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $3 >>> 3;
 $5 = $4 & 255;
 $6 = (25476 + ($5<<2)|0);
 while(1) {
  $7 = (Atomics_exchange(HEAP32, $6>>2, 1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  }
 }
 $9 = $0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (_i64Subtract(($11|0),($14|0),($1|0),($2|0))|0);
 $16 = tempRet0;
 $17 = $0;
 $18 = $17;
 HEAP32[$18>>2] = $15;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 $21 = (Atomics_store(HEAP32, $6>>2, 0)|0);
 tempRet0 = ($16);
 return ($15|0);
}
function _emscripten_atomic_xor_u64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $3 >>> 3;
 $5 = $4 & 255;
 $6 = (25476 + ($5<<2)|0);
 while(1) {
  $7 = (Atomics_exchange(HEAP32, $6>>2, 1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  }
 }
 $9 = $0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $11 ^ $1;
 $16 = $14 ^ $2;
 $17 = $0;
 $18 = $17;
 HEAP32[$18>>2] = $15;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 $21 = (Atomics_store(HEAP32, $6>>2, 0)|0);
 tempRet0 = ($16);
 return ($15|0);
}
function _emscripten_main_thread_process_queued_calls() {
 var $$0910 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_emscripten_is_main_runtime_thread()|0);
 $1 = ($0|0)==(0);
 if ($1) {
  ___assert_fail((22623|0),(22745|0),415,(22843|0));
  // unreachable;
 }
 $2 = (_emscripten_is_main_runtime_thread()|0);
 $3 = ($2|0)==(0);
 $4 = HEAP32[6229]|0;
 $5 = ($4|0)!=(0);
 $or$cond = $3 | $5;
 if ($or$cond) {
  return;
 }
 HEAP32[6229] = 1;
 (___pthread_mutex_lock(24920)|0);
 $6 = (Atomics_load(HEAP32, 6237)|0);
 $7 = (Atomics_load(HEAP32, 6238)|0);
 $8 = ($6|0)==($7|0);
 (___pthread_mutex_unlock(24920)|0);
 if (!($8)) {
  $$0910 = $6;
  while(1) {
   $9 = (24956 + ($$0910<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   __do_call($10);
   (___pthread_mutex_lock(24920)|0);
   $11 = (($$0910) + 1)|0;
   $12 = (($11|0) % 128)&-1;
   $13 = (Atomics_store(HEAP32, 6237, $12)|0);
   $14 = (Atomics_load(HEAP32, 6238)|0);
   $15 = ($12|0)==($14|0);
   (___pthread_mutex_unlock(24920)|0);
   if ($15) {
    break;
   } else {
    $$0910 = $12;
   }
  }
 }
 (_emscripten_futex_wake((24948|0),2147483647)|0);
 HEAP32[6229] = 0;
 return;
}
function _emscripten_sync_run_in_main_thread($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _emscripten_async_run_in_main_thread($0);
 (_emscripten_wait_for_call_v($0,inf)|0);
 return;
}
function _emscripten_sync_run_in_main_thread_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $1 = sp;
 dest=$1; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$1>>2] = $0;
 $2 = ((($1)) + 80|0);
 HEAP32[$2>>2] = 0;
 _emscripten_async_run_in_main_thread($1);
 (_emscripten_wait_for_call_v($1,inf)|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _emscripten_sync_run_in_main_thread_1($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $2 = sp;
 dest=$2; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$2>>2] = $0;
 $3 = ((($2)) + 16|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($2)) + 80|0);
 HEAP32[$4>>2] = 0;
 _emscripten_async_run_in_main_thread($2);
 (_emscripten_wait_for_call_v($2,inf)|0);
 $5 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _emscripten_sync_run_in_main_thread_2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp;
 dest=$3; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$3>>2] = $0;
 $4 = ((($3)) + 16|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($3)) + 24|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($3)) + 80|0);
 HEAP32[$6>>2] = 0;
 _emscripten_async_run_in_main_thread($3);
 (_emscripten_wait_for_call_v($3,inf)|0);
 $7 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function _emscripten_sync_run_in_main_thread_3($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = sp;
 dest=$4; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$4>>2] = $0;
 $5 = ((($4)) + 16|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($4)) + 24|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($4)) + 32|0);
 HEAP32[$7>>2] = $3;
 $8 = ((($4)) + 80|0);
 HEAP32[$8>>2] = 0;
 _emscripten_async_run_in_main_thread($4);
 (_emscripten_wait_for_call_v($4,inf)|0);
 $9 = HEAP32[$8>>2]|0;
 STACKTOP = sp;return ($9|0);
}
function _emscripten_sync_run_in_main_thread_4($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $5 = sp;
 dest=$5; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$5>>2] = $0;
 $6 = ((($5)) + 16|0);
 HEAP32[$6>>2] = $1;
 $7 = ((($5)) + 24|0);
 HEAP32[$7>>2] = $2;
 $8 = ((($5)) + 32|0);
 HEAP32[$8>>2] = $3;
 $9 = ((($5)) + 40|0);
 HEAP32[$9>>2] = $4;
 $10 = ((($5)) + 80|0);
 HEAP32[$10>>2] = 0;
 _emscripten_async_run_in_main_thread($5);
 (_emscripten_wait_for_call_v($5,inf)|0);
 $11 = HEAP32[$10>>2]|0;
 STACKTOP = sp;return ($11|0);
}
function _emscripten_sync_run_in_main_thread_5($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $6 = sp;
 dest=$6; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$6>>2] = $0;
 $7 = ((($6)) + 16|0);
 HEAP32[$7>>2] = $1;
 $8 = ((($6)) + 24|0);
 HEAP32[$8>>2] = $2;
 $9 = ((($6)) + 32|0);
 HEAP32[$9>>2] = $3;
 $10 = ((($6)) + 40|0);
 HEAP32[$10>>2] = $4;
 $11 = ((($6)) + 48|0);
 HEAP32[$11>>2] = $5;
 $12 = ((($6)) + 80|0);
 HEAP32[$12>>2] = 0;
 _emscripten_async_run_in_main_thread($6);
 (_emscripten_wait_for_call_v($6,inf)|0);
 $13 = HEAP32[$12>>2]|0;
 STACKTOP = sp;return ($13|0);
}
function _emscripten_sync_run_in_main_thread_6($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $7 = sp;
 dest=$7; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$7>>2] = $0;
 $8 = ((($7)) + 16|0);
 HEAP32[$8>>2] = $1;
 $9 = ((($7)) + 24|0);
 HEAP32[$9>>2] = $2;
 $10 = ((($7)) + 32|0);
 HEAP32[$10>>2] = $3;
 $11 = ((($7)) + 40|0);
 HEAP32[$11>>2] = $4;
 $12 = ((($7)) + 48|0);
 HEAP32[$12>>2] = $5;
 $13 = ((($7)) + 56|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($7)) + 80|0);
 HEAP32[$14>>2] = 0;
 _emscripten_async_run_in_main_thread($7);
 (_emscripten_wait_for_call_v($7,inf)|0);
 $15 = HEAP32[$14>>2]|0;
 STACKTOP = sp;return ($15|0);
}
function _emscripten_sync_run_in_main_thread_7($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $8 = sp;
 dest=$8; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$8>>2] = $0;
 $9 = ((($8)) + 16|0);
 HEAP32[$9>>2] = $1;
 $10 = ((($8)) + 24|0);
 HEAP32[$10>>2] = $2;
 $11 = ((($8)) + 32|0);
 HEAP32[$11>>2] = $3;
 $12 = ((($8)) + 40|0);
 HEAP32[$12>>2] = $4;
 $13 = ((($8)) + 48|0);
 HEAP32[$13>>2] = $5;
 $14 = ((($8)) + 56|0);
 HEAP32[$14>>2] = $6;
 $15 = ((($8)) + 64|0);
 HEAP32[$15>>2] = $7;
 $16 = ((($8)) + 80|0);
 HEAP32[$16>>2] = 0;
 _emscripten_async_run_in_main_thread($8);
 (_emscripten_wait_for_call_v($8,inf)|0);
 $17 = HEAP32[$16>>2]|0;
 STACKTOP = sp;return ($17|0);
}
function _emscripten_sync_run_in_main_thread_xprintf_varargs($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $3 = sp + 96|0;
 $4 = sp + 112|0;
 $5 = sp;
 HEAP32[$3>>2] = $varargs;
 $6 = (_vsnprintf($4,128,$2,$3)|0);
 $7 = ($6|0)>(127);
 $8 = (($6) + 1)|0;
 if ($7) {
  $9 = (_malloc($8)|0);
  HEAP32[$3>>2] = $varargs;
  (_vsnprintf($9,$8,$2,$3)|0);
  $$0 = $9;
 } else {
  $$0 = $4;
 }
 dest=$5; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$5>>2] = $0;
 $10 = $1;
 $11 = ((($5)) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($5)) + 24|0);
 HEAP32[$12>>2] = $$0;
 $13 = ((($5)) + 80|0);
 HEAP32[$13>>2] = 0;
 _emscripten_async_run_in_main_thread($5);
 (_emscripten_wait_for_call_v($5,inf)|0);
 $14 = ($$0|0)==($4|0);
 if ($14) {
  $15 = HEAP32[$13>>2]|0;
  STACKTOP = sp;return ($15|0);
 }
 _free($$0);
 $15 = HEAP32[$13>>2]|0;
 STACKTOP = sp;return ($15|0);
}
function _proxy_main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 4|0;
 $3 = sp;
 $4 = (_emscripten_has_threading_support()|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $15 = (Atomics_load(HEAP32,6227)|0);
  $16 = (Atomics_load(HEAP32,(24912)>>2)|0);
  $17 = (___call_main(($15|0),($16|0))|0);
  $$1 = $17;
  STACKTOP = sp;return ($$1|0);
 }
 (_pthread_attr_init($2)|0);
 (_pthread_attr_setdetachstate($2,0)|0);
 (_pthread_attr_setstacksize($2,131072)|0);
 $6 = _emscripten_asm_const_i(8)|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = ((($2)) + 36|0);
  HEAP32[$8>>2] = (22560);
 }
 Atomics_store(HEAP32,6227,$0)|0;
 Atomics_store(HEAP32,(24912)>>2,$1)|0;
 $9 = (_pthread_create(($3|0),($2|0),(58|0),(24908|0))|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $14 = _emscripten_asm_const_i(9)|0;
  $$0 = 0;
 } else {
  $11 = (Atomics_load(HEAP32,6227)|0);
  $12 = (Atomics_load(HEAP32,(24912)>>2)|0);
  $13 = (___call_main(($11|0),($12|0))|0);
  $$0 = $13;
 }
 $$1 = $$0;
 STACKTOP = sp;return ($$1|0);
}
function _pthread_attr_init($0) {
 $0 = $0|0;
 var $$sroa$0 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$sroa$0 = sp;
 dest=$$sroa$0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$0; src=$$sroa$0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return 0;
}
function _pthread_attr_setdetachstate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(1);
 if ($2) {
  $$0 = 22;
 } else {
  $3 = ((($0)) + 12|0);
  HEAP32[$3>>2] = $1;
  $$0 = 0;
 }
 return ($$0|0);
}
function _pthread_attr_setstacksize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -2048)|0;
 $3 = ($2>>>0)>(1073741823);
 if ($3) {
  $$0 = 22;
  return ($$0|0);
 }
 $4 = (($1) + -81920)|0;
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = 0;
 HEAP32[$0>>2] = $4;
 $$0 = 0;
 return ($$0|0);
}
function ___emscripten_thread_main($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_pthread_self()|0);
 _emscripten_set_thread_name(($1|0),(22599|0));
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (___call_main(($2|0),($4|0))|0);
 $6 = $5;
 return ($6|0);
}
function _pthread_attr_destroy($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _emscripten_wait_for_call_v($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$ = 0, $$01921 = 0.0, $$020$lcssa = 0, $$1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = (Atomics_load(HEAP32, $2>>2)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$1 = $3;
  $13 = ($$1|0)==(0);
  $$ = $13 ? -8 : 0;
  return ($$|0);
 }
 $5 = (+_emscripten_get_now());
 $6 = $5 + $1;
 _emscripten_set_current_thread_status(5);
 $7 = $5 < $6;
 if ($7) {
  $$01921 = $5;
  while(1) {
   $8 = $6 - $$01921;
   (_emscripten_futex_wait(($2|0),0,(+$8))|0);
   $9 = (Atomics_load(HEAP32, $2>>2)|0);
   $10 = (+_emscripten_get_now());
   $11 = ($9|0)==(0);
   $12 = $10 < $6;
   $or$cond = $11 & $12;
   if ($or$cond) {
    $$01921 = $10;
   } else {
    $$020$lcssa = $9;
    break;
   }
  }
 } else {
  $$020$lcssa = 0;
 }
 _emscripten_set_current_thread_status(1);
 $$1 = $$020$lcssa;
 $13 = ($$1|0)==(0);
 $$ = $13 ? -8 : 0;
 return ($$|0);
}
function __do_call($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 do {
  switch ($1|0) {
  case 137:  {
   $2 = ((($0)) + 16|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 24|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ((($0)) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 40|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_pthread_create(($3|0),($5|0),($7|0),($9|0))|0);
   $11 = ((($0)) + 80|0);
   HEAP32[$11>>2] = $10;
   break;
  }
  case 138:  {
   $12 = ((($0)) + 16|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($0)) + 24|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (_emscripten_syscall(($13|0),($15|0))|0);
   $17 = ((($0)) + 80|0);
   HEAP32[$17>>2] = $16;
   break;
  }
  case 1024:  {
   $18 = ((($0)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_v[$19 & 127]();
   break;
  }
  case 1025:  {
   $20 = ((($0)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($0)) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   FUNCTION_TABLE_vi[$21 & 63]($23);
   break;
  }
  case 1026:  {
   $24 = ((($0)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($0)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($0)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_vii[$25 & 127]($27,$29);
   break;
  }
  case 1027:  {
   $30 = ((($0)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($0)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($0)) + 24|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($0)) + 32|0);
   $37 = HEAP32[$36>>2]|0;
   FUNCTION_TABLE_viii[$31 & 0]($33,$35,$37);
   break;
  }
  case 2048:  {
   $38 = ((($0)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (FUNCTION_TABLE_i[$39 & 127]()|0);
   $41 = ((($0)) + 80|0);
   HEAP32[$41>>2] = $40;
   break;
  }
  case 2049:  {
   $42 = ((($0)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ((($0)) + 16|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (FUNCTION_TABLE_ii[$43 & 63]($45)|0);
   $47 = ((($0)) + 80|0);
   HEAP32[$47>>2] = $46;
   break;
  }
  case 2050:  {
   $48 = ((($0)) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($0)) + 16|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($0)) + 24|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (FUNCTION_TABLE_iii[$49 & 31]($51,$53)|0);
   $55 = ((($0)) + 80|0);
   HEAP32[$55>>2] = $54;
   break;
  }
  case 2051:  {
   $56 = ((($0)) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($0)) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($0)) + 24|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ((($0)) + 32|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (FUNCTION_TABLE_iiii[$57 & 63]($59,$61,$63)|0);
   $65 = ((($0)) + 80|0);
   HEAP32[$65>>2] = $64;
   break;
  }
  default: {
   ___assert_fail((22887|0),(22745|0),202,(22938|0));
   // unreachable;
  }
  }
 } while(0);
 $66 = ((($0)) + 88|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)==(0);
 if ($68) {
  $69 = ((($0)) + 8|0);
  HEAP32[$69>>2] = 1;
  (_emscripten_futex_wake(($69|0),2147483647)|0);
  return;
 } else {
  _free($0);
  return;
 }
}
function ___pthread_mutex_unlock($0) {
 $0 = $0|0;
 var $$0 = 0, $$045 = 0, $$pre = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = (Atomics_load(HEAP32,$1>>2)|0);
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 15;
 $5 = $3 & 128;
 $6 = $5 ^ 128;
 $7 = ($4|0)==(0);
 if ($7) {
  $$pre = ((($0)) + 4|0);
  $$045 = 0;$$pre$phiZ2D = $$pre;
 } else {
  $8 = (_pthread_self()|0);
  $9 = ((($0)) + 4|0);
  $10 = (Atomics_load(HEAP32,$9>>2)|0);
  $11 = $10 & 2147483647;
  $12 = ((($8)) + 52|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11|0)==($13|0);
  if (!($14)) {
   $$0 = 1;
   return ($$0|0);
  }
  $15 = $3 & 3;
  $16 = ($15|0)==(1);
  if ($16) {
   $17 = ((($0)) + 20|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0);
   if (!($19)) {
    $20 = (($18) + -1)|0;
    HEAP32[$17>>2] = $20;
    $$0 = 0;
    return ($$0|0);
   }
  }
  $21 = ($6|0)==(0);
  $22 = ((($0)) + 16|0);
  if ($21) {
   $23 = ((($8)) + 176|0);
   Atomics_store(HEAP32,$23>>2,$22)|0;
   ___vm_lock();
  }
  $24 = ((($0)) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$22>>2]|0;
  Atomics_store(HEAP32,$25>>2,$26)|0;
  $27 = ((($8)) + 168|0);
  $28 = ($26|0)==($27|0);
  if ($28) {
   $$045 = $8;$$pre$phiZ2D = $9;
  } else {
   $29 = ((($26)) + -4|0);
   Atomics_store(HEAP32,$29>>2,$25)|0;
   $$045 = $8;$$pre$phiZ2D = $9;
  }
 }
 $30 = $3 & 8;
 $31 = ($30|0)!=(0);
 $32 = $31 ? 2147483647 : 0;
 while(1) {
  $33 = (Atomics_load(HEAP32, $$pre$phiZ2D>>2)|0);
  $34 = (Atomics_compareExchange(HEAP32, $$pre$phiZ2D>>2, $33, $32)|0);
  $35 = ($34|0)==($33|0);
  if ($35) {
   break;
  }
 }
 $36 = ($6|0)!=(0);
 $or$cond = $7 | $36;
 if (!($or$cond)) {
  $37 = ((($$045)) + 176|0);
  Atomics_store(HEAP32,$37>>2,0)|0;
  ___vm_unlock();
 }
 $38 = ($2|0)!=(0);
 $39 = ($33|0)<(0);
 $or$cond3 = $38 | $39;
 if (!($or$cond3)) {
  $$0 = 0;
  return ($$0|0);
 }
 (_emscripten_futex_wake(($$pre$phiZ2D|0),1)|0);
 $$0 = 0;
 return ($$0|0);
}
function ___vm_lock() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (Atomics_add(HEAP32, 6367, 1)|0);
 return;
}
function ___vm_unlock() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (Atomics_add(HEAP32, 6367, -1)|0);
 $1 = ($0|0)==(1);
 if (!($1)) {
  return;
 }
 $2 = (Atomics_load(HEAP32,(25472)>>2)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 (_emscripten_futex_wake((25468|0),2147483647)|0);
 return;
}
function ___pthread_mutex_lock($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 15;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 4|0);
  $5 = (Atomics_compareExchange(HEAP32, $4>>2, 0, 16)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $7 = (___pthread_mutex_timedlock($0,0)|0);
 $$0 = $7;
 return ($$0|0);
}
function ___pthread_mutex_timedlock($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$2 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond40 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = $2 & 15;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = ((($0)) + 4|0);
   $6 = (Atomics_compareExchange(HEAP32, $5>>2, 0, 16)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    $$2 = 0;
    return ($$2|0);
   } else {
    $$pre = HEAP32[$0>>2]|0;
    $9 = $$pre;
    break;
   }
  } else {
   $9 = $2;
  }
 } while(0);
 $8 = $9 & 128;
 $10 = $8 ^ 128;
 $11 = (___pthread_mutex_trylock($0)|0);
 $12 = ($11|0)==(16);
 if (!($12)) {
  $$2 = $11;
  return ($$2|0);
 }
 $13 = ((($0)) + 4|0);
 $14 = ((($0)) + 8|0);
 $$0 = 100;
 while(1) {
  $15 = (($$0) + -1)|0;
  $16 = ($$0|0)==(0);
  if ($16) {
   break;
  }
  $17 = (Atomics_load(HEAP32,$13>>2)|0);
  $18 = ($17|0)==(0);
  if ($18) {
   break;
  }
  $19 = (Atomics_load(HEAP32,$14>>2)|0);
  $20 = ($19|0)==(0);
  if ($20) {
   $$0 = $15;
  } else {
   break;
  }
 }
 $21 = (___pthread_mutex_trylock($0)|0);
 $22 = ($21|0)==(16);
 if (!($22)) {
  $$2 = $21;
  return ($$2|0);
 }
 L18: while(1) {
  $23 = (Atomics_load(HEAP32,$13>>2)|0);
  $24 = ($23|0)==(0);
  if (!($24)) {
   $27 = $23 & 1073741824;
   $28 = ($27|0)==(0);
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 & 4;
   $31 = ($30|0)==(0);
   $or$cond40 = $28 | $31;
   if ($or$cond40) {
    $32 = $29 & 3;
    $33 = ($32|0)==(2);
    if ($33) {
     $34 = $23 & 2147483647;
     $35 = (_pthread_self()|0);
     $36 = ((($35)) + 52|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($34|0)==($37|0);
     if ($38) {
      $$2 = 35;
      label = 17;
      break;
     }
    }
    $39 = (Atomics_add(HEAP32, $14>>2, 1)|0);
    $40 = $23 | -2147483648;
    $41 = (Atomics_compareExchange(HEAP32, $13>>2, $23, $40)|0);
    $42 = (___timedwait($13,$40,0,$1,$10)|0);
    $43 = (Atomics_sub(HEAP32, $14>>2, 1)|0);
    switch ($42|0) {
    case 0: case 4:  {
     break;
    }
    default: {
     $$2 = $42;
     label = 17;
     break L18;
    }
    }
   }
  }
  $25 = (___pthread_mutex_trylock($0)|0);
  $26 = ($25|0)==(16);
  if (!($26)) {
   $$2 = $25;
   label = 17;
   break;
  }
 }
 if ((label|0) == 17) {
  return ($$2|0);
 }
 return (0)|0;
}
function ___timedwait($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 (___pthread_setcancelstate(1,$5)|0);
 _emscripten_conditional_set_current_thread_status(1,4);
 $6 = (___timedwait_cp($0,$1,$2,$3,$4)|0);
 _emscripten_conditional_set_current_thread_status(4,1);
 $7 = HEAP32[$5>>2]|0;
 (___pthread_setcancelstate($7,0)|0);
 STACKTOP = sp;return ($6|0);
}
function ___pthread_setcancelstate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)>(2);
 if ($2) {
  $$0 = 22;
  return ($$0|0);
 }
 $3 = (_pthread_self()|0);
 $4 = ($1|0)==(0|0);
 $$pre = ((($3)) + 72|0);
 if (!($4)) {
  $5 = (Atomics_load(HEAP32,$$pre>>2)|0);
  HEAP32[$1>>2] = $5;
 }
 Atomics_store(HEAP32,$$pre>>2,$0)|0;
 $$0 = 0;
 return ($$0|0);
}
function ___timedwait_cp($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$$0$us = 0.0, $$$045 = 0.0, $$$046$us = 0.0, $$0$us = 0.0, $$0$us53 = 0.0, $$138 = 0, $$138$ph = 0, $$138$ph70 = 0, $$138$ph72 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $6 = ($3|0)!=(0|0);
 if ($6) {
  $7 = ((($3)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8>>>0)>(999999999);
  if ($9) {
   $$138 = 22;
   STACKTOP = sp;return ($$138|0);
  }
  $10 = (___clock_gettime(($2|0),($5|0))|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $$138 = 22;
   STACKTOP = sp;return ($$138|0);
  }
  $12 = HEAP32[$3>>2]|0;
  $13 = HEAP32[$5>>2]|0;
  $14 = (($12) - ($13))|0;
  HEAP32[$5>>2] = $14;
  $15 = HEAP32[$7>>2]|0;
  $16 = ((($5)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) - ($17))|0;
  HEAP32[$16>>2] = $18;
  $19 = ($18|0)<(0);
  if ($19) {
   $20 = (($14) + -1)|0;
   HEAP32[$5>>2] = $20;
   $21 = (($18) + 1000000000)|0;
   HEAP32[$16>>2] = $21;
   $22 = $20;
  } else {
   $22 = $14;
  }
  $23 = ($22|0)<(0);
  if ($23) {
   $$138 = 110;
   STACKTOP = sp;return ($$138|0);
  }
 }
 $24 = (_emscripten_is_main_runtime_thread()|0);
 $25 = ($24|0)!=(0);
 $$$045 = $25 ? 1.0 : 100.0;
 if ($25) {
  L15: while(1) {
   $26 = (_pthread_self()|0);
   $27 = (__pthread_isduecanceled($26)|0);
   $28 = ($27|0)==(0);
   if (!($28)) {
    $$138$ph = 125;
    break;
   }
   _emscripten_main_thread_process_queued_calls();
   if ($6) {
    $29 = (+__pthread_msecs_until($3));
    $30 = !($29 <= 0.0);
    $31 = $29 > 100.0;
    $$0$us = $31 ? 100.0 : $29;
    $32 = $$0$us > 1.0;
    $$$0$us = $32 ? 1.0 : $$0$us;
    if ($30) {
     $$$046$us = $$$0$us;
    } else {
     $$138$ph = 110;
     break;
    }
   } else {
    $$$046$us = $$$045;
   }
   $33 = (_emscripten_futex_wait(($0|0),($1|0),(+$$$046$us))|0);
   $34 = (0 - ($33))|0;
   switch ($34|0) {
   case 110:  {
    break;
   }
   case 4: case 125:  {
    $$138$ph = $34;
    break L15;
    break;
   }
   default: {
    $$138 = 0;
    label = 21;
    break L15;
   }
   }
  }
  if ((label|0) == 21) {
   STACKTOP = sp;return ($$138|0);
  }
  $$138 = $$138$ph;
  STACKTOP = sp;return ($$138|0);
 }
 if (!($6)) {
  L27: while(1) {
   $43 = (_pthread_self()|0);
   $44 = (__pthread_isduecanceled($43)|0);
   $45 = ($44|0)==(0);
   if (!($45)) {
    $$138$ph72 = 125;
    break;
   }
   $46 = (_emscripten_futex_wait(($0|0),($1|0),(+$$$045))|0);
   $47 = (0 - ($46))|0;
   switch ($47|0) {
   case 110:  {
    break;
   }
   case 4: case 125:  {
    $$138$ph72 = $47;
    break L27;
    break;
   }
   default: {
    $$138 = 0;
    label = 21;
    break L27;
   }
   }
  }
  if ((label|0) == 21) {
   STACKTOP = sp;return ($$138|0);
  }
  $$138 = $$138$ph72;
  STACKTOP = sp;return ($$138|0);
 }
 L34: while(1) {
  $35 = (_pthread_self()|0);
  $36 = (__pthread_isduecanceled($35)|0);
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$138$ph70 = 125;
   break;
  }
  $38 = (+__pthread_msecs_until($3));
  $39 = !($38 <= 0.0);
  if (!($39)) {
   $$138$ph70 = 110;
   break;
  }
  $40 = $38 > 100.0;
  $$0$us53 = $40 ? 100.0 : $38;
  $41 = (_emscripten_futex_wait(($0|0),($1|0),(+$$0$us53))|0);
  $42 = (0 - ($41))|0;
  switch ($42|0) {
  case 110:  {
   break;
  }
  case 4: case 125:  {
   $$138$ph70 = $42;
   break L34;
   break;
  }
  default: {
   $$138 = 0;
   label = 21;
   break L34;
  }
  }
 }
 if ((label|0) == 21) {
  STACKTOP = sp;return ($$138|0);
 }
 $$138 = $$138$ph70;
 STACKTOP = sp;return ($$138|0);
}
function __pthread_isduecanceled($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(2);
 $3 = $2&1;
 return ($3|0);
}
function __pthread_msecs_until($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 (_gettimeofday(($1|0),(0|0))|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (+($2|0));
 $4 = $3 * 1000.0;
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (+($6|0));
 $8 = $7 * 0.001;
 $9 = $4 + $8;
 $10 = HEAP32[$0>>2]|0;
 $11 = (+($10|0));
 $12 = $11 * 1000.0;
 $13 = ((($0)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($14|0));
 $16 = $15 * 9.9999999999999995E-7;
 $17 = $12 + $16;
 $18 = $17 - $9;
 STACKTOP = sp;return (+$18);
}
function ___pthread_mutex_trylock($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 15;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 4|0);
  $5 = (Atomics_compareExchange(HEAP32, $4>>2, 0, 16)|0);
  $6 = $5 & 16;
  $$0 = $6;
  return ($$0|0);
 } else {
  $7 = (___pthread_mutex_trylock_owner($0)|0);
  $$0 = $7;
  return ($$0|0);
 }
 return (0)|0;
}
function ___pthread_mutex_trylock_owner($0) {
 $0 = $0|0;
 var $$ = 0, $$1 = 0, $$154 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond57 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_pthread_self()|0);
 $3 = ((($2)) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = (Atomics_load(HEAP32,$5>>2)|0);
 $7 = $6 & 2147483647;
 $8 = ($7|0)==($4|0);
 $9 = $1 & 3;
 $10 = ($9|0)==(1);
 $or$cond = $10 & $8;
 if ($or$cond) {
  $11 = ((($0)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12>>>0)>(2147483646);
  if ($13) {
   $$1 = 11;
   return ($$1|0);
  }
  $14 = (($12) + 1)|0;
  HEAP32[$11>>2] = $14;
  $$1 = 0;
  return ($$1|0);
 }
 $15 = ($7|0)==(2147483647);
 if ($15) {
  $$1 = 131;
  return ($$1|0);
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = $16 & 128;
 $18 = ($17|0)==(0);
 if ($18) {
  $$154 = $4;
 } else {
  $19 = ((($2)) + 172|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   HEAP32[$19>>2] = -12;
  }
  $22 = ((($0)) + 8|0);
  $23 = (Atomics_load(HEAP32,$22>>2)|0);
  $24 = ($23|0)==(0);
  $25 = $4 | -2147483648;
  $$ = $24 ? $4 : $25;
  $26 = ((($0)) + 16|0);
  $27 = ((($2)) + 176|0);
  Atomics_store(HEAP32,$27>>2,$26)|0;
  $$154 = $$;
 }
 $28 = ($7|0)!=(0);
 if ($28) {
  $29 = $6 & 1073741824;
  $30 = ($29|0)==(0);
  $31 = $1 & 4;
  $32 = ($31|0)==(0);
  $or$cond57 = $32 | $30;
  if (!($or$cond57)) {
   label = 11;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $33 = (Atomics_compareExchange(HEAP32, $5>>2, $6, $$154)|0);
  $34 = ($33|0)==($6|0);
  if ($34) {
   $36 = ((($2)) + 168|0);
   $37 = (Atomics_load(HEAP32,$36>>2)|0);
   $38 = ((($0)) + 16|0);
   HEAP32[$38>>2] = $37;
   $39 = ((($0)) + 12|0);
   HEAP32[$39>>2] = $36;
   $40 = ($37|0)==($36|0);
   if (!($40)) {
    $41 = ((($37)) + -4|0);
    Atomics_store(HEAP32,$41>>2,$38)|0;
   }
   Atomics_store(HEAP32,$36>>2,$38)|0;
   $42 = ((($2)) + 176|0);
   Atomics_store(HEAP32,$42>>2,0)|0;
   if (!($28)) {
    $$1 = 0;
    return ($$1|0);
   }
   $43 = ((($0)) + 20|0);
   HEAP32[$43>>2] = 0;
   $44 = HEAP32[$0>>2]|0;
   $45 = $44 | 8;
   HEAP32[$0>>2] = $45;
   $$1 = 130;
   return ($$1|0);
  }
 }
 $35 = ((($2)) + 176|0);
 Atomics_store(HEAP32,$35>>2,0)|0;
 $$1 = 16;
 return ($$1|0);
}
function _pthread_cond_broadcast($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___private_cond_signal($0,-1)|0);
  $$0 = $3;
  return ($$0|0);
 }
 $4 = ((($0)) + 12|0);
 $5 = (Atomics_load(HEAP32,$4>>2)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($0)) + 8|0);
 $8 = (Atomics_add(HEAP32, $7>>2, 1)|0);
 (_emscripten_futex_wake(($7|0),2147483647)|0);
 $$0 = 0;
 return ($$0|0);
}
function ___private_cond_signal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$024$lcssa = 0, $$02432 = 0, $$026 = 0, $$026$$024 = 0, $$026$lcssa = 0, $$02631 = 0, $$02634 = 0, $$033 = 0, $$1 = 0, $$125 = 0, $$lcssa30 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 Atomics_store(HEAP32,$2>>2,0)|0;
 $3 = ((($0)) + 32|0);
 $4 = (Atomics_compareExchange(HEAP32, $3>>2, 0, 1)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = (Atomics_compareExchange(HEAP32, $3>>2, 1, 2)|0);
  while(1) {
   ___wait($3,0,2,1);
   $7 = (Atomics_compareExchange(HEAP32, $3>>2, 0, 2)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    break;
   }
  }
 }
 $9 = ((($0)) + 20|0);
 $$02631 = HEAP32[$9>>2]|0;
 $10 = ($1|0)!=(0);
 $11 = ($$02631|0)!=(0|0);
 $12 = $10 & $11;
 if ($12) {
  $$02432 = 0;$$02634 = $$02631;$$033 = $1;
  while(1) {
   $13 = ((($$02634)) + 8|0);
   $14 = (Atomics_compareExchange(HEAP32, $13>>2, 0, 1)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    $19 = (($$033) + -1)|0;
    $20 = ($$02432|0)==(0|0);
    $$026$$024 = $20 ? $$02634 : $$02432;
    $$1 = $19;$$125 = $$026$$024;
   } else {
    $16 = (Atomics_load(HEAP32,$2>>2)|0);
    $17 = (($16) + 1)|0;
    Atomics_store(HEAP32,$2>>2,$17)|0;
    $18 = ((($$02634)) + 16|0);
    HEAP32[$18>>2] = $2;
    $$1 = $$033;$$125 = $$02432;
   }
   $$026 = HEAP32[$$02634>>2]|0;
   $21 = ($$1|0)!=(0);
   $22 = ($$026|0)!=(0|0);
   $23 = $21 & $22;
   if ($23) {
    $$02432 = $$125;$$02634 = $$026;$$033 = $$1;
   } else {
    $$024$lcssa = $$125;$$026$lcssa = $$026;$$lcssa30 = $22;
    break;
   }
  }
 } else {
  $$024$lcssa = 0;$$026$lcssa = $$02631;$$lcssa30 = $11;
 }
 if ($$lcssa30) {
  $24 = ((($$026$lcssa)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==(0|0);
  if (!($26)) {
   HEAP32[$25>>2] = 0;
  }
  HEAP32[$24>>2] = 0;
 } else {
  $27 = ((($0)) + 4|0);
  HEAP32[$27>>2] = 0;
 }
 HEAP32[$9>>2] = $$026$lcssa;
 while(1) {
  $28 = (Atomics_load(HEAP32, $3>>2)|0);
  $29 = (Atomics_compareExchange(HEAP32, $3>>2, $28, 0)|0);
  $30 = ($29|0)==($28|0);
  if ($30) {
   break;
  }
 }
 $31 = ($28|0)==(2);
 if ($31) {
  (_emscripten_futex_wake(($3|0),1)|0);
 }
 $32 = (Atomics_load(HEAP32,$2>>2)|0);
 $33 = ($32|0)==(0);
 if (!($33)) {
  $34 = $32;
  while(1) {
   ___wait($2,0,$34,1);
   $35 = (Atomics_load(HEAP32,$2>>2)|0);
   $36 = ($35|0)==(0);
   if ($36) {
    break;
   } else {
    $34 = $35;
   }
  }
 }
 $37 = ($$024$lcssa|0)==(0|0);
 if ($37) {
  STACKTOP = sp;return 0;
 }
 $38 = ((($$024$lcssa)) + 12|0);
 while(1) {
  $39 = (Atomics_load(HEAP32, $38>>2)|0);
  $40 = (Atomics_compareExchange(HEAP32, $38>>2, $39, 0)|0);
  $41 = ($40|0)==($39|0);
  if ($41) {
   break;
  }
 }
 $42 = ($39|0)==(2);
 if (!($42)) {
  STACKTOP = sp;return 0;
 }
 (_emscripten_futex_wake(($38|0),1)|0);
 STACKTOP = sp;return 0;
}
function ___wait($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$us = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($1|0)!=(0|0);
 L1: do {
  if ($4) {
   $$0$us = 100;
   while(1) {
    $5 = (($$0$us) + -1)|0;
    $6 = ($$0$us|0)==(0);
    if ($6) {
     label = 7;
     break L1;
    }
    $7 = (Atomics_load(HEAP32,$1>>2)|0);
    $8 = ($7|0)==(0);
    if (!($8)) {
     label = 8;
     break L1;
    }
    $9 = (Atomics_load(HEAP32,$0>>2)|0);
    $10 = ($9|0)==($2|0);
    if ($10) {
     $$0$us = $5;
    } else {
     break;
    }
   }
   return;
  } else {
   $$0 = 100;
   while(1) {
    $11 = ($$0|0)==(0);
    if ($11) {
     label = 7;
     break L1;
    }
    $12 = (($$0) + -1)|0;
    $13 = (Atomics_load(HEAP32,$0>>2)|0);
    $14 = ($13|0)==($2|0);
    if ($14) {
     $$0 = $12;
    } else {
     break;
    }
   }
   return;
  }
 } while(0);
 if ((label|0) == 7) {
  if ($4) {
   label = 8;
  }
 }
 if ((label|0) == 8) {
  $15 = (Atomics_add(HEAP32, $1>>2, 1)|0);
 }
 $16 = (_emscripten_is_main_runtime_thread()|0);
 $17 = (Atomics_load(HEAP32,$0>>2)|0);
 $18 = ($17|0)==($2|0);
 L16: do {
  if ($18) {
   $19 = ($16|0)!=(0);
   $20 = $19 ? 1.0 : 100.0;
   L18: do {
    if ($19) {
     while(1) {
      $21 = (_pthread_self()|0);
      $22 = ((($21)) + 76|0);
      $23 = (Atomics_load(HEAP32,$22>>2)|0);
      $24 = ($23|0)==(1);
      if ($24) {
       while(1) {
        $27 = (_pthread_self()|0);
        $28 = (__pthread_isduecanceled($27)|0);
        $29 = ($28|0)==(0);
        if (!($29)) {
         break L18;
        }
        _emscripten_main_thread_process_queued_calls();
        $30 = (_emscripten_futex_wait(($0|0),($2|0),(+$20))|0);
        $31 = ($30|0)==(-110);
        if (!($31)) {
         break;
        }
       }
      } else {
       (_emscripten_futex_wait(($0|0),($2|0),inf)|0);
      }
      $25 = (Atomics_load(HEAP32,$0>>2)|0);
      $26 = ($25|0)==($2|0);
      if (!($26)) {
       break L16;
      }
     }
    } else {
     while(1) {
      $32 = (_pthread_self()|0);
      $33 = ((($32)) + 76|0);
      $34 = (Atomics_load(HEAP32,$33>>2)|0);
      $35 = ($34|0)==(1);
      if ($35) {
       while(1) {
        $36 = (_pthread_self()|0);
        $37 = (__pthread_isduecanceled($36)|0);
        $38 = ($37|0)==(0);
        if (!($38)) {
         break L18;
        }
        $40 = (_emscripten_futex_wait(($0|0),($2|0),(+$20))|0);
        $41 = ($40|0)==(-110);
        if (!($41)) {
         break;
        }
       }
      } else {
       (_emscripten_futex_wait(($0|0),($2|0),inf)|0);
      }
      $42 = (Atomics_load(HEAP32,$0>>2)|0);
      $43 = ($42|0)==($2|0);
      if (!($43)) {
       break L16;
      }
     }
    }
   } while(0);
   if (!($4)) {
    return;
   }
   $39 = (Atomics_sub(HEAP32, $1>>2, 1)|0);
   return;
  }
 } while(0);
 if (!($4)) {
  return;
 }
 $44 = (Atomics_sub(HEAP32, $1>>2, 1)|0);
 return;
}
function _pthread_cond_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return 0;
 }
 $3 = ((($0)) + 12|0);
 $4 = (Atomics_load(HEAP32,$3>>2)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  return 0;
 }
 $6 = (Atomics_or(HEAP32, $3>>2, -2147483648)|0);
 $7 = ((($0)) + 8|0);
 $8 = (Atomics_add(HEAP32, $7>>2, 1)|0);
 (_emscripten_futex_wake(($7|0),2147483647)|0);
 $9 = (Atomics_load(HEAP32,$3>>2)|0);
 $10 = $9 & 2147483647;
 $11 = ($10|0)==(0);
 if ($11) {
  return 0;
 } else {
  $12 = $9;
 }
 while(1) {
  ___wait($3,0,$12,0);
  $13 = (Atomics_load(HEAP32,$3>>2)|0);
  $14 = $13 & 2147483647;
  $15 = ($14|0)==(0);
  if ($15) {
   break;
  } else {
   $12 = $13;
  }
 }
 return 0;
}
function _pthread_cond_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$sroa$0 = sp;
 dest=$$sroa$0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$0; src=$$sroa$0; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return 0;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = $3 & 2147483647;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $4;
 $6 = ($3|0)<(0);
 if (!($6)) {
  STACKTOP = sp;return 0;
 }
 HEAP32[$0>>2] = (-1);
 STACKTOP = sp;return 0;
}
function _pthread_cond_signal($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___private_cond_signal($0,1)|0);
  $$0 = $3;
  return ($$0|0);
 }
 $4 = ((($0)) + 12|0);
 $5 = (Atomics_load(HEAP32,$4>>2)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($0)) + 8|0);
 $8 = (Atomics_add(HEAP32, $7>>2, 1)|0);
 (_emscripten_futex_wake(($7|0),1)|0);
 $$0 = 0;
 return ($$0|0);
}
function ___pthread_cond_timedwait($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$ = 0, $$$2$ = 0, $$0 = 0, $$062 = 0, $$063 = 0, $$064 = 0, $$066 = 0, $$1 = 0, $$2 = 0, $$2$ = 0, $$472 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 4|0;
 $4 = sp;
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;HEAP32[$3+16>>2]=0|0;
 $5 = ((($0)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = $7 & 15;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = ((($1)) + 4|0);
  $11 = (Atomics_load(HEAP32,$10>>2)|0);
  $12 = $11 & 2147483647;
  $13 = (_pthread_self()|0);
  $14 = ((($13)) + 52|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12|0)==($15|0);
  if (!($16)) {
   $$062 = 1;
   STACKTOP = sp;return ($$062|0);
  }
 }
 $17 = ($2|0)==(0|0);
 if (!($17)) {
  $18 = ((($2)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19>>>0)>(999999999);
  if ($20) {
   $$062 = 22;
   STACKTOP = sp;return ($$062|0);
  }
 }
 ___pthread_testcancel();
 $21 = HEAP32[$0>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $27 = ((($0)) + 32|0);
  $28 = (Atomics_compareExchange(HEAP32, $27>>2, 0, 1)|0);
  $29 = ($28|0)==(0);
  if (!($29)) {
   $30 = (Atomics_compareExchange(HEAP32, $27>>2, 1, 2)|0);
   while(1) {
    ___wait($27,0,2,1);
    $31 = (Atomics_compareExchange(HEAP32, $27>>2, 0, 2)|0);
    $32 = ($31|0)==(0);
    if ($32) {
     break;
    }
   }
  }
  $33 = ((($3)) + 12|0);
  Atomics_store(HEAP32,$33>>2,2)|0;
  $34 = ((($3)) + 8|0);
  Atomics_store(HEAP32,$34>>2,0)|0;
  $35 = ((($0)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($3)) + 4|0);
  HEAP32[$37>>2] = $36;
  HEAP32[$35>>2] = $3;
  $38 = ((($0)) + 20|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(0|0);
  $41 = $36;
  $$sink = $40 ? $38 : $41;
  HEAP32[$$sink>>2] = $3;
  while(1) {
   $42 = (Atomics_load(HEAP32, $27>>2)|0);
   $43 = (Atomics_compareExchange(HEAP32, $27>>2, $42, 0)|0);
   $44 = ($43|0)==($42|0);
   if ($44) {
    break;
   }
  }
  $45 = ($42|0)==(2);
  if ($45) {
   (_emscripten_futex_wake(($27|0),1)|0);
   $$0 = $33;$$064 = 0;$$066 = 2;
  } else {
   $$0 = $33;$$064 = 0;$$066 = 2;
  }
 } else {
  $23 = ((($0)) + 8|0);
  $24 = (Atomics_load(HEAP32,$23>>2)|0);
  $25 = ((($0)) + 12|0);
  $26 = (Atomics_add(HEAP32, $25>>2, 1)|0);
  $$0 = $23;$$064 = 1;$$066 = $24;
 }
 (___pthread_mutex_unlock($1)|0);
 (___pthread_setcancelstate(2,$4)|0);
 $46 = HEAP32[$4>>2]|0;
 $47 = ($46|0)==(1);
 if ($47) {
  (___pthread_setcancelstate(1,0)|0);
 }
 $48 = ($$064|0)!=(0);
 $49 = $48 ^ 1;
 $50 = $49&1;
 while(1) {
  $51 = (___timedwait_cp($$0,$$066,$6,$2,$50)|0);
  $52 = (Atomics_load(HEAP32,$$0>>2)|0);
  $53 = ($52|0)==($$066|0);
  $54 = $51 | 4;
  $55 = ($54|0)==(4);
  $or$cond = $53 & $55;
  if (!($or$cond)) {
   break;
  }
 }
 $56 = ($51|0)==(4);
 $$ = $56 ? 0 : $51;
 L28: do {
  if ($48) {
   $57 = ($$|0)==(125);
   if ($57) {
    $58 = ((($0)) + 8|0);
    $59 = (Atomics_load(HEAP32,$58>>2)|0);
    $60 = ($59|0)==($$066|0);
    $$$ = $60 ? 125 : 0;
    $$1 = $$$;
   } else {
    $$1 = $$;
   }
   $61 = ((($0)) + 12|0);
   $62 = (Atomics_add(HEAP32, $61>>2, -1)|0);
   $63 = ($62|0)==(-2147483647);
   if ($63) {
    (_emscripten_futex_wake(($61|0),1)|0);
    $$063 = 0;$$2 = $$1;
   } else {
    $$063 = 0;$$2 = $$1;
   }
  } else {
   $64 = ((($3)) + 8|0);
   $65 = (Atomics_compareExchange(HEAP32, $64>>2, 0, 2)|0);
   $66 = ($65|0)==(0);
   if (!($66)) {
    $101 = ((($3)) + 12|0);
    $102 = (Atomics_compareExchange(HEAP32, $101>>2, 0, 1)|0);
    $103 = ($102|0)==(0);
    if ($103) {
     $$063 = $65;$$2 = $$;
     break;
    }
    $104 = (Atomics_compareExchange(HEAP32, $101>>2, 1, 2)|0);
    while(1) {
     ___wait($101,0,2,1);
     $105 = (Atomics_compareExchange(HEAP32, $101>>2, 0, 2)|0);
     $106 = ($105|0)==(0);
     if ($106) {
      $$063 = $65;$$2 = $$;
      break L28;
     }
    }
   }
   $67 = ((($0)) + 32|0);
   $68 = (Atomics_compareExchange(HEAP32, $67>>2, 0, 1)|0);
   $69 = ($68|0)==(0);
   if (!($69)) {
    $70 = (Atomics_compareExchange(HEAP32, $67>>2, 1, 2)|0);
    while(1) {
     ___wait($67,0,2,1);
     $71 = (Atomics_compareExchange(HEAP32, $67>>2, 0, 2)|0);
     $72 = ($71|0)==(0);
     if ($72) {
      break;
     }
    }
   }
   $73 = ((($0)) + 4|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($74|0)==($3|0);
   if ($75) {
    $76 = ((($3)) + 4|0);
    $77 = HEAP32[$76>>2]|0;
    HEAP32[$73>>2] = $77;
   } else {
    $78 = HEAP32[$3>>2]|0;
    $79 = ($78|0)==(0|0);
    if (!($79)) {
     $80 = ((($3)) + 4|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ((($78)) + 4|0);
     HEAP32[$82>>2] = $81;
    }
   }
   $83 = ((($0)) + 20|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ($84|0)==($3|0);
   if ($85) {
    $86 = HEAP32[$3>>2]|0;
    HEAP32[$83>>2] = $86;
   } else {
    $87 = ((($3)) + 4|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = ($88|0)==(0|0);
    if (!($89)) {
     $90 = HEAP32[$3>>2]|0;
     HEAP32[$88>>2] = $90;
    }
   }
   while(1) {
    $91 = (Atomics_load(HEAP32, $67>>2)|0);
    $92 = (Atomics_compareExchange(HEAP32, $67>>2, $91, 0)|0);
    $93 = ($92|0)==($91|0);
    if ($93) {
     break;
    }
   }
   $94 = ($91|0)==(2);
   if ($94) {
    (_emscripten_futex_wake(($67|0),1)|0);
   }
   $95 = ((($3)) + 16|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = ($96|0)==(0|0);
   if ($97) {
    $$063 = 0;$$2 = $$;
   } else {
    $98 = (Atomics_add(HEAP32, $96>>2, -1)|0);
    $99 = ($98|0)==(1);
    if ($99) {
     $100 = HEAP32[$95>>2]|0;
     (_emscripten_futex_wake(($100|0),1)|0);
     $$063 = 0;$$2 = $$;
    } else {
     $$063 = 0;$$2 = $$;
    }
   }
  }
 } while(0);
 $107 = (___pthread_mutex_lock($1)|0);
 $108 = ($107|0)==(0);
 $$2$ = $108 ? $$2 : $107;
 $109 = ($$063|0)==(0);
 if ($109) {
  $127 = HEAP32[$4>>2]|0;
  (___pthread_setcancelstate($127,0)|0);
  $128 = ($$2$|0)==(125);
  if ($128) {
   ___pthread_testcancel();
   (___pthread_setcancelstate(1,0)|0);
   $$472 = 125;
  } else {
   $$472 = $$2$;
  }
 } else {
  $110 = ((($3)) + 4|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($111|0)==(0|0);
  if ($112) {
   $113 = ((($1)) + 8|0);
   $114 = (Atomics_add(HEAP32, $113>>2, 1)|0);
  }
  $115 = HEAP32[$3>>2]|0;
  $116 = ($115|0)==(0|0);
  if ($116) {
   $123 = ((($1)) + 8|0);
   $124 = (Atomics_sub(HEAP32, $123>>2, 1)|0);
  } else {
   $117 = ((($115)) + 12|0);
   $118 = ((($1)) + 4|0);
   $119 = (Atomics_store(HEAP32, $117>>2, 0)|0);
   while(1) {
    $120 = (Atomics_load(HEAP32,$117>>2)|0);
    $121 = (_emscripten_futex_wake_or_requeue(($117|0),0,($118|0),($120|0))|0);
    $122 = ($121|0)==(-11);
    if (!($122)) {
     break;
    }
   }
  }
  $125 = ($$2$|0)==(125);
  $$$2$ = $125 ? 0 : $$2$;
  $126 = HEAP32[$4>>2]|0;
  (___pthread_setcancelstate($126,0)|0);
  $$472 = $$$2$;
 }
 ___pthread_testcancel();
 $$062 = $$472;
 STACKTOP = sp;return ($$062|0);
}
function ___pthread_testcancel() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 $1 = ((($0)) + 72|0);
 $2 = (Atomics_load(HEAP32,$1>>2)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  return;
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)==(2);
 if (!($5)) {
  return;
 }
 $6 = _emscripten_asm_const_i(10)|0;
 return;
}
function ___pthread_once_full($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $2 = (Atomics_compareExchange(HEAP32, $0>>2, 0, 1)|0);
  switch ($2|0) {
  case 0:  {
   break L1;
   break;
  }
  case 2:  {
   label = 9;
   break L1;
   break;
  }
  case 1:  {
   $7 = (Atomics_compareExchange(HEAP32, $0>>2, 1, 3)|0);
   break;
  }
  case 3:  {
   break;
  }
  default: {
   continue L1;
  }
  }
  ___wait($0,0,3,1);
 }
 if ((label|0) == 9) {
  return 0;
 }
 _pthread_cleanup_push((59|0),($0|0));
 FUNCTION_TABLE_v[$1 & 127]();
 _pthread_cleanup_pop(0);
 while(1) {
  $3 = (Atomics_load(HEAP32, $0>>2)|0);
  $4 = (Atomics_compareExchange(HEAP32, $0>>2, $3, 2)|0);
  $5 = ($4|0)==($3|0);
  if ($5) {
   break;
  }
 }
 $6 = ($3|0)==(3);
 if (!($6)) {
  return 0;
 }
 (_emscripten_futex_wake(($0|0),2147483647)|0);
 return 0;
}
function _undo($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 while(1) {
  $1 = (Atomics_load(HEAP32, $0>>2)|0);
  $2 = (Atomics_compareExchange(HEAP32, $0>>2, $1, 0)|0);
  $3 = ($2|0)==($1|0);
  if ($3) {
   break;
  }
 }
 $4 = ($1|0)==(3);
 if (!($4)) {
  return;
 }
 (_emscripten_futex_wake(($0|0),2147483647)|0);
 return;
}
function ___pthread_once($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (Atomics_load(HEAP32,$0>>2)|0);
 $4 = ($3|0)==(2);
 if ($4) {
  Atomics_store(HEAP32,$2>>2,0)|0;
  $5 = (Atomics_compareExchange(HEAP32, $2>>2, 0, 0)|0);
  STACKTOP = sp;return 0;
 } else {
  (___pthread_once_full($0,$1)|0);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _pthread_cond_wait($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___pthread_cond_timedwait($0,$1,0)|0);
 return ($2|0);
}
function ___pthread_key_create($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$013 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = $2;
 $4 = $3 >>> 4;
 $5 = $4 & 127;
 $6 = (_pthread_self()|0);
 $7 = ((($6)) + 116|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  HEAP32[$7>>2] = 24396;
 }
 $10 = ($1|0)==(0|0);
 $11 = $1;
 $12 = $10 ? (60) : $11;
 $$013 = $5;
 while(1) {
  $13 = (26500 + ($$013<<2)|0);
  $14 = (Atomics_compareExchange(HEAP32, $13>>2, 0, $12)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   break;
  }
  $17 = (($$013) + 1)|0;
  $18 = $17 & 127;
  $19 = ($18|0)==($5|0);
  if ($19) {
   $$0 = 11;
   label = 7;
   break;
  } else {
   $$013 = $18;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($$0|0);
 }
 $16 = HEAP32[$2>>2]|0;
 HEAP32[$16>>2] = $$013;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _nodtor($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _pthread_mutexattr_destroy($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _pthread_mutexattr_init($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 return 0;
}
function _pthread_mutex_destroy($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _pthread_mutex_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$sroa$0 = sp;
 ;HEAP32[$$sroa$0>>2]=0|0;HEAP32[$$sroa$0+4>>2]=0|0;HEAP32[$$sroa$0+8>>2]=0|0;HEAP32[$$sroa$0+12>>2]=0|0;HEAP32[$$sroa$0+16>>2]=0|0;HEAP32[$$sroa$0+20>>2]=0|0;HEAP32[$$sroa$0+24>>2]=0|0;
 ;HEAP32[$0>>2]=HEAP32[$$sroa$0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$$sroa$0+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$$sroa$0+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$$sroa$0+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$$sroa$0+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$$sroa$0+20>>2]|0;HEAP32[$0+24>>2]=HEAP32[$$sroa$0+24>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return 0;
 }
 $3 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $3;
 STACKTOP = sp;return 0;
}
function _pthread_setspecific($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_pthread_self()|0);
 $3 = ((($2)) + 116|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($0<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==($1|0);
 if ($7) {
  return 0;
 }
 HEAP32[$5>>2] = $1;
 $8 = ((($2)) + 60|0);
 HEAP32[$8>>2] = 1;
 return 0;
}
function ___pthread_getspecific($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_pthread_self()|0);
 $2 = ((($1)) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($0<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 return ($5|0);
}
function __Znwj($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $$ = $1 ? 1 : $0;
 while(1) {
  $2 = (_malloc($$)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = (__ZSt15get_new_handlerv()|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$4 & 127]();
 }
 if ((label|0) == 5) {
  $6 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($6);
  ___cxa_throw(($6|0),(72|0),(42|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  return ($2|0);
 }
 return (0)|0;
}
function __ZdlPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZNSt3__218__libcpp_refstringC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = (($2) + 13)|0;
 $4 = (__Znwj($3)|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($4)|0);
 $8 = (($2) + 1)|0;
 _memcpy(($7|0),($1|0),($8|0))|0;
 HEAP32[$0>>2] = $7;
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 return ($1|0);
}
function __ZNSt11logic_errorC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (10128);
 $2 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(61,($2|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  ___resumeException($5|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = (___cxa_get_globals_fast()|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($3)) + 80|0);
   $6 = ((($3)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if (!($16)) {
    HEAP32[$vararg_buffer7>>2] = 23194;
    _abort_message(23144,$vararg_buffer7);
    // unreachable;
   }
   $17 = ($9|0)==(1126902529);
   $18 = ($12|0)==(1129074247);
   $19 = $17 & $18;
   if ($19) {
    $20 = ((($3)) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21;
   } else {
    $22 = $5;
   }
   HEAP32[$0>>2] = $22;
   $23 = HEAP32[$3>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[2]|0;
   $27 = ((($26)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (FUNCTION_TABLE_iiii[$28 & 63](8,$23,$0)|0);
   if ($29) {
    $30 = HEAP32[$0>>2]|0;
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 63]($30)|0);
    HEAP32[$vararg_buffer>>2] = 23194;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $25;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(23058,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = 23194;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $25;
    _abort_message(23103,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(23182,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (___pthread_once(27012,62)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[6754]|0;
  $3 = (___pthread_getspecific($2)|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(23333,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _abort_message($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[2398]|0;
 (_vfprintf($2,$0,$1)|0);
 (_fputc(10,$2)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = (___dynamic_cast($1,32,16,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$2 = 0;
   } else {
    $8 = ((($3)) + 4|0);
    dest=$8; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$3>>2] = $6;
    $9 = ((($3)) + 8|0);
    HEAP32[$9>>2] = $0;
    $10 = ((($3)) + 12|0);
    HEAP32[$10>>2] = -1;
    $11 = ((($3)) + 48|0);
    HEAP32[$11>>2] = 1;
    $12 = HEAP32[$6>>2]|0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$14 & 63]($6,$3,$15,1);
    $16 = ((($3)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = ((($3)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$2>>2] = $20;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if ($9) {
    $10 = ((($1)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==($2|0);
    $13 = ((($1)) + 32|0);
    if (!($12)) {
     $14 = ((($1)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($2|0);
     if (!($16)) {
      HEAP32[$13>>2] = $3;
      HEAP32[$14>>2] = $2;
      $18 = ((($1)) + 40|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (($19) + 1)|0;
      HEAP32[$18>>2] = $20;
      $21 = ((($1)) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($22|0)==(1);
      if ($23) {
       $24 = ((($1)) + 24|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = ($25|0)==(2);
       if ($26) {
        $27 = ((($1)) + 54|0);
        HEAP8[$27>>0] = 1;
       }
      }
      $28 = ((($1)) + 44|0);
      HEAP32[$28>>2] = 4;
      break;
     }
    }
    $17 = ($3|0)==(1);
    if ($17) {
     HEAP32[$13>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 }
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 return ($3|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = ((($1)) + 36|0);
 $8 = ((($1)) + 24|0);
 do {
  if ($6) {
   HEAP32[$4>>2] = $2;
   HEAP32[$8>>2] = $3;
   HEAP32[$7>>2] = 1;
  } else {
   $9 = ($5|0)==($2|0);
   if (!($9)) {
    $12 = HEAP32[$7>>2]|0;
    $13 = (($12) + 1)|0;
    HEAP32[$7>>2] = $13;
    HEAP32[$8>>2] = 2;
    $14 = ((($1)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $10 = HEAP32[$8>>2]|0;
   $11 = ($10|0)==(2);
   if ($11) {
    HEAP32[$8>>2] = $3;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($2|0);
 if ($6) {
  $7 = ((($1)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(1);
  if (!($9)) {
   HEAP32[$7>>2] = $3;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 53|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($3|0);
 do {
  if ($8) {
   $9 = ((($1)) + 52|0);
   HEAP8[$9>>0] = 1;
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   $13 = ((($1)) + 54|0);
   $14 = ((($1)) + 48|0);
   $15 = ((($1)) + 24|0);
   $16 = ((($1)) + 36|0);
   if ($12) {
    HEAP32[$10>>2] = $2;
    HEAP32[$15>>2] = $4;
    HEAP32[$16>>2] = 1;
    $17 = HEAP32[$14>>2]|0;
    $18 = ($17|0)==(1);
    $19 = ($4|0)==(1);
    $or$cond = $18 & $19;
    if (!($or$cond)) {
     break;
    }
    HEAP8[$13>>0] = 1;
    break;
   }
   $20 = ($11|0)==($2|0);
   if (!($20)) {
    $27 = HEAP32[$16>>2]|0;
    $28 = (($27) + 1)|0;
    HEAP32[$16>>2] = $28;
    HEAP8[$13>>0] = 1;
    break;
   }
   $21 = HEAP32[$15>>2]|0;
   $22 = ($21|0)==(2);
   if ($22) {
    HEAP32[$15>>2] = $4;
    $25 = $4;
   } else {
    $25 = $21;
   }
   $23 = HEAP32[$14>>2]|0;
   $24 = ($23|0)==(1);
   $26 = ($25|0)==(1);
   $or$cond22 = $24 & $26;
   if ($or$cond22) {
    HEAP8[$13>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$33 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + -8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + ($7)|0);
 $9 = ((($5)) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $2;
 $11 = ((($4)) + 4|0);
 HEAP32[$11>>2] = $0;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($4)) + 16|0);
 $15 = ((($4)) + 20|0);
 $16 = ((($4)) + 24|0);
 $17 = ((($4)) + 28|0);
 $18 = ((($4)) + 32|0);
 $19 = ((($4)) + 40|0);
 dest=$14; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$14+36>>1]=0|0;HEAP8[$14+38>>0]=0|0;
 $20 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10,$2,0)|0);
 L1: do {
  if ($20) {
   $21 = ((($4)) + 48|0);
   HEAP32[$21>>2] = 1;
   $22 = HEAP32[$10>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viiiiii[$24 & 63]($10,$4,$8,$8,1,0);
   $25 = HEAP32[$16>>2]|0;
   $26 = ($25|0)==(1);
   $$ = $26 ? $8 : 0;
   $$0 = $$;
  } else {
   $27 = ((($4)) + 36|0);
   $28 = HEAP32[$10>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_viiiii[$30 & 63]($10,$4,$8,1,0);
   $31 = HEAP32[$27>>2]|0;
   switch ($31|0) {
   case 0:  {
    $32 = HEAP32[$19>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$17>>2]|0;
    $35 = ($34|0)==(1);
    $or$cond = $33 & $35;
    $36 = HEAP32[$18>>2]|0;
    $37 = ($36|0)==(1);
    $or$cond28 = $or$cond & $37;
    $38 = HEAP32[$15>>2]|0;
    $$33 = $or$cond28 ? $38 : 0;
    $$0 = $$33;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $39 = HEAP32[$16>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $41 = HEAP32[$19>>2]|0;
    $42 = ($41|0)==(0);
    $43 = HEAP32[$17>>2]|0;
    $44 = ($43|0)==(1);
    $or$cond30 = $42 & $44;
    $45 = HEAP32[$18>>2]|0;
    $46 = ($45|0)==(1);
    $or$cond32 = $or$cond30 & $46;
    if (!($or$cond32)) {
     $$0 = 0;
     break;
    }
   }
   $47 = HEAP32[$14>>2]|0;
   $$0 = $47;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiiii[$13 & 63]($10,$1,$2,$3,$4,$5);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$037$off038 = 0, $$037$off039 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   $10 = ((($0)) + 8|0);
   if (!($9)) {
    $41 = HEAP32[$10>>2]|0;
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($42)) + 24|0);
    $44 = HEAP32[$43>>2]|0;
    FUNCTION_TABLE_viiiii[$44 & 63]($41,$1,$2,$3,$4);
    break;
   }
   $11 = ((($1)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($2|0);
   $14 = ((($1)) + 32|0);
   if (!($13)) {
    $15 = ((($1)) + 20|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==($2|0);
    if (!($17)) {
     HEAP32[$14>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if ($21) {
      break;
     }
     $22 = ((($1)) + 52|0);
     HEAP8[$22>>0] = 0;
     $23 = ((($1)) + 53|0);
     HEAP8[$23>>0] = 0;
     $24 = HEAP32[$10>>2]|0;
     $25 = HEAP32[$24>>2]|0;
     $26 = ((($25)) + 20|0);
     $27 = HEAP32[$26>>2]|0;
     FUNCTION_TABLE_viiiiii[$27 & 63]($24,$1,$2,$2,1,$4);
     $28 = HEAP8[$23>>0]|0;
     $29 = ($28<<24>>24)==(0);
     if ($29) {
      $$037$off038 = 4;
      label = 11;
     } else {
      $30 = HEAP8[$22>>0]|0;
      $not$ = ($30<<24>>24)==(0);
      if ($not$) {
       $$037$off038 = 3;
       label = 11;
      } else {
       $$037$off039 = 3;
      }
     }
     if ((label|0) == 11) {
      HEAP32[$15>>2] = $2;
      $31 = ((($1)) + 40|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + 1)|0;
      HEAP32[$31>>2] = $33;
      $34 = ((($1)) + 36|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($35|0)==(1);
      if ($36) {
       $37 = ((($1)) + 24|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = ($38|0)==(2);
       if ($39) {
        $40 = ((($1)) + 54|0);
        HEAP8[$40>>0] = 1;
        $$037$off039 = $$037$off038;
       } else {
        $$037$off039 = $$037$off038;
       }
      } else {
       $$037$off039 = $$037$off038;
      }
     }
     HEAP32[$19>>2] = $$037$off039;
     break;
    }
   }
   $18 = ($3|0)==(1);
   if ($18) {
    HEAP32[$14>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 63]($8,$1,$2,$3);
 }
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (___pthread_key_create(27016,63)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(23382,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _free($0);
 $1 = HEAP32[6754]|0;
 $2 = (_pthread_setspecific($1,0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  _abort_message(23432,$vararg_buffer);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(64)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $20 = ___cxa_find_matching_catch_3(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($19);
 // unreachable;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($0|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  __THREW__ = 0;
  invoke_vii(65,(23485|0),($vararg_buffer|0));
  $3 = __THREW__; __THREW__ = 0;
 }
 $4 = ___cxa_find_matching_catch_3(0|0)|0;
 $5 = tempRet0;
 (___cxa_begin_catch(($4|0))|0);
 __THREW__ = 0;
 invoke_vii(65,(23525|0),($vararg_buffer1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = ___cxa_find_matching_catch_3(0|0)|0;
 $8 = tempRet0;
 __THREW__ = 0;
 invoke_v(66);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch_3(0|0)|0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  ___clang_call_terminate($7);
  // unreachable;
 }
}
function __ZSt13get_terminatev() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (Atomics_add(HEAP32, 2504, 0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9bad_allocD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9bad_allocD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt9bad_alloc4whatEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23575|0);
}
function __ZNSt9exceptionD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt11logic_errorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (10128);
 $1 = ((($0)) + 4|0);
 __ZNSt3__218__libcpp_refstringD2Ev($1);
 return;
}
function __ZNSt11logic_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt11logic_error4whatEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = (__ZNKSt3__218__libcpp_refstring5c_strEv($1)|0);
 return ($2|0);
}
function __ZNKSt3__218__libcpp_refstring5c_strEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt3__218__libcpp_refstringD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0)|0);
 if ($1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1396($2)|0);
  $4 = ((($3)) + 8|0);
  $5 = (Atomics_add(HEAP32, $4>>2, -1)|0);
  $6 = (($5) + -1)|0;
  $7 = ($6|0)<(0);
  if ($7) {
   __ZdlPv($3);
  }
 }
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1396($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + -12|0);
 return ($1|0);
}
function __ZNSt12length_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt9bad_allocC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (10108);
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (Atomics_add(HEAP32, 6755, 0)|0);
 $1 = $0;
 return ($1|0);
}
function ___cxa_can_catch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 63]($0,$1,$3)|0);
 $9 = $8&1;
 if ($8) {
  $10 = HEAP32[$3>>2]|0;
  HEAP32[$2>>2] = $10;
 }
 STACKTOP = sp;return ($9|0);
}
function ___cxa_is_pointer_type($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $4 = 0;
 } else {
  $2 = (___dynamic_cast($0,32,136,0)|0);
  $phitmp = ($2|0)!=(0|0);
  $4 = $phitmp;
 }
 $3 = $4&1;
 return ($3|0);
}
function runPostSets() {
}
function __register_pthread_ptr(pthreadPtr, isMainBrowserThread, isMainRuntimeThread) {
    pthreadPtr = pthreadPtr|0;
    isMainBrowserThread = isMainBrowserThread|0;
    isMainRuntimeThread = isMainRuntimeThread|0;
    __pthread_ptr = pthreadPtr;
    __pthread_is_main_browser_thread = isMainBrowserThread;
    __pthread_is_main_runtime_thread = isMainRuntimeThread;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _emscripten_conditional_set_current_thread_status(expectedStatus, newStatus) {
    expectedStatus = expectedStatus|0;
    newStatus = newStatus|0;
}
function _emscripten_is_main_browser_thread() {
    return __pthread_is_main_browser_thread|0; // Semantically the same as testing "!ENVIRONMENT_IS_WORKER" outside the asm.js scope
}
function _emscripten_is_main_runtime_thread() {
    return __pthread_is_main_runtime_thread|0; // Semantically the same as testing "!ENVIRONMENT_IS_PTHREAD" outside the asm.js scope
}
function _emscripten_set_current_thread_status(newStatus) {
    newStatus = newStatus|0;
}
function _emscripten_set_thread_name(threadId, name) {
    threadId = threadId|0;
    name = name|0;
}
function _llvm_bswap_i16(x) {
    x = x|0;
    return (((x&0xff)<<8) | ((x>>8)&0xff))|0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _pthread_self() {
    return __pthread_ptr|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    totalMemory = getTotalMemory()|0;

    // Perform a compare-and-swap loop to update the new dynamic top value. This is because
    // this function can becalled simultaneously in multiple threads.
    do {
      oldDynamicTop = Atomics_load(HEAP32, DYNAMICTOP_PTR>>2)|0;
      newDynamicTop = oldDynamicTop + increment | 0;
      // Asking to increase dynamic top to a too high value? In pthreads builds we cannot
      // enlarge memory, so this needs to fail.
      if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
        | (newDynamicTop|0) < 0 // Also underflow, sbrk() should be able to be used to subtract.
        | (newDynamicTop|0) > (totalMemory|0)) {
        abortOnCannotGrowMemory()|0;
      }
      // Attempt to update the dynamic top to new value. Another thread may have beat this thread to the update,
      // in which case we will need to start over by iterating the loop body again.
      oldDynamicTopOnChange = Atomics_compareExchange(HEAP32, DYNAMICTOP_PTR>>2, oldDynamicTop|0, newDynamicTop|0)|0;
    } while((oldDynamicTopOnChange|0) != (oldDynamicTop|0));
    return oldDynamicTop|0;
}

  
function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&127]()|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&63](a1|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&31](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&127]();
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&63](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&127](a1|0,a2|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&0](a1|0,a2|0,a3|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&63](a1|0,a2|0,a3|0,a4|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}

function b0() {
 ; nullFunc_i(0);return 0;
}
function b1(p0) {
 p0 = p0|0; nullFunc_ii(1);return 0;
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(2);return 0;
}
function b3(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(3);return 0;
}
function b4() {
 ; nullFunc_v(4);
}
function ___cxa_end_catch__wrapper() {
 ; ___cxa_end_catch();
}
function b5(p0) {
 p0 = p0|0; nullFunc_vi(5);
}
function b6(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(6);
}
function b7(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(7);
}
function b8(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(8);
}
function b9(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(9);
}
function b10(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(10);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,___cxa_get_globals_fast,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_ii = [b1,b1,b1,b1,_fd_flush,_fd_close,b1,_hfile_always_local,b1,b1,b1,b1,_mem_close,b1,b1,_net_close,b1,_hfile_always_remote,b1,b1,__ZL8js_closeP5hFILE,b1,b1,b1,___stdio_close,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNKSt9bad_alloc4whatEv,b1,b1,__ZNKSt11logic_error4whatEv,b1,_hfile_plugin_init_net,b1,_t_pool_worker,b1,b1,b1,b1,b1,b1,___emscripten_thread_main
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iii = [b2,b2,b2,b2,b2,b2,_hopen_unknown_scheme,b2,_hopen_mem,_hopen_fd_fileuri,b2,b2,b2,b2,b2,b2,_hopen_net,b2,b2,b2,b2,_deflate_stored,_deflate_fast,_deflate_slow,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_iiii = [b3,_fd_read,_fd_write,_fd_seek,b3,b3,b3,b3,b3,b3,_mem_read,_mem_seek,b3,_net_read,_net_seek,b3,b3,b3,__ZL7js_readP5hFILEPvj,__ZL7js_seekP5hFILEii,b3,b3,b3,b3,b3,___stdio_write,___stdio_seek,___stdout_write,_sn_write
,b3,b3,b3,b3,b3,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_zcalloc,b3,___stdio_read,_do_read,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_v = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,__ZL25default_terminate_handlerv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_hfile_exit,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b4,b4,b4,___cxa_end_catch__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_vi = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b5,b5,b5,b5,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b5,b5,b5,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b5,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b5,__ZNSt12length_errorD0Ev,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,_undo,_nodtor,b5,b5,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv];
var FUNCTION_TABLE_vii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt11logic_errorC2EPKc,b6,_zcfree,b6,b6,b6
,b6,b6,__ZNSt3__218__libcpp_refstringC2EPKc,b6,b6,b6,_abort_message,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_viii = [b7];
var FUNCTION_TABLE_viiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b8,b8,b8,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSG_SG_,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b9,b9,b9,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10];

  return { _RansDecAdvance: _RansDecAdvance, _RansDecAdvanceSymbol: _RansDecAdvanceSymbol, _RansDecGet: _RansDecGet, _RansDecInit: _RansDecInit, _RansDecRenorm: _RansDecRenorm, _RansDecSymbolInit: _RansDecSymbolInit, __GLOBAL__sub_I_interface_cpp: __GLOBAL__sub_I_interface_cpp, __Z12hts_hopen_jsP5hFILEPcPKc: __Z12hts_hopen_jsP5hFILEPcPKc, __Z22emscripten_proxy_fetchP18emscripten_fetch_t: __Z22emscripten_proxy_fetchP18emscripten_fetch_t, __Z7ks_initP4BGZF: __Z7ks_initP4BGZF, __Z8hopen_jsi: __Z8hopen_jsi, __ZL25default_terminate_handlerv: __ZL25default_terminate_handlerv, __ZL7js_readP5hFILEPvj: __ZL7js_readP5hFILEPvj, __ZL7js_seekP5hFILEii: __ZL7js_seekP5hFILEii, __ZL8js_closeP5hFILE: __ZL8js_closeP5hFILE, __ZL9ed_is_bigv: __ZL9ed_is_bigv, __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev: __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev, __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv: __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv, __ZN10__cxxabiv116__shim_type_infoD2Ev: __ZN10__cxxabiv116__shim_type_infoD2Ev, __ZN10__cxxabiv117__class_type_infoD0Ev: __ZN10__cxxabiv117__class_type_infoD0Ev, __ZN10__cxxabiv120__si_class_type_infoD0Ev: __ZN10__cxxabiv120__si_class_type_infoD0Ev, __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b: __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b, __ZNK10__cxxabiv116__shim_type_info5noop1Ev: __ZNK10__cxxabiv116__shim_type_info5noop1Ev, __ZNK10__cxxabiv116__shim_type_info5noop2Ev: __ZNK10__cxxabiv116__shim_type_info5noop2Ev, __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib: __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib, __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib: __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib, __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi: __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi, __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi: __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi, __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i: __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i, __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi: __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi, __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv: __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv, __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib: __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib, __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib: __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib, __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi: __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi, __ZNKSt11logic_error4whatEv: __ZNKSt11logic_error4whatEv, __ZNKSt3__218__libcpp_refstring15__uses_refcountEv: __ZNKSt3__218__libcpp_refstring15__uses_refcountEv, __ZNKSt3__218__libcpp_refstring5c_strEv: __ZNKSt3__218__libcpp_refstring5c_strEv, __ZNKSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE10__root_ptrEv: __ZNKSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE10__root_ptrEv, __ZNKSt9bad_alloc4whatEv: __ZNKSt9bad_alloc4whatEv, __ZNSt11logic_errorC2EPKc: __ZNSt11logic_errorC2EPKc, __ZNSt11logic_errorD0Ev: __ZNSt11logic_errorD0Ev, __ZNSt11logic_errorD2Ev: __ZNSt11logic_errorD2Ev, __ZNSt12length_errorD0Ev: __ZNSt12length_errorD0Ev, __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE: __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE, __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1396: __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1396, __ZNSt3__218__libcpp_refstringC2EPKc: __ZNSt3__218__libcpp_refstringC2EPKc, __ZNSt3__218__libcpp_refstringD2Ev: __ZNSt3__218__libcpp_refstringD2Ev, __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_: __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_, __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_: __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_, __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_: __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_, __ZNSt3__23mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEE25__construct_node_with_keyERS7_: __ZNSt3__23mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEE25__construct_node_with_keyERS7_, __ZNSt3__23mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEEixERS7_: __ZNSt3__23mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEEixERS7_, __ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE12__find_equalIiEERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISG_EERKT_: __ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE12__find_equalIiEERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISG_EERKT_, __ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE13__lower_boundIiEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_SH_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISF_EEEE: __ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE13__lower_boundIiEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_SH_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISF_EEEE, __ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSG_SG_: __ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSG_SG_, __ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE4findIiEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_: __ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE4findIiEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_, __ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEEC2ERKS8_: __ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEEC2ERKS8_, __ZNSt9bad_allocC2Ev: __ZNSt9bad_allocC2Ev, __ZNSt9bad_allocD0Ev: __ZNSt9bad_allocD0Ev, __ZNSt9bad_allocD2Ev: __ZNSt9bad_allocD2Ev, __ZNSt9exceptionD2Ev: __ZNSt9exceptionD2Ev, __ZNSt9type_infoD2Ev: __ZNSt9type_infoD2Ev, __ZSt11__terminatePFvvE: __ZSt11__terminatePFvvE, __ZSt13get_terminatev: __ZSt13get_terminatev, __ZSt15get_new_handlerv: __ZSt15get_new_handlerv, __ZSt9terminatev: __ZSt9terminatev, __ZdlPv: __ZdlPv, __Znwj: __Znwj, ___DOUBLE_BITS_272: ___DOUBLE_BITS_272, ___DOUBLE_BITS_683: ___DOUBLE_BITS_683, ___ac_X31_hash_string: ___ac_X31_hash_string, ___ac_X31_hash_string_200: ___ac_X31_hash_string_200, ___ac_X31_hash_string_517: ___ac_X31_hash_string_517, ___ac_X31_hash_string_925: ___ac_X31_hash_string_925, ___bswap_16: ___bswap_16, ___bswap_16_488: ___bswap_16_488, ___bswap_32: ___bswap_32, ___clang_call_terminate: ___clang_call_terminate, ___cxa_can_catch: ___cxa_can_catch, ___cxa_get_globals_fast: ___cxa_get_globals_fast, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___cxx_global_var_init: ___cxx_global_var_init, ___dynamic_cast: ___dynamic_cast, ___emscripten_pthread_data_constructor: ___emscripten_pthread_data_constructor, ___emscripten_thread_main: ___emscripten_thread_main, ___errno_location: ___errno_location, ___fdopen: ___fdopen, ___fflush_unlocked: ___fflush_unlocked, ___floatscan: ___floatscan, ___fmodeflags: ___fmodeflags, ___fseeko: ___fseeko, ___fseeko_unlocked: ___fseeko_unlocked, ___ftello: ___ftello, ___ftello_unlocked: ___ftello_unlocked, ___fwritex: ___fwritex, ___intscan: ___intscan, ___lctrans: ___lctrans, ___lctrans_impl: ___lctrans_impl, ___lockfile: ___lockfile, ___memrchr: ___memrchr, ___mo_lookup: ___mo_lookup, ___muldi3: ___muldi3, ___muldsi3: ___muldsi3, ___ofl_add: ___ofl_add, ___ofl_lock: ___ofl_lock, ___ofl_unlock: ___ofl_unlock, ___overflow: ___overflow, ___private_cond_signal: ___private_cond_signal, ___procfdname: ___procfdname, ___pthread_cond_timedwait: ___pthread_cond_timedwait, ___pthread_getspecific: ___pthread_getspecific, ___pthread_key_create: ___pthread_key_create, ___pthread_mutex_lock: ___pthread_mutex_lock, ___pthread_mutex_timedlock: ___pthread_mutex_timedlock, ___pthread_mutex_trylock: ___pthread_mutex_trylock, ___pthread_mutex_trylock_owner: ___pthread_mutex_trylock_owner, ___pthread_mutex_unlock: ___pthread_mutex_unlock, ___pthread_once: ___pthread_once, ___pthread_once_full: ___pthread_once_full, ___pthread_self_103: ___pthread_self_103, ___pthread_self_104: ___pthread_self_104, ___pthread_self_420: ___pthread_self_420, ___pthread_self_429: ___pthread_self_429, ___pthread_self_611: ___pthread_self_611, ___pthread_setcancelstate: ___pthread_setcancelstate, ___pthread_testcancel: ___pthread_testcancel, ___pthread_tsd_run_dtors: ___pthread_tsd_run_dtors, ___shgetc: ___shgetc, ___shlim: ___shlim, ___stdio_close: ___stdio_close, ___stdio_read: ___stdio_read, ___stdio_seek: ___stdio_seek, ___stdio_write: ___stdio_write, ___stdout_write: ___stdout_write, ___stpcpy: ___stpcpy, ___stpncpy: ___stpncpy, ___strchrnul: ___strchrnul, ___strdup: ___strdup, ___strerror_l: ___strerror_l, ___string_read: ___string_read, ___syscall_ret: ___syscall_ret, ___timedwait: ___timedwait, ___timedwait_cp: ___timedwait_cp, ___toread: ___toread, ___towrite: ___towrite, ___udivdi3: ___udivdi3, ___udivmoddi4: ___udivmoddi4, ___uflow: ___uflow, ___unlist_locked_file: ___unlist_locked_file, ___unlockfile: ___unlockfile, ___uremdi3: ___uremdi3, ___vm_lock: ___vm_lock, ___vm_unlock: ___vm_unlock, ___wait: ___wait, __do_call: __do_call, __emscripten_atomic_fetch_and_add_u64: __emscripten_atomic_fetch_and_add_u64, __emscripten_atomic_fetch_and_and_u64: __emscripten_atomic_fetch_and_and_u64, __emscripten_atomic_fetch_and_or_u64: __emscripten_atomic_fetch_and_or_u64, __emscripten_atomic_fetch_and_sub_u64: __emscripten_atomic_fetch_and_sub_u64, __emscripten_atomic_fetch_and_xor_u64: __emscripten_atomic_fetch_and_xor_u64, __emscripten_get_fetch_queue: __emscripten_get_fetch_queue, __pthread_isduecanceled: __pthread_isduecanceled, __pthread_msecs_until: __pthread_msecs_until, __register_pthread_ptr: __register_pthread_ptr, __tr_align: __tr_align, __tr_flush_bits: __tr_flush_bits, __tr_flush_block: __tr_flush_block, __tr_init: __tr_init, __tr_stored_block: __tr_stored_block, _abort_message: _abort_message, _access: _access, _adler32: _adler32, _arg_n: _arg_n, _atoi: _atoi, _bgzf_close: _bgzf_close, _bgzf_compress: _bgzf_compress, _bgzf_flush: _bgzf_flush, _bgzf_getc: _bgzf_getc, _bgzf_gzip_compress: _bgzf_gzip_compress, _bgzf_hopen: _bgzf_hopen, _bgzf_index_add_block: _bgzf_index_add_block, _bgzf_index_build_init: _bgzf_index_build_init, _bgzf_index_destroy: _bgzf_index_destroy, _bgzf_index_dump: _bgzf_index_dump, _bgzf_index_load: _bgzf_index_load, _bgzf_open: _bgzf_open, _bgzf_open_ref: _bgzf_open_ref, _bgzf_read_block: _bgzf_read_block, _bgzf_read_init: _bgzf_read_init, _bgzf_utell: _bgzf_utell, _bgzf_write_init: _bgzf_write_init, _bgzf_zerr: _bgzf_zerr, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _blksize: _blksize, _build_tree: _build_tree, _cache_block: _cache_block, _calloc: _calloc, _check_header: _check_header, _close: _close, _compressBound: _compressBound, _compress_block: _compress_block, _connect: _connect, _copysign: _copysign, _copysignl: _copysignl, _cram_dopen: _cram_dopen, _cram_free_block: _cram_free_block, _cram_free_compression_header: _cram_free_compression_header, _cram_free_container: _cram_free_container, _cram_free_slice: _cram_free_slice, _cram_free_slice_header: _cram_free_slice_header, _cram_index_query: _cram_index_query, _cram_init_tables: _cram_init_tables, _cram_load_reference: _cram_load_reference, _cram_new_metrics: _cram_new_metrics, _cram_read_SAM_hdr: _cram_read_SAM_hdr, _cram_read_block: _cram_read_block, _cram_read_container: _cram_read_container, _cram_read_file_def: _cram_read_file_def, _cram_seek: _cram_seek, _cram_seek_to_refpos: _cram_seek_to_refpos, _cram_set_option: _cram_set_option, _cram_set_voption: _cram_set_voption, _cram_stats_free: _cram_stats_free, _cram_uncompress_block: _cram_uncompress_block, _crc32: _crc32, _decfloat: _decfloat, _decompress_peek: _decompress_peek, _deflate: _deflate, _deflateEnd: _deflateEnd, _deflateInit2_: _deflateInit2_, _deflateReset: _deflateReset, _deflate_block: _deflate_block, _deflate_fast: _deflate_fast, _deflate_slow: _deflate_slow, _deflate_stored: _deflate_stored, _dispose_chunk: _dispose_chunk, _do_read: _do_read, _dummy_568: _dummy_568, _ed_is_big_430: _ed_is_big_430, _ed_swap_8_488: _ed_swap_8_488, _ed_swap_8p_493: _ed_swap_8p_493, _emscripten_async_run_in_main_thread: _emscripten_async_run_in_main_thread, _emscripten_atomic_add_u64: _emscripten_atomic_add_u64, _emscripten_atomic_and_u64: _emscripten_atomic_and_u64, _emscripten_atomic_cas_u64: _emscripten_atomic_cas_u64, _emscripten_atomic_exchange_u64: _emscripten_atomic_exchange_u64, _emscripten_atomic_load_f32: _emscripten_atomic_load_f32, _emscripten_atomic_load_f64: _emscripten_atomic_load_f64, _emscripten_atomic_load_u64: _emscripten_atomic_load_u64, _emscripten_atomic_or_u64: _emscripten_atomic_or_u64, _emscripten_atomic_store_f32: _emscripten_atomic_store_f32, _emscripten_atomic_store_f64: _emscripten_atomic_store_f64, _emscripten_atomic_store_u64: _emscripten_atomic_store_u64, _emscripten_atomic_sub_u64: _emscripten_atomic_sub_u64, _emscripten_atomic_xor_u64: _emscripten_atomic_xor_u64, _emscripten_conditional_set_current_thread_status: _emscripten_conditional_set_current_thread_status, _emscripten_fetch: _emscripten_fetch, _emscripten_fetch_attr_init: _emscripten_fetch_attr_init, _emscripten_fetch_close: _emscripten_fetch_close, _emscripten_fetch_wait: _emscripten_fetch_wait, _emscripten_get_global_libc: _emscripten_get_global_libc, _emscripten_is_main_browser_thread: _emscripten_is_main_browser_thread, _emscripten_is_main_runtime_thread: _emscripten_is_main_runtime_thread, _emscripten_main_thread_process_queued_calls: _emscripten_main_thread_process_queued_calls, _emscripten_set_current_thread_status: _emscripten_set_current_thread_status, _emscripten_set_thread_name: _emscripten_set_thread_name, _emscripten_sync_run_in_main_thread: _emscripten_sync_run_in_main_thread, _emscripten_sync_run_in_main_thread_0: _emscripten_sync_run_in_main_thread_0, _emscripten_sync_run_in_main_thread_1: _emscripten_sync_run_in_main_thread_1, _emscripten_sync_run_in_main_thread_2: _emscripten_sync_run_in_main_thread_2, _emscripten_sync_run_in_main_thread_3: _emscripten_sync_run_in_main_thread_3, _emscripten_sync_run_in_main_thread_4: _emscripten_sync_run_in_main_thread_4, _emscripten_sync_run_in_main_thread_5: _emscripten_sync_run_in_main_thread_5, _emscripten_sync_run_in_main_thread_6: _emscripten_sync_run_in_main_thread_6, _emscripten_sync_run_in_main_thread_7: _emscripten_sync_run_in_main_thread_7, _emscripten_sync_run_in_main_thread_xprintf_varargs: _emscripten_sync_run_in_main_thread_xprintf_varargs, _emscripten_wait_for_call_v: _emscripten_wait_for_call_v, _fai_build: _fai_build, _fai_build_core: _fai_build_core, _fai_destroy: _fai_destroy, _fai_insert_index: _fai_insert_index, _fai_save: _fai_save, _fclose: _fclose, _fd_close: _fd_close, _fd_flush: _fd_flush, _fd_read: _fd_read, _fd_seek: _fd_seek, _fd_write: _fd_write, _fflush: _fflush, _fgets: _fgets, _fileno: _fileno, _fill_window: _fill_window, _find_scheme_handler: _find_scheme_handler, _flush_buffer: _flush_buffer, _fmod: _fmod, _fmodl: _fmodl, _fmt_fp: _fmt_fp, _fmt_o: _fmt_o, _fmt_u: _fmt_u, _fmt_x: _fmt_x, _fopen: _fopen, _fourbyte_strstr: _fourbyte_strstr, _fprintf: _fprintf, _fputc: _fputc, _fread: _fread, _fread_uint64: _fread_uint64, _free: _free, _free_cache: _free_cache, _freeaddrinfo: _freeaddrinfo, _frexp: _frexp, _frexpl: _frexpl, _fseek: _fseek, _fstat: _fstat, _fsync: _fsync, _ftell: _ftell, _ftruncate: _ftruncate, _fwrite: _fwrite, _fwrite_uint64: _fwrite_uint64, _getint: _getint, _hclose: _hclose, _hclose_abruptly: _hclose_abruptly, _hdopen: _hdopen, _hexfloat: _hexfloat, _hfile_add_scheme_handler: _hfile_add_scheme_handler, _hfile_always_local: _hfile_always_local, _hfile_always_remote: _hfile_always_remote, _hfile_destroy: _hfile_destroy, _hfile_exit: _hfile_exit, _hfile_init: _hfile_init, _hfile_oflags: _hfile_oflags, _hfile_plugin_init_net: _hfile_plugin_init_net, _hflush: _hflush, _hgetc: _hgetc, _hgetc2: _hgetc2, _hopen: _hopen, _hopen_fd: _hopen_fd, _hopen_fd_fileuri: _hopen_fd_fileuri, _hopen_fd_stdinout: _hopen_fd_stdinout, _hopen_mem: _hopen_mem, _hopen_net: _hopen_net, _hopen_unknown_scheme: _hopen_unknown_scheme, _hpeek: _hpeek, _hread: _hread, _hread2: _hread2, _hread_445: _hread_445, _hseek: _hseek, _htell: _htell, _htell_446: _htell_446, _htonl: _htonl, _htons: _htons, _hts_detect_format: _hts_detect_format, _hts_fetch_js: _hts_fetch_js, _hts_open_js: _hts_open_js, _hwrite2: _hwrite2, _hwrite_463: _hwrite_463, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _inflate: _inflate, _inflateEnd: _inflateEnd, _inflateInit2_: _inflateInit2_, _inflateReset2: _inflateReset2, _inflate_block: _inflate_block, _inflate_fast: _inflate_fast, _inflate_gzip_block: _inflate_gzip_block, _inflate_table: _inflate_table, _init_add_plugin: _init_add_plugin, _init_block: _init_block, _int32_decode: _int32_decode, _int32_get_blk: _int32_get_blk, _isalnum: _isalnum, _isalnum_c: _isalnum_c, _isalpha: _isalpha, _isdigit: _isdigit, _isdigit_c: _isdigit_c, _isgraph: _isgraph, _isspace: _isspace, _isupper: _isupper, _itf8_decode_crc: _itf8_decode_crc, _kftp_connect: _kftp_connect, _kftp_connect_file: _kftp_connect_file, _kftp_get_response: _kftp_get_response, _kftp_parse_url: _kftp_parse_url, _kftp_pasv_connect: _kftp_pasv_connect, _kftp_pasv_prep: _kftp_pasv_prep, _kftp_reconnect: _kftp_reconnect, _kftp_send_cmd: _kftp_send_cmd, _kh_del_cache: _kh_del_cache, _kh_destroy_cache: _kh_destroy_cache, _kh_destroy_m_i2i: _kh_destroy_m_i2i, _kh_destroy_m_s2i: _kh_destroy_m_s2i, _kh_destroy_m_s2i_546: _kh_destroy_m_s2i_546, _kh_destroy_map: _kh_destroy_map, _kh_destroy_refs: _kh_destroy_refs, _kh_destroy_s: _kh_destroy_s, _kh_destroy_s_i2i: _kh_destroy_s_i2i, _kh_destroy_sam_hdr: _kh_destroy_sam_hdr, _kh_destroy_scheme_string: _kh_destroy_scheme_string, _kh_get_cache: _kh_get_cache, _kh_get_m_s2i: _kh_get_m_s2i, _kh_get_refs: _kh_get_refs, _kh_get_s: _kh_get_s, _kh_get_sam_hdr: _kh_get_sam_hdr, _kh_get_scheme_string: _kh_get_scheme_string, _kh_init_cache: _kh_init_cache, _kh_init_m_s2i_536: _kh_init_m_s2i_536, _kh_init_refs: _kh_init_refs, _kh_init_s: _kh_init_s, _kh_init_sam_hdr: _kh_init_sam_hdr, _kh_init_scheme_string: _kh_init_scheme_string, _kh_put_cache: _kh_put_cache, _kh_put_m_s2i: _kh_put_m_s2i, _kh_put_refs: _kh_put_refs, _kh_put_s: _kh_put_s, _kh_put_sam_hdr: _kh_put_sam_hdr, _kh_put_scheme_string: _kh_put_scheme_string, _kh_resize_cache: _kh_resize_cache, _kh_resize_m_s2i: _kh_resize_m_s2i, _kh_resize_refs: _kh_resize_refs, _kh_resize_s: _kh_resize_s, _kh_resize_sam_hdr: _kh_resize_sam_hdr, _kh_resize_scheme_string: _kh_resize_scheme_string, _khttp_connect_file: _khttp_connect_file, _khttp_parse_url: _khttp_parse_url, _knet_close: _knet_close, _knet_open: _knet_open, _knet_read: _knet_read, _knet_seek: _knet_seek, _kputc__916: _kputc__916, _kputsn_510: _kputsn_510, _kputsn_918: _kputsn_918, _ks_len: _ks_len, _ks_str: _ks_str, _llvm_bswap_i16: _llvm_bswap_i16, _llvm_bswap_i32: _llvm_bswap_i32, _llvm_cttz_i32: _llvm_cttz_i32, _load_block_from_cache: _load_block_from_cache, _load_hfile_plugins: _load_hfile_plugins, _longest_match: _longest_match, _lseek: _lseek, _ltf8_decode_crc: _ltf8_decode_crc, _malloc: _malloc, _mbrtowc: _mbrtowc, _mbsinit: _mbsinit, _mem_close: _mem_close, _mem_read: _mem_read, _mem_seek: _mem_seek, _memchr: _memchr, _memcmp: _memcmp, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _mfclose: _mfclose, _mfdestroy: _mfdestroy, _mfflush: _mfflush, _mode2level: _mode2level, _mt_destroy: _mt_destroy, _mt_flush_queue: _mt_flush_queue, _mt_queue: _mt_queue, _my_netread: _my_netread, _net_close: _net_close, _net_init: _net_init, _net_read: _net_read, _net_seek: _net_seek, _new_pool: _new_pool, _new_string_pool: _new_string_pool, _next_power_2: _next_power_2, _nodtor: _nodtor, _ntohs: _ntohs, _open: _open, _out: _out, _packInt16: _packInt16, _packInt32: _packInt32, _pad_682: _pad_682, _parse_version: _parse_version, _perror: _perror, _pool_alloc: _pool_alloc, _pool_create: _pool_create, _pool_destroy: _pool_destroy, _pop_arg: _pop_arg, _printf: _printf, _printf_core: _printf_core, _proxy_main: _proxy_main, _pthread_attr_destroy: _pthread_attr_destroy, _pthread_attr_init: _pthread_attr_init, _pthread_attr_setdetachstate: _pthread_attr_setdetachstate, _pthread_attr_setstacksize: _pthread_attr_setstacksize, _pthread_cond_broadcast: _pthread_cond_broadcast, _pthread_cond_destroy: _pthread_cond_destroy, _pthread_cond_init: _pthread_cond_init, _pthread_cond_signal: _pthread_cond_signal, _pthread_cond_wait: _pthread_cond_wait, _pthread_mutex_destroy: _pthread_mutex_destroy, _pthread_mutex_init: _pthread_mutex_init, _pthread_mutexattr_destroy: _pthread_mutexattr_destroy, _pthread_mutexattr_init: _pthread_mutexattr_init, _pthread_self: _pthread_self, _pthread_setspecific: _pthread_setspecific, _rans_uncompress: _rans_uncompress, _rans_uncompress_O0: _rans_uncompress_O0, _rans_uncompress_O1: _rans_uncompress_O1, _read: _read, _realloc: _realloc, _recv: _recv, _recvfrom: _recvfrom, _ref_entry_free_seq: _ref_entry_free_seq, _refill_buffer: _refill_buffer, _refs2id: _refs2id, _refs_create: _refs_create, _refs_free: _refs_free, _refs_from_header: _refs_from_header, _refs_load_fai: _refs_load_fai, _sam_hdr_add_lines: _sam_hdr_add_lines, _sam_hdr_error: _sam_hdr_error, _sam_hdr_find: _sam_hdr_find, _sam_hdr_find_key: _sam_hdr_find_key, _sam_hdr_free: _sam_hdr_free, _sam_hdr_link_pg: _sam_hdr_link_pg, _sam_hdr_new: _sam_hdr_new, _sam_hdr_parse_: _sam_hdr_parse_, _sam_hdr_parse_sort_order: _sam_hdr_parse_sort_order, _sam_hdr_update_hashes: _sam_hdr_update_hashes, _sanitise_SQ_lines: _sanitise_SQ_lines, _sbrk: _sbrk, _scalbn: _scalbn, _scalbnl: _scalbnl, _scanexp: _scanexp, _select: _select, _send: _send, _send_tree: _send_tree, _sendto: _sendto, _setsockopt: _setsockopt, _sn_write: _sn_write, _snprintf: _snprintf, _socket: _socket, _socket_connect: _socket_connect, _socket_wait: _socket_wait, _sprintf: _sprintf, _sscanf: _sscanf, _stat: _stat, _store_int: _store_int, _strchr: _strchr, _strcmp: _strcmp, _strcpy: _strcpy, _strerror: _strerror, _string_alloc: _string_alloc, _string_dup: _string_dup, _string_ndup: _string_ndup, _string_pool_create: _string_pool_create, _string_pool_destroy: _string_pool_destroy, _strlen: _strlen, _strncmp: _strncmp, _strncpy: _strncpy, _strrchr: _strrchr, _strstr: _strstr, _strtol: _strtol, _strtoll: _strtoll, _strtox_740: _strtox_740, _swapc: _swapc, _t_pool_add_result: _t_pool_add_result, _t_pool_init: _t_pool_init, _t_pool_worker: _t_pool_worker, _t_results_queue_init: _t_results_queue_init, _threebyte_strstr: _threebyte_strstr, _tolower: _tolower, _tolower_c_204: _tolower_c_204, _try_realloc_chunk: _try_realloc_chunk, _twobyte_strstr: _twobyte_strstr, _twoway_strstr: _twoway_strstr, _undo: _undo, _unpackInt16: _unpackInt16, _updatewindow: _updatewindow, _vfprintf: _vfprintf, _vfscanf: _vfscanf, _vsnprintf: _vsnprintf, _vsprintf: _vsprintf, _vsscanf: _vsscanf, _wcrtomb: _wcrtomb, _wctomb: _wctomb, _worker_aux: _worker_aux, _write: _write, _writebuffer_is_nonempty: _writebuffer_is_nonempty, _zcalloc: _zcalloc, _zcfree: _zcfree, _zlib_mem_inflate: _zlib_mem_inflate, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__RansDecAdvance = asm["_RansDecAdvance"]; asm["_RansDecAdvance"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__RansDecAdvance.apply(null, arguments);
};

var real__RansDecAdvanceSymbol = asm["_RansDecAdvanceSymbol"]; asm["_RansDecAdvanceSymbol"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__RansDecAdvanceSymbol.apply(null, arguments);
};

var real__RansDecGet = asm["_RansDecGet"]; asm["_RansDecGet"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__RansDecGet.apply(null, arguments);
};

var real__RansDecInit = asm["_RansDecInit"]; asm["_RansDecInit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__RansDecInit.apply(null, arguments);
};

var real__RansDecRenorm = asm["_RansDecRenorm"]; asm["_RansDecRenorm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__RansDecRenorm.apply(null, arguments);
};

var real__RansDecSymbolInit = asm["_RansDecSymbolInit"]; asm["_RansDecSymbolInit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__RansDecSymbolInit.apply(null, arguments);
};

var real___GLOBAL__sub_I_interface_cpp = asm["__GLOBAL__sub_I_interface_cpp"]; asm["__GLOBAL__sub_I_interface_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_interface_cpp.apply(null, arguments);
};

var real___Z12hts_hopen_jsP5hFILEPcPKc = asm["__Z12hts_hopen_jsP5hFILEPcPKc"]; asm["__Z12hts_hopen_jsP5hFILEPcPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Z12hts_hopen_jsP5hFILEPcPKc.apply(null, arguments);
};

var real___Z22emscripten_proxy_fetchP18emscripten_fetch_t = asm["__Z22emscripten_proxy_fetchP18emscripten_fetch_t"]; asm["__Z22emscripten_proxy_fetchP18emscripten_fetch_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Z22emscripten_proxy_fetchP18emscripten_fetch_t.apply(null, arguments);
};

var real___Z7ks_initP4BGZF = asm["__Z7ks_initP4BGZF"]; asm["__Z7ks_initP4BGZF"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Z7ks_initP4BGZF.apply(null, arguments);
};

var real___Z8hopen_jsi = asm["__Z8hopen_jsi"]; asm["__Z8hopen_jsi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Z8hopen_jsi.apply(null, arguments);
};

var real___ZL25default_terminate_handlerv = asm["__ZL25default_terminate_handlerv"]; asm["__ZL25default_terminate_handlerv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZL25default_terminate_handlerv.apply(null, arguments);
};

var real___ZL7js_readP5hFILEPvj = asm["__ZL7js_readP5hFILEPvj"]; asm["__ZL7js_readP5hFILEPvj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZL7js_readP5hFILEPvj.apply(null, arguments);
};

var real___ZL7js_seekP5hFILEii = asm["__ZL7js_seekP5hFILEii"]; asm["__ZL7js_seekP5hFILEii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZL7js_seekP5hFILEii.apply(null, arguments);
};

var real___ZL8js_closeP5hFILE = asm["__ZL8js_closeP5hFILE"]; asm["__ZL8js_closeP5hFILE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZL8js_closeP5hFILE.apply(null, arguments);
};

var real___ZL9ed_is_bigv = asm["__ZL9ed_is_bigv"]; asm["__ZL9ed_is_bigv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZL9ed_is_bigv.apply(null, arguments);
};

var real___ZN10__cxxabiv112_GLOBAL__N_110construct_Ev = asm["__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev"]; asm["__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10__cxxabiv112_GLOBAL__N_110construct_Ev.apply(null, arguments);
};

var real___ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv = asm["__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv"]; asm["__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv.apply(null, arguments);
};

var real___ZN10__cxxabiv116__shim_type_infoD2Ev = asm["__ZN10__cxxabiv116__shim_type_infoD2Ev"]; asm["__ZN10__cxxabiv116__shim_type_infoD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10__cxxabiv116__shim_type_infoD2Ev.apply(null, arguments);
};

var real___ZN10__cxxabiv117__class_type_infoD0Ev = asm["__ZN10__cxxabiv117__class_type_infoD0Ev"]; asm["__ZN10__cxxabiv117__class_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10__cxxabiv117__class_type_infoD0Ev.apply(null, arguments);
};

var real___ZN10__cxxabiv120__si_class_type_infoD0Ev = asm["__ZN10__cxxabiv120__si_class_type_infoD0Ev"]; asm["__ZN10__cxxabiv120__si_class_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10__cxxabiv120__si_class_type_infoD0Ev.apply(null, arguments);
};

var real___ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b = asm["__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b"]; asm["__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b.apply(null, arguments);
};

var real___ZNK10__cxxabiv116__shim_type_info5noop1Ev = asm["__ZNK10__cxxabiv116__shim_type_info5noop1Ev"]; asm["__ZNK10__cxxabiv116__shim_type_info5noop1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv116__shim_type_info5noop1Ev.apply(null, arguments);
};

var real___ZNK10__cxxabiv116__shim_type_info5noop2Ev = asm["__ZNK10__cxxabiv116__shim_type_info5noop2Ev"]; asm["__ZNK10__cxxabiv116__shim_type_info5noop2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv116__shim_type_info5noop2Ev.apply(null, arguments);
};

var real___ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = asm["__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"]; asm["__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib.apply(null, arguments);
};

var real___ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = asm["__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"]; asm["__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib.apply(null, arguments);
};

var real___ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi = asm["__ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi"]; asm["__ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi.apply(null, arguments);
};

var real___ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = asm["__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"]; asm["__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi.apply(null, arguments);
};

var real___ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i = asm["__ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i"]; asm["__ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i.apply(null, arguments);
};

var real___ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi = asm["__ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi"]; asm["__ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi.apply(null, arguments);
};

var real___ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv = asm["__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv"]; asm["__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv.apply(null, arguments);
};

var real___ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = asm["__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"]; asm["__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib.apply(null, arguments);
};

var real___ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = asm["__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"]; asm["__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib.apply(null, arguments);
};

var real___ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = asm["__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"]; asm["__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi.apply(null, arguments);
};

var real___ZNKSt11logic_error4whatEv = asm["__ZNKSt11logic_error4whatEv"]; asm["__ZNKSt11logic_error4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt11logic_error4whatEv.apply(null, arguments);
};

var real___ZNKSt3__218__libcpp_refstring15__uses_refcountEv = asm["__ZNKSt3__218__libcpp_refstring15__uses_refcountEv"]; asm["__ZNKSt3__218__libcpp_refstring15__uses_refcountEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__218__libcpp_refstring15__uses_refcountEv.apply(null, arguments);
};

var real___ZNKSt3__218__libcpp_refstring5c_strEv = asm["__ZNKSt3__218__libcpp_refstring5c_strEv"]; asm["__ZNKSt3__218__libcpp_refstring5c_strEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__218__libcpp_refstring5c_strEv.apply(null, arguments);
};

var real___ZNKSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE10__root_ptrEv = asm["__ZNKSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE10__root_ptrEv"]; asm["__ZNKSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE10__root_ptrEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE10__root_ptrEv.apply(null, arguments);
};

var real___ZNKSt9bad_alloc4whatEv = asm["__ZNKSt9bad_alloc4whatEv"]; asm["__ZNKSt9bad_alloc4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt9bad_alloc4whatEv.apply(null, arguments);
};

var real___ZNSt11logic_errorC2EPKc = asm["__ZNSt11logic_errorC2EPKc"]; asm["__ZNSt11logic_errorC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt11logic_errorC2EPKc.apply(null, arguments);
};

var real___ZNSt11logic_errorD0Ev = asm["__ZNSt11logic_errorD0Ev"]; asm["__ZNSt11logic_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt11logic_errorD0Ev.apply(null, arguments);
};

var real___ZNSt11logic_errorD2Ev = asm["__ZNSt11logic_errorD2Ev"]; asm["__ZNSt11logic_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt11logic_errorD2Ev.apply(null, arguments);
};

var real___ZNSt12length_errorD0Ev = asm["__ZNSt12length_errorD0Ev"]; asm["__ZNSt12length_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt12length_errorD0Ev.apply(null, arguments);
};

var real___ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE = asm["__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE"]; asm["__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE.apply(null, arguments);
};

var real___ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1396 = asm["__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1396"]; asm["__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1396"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1396.apply(null, arguments);
};

var real___ZNSt3__218__libcpp_refstringC2EPKc = asm["__ZNSt3__218__libcpp_refstringC2EPKc"]; asm["__ZNSt3__218__libcpp_refstringC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__218__libcpp_refstringC2EPKc.apply(null, arguments);
};

var real___ZNSt3__218__libcpp_refstringD2Ev = asm["__ZNSt3__218__libcpp_refstringD2Ev"]; asm["__ZNSt3__218__libcpp_refstringD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__218__libcpp_refstringD2Ev.apply(null, arguments);
};

var real___ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_ = asm["__ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_"]; asm["__ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_.apply(null, arguments);
};

var real___ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_ = asm["__ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_"]; asm["__ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_.apply(null, arguments);
};

var real___ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = asm["__ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_"]; asm["__ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_.apply(null, arguments);
};

var real___ZNSt3__23mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEE25__construct_node_with_keyERS7_ = asm["__ZNSt3__23mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEE25__construct_node_with_keyERS7_"]; asm["__ZNSt3__23mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEE25__construct_node_with_keyERS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__23mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEE25__construct_node_with_keyERS7_.apply(null, arguments);
};

var real___ZNSt3__23mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEEixERS7_ = asm["__ZNSt3__23mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEEixERS7_"]; asm["__ZNSt3__23mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEEixERS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__23mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEEixERS7_.apply(null, arguments);
};

var real___ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE12__find_equalIiEERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISG_EERKT_ = asm["__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE12__find_equalIiEERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISG_EERKT_"]; asm["__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE12__find_equalIiEERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISG_EERKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE12__find_equalIiEERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISG_EERKT_.apply(null, arguments);
};

var real___ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE13__lower_boundIiEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_SH_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISF_EEEE = asm["__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE13__lower_boundIiEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_SH_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISF_EEEE"]; asm["__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE13__lower_boundIiEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_SH_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISF_EEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE13__lower_boundIiEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_SH_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISF_EEEE.apply(null, arguments);
};

var real___ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSG_SG_ = asm["__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSG_SG_"]; asm["__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSG_SG_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSG_SG_.apply(null, arguments);
};

var real___ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE4findIiEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_ = asm["__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE4findIiEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_"]; asm["__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE4findIiEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE4findIiEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_.apply(null, arguments);
};

var real___ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEEC2ERKS8_ = asm["__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEEC2ERKS8_"]; asm["__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEEC2ERKS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEEC2ERKS8_.apply(null, arguments);
};

var real___ZNSt9bad_allocC2Ev = asm["__ZNSt9bad_allocC2Ev"]; asm["__ZNSt9bad_allocC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt9bad_allocC2Ev.apply(null, arguments);
};

var real___ZNSt9bad_allocD0Ev = asm["__ZNSt9bad_allocD0Ev"]; asm["__ZNSt9bad_allocD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt9bad_allocD0Ev.apply(null, arguments);
};

var real___ZNSt9bad_allocD2Ev = asm["__ZNSt9bad_allocD2Ev"]; asm["__ZNSt9bad_allocD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt9bad_allocD2Ev.apply(null, arguments);
};

var real___ZNSt9exceptionD2Ev = asm["__ZNSt9exceptionD2Ev"]; asm["__ZNSt9exceptionD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt9exceptionD2Ev.apply(null, arguments);
};

var real___ZNSt9type_infoD2Ev = asm["__ZNSt9type_infoD2Ev"]; asm["__ZNSt9type_infoD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt9type_infoD2Ev.apply(null, arguments);
};

var real___ZSt11__terminatePFvvE = asm["__ZSt11__terminatePFvvE"]; asm["__ZSt11__terminatePFvvE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt11__terminatePFvvE.apply(null, arguments);
};

var real___ZSt13get_terminatev = asm["__ZSt13get_terminatev"]; asm["__ZSt13get_terminatev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt13get_terminatev.apply(null, arguments);
};

var real___ZSt15get_new_handlerv = asm["__ZSt15get_new_handlerv"]; asm["__ZSt15get_new_handlerv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt15get_new_handlerv.apply(null, arguments);
};

var real___ZSt9terminatev = asm["__ZSt9terminatev"]; asm["__ZSt9terminatev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt9terminatev.apply(null, arguments);
};

var real___ZdlPv = asm["__ZdlPv"]; asm["__ZdlPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZdlPv.apply(null, arguments);
};

var real___Znwj = asm["__Znwj"]; asm["__Znwj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Znwj.apply(null, arguments);
};

var real____DOUBLE_BITS_272 = asm["___DOUBLE_BITS_272"]; asm["___DOUBLE_BITS_272"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____DOUBLE_BITS_272.apply(null, arguments);
};

var real____DOUBLE_BITS_683 = asm["___DOUBLE_BITS_683"]; asm["___DOUBLE_BITS_683"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____DOUBLE_BITS_683.apply(null, arguments);
};

var real____ac_X31_hash_string = asm["___ac_X31_hash_string"]; asm["___ac_X31_hash_string"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ac_X31_hash_string.apply(null, arguments);
};

var real____ac_X31_hash_string_200 = asm["___ac_X31_hash_string_200"]; asm["___ac_X31_hash_string_200"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ac_X31_hash_string_200.apply(null, arguments);
};

var real____ac_X31_hash_string_517 = asm["___ac_X31_hash_string_517"]; asm["___ac_X31_hash_string_517"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ac_X31_hash_string_517.apply(null, arguments);
};

var real____ac_X31_hash_string_925 = asm["___ac_X31_hash_string_925"]; asm["___ac_X31_hash_string_925"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ac_X31_hash_string_925.apply(null, arguments);
};

var real____bswap_16 = asm["___bswap_16"]; asm["___bswap_16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____bswap_16.apply(null, arguments);
};

var real____bswap_16_488 = asm["___bswap_16_488"]; asm["___bswap_16_488"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____bswap_16_488.apply(null, arguments);
};

var real____bswap_32 = asm["___bswap_32"]; asm["___bswap_32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____bswap_32.apply(null, arguments);
};

var real____clang_call_terminate = asm["___clang_call_terminate"]; asm["___clang_call_terminate"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____clang_call_terminate.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_get_globals_fast = asm["___cxa_get_globals_fast"]; asm["___cxa_get_globals_fast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_get_globals_fast.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____cxx_global_var_init = asm["___cxx_global_var_init"]; asm["___cxx_global_var_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init.apply(null, arguments);
};

var real____dynamic_cast = asm["___dynamic_cast"]; asm["___dynamic_cast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____dynamic_cast.apply(null, arguments);
};

var real____emscripten_pthread_data_constructor = asm["___emscripten_pthread_data_constructor"]; asm["___emscripten_pthread_data_constructor"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____emscripten_pthread_data_constructor.apply(null, arguments);
};

var real____emscripten_thread_main = asm["___emscripten_thread_main"]; asm["___emscripten_thread_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____emscripten_thread_main.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____fdopen = asm["___fdopen"]; asm["___fdopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____fdopen.apply(null, arguments);
};

var real____fflush_unlocked = asm["___fflush_unlocked"]; asm["___fflush_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____fflush_unlocked.apply(null, arguments);
};

var real____floatscan = asm["___floatscan"]; asm["___floatscan"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____floatscan.apply(null, arguments);
};

var real____fmodeflags = asm["___fmodeflags"]; asm["___fmodeflags"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____fmodeflags.apply(null, arguments);
};

var real____fseeko = asm["___fseeko"]; asm["___fseeko"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____fseeko.apply(null, arguments);
};

var real____fseeko_unlocked = asm["___fseeko_unlocked"]; asm["___fseeko_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____fseeko_unlocked.apply(null, arguments);
};

var real____ftello = asm["___ftello"]; asm["___ftello"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ftello.apply(null, arguments);
};

var real____ftello_unlocked = asm["___ftello_unlocked"]; asm["___ftello_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ftello_unlocked.apply(null, arguments);
};

var real____fwritex = asm["___fwritex"]; asm["___fwritex"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____fwritex.apply(null, arguments);
};

var real____intscan = asm["___intscan"]; asm["___intscan"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____intscan.apply(null, arguments);
};

var real____lctrans = asm["___lctrans"]; asm["___lctrans"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____lctrans.apply(null, arguments);
};

var real____lctrans_impl = asm["___lctrans_impl"]; asm["___lctrans_impl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____lctrans_impl.apply(null, arguments);
};

var real____lockfile = asm["___lockfile"]; asm["___lockfile"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____lockfile.apply(null, arguments);
};

var real____memrchr = asm["___memrchr"]; asm["___memrchr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____memrchr.apply(null, arguments);
};

var real____mo_lookup = asm["___mo_lookup"]; asm["___mo_lookup"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____mo_lookup.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____muldsi3 = asm["___muldsi3"]; asm["___muldsi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldsi3.apply(null, arguments);
};

var real____ofl_add = asm["___ofl_add"]; asm["___ofl_add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ofl_add.apply(null, arguments);
};

var real____ofl_lock = asm["___ofl_lock"]; asm["___ofl_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ofl_lock.apply(null, arguments);
};

var real____ofl_unlock = asm["___ofl_unlock"]; asm["___ofl_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ofl_unlock.apply(null, arguments);
};

var real____overflow = asm["___overflow"]; asm["___overflow"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____overflow.apply(null, arguments);
};

var real____private_cond_signal = asm["___private_cond_signal"]; asm["___private_cond_signal"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____private_cond_signal.apply(null, arguments);
};

var real____procfdname = asm["___procfdname"]; asm["___procfdname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____procfdname.apply(null, arguments);
};

var real____pthread_cond_timedwait = asm["___pthread_cond_timedwait"]; asm["___pthread_cond_timedwait"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_cond_timedwait.apply(null, arguments);
};

var real____pthread_getspecific = asm["___pthread_getspecific"]; asm["___pthread_getspecific"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_getspecific.apply(null, arguments);
};

var real____pthread_key_create = asm["___pthread_key_create"]; asm["___pthread_key_create"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_key_create.apply(null, arguments);
};

var real____pthread_mutex_lock = asm["___pthread_mutex_lock"]; asm["___pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_mutex_lock.apply(null, arguments);
};

var real____pthread_mutex_timedlock = asm["___pthread_mutex_timedlock"]; asm["___pthread_mutex_timedlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_mutex_timedlock.apply(null, arguments);
};

var real____pthread_mutex_trylock = asm["___pthread_mutex_trylock"]; asm["___pthread_mutex_trylock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_mutex_trylock.apply(null, arguments);
};

var real____pthread_mutex_trylock_owner = asm["___pthread_mutex_trylock_owner"]; asm["___pthread_mutex_trylock_owner"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_mutex_trylock_owner.apply(null, arguments);
};

var real____pthread_mutex_unlock = asm["___pthread_mutex_unlock"]; asm["___pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_mutex_unlock.apply(null, arguments);
};

var real____pthread_once = asm["___pthread_once"]; asm["___pthread_once"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_once.apply(null, arguments);
};

var real____pthread_once_full = asm["___pthread_once_full"]; asm["___pthread_once_full"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_once_full.apply(null, arguments);
};

var real____pthread_self_103 = asm["___pthread_self_103"]; asm["___pthread_self_103"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_self_103.apply(null, arguments);
};

var real____pthread_self_104 = asm["___pthread_self_104"]; asm["___pthread_self_104"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_self_104.apply(null, arguments);
};

var real____pthread_self_420 = asm["___pthread_self_420"]; asm["___pthread_self_420"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_self_420.apply(null, arguments);
};

var real____pthread_self_429 = asm["___pthread_self_429"]; asm["___pthread_self_429"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_self_429.apply(null, arguments);
};

var real____pthread_self_611 = asm["___pthread_self_611"]; asm["___pthread_self_611"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_self_611.apply(null, arguments);
};

var real____pthread_setcancelstate = asm["___pthread_setcancelstate"]; asm["___pthread_setcancelstate"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_setcancelstate.apply(null, arguments);
};

var real____pthread_testcancel = asm["___pthread_testcancel"]; asm["___pthread_testcancel"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_testcancel.apply(null, arguments);
};

var real____pthread_tsd_run_dtors = asm["___pthread_tsd_run_dtors"]; asm["___pthread_tsd_run_dtors"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_tsd_run_dtors.apply(null, arguments);
};

var real____shgetc = asm["___shgetc"]; asm["___shgetc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____shgetc.apply(null, arguments);
};

var real____shlim = asm["___shlim"]; asm["___shlim"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____shlim.apply(null, arguments);
};

var real____stdio_close = asm["___stdio_close"]; asm["___stdio_close"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____stdio_close.apply(null, arguments);
};

var real____stdio_read = asm["___stdio_read"]; asm["___stdio_read"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____stdio_read.apply(null, arguments);
};

var real____stdio_seek = asm["___stdio_seek"]; asm["___stdio_seek"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____stdio_seek.apply(null, arguments);
};

var real____stdio_write = asm["___stdio_write"]; asm["___stdio_write"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____stdio_write.apply(null, arguments);
};

var real____stdout_write = asm["___stdout_write"]; asm["___stdout_write"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____stdout_write.apply(null, arguments);
};

var real____stpcpy = asm["___stpcpy"]; asm["___stpcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____stpcpy.apply(null, arguments);
};

var real____stpncpy = asm["___stpncpy"]; asm["___stpncpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____stpncpy.apply(null, arguments);
};

var real____strchrnul = asm["___strchrnul"]; asm["___strchrnul"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____strchrnul.apply(null, arguments);
};

var real____strdup = asm["___strdup"]; asm["___strdup"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____strdup.apply(null, arguments);
};

var real____strerror_l = asm["___strerror_l"]; asm["___strerror_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____strerror_l.apply(null, arguments);
};

var real____string_read = asm["___string_read"]; asm["___string_read"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____string_read.apply(null, arguments);
};

var real____syscall_ret = asm["___syscall_ret"]; asm["___syscall_ret"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____syscall_ret.apply(null, arguments);
};

var real____timedwait = asm["___timedwait"]; asm["___timedwait"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____timedwait.apply(null, arguments);
};

var real____timedwait_cp = asm["___timedwait_cp"]; asm["___timedwait_cp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____timedwait_cp.apply(null, arguments);
};

var real____toread = asm["___toread"]; asm["___toread"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____toread.apply(null, arguments);
};

var real____towrite = asm["___towrite"]; asm["___towrite"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____towrite.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivmoddi4.apply(null, arguments);
};

var real____uflow = asm["___uflow"]; asm["___uflow"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uflow.apply(null, arguments);
};

var real____unlist_locked_file = asm["___unlist_locked_file"]; asm["___unlist_locked_file"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____unlist_locked_file.apply(null, arguments);
};

var real____unlockfile = asm["___unlockfile"]; asm["___unlockfile"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____unlockfile.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real____vm_lock = asm["___vm_lock"]; asm["___vm_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____vm_lock.apply(null, arguments);
};

var real____vm_unlock = asm["___vm_unlock"]; asm["___vm_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____vm_unlock.apply(null, arguments);
};

var real____wait = asm["___wait"]; asm["___wait"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____wait.apply(null, arguments);
};

var real___do_call = asm["__do_call"]; asm["__do_call"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___do_call.apply(null, arguments);
};

var real___emscripten_atomic_fetch_and_add_u64 = asm["__emscripten_atomic_fetch_and_add_u64"]; asm["__emscripten_atomic_fetch_and_add_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___emscripten_atomic_fetch_and_add_u64.apply(null, arguments);
};

var real___emscripten_atomic_fetch_and_and_u64 = asm["__emscripten_atomic_fetch_and_and_u64"]; asm["__emscripten_atomic_fetch_and_and_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___emscripten_atomic_fetch_and_and_u64.apply(null, arguments);
};

var real___emscripten_atomic_fetch_and_or_u64 = asm["__emscripten_atomic_fetch_and_or_u64"]; asm["__emscripten_atomic_fetch_and_or_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___emscripten_atomic_fetch_and_or_u64.apply(null, arguments);
};

var real___emscripten_atomic_fetch_and_sub_u64 = asm["__emscripten_atomic_fetch_and_sub_u64"]; asm["__emscripten_atomic_fetch_and_sub_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___emscripten_atomic_fetch_and_sub_u64.apply(null, arguments);
};

var real___emscripten_atomic_fetch_and_xor_u64 = asm["__emscripten_atomic_fetch_and_xor_u64"]; asm["__emscripten_atomic_fetch_and_xor_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___emscripten_atomic_fetch_and_xor_u64.apply(null, arguments);
};

var real___emscripten_get_fetch_queue = asm["__emscripten_get_fetch_queue"]; asm["__emscripten_get_fetch_queue"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___emscripten_get_fetch_queue.apply(null, arguments);
};

var real___pthread_isduecanceled = asm["__pthread_isduecanceled"]; asm["__pthread_isduecanceled"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___pthread_isduecanceled.apply(null, arguments);
};

var real___pthread_msecs_until = asm["__pthread_msecs_until"]; asm["__pthread_msecs_until"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___pthread_msecs_until.apply(null, arguments);
};

var real___register_pthread_ptr = asm["__register_pthread_ptr"]; asm["__register_pthread_ptr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___register_pthread_ptr.apply(null, arguments);
};

var real___tr_align = asm["__tr_align"]; asm["__tr_align"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___tr_align.apply(null, arguments);
};

var real___tr_flush_bits = asm["__tr_flush_bits"]; asm["__tr_flush_bits"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___tr_flush_bits.apply(null, arguments);
};

var real___tr_flush_block = asm["__tr_flush_block"]; asm["__tr_flush_block"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___tr_flush_block.apply(null, arguments);
};

var real___tr_init = asm["__tr_init"]; asm["__tr_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___tr_init.apply(null, arguments);
};

var real___tr_stored_block = asm["__tr_stored_block"]; asm["__tr_stored_block"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___tr_stored_block.apply(null, arguments);
};

var real__abort_message = asm["_abort_message"]; asm["_abort_message"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__abort_message.apply(null, arguments);
};

var real__access = asm["_access"]; asm["_access"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__access.apply(null, arguments);
};

var real__adler32 = asm["_adler32"]; asm["_adler32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__adler32.apply(null, arguments);
};

var real__arg_n = asm["_arg_n"]; asm["_arg_n"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__arg_n.apply(null, arguments);
};

var real__atoi = asm["_atoi"]; asm["_atoi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__atoi.apply(null, arguments);
};

var real__bgzf_close = asm["_bgzf_close"]; asm["_bgzf_close"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bgzf_close.apply(null, arguments);
};

var real__bgzf_compress = asm["_bgzf_compress"]; asm["_bgzf_compress"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bgzf_compress.apply(null, arguments);
};

var real__bgzf_flush = asm["_bgzf_flush"]; asm["_bgzf_flush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bgzf_flush.apply(null, arguments);
};

var real__bgzf_getc = asm["_bgzf_getc"]; asm["_bgzf_getc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bgzf_getc.apply(null, arguments);
};

var real__bgzf_gzip_compress = asm["_bgzf_gzip_compress"]; asm["_bgzf_gzip_compress"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bgzf_gzip_compress.apply(null, arguments);
};

var real__bgzf_hopen = asm["_bgzf_hopen"]; asm["_bgzf_hopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bgzf_hopen.apply(null, arguments);
};

var real__bgzf_index_add_block = asm["_bgzf_index_add_block"]; asm["_bgzf_index_add_block"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bgzf_index_add_block.apply(null, arguments);
};

var real__bgzf_index_build_init = asm["_bgzf_index_build_init"]; asm["_bgzf_index_build_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bgzf_index_build_init.apply(null, arguments);
};

var real__bgzf_index_destroy = asm["_bgzf_index_destroy"]; asm["_bgzf_index_destroy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bgzf_index_destroy.apply(null, arguments);
};

var real__bgzf_index_dump = asm["_bgzf_index_dump"]; asm["_bgzf_index_dump"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bgzf_index_dump.apply(null, arguments);
};

var real__bgzf_index_load = asm["_bgzf_index_load"]; asm["_bgzf_index_load"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bgzf_index_load.apply(null, arguments);
};

var real__bgzf_open = asm["_bgzf_open"]; asm["_bgzf_open"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bgzf_open.apply(null, arguments);
};

var real__bgzf_open_ref = asm["_bgzf_open_ref"]; asm["_bgzf_open_ref"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bgzf_open_ref.apply(null, arguments);
};

var real__bgzf_read_block = asm["_bgzf_read_block"]; asm["_bgzf_read_block"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bgzf_read_block.apply(null, arguments);
};

var real__bgzf_read_init = asm["_bgzf_read_init"]; asm["_bgzf_read_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bgzf_read_init.apply(null, arguments);
};

var real__bgzf_utell = asm["_bgzf_utell"]; asm["_bgzf_utell"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bgzf_utell.apply(null, arguments);
};

var real__bgzf_write_init = asm["_bgzf_write_init"]; asm["_bgzf_write_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bgzf_write_init.apply(null, arguments);
};

var real__bgzf_zerr = asm["_bgzf_zerr"]; asm["_bgzf_zerr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bgzf_zerr.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__blksize = asm["_blksize"]; asm["_blksize"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__blksize.apply(null, arguments);
};

var real__build_tree = asm["_build_tree"]; asm["_build_tree"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__build_tree.apply(null, arguments);
};

var real__cache_block = asm["_cache_block"]; asm["_cache_block"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__cache_block.apply(null, arguments);
};

var real__calloc = asm["_calloc"]; asm["_calloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__calloc.apply(null, arguments);
};

var real__check_header = asm["_check_header"]; asm["_check_header"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__check_header.apply(null, arguments);
};

var real__close = asm["_close"]; asm["_close"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__close.apply(null, arguments);
};

var real__compressBound = asm["_compressBound"]; asm["_compressBound"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__compressBound.apply(null, arguments);
};

var real__compress_block = asm["_compress_block"]; asm["_compress_block"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__compress_block.apply(null, arguments);
};

var real__connect = asm["_connect"]; asm["_connect"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__connect.apply(null, arguments);
};

var real__copysign = asm["_copysign"]; asm["_copysign"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__copysign.apply(null, arguments);
};

var real__copysignl = asm["_copysignl"]; asm["_copysignl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__copysignl.apply(null, arguments);
};

var real__cram_dopen = asm["_cram_dopen"]; asm["_cram_dopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__cram_dopen.apply(null, arguments);
};

var real__cram_free_block = asm["_cram_free_block"]; asm["_cram_free_block"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__cram_free_block.apply(null, arguments);
};

var real__cram_free_compression_header = asm["_cram_free_compression_header"]; asm["_cram_free_compression_header"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__cram_free_compression_header.apply(null, arguments);
};

var real__cram_free_container = asm["_cram_free_container"]; asm["_cram_free_container"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__cram_free_container.apply(null, arguments);
};

var real__cram_free_slice = asm["_cram_free_slice"]; asm["_cram_free_slice"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__cram_free_slice.apply(null, arguments);
};

var real__cram_free_slice_header = asm["_cram_free_slice_header"]; asm["_cram_free_slice_header"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__cram_free_slice_header.apply(null, arguments);
};

var real__cram_index_query = asm["_cram_index_query"]; asm["_cram_index_query"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__cram_index_query.apply(null, arguments);
};

var real__cram_init_tables = asm["_cram_init_tables"]; asm["_cram_init_tables"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__cram_init_tables.apply(null, arguments);
};

var real__cram_load_reference = asm["_cram_load_reference"]; asm["_cram_load_reference"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__cram_load_reference.apply(null, arguments);
};

var real__cram_new_metrics = asm["_cram_new_metrics"]; asm["_cram_new_metrics"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__cram_new_metrics.apply(null, arguments);
};

var real__cram_read_SAM_hdr = asm["_cram_read_SAM_hdr"]; asm["_cram_read_SAM_hdr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__cram_read_SAM_hdr.apply(null, arguments);
};

var real__cram_read_block = asm["_cram_read_block"]; asm["_cram_read_block"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__cram_read_block.apply(null, arguments);
};

var real__cram_read_container = asm["_cram_read_container"]; asm["_cram_read_container"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__cram_read_container.apply(null, arguments);
};

var real__cram_read_file_def = asm["_cram_read_file_def"]; asm["_cram_read_file_def"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__cram_read_file_def.apply(null, arguments);
};

var real__cram_seek = asm["_cram_seek"]; asm["_cram_seek"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__cram_seek.apply(null, arguments);
};

var real__cram_seek_to_refpos = asm["_cram_seek_to_refpos"]; asm["_cram_seek_to_refpos"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__cram_seek_to_refpos.apply(null, arguments);
};

var real__cram_set_option = asm["_cram_set_option"]; asm["_cram_set_option"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__cram_set_option.apply(null, arguments);
};

var real__cram_set_voption = asm["_cram_set_voption"]; asm["_cram_set_voption"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__cram_set_voption.apply(null, arguments);
};

var real__cram_stats_free = asm["_cram_stats_free"]; asm["_cram_stats_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__cram_stats_free.apply(null, arguments);
};

var real__cram_uncompress_block = asm["_cram_uncompress_block"]; asm["_cram_uncompress_block"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__cram_uncompress_block.apply(null, arguments);
};

var real__crc32 = asm["_crc32"]; asm["_crc32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__crc32.apply(null, arguments);
};

var real__decfloat = asm["_decfloat"]; asm["_decfloat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__decfloat.apply(null, arguments);
};

var real__decompress_peek = asm["_decompress_peek"]; asm["_decompress_peek"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__decompress_peek.apply(null, arguments);
};

var real__deflate = asm["_deflate"]; asm["_deflate"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__deflate.apply(null, arguments);
};

var real__deflateEnd = asm["_deflateEnd"]; asm["_deflateEnd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__deflateEnd.apply(null, arguments);
};

var real__deflateInit2_ = asm["_deflateInit2_"]; asm["_deflateInit2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__deflateInit2_.apply(null, arguments);
};

var real__deflateReset = asm["_deflateReset"]; asm["_deflateReset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__deflateReset.apply(null, arguments);
};

var real__deflate_block = asm["_deflate_block"]; asm["_deflate_block"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__deflate_block.apply(null, arguments);
};

var real__deflate_fast = asm["_deflate_fast"]; asm["_deflate_fast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__deflate_fast.apply(null, arguments);
};

var real__deflate_slow = asm["_deflate_slow"]; asm["_deflate_slow"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__deflate_slow.apply(null, arguments);
};

var real__deflate_stored = asm["_deflate_stored"]; asm["_deflate_stored"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__deflate_stored.apply(null, arguments);
};

var real__dispose_chunk = asm["_dispose_chunk"]; asm["_dispose_chunk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dispose_chunk.apply(null, arguments);
};

var real__do_read = asm["_do_read"]; asm["_do_read"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__do_read.apply(null, arguments);
};

var real__dummy_568 = asm["_dummy_568"]; asm["_dummy_568"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dummy_568.apply(null, arguments);
};

var real__ed_is_big_430 = asm["_ed_is_big_430"]; asm["_ed_is_big_430"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ed_is_big_430.apply(null, arguments);
};

var real__ed_swap_8_488 = asm["_ed_swap_8_488"]; asm["_ed_swap_8_488"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ed_swap_8_488.apply(null, arguments);
};

var real__ed_swap_8p_493 = asm["_ed_swap_8p_493"]; asm["_ed_swap_8p_493"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ed_swap_8p_493.apply(null, arguments);
};

var real__emscripten_async_run_in_main_thread = asm["_emscripten_async_run_in_main_thread"]; asm["_emscripten_async_run_in_main_thread"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_run_in_main_thread.apply(null, arguments);
};

var real__emscripten_atomic_add_u64 = asm["_emscripten_atomic_add_u64"]; asm["_emscripten_atomic_add_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_atomic_add_u64.apply(null, arguments);
};

var real__emscripten_atomic_and_u64 = asm["_emscripten_atomic_and_u64"]; asm["_emscripten_atomic_and_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_atomic_and_u64.apply(null, arguments);
};

var real__emscripten_atomic_cas_u64 = asm["_emscripten_atomic_cas_u64"]; asm["_emscripten_atomic_cas_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_atomic_cas_u64.apply(null, arguments);
};

var real__emscripten_atomic_exchange_u64 = asm["_emscripten_atomic_exchange_u64"]; asm["_emscripten_atomic_exchange_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_atomic_exchange_u64.apply(null, arguments);
};

var real__emscripten_atomic_load_f32 = asm["_emscripten_atomic_load_f32"]; asm["_emscripten_atomic_load_f32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_atomic_load_f32.apply(null, arguments);
};

var real__emscripten_atomic_load_f64 = asm["_emscripten_atomic_load_f64"]; asm["_emscripten_atomic_load_f64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_atomic_load_f64.apply(null, arguments);
};

var real__emscripten_atomic_load_u64 = asm["_emscripten_atomic_load_u64"]; asm["_emscripten_atomic_load_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_atomic_load_u64.apply(null, arguments);
};

var real__emscripten_atomic_or_u64 = asm["_emscripten_atomic_or_u64"]; asm["_emscripten_atomic_or_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_atomic_or_u64.apply(null, arguments);
};

var real__emscripten_atomic_store_f32 = asm["_emscripten_atomic_store_f32"]; asm["_emscripten_atomic_store_f32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_atomic_store_f32.apply(null, arguments);
};

var real__emscripten_atomic_store_f64 = asm["_emscripten_atomic_store_f64"]; asm["_emscripten_atomic_store_f64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_atomic_store_f64.apply(null, arguments);
};

var real__emscripten_atomic_store_u64 = asm["_emscripten_atomic_store_u64"]; asm["_emscripten_atomic_store_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_atomic_store_u64.apply(null, arguments);
};

var real__emscripten_atomic_sub_u64 = asm["_emscripten_atomic_sub_u64"]; asm["_emscripten_atomic_sub_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_atomic_sub_u64.apply(null, arguments);
};

var real__emscripten_atomic_xor_u64 = asm["_emscripten_atomic_xor_u64"]; asm["_emscripten_atomic_xor_u64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_atomic_xor_u64.apply(null, arguments);
};

var real__emscripten_conditional_set_current_thread_status = asm["_emscripten_conditional_set_current_thread_status"]; asm["_emscripten_conditional_set_current_thread_status"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_conditional_set_current_thread_status.apply(null, arguments);
};

var real__emscripten_fetch = asm["_emscripten_fetch"]; asm["_emscripten_fetch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_fetch.apply(null, arguments);
};

var real__emscripten_fetch_attr_init = asm["_emscripten_fetch_attr_init"]; asm["_emscripten_fetch_attr_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_fetch_attr_init.apply(null, arguments);
};

var real__emscripten_fetch_close = asm["_emscripten_fetch_close"]; asm["_emscripten_fetch_close"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_fetch_close.apply(null, arguments);
};

var real__emscripten_fetch_wait = asm["_emscripten_fetch_wait"]; asm["_emscripten_fetch_wait"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_fetch_wait.apply(null, arguments);
};

var real__emscripten_get_global_libc = asm["_emscripten_get_global_libc"]; asm["_emscripten_get_global_libc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_get_global_libc.apply(null, arguments);
};

var real__emscripten_is_main_browser_thread = asm["_emscripten_is_main_browser_thread"]; asm["_emscripten_is_main_browser_thread"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_is_main_browser_thread.apply(null, arguments);
};

var real__emscripten_is_main_runtime_thread = asm["_emscripten_is_main_runtime_thread"]; asm["_emscripten_is_main_runtime_thread"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_is_main_runtime_thread.apply(null, arguments);
};

var real__emscripten_main_thread_process_queued_calls = asm["_emscripten_main_thread_process_queued_calls"]; asm["_emscripten_main_thread_process_queued_calls"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_main_thread_process_queued_calls.apply(null, arguments);
};

var real__emscripten_set_current_thread_status = asm["_emscripten_set_current_thread_status"]; asm["_emscripten_set_current_thread_status"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_set_current_thread_status.apply(null, arguments);
};

var real__emscripten_set_thread_name = asm["_emscripten_set_thread_name"]; asm["_emscripten_set_thread_name"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_set_thread_name.apply(null, arguments);
};

var real__emscripten_sync_run_in_main_thread = asm["_emscripten_sync_run_in_main_thread"]; asm["_emscripten_sync_run_in_main_thread"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_sync_run_in_main_thread.apply(null, arguments);
};

var real__emscripten_sync_run_in_main_thread_0 = asm["_emscripten_sync_run_in_main_thread_0"]; asm["_emscripten_sync_run_in_main_thread_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_sync_run_in_main_thread_0.apply(null, arguments);
};

var real__emscripten_sync_run_in_main_thread_1 = asm["_emscripten_sync_run_in_main_thread_1"]; asm["_emscripten_sync_run_in_main_thread_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_sync_run_in_main_thread_1.apply(null, arguments);
};

var real__emscripten_sync_run_in_main_thread_2 = asm["_emscripten_sync_run_in_main_thread_2"]; asm["_emscripten_sync_run_in_main_thread_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_sync_run_in_main_thread_2.apply(null, arguments);
};

var real__emscripten_sync_run_in_main_thread_3 = asm["_emscripten_sync_run_in_main_thread_3"]; asm["_emscripten_sync_run_in_main_thread_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_sync_run_in_main_thread_3.apply(null, arguments);
};

var real__emscripten_sync_run_in_main_thread_4 = asm["_emscripten_sync_run_in_main_thread_4"]; asm["_emscripten_sync_run_in_main_thread_4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_sync_run_in_main_thread_4.apply(null, arguments);
};

var real__emscripten_sync_run_in_main_thread_5 = asm["_emscripten_sync_run_in_main_thread_5"]; asm["_emscripten_sync_run_in_main_thread_5"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_sync_run_in_main_thread_5.apply(null, arguments);
};

var real__emscripten_sync_run_in_main_thread_6 = asm["_emscripten_sync_run_in_main_thread_6"]; asm["_emscripten_sync_run_in_main_thread_6"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_sync_run_in_main_thread_6.apply(null, arguments);
};

var real__emscripten_sync_run_in_main_thread_7 = asm["_emscripten_sync_run_in_main_thread_7"]; asm["_emscripten_sync_run_in_main_thread_7"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_sync_run_in_main_thread_7.apply(null, arguments);
};

var real__emscripten_sync_run_in_main_thread_xprintf_varargs = asm["_emscripten_sync_run_in_main_thread_xprintf_varargs"]; asm["_emscripten_sync_run_in_main_thread_xprintf_varargs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_sync_run_in_main_thread_xprintf_varargs.apply(null, arguments);
};

var real__emscripten_wait_for_call_v = asm["_emscripten_wait_for_call_v"]; asm["_emscripten_wait_for_call_v"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_wait_for_call_v.apply(null, arguments);
};

var real__fai_build = asm["_fai_build"]; asm["_fai_build"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fai_build.apply(null, arguments);
};

var real__fai_build_core = asm["_fai_build_core"]; asm["_fai_build_core"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fai_build_core.apply(null, arguments);
};

var real__fai_destroy = asm["_fai_destroy"]; asm["_fai_destroy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fai_destroy.apply(null, arguments);
};

var real__fai_insert_index = asm["_fai_insert_index"]; asm["_fai_insert_index"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fai_insert_index.apply(null, arguments);
};

var real__fai_save = asm["_fai_save"]; asm["_fai_save"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fai_save.apply(null, arguments);
};

var real__fclose = asm["_fclose"]; asm["_fclose"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fclose.apply(null, arguments);
};

var real__fd_close = asm["_fd_close"]; asm["_fd_close"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fd_close.apply(null, arguments);
};

var real__fd_flush = asm["_fd_flush"]; asm["_fd_flush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fd_flush.apply(null, arguments);
};

var real__fd_read = asm["_fd_read"]; asm["_fd_read"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fd_read.apply(null, arguments);
};

var real__fd_seek = asm["_fd_seek"]; asm["_fd_seek"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fd_seek.apply(null, arguments);
};

var real__fd_write = asm["_fd_write"]; asm["_fd_write"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fd_write.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__fgets = asm["_fgets"]; asm["_fgets"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fgets.apply(null, arguments);
};

var real__fileno = asm["_fileno"]; asm["_fileno"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fileno.apply(null, arguments);
};

var real__fill_window = asm["_fill_window"]; asm["_fill_window"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fill_window.apply(null, arguments);
};

var real__find_scheme_handler = asm["_find_scheme_handler"]; asm["_find_scheme_handler"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__find_scheme_handler.apply(null, arguments);
};

var real__flush_buffer = asm["_flush_buffer"]; asm["_flush_buffer"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__flush_buffer.apply(null, arguments);
};

var real__fmod = asm["_fmod"]; asm["_fmod"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fmod.apply(null, arguments);
};

var real__fmodl = asm["_fmodl"]; asm["_fmodl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fmodl.apply(null, arguments);
};

var real__fmt_fp = asm["_fmt_fp"]; asm["_fmt_fp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fmt_fp.apply(null, arguments);
};

var real__fmt_o = asm["_fmt_o"]; asm["_fmt_o"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fmt_o.apply(null, arguments);
};

var real__fmt_u = asm["_fmt_u"]; asm["_fmt_u"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fmt_u.apply(null, arguments);
};

var real__fmt_x = asm["_fmt_x"]; asm["_fmt_x"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fmt_x.apply(null, arguments);
};

var real__fopen = asm["_fopen"]; asm["_fopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fopen.apply(null, arguments);
};

var real__fourbyte_strstr = asm["_fourbyte_strstr"]; asm["_fourbyte_strstr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fourbyte_strstr.apply(null, arguments);
};

var real__fprintf = asm["_fprintf"]; asm["_fprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fprintf.apply(null, arguments);
};

var real__fputc = asm["_fputc"]; asm["_fputc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fputc.apply(null, arguments);
};

var real__fread = asm["_fread"]; asm["_fread"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fread.apply(null, arguments);
};

var real__fread_uint64 = asm["_fread_uint64"]; asm["_fread_uint64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fread_uint64.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__free_cache = asm["_free_cache"]; asm["_free_cache"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free_cache.apply(null, arguments);
};

var real__freeaddrinfo = asm["_freeaddrinfo"]; asm["_freeaddrinfo"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freeaddrinfo.apply(null, arguments);
};

var real__frexp = asm["_frexp"]; asm["_frexp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__frexp.apply(null, arguments);
};

var real__frexpl = asm["_frexpl"]; asm["_frexpl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__frexpl.apply(null, arguments);
};

var real__fseek = asm["_fseek"]; asm["_fseek"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fseek.apply(null, arguments);
};

var real__fstat = asm["_fstat"]; asm["_fstat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fstat.apply(null, arguments);
};

var real__fsync = asm["_fsync"]; asm["_fsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fsync.apply(null, arguments);
};

var real__ftell = asm["_ftell"]; asm["_ftell"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ftell.apply(null, arguments);
};

var real__ftruncate = asm["_ftruncate"]; asm["_ftruncate"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ftruncate.apply(null, arguments);
};

var real__fwrite = asm["_fwrite"]; asm["_fwrite"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fwrite.apply(null, arguments);
};

var real__fwrite_uint64 = asm["_fwrite_uint64"]; asm["_fwrite_uint64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fwrite_uint64.apply(null, arguments);
};

var real__getint = asm["_getint"]; asm["_getint"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__getint.apply(null, arguments);
};

var real__hclose = asm["_hclose"]; asm["_hclose"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hclose.apply(null, arguments);
};

var real__hclose_abruptly = asm["_hclose_abruptly"]; asm["_hclose_abruptly"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hclose_abruptly.apply(null, arguments);
};

var real__hdopen = asm["_hdopen"]; asm["_hdopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hdopen.apply(null, arguments);
};

var real__hexfloat = asm["_hexfloat"]; asm["_hexfloat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hexfloat.apply(null, arguments);
};

var real__hfile_add_scheme_handler = asm["_hfile_add_scheme_handler"]; asm["_hfile_add_scheme_handler"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hfile_add_scheme_handler.apply(null, arguments);
};

var real__hfile_always_local = asm["_hfile_always_local"]; asm["_hfile_always_local"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hfile_always_local.apply(null, arguments);
};

var real__hfile_always_remote = asm["_hfile_always_remote"]; asm["_hfile_always_remote"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hfile_always_remote.apply(null, arguments);
};

var real__hfile_destroy = asm["_hfile_destroy"]; asm["_hfile_destroy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hfile_destroy.apply(null, arguments);
};

var real__hfile_exit = asm["_hfile_exit"]; asm["_hfile_exit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hfile_exit.apply(null, arguments);
};

var real__hfile_init = asm["_hfile_init"]; asm["_hfile_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hfile_init.apply(null, arguments);
};

var real__hfile_oflags = asm["_hfile_oflags"]; asm["_hfile_oflags"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hfile_oflags.apply(null, arguments);
};

var real__hfile_plugin_init_net = asm["_hfile_plugin_init_net"]; asm["_hfile_plugin_init_net"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hfile_plugin_init_net.apply(null, arguments);
};

var real__hflush = asm["_hflush"]; asm["_hflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hflush.apply(null, arguments);
};

var real__hgetc = asm["_hgetc"]; asm["_hgetc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hgetc.apply(null, arguments);
};

var real__hgetc2 = asm["_hgetc2"]; asm["_hgetc2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hgetc2.apply(null, arguments);
};

var real__hopen = asm["_hopen"]; asm["_hopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hopen.apply(null, arguments);
};

var real__hopen_fd = asm["_hopen_fd"]; asm["_hopen_fd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hopen_fd.apply(null, arguments);
};

var real__hopen_fd_fileuri = asm["_hopen_fd_fileuri"]; asm["_hopen_fd_fileuri"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hopen_fd_fileuri.apply(null, arguments);
};

var real__hopen_fd_stdinout = asm["_hopen_fd_stdinout"]; asm["_hopen_fd_stdinout"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hopen_fd_stdinout.apply(null, arguments);
};

var real__hopen_mem = asm["_hopen_mem"]; asm["_hopen_mem"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hopen_mem.apply(null, arguments);
};

var real__hopen_net = asm["_hopen_net"]; asm["_hopen_net"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hopen_net.apply(null, arguments);
};

var real__hopen_unknown_scheme = asm["_hopen_unknown_scheme"]; asm["_hopen_unknown_scheme"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hopen_unknown_scheme.apply(null, arguments);
};

var real__hpeek = asm["_hpeek"]; asm["_hpeek"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hpeek.apply(null, arguments);
};

var real__hread = asm["_hread"]; asm["_hread"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hread.apply(null, arguments);
};

var real__hread2 = asm["_hread2"]; asm["_hread2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hread2.apply(null, arguments);
};

var real__hread_445 = asm["_hread_445"]; asm["_hread_445"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hread_445.apply(null, arguments);
};

var real__hseek = asm["_hseek"]; asm["_hseek"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hseek.apply(null, arguments);
};

var real__htell = asm["_htell"]; asm["_htell"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__htell.apply(null, arguments);
};

var real__htell_446 = asm["_htell_446"]; asm["_htell_446"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__htell_446.apply(null, arguments);
};

var real__htonl = asm["_htonl"]; asm["_htonl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__htonl.apply(null, arguments);
};

var real__htons = asm["_htons"]; asm["_htons"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__htons.apply(null, arguments);
};

var real__hts_detect_format = asm["_hts_detect_format"]; asm["_hts_detect_format"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hts_detect_format.apply(null, arguments);
};

var real__hts_fetch_js = asm["_hts_fetch_js"]; asm["_hts_fetch_js"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hts_fetch_js.apply(null, arguments);
};

var real__hts_open_js = asm["_hts_open_js"]; asm["_hts_open_js"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hts_open_js.apply(null, arguments);
};

var real__hwrite2 = asm["_hwrite2"]; asm["_hwrite2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hwrite2.apply(null, arguments);
};

var real__hwrite_463 = asm["_hwrite_463"]; asm["_hwrite_463"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hwrite_463.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__inflate = asm["_inflate"]; asm["_inflate"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__inflate.apply(null, arguments);
};

var real__inflateEnd = asm["_inflateEnd"]; asm["_inflateEnd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__inflateEnd.apply(null, arguments);
};

var real__inflateInit2_ = asm["_inflateInit2_"]; asm["_inflateInit2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__inflateInit2_.apply(null, arguments);
};

var real__inflateReset2 = asm["_inflateReset2"]; asm["_inflateReset2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__inflateReset2.apply(null, arguments);
};

var real__inflate_block = asm["_inflate_block"]; asm["_inflate_block"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__inflate_block.apply(null, arguments);
};

var real__inflate_fast = asm["_inflate_fast"]; asm["_inflate_fast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__inflate_fast.apply(null, arguments);
};

var real__inflate_gzip_block = asm["_inflate_gzip_block"]; asm["_inflate_gzip_block"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__inflate_gzip_block.apply(null, arguments);
};

var real__inflate_table = asm["_inflate_table"]; asm["_inflate_table"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__inflate_table.apply(null, arguments);
};

var real__init_add_plugin = asm["_init_add_plugin"]; asm["_init_add_plugin"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__init_add_plugin.apply(null, arguments);
};

var real__init_block = asm["_init_block"]; asm["_init_block"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__init_block.apply(null, arguments);
};

var real__int32_decode = asm["_int32_decode"]; asm["_int32_decode"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__int32_decode.apply(null, arguments);
};

var real__int32_get_blk = asm["_int32_get_blk"]; asm["_int32_get_blk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__int32_get_blk.apply(null, arguments);
};

var real__isalnum = asm["_isalnum"]; asm["_isalnum"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__isalnum.apply(null, arguments);
};

var real__isalnum_c = asm["_isalnum_c"]; asm["_isalnum_c"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__isalnum_c.apply(null, arguments);
};

var real__isalpha = asm["_isalpha"]; asm["_isalpha"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__isalpha.apply(null, arguments);
};

var real__isdigit = asm["_isdigit"]; asm["_isdigit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__isdigit.apply(null, arguments);
};

var real__isdigit_c = asm["_isdigit_c"]; asm["_isdigit_c"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__isdigit_c.apply(null, arguments);
};

var real__isgraph = asm["_isgraph"]; asm["_isgraph"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__isgraph.apply(null, arguments);
};

var real__isspace = asm["_isspace"]; asm["_isspace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__isspace.apply(null, arguments);
};

var real__isupper = asm["_isupper"]; asm["_isupper"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__isupper.apply(null, arguments);
};

var real__itf8_decode_crc = asm["_itf8_decode_crc"]; asm["_itf8_decode_crc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__itf8_decode_crc.apply(null, arguments);
};

var real__kftp_connect = asm["_kftp_connect"]; asm["_kftp_connect"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kftp_connect.apply(null, arguments);
};

var real__kftp_connect_file = asm["_kftp_connect_file"]; asm["_kftp_connect_file"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kftp_connect_file.apply(null, arguments);
};

var real__kftp_get_response = asm["_kftp_get_response"]; asm["_kftp_get_response"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kftp_get_response.apply(null, arguments);
};

var real__kftp_parse_url = asm["_kftp_parse_url"]; asm["_kftp_parse_url"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kftp_parse_url.apply(null, arguments);
};

var real__kftp_pasv_connect = asm["_kftp_pasv_connect"]; asm["_kftp_pasv_connect"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kftp_pasv_connect.apply(null, arguments);
};

var real__kftp_pasv_prep = asm["_kftp_pasv_prep"]; asm["_kftp_pasv_prep"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kftp_pasv_prep.apply(null, arguments);
};

var real__kftp_reconnect = asm["_kftp_reconnect"]; asm["_kftp_reconnect"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kftp_reconnect.apply(null, arguments);
};

var real__kftp_send_cmd = asm["_kftp_send_cmd"]; asm["_kftp_send_cmd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kftp_send_cmd.apply(null, arguments);
};

var real__kh_del_cache = asm["_kh_del_cache"]; asm["_kh_del_cache"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_del_cache.apply(null, arguments);
};

var real__kh_destroy_cache = asm["_kh_destroy_cache"]; asm["_kh_destroy_cache"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_destroy_cache.apply(null, arguments);
};

var real__kh_destroy_m_i2i = asm["_kh_destroy_m_i2i"]; asm["_kh_destroy_m_i2i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_destroy_m_i2i.apply(null, arguments);
};

var real__kh_destroy_m_s2i = asm["_kh_destroy_m_s2i"]; asm["_kh_destroy_m_s2i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_destroy_m_s2i.apply(null, arguments);
};

var real__kh_destroy_m_s2i_546 = asm["_kh_destroy_m_s2i_546"]; asm["_kh_destroy_m_s2i_546"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_destroy_m_s2i_546.apply(null, arguments);
};

var real__kh_destroy_map = asm["_kh_destroy_map"]; asm["_kh_destroy_map"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_destroy_map.apply(null, arguments);
};

var real__kh_destroy_refs = asm["_kh_destroy_refs"]; asm["_kh_destroy_refs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_destroy_refs.apply(null, arguments);
};

var real__kh_destroy_s = asm["_kh_destroy_s"]; asm["_kh_destroy_s"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_destroy_s.apply(null, arguments);
};

var real__kh_destroy_s_i2i = asm["_kh_destroy_s_i2i"]; asm["_kh_destroy_s_i2i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_destroy_s_i2i.apply(null, arguments);
};

var real__kh_destroy_sam_hdr = asm["_kh_destroy_sam_hdr"]; asm["_kh_destroy_sam_hdr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_destroy_sam_hdr.apply(null, arguments);
};

var real__kh_destroy_scheme_string = asm["_kh_destroy_scheme_string"]; asm["_kh_destroy_scheme_string"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_destroy_scheme_string.apply(null, arguments);
};

var real__kh_get_cache = asm["_kh_get_cache"]; asm["_kh_get_cache"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_get_cache.apply(null, arguments);
};

var real__kh_get_m_s2i = asm["_kh_get_m_s2i"]; asm["_kh_get_m_s2i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_get_m_s2i.apply(null, arguments);
};

var real__kh_get_refs = asm["_kh_get_refs"]; asm["_kh_get_refs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_get_refs.apply(null, arguments);
};

var real__kh_get_s = asm["_kh_get_s"]; asm["_kh_get_s"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_get_s.apply(null, arguments);
};

var real__kh_get_sam_hdr = asm["_kh_get_sam_hdr"]; asm["_kh_get_sam_hdr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_get_sam_hdr.apply(null, arguments);
};

var real__kh_get_scheme_string = asm["_kh_get_scheme_string"]; asm["_kh_get_scheme_string"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_get_scheme_string.apply(null, arguments);
};

var real__kh_init_cache = asm["_kh_init_cache"]; asm["_kh_init_cache"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_init_cache.apply(null, arguments);
};

var real__kh_init_m_s2i_536 = asm["_kh_init_m_s2i_536"]; asm["_kh_init_m_s2i_536"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_init_m_s2i_536.apply(null, arguments);
};

var real__kh_init_refs = asm["_kh_init_refs"]; asm["_kh_init_refs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_init_refs.apply(null, arguments);
};

var real__kh_init_s = asm["_kh_init_s"]; asm["_kh_init_s"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_init_s.apply(null, arguments);
};

var real__kh_init_sam_hdr = asm["_kh_init_sam_hdr"]; asm["_kh_init_sam_hdr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_init_sam_hdr.apply(null, arguments);
};

var real__kh_init_scheme_string = asm["_kh_init_scheme_string"]; asm["_kh_init_scheme_string"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_init_scheme_string.apply(null, arguments);
};

var real__kh_put_cache = asm["_kh_put_cache"]; asm["_kh_put_cache"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_put_cache.apply(null, arguments);
};

var real__kh_put_m_s2i = asm["_kh_put_m_s2i"]; asm["_kh_put_m_s2i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_put_m_s2i.apply(null, arguments);
};

var real__kh_put_refs = asm["_kh_put_refs"]; asm["_kh_put_refs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_put_refs.apply(null, arguments);
};

var real__kh_put_s = asm["_kh_put_s"]; asm["_kh_put_s"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_put_s.apply(null, arguments);
};

var real__kh_put_sam_hdr = asm["_kh_put_sam_hdr"]; asm["_kh_put_sam_hdr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_put_sam_hdr.apply(null, arguments);
};

var real__kh_put_scheme_string = asm["_kh_put_scheme_string"]; asm["_kh_put_scheme_string"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_put_scheme_string.apply(null, arguments);
};

var real__kh_resize_cache = asm["_kh_resize_cache"]; asm["_kh_resize_cache"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_resize_cache.apply(null, arguments);
};

var real__kh_resize_m_s2i = asm["_kh_resize_m_s2i"]; asm["_kh_resize_m_s2i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_resize_m_s2i.apply(null, arguments);
};

var real__kh_resize_refs = asm["_kh_resize_refs"]; asm["_kh_resize_refs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_resize_refs.apply(null, arguments);
};

var real__kh_resize_s = asm["_kh_resize_s"]; asm["_kh_resize_s"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_resize_s.apply(null, arguments);
};

var real__kh_resize_sam_hdr = asm["_kh_resize_sam_hdr"]; asm["_kh_resize_sam_hdr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_resize_sam_hdr.apply(null, arguments);
};

var real__kh_resize_scheme_string = asm["_kh_resize_scheme_string"]; asm["_kh_resize_scheme_string"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kh_resize_scheme_string.apply(null, arguments);
};

var real__khttp_connect_file = asm["_khttp_connect_file"]; asm["_khttp_connect_file"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__khttp_connect_file.apply(null, arguments);
};

var real__khttp_parse_url = asm["_khttp_parse_url"]; asm["_khttp_parse_url"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__khttp_parse_url.apply(null, arguments);
};

var real__knet_close = asm["_knet_close"]; asm["_knet_close"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__knet_close.apply(null, arguments);
};

var real__knet_open = asm["_knet_open"]; asm["_knet_open"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__knet_open.apply(null, arguments);
};

var real__knet_read = asm["_knet_read"]; asm["_knet_read"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__knet_read.apply(null, arguments);
};

var real__knet_seek = asm["_knet_seek"]; asm["_knet_seek"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__knet_seek.apply(null, arguments);
};

var real__kputc__916 = asm["_kputc__916"]; asm["_kputc__916"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kputc__916.apply(null, arguments);
};

var real__kputsn_510 = asm["_kputsn_510"]; asm["_kputsn_510"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kputsn_510.apply(null, arguments);
};

var real__kputsn_918 = asm["_kputsn_918"]; asm["_kputsn_918"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__kputsn_918.apply(null, arguments);
};

var real__ks_len = asm["_ks_len"]; asm["_ks_len"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ks_len.apply(null, arguments);
};

var real__ks_str = asm["_ks_str"]; asm["_ks_str"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ks_str.apply(null, arguments);
};

var real__llvm_bswap_i16 = asm["_llvm_bswap_i16"]; asm["_llvm_bswap_i16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i16.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_cttz_i32.apply(null, arguments);
};

var real__load_block_from_cache = asm["_load_block_from_cache"]; asm["_load_block_from_cache"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__load_block_from_cache.apply(null, arguments);
};

var real__load_hfile_plugins = asm["_load_hfile_plugins"]; asm["_load_hfile_plugins"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__load_hfile_plugins.apply(null, arguments);
};

var real__longest_match = asm["_longest_match"]; asm["_longest_match"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__longest_match.apply(null, arguments);
};

var real__lseek = asm["_lseek"]; asm["_lseek"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__lseek.apply(null, arguments);
};

var real__ltf8_decode_crc = asm["_ltf8_decode_crc"]; asm["_ltf8_decode_crc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ltf8_decode_crc.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__mbrtowc = asm["_mbrtowc"]; asm["_mbrtowc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mbrtowc.apply(null, arguments);
};

var real__mbsinit = asm["_mbsinit"]; asm["_mbsinit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mbsinit.apply(null, arguments);
};

var real__mem_close = asm["_mem_close"]; asm["_mem_close"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mem_close.apply(null, arguments);
};

var real__mem_read = asm["_mem_read"]; asm["_mem_read"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mem_read.apply(null, arguments);
};

var real__mem_seek = asm["_mem_seek"]; asm["_mem_seek"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mem_seek.apply(null, arguments);
};

var real__memchr = asm["_memchr"]; asm["_memchr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memchr.apply(null, arguments);
};

var real__memcmp = asm["_memcmp"]; asm["_memcmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memcmp.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__mfclose = asm["_mfclose"]; asm["_mfclose"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mfclose.apply(null, arguments);
};

var real__mfdestroy = asm["_mfdestroy"]; asm["_mfdestroy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mfdestroy.apply(null, arguments);
};

var real__mfflush = asm["_mfflush"]; asm["_mfflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mfflush.apply(null, arguments);
};

var real__mode2level = asm["_mode2level"]; asm["_mode2level"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mode2level.apply(null, arguments);
};

var real__mt_destroy = asm["_mt_destroy"]; asm["_mt_destroy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mt_destroy.apply(null, arguments);
};

var real__mt_flush_queue = asm["_mt_flush_queue"]; asm["_mt_flush_queue"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mt_flush_queue.apply(null, arguments);
};

var real__mt_queue = asm["_mt_queue"]; asm["_mt_queue"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mt_queue.apply(null, arguments);
};

var real__my_netread = asm["_my_netread"]; asm["_my_netread"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__my_netread.apply(null, arguments);
};

var real__net_close = asm["_net_close"]; asm["_net_close"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__net_close.apply(null, arguments);
};

var real__net_init = asm["_net_init"]; asm["_net_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__net_init.apply(null, arguments);
};

var real__net_read = asm["_net_read"]; asm["_net_read"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__net_read.apply(null, arguments);
};

var real__net_seek = asm["_net_seek"]; asm["_net_seek"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__net_seek.apply(null, arguments);
};

var real__new_pool = asm["_new_pool"]; asm["_new_pool"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__new_pool.apply(null, arguments);
};

var real__new_string_pool = asm["_new_string_pool"]; asm["_new_string_pool"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__new_string_pool.apply(null, arguments);
};

var real__next_power_2 = asm["_next_power_2"]; asm["_next_power_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__next_power_2.apply(null, arguments);
};

var real__nodtor = asm["_nodtor"]; asm["_nodtor"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__nodtor.apply(null, arguments);
};

var real__ntohs = asm["_ntohs"]; asm["_ntohs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ntohs.apply(null, arguments);
};

var real__open = asm["_open"]; asm["_open"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__open.apply(null, arguments);
};

var real__out = asm["_out"]; asm["_out"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__out.apply(null, arguments);
};

var real__packInt16 = asm["_packInt16"]; asm["_packInt16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__packInt16.apply(null, arguments);
};

var real__packInt32 = asm["_packInt32"]; asm["_packInt32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__packInt32.apply(null, arguments);
};

var real__pad_682 = asm["_pad_682"]; asm["_pad_682"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pad_682.apply(null, arguments);
};

var real__parse_version = asm["_parse_version"]; asm["_parse_version"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__parse_version.apply(null, arguments);
};

var real__perror = asm["_perror"]; asm["_perror"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__perror.apply(null, arguments);
};

var real__pool_alloc = asm["_pool_alloc"]; asm["_pool_alloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pool_alloc.apply(null, arguments);
};

var real__pool_create = asm["_pool_create"]; asm["_pool_create"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pool_create.apply(null, arguments);
};

var real__pool_destroy = asm["_pool_destroy"]; asm["_pool_destroy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pool_destroy.apply(null, arguments);
};

var real__pop_arg = asm["_pop_arg"]; asm["_pop_arg"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pop_arg.apply(null, arguments);
};

var real__printf = asm["_printf"]; asm["_printf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__printf.apply(null, arguments);
};

var real__printf_core = asm["_printf_core"]; asm["_printf_core"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__printf_core.apply(null, arguments);
};

var real__proxy_main = asm["_proxy_main"]; asm["_proxy_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__proxy_main.apply(null, arguments);
};

var real__pthread_attr_destroy = asm["_pthread_attr_destroy"]; asm["_pthread_attr_destroy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_attr_destroy.apply(null, arguments);
};

var real__pthread_attr_init = asm["_pthread_attr_init"]; asm["_pthread_attr_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_attr_init.apply(null, arguments);
};

var real__pthread_attr_setdetachstate = asm["_pthread_attr_setdetachstate"]; asm["_pthread_attr_setdetachstate"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_attr_setdetachstate.apply(null, arguments);
};

var real__pthread_attr_setstacksize = asm["_pthread_attr_setstacksize"]; asm["_pthread_attr_setstacksize"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_attr_setstacksize.apply(null, arguments);
};

var real__pthread_cond_broadcast = asm["_pthread_cond_broadcast"]; asm["_pthread_cond_broadcast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_cond_broadcast.apply(null, arguments);
};

var real__pthread_cond_destroy = asm["_pthread_cond_destroy"]; asm["_pthread_cond_destroy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_cond_destroy.apply(null, arguments);
};

var real__pthread_cond_init = asm["_pthread_cond_init"]; asm["_pthread_cond_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_cond_init.apply(null, arguments);
};

var real__pthread_cond_signal = asm["_pthread_cond_signal"]; asm["_pthread_cond_signal"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_cond_signal.apply(null, arguments);
};

var real__pthread_cond_wait = asm["_pthread_cond_wait"]; asm["_pthread_cond_wait"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_cond_wait.apply(null, arguments);
};

var real__pthread_mutex_destroy = asm["_pthread_mutex_destroy"]; asm["_pthread_mutex_destroy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_destroy.apply(null, arguments);
};

var real__pthread_mutex_init = asm["_pthread_mutex_init"]; asm["_pthread_mutex_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_init.apply(null, arguments);
};

var real__pthread_mutexattr_destroy = asm["_pthread_mutexattr_destroy"]; asm["_pthread_mutexattr_destroy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutexattr_destroy.apply(null, arguments);
};

var real__pthread_mutexattr_init = asm["_pthread_mutexattr_init"]; asm["_pthread_mutexattr_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutexattr_init.apply(null, arguments);
};

var real__pthread_self = asm["_pthread_self"]; asm["_pthread_self"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_self.apply(null, arguments);
};

var real__pthread_setspecific = asm["_pthread_setspecific"]; asm["_pthread_setspecific"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_setspecific.apply(null, arguments);
};

var real__rans_uncompress = asm["_rans_uncompress"]; asm["_rans_uncompress"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__rans_uncompress.apply(null, arguments);
};

var real__rans_uncompress_O0 = asm["_rans_uncompress_O0"]; asm["_rans_uncompress_O0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__rans_uncompress_O0.apply(null, arguments);
};

var real__rans_uncompress_O1 = asm["_rans_uncompress_O1"]; asm["_rans_uncompress_O1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__rans_uncompress_O1.apply(null, arguments);
};

var real__read = asm["_read"]; asm["_read"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__read.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__realloc.apply(null, arguments);
};

var real__recv = asm["_recv"]; asm["_recv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__recv.apply(null, arguments);
};

var real__recvfrom = asm["_recvfrom"]; asm["_recvfrom"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__recvfrom.apply(null, arguments);
};

var real__ref_entry_free_seq = asm["_ref_entry_free_seq"]; asm["_ref_entry_free_seq"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ref_entry_free_seq.apply(null, arguments);
};

var real__refill_buffer = asm["_refill_buffer"]; asm["_refill_buffer"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__refill_buffer.apply(null, arguments);
};

var real__refs2id = asm["_refs2id"]; asm["_refs2id"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__refs2id.apply(null, arguments);
};

var real__refs_create = asm["_refs_create"]; asm["_refs_create"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__refs_create.apply(null, arguments);
};

var real__refs_free = asm["_refs_free"]; asm["_refs_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__refs_free.apply(null, arguments);
};

var real__refs_from_header = asm["_refs_from_header"]; asm["_refs_from_header"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__refs_from_header.apply(null, arguments);
};

var real__refs_load_fai = asm["_refs_load_fai"]; asm["_refs_load_fai"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__refs_load_fai.apply(null, arguments);
};

var real__sam_hdr_add_lines = asm["_sam_hdr_add_lines"]; asm["_sam_hdr_add_lines"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sam_hdr_add_lines.apply(null, arguments);
};

var real__sam_hdr_error = asm["_sam_hdr_error"]; asm["_sam_hdr_error"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sam_hdr_error.apply(null, arguments);
};

var real__sam_hdr_find = asm["_sam_hdr_find"]; asm["_sam_hdr_find"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sam_hdr_find.apply(null, arguments);
};

var real__sam_hdr_find_key = asm["_sam_hdr_find_key"]; asm["_sam_hdr_find_key"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sam_hdr_find_key.apply(null, arguments);
};

var real__sam_hdr_free = asm["_sam_hdr_free"]; asm["_sam_hdr_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sam_hdr_free.apply(null, arguments);
};

var real__sam_hdr_link_pg = asm["_sam_hdr_link_pg"]; asm["_sam_hdr_link_pg"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sam_hdr_link_pg.apply(null, arguments);
};

var real__sam_hdr_new = asm["_sam_hdr_new"]; asm["_sam_hdr_new"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sam_hdr_new.apply(null, arguments);
};

var real__sam_hdr_parse_ = asm["_sam_hdr_parse_"]; asm["_sam_hdr_parse_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sam_hdr_parse_.apply(null, arguments);
};

var real__sam_hdr_parse_sort_order = asm["_sam_hdr_parse_sort_order"]; asm["_sam_hdr_parse_sort_order"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sam_hdr_parse_sort_order.apply(null, arguments);
};

var real__sam_hdr_update_hashes = asm["_sam_hdr_update_hashes"]; asm["_sam_hdr_update_hashes"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sam_hdr_update_hashes.apply(null, arguments);
};

var real__sanitise_SQ_lines = asm["_sanitise_SQ_lines"]; asm["_sanitise_SQ_lines"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sanitise_SQ_lines.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real__scalbn = asm["_scalbn"]; asm["_scalbn"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__scalbn.apply(null, arguments);
};

var real__scalbnl = asm["_scalbnl"]; asm["_scalbnl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__scalbnl.apply(null, arguments);
};

var real__scanexp = asm["_scanexp"]; asm["_scanexp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__scanexp.apply(null, arguments);
};

var real__select = asm["_select"]; asm["_select"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__select.apply(null, arguments);
};

var real__send = asm["_send"]; asm["_send"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__send.apply(null, arguments);
};

var real__send_tree = asm["_send_tree"]; asm["_send_tree"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__send_tree.apply(null, arguments);
};

var real__sendto = asm["_sendto"]; asm["_sendto"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sendto.apply(null, arguments);
};

var real__setsockopt = asm["_setsockopt"]; asm["_setsockopt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__setsockopt.apply(null, arguments);
};

var real__sn_write = asm["_sn_write"]; asm["_sn_write"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sn_write.apply(null, arguments);
};

var real__snprintf = asm["_snprintf"]; asm["_snprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__snprintf.apply(null, arguments);
};

var real__socket = asm["_socket"]; asm["_socket"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__socket.apply(null, arguments);
};

var real__socket_connect = asm["_socket_connect"]; asm["_socket_connect"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__socket_connect.apply(null, arguments);
};

var real__socket_wait = asm["_socket_wait"]; asm["_socket_wait"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__socket_wait.apply(null, arguments);
};

var real__sprintf = asm["_sprintf"]; asm["_sprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sprintf.apply(null, arguments);
};

var real__sscanf = asm["_sscanf"]; asm["_sscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sscanf.apply(null, arguments);
};

var real__stat = asm["_stat"]; asm["_stat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__stat.apply(null, arguments);
};

var real__store_int = asm["_store_int"]; asm["_store_int"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__store_int.apply(null, arguments);
};

var real__strchr = asm["_strchr"]; asm["_strchr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strchr.apply(null, arguments);
};

var real__strcmp = asm["_strcmp"]; asm["_strcmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strcmp.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strcpy.apply(null, arguments);
};

var real__strerror = asm["_strerror"]; asm["_strerror"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strerror.apply(null, arguments);
};

var real__string_alloc = asm["_string_alloc"]; asm["_string_alloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__string_alloc.apply(null, arguments);
};

var real__string_dup = asm["_string_dup"]; asm["_string_dup"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__string_dup.apply(null, arguments);
};

var real__string_ndup = asm["_string_ndup"]; asm["_string_ndup"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__string_ndup.apply(null, arguments);
};

var real__string_pool_create = asm["_string_pool_create"]; asm["_string_pool_create"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__string_pool_create.apply(null, arguments);
};

var real__string_pool_destroy = asm["_string_pool_destroy"]; asm["_string_pool_destroy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__string_pool_destroy.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strlen.apply(null, arguments);
};

var real__strncmp = asm["_strncmp"]; asm["_strncmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strncmp.apply(null, arguments);
};

var real__strncpy = asm["_strncpy"]; asm["_strncpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strncpy.apply(null, arguments);
};

var real__strrchr = asm["_strrchr"]; asm["_strrchr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strrchr.apply(null, arguments);
};

var real__strstr = asm["_strstr"]; asm["_strstr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strstr.apply(null, arguments);
};

var real__strtol = asm["_strtol"]; asm["_strtol"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtol.apply(null, arguments);
};

var real__strtoll = asm["_strtoll"]; asm["_strtoll"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtoll.apply(null, arguments);
};

var real__strtox_740 = asm["_strtox_740"]; asm["_strtox_740"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtox_740.apply(null, arguments);
};

var real__swapc = asm["_swapc"]; asm["_swapc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__swapc.apply(null, arguments);
};

var real__t_pool_add_result = asm["_t_pool_add_result"]; asm["_t_pool_add_result"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__t_pool_add_result.apply(null, arguments);
};

var real__t_pool_init = asm["_t_pool_init"]; asm["_t_pool_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__t_pool_init.apply(null, arguments);
};

var real__t_pool_worker = asm["_t_pool_worker"]; asm["_t_pool_worker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__t_pool_worker.apply(null, arguments);
};

var real__t_results_queue_init = asm["_t_results_queue_init"]; asm["_t_results_queue_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__t_results_queue_init.apply(null, arguments);
};

var real__threebyte_strstr = asm["_threebyte_strstr"]; asm["_threebyte_strstr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__threebyte_strstr.apply(null, arguments);
};

var real__tolower = asm["_tolower"]; asm["_tolower"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__tolower.apply(null, arguments);
};

var real__tolower_c_204 = asm["_tolower_c_204"]; asm["_tolower_c_204"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__tolower_c_204.apply(null, arguments);
};

var real__try_realloc_chunk = asm["_try_realloc_chunk"]; asm["_try_realloc_chunk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__try_realloc_chunk.apply(null, arguments);
};

var real__twobyte_strstr = asm["_twobyte_strstr"]; asm["_twobyte_strstr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__twobyte_strstr.apply(null, arguments);
};

var real__twoway_strstr = asm["_twoway_strstr"]; asm["_twoway_strstr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__twoway_strstr.apply(null, arguments);
};

var real__undo = asm["_undo"]; asm["_undo"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__undo.apply(null, arguments);
};

var real__unpackInt16 = asm["_unpackInt16"]; asm["_unpackInt16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__unpackInt16.apply(null, arguments);
};

var real__updatewindow = asm["_updatewindow"]; asm["_updatewindow"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__updatewindow.apply(null, arguments);
};

var real__vfprintf = asm["_vfprintf"]; asm["_vfprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vfprintf.apply(null, arguments);
};

var real__vfscanf = asm["_vfscanf"]; asm["_vfscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vfscanf.apply(null, arguments);
};

var real__vsnprintf = asm["_vsnprintf"]; asm["_vsnprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vsnprintf.apply(null, arguments);
};

var real__vsprintf = asm["_vsprintf"]; asm["_vsprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vsprintf.apply(null, arguments);
};

var real__vsscanf = asm["_vsscanf"]; asm["_vsscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vsscanf.apply(null, arguments);
};

var real__wcrtomb = asm["_wcrtomb"]; asm["_wcrtomb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wcrtomb.apply(null, arguments);
};

var real__wctomb = asm["_wctomb"]; asm["_wctomb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wctomb.apply(null, arguments);
};

var real__worker_aux = asm["_worker_aux"]; asm["_worker_aux"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__worker_aux.apply(null, arguments);
};

var real__write = asm["_write"]; asm["_write"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__write.apply(null, arguments);
};

var real__writebuffer_is_nonempty = asm["_writebuffer_is_nonempty"]; asm["_writebuffer_is_nonempty"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__writebuffer_is_nonempty.apply(null, arguments);
};

var real__zcalloc = asm["_zcalloc"]; asm["_zcalloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zcalloc.apply(null, arguments);
};

var real__zcfree = asm["_zcfree"]; asm["_zcfree"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zcfree.apply(null, arguments);
};

var real__zlib_mem_inflate = asm["_zlib_mem_inflate"]; asm["_zlib_mem_inflate"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zlib_mem_inflate.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var _RansDecAdvance = Module["_RansDecAdvance"] = asm["_RansDecAdvance"];
var _RansDecAdvanceSymbol = Module["_RansDecAdvanceSymbol"] = asm["_RansDecAdvanceSymbol"];
var _RansDecGet = Module["_RansDecGet"] = asm["_RansDecGet"];
var _RansDecInit = Module["_RansDecInit"] = asm["_RansDecInit"];
var _RansDecRenorm = Module["_RansDecRenorm"] = asm["_RansDecRenorm"];
var _RansDecSymbolInit = Module["_RansDecSymbolInit"] = asm["_RansDecSymbolInit"];
var __GLOBAL__sub_I_interface_cpp = Module["__GLOBAL__sub_I_interface_cpp"] = asm["__GLOBAL__sub_I_interface_cpp"];
var __Z12hts_hopen_jsP5hFILEPcPKc = Module["__Z12hts_hopen_jsP5hFILEPcPKc"] = asm["__Z12hts_hopen_jsP5hFILEPcPKc"];
var __Z22emscripten_proxy_fetchP18emscripten_fetch_t = Module["__Z22emscripten_proxy_fetchP18emscripten_fetch_t"] = asm["__Z22emscripten_proxy_fetchP18emscripten_fetch_t"];
var __Z7ks_initP4BGZF = Module["__Z7ks_initP4BGZF"] = asm["__Z7ks_initP4BGZF"];
var __Z8hopen_jsi = Module["__Z8hopen_jsi"] = asm["__Z8hopen_jsi"];
var __ZL25default_terminate_handlerv = Module["__ZL25default_terminate_handlerv"] = asm["__ZL25default_terminate_handlerv"];
var __ZL7js_readP5hFILEPvj = Module["__ZL7js_readP5hFILEPvj"] = asm["__ZL7js_readP5hFILEPvj"];
var __ZL7js_seekP5hFILEii = Module["__ZL7js_seekP5hFILEii"] = asm["__ZL7js_seekP5hFILEii"];
var __ZL8js_closeP5hFILE = Module["__ZL8js_closeP5hFILE"] = asm["__ZL8js_closeP5hFILE"];
var __ZL9ed_is_bigv = Module["__ZL9ed_is_bigv"] = asm["__ZL9ed_is_bigv"];
var __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev = Module["__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev"] = asm["__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev"];
var __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv = Module["__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv"] = asm["__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv"];
var __ZN10__cxxabiv116__shim_type_infoD2Ev = Module["__ZN10__cxxabiv116__shim_type_infoD2Ev"] = asm["__ZN10__cxxabiv116__shim_type_infoD2Ev"];
var __ZN10__cxxabiv117__class_type_infoD0Ev = Module["__ZN10__cxxabiv117__class_type_infoD0Ev"] = asm["__ZN10__cxxabiv117__class_type_infoD0Ev"];
var __ZN10__cxxabiv120__si_class_type_infoD0Ev = Module["__ZN10__cxxabiv120__si_class_type_infoD0Ev"] = asm["__ZN10__cxxabiv120__si_class_type_infoD0Ev"];
var __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b = Module["__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b"] = asm["__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b"];
var __ZNK10__cxxabiv116__shim_type_info5noop1Ev = Module["__ZNK10__cxxabiv116__shim_type_info5noop1Ev"] = asm["__ZNK10__cxxabiv116__shim_type_info5noop1Ev"];
var __ZNK10__cxxabiv116__shim_type_info5noop2Ev = Module["__ZNK10__cxxabiv116__shim_type_info5noop2Ev"] = asm["__ZNK10__cxxabiv116__shim_type_info5noop2Ev"];
var __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = Module["__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = asm["__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
var __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = Module["__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = asm["__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];
var __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi = Module["__ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi"] = asm["__ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi"];
var __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = Module["__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = asm["__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"];
var __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i = Module["__ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i"] = asm["__ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i"];
var __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi = Module["__ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi"] = asm["__ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi"];
var __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv = Module["__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv"] = asm["__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv"];
var __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = Module["__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = asm["__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
var __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = Module["__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = asm["__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];
var __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = Module["__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = asm["__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"];
var __ZNKSt11logic_error4whatEv = Module["__ZNKSt11logic_error4whatEv"] = asm["__ZNKSt11logic_error4whatEv"];
var __ZNKSt3__218__libcpp_refstring15__uses_refcountEv = Module["__ZNKSt3__218__libcpp_refstring15__uses_refcountEv"] = asm["__ZNKSt3__218__libcpp_refstring15__uses_refcountEv"];
var __ZNKSt3__218__libcpp_refstring5c_strEv = Module["__ZNKSt3__218__libcpp_refstring5c_strEv"] = asm["__ZNKSt3__218__libcpp_refstring5c_strEv"];
var __ZNKSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE10__root_ptrEv = Module["__ZNKSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE10__root_ptrEv"] = asm["__ZNKSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE10__root_ptrEv"];
var __ZNKSt9bad_alloc4whatEv = Module["__ZNKSt9bad_alloc4whatEv"] = asm["__ZNKSt9bad_alloc4whatEv"];
var __ZNSt11logic_errorC2EPKc = Module["__ZNSt11logic_errorC2EPKc"] = asm["__ZNSt11logic_errorC2EPKc"];
var __ZNSt11logic_errorD0Ev = Module["__ZNSt11logic_errorD0Ev"] = asm["__ZNSt11logic_errorD0Ev"];
var __ZNSt11logic_errorD2Ev = Module["__ZNSt11logic_errorD2Ev"] = asm["__ZNSt11logic_errorD2Ev"];
var __ZNSt12length_errorD0Ev = Module["__ZNSt12length_errorD0Ev"] = asm["__ZNSt12length_errorD0Ev"];
var __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE = Module["__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE"] = asm["__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE"];
var __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1396 = Module["__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1396"] = asm["__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1396"];
var __ZNSt3__218__libcpp_refstringC2EPKc = Module["__ZNSt3__218__libcpp_refstringC2EPKc"] = asm["__ZNSt3__218__libcpp_refstringC2EPKc"];
var __ZNSt3__218__libcpp_refstringD2Ev = Module["__ZNSt3__218__libcpp_refstringD2Ev"] = asm["__ZNSt3__218__libcpp_refstringD2Ev"];
var __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_ = Module["__ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_"] = asm["__ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_"];
var __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_ = Module["__ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_"] = asm["__ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_"];
var __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = Module["__ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_"] = asm["__ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_"];
var __ZNSt3__23mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEE25__construct_node_with_keyERS7_ = Module["__ZNSt3__23mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEE25__construct_node_with_keyERS7_"] = asm["__ZNSt3__23mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEE25__construct_node_with_keyERS7_"];
var __ZNSt3__23mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEEixERS7_ = Module["__ZNSt3__23mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEEixERS7_"] = asm["__ZNSt3__23mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEEixERS7_"];
var __ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE12__find_equalIiEERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISG_EERKT_ = Module["__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE12__find_equalIiEERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISG_EERKT_"] = asm["__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE12__find_equalIiEERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISG_EERKT_"];
var __ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE13__lower_boundIiEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_SH_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISF_EEEE = Module["__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE13__lower_boundIiEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_SH_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISF_EEEE"] = asm["__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE13__lower_boundIiEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_SH_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISF_EEEE"];
var __ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSG_SG_ = Module["__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSG_SG_"] = asm["__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSG_SG_"];
var __ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE4findIiEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_ = Module["__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE4findIiEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_"] = asm["__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE4findIiEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_"];
var __ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEEC2ERKS8_ = Module["__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEEC2ERKS8_"] = asm["__ZNSt3__26__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEEC2ERKS8_"];
var __ZNSt9bad_allocC2Ev = Module["__ZNSt9bad_allocC2Ev"] = asm["__ZNSt9bad_allocC2Ev"];
var __ZNSt9bad_allocD0Ev = Module["__ZNSt9bad_allocD0Ev"] = asm["__ZNSt9bad_allocD0Ev"];
var __ZNSt9bad_allocD2Ev = Module["__ZNSt9bad_allocD2Ev"] = asm["__ZNSt9bad_allocD2Ev"];
var __ZNSt9exceptionD2Ev = Module["__ZNSt9exceptionD2Ev"] = asm["__ZNSt9exceptionD2Ev"];
var __ZNSt9type_infoD2Ev = Module["__ZNSt9type_infoD2Ev"] = asm["__ZNSt9type_infoD2Ev"];
var __ZSt11__terminatePFvvE = Module["__ZSt11__terminatePFvvE"] = asm["__ZSt11__terminatePFvvE"];
var __ZSt13get_terminatev = Module["__ZSt13get_terminatev"] = asm["__ZSt13get_terminatev"];
var __ZSt15get_new_handlerv = Module["__ZSt15get_new_handlerv"] = asm["__ZSt15get_new_handlerv"];
var __ZSt9terminatev = Module["__ZSt9terminatev"] = asm["__ZSt9terminatev"];
var __ZdlPv = Module["__ZdlPv"] = asm["__ZdlPv"];
var __Znwj = Module["__Znwj"] = asm["__Znwj"];
var ___DOUBLE_BITS_272 = Module["___DOUBLE_BITS_272"] = asm["___DOUBLE_BITS_272"];
var ___DOUBLE_BITS_683 = Module["___DOUBLE_BITS_683"] = asm["___DOUBLE_BITS_683"];
var ___ac_X31_hash_string = Module["___ac_X31_hash_string"] = asm["___ac_X31_hash_string"];
var ___ac_X31_hash_string_200 = Module["___ac_X31_hash_string_200"] = asm["___ac_X31_hash_string_200"];
var ___ac_X31_hash_string_517 = Module["___ac_X31_hash_string_517"] = asm["___ac_X31_hash_string_517"];
var ___ac_X31_hash_string_925 = Module["___ac_X31_hash_string_925"] = asm["___ac_X31_hash_string_925"];
var ___bswap_16 = Module["___bswap_16"] = asm["___bswap_16"];
var ___bswap_16_488 = Module["___bswap_16_488"] = asm["___bswap_16_488"];
var ___bswap_32 = Module["___bswap_32"] = asm["___bswap_32"];
var ___clang_call_terminate = Module["___clang_call_terminate"] = asm["___clang_call_terminate"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_get_globals_fast = Module["___cxa_get_globals_fast"] = asm["___cxa_get_globals_fast"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___cxx_global_var_init = Module["___cxx_global_var_init"] = asm["___cxx_global_var_init"];
var ___dynamic_cast = Module["___dynamic_cast"] = asm["___dynamic_cast"];
var ___emscripten_pthread_data_constructor = Module["___emscripten_pthread_data_constructor"] = asm["___emscripten_pthread_data_constructor"];
var ___emscripten_thread_main = Module["___emscripten_thread_main"] = asm["___emscripten_thread_main"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___fdopen = Module["___fdopen"] = asm["___fdopen"];
var ___fflush_unlocked = Module["___fflush_unlocked"] = asm["___fflush_unlocked"];
var ___floatscan = Module["___floatscan"] = asm["___floatscan"];
var ___fmodeflags = Module["___fmodeflags"] = asm["___fmodeflags"];
var ___fseeko = Module["___fseeko"] = asm["___fseeko"];
var ___fseeko_unlocked = Module["___fseeko_unlocked"] = asm["___fseeko_unlocked"];
var ___ftello = Module["___ftello"] = asm["___ftello"];
var ___ftello_unlocked = Module["___ftello_unlocked"] = asm["___ftello_unlocked"];
var ___fwritex = Module["___fwritex"] = asm["___fwritex"];
var ___intscan = Module["___intscan"] = asm["___intscan"];
var ___lctrans = Module["___lctrans"] = asm["___lctrans"];
var ___lctrans_impl = Module["___lctrans_impl"] = asm["___lctrans_impl"];
var ___lockfile = Module["___lockfile"] = asm["___lockfile"];
var ___memrchr = Module["___memrchr"] = asm["___memrchr"];
var ___mo_lookup = Module["___mo_lookup"] = asm["___mo_lookup"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var ___ofl_add = Module["___ofl_add"] = asm["___ofl_add"];
var ___ofl_lock = Module["___ofl_lock"] = asm["___ofl_lock"];
var ___ofl_unlock = Module["___ofl_unlock"] = asm["___ofl_unlock"];
var ___overflow = Module["___overflow"] = asm["___overflow"];
var ___private_cond_signal = Module["___private_cond_signal"] = asm["___private_cond_signal"];
var ___procfdname = Module["___procfdname"] = asm["___procfdname"];
var ___pthread_cond_timedwait = Module["___pthread_cond_timedwait"] = asm["___pthread_cond_timedwait"];
var ___pthread_getspecific = Module["___pthread_getspecific"] = asm["___pthread_getspecific"];
var ___pthread_key_create = Module["___pthread_key_create"] = asm["___pthread_key_create"];
var ___pthread_mutex_lock = Module["___pthread_mutex_lock"] = asm["___pthread_mutex_lock"];
var ___pthread_mutex_timedlock = Module["___pthread_mutex_timedlock"] = asm["___pthread_mutex_timedlock"];
var ___pthread_mutex_trylock = Module["___pthread_mutex_trylock"] = asm["___pthread_mutex_trylock"];
var ___pthread_mutex_trylock_owner = Module["___pthread_mutex_trylock_owner"] = asm["___pthread_mutex_trylock_owner"];
var ___pthread_mutex_unlock = Module["___pthread_mutex_unlock"] = asm["___pthread_mutex_unlock"];
var ___pthread_once = Module["___pthread_once"] = asm["___pthread_once"];
var ___pthread_once_full = Module["___pthread_once_full"] = asm["___pthread_once_full"];
var ___pthread_self_103 = Module["___pthread_self_103"] = asm["___pthread_self_103"];
var ___pthread_self_104 = Module["___pthread_self_104"] = asm["___pthread_self_104"];
var ___pthread_self_420 = Module["___pthread_self_420"] = asm["___pthread_self_420"];
var ___pthread_self_429 = Module["___pthread_self_429"] = asm["___pthread_self_429"];
var ___pthread_self_611 = Module["___pthread_self_611"] = asm["___pthread_self_611"];
var ___pthread_setcancelstate = Module["___pthread_setcancelstate"] = asm["___pthread_setcancelstate"];
var ___pthread_testcancel = Module["___pthread_testcancel"] = asm["___pthread_testcancel"];
var ___pthread_tsd_run_dtors = Module["___pthread_tsd_run_dtors"] = asm["___pthread_tsd_run_dtors"];
var ___shgetc = Module["___shgetc"] = asm["___shgetc"];
var ___shlim = Module["___shlim"] = asm["___shlim"];
var ___stdio_close = Module["___stdio_close"] = asm["___stdio_close"];
var ___stdio_read = Module["___stdio_read"] = asm["___stdio_read"];
var ___stdio_seek = Module["___stdio_seek"] = asm["___stdio_seek"];
var ___stdio_write = Module["___stdio_write"] = asm["___stdio_write"];
var ___stdout_write = Module["___stdout_write"] = asm["___stdout_write"];
var ___stpcpy = Module["___stpcpy"] = asm["___stpcpy"];
var ___stpncpy = Module["___stpncpy"] = asm["___stpncpy"];
var ___strchrnul = Module["___strchrnul"] = asm["___strchrnul"];
var ___strdup = Module["___strdup"] = asm["___strdup"];
var ___strerror_l = Module["___strerror_l"] = asm["___strerror_l"];
var ___string_read = Module["___string_read"] = asm["___string_read"];
var ___syscall_ret = Module["___syscall_ret"] = asm["___syscall_ret"];
var ___timedwait = Module["___timedwait"] = asm["___timedwait"];
var ___timedwait_cp = Module["___timedwait_cp"] = asm["___timedwait_cp"];
var ___toread = Module["___toread"] = asm["___toread"];
var ___towrite = Module["___towrite"] = asm["___towrite"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var ___uflow = Module["___uflow"] = asm["___uflow"];
var ___unlist_locked_file = Module["___unlist_locked_file"] = asm["___unlist_locked_file"];
var ___unlockfile = Module["___unlockfile"] = asm["___unlockfile"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var ___vm_lock = Module["___vm_lock"] = asm["___vm_lock"];
var ___vm_unlock = Module["___vm_unlock"] = asm["___vm_unlock"];
var ___wait = Module["___wait"] = asm["___wait"];
var __do_call = Module["__do_call"] = asm["__do_call"];
var __emscripten_atomic_fetch_and_add_u64 = Module["__emscripten_atomic_fetch_and_add_u64"] = asm["__emscripten_atomic_fetch_and_add_u64"];
var __emscripten_atomic_fetch_and_and_u64 = Module["__emscripten_atomic_fetch_and_and_u64"] = asm["__emscripten_atomic_fetch_and_and_u64"];
var __emscripten_atomic_fetch_and_or_u64 = Module["__emscripten_atomic_fetch_and_or_u64"] = asm["__emscripten_atomic_fetch_and_or_u64"];
var __emscripten_atomic_fetch_and_sub_u64 = Module["__emscripten_atomic_fetch_and_sub_u64"] = asm["__emscripten_atomic_fetch_and_sub_u64"];
var __emscripten_atomic_fetch_and_xor_u64 = Module["__emscripten_atomic_fetch_and_xor_u64"] = asm["__emscripten_atomic_fetch_and_xor_u64"];
var __emscripten_get_fetch_queue = Module["__emscripten_get_fetch_queue"] = asm["__emscripten_get_fetch_queue"];
var __pthread_isduecanceled = Module["__pthread_isduecanceled"] = asm["__pthread_isduecanceled"];
var __pthread_msecs_until = Module["__pthread_msecs_until"] = asm["__pthread_msecs_until"];
var __register_pthread_ptr = Module["__register_pthread_ptr"] = asm["__register_pthread_ptr"];
var __tr_align = Module["__tr_align"] = asm["__tr_align"];
var __tr_flush_bits = Module["__tr_flush_bits"] = asm["__tr_flush_bits"];
var __tr_flush_block = Module["__tr_flush_block"] = asm["__tr_flush_block"];
var __tr_init = Module["__tr_init"] = asm["__tr_init"];
var __tr_stored_block = Module["__tr_stored_block"] = asm["__tr_stored_block"];
var _abort_message = Module["_abort_message"] = asm["_abort_message"];
var _access = Module["_access"] = asm["_access"];
var _adler32 = Module["_adler32"] = asm["_adler32"];
var _arg_n = Module["_arg_n"] = asm["_arg_n"];
var _atoi = Module["_atoi"] = asm["_atoi"];
var _bgzf_close = Module["_bgzf_close"] = asm["_bgzf_close"];
var _bgzf_compress = Module["_bgzf_compress"] = asm["_bgzf_compress"];
var _bgzf_flush = Module["_bgzf_flush"] = asm["_bgzf_flush"];
var _bgzf_getc = Module["_bgzf_getc"] = asm["_bgzf_getc"];
var _bgzf_gzip_compress = Module["_bgzf_gzip_compress"] = asm["_bgzf_gzip_compress"];
var _bgzf_hopen = Module["_bgzf_hopen"] = asm["_bgzf_hopen"];
var _bgzf_index_add_block = Module["_bgzf_index_add_block"] = asm["_bgzf_index_add_block"];
var _bgzf_index_build_init = Module["_bgzf_index_build_init"] = asm["_bgzf_index_build_init"];
var _bgzf_index_destroy = Module["_bgzf_index_destroy"] = asm["_bgzf_index_destroy"];
var _bgzf_index_dump = Module["_bgzf_index_dump"] = asm["_bgzf_index_dump"];
var _bgzf_index_load = Module["_bgzf_index_load"] = asm["_bgzf_index_load"];
var _bgzf_open = Module["_bgzf_open"] = asm["_bgzf_open"];
var _bgzf_open_ref = Module["_bgzf_open_ref"] = asm["_bgzf_open_ref"];
var _bgzf_read_block = Module["_bgzf_read_block"] = asm["_bgzf_read_block"];
var _bgzf_read_init = Module["_bgzf_read_init"] = asm["_bgzf_read_init"];
var _bgzf_utell = Module["_bgzf_utell"] = asm["_bgzf_utell"];
var _bgzf_write_init = Module["_bgzf_write_init"] = asm["_bgzf_write_init"];
var _bgzf_zerr = Module["_bgzf_zerr"] = asm["_bgzf_zerr"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _blksize = Module["_blksize"] = asm["_blksize"];
var _build_tree = Module["_build_tree"] = asm["_build_tree"];
var _cache_block = Module["_cache_block"] = asm["_cache_block"];
var _calloc = Module["_calloc"] = asm["_calloc"];
var _check_header = Module["_check_header"] = asm["_check_header"];
var _close = Module["_close"] = asm["_close"];
var _compressBound = Module["_compressBound"] = asm["_compressBound"];
var _compress_block = Module["_compress_block"] = asm["_compress_block"];
var _connect = Module["_connect"] = asm["_connect"];
var _copysign = Module["_copysign"] = asm["_copysign"];
var _copysignl = Module["_copysignl"] = asm["_copysignl"];
var _cram_dopen = Module["_cram_dopen"] = asm["_cram_dopen"];
var _cram_free_block = Module["_cram_free_block"] = asm["_cram_free_block"];
var _cram_free_compression_header = Module["_cram_free_compression_header"] = asm["_cram_free_compression_header"];
var _cram_free_container = Module["_cram_free_container"] = asm["_cram_free_container"];
var _cram_free_slice = Module["_cram_free_slice"] = asm["_cram_free_slice"];
var _cram_free_slice_header = Module["_cram_free_slice_header"] = asm["_cram_free_slice_header"];
var _cram_index_query = Module["_cram_index_query"] = asm["_cram_index_query"];
var _cram_init_tables = Module["_cram_init_tables"] = asm["_cram_init_tables"];
var _cram_load_reference = Module["_cram_load_reference"] = asm["_cram_load_reference"];
var _cram_new_metrics = Module["_cram_new_metrics"] = asm["_cram_new_metrics"];
var _cram_read_SAM_hdr = Module["_cram_read_SAM_hdr"] = asm["_cram_read_SAM_hdr"];
var _cram_read_block = Module["_cram_read_block"] = asm["_cram_read_block"];
var _cram_read_container = Module["_cram_read_container"] = asm["_cram_read_container"];
var _cram_read_file_def = Module["_cram_read_file_def"] = asm["_cram_read_file_def"];
var _cram_seek = Module["_cram_seek"] = asm["_cram_seek"];
var _cram_seek_to_refpos = Module["_cram_seek_to_refpos"] = asm["_cram_seek_to_refpos"];
var _cram_set_option = Module["_cram_set_option"] = asm["_cram_set_option"];
var _cram_set_voption = Module["_cram_set_voption"] = asm["_cram_set_voption"];
var _cram_stats_free = Module["_cram_stats_free"] = asm["_cram_stats_free"];
var _cram_uncompress_block = Module["_cram_uncompress_block"] = asm["_cram_uncompress_block"];
var _crc32 = Module["_crc32"] = asm["_crc32"];
var _decfloat = Module["_decfloat"] = asm["_decfloat"];
var _decompress_peek = Module["_decompress_peek"] = asm["_decompress_peek"];
var _deflate = Module["_deflate"] = asm["_deflate"];
var _deflateEnd = Module["_deflateEnd"] = asm["_deflateEnd"];
var _deflateInit2_ = Module["_deflateInit2_"] = asm["_deflateInit2_"];
var _deflateReset = Module["_deflateReset"] = asm["_deflateReset"];
var _deflate_block = Module["_deflate_block"] = asm["_deflate_block"];
var _deflate_fast = Module["_deflate_fast"] = asm["_deflate_fast"];
var _deflate_slow = Module["_deflate_slow"] = asm["_deflate_slow"];
var _deflate_stored = Module["_deflate_stored"] = asm["_deflate_stored"];
var _dispose_chunk = Module["_dispose_chunk"] = asm["_dispose_chunk"];
var _do_read = Module["_do_read"] = asm["_do_read"];
var _dummy_568 = Module["_dummy_568"] = asm["_dummy_568"];
var _ed_is_big_430 = Module["_ed_is_big_430"] = asm["_ed_is_big_430"];
var _ed_swap_8_488 = Module["_ed_swap_8_488"] = asm["_ed_swap_8_488"];
var _ed_swap_8p_493 = Module["_ed_swap_8p_493"] = asm["_ed_swap_8p_493"];
var _emscripten_async_run_in_main_thread = Module["_emscripten_async_run_in_main_thread"] = asm["_emscripten_async_run_in_main_thread"];
var _emscripten_atomic_add_u64 = Module["_emscripten_atomic_add_u64"] = asm["_emscripten_atomic_add_u64"];
var _emscripten_atomic_and_u64 = Module["_emscripten_atomic_and_u64"] = asm["_emscripten_atomic_and_u64"];
var _emscripten_atomic_cas_u64 = Module["_emscripten_atomic_cas_u64"] = asm["_emscripten_atomic_cas_u64"];
var _emscripten_atomic_exchange_u64 = Module["_emscripten_atomic_exchange_u64"] = asm["_emscripten_atomic_exchange_u64"];
var _emscripten_atomic_load_f32 = Module["_emscripten_atomic_load_f32"] = asm["_emscripten_atomic_load_f32"];
var _emscripten_atomic_load_f64 = Module["_emscripten_atomic_load_f64"] = asm["_emscripten_atomic_load_f64"];
var _emscripten_atomic_load_u64 = Module["_emscripten_atomic_load_u64"] = asm["_emscripten_atomic_load_u64"];
var _emscripten_atomic_or_u64 = Module["_emscripten_atomic_or_u64"] = asm["_emscripten_atomic_or_u64"];
var _emscripten_atomic_store_f32 = Module["_emscripten_atomic_store_f32"] = asm["_emscripten_atomic_store_f32"];
var _emscripten_atomic_store_f64 = Module["_emscripten_atomic_store_f64"] = asm["_emscripten_atomic_store_f64"];
var _emscripten_atomic_store_u64 = Module["_emscripten_atomic_store_u64"] = asm["_emscripten_atomic_store_u64"];
var _emscripten_atomic_sub_u64 = Module["_emscripten_atomic_sub_u64"] = asm["_emscripten_atomic_sub_u64"];
var _emscripten_atomic_xor_u64 = Module["_emscripten_atomic_xor_u64"] = asm["_emscripten_atomic_xor_u64"];
var _emscripten_conditional_set_current_thread_status = Module["_emscripten_conditional_set_current_thread_status"] = asm["_emscripten_conditional_set_current_thread_status"];
var _emscripten_fetch = Module["_emscripten_fetch"] = asm["_emscripten_fetch"];
var _emscripten_fetch_attr_init = Module["_emscripten_fetch_attr_init"] = asm["_emscripten_fetch_attr_init"];
var _emscripten_fetch_close = Module["_emscripten_fetch_close"] = asm["_emscripten_fetch_close"];
var _emscripten_fetch_wait = Module["_emscripten_fetch_wait"] = asm["_emscripten_fetch_wait"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var _emscripten_is_main_browser_thread = Module["_emscripten_is_main_browser_thread"] = asm["_emscripten_is_main_browser_thread"];
var _emscripten_is_main_runtime_thread = Module["_emscripten_is_main_runtime_thread"] = asm["_emscripten_is_main_runtime_thread"];
var _emscripten_main_thread_process_queued_calls = Module["_emscripten_main_thread_process_queued_calls"] = asm["_emscripten_main_thread_process_queued_calls"];
var _emscripten_set_current_thread_status = Module["_emscripten_set_current_thread_status"] = asm["_emscripten_set_current_thread_status"];
var _emscripten_set_thread_name = Module["_emscripten_set_thread_name"] = asm["_emscripten_set_thread_name"];
var _emscripten_sync_run_in_main_thread = Module["_emscripten_sync_run_in_main_thread"] = asm["_emscripten_sync_run_in_main_thread"];
var _emscripten_sync_run_in_main_thread_0 = Module["_emscripten_sync_run_in_main_thread_0"] = asm["_emscripten_sync_run_in_main_thread_0"];
var _emscripten_sync_run_in_main_thread_1 = Module["_emscripten_sync_run_in_main_thread_1"] = asm["_emscripten_sync_run_in_main_thread_1"];
var _emscripten_sync_run_in_main_thread_2 = Module["_emscripten_sync_run_in_main_thread_2"] = asm["_emscripten_sync_run_in_main_thread_2"];
var _emscripten_sync_run_in_main_thread_3 = Module["_emscripten_sync_run_in_main_thread_3"] = asm["_emscripten_sync_run_in_main_thread_3"];
var _emscripten_sync_run_in_main_thread_4 = Module["_emscripten_sync_run_in_main_thread_4"] = asm["_emscripten_sync_run_in_main_thread_4"];
var _emscripten_sync_run_in_main_thread_5 = Module["_emscripten_sync_run_in_main_thread_5"] = asm["_emscripten_sync_run_in_main_thread_5"];
var _emscripten_sync_run_in_main_thread_6 = Module["_emscripten_sync_run_in_main_thread_6"] = asm["_emscripten_sync_run_in_main_thread_6"];
var _emscripten_sync_run_in_main_thread_7 = Module["_emscripten_sync_run_in_main_thread_7"] = asm["_emscripten_sync_run_in_main_thread_7"];
var _emscripten_sync_run_in_main_thread_xprintf_varargs = Module["_emscripten_sync_run_in_main_thread_xprintf_varargs"] = asm["_emscripten_sync_run_in_main_thread_xprintf_varargs"];
var _emscripten_wait_for_call_v = Module["_emscripten_wait_for_call_v"] = asm["_emscripten_wait_for_call_v"];
var _fai_build = Module["_fai_build"] = asm["_fai_build"];
var _fai_build_core = Module["_fai_build_core"] = asm["_fai_build_core"];
var _fai_destroy = Module["_fai_destroy"] = asm["_fai_destroy"];
var _fai_insert_index = Module["_fai_insert_index"] = asm["_fai_insert_index"];
var _fai_save = Module["_fai_save"] = asm["_fai_save"];
var _fclose = Module["_fclose"] = asm["_fclose"];
var _fd_close = Module["_fd_close"] = asm["_fd_close"];
var _fd_flush = Module["_fd_flush"] = asm["_fd_flush"];
var _fd_read = Module["_fd_read"] = asm["_fd_read"];
var _fd_seek = Module["_fd_seek"] = asm["_fd_seek"];
var _fd_write = Module["_fd_write"] = asm["_fd_write"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _fgets = Module["_fgets"] = asm["_fgets"];
var _fileno = Module["_fileno"] = asm["_fileno"];
var _fill_window = Module["_fill_window"] = asm["_fill_window"];
var _find_scheme_handler = Module["_find_scheme_handler"] = asm["_find_scheme_handler"];
var _flush_buffer = Module["_flush_buffer"] = asm["_flush_buffer"];
var _fmod = Module["_fmod"] = asm["_fmod"];
var _fmodl = Module["_fmodl"] = asm["_fmodl"];
var _fmt_fp = Module["_fmt_fp"] = asm["_fmt_fp"];
var _fmt_o = Module["_fmt_o"] = asm["_fmt_o"];
var _fmt_u = Module["_fmt_u"] = asm["_fmt_u"];
var _fmt_x = Module["_fmt_x"] = asm["_fmt_x"];
var _fopen = Module["_fopen"] = asm["_fopen"];
var _fourbyte_strstr = Module["_fourbyte_strstr"] = asm["_fourbyte_strstr"];
var _fprintf = Module["_fprintf"] = asm["_fprintf"];
var _fputc = Module["_fputc"] = asm["_fputc"];
var _fread = Module["_fread"] = asm["_fread"];
var _fread_uint64 = Module["_fread_uint64"] = asm["_fread_uint64"];
var _free = Module["_free"] = asm["_free"];
var _free_cache = Module["_free_cache"] = asm["_free_cache"];
var _freeaddrinfo = Module["_freeaddrinfo"] = asm["_freeaddrinfo"];
var _frexp = Module["_frexp"] = asm["_frexp"];
var _frexpl = Module["_frexpl"] = asm["_frexpl"];
var _fseek = Module["_fseek"] = asm["_fseek"];
var _fstat = Module["_fstat"] = asm["_fstat"];
var _fsync = Module["_fsync"] = asm["_fsync"];
var _ftell = Module["_ftell"] = asm["_ftell"];
var _ftruncate = Module["_ftruncate"] = asm["_ftruncate"];
var _fwrite = Module["_fwrite"] = asm["_fwrite"];
var _fwrite_uint64 = Module["_fwrite_uint64"] = asm["_fwrite_uint64"];
var _getint = Module["_getint"] = asm["_getint"];
var _hclose = Module["_hclose"] = asm["_hclose"];
var _hclose_abruptly = Module["_hclose_abruptly"] = asm["_hclose_abruptly"];
var _hdopen = Module["_hdopen"] = asm["_hdopen"];
var _hexfloat = Module["_hexfloat"] = asm["_hexfloat"];
var _hfile_add_scheme_handler = Module["_hfile_add_scheme_handler"] = asm["_hfile_add_scheme_handler"];
var _hfile_always_local = Module["_hfile_always_local"] = asm["_hfile_always_local"];
var _hfile_always_remote = Module["_hfile_always_remote"] = asm["_hfile_always_remote"];
var _hfile_destroy = Module["_hfile_destroy"] = asm["_hfile_destroy"];
var _hfile_exit = Module["_hfile_exit"] = asm["_hfile_exit"];
var _hfile_init = Module["_hfile_init"] = asm["_hfile_init"];
var _hfile_oflags = Module["_hfile_oflags"] = asm["_hfile_oflags"];
var _hfile_plugin_init_net = Module["_hfile_plugin_init_net"] = asm["_hfile_plugin_init_net"];
var _hflush = Module["_hflush"] = asm["_hflush"];
var _hgetc = Module["_hgetc"] = asm["_hgetc"];
var _hgetc2 = Module["_hgetc2"] = asm["_hgetc2"];
var _hopen = Module["_hopen"] = asm["_hopen"];
var _hopen_fd = Module["_hopen_fd"] = asm["_hopen_fd"];
var _hopen_fd_fileuri = Module["_hopen_fd_fileuri"] = asm["_hopen_fd_fileuri"];
var _hopen_fd_stdinout = Module["_hopen_fd_stdinout"] = asm["_hopen_fd_stdinout"];
var _hopen_mem = Module["_hopen_mem"] = asm["_hopen_mem"];
var _hopen_net = Module["_hopen_net"] = asm["_hopen_net"];
var _hopen_unknown_scheme = Module["_hopen_unknown_scheme"] = asm["_hopen_unknown_scheme"];
var _hpeek = Module["_hpeek"] = asm["_hpeek"];
var _hread = Module["_hread"] = asm["_hread"];
var _hread2 = Module["_hread2"] = asm["_hread2"];
var _hread_445 = Module["_hread_445"] = asm["_hread_445"];
var _hseek = Module["_hseek"] = asm["_hseek"];
var _htell = Module["_htell"] = asm["_htell"];
var _htell_446 = Module["_htell_446"] = asm["_htell_446"];
var _htonl = Module["_htonl"] = asm["_htonl"];
var _htons = Module["_htons"] = asm["_htons"];
var _hts_detect_format = Module["_hts_detect_format"] = asm["_hts_detect_format"];
var _hts_fetch_js = Module["_hts_fetch_js"] = asm["_hts_fetch_js"];
var _hts_open_js = Module["_hts_open_js"] = asm["_hts_open_js"];
var _hwrite2 = Module["_hwrite2"] = asm["_hwrite2"];
var _hwrite_463 = Module["_hwrite_463"] = asm["_hwrite_463"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _inflate = Module["_inflate"] = asm["_inflate"];
var _inflateEnd = Module["_inflateEnd"] = asm["_inflateEnd"];
var _inflateInit2_ = Module["_inflateInit2_"] = asm["_inflateInit2_"];
var _inflateReset2 = Module["_inflateReset2"] = asm["_inflateReset2"];
var _inflate_block = Module["_inflate_block"] = asm["_inflate_block"];
var _inflate_fast = Module["_inflate_fast"] = asm["_inflate_fast"];
var _inflate_gzip_block = Module["_inflate_gzip_block"] = asm["_inflate_gzip_block"];
var _inflate_table = Module["_inflate_table"] = asm["_inflate_table"];
var _init_add_plugin = Module["_init_add_plugin"] = asm["_init_add_plugin"];
var _init_block = Module["_init_block"] = asm["_init_block"];
var _int32_decode = Module["_int32_decode"] = asm["_int32_decode"];
var _int32_get_blk = Module["_int32_get_blk"] = asm["_int32_get_blk"];
var _isalnum = Module["_isalnum"] = asm["_isalnum"];
var _isalnum_c = Module["_isalnum_c"] = asm["_isalnum_c"];
var _isalpha = Module["_isalpha"] = asm["_isalpha"];
var _isdigit = Module["_isdigit"] = asm["_isdigit"];
var _isdigit_c = Module["_isdigit_c"] = asm["_isdigit_c"];
var _isgraph = Module["_isgraph"] = asm["_isgraph"];
var _isspace = Module["_isspace"] = asm["_isspace"];
var _isupper = Module["_isupper"] = asm["_isupper"];
var _itf8_decode_crc = Module["_itf8_decode_crc"] = asm["_itf8_decode_crc"];
var _kftp_connect = Module["_kftp_connect"] = asm["_kftp_connect"];
var _kftp_connect_file = Module["_kftp_connect_file"] = asm["_kftp_connect_file"];
var _kftp_get_response = Module["_kftp_get_response"] = asm["_kftp_get_response"];
var _kftp_parse_url = Module["_kftp_parse_url"] = asm["_kftp_parse_url"];
var _kftp_pasv_connect = Module["_kftp_pasv_connect"] = asm["_kftp_pasv_connect"];
var _kftp_pasv_prep = Module["_kftp_pasv_prep"] = asm["_kftp_pasv_prep"];
var _kftp_reconnect = Module["_kftp_reconnect"] = asm["_kftp_reconnect"];
var _kftp_send_cmd = Module["_kftp_send_cmd"] = asm["_kftp_send_cmd"];
var _kh_del_cache = Module["_kh_del_cache"] = asm["_kh_del_cache"];
var _kh_destroy_cache = Module["_kh_destroy_cache"] = asm["_kh_destroy_cache"];
var _kh_destroy_m_i2i = Module["_kh_destroy_m_i2i"] = asm["_kh_destroy_m_i2i"];
var _kh_destroy_m_s2i = Module["_kh_destroy_m_s2i"] = asm["_kh_destroy_m_s2i"];
var _kh_destroy_m_s2i_546 = Module["_kh_destroy_m_s2i_546"] = asm["_kh_destroy_m_s2i_546"];
var _kh_destroy_map = Module["_kh_destroy_map"] = asm["_kh_destroy_map"];
var _kh_destroy_refs = Module["_kh_destroy_refs"] = asm["_kh_destroy_refs"];
var _kh_destroy_s = Module["_kh_destroy_s"] = asm["_kh_destroy_s"];
var _kh_destroy_s_i2i = Module["_kh_destroy_s_i2i"] = asm["_kh_destroy_s_i2i"];
var _kh_destroy_sam_hdr = Module["_kh_destroy_sam_hdr"] = asm["_kh_destroy_sam_hdr"];
var _kh_destroy_scheme_string = Module["_kh_destroy_scheme_string"] = asm["_kh_destroy_scheme_string"];
var _kh_get_cache = Module["_kh_get_cache"] = asm["_kh_get_cache"];
var _kh_get_m_s2i = Module["_kh_get_m_s2i"] = asm["_kh_get_m_s2i"];
var _kh_get_refs = Module["_kh_get_refs"] = asm["_kh_get_refs"];
var _kh_get_s = Module["_kh_get_s"] = asm["_kh_get_s"];
var _kh_get_sam_hdr = Module["_kh_get_sam_hdr"] = asm["_kh_get_sam_hdr"];
var _kh_get_scheme_string = Module["_kh_get_scheme_string"] = asm["_kh_get_scheme_string"];
var _kh_init_cache = Module["_kh_init_cache"] = asm["_kh_init_cache"];
var _kh_init_m_s2i_536 = Module["_kh_init_m_s2i_536"] = asm["_kh_init_m_s2i_536"];
var _kh_init_refs = Module["_kh_init_refs"] = asm["_kh_init_refs"];
var _kh_init_s = Module["_kh_init_s"] = asm["_kh_init_s"];
var _kh_init_sam_hdr = Module["_kh_init_sam_hdr"] = asm["_kh_init_sam_hdr"];
var _kh_init_scheme_string = Module["_kh_init_scheme_string"] = asm["_kh_init_scheme_string"];
var _kh_put_cache = Module["_kh_put_cache"] = asm["_kh_put_cache"];
var _kh_put_m_s2i = Module["_kh_put_m_s2i"] = asm["_kh_put_m_s2i"];
var _kh_put_refs = Module["_kh_put_refs"] = asm["_kh_put_refs"];
var _kh_put_s = Module["_kh_put_s"] = asm["_kh_put_s"];
var _kh_put_sam_hdr = Module["_kh_put_sam_hdr"] = asm["_kh_put_sam_hdr"];
var _kh_put_scheme_string = Module["_kh_put_scheme_string"] = asm["_kh_put_scheme_string"];
var _kh_resize_cache = Module["_kh_resize_cache"] = asm["_kh_resize_cache"];
var _kh_resize_m_s2i = Module["_kh_resize_m_s2i"] = asm["_kh_resize_m_s2i"];
var _kh_resize_refs = Module["_kh_resize_refs"] = asm["_kh_resize_refs"];
var _kh_resize_s = Module["_kh_resize_s"] = asm["_kh_resize_s"];
var _kh_resize_sam_hdr = Module["_kh_resize_sam_hdr"] = asm["_kh_resize_sam_hdr"];
var _kh_resize_scheme_string = Module["_kh_resize_scheme_string"] = asm["_kh_resize_scheme_string"];
var _khttp_connect_file = Module["_khttp_connect_file"] = asm["_khttp_connect_file"];
var _khttp_parse_url = Module["_khttp_parse_url"] = asm["_khttp_parse_url"];
var _knet_close = Module["_knet_close"] = asm["_knet_close"];
var _knet_open = Module["_knet_open"] = asm["_knet_open"];
var _knet_read = Module["_knet_read"] = asm["_knet_read"];
var _knet_seek = Module["_knet_seek"] = asm["_knet_seek"];
var _kputc__916 = Module["_kputc__916"] = asm["_kputc__916"];
var _kputsn_510 = Module["_kputsn_510"] = asm["_kputsn_510"];
var _kputsn_918 = Module["_kputsn_918"] = asm["_kputsn_918"];
var _ks_len = Module["_ks_len"] = asm["_ks_len"];
var _ks_str = Module["_ks_str"] = asm["_ks_str"];
var _llvm_bswap_i16 = Module["_llvm_bswap_i16"] = asm["_llvm_bswap_i16"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _load_block_from_cache = Module["_load_block_from_cache"] = asm["_load_block_from_cache"];
var _load_hfile_plugins = Module["_load_hfile_plugins"] = asm["_load_hfile_plugins"];
var _longest_match = Module["_longest_match"] = asm["_longest_match"];
var _lseek = Module["_lseek"] = asm["_lseek"];
var _ltf8_decode_crc = Module["_ltf8_decode_crc"] = asm["_ltf8_decode_crc"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _mbrtowc = Module["_mbrtowc"] = asm["_mbrtowc"];
var _mbsinit = Module["_mbsinit"] = asm["_mbsinit"];
var _mem_close = Module["_mem_close"] = asm["_mem_close"];
var _mem_read = Module["_mem_read"] = asm["_mem_read"];
var _mem_seek = Module["_mem_seek"] = asm["_mem_seek"];
var _memchr = Module["_memchr"] = asm["_memchr"];
var _memcmp = Module["_memcmp"] = asm["_memcmp"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _mfclose = Module["_mfclose"] = asm["_mfclose"];
var _mfdestroy = Module["_mfdestroy"] = asm["_mfdestroy"];
var _mfflush = Module["_mfflush"] = asm["_mfflush"];
var _mode2level = Module["_mode2level"] = asm["_mode2level"];
var _mt_destroy = Module["_mt_destroy"] = asm["_mt_destroy"];
var _mt_flush_queue = Module["_mt_flush_queue"] = asm["_mt_flush_queue"];
var _mt_queue = Module["_mt_queue"] = asm["_mt_queue"];
var _my_netread = Module["_my_netread"] = asm["_my_netread"];
var _net_close = Module["_net_close"] = asm["_net_close"];
var _net_init = Module["_net_init"] = asm["_net_init"];
var _net_read = Module["_net_read"] = asm["_net_read"];
var _net_seek = Module["_net_seek"] = asm["_net_seek"];
var _new_pool = Module["_new_pool"] = asm["_new_pool"];
var _new_string_pool = Module["_new_string_pool"] = asm["_new_string_pool"];
var _next_power_2 = Module["_next_power_2"] = asm["_next_power_2"];
var _nodtor = Module["_nodtor"] = asm["_nodtor"];
var _ntohs = Module["_ntohs"] = asm["_ntohs"];
var _open = Module["_open"] = asm["_open"];
var _out = Module["_out"] = asm["_out"];
var _packInt16 = Module["_packInt16"] = asm["_packInt16"];
var _packInt32 = Module["_packInt32"] = asm["_packInt32"];
var _pad_682 = Module["_pad_682"] = asm["_pad_682"];
var _parse_version = Module["_parse_version"] = asm["_parse_version"];
var _perror = Module["_perror"] = asm["_perror"];
var _pool_alloc = Module["_pool_alloc"] = asm["_pool_alloc"];
var _pool_create = Module["_pool_create"] = asm["_pool_create"];
var _pool_destroy = Module["_pool_destroy"] = asm["_pool_destroy"];
var _pop_arg = Module["_pop_arg"] = asm["_pop_arg"];
var _printf = Module["_printf"] = asm["_printf"];
var _printf_core = Module["_printf_core"] = asm["_printf_core"];
var _proxy_main = Module["_proxy_main"] = asm["_proxy_main"];
var _pthread_attr_destroy = Module["_pthread_attr_destroy"] = asm["_pthread_attr_destroy"];
var _pthread_attr_init = Module["_pthread_attr_init"] = asm["_pthread_attr_init"];
var _pthread_attr_setdetachstate = Module["_pthread_attr_setdetachstate"] = asm["_pthread_attr_setdetachstate"];
var _pthread_attr_setstacksize = Module["_pthread_attr_setstacksize"] = asm["_pthread_attr_setstacksize"];
var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = asm["_pthread_cond_broadcast"];
var _pthread_cond_destroy = Module["_pthread_cond_destroy"] = asm["_pthread_cond_destroy"];
var _pthread_cond_init = Module["_pthread_cond_init"] = asm["_pthread_cond_init"];
var _pthread_cond_signal = Module["_pthread_cond_signal"] = asm["_pthread_cond_signal"];
var _pthread_cond_wait = Module["_pthread_cond_wait"] = asm["_pthread_cond_wait"];
var _pthread_mutex_destroy = Module["_pthread_mutex_destroy"] = asm["_pthread_mutex_destroy"];
var _pthread_mutex_init = Module["_pthread_mutex_init"] = asm["_pthread_mutex_init"];
var _pthread_mutexattr_destroy = Module["_pthread_mutexattr_destroy"] = asm["_pthread_mutexattr_destroy"];
var _pthread_mutexattr_init = Module["_pthread_mutexattr_init"] = asm["_pthread_mutexattr_init"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var _pthread_setspecific = Module["_pthread_setspecific"] = asm["_pthread_setspecific"];
var _rans_uncompress = Module["_rans_uncompress"] = asm["_rans_uncompress"];
var _rans_uncompress_O0 = Module["_rans_uncompress_O0"] = asm["_rans_uncompress_O0"];
var _rans_uncompress_O1 = Module["_rans_uncompress_O1"] = asm["_rans_uncompress_O1"];
var _read = Module["_read"] = asm["_read"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _recv = Module["_recv"] = asm["_recv"];
var _recvfrom = Module["_recvfrom"] = asm["_recvfrom"];
var _ref_entry_free_seq = Module["_ref_entry_free_seq"] = asm["_ref_entry_free_seq"];
var _refill_buffer = Module["_refill_buffer"] = asm["_refill_buffer"];
var _refs2id = Module["_refs2id"] = asm["_refs2id"];
var _refs_create = Module["_refs_create"] = asm["_refs_create"];
var _refs_free = Module["_refs_free"] = asm["_refs_free"];
var _refs_from_header = Module["_refs_from_header"] = asm["_refs_from_header"];
var _refs_load_fai = Module["_refs_load_fai"] = asm["_refs_load_fai"];
var _sam_hdr_add_lines = Module["_sam_hdr_add_lines"] = asm["_sam_hdr_add_lines"];
var _sam_hdr_error = Module["_sam_hdr_error"] = asm["_sam_hdr_error"];
var _sam_hdr_find = Module["_sam_hdr_find"] = asm["_sam_hdr_find"];
var _sam_hdr_find_key = Module["_sam_hdr_find_key"] = asm["_sam_hdr_find_key"];
var _sam_hdr_free = Module["_sam_hdr_free"] = asm["_sam_hdr_free"];
var _sam_hdr_link_pg = Module["_sam_hdr_link_pg"] = asm["_sam_hdr_link_pg"];
var _sam_hdr_new = Module["_sam_hdr_new"] = asm["_sam_hdr_new"];
var _sam_hdr_parse_ = Module["_sam_hdr_parse_"] = asm["_sam_hdr_parse_"];
var _sam_hdr_parse_sort_order = Module["_sam_hdr_parse_sort_order"] = asm["_sam_hdr_parse_sort_order"];
var _sam_hdr_update_hashes = Module["_sam_hdr_update_hashes"] = asm["_sam_hdr_update_hashes"];
var _sanitise_SQ_lines = Module["_sanitise_SQ_lines"] = asm["_sanitise_SQ_lines"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _scalbn = Module["_scalbn"] = asm["_scalbn"];
var _scalbnl = Module["_scalbnl"] = asm["_scalbnl"];
var _scanexp = Module["_scanexp"] = asm["_scanexp"];
var _select = Module["_select"] = asm["_select"];
var _send = Module["_send"] = asm["_send"];
var _send_tree = Module["_send_tree"] = asm["_send_tree"];
var _sendto = Module["_sendto"] = asm["_sendto"];
var _setsockopt = Module["_setsockopt"] = asm["_setsockopt"];
var _sn_write = Module["_sn_write"] = asm["_sn_write"];
var _snprintf = Module["_snprintf"] = asm["_snprintf"];
var _socket = Module["_socket"] = asm["_socket"];
var _socket_connect = Module["_socket_connect"] = asm["_socket_connect"];
var _socket_wait = Module["_socket_wait"] = asm["_socket_wait"];
var _sprintf = Module["_sprintf"] = asm["_sprintf"];
var _sscanf = Module["_sscanf"] = asm["_sscanf"];
var _stat = Module["_stat"] = asm["_stat"];
var _store_int = Module["_store_int"] = asm["_store_int"];
var _strchr = Module["_strchr"] = asm["_strchr"];
var _strcmp = Module["_strcmp"] = asm["_strcmp"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _strerror = Module["_strerror"] = asm["_strerror"];
var _string_alloc = Module["_string_alloc"] = asm["_string_alloc"];
var _string_dup = Module["_string_dup"] = asm["_string_dup"];
var _string_ndup = Module["_string_ndup"] = asm["_string_ndup"];
var _string_pool_create = Module["_string_pool_create"] = asm["_string_pool_create"];
var _string_pool_destroy = Module["_string_pool_destroy"] = asm["_string_pool_destroy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _strncmp = Module["_strncmp"] = asm["_strncmp"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _strrchr = Module["_strrchr"] = asm["_strrchr"];
var _strstr = Module["_strstr"] = asm["_strstr"];
var _strtol = Module["_strtol"] = asm["_strtol"];
var _strtoll = Module["_strtoll"] = asm["_strtoll"];
var _strtox_740 = Module["_strtox_740"] = asm["_strtox_740"];
var _swapc = Module["_swapc"] = asm["_swapc"];
var _t_pool_add_result = Module["_t_pool_add_result"] = asm["_t_pool_add_result"];
var _t_pool_init = Module["_t_pool_init"] = asm["_t_pool_init"];
var _t_pool_worker = Module["_t_pool_worker"] = asm["_t_pool_worker"];
var _t_results_queue_init = Module["_t_results_queue_init"] = asm["_t_results_queue_init"];
var _threebyte_strstr = Module["_threebyte_strstr"] = asm["_threebyte_strstr"];
var _tolower = Module["_tolower"] = asm["_tolower"];
var _tolower_c_204 = Module["_tolower_c_204"] = asm["_tolower_c_204"];
var _try_realloc_chunk = Module["_try_realloc_chunk"] = asm["_try_realloc_chunk"];
var _twobyte_strstr = Module["_twobyte_strstr"] = asm["_twobyte_strstr"];
var _twoway_strstr = Module["_twoway_strstr"] = asm["_twoway_strstr"];
var _undo = Module["_undo"] = asm["_undo"];
var _unpackInt16 = Module["_unpackInt16"] = asm["_unpackInt16"];
var _updatewindow = Module["_updatewindow"] = asm["_updatewindow"];
var _vfprintf = Module["_vfprintf"] = asm["_vfprintf"];
var _vfscanf = Module["_vfscanf"] = asm["_vfscanf"];
var _vsnprintf = Module["_vsnprintf"] = asm["_vsnprintf"];
var _vsprintf = Module["_vsprintf"] = asm["_vsprintf"];
var _vsscanf = Module["_vsscanf"] = asm["_vsscanf"];
var _wcrtomb = Module["_wcrtomb"] = asm["_wcrtomb"];
var _wctomb = Module["_wctomb"] = asm["_wctomb"];
var _worker_aux = Module["_worker_aux"] = asm["_worker_aux"];
var _write = Module["_write"] = asm["_write"];
var _writebuffer_is_nonempty = Module["_writebuffer_is_nonempty"] = asm["_writebuffer_is_nonempty"];
var _zcalloc = Module["_zcalloc"] = asm["_zcalloc"];
var _zcfree = Module["_zcfree"] = asm["_zcfree"];
var _zlib_mem_inflate = Module["_zlib_mem_inflate"] = asm["_zlib_mem_inflate"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };

if (memoryInitializer && !ENVIRONMENT_IS_PTHREAD) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function exit(status, implicit) {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var flush = FS.quit;
  if (flush) {
    var print = Module['print'];
    var printErr = Module['printErr'];
    var has = false;
    Module['print'] = Module['printErr'] = function(x) {
      has = true;
    }
    try { // it doesn't matter if it fails
      flush(0);
    } catch(e) {}
    Module['print'] = print;
    Module['printErr'] = printErr;
    if (has) {
      warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
    }
  }

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {
    PThread.terminateAllThreads();

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (ENVIRONMENT_IS_PTHREAD) console.error('Pthread aborting at ' + new Error().stack);
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


Module["noExitRuntime"] = true;

if (!ENVIRONMENT_IS_PTHREAD) run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}




var htsfiles = {};

function Htsfile(fileobj, progress_callback) {
    this.reader = new FileReaderSync();
    this.offset = 0;
    this.cursor = -1;
    this.bufsize = 4194304; // 4 MiB
    this.buf = undefined;
    this.eof = 0;
    this.last_chunk = 0;
    this.fileobj = fileobj;
    this.progress_callback = progress_callback;
}

Htsfile.prototype._getchunk = function () {
    console.log('fetchfetch');
    var hts_fetch_js = cwrap('hts_fetch_js', 'number', ['number', 'string']);
    if (hts_fetch_js(0,"") == 0) {
        return fd;
    }
    if (this.fileobj.size > this.offset+this.bufsize) {
        this.last_chunk = 0;
        blob = this.fileobj.slice(this.offset, this.offset+this.bufsize);
    } else {
        blob = this.fileobj.slice(this.offset, this.fileobj.size);
        this.last_chunk = 1;
    }
    this.offset += this.bufsize;
    this.buf = this.reader.readAsArrayBuffer(blob);
    this.cursor = 0;
    if (this.progress_callback)
        this.progress_callback(this.offset/this.fileobj.size*100);
}

Htsfile.prototype.seek = function (offset, whence) {
    var prev_offset = this.offset - this.bufsize;
    if (whence >= 0 && whence <= 2) {
        if (whence == 1)
            offset += prev_offset;
        if (whence == 2)
            offset = this.fileobj.size + offset;
        if (prev_offset <= offset && offset < this.offset) {
            this.cursor = offset - prev_offset;
        } else {
            this.offset = offset;
            this.cursor = -1;
            this.last_chunk = 0;
        }
        this.eof = 0;
        return offset;
    }
    return -1;
}

Htsfile.prototype.read = function (ptr, nbytes) {
    var buf, heap, over, nbytesread;

    if (this.last_chunk && this.cursor == -1) this.eof = 1;
    if (this.eof) return 0;

    nbytesread = 0;
    heap = new Int8Array(Module.HEAP8.buffer, ptr, nbytes);
    while (1) {
        if (this.cursor == -1) {
            if (this.last_chunk) {
                this.eof = 1;
                break;
            } else this._getchunk();
        }

        if (this.bufsize > this.cursor+nbytes) {
            // read part of buffer
            buf = this.buf.slice(this.cursor, this.cursor+nbytes);
            heap.set(new Int8Array(buf));
            nbytesread = buf.byteLength;

            this.cursor += nbytes;
        } else {
            // read from cursor to the end of buffer
            buf = this.buf.slice(this.cursor, this.bufsize);
            heap.set(new Int8Array(buf), nbytesread);
            nbytesread += buf.byteLength;

            this.cursor = -1;
        }
        nbytes -= nbytesread;
        if (nbytes < this.bufsize) break;
    }
    return nbytesread;
}

Htsfile.prototype.close = function () {
}

function js_close(fd) {
    htsfiles[fd].close();
    delete htsfiles[fd];
}

function js_seek(fd, offset, whence) {
    return htsfiles[fd].seek(offset, whence);
}

function js_read(fd, ptr, nbytes) {
    return htsfiles[fd].read(ptr, nbytes);
}

function hts_open(fileobj, progress_callback) {
    for (var fd=1;;fd++) {
        if (htsfiles[fd] === undefined)
            break;
    }

    htsfiles[fd] = new Htsfile(fileobj, progress_callback);;
    console.log('herehrehre');

    var hts_open_js = cwrap('hts_open_js', 'number', ['number', 'string']);
    if (hts_open_js(fd, fileobj.name) == 0)
        return fd;
    else
        throw "Something wrong happened while opening file.";
        return 0;
}

function hts_close(fd) {
    Module._hts_close_js(fd);
}

function run_pileup(fd_bam, fd_bai, fd_fa, fd_fai, reg) {
    var func = cwrap('run_pileup', 'number', ['number', 'number', 'number', 'number', 'string']);
    func(fd_bam, fd_bai, fd_fa, fd_fai, reg);
}

self["hts_open"] = hts_open;
self["hts_close"] = hts_close;
self["run_pileup"] = run_pileup;

