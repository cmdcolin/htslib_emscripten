
var Module;

if (typeof Module === 'undefined') Module = {};

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
var fileData0 = [];
fileData0.push.apply(fileData0, [47, 42, 32, 32, 118, 99, 102, 46, 99, 32, 45, 45, 32, 86, 67, 70, 47, 66, 67, 70, 32, 65, 80, 73, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 46, 10, 10, 32, 32, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 50, 44, 32, 50, 48, 49, 51, 32, 66, 114, 111, 97, 100, 32, 73, 110, 115, 116, 105, 116, 117, 116, 101, 46, 10, 32, 32, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 50, 45, 50, 48, 49, 54, 32, 71, 101, 110, 111, 109, 101, 32, 82, 101, 115, 101, 97, 114, 99, 104, 32, 76, 116, 100, 46, 10, 32, 32, 32, 32, 80, 111, 114, 116, 105, 111, 110, 115, 32, 99, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 52, 32, 73, 110, 116, 101, 108, 32, 67, 111, 114, 112, 111, 114, 97, 116, 105, 111, 110, 46, 10, 10, 32, 32, 32, 32, 65, 117, 116, 104, 111, 114, 58, 32, 72, 101, 110, 103, 32, 76, 105, 32, 60, 108, 104, 51, 64, 115, 97, 110, 103, 101, 114, 46, 97, 99, 46, 117, 107, 62, 10, 10, 80, 101, 114, 109, 105, 115, 115, 105, 111, 110, 32, 105, 115, 32, 104, 101, 114, 101, 98, 121, 32, 103, 114, 97, 110, 116, 101, 100, 44, 32, 102, 114, 101, 101, 32, 111, 102, 32, 99, 104, 97, 114, 103, 101, 44, 32, 116, 111, 32, 97, 110, 121, 32, 112, 101, 114, 115, 111, 110, 32, 111, 98, 116, 97, 105, 110, 105, 110, 103, 32, 97, 32, 99, 111, 112, 121, 10, 111, 102, 32, 116, 104, 105, 115, 32, 115, 111, 102, 116, 119, 97, 114, 101, 32, 97, 110, 100, 32, 97, 115, 115, 111, 99, 105, 97, 116, 101, 100, 32, 100, 111, 99, 117, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 102, 105, 108, 101, 115, 32, 40, 116, 104, 101, 32, 34, 83, 111, 102, 116, 119, 97, 114, 101, 34, 41, 44, 32, 116, 111, 32, 100, 101, 97, 108, 10, 105, 110, 32, 116, 104, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 119, 105, 116, 104, 111, 117, 116, 32, 114, 101, 115, 116, 114, 105, 99, 116, 105, 111, 110, 44, 32, 105, 110, 99, 108, 117, 100, 105, 110, 103, 32, 119, 105, 116, 104, 111, 117, 116, 32, 108, 105, 109, 105, 116, 97, 116, 105, 111, 110, 32, 116, 104, 101, 32, 114, 105, 103, 104, 116, 115, 10, 116, 111, 32, 117, 115, 101, 44, 32, 99, 111, 112, 121, 44, 32, 109, 111, 100, 105, 102, 121, 44, 32, 109, 101, 114, 103, 101, 44, 32, 112, 117, 98, 108, 105, 115, 104, 44, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 44, 32, 115, 117, 98, 108, 105, 99, 101, 110, 115, 101, 44, 32, 97, 110, 100, 47, 111, 114, 32, 115, 101, 108, 108, 10, 99, 111, 112, 105, 101, 115, 32, 111, 102, 32, 116, 104, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 44, 32, 97, 110, 100, 32, 116, 111, 32, 112, 101, 114, 109, 105, 116, 32, 112, 101, 114, 115, 111, 110, 115, 32, 116, 111, 32, 119, 104, 111, 109, 32, 116, 104, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 105, 115, 10, 102, 117, 114, 110, 105, 115, 104, 101, 100, 32, 116, 111, 32, 100, 111, 32, 115, 111, 44, 32, 115, 117, 98, 106, 101, 99, 116, 32, 116, 111, 32, 116, 104, 101, 32, 102, 111, 108, 108, 111, 119, 105, 110, 103, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 58, 10, 10, 84, 104, 101, 32, 97, 98, 111, 118, 101, 32, 99, 111, 112, 121, 114, 105, 103, 104, 116, 32, 110, 111, 116, 105, 99, 101, 32, 97, 110, 100, 32, 116, 104, 105, 115, 32, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 32, 110, 111, 116, 105, 99, 101, 32, 115, 104, 97, 108, 108, 32, 98, 101, 32, 105, 110, 99, 108, 117, 100, 101, 100, 32, 105, 110, 10, 97, 108, 108, 32, 99, 111, 112, 105, 101, 115, 32, 111, 114, 32, 115, 117, 98, 115, 116, 97, 110, 116, 105, 97, 108, 32, 112, 111, 114, 116, 105, 111, 110, 115, 32, 111, 102, 32, 116, 104, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 46, 10, 10, 84, 72, 69, 32, 83, 79, 70, 84, 87, 65, 82, 69, 32, 73, 83, 32, 80, 82, 79, 86, 73, 68, 69, 68, 32, 34, 65, 83, 32, 73, 83, 34, 44, 32, 87, 73, 84, 72, 79, 85, 84, 32, 87, 65, 82, 82, 65, 78, 84, 89, 32, 79, 70, 32, 65, 78, 89, 32, 75, 73, 78, 68, 44, 32, 69, 88, 80, 82, 69, 83, 83, 32, 79, 82, 10, 73, 77, 80, 76, 73, 69, 68, 44, 32, 73, 78, 67, 76, 85, 68, 73, 78, 71, 32, 66, 85, 84, 32, 78, 79, 84, 32, 76, 73, 77, 73, 84, 69, 68, 32, 84, 79, 32, 84, 72, 69, 32, 87, 65, 82, 82, 65, 78, 84, 73, 69, 83, 32, 79, 70, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 44, 10, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 32, 65, 78, 68, 32, 78, 79, 78, 73, 78, 70, 82, 73, 78, 71, 69, 77, 69, 78, 84, 46, 32, 73, 78, 32, 78, 79, 32, 69, 86, 69, 78, 84, 32, 83, 72, 65, 76, 76, 10, 84, 72, 69, 32, 65, 85, 84, 72, 79, 82, 83, 32, 79, 82, 32, 67, 79, 80, 89, 82, 73, 71, 72, 84, 32, 72, 79, 76, 68, 69, 82, 83, 32, 66, 69, 32, 76, 73, 65, 66, 76, 69, 32, 70, 79, 82, 32, 65, 78, 89, 32, 67, 76, 65, 73, 77, 44, 32, 68, 65, 77, 65, 71, 69, 83, 32, 79, 82, 32, 79, 84, 72, 69, 82, 10, 76, 73, 65, 66, 73, 76, 73, 84, 89, 44, 32, 87, 72, 69, 84, 72, 69, 82, 32, 73, 78, 32, 65, 78, 32, 65, 67, 84, 73, 79, 78, 32, 79, 70, 32, 67, 79, 78, 84, 82, 65, 67, 84, 44, 32, 84, 79, 82, 84, 32, 79, 82, 32, 79, 84, 72, 69, 82, 87, 73, 83, 69, 44, 32, 65, 82, 73, 83, 73, 78, 71, 10, 70, 82, 79, 77, 44, 32, 79, 85, 84, 32, 79, 70, 32, 79, 82, 32, 73, 78, 32, 67, 79, 78, 78, 69, 67, 84, 73, 79, 78, 32, 87, 73, 84, 72, 32, 84, 72, 69, 32, 83, 79, 70, 84, 87, 65, 82, 69, 32, 79, 82, 32, 84, 72, 69, 32, 85, 83, 69, 32, 79, 82, 32, 79, 84, 72, 69, 82, 10, 68, 69, 65, 76, 73, 78, 71, 83, 32, 73, 78, 32, 84, 72, 69, 32, 83, 79, 70, 84, 87, 65, 82, 69, 46, 32, 32, 42, 47, 10, 10, 35, 105, 110, 99, 108, 117, 100, 101, 32, 60, 99, 111, 110, 102, 105, 103, 46, 104, 62, 10, 10, 35, 105, 110, 99, 108, 117, 100, 101, 32, 60, 122, 108, 105, 98, 46, 104, 62, 10, 35, 105, 110, 99, 108, 117, 100, 101, 32, 60, 115, 116, 100, 105, 111, 46, 104, 62, 10, 35, 105, 110, 99, 108, 117, 100, 101, 32, 60, 99, 116, 121, 112, 101, 46, 104, 62, 10, 35, 105, 110, 99, 108, 117, 100, 101, 32, 60, 97, 115, 115, 101, 114, 116, 46, 104, 62, 10, 35, 105, 110, 99, 108, 117, 100, 101, 32, 60, 115, 116, 114, 105, 110, 103, 46, 104, 62, 10, 35, 105, 110, 99, 108, 117, 100, 101, 32, 60, 115, 116, 100, 108, 105, 98, 46, 104, 62, 10, 35, 105, 110, 99, 108, 117, 100, 101, 32, 60, 108, 105, 109, 105, 116, 115, 46, 104, 62, 10, 35, 105, 110, 99, 108, 117, 100, 101, 32, 34, 104, 116, 115, 108, 105, 98, 47, 107, 115, 116, 114, 105, 110, 103, 46, 104, 34, 10, 35, 105, 110, 99, 108, 117, 100, 101, 32, 34, 104, 116, 115, 108, 105, 98, 47, 98, 103, 122, 102, 46, 104, 34, 10, 35, 105, 110, 99, 108, 117, 100, 101, 32, 34, 104, 116, 115, 108, 105, 98, 47, 118, 99, 102, 46, 104, 34, 10, 35, 105, 110, 99, 108, 117, 100, 101, 32, 34, 104, 116, 115, 108, 105, 98, 47, 116, 98, 120, 46, 104, 34, 10, 35, 105, 110, 99, 108, 117, 100, 101, 32, 34, 104, 116, 115, 108, 105, 98, 47, 104, 102, 105, 108, 101, 46, 104, 34, 10, 35, 105, 110, 99, 108, 117, 100, 101, 32, 34, 104, 116, 115, 108, 105, 98, 47, 107, 104, 97, 115, 104, 95, 115, 116, 114, 50, 105, 110, 116, 46, 104, 34, 10, 35, 105, 110, 99, 108, 117, 100, 101, 32, 34, 104, 116, 115, 95, 105, 110, 116, 101, 114, 110, 97, 108, 46, 104, 34, 10, 10, 35, 105, 110, 99, 108, 117, 100, 101, 32, 34, 104, 116, 115, 108, 105, 98, 47, 107, 104, 97, 115, 104, 46, 104, 34, 10, 75, 72, 65, 83, 72, 95, 77, 65, 80, 95, 73, 78, 73, 84, 95, 83, 84, 82, 40, 118, 100, 105, 99, 116, 44, 32, 98, 99, 102, 95, 105, 100, 105, 110, 102, 111, 95, 116, 41, 10, 116, 121, 112, 101, 100, 101, 102, 32, 107, 104, 97, 115, 104, 95, 116, 40, 118, 100, 105, 99, 116, 41, 32, 118, 100, 105, 99, 116, 95, 116, 59, 10, 10, 35, 105, 110, 99, 108, 117, 100, 101, 32, 34, 104, 116, 115, 108, 105, 98, 47, 107, 115, 101, 113, 46, 104, 34, 10, 75, 83, 84, 82, 69, 65, 77, 95, 68, 69, 67, 76, 65, 82, 69, 40, 103, 122, 70, 105, 108, 101, 44, 32, 103, 122, 114, 101, 97, 100, 41, 10, 10, 117, 105, 110, 116, 51, 50, 95, 116, 32, 98, 99, 102, 95, 102, 108, 111, 97, 116, 95, 109, 105, 115, 115, 105, 110, 103, 32, 32, 32, 32, 61, 32, 48, 120, 55, 70, 56, 48, 48, 48, 48, 49, 59, 10, 117, 105, 110, 116, 51, 50, 95, 116, 32, 98, 99, 102, 95, 102, 108, 111, 97, 116, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 32, 61, 32, 48, 120, 55, 70, 56, 48, 48, 48, 48, 50, 59, 10, 117, 105, 110, 116, 56, 95, 116, 32, 98, 99, 102, 95, 116, 121, 112, 101, 95, 115, 104, 105, 102, 116, 91, 93, 32, 61, 32, 123, 32, 48, 44, 32, 48, 44, 32, 49, 44, 32, 50, 44, 32, 48, 44, 32, 50, 44, 32, 48, 44, 32, 48, 44, 32, 48, 44, 32, 48, 44, 32, 48, 44, 32, 48, 44, 32, 48, 44, 32, 48, 44, 32, 48, 44, 32, 48, 32, 125, 59, 10, 115, 116, 97, 116, 105, 99, 32, 98, 99, 102, 95, 105, 100, 105, 110, 102, 111, 95, 116, 32, 98, 99, 102, 95, 105, 100, 105, 110, 102, 111, 95, 100, 101, 102, 32, 61, 32, 123, 32, 46, 105, 110, 102, 111, 32, 61, 32, 123, 32, 49, 53, 44, 32, 49, 53, 44, 32, 49, 53, 32, 125, 44, 32, 46, 104, 114, 101, 99, 32, 61, 32, 123, 32, 78, 85, 76, 76, 44, 32, 78, 85, 76, 76, 44, 32, 78, 85, 76, 76, 125, 44, 32, 46, 105, 100, 32, 61, 32, 45, 49, 32, 125, 59, 10, 10, 115, 116, 97, 116, 105, 99, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 100, 117, 109, 112, 95, 99, 104, 97, 114, 40, 99, 104, 97, 114, 32, 42, 98, 117, 102, 102, 101, 114, 44, 32, 99, 104, 97, 114, 32, 99, 41, 10, 123, 10, 32, 32, 32, 32, 115, 119, 105, 116, 99, 104, 32, 40, 99, 41, 32, 123, 10, 32, 32, 32, 32, 99, 97, 115, 101, 32, 39, 92, 110, 39, 58, 32, 115, 116, 114, 99, 112, 121, 40, 98, 117, 102, 102, 101, 114, 44, 32, 34, 92, 92, 110, 34, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 99, 97, 115, 101, 32, 39, 92, 114, 39, 58, 32, 115, 116, 114, 99, 112, 121, 40, 98, 117, 102, 102, 101, 114, 44, 32, 34, 92, 92, 114, 34, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 99, 97, 115, 101, 32, 39, 92, 116, 39, 58, 32, 115, 116, 114, 99, 112, 121, 40, 98, 117, 102, 102, 101, 114, 44, 32, 34, 92, 92, 116, 34, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 99, 97, 115, 101, 32, 39, 92, 39, 39, 58, 10, 32, 32, 32, 32, 99, 97, 115, 101, 32, 39, 92, 34, 39, 58, 10, 32, 32, 32, 32, 99, 97, 115, 101, 32, 39, 92, 92, 39, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 112, 114, 105, 110, 116, 102, 40, 98, 117, 102, 102, 101, 114, 44, 32, 34, 92, 92, 37, 99, 34, 44, 32, 99, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 100, 101, 102, 97, 117, 108, 116, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 105, 115, 112, 114, 105, 110, 116, 95, 99, 40, 99, 41, 41, 32, 115, 112, 114, 105, 110, 116, 102, 40, 98, 117, 102, 102, 101, 114, 44, 32, 34, 37, 99, 34, 44, 32, 99, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 115, 112, 114, 105, 110, 116, 102, 40, 98, 117, 102, 102, 101, 114, 44, 32, 34, 92, 92, 120, 37, 48, 50, 88, 34, 44, 32, 40, 117, 110, 115, 105, 103, 110, 101, 100, 32, 99, 104, 97, 114, 41, 32, 99, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 98, 117, 102, 102, 101, 114, 59, 10, 125, 10, 10, 47, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 10, 32, 42, 42, 42, 32, 86, 67, 70, 32, 104, 101, 97, 100, 101, 114, 32, 112, 97, 114, 115, 101, 114, 32, 42, 42, 42, 10, 32, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 47, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 100, 100, 95, 115, 97, 109, 112, 108, 101, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 115, 41, 10, 123, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 115, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 10, 32, 32, 32, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 115, 115, 32, 61, 32, 115, 59, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 33, 42, 115, 115, 32, 38, 38, 32, 105, 115, 115, 112, 97, 99, 101, 40, 42, 115, 115, 41, 32, 41, 32, 115, 115, 43, 43, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 42, 115, 115, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 91, 69, 58, 58, 37, 115, 93, 32, 69, 109, 112, 116, 121, 32, 115, 97, 109, 112, 108, 101, 32, 110, 97, 109, 101, 58, 32, 116, 114, 97, 105, 108, 105, 110, 103, 32, 115, 112, 97, 99, 101, 115, 47, 116, 97, 98, 115, 32, 105, 110, 32, 116, 104, 101, 32, 104, 101, 97, 100, 101, 114, 32, 108, 105, 110, 101, 63, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 98, 111, 114, 116, 40, 41, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 118, 100, 105, 99, 116, 95, 116, 32, 42, 100, 32, 61, 32, 40, 118, 100, 105, 99, 116, 95, 116, 42, 41, 104, 45, 62, 100, 105, 99, 116, 91, 66, 67, 70, 95, 68, 84, 95, 83, 65, 77, 80, 76, 69, 93, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 114, 101, 116, 59, 10, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 115, 100, 117, 112, 32, 61, 32, 115, 116, 114, 100, 117, 112, 40, 115, 41, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 107, 32, 61, 32, 107, 104, 95, 112, 117, 116, 40, 118, 100, 105, 99, 116, 44, 32, 100, 44, 32, 115, 100, 117, 112, 44, 32, 38, 114, 101, 116, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 114, 101, 116, 41, 32, 123, 32, 47, 47, 32, 97, 98, 115, 101, 110, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 32, 61, 32, 98, 99, 102, 95, 105, 100, 105, 110, 102, 111, 95, 100, 101, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 46, 105, 100, 32, 61, 32, 107, 104, 95, 115, 105, 122, 101, 40, 100, 41, 32, 45, 32, 49, 59, 10, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 104, 116, 115, 95, 118, 101, 114, 98, 111, 115, 101, 32, 62, 61, 32, 50, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 32, 34, 91, 69, 58, 58, 37, 115, 93, 32, 68, 117, 112, 108, 105, 99, 97, 116, 101, 100, 32, 115, 97, 109, 112, 108, 101, 32, 110, 97, 109, 101, 32, 39, 37, 115, 39, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 98, 111, 114, 116, 40, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 115, 100, 117, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 110, 116, 32, 110, 32, 61, 32, 107, 104, 95, 115, 105, 122, 101, 40, 100, 41, 59, 10, 32, 32, 32, 32, 104, 45, 62, 115, 97, 109, 112, 108, 101, 115, 32, 61, 32, 40, 99, 104, 97, 114, 42, 42, 41, 32, 114, 101, 97, 108, 108, 111, 99, 40, 104, 45, 62, 115, 97, 109, 112, 108, 101, 115, 44, 115, 105, 122, 101, 111, 102, 40, 99, 104, 97, 114, 42, 41, 42, 110, 41, 59, 10, 32, 32, 32, 32, 104, 45, 62, 115, 97, 109, 112, 108, 101, 115, 91, 110, 45, 49, 93, 32, 61, 32, 115, 100, 117, 112, 59, 10, 32, 32, 32, 32, 104, 45, 62, 100, 105, 114, 116, 121, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 112, 97, 114, 115, 101, 95, 115, 97, 109, 112, 108, 101, 95, 108, 105, 110, 101, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 115, 116, 114, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 114, 101, 116, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 112, 44, 32, 42, 113, 59, 10, 32, 32, 32, 32, 47, 47, 32, 97, 100, 100, 32, 115, 97, 109, 112, 108, 101, 115, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 112, 32, 61, 32, 113, 32, 61, 32, 115, 116, 114, 59, 59, 32, 43, 43, 113, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 42, 113, 32, 33, 61, 32, 39, 92, 116, 39, 32, 38, 38, 32, 42, 113, 32, 33, 61, 32, 48, 32, 38, 38, 32, 42, 113, 32, 33, 61, 32, 39, 92, 110, 39, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 43, 43, 105, 32, 62, 32, 57, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 115, 32, 61, 32, 40, 99, 104, 97, 114, 42, 41, 109, 97, 108, 108, 111, 99, 40, 113, 32, 45, 32, 112, 32, 43, 32, 49, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 114, 110, 99, 112, 121, 40, 115, 44, 32, 112, 44, 32, 113, 32, 45, 32, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 91, 113, 32, 45, 32, 112, 93, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 100, 100, 95, 115, 97, 109, 112, 108, 101, 40, 104, 44, 115, 41, 32, 60, 32, 48, 32, 41, 32, 114, 101, 116, 32, 61, 32, 45, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 42, 113, 32, 61, 61, 32, 48, 32, 124, 124, 32, 42, 113, 32, 61, 61, 32, 39, 92, 110, 39, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 32, 61, 32, 113, 32, 43, 32, 49, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 100, 100, 95, 115, 97, 109, 112, 108, 101, 40, 104, 44, 78, 85, 76, 76, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 116, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 115, 121, 110, 99, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 51, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 100, 105, 99, 116, 95, 116, 32, 42, 100, 32, 61, 32, 40, 118, 100, 105, 99, 116, 95, 116, 42, 41, 104, 45, 62, 100, 105, 99, 116, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 105, 110, 116, 95, 116, 32, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 104, 45, 62, 110, 91, 105, 93, 32, 60, 32, 107, 104, 95, 115, 105, 122, 101, 40, 100, 41, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 116, 104, 105, 115, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 116, 114, 117, 101, 32, 111, 110, 108, 121, 32, 102, 111, 114, 32, 105, 61, 50, 44, 32, 66, 67, 70, 95, 68, 84, 95, 83, 65, 77, 80, 76, 69, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 104, 45, 62, 110, 91, 105, 93, 32, 61, 32, 107, 104, 95, 115, 105, 122, 101, 40, 100, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 104, 45, 62, 105, 100, 91, 105, 93, 32, 61, 32, 40, 98, 99, 102, 95, 105, 100, 112, 97, 105, 114, 95, 116, 42, 41, 32, 114, 101, 97, 108, 108, 111, 99, 40, 104, 45, 62, 105, 100, 91, 105, 93, 44, 32, 107, 104, 95, 115, 105, 122, 101, 40, 100, 41, 42, 115, 105, 122, 101, 111, 102, 40, 98, 99, 102, 95, 105, 100, 112, 97, 105, 114, 95, 116, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 107, 61, 107, 104, 95, 98, 101, 103, 105, 110, 40, 100, 41, 59, 32, 107, 60, 107, 104, 95, 101, 110, 100, 40, 100, 41, 59, 32, 107, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 33, 107, 104, 95, 101, 120, 105, 115, 116, 40, 100, 44, 107, 41, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 104, 45, 62, 105, 100, 91, 105, 93, 91, 107, 104, 95, 118, 97, 108, 40, 100, 44, 107, 41, 46, 105, 100, 93, 46, 107, 101, 121, 32, 61, 32, 107, 104, 95, 107, 101, 121, 40, 100, 44, 107, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 104, 45, 62, 105, 100, 91, 105, 93, 91, 107, 104, 95, 118, 97, 108, 40, 100, 44, 107, 41, 46, 105, 100, 93, 46, 118, 97, 108, 32, 61, 32, 38, 107, 104, 95, 118, 97, 108, 40, 100, 44, 107, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 104, 45, 62, 100, 105, 114, 116, 121, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 10, 118, 111, 105, 100, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 100, 101, 115, 116, 114, 111, 121, 40, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 104, 114, 101, 99, 41, 10, 123, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 114, 101, 99, 45, 62, 107, 101, 121, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 117, 101, 32, 41, 32, 102, 114, 101, 101, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 117, 101, 41, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 104, 114, 101, 99, 45, 62, 110, 107, 101, 121, 115, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 114, 101, 99, 45, 62, 107, 101, 121, 115, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 114, 101, 99, 45, 62, 107, 101, 121, 115, 41, 59, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 41, 59, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 114, 101, 99, 41, 59, 10, 125, 10, 10, 47, 47, 32, 67, 111, 112, 105, 101, 115, 32, 97, 108, 108, 32, 102, 105, 101, 108, 100, 115, 32, 101, 120, 99, 101, 112, 116, 32, 73, 68, 88, 46, 10, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 98, 99, 102, 95, 104, 114, 101, 99, 95, 100, 117, 112, 40, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 104, 114, 101, 99, 41, 10, 123, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 111, 117, 116, 32, 61, 32, 40, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 42, 41, 32, 99, 97, 108, 108, 111, 99, 40, 49, 44, 115, 105, 122, 101, 111, 102, 40, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 41, 41, 59, 10, 32, 32, 32, 32, 111, 117, 116, 45, 62, 116, 121, 112, 101, 32, 61, 32, 104, 114, 101, 99, 45, 62, 116, 121, 112, 101, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 104, 114, 101, 99, 45, 62, 107, 101, 121, 32, 41, 32, 111, 117, 116, 45, 62, 107, 101, 121, 32, 61, 32, 115, 116, 114, 100, 117, 112, 40, 104, 114, 101, 99, 45, 62, 107, 101, 121, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 117, 101, 32, 41, 32, 111, 117, 116, 45, 62, 118, 97, 108, 117, 101, 32, 61, 32, 115, 116, 114, 100, 117, 112, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 117, 101, 41, 59, 10, 32, 32, 32, 32, 111, 117, 116, 45, 62, 110, 107, 101, 121, 115, 32, 61, 32, 104, 114, 101, 99, 45, 62, 110, 107, 101, 121, 115, 59, 10, 32, 32, 32, 32, 111, 117, 116, 45, 62, 107, 101, 121, 115, 32, 61, 32, 40, 99, 104, 97, 114, 42, 42, 41, 32, 109, 97, 108, 108, 111, 99, 40, 115, 105, 122, 101, 111, 102, 40, 99, 104, 97, 114, 42, 41, 42, 104, 114, 101, 99, 45, 62, 110, 107, 101, 121, 115, 41, 59, 10, 32, 32, 32, 32, 111, 117, 116, 45, 62, 118, 97, 108, 115, 32, 61, 32, 40, 99, 104, 97, 114, 42, 42, 41, 32, 109, 97, 108, 108, 111, 99, 40, 115, 105, 122, 101, 111, 102, 40, 99, 104, 97, 114, 42, 41, 42, 104, 114, 101, 99, 45, 62, 110, 107, 101, 121, 115, 41, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 44, 32, 106, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 104, 114, 101, 99, 45, 62, 110, 107, 101, 121, 115, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 104, 114, 101, 99, 45, 62, 107, 101, 121, 115, 91, 105, 93, 32, 38, 38, 32, 33, 115, 116, 114, 99, 109, 112, 40, 34, 73, 68, 88, 34, 44, 104, 114, 101, 99, 45, 62, 107, 101, 121, 115, 91, 105, 93, 41, 32, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 104, 114, 101, 99, 45, 62, 107, 101, 121, 115, 91, 105, 93, 32, 41, 32, 111, 117, 116, 45, 62, 107, 101, 121, 115, 91, 106, 93, 32, 61, 32, 115, 116, 114, 100, 117, 112, 40, 104, 114, 101, 99, 45, 62, 107, 101, 121, 115, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 32, 41, 32, 111, 117, 116, 45, 62, 118, 97, 108, 115, 91, 106, 93, 32, 61, 32, 115, 116, 114, 100, 117, 112, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 43, 43, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 33, 61, 106, 32, 41, 32, 111, 117, 116, 45, 62, 110, 107, 101, 121, 115, 32, 45, 61, 32, 105, 45, 106, 59, 32, 32, 32, 47, 47, 32, 73, 68, 88, 32, 119, 97, 115, 32, 111, 109, 105, 116, 116, 101, 100, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 111, 117, 116, 59, 10, 125, 10, 10, 118, 111, 105, 100, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 100, 101, 98, 117, 103, 40, 70, 73, 76, 69, 32, 42, 102, 112, 44, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 104, 114, 101, 99, 41, 10, 123, 10, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 102, 112, 44, 32, 34, 107, 101, 121, 61, 91, 37, 115, 93, 32, 118, 97, 108, 117, 101, 61, 91, 37, 115, 93, 34, 44, 32, 104, 114, 101, 99, 45, 62, 107, 101, 121, 44, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 117, 101, 63, 104, 114, 101, 99, 45, 62, 118, 97, 108, 117, 101, 58, 34, 34, 41, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 104, 114, 101, 99, 45, 62, 110, 107, 101, 121, 115, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 102, 112, 44, 32, 34, 92, 116, 91, 37, 115, 93, 61, 91, 37, 115, 93, 34, 44, 32, 104, 114, 101, 99, 45, 62, 107, 101, 121, 115, 91, 105, 93, 44, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 102, 112, 44, 32, 34, 92, 110, 34, 41, 59, 10, 125, 10, 10, 118, 111, 105, 100, 32, 98, 99, 102, 95, 104, 101, 97, 100, 101, 114, 95, 100, 101, 98, 117, 103, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 44, 32, 106, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 104, 100, 114, 45, 62, 110, 104, 114, 101, 99, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 118, 97, 108, 117, 101, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 32, 34, 35, 35, 37, 115, 61, 60, 34, 44, 32, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 107, 101, 121, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 37, 115, 61, 37, 115, 34, 44, 32, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 107, 101, 121, 115, 91, 48, 93, 44, 32, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 118, 97, 108, 115, 91, 48, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 106, 61, 49, 59, 32, 106, 60, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 110, 107, 101, 121, 115, 59, 32, 106, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 44, 37, 115, 61, 37, 115, 34, 44, 32, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 107, 101, 121, 115, 91, 106, 93, 44, 32, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 118, 97, 108, 115, 91, 106, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 62, 92, 110, 34, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 35, 35, 37, 115, 61, 37, 115, 92, 110, 34, 44, 32, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 107, 101, 121, 44, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 118, 97, 108, 117, 101, 41, 59, 10, 32, 32, 32, 32, 125, 10, 125, 10, 10, 118, 111, 105, 100, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 97, 100, 100, 95, 107, 101, 121, 40, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 104, 114, 101, 99, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 115, 116, 114, 44, 32, 105, 110, 116, 32, 108, 101, 110, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 110, 32, 61, 32, 43, 43, 104, 114, 101, 99, 45, 62, 110, 107, 101, 121, 115, 59, 10, 32, 32, 32, 32, 104, 114, 101, 99, 45, 62, 107, 101, 121, 115, 32, 61, 32, 40, 99, 104, 97, 114, 42, 42, 41, 32, 114, 101, 97, 108, 108, 111, 99, 40, 104, 114, 101, 99, 45, 62, 107, 101, 121, 115, 44, 32, 115, 105, 122, 101, 111, 102, 40, 99, 104, 97, 114, 42, 41, 42, 110, 41, 59, 10, 32, 32, 32, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 32, 61, 32, 40, 99, 104, 97, 114, 42, 42, 41, 32, 114, 101, 97, 108, 108, 111, 99, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 44, 32, 115, 105, 122, 101, 111, 102, 40, 99, 104, 97, 114, 42, 41, 42, 110, 41, 59, 10, 32, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 32, 108, 101, 110, 32, 41, 59, 10, 32, 32, 32, 32, 104, 114, 101, 99, 45, 62, 107, 101, 121, 115, 91, 110, 45, 49, 93, 32, 61, 32, 40, 99, 104, 97, 114, 42, 41, 32, 109, 97, 108, 108, 111, 99, 40, 40, 108, 101, 110, 43, 49, 41, 42, 115, 105, 122, 101, 111, 102, 40, 99, 104, 97, 114, 41, 41, 59, 10, 32, 32, 32, 32, 109, 101, 109, 99, 112, 121, 40, 104, 114, 101, 99, 45, 62, 107, 101, 121, 115, 91, 110, 45, 49, 93, 44, 115, 116, 114, 44, 108, 101, 110, 41, 59, 10, 32, 32, 32, 32, 104, 114, 101, 99, 45, 62, 107, 101, 121, 115, 91, 110, 45, 49, 93, 91, 108, 101, 110, 93, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 110, 45, 49, 93, 32, 61, 32, 78, 85, 76, 76, 59, 10, 125, 10, 10, 118, 111, 105, 100, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 115, 101, 116, 95, 118, 97, 108, 40, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 104, 114, 101, 99, 44, 32, 105, 110, 116, 32, 105, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 115, 116, 114, 44, 32, 105, 110, 116, 32, 108, 101, 110, 44, 32, 105, 110, 116, 32, 105, 115, 95, 113, 117, 111, 116, 101, 100, 41, 10, 123, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 32, 41, 32, 123, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 32, 61, 32, 78, 85, 76, 76, 59, 32, 114, 101, 116, 117, 114, 110, 59, 32, 125, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 32, 41, 32, 102, 114, 101, 101, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 115, 95, 113, 117, 111, 116, 101, 100, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 32, 61, 32, 40, 99, 104, 97, 114, 42, 41, 32, 109, 97, 108, 108, 111, 99, 40, 40, 108, 101, 110, 43, 51, 41, 42, 115, 105, 122, 101, 111, 102, 40, 99, 104, 97, 114, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 91, 48, 93, 32, 61, 32, 39, 34, 39, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 101, 109, 99, 112, 121, 40, 38, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 91, 49, 93, 44, 115, 116, 114, 44, 108, 101, 110, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 91, 108, 101, 110, 43, 49, 93, 32, 61, 32, 39, 34, 39, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 91, 108, 101, 110, 43, 50, 93, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 32, 61, 32, 40, 99, 104, 97, 114, 42, 41, 32, 109, 97, 108, 108, 111, 99, 40, 40, 108, 101, 110, 43, 49, 41, 42, 115, 105, 122, 101, 111, 102, 40, 99, 104, 97, 114, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 101, 109, 99, 112, 121, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 44, 115, 116, 114, 44, 108, 101, 110, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 91, 108, 101, 110, 93, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 125, 10, 125, 10, 10, 118, 111, 105, 100, 32, 104, 114, 101, 99, 95, 97, 100, 100, 95, 105, 100, 120, 40, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 104, 114, 101, 99, 44, 32, 105, 110, 116, 32, 105, 100, 120, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 110, 32, 61, 32, 43, 43, 104, 114, 101, 99, 45, 62, 110, 107, 101, 121, 115, 59, 10, 32, 32, 32, 32, 104, 114, 101, 99, 45, 62, 107, 101, 121, 115, 32, 61, 32, 40, 99, 104, 97, 114, 42, 42, 41, 32, 114, 101, 97, 108, 108, 111, 99, 40, 104, 114, 101, 99, 45, 62, 107, 101, 121, 115, 44, 32, 115, 105, 122, 101, 111, 102, 40, 99, 104, 97, 114, 42, 41, 42, 110, 41, 59, 10, 32, 32, 32, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 32, 61, 32, 40, 99, 104, 97, 114, 42, 42, 41, 32, 114, 101, 97, 108, 108, 111, 99, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 44, 32, 115, 105, 122, 101, 111, 102, 40, 99, 104, 97, 114, 42, 41, 42, 110, 41, 59, 10, 32, 32, 32, 32, 104, 114, 101, 99, 45, 62, 107, 101, 121, 115, 91, 110, 45, 49, 93, 32, 61, 32, 115, 116, 114, 100, 117, 112, 40, 34, 73, 68, 88, 34, 41, 59, 10, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 115, 116, 114, 32, 61, 32, 123, 48, 44, 48, 44, 48, 125, 59, 10, 32, 32, 32, 32, 107, 112, 117, 116, 119, 40, 105, 100, 120, 44, 32, 38, 115, 116, 114, 41, 59, 10, 32, 32, 32, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 110, 45, 49, 93, 32, 61, 32, 115, 116, 114, 46, 115, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 102, 105, 110, 100, 95, 107, 101, 121, 40, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 104, 114, 101, 99, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 107, 101, 121, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 104, 114, 101, 99, 45, 62, 110, 107, 101, 121, 115, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 99, 97, 115, 101, 99, 109, 112, 40, 107, 101, 121, 44, 104, 114, 101, 99, 45, 62, 107, 101, 121, 115, 91, 105, 93, 41, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 105, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 125, 10, 10, 115, 116, 97, 116, 105, 99, 32, 105, 110, 108, 105, 110, 101, 32, 105, 110, 116, 32, 105, 115, 95, 101, 115, 99, 97, 112, 101, 100, 40, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 109, 105, 110, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 115, 116, 114, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 110, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 45, 45, 115, 116, 114, 62, 61, 109, 105, 110, 32, 38, 38, 32, 42, 115, 116, 114, 61, 61, 39, 92, 92, 39, 32, 41, 32, 110, 43, 43, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 37, 50, 59, 10, 125, 10, 10, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 98, 99, 102, 95, 104, 100, 114, 95, 112, 97, 114, 115, 101, 95, 108, 105, 110, 101, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 108, 105, 110, 101, 44, 32, 105, 110, 116, 32, 42, 108, 101, 110, 41, 10, 123, 10, 32, 32, 32, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 112, 32, 61, 32, 108, 105, 110, 101, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 112, 91, 48, 93, 32, 33, 61, 32, 39, 35, 39, 32, 124, 124, 32, 112, 91, 49, 93, 32, 33, 61, 32, 39, 35, 39, 41, 32, 123, 32, 42, 108, 101, 110, 32, 61, 32, 48, 59, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 32, 125, 10, 32, 32, 32, 32, 112, 32, 43, 61, 32, 50, 59, 10, 10, 32, 32, 32, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 113, 32, 61, 32, 112, 59, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 42, 113, 32, 38, 38, 32, 42, 113, 33, 61, 39, 61, 39, 32, 41, 32, 113, 43, 43, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 110, 32, 61, 32, 113, 45, 112, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 113, 33, 61, 39, 61, 39, 32, 124, 124, 32, 33, 110, 32, 41, 32, 123, 32, 42, 108, 101, 110, 32, 61, 32, 113, 45, 108, 105, 110, 101, 43, 49, 59, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 32, 125, 32, 47, 47, 32, 119, 114, 111, 110, 103, 32, 102, 111, 114, 109, 97, 116, 10, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 104, 114, 101, 99, 32, 61, 32, 40, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 42, 41, 32, 99, 97, 108, 108, 111, 99, 40, 49, 44, 115, 105, 122, 101, 111, 102, 40, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 41, 41, 59, 10, 32, 32, 32, 32, 104, 114, 101, 99, 45, 62, 107, 101, 121, 32, 61, 32, 40, 99, 104, 97, 114, 42, 41, 32, 109, 97, 108, 108, 111, 99, 40, 115, 105, 122, 101, 111, 102, 40, 99, 104, 97, 114, 41, 42, 40, 110, 43, 49, 41, 41, 59, 10, 32, 32, 32, 32, 109, 101, 109, 99, 112, 121, 40, 104, 114, 101, 99, 45, 62, 107, 101, 121, 44, 112, 44, 110, 41, 59, 10, 32, 32, 32, 32, 104, 114, 101, 99, 45, 62, 107, 101, 121, 91, 110, 93, 32, 61, 32, 48, 59, 10, 10, 32, 32, 32, 32, 112, 32, 61, 32, 43, 43, 113, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 112, 33, 61, 39, 60, 39, 32, 41, 32, 47, 47, 32, 103, 101, 110, 101, 114, 105, 99, 32, 102, 105, 101, 108, 100, 44, 32, 101, 46, 103, 46, 32, 35, 35, 115, 97, 109, 116, 111, 111, 108, 115, 86, 101, 114, 115, 105, 111, 110, 61, 48, 46, 49, 46, 49, 56, 45, 114, 53, 55, 57, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 42, 113, 32, 38, 38, 32, 42, 113, 33, 61, 39, 92, 110, 39, 32, 41, 32, 113, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 117, 101, 32, 61, 32, 40, 99, 104, 97, 114, 42, 41, 32, 109, 97, 108, 108, 111, 99, 40, 40, 113, 45, 112, 43, 49, 41, 42, 115, 105, 122, 101, 111, 102, 40, 99, 104, 97, 114, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 101, 109, 99, 112, 121, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 117, 101, 44, 32, 112, 44, 32, 113, 45, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 117, 101, 91, 113, 45, 112, 93, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 42, 108, 101, 110, 32, 61, 32, 113, 45, 108, 105, 110, 101, 43, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 104, 114, 101, 99, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 47, 47, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 100, 32, 108, 105, 110, 101, 44, 32, 101, 46, 103, 46, 10, 32, 32, 32, 32, 47, 47, 32, 35, 35, 73, 78, 70, 79, 61, 60, 73, 68, 61, 80, 86, 49, 44, 78, 117, 109, 98, 101, 114, 61, 49, 44, 84, 121, 112, 101, 61, 70, 108, 111, 97, 116, 44, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, 34, 80, 45, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 98, 97, 115, 101, 81, 32, 98, 105, 97, 115, 34, 62, 10, 32, 32, 32, 32, 47, 47, 32, 35, 35, 80, 69, 68, 73, 71, 82, 69, 69, 61, 60, 78, 97, 109, 101, 95, 48, 61, 71, 48, 45, 73, 68, 44, 78, 97, 109, 101, 95, 49, 61, 71, 49, 45, 73, 68, 44, 78, 97, 109, 101, 95, 51, 61, 71, 78, 45, 73, 68, 62, 10, 32, 32, 32, 32, 105, 110, 116, 32, 110, 111, 112, 101, 110, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 42, 113, 32, 38, 38, 32, 42, 113, 33, 61, 39, 92, 110, 39, 32, 38, 38, 32, 110, 111, 112, 101, 110, 62, 48, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 32, 61, 32, 43, 43, 113, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 42, 113, 32, 38, 38, 32, 42, 113, 61, 61, 39, 32, 39, 32, 41, 32, 123, 32, 112, 43, 43, 59, 32, 113, 43, 43, 59, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 94, 91, 65, 45, 90, 97, 45, 122, 95, 93, 91, 48, 45, 57, 65, 45, 90, 97, 45, 122, 95, 46, 93, 42, 36, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 112, 61, 61, 113, 32, 38, 38, 32, 42, 113, 32, 38, 38, 32, 40, 105, 115, 97, 108, 112, 104, 97, 40, 42, 113, 41, 32, 124, 124, 32, 42, 113, 61, 61, 39, 95, 39, 41, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 113, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 42, 113, 32, 38, 38, 32, 40, 105, 115, 97, 108, 110, 117, 109, 40, 42, 113, 41, 32, 124, 124, 32, 42, 113, 61, 61, 39, 95, 39, 32, 124, 124, 32, 42, 113, 61, 61, 39, 46, 39, 41, 32, 41, 32, 113, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 110, 32, 61, 32, 113, 45, 112, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 109, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 42, 113, 32, 38, 38, 32, 42, 113, 61, 61, 39, 32, 39, 32, 41, 32, 123, 32, 113, 43, 43, 59, 32, 109, 43, 43, 59, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 113, 33, 61, 39, 61, 39, 32, 124, 124, 32, 33, 110, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 119, 114, 111, 110, 103, 32, 102, 111, 114, 109, 97, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 42, 113, 32, 38, 38, 32, 42, 113, 33, 61, 39, 92, 110, 39, 32, 41, 32, 113, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 116, 109, 112, 32, 61, 32, 123, 48, 44, 48, 44, 48, 125, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 110, 40, 108, 105, 110, 101, 44, 113, 45, 108, 105, 110, 101, 44, 38, 116, 109, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 112, 97, 114, 115, 101, 32, 116, 104, 101, 32, 104, 101, 97, 100, 101, 114, 32, 108, 105, 110, 101, 58, 32, 92, 34, 37, 115, 92, 34, 92, 110, 34, 44, 32, 116, 109, 112, 46, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 116, 109, 112, 46, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 42, 108, 101, 110, 32, 61, 32, 113, 45, 108, 105, 110, 101, 43, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 100, 101, 115, 116, 114, 111, 121, 40, 104, 114, 101, 99, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 97, 100, 100, 95, 107, 101, 121, 40, 104, 114, 101, 99, 44, 32, 112, 44, 32, 113, 45, 112, 45, 109, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 32, 61, 32, 43, 43, 113, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 42, 113, 32, 38, 38, 32, 42, 113, 61, 61, 39, 32, 39, 32, 41, 32, 123, 32, 112, 43, 43, 59, 32, 113, 43, 43, 59, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 113, 117, 111, 116, 101, 100, 32, 61, 32, 42, 112, 61, 61, 39, 34, 39, 32, 63, 32, 49, 32, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 113, 117, 111, 116, 101, 100, 32, 41, 32, 112, 43, 43, 44, 32, 113, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 42, 113, 32, 38, 38, 32, 42, 113, 32, 33, 61, 32, 39, 92, 110, 39, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 113, 117, 111, 116, 101, 100, 32, 41, 32, 123, 32, 105, 102, 32, 40, 32, 42, 113, 61]);
fileData0.push.apply(fileData0, [61, 39, 34, 39, 32, 38, 38, 32, 33, 105, 115, 95, 101, 115, 99, 97, 112, 101, 100, 40, 112, 44, 113, 41, 32, 41, 32, 98, 114, 101, 97, 107, 59, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 113, 61, 61, 39, 60, 39, 32, 41, 32, 110, 111, 112, 101, 110, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 113, 61, 61, 39, 62, 39, 32, 41, 32, 110, 111, 112, 101, 110, 45, 45, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 110, 111, 112, 101, 110, 32, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 113, 61, 61, 39, 44, 39, 32, 38, 38, 32, 110, 111, 112, 101, 110, 61, 61, 49, 32, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 113, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 114, 32, 61, 32, 113, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 114, 32, 62, 32, 112, 32, 38, 38, 32, 114, 91, 45, 49, 93, 32, 61, 61, 32, 39, 32, 39, 32, 41, 32, 114, 45, 45, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 115, 101, 116, 95, 118, 97, 108, 40, 104, 114, 101, 99, 44, 32, 104, 114, 101, 99, 45, 62, 110, 107, 101, 121, 115, 45, 49, 44, 32, 112, 44, 32, 114, 45, 112, 44, 32, 113, 117, 111, 116, 101, 100, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 113, 117, 111, 116, 101, 100, 32, 38, 38, 32, 42, 113, 61, 61, 39, 34, 39, 32, 41, 32, 113, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 113, 61, 61, 39, 62, 39, 32, 41, 32, 123, 32, 110, 111, 112, 101, 110, 45, 45, 59, 32, 113, 43, 43, 59, 32, 125, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 47, 47, 32, 83, 107, 105, 112, 32, 116, 114, 97, 105, 108, 105, 110, 103, 32, 115, 112, 97, 99, 101, 115, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 42, 113, 32, 38, 38, 32, 42, 113, 61, 61, 39, 32, 39, 32, 41, 32, 123, 32, 113, 43, 43, 59, 32, 125, 10, 10, 32, 32, 32, 32, 42, 108, 101, 110, 32, 61, 32, 113, 45, 108, 105, 110, 101, 43, 49, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 104, 114, 101, 99, 59, 10, 125, 10, 10, 115, 116, 97, 116, 105, 99, 32, 105, 110, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 115, 101, 116, 95, 105, 100, 120, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 105, 110, 116, 32, 100, 105, 99, 116, 95, 116, 121, 112, 101, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 116, 97, 103, 44, 32, 98, 99, 102, 95, 105, 100, 105, 110, 102, 111, 95, 116, 32, 42, 105, 100, 105, 110, 102, 111, 41, 10, 123, 10, 32, 32, 32, 32, 47, 47, 32, 73, 102, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 44, 32, 112, 114, 101, 115, 101, 114, 118, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 73, 68, 88, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 100, 105, 110, 102, 111, 45, 62, 105, 100, 61, 61, 45, 49, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 105, 110, 102, 111, 45, 62, 105, 100, 32, 61, 32, 104, 100, 114, 45, 62, 110, 91, 100, 105, 99, 116, 95, 116, 121, 112, 101, 93, 43, 43, 59, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 105, 100, 105, 110, 102, 111, 45, 62, 105, 100, 32, 60, 32, 104, 100, 114, 45, 62, 110, 91, 100, 105, 99, 116, 95, 116, 121, 112, 101, 93, 32, 38, 38, 32, 104, 100, 114, 45, 62, 105, 100, 91, 100, 105, 99, 116, 95, 116, 121, 112, 101, 93, 91, 105, 100, 105, 110, 102, 111, 45, 62, 105, 100, 93, 46, 107, 101, 121, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 91, 37, 115, 58, 37, 100, 32, 37, 115, 93, 32, 67, 111, 110, 102, 108, 105, 99, 116, 105, 110, 103, 32, 73, 68, 88, 61, 37, 100, 32, 108, 105, 110, 101, 115, 32, 105, 110, 32, 116, 104, 101, 32, 104, 101, 97, 100, 101, 114, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 44, 32, 116, 104, 101, 32, 110, 101, 119, 32, 116, 97, 103, 32, 105, 115, 32, 37, 115, 92, 110, 34, 44, 32, 95, 95, 70, 73, 76, 69, 95, 95, 44, 95, 95, 76, 73, 78, 69, 95, 95, 44, 95, 95, 70, 85, 78, 67, 84, 73, 79, 78, 95, 95, 44, 32, 105, 100, 105, 110, 102, 111, 45, 62, 105, 100, 44, 32, 116, 97, 103, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 105, 116, 40, 49, 41, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 100, 105, 110, 102, 111, 45, 62, 105, 100, 32, 62, 61, 32, 104, 100, 114, 45, 62, 110, 91, 100, 105, 99, 116, 95, 116, 121, 112, 101, 93, 32, 41, 32, 104, 100, 114, 45, 62, 110, 91, 100, 105, 99, 116, 95, 116, 121, 112, 101, 93, 32, 61, 32, 105, 100, 105, 110, 102, 111, 45, 62, 105, 100, 43, 49, 59, 10, 32, 32, 32, 32, 104, 116, 115, 95, 101, 120, 112, 97, 110, 100, 48, 40, 98, 99, 102, 95, 105, 100, 112, 97, 105, 114, 95, 116, 44, 104, 100, 114, 45, 62, 110, 91, 100, 105, 99, 116, 95, 116, 121, 112, 101, 93, 44, 104, 100, 114, 45, 62, 109, 91, 100, 105, 99, 116, 95, 116, 121, 112, 101, 93, 44, 104, 100, 114, 45, 62, 105, 100, 91, 100, 105, 99, 116, 95, 116, 121, 112, 101, 93, 41, 59, 10, 10, 32, 32, 32, 32, 47, 47, 32, 78, 66, 58, 32, 116, 104, 101, 32, 110, 101, 120, 116, 32, 107, 104, 95, 112, 117, 116, 32, 99, 97, 108, 108, 32, 99, 97, 110, 32, 105, 110, 118, 97, 108, 105, 100, 97, 116, 101, 32, 116, 104, 101, 32, 105, 100, 105, 110, 102, 111, 32, 112, 111, 105, 110, 116, 101, 114, 44, 32, 116, 104, 101, 114, 101, 102, 111, 114, 101, 10, 32, 32, 32, 32, 47, 47, 32, 119, 101, 32, 108, 101, 97, 118, 101, 32, 105, 116, 32, 117, 110, 97, 115, 115, 105, 103, 110, 101, 100, 32, 104, 101, 114, 101, 46, 32, 73, 116, 32, 109, 121, 115, 116, 32, 98, 101, 32, 115, 101, 116, 32, 101, 120, 112, 108, 105, 99, 105, 116, 108, 121, 32, 105, 110, 32, 98, 99, 102, 95, 104, 100, 114, 95, 115, 121, 110, 99, 46, 10, 32, 32, 32, 32, 104, 100, 114, 45, 62, 105, 100, 91, 100, 105, 99, 116, 95, 116, 121, 112, 101, 93, 91, 105, 100, 105, 110, 102, 111, 45, 62, 105, 100, 93, 46, 107, 101, 121, 32, 61, 32, 116, 97, 103, 59, 10, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 10, 47, 47, 32, 114, 101, 116, 117, 114, 110, 115, 58, 32, 49, 32, 119, 104, 101, 110, 32, 104, 100, 114, 32, 110, 101, 101, 100, 115, 32, 116, 111, 32, 98, 101, 32, 115, 121, 110, 99, 101, 100, 44, 32, 48, 32, 111, 116, 104, 101, 114, 119, 105, 115, 101, 10, 105, 110, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 114, 101, 103, 105, 115, 116, 101, 114, 95, 104, 114, 101, 99, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 104, 114, 101, 99, 41, 10, 123, 10, 32, 32, 32, 32, 47, 47, 32, 99, 111, 110, 116, 105, 103, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 44, 106, 44, 32, 114, 101, 116, 59, 10, 32, 32, 32, 32, 107, 104, 105, 110, 116, 95, 116, 32, 107, 59, 10, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 115, 116, 114, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 114, 101, 99, 45, 62, 107, 101, 121, 44, 32, 34, 99, 111, 110, 116, 105, 103, 34, 41, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 114, 101, 99, 45, 62, 116, 121, 112, 101, 32, 61, 32, 66, 67, 70, 95, 72, 76, 95, 67, 84, 71, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 71, 101, 116, 32, 116, 104, 101, 32, 99, 111, 110, 116, 105, 103, 32, 73, 68, 32, 40, 36, 115, 116, 114, 41, 32, 97, 110, 100, 32, 108, 101, 110, 103, 116, 104, 32, 40, 36, 106, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 32, 61, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 102, 105, 110, 100, 95, 107, 101, 121, 40, 104, 114, 101, 99, 44, 34, 108, 101, 110, 103, 116, 104, 34, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 60, 48, 32, 41, 32, 106, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 115, 115, 99, 97, 110, 102, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 44, 34, 37, 100, 34, 44, 38, 106, 41, 33, 61, 49, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 32, 61, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 102, 105, 110, 100, 95, 107, 101, 121, 40, 104, 114, 101, 99, 44, 34, 73, 68, 34, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 60, 48, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 114, 32, 61, 32, 115, 116, 114, 100, 117, 112, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 41, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 82, 101, 103, 105, 115, 116, 101, 114, 32, 105, 110, 32, 116, 104, 101, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 100, 105, 99, 116, 95, 116, 32, 42, 100, 32, 61, 32, 40, 118, 100, 105, 99, 116, 95, 116, 42, 41, 104, 100, 114, 45, 62, 100, 105, 99, 116, 91, 66, 67, 70, 95, 68, 84, 95, 67, 84, 71, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 105, 110, 116, 95, 116, 32, 107, 32, 61, 32, 107, 104, 95, 103, 101, 116, 40, 118, 100, 105, 99, 116, 44, 32, 100, 44, 32, 115, 116, 114, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 107, 32, 33, 61, 32, 107, 104, 95, 101, 110, 100, 40, 100, 41, 32, 41, 32, 123, 32, 102, 114, 101, 101, 40, 115, 116, 114, 41, 59, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 32, 125, 32, 32, 32, 32, 47, 47, 32, 97, 108, 114, 101, 97, 100, 121, 32, 112, 114, 101, 115, 101, 110, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 32, 61, 32, 107, 104, 95, 112, 117, 116, 40, 118, 100, 105, 99, 116, 44, 32, 100, 44, 32, 115, 116, 114, 44, 32, 38, 114, 101, 116, 41, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 105, 100, 120, 32, 61, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 102, 105, 110, 100, 95, 107, 101, 121, 40, 104, 114, 101, 99, 44, 34, 73, 68, 88, 34, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 100, 120, 33, 61, 45, 49, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 116, 109, 112, 32, 61, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 100, 120, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 120, 32, 61, 32, 115, 116, 114, 116, 111, 108, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 100, 120, 93, 44, 32, 38, 116, 109, 112, 44, 32, 49, 48, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 116, 109, 112, 32, 124, 124, 32, 105, 100, 120, 32, 60, 32, 48, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 91, 37, 115, 58, 37, 100, 32, 37, 115, 93, 32, 69, 114, 114, 111, 114, 32, 112, 97, 114, 115, 105, 110, 103, 32, 116, 104, 101, 32, 73, 68, 88, 32, 116, 97, 103, 44, 32, 115, 107, 105, 112, 112, 105, 110, 103, 46, 92, 110, 34, 44, 32, 95, 95, 70, 73, 76, 69, 95, 95, 44, 95, 95, 76, 73, 78, 69, 95, 95, 44, 95, 95, 70, 85, 78, 67, 84, 73, 79, 78, 95, 95, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 32, 61, 32, 98, 99, 102, 95, 105, 100, 105, 110, 102, 111, 95, 100, 101, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 46, 105, 100, 32, 61, 32, 105, 100, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 46, 105, 110, 102, 111, 91, 48, 93, 32, 61, 32, 106, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 46, 104, 114, 101, 99, 91, 48, 93, 32, 61, 32, 104, 114, 101, 99, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 115, 101, 116, 95, 105, 100, 120, 40, 104, 100, 114, 44, 32, 66, 67, 70, 95, 68, 84, 95, 67, 84, 71, 44, 32, 107, 104, 95, 107, 101, 121, 40, 100, 44, 107, 41, 44, 32, 38, 107, 104, 95, 118, 97, 108, 40, 100, 44, 107, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 100, 120, 61, 61, 45, 49, 32, 41, 32, 104, 114, 101, 99, 95, 97, 100, 100, 95, 105, 100, 120, 40, 104, 114, 101, 99, 44, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 107, 41, 46, 105, 100, 41, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 49, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 114, 101, 99, 45, 62, 107, 101, 121, 44, 32, 34, 73, 78, 70, 79, 34, 41, 32, 41, 32, 104, 114, 101, 99, 45, 62, 116, 121, 112, 101, 32, 61, 32, 66, 67, 70, 95, 72, 76, 95, 73, 78, 70, 79, 59, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 114, 101, 99, 45, 62, 107, 101, 121, 44, 32, 34, 70, 73, 76, 84, 69, 82, 34, 41, 32, 41, 32, 104, 114, 101, 99, 45, 62, 116, 121, 112, 101, 32, 61, 32, 66, 67, 70, 95, 72, 76, 95, 70, 76, 84, 59, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 114, 101, 99, 45, 62, 107, 101, 121, 44, 32, 34, 70, 79, 82, 77, 65, 84, 34, 41, 32, 41, 32, 104, 114, 101, 99, 45, 62, 116, 121, 112, 101, 32, 61, 32, 66, 67, 70, 95, 72, 76, 95, 70, 77, 84, 59, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 104, 114, 101, 99, 45, 62, 110, 107, 101, 121, 115, 62, 48, 32, 41, 32, 123, 32, 104, 114, 101, 99, 45, 62, 116, 121, 112, 101, 32, 61, 32, 66, 67, 70, 95, 72, 76, 95, 83, 84, 82, 59, 32, 114, 101, 116, 117, 114, 110, 32, 49, 59, 32, 125, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 10, 32, 32, 32, 32, 47, 47, 32, 73, 78, 70, 79, 47, 70, 73, 76, 84, 69, 82, 47, 70, 79, 82, 77, 65, 84, 10, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 105, 100, 32, 61, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 116, 121, 112, 101, 32, 61, 32, 45, 49, 44, 32, 110, 117, 109, 32, 61, 32, 45, 49, 44, 32, 118, 97, 114, 32, 61, 32, 45, 49, 44, 32, 105, 100, 120, 32, 61, 32, 45, 49, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 104, 114, 101, 99, 45, 62, 110, 107, 101, 121, 115, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 114, 101, 99, 45, 62, 107, 101, 121, 115, 91, 105, 93, 44, 32, 34, 73, 68, 34, 41, 32, 41, 32, 105, 100, 32, 61, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 114, 101, 99, 45, 62, 107, 101, 121, 115, 91, 105, 93, 44, 32, 34, 73, 68, 88, 34, 41, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 116, 109, 112, 32, 61, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 120, 32, 61, 32, 115, 116, 114, 116, 111, 108, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 44, 32, 38, 116, 109, 112, 44, 32, 49, 48, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 116, 109, 112, 32, 124, 124, 32, 105, 100, 120, 32, 60, 32, 48, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 91, 37, 115, 58, 37, 100, 32, 37, 115, 93, 32, 69, 114, 114, 111, 114, 32, 112, 97, 114, 115, 105, 110, 103, 32, 116, 104, 101, 32, 73, 68, 88, 32, 116, 97, 103, 44, 32, 115, 107, 105, 112, 112, 105, 110, 103, 46, 92, 110, 34, 44, 32, 95, 95, 70, 73, 76, 69, 95, 95, 44, 95, 95, 76, 73, 78, 69, 95, 95, 44, 95, 95, 70, 85, 78, 67, 84, 73, 79, 78, 95, 95, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 114, 101, 99, 45, 62, 107, 101, 121, 115, 91, 105, 93, 44, 32, 34, 84, 121, 112, 101, 34, 41, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 44, 32, 34, 73, 110, 116, 101, 103, 101, 114, 34, 41, 32, 41, 32, 116, 121, 112, 101, 32, 61, 32, 66, 67, 70, 95, 72, 84, 95, 73, 78, 84, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 44, 32, 34, 70, 108, 111, 97, 116, 34, 41, 32, 41, 32, 116, 121, 112, 101, 32, 61, 32, 66, 67, 70, 95, 72, 84, 95, 82, 69, 65, 76, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 44, 32, 34, 83, 116, 114, 105, 110, 103, 34, 41, 32, 41, 32, 116, 121, 112, 101, 32, 61, 32, 66, 67, 70, 95, 72, 84, 95, 83, 84, 82, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 44, 32, 34, 67, 104, 97, 114, 97, 99, 116, 101, 114, 34, 41, 32, 41, 32, 116, 121, 112, 101, 32, 61, 32, 66, 67, 70, 95, 72, 84, 95, 83, 84, 82, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 44, 32, 34, 70, 108, 97, 103, 34, 41, 32, 41, 32, 116, 121, 112, 101, 32, 61, 32, 66, 67, 70, 95, 72, 84, 95, 70, 76, 65, 71, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 104, 116, 115, 95, 118, 101, 114, 98, 111, 115, 101, 32, 62, 61, 32, 50, 41, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 32, 34, 91, 69, 58, 58, 37, 115, 93, 32, 84, 104, 101, 32, 116, 121, 112, 101, 32, 92, 34, 37, 115, 92, 34, 32, 105, 115, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 44, 32, 97, 115, 115, 117, 109, 105, 110, 103, 32, 92, 34, 83, 116, 114, 105, 110, 103, 92, 34, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 44, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 66, 67, 70, 95, 72, 84, 95, 83, 84, 82, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 114, 101, 99, 45, 62, 107, 101, 121, 115, 91, 105, 93, 44, 32, 34, 78, 117, 109, 98, 101, 114, 34, 41, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 44, 34, 65, 34, 41, 32, 41, 32, 118, 97, 114, 32, 61, 32, 66, 67, 70, 95, 86, 76, 95, 65, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 44, 34, 82, 34, 41, 32, 41, 32, 118, 97, 114, 32, 61, 32, 66, 67, 70, 95, 86, 76, 95, 82, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 44, 34, 71, 34, 41, 32, 41, 32, 118, 97, 114, 32, 61, 32, 66, 67, 70, 95, 86, 76, 95, 71, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 44, 34, 46, 34, 41, 32, 41, 32, 118, 97, 114, 32, 61, 32, 66, 67, 70, 95, 86, 76, 95, 86, 65, 82, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 115, 99, 97, 110, 102, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 105, 93, 44, 34, 37, 100, 34, 44, 38, 110, 117, 109, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 61, 32, 66, 67, 70, 95, 86, 76, 95, 70, 73, 88, 69, 68, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 118, 97, 114, 32, 33, 61, 32, 66, 67, 70, 95, 86, 76, 95, 70, 73, 88, 69, 68, 41, 32, 110, 117, 109, 32, 61, 32, 48, 120, 102, 102, 102, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 117, 105, 110, 116, 51, 50, 95, 116, 32, 105, 110, 102, 111, 32, 61, 32, 40, 117, 105, 110, 116, 51, 50, 95, 116, 41, 110, 117, 109, 60, 60, 49, 50, 32, 124, 32, 118, 97, 114, 60, 60, 56, 32, 124, 32, 116, 121, 112, 101, 60, 60, 52, 32, 124, 32, 104, 114, 101, 99, 45, 62, 116, 121, 112, 101, 59, 10, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 105, 100, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 32, 32, 32, 32, 115, 116, 114, 32, 61, 32, 115, 116, 114, 100, 117, 112, 40, 105, 100, 41, 59, 10, 10, 32, 32, 32, 32, 118, 100, 105, 99, 116, 95, 116, 32, 42, 100, 32, 61, 32, 40, 118, 100, 105, 99, 116, 95, 116, 42, 41, 104, 100, 114, 45, 62, 100, 105, 99, 116, 91, 66, 67, 70, 95, 68, 84, 95, 73, 68, 93, 59, 10, 32, 32, 32, 32, 107, 32, 61, 32, 107, 104, 95, 103, 101, 116, 40, 118, 100, 105, 99, 116, 44, 32, 100, 44, 32, 115, 116, 114, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 107, 32, 33, 61, 32, 107, 104, 95, 101, 110, 100, 40, 100, 41, 32, 41, 32, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 97, 108, 114, 101, 97, 100, 121, 32, 112, 114, 101, 115, 101, 110, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 115, 116, 114, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 46, 104, 114, 101, 99, 91, 105, 110, 102, 111, 38, 48, 120, 102, 93, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 46, 105, 110, 102, 111, 91, 105, 110, 102, 111, 38, 48, 120, 102, 93, 32, 61, 32, 105, 110, 102, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 46, 104, 114, 101, 99, 91, 105, 110, 102, 111, 38, 48, 120, 102, 93, 32, 61, 32, 104, 114, 101, 99, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 100, 120, 61, 61, 45, 49, 32, 41, 32, 104, 114, 101, 99, 95, 97, 100, 100, 95, 105, 100, 120, 40, 104, 114, 101, 99, 44, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 46, 105, 100, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 49, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 107, 32, 61, 32, 107, 104, 95, 112, 117, 116, 40, 118, 100, 105, 99, 116, 44, 32, 100, 44, 32, 115, 116, 114, 44, 32, 38, 114, 101, 116, 41, 59, 10, 32, 32, 32, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 32, 61, 32, 98, 99, 102, 95, 105, 100, 105, 110, 102, 111, 95, 100, 101, 102, 59, 10, 32, 32, 32, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 46, 105, 110, 102, 111, 91, 105, 110, 102, 111, 38, 48, 120, 102, 93, 32, 61, 32, 105, 110, 102, 111, 59, 10, 32, 32, 32, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 46, 104, 114, 101, 99, 91, 105, 110, 102, 111, 38, 48, 120, 102, 93, 32, 61, 32, 104, 114, 101, 99, 59, 10, 32, 32, 32, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 46, 105, 100, 32, 61, 32, 105, 100, 120, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 115, 101, 116, 95, 105, 100, 120, 40, 104, 100, 114, 44, 32, 66, 67, 70, 95, 68, 84, 95, 73, 68, 44, 32, 107, 104, 95, 107, 101, 121, 40, 100, 44, 107, 41, 44, 32, 38, 107, 104, 95, 118, 97, 108, 40, 100, 44, 107, 41, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 100, 120, 61, 61, 45, 49, 32, 41, 32, 104, 114, 101, 99, 95, 97, 100, 100, 95, 105, 100, 120, 40, 104, 114, 101, 99, 44, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 107, 41, 46, 105, 100, 41, 59, 10, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 49, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 100, 100, 95, 104, 114, 101, 99, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 104, 114, 101, 99, 41, 10, 123, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 104, 114, 101, 99, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 10, 32, 32, 32, 32, 104, 114, 101, 99, 45, 62, 116, 121, 112, 101, 32, 61, 32, 66, 67, 70, 95, 72, 76, 95, 71, 69, 78, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 98, 99, 102, 95, 104, 100, 114, 95, 114, 101, 103, 105, 115, 116, 101, 114, 95, 104, 114, 101, 99, 40, 104, 100, 114, 44, 104, 114, 101, 99, 41, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 73, 102, 32, 111, 110, 101, 32, 111, 102, 32, 116, 104, 101, 32, 104, 97, 115, 104, 101, 100, 32, 102, 105, 101, 108, 100, 44, 32, 116, 104, 101, 110, 32, 105, 116, 32, 105, 115, 32, 97, 108, 114, 101, 97, 100, 121, 32, 112, 114, 101, 115, 101, 110, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 104, 114, 101, 99, 45, 62, 116, 121, 112, 101, 32, 33, 61, 32, 66, 67, 70, 95, 72, 76, 95, 71, 69, 78, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 100, 101, 115, 116, 114, 111, 121, 40, 104, 114, 101, 99, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 73, 115, 32, 111, 110, 101, 32, 111, 102, 32, 116, 104, 101, 32, 103, 101, 110, 101, 114, 105, 99, 32, 102, 105, 101, 108, 100, 115, 32, 97, 110, 100, 32, 97, 108, 114, 101, 97, 100, 121, 32, 112, 114, 101, 115, 101, 110, 116, 63, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 104, 100, 114, 45, 62, 110, 104, 114, 101, 99, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 116, 121, 112, 101, 33, 61, 66, 67, 70, 95, 72, 76, 95, 71, 69, 78, 32, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 107, 101, 121, 44, 104, 114, 101, 99, 45, 62, 107, 101, 121, 41, 32, 38, 38, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 114, 101, 99, 45, 62, 107, 101, 121, 44, 34, 102, 105, 108, 101, 102, 111, 114, 109, 97, 116, 34, 41, 32, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 107, 101, 121, 44, 104, 114, 101, 99, 45, 62, 107, 101, 121, 41, 32, 38, 38, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 118, 97, 108, 117, 101, 44, 104, 114, 101, 99, 45, 62, 118, 97, 108, 117, 101, 41, 32, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 60, 104, 100, 114, 45, 62, 110, 104, 114, 101, 99, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 100, 101, 115, 116, 114, 111, 121, 40, 104, 114, 101, 99, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 47, 47, 32, 78, 101, 119, 32, 114, 101, 99, 111, 114, 100, 44, 32, 110, 101, 101, 100, 115, 32, 116, 111, 32, 98, 101, 32, 97, 100, 100, 101, 100, 10, 32, 32, 32, 32, 105, 110, 116, 32, 110, 32, 61, 32, 43, 43, 104, 100, 114, 45, 62, 110, 104, 114, 101, 99, 59, 10, 32, 32, 32, 32, 104, 100, 114, 45, 62, 104, 114, 101, 99, 32, 61, 32, 40, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 42, 42, 41, 32, 114, 101, 97, 108, 108, 111, 99, 40, 104, 100, 114, 45, 62, 104, 114, 101, 99, 44, 32, 110, 42, 115, 105, 122, 101, 111, 102, 40, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 42, 41, 41, 59, 10, 32, 32, 32, 32, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 110, 45, 49, 93, 32, 61, 32, 104, 114, 101, 99, 59, 10, 32, 32, 32, 32, 104, 100, 114, 45, 62, 100, 105, 114, 116, 121, 32, 61, 32, 49, 59, 10, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 104, 114, 101, 99, 45, 62, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 71, 69, 78, 32, 63, 32, 48, 32, 58, 32, 49, 59, 10, 125, 10, 10, 47, 42, 10, 32, 42, 32, 32, 78, 111, 116, 101, 32, 116, 104, 97, 116, 32, 119, 104, 105, 108, 101, 32, 113, 117, 101, 114, 121, 105, 110, 103, 32, 111, 102, 32, 70, 76, 84, 44, 73, 78, 70, 79, 44, 70, 77, 84, 44, 67, 84, 71, 32, 108, 105, 110, 101, 115, 32, 105, 115, 32, 102, 97, 115, 116, 32, 40, 116, 104, 101, 32, 107, 101, 121, 115, 32, 97, 114, 101, 32, 104, 97, 115, 104, 101, 100, 41, 44, 10, 32, 42, 32, 32, 116, 104, 101, 32, 83, 84, 82, 44, 71, 69, 78, 32, 108, 105, 110, 101, 115, 32, 97, 114, 101, 32, 115, 101, 97, 114, 99, 104, 101, 100, 32, 102, 111, 114, 32, 108, 105, 110, 101, 97, 114, 108, 121, 32, 105, 110, 32, 97, 32, 108, 105, 110, 107, 101, 100, 32, 108, 105, 115, 116, 32, 111, 102, 32, 97, 108, 108, 32, 104, 101, 97, 100, 101, 114, 32, 108, 105, 110, 101, 115, 46, 10, 32, 42, 32, 32, 84, 104, 105, 115, 32, 109, 97, 121, 32, 98, 101, 99, 111, 109, 101, 32, 97, 32, 112, 114, 111, 98, 108, 101, 109, 32, 102, 111, 114, 32, 86, 67, 70, 115, 32, 119, 105, 116, 104, 32, 104, 117, 103, 101, 32, 104, 101, 97, 100, 101, 114, 115, 44, 32, 119, 101, 32, 109, 105, 103, 104, 116, 32, 110, 101, 101, 100, 32, 116, 111, 32, 98, 117, 105, 108, 100, 32, 97, 10, 32, 42, 32, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 32, 102, 111, 114, 32, 116, 104, 101, 115, 101, 32, 108, 105, 110, 101, 115, 32, 97, 115, 32, 119, 101, 108, 108, 46, 10, 32, 42, 47, 10, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 98, 99, 102, 95, 104, 100, 114, 95, 103, 101, 116, 95, 104, 114, 101, 99, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 105, 110, 116, 32, 116, 121, 112, 101, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 107, 101, 121, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 118, 97, 108, 117, 101, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 115, 116, 114, 95, 99, 108, 97, 115, 115, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 71, 69, 78, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 104, 100, 114, 45, 62, 110, 104, 114, 101, 99, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 116, 121, 112, 101, 33, 61, 116, 121, 112, 101, 32, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 115, 116, 114, 99, 109, 112, 40, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 107, 101, 121, 44, 107, 101, 121, 41, 32, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 118, 97, 108, 117, 101, 32, 124, 124, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 118, 97, 108, 117, 101, 44, 118, 97, 108, 117, 101, 41, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 83, 84, 82, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 104, 100, 114, 45, 62, 110, 104, 114, 101, 99, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 116, 121, 112, 101, 33, 61, 116, 121, 112, 101, 32, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 115, 116, 114, 99, 109, 112, 40, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 107, 101, 121, 44, 115, 116, 114, 95, 99, 108, 97, 115, 115, 41, 32, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 106, 32, 61, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 102, 105, 110, 100, 95, 107, 101, 121, 40, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 44, 107, 101, 121, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 106, 62, 61, 48, 32, 38, 38, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 118, 97, 108, 115, 91, 106, 93, 44, 118, 97, 108, 117, 101, 41, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 118, 100, 105, 99, 116, 95, 116, 32, 42, 100, 32, 61, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 67, 84, 71, 32, 63, 32, 40, 118, 100, 105, 99, 116, 95, 116, 42, 41, 104, 100, 114, 45, 62, 100, 105, 99, 116, 91, 66, 67, 70, 95, 68, 84, 95, 67, 84, 71, 93, 32, 58, 32, 40, 118, 100, 105, 99, 116, 95, 116, 42, 41, 104, 100, 114, 45, 62, 100, 105, 99, 116, 91, 66, 67, 70, 95, 68, 84, 95, 73, 68, 93, 59, 10, 32, 32, 32, 32, 107, 104, 105, 110, 116, 95, 116, 32, 107, 32, 61, 32, 107, 104, 95, 103, 101, 116, 40, 118, 100, 105, 99, 116, 44, 32, 100, 44, 32, 118, 97, 108, 117, 101, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 107, 32, 61, 61, 32, 107, 104, 95, 101, 110, 100, 40, 100, 41, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 46, 104, 114, 101, 99, 91, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 67, 84, 71, 63, 48, 58, 116, 121, 112, 101, 93, 59, 10, 125, 10, 10, 118, 111, 105, 100, 32, 98, 99, 102, 95, 104, 100, 114, 95, 99, 104, 101, 99, 107, 95, 115, 97, 110, 105, 116, 121, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 41, 10, 123, 10, 32, 32, 32, 32, 115, 116, 97, 116, 105, 99, 32, 105, 110, 116, 32, 80, 76, 95, 119, 97, 114, 110, 101, 100, 32, 61, 32, 48, 44, 32, 71, 76, 95, 119, 97, 114, 110, 101, 100, 32, 61, 32, 48, 59, 10, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 80, 76, 95, 119, 97, 114, 110, 101, 100, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 105, 100, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 50, 105, 110, 116, 40, 104, 100, 114, 44, 32, 66, 67, 70, 95, 68, 84, 95, 73, 68, 44, 32, 34, 80, 76, 34, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 105, 110, 102, 111, 95, 101, 120, 105, 115, 116, 115, 40, 104, 100, 114, 44, 66, 67, 70, 95, 72, 76, 95, 70, 77, 84, 44, 105, 100, 41, 32, 38, 38, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 50, 108, 101, 110, 103, 116, 104, 40, 104, 100, 114, 44, 66, 67, 70, 95, 72, 76, 95, 70, 77, 84, 44, 105, 100, 41, 33, 61, 66, 67, 70, 95, 86, 76, 95, 71, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 104, 116, 115, 95, 118, 101, 114, 98, 111, 115, 101, 32, 62, 61, 32, 50, 41, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 91, 87, 58, 58, 37, 115, 93, 32, 80, 76, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 100, 101, 99, 108, 97, 114, 101, 100, 32, 97, 115, 32, 78, 117, 109, 98, 101, 114, 61, 71, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 80, 76, 95, 119, 97, 114, 110, 101, 100, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 71, 76, 95, 119, 97, 114, 110, 101, 100, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 105, 100, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 50, 105, 110, 116, 40, 104, 100, 114, 44, 32, 66, 67, 70, 95, 68, 84, 95, 73, 68, 44, 32, 34, 71, 76, 34, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 105, 110, 102, 111, 95, 101, 120, 105, 115, 116, 115, 40, 104, 100, 114, 44, 66, 67, 70, 95, 72, 76, 95, 70, 77, 84, 44, 105, 100, 41, 32, 38, 38, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 50, 108, 101, 110, 103, 116, 104, 40, 104, 100, 114, 44, 66, 67, 70, 95, 72, 76, 95, 70, 77, 84, 44, 105, 100, 41, 33, 61, 66, 67, 70, 95, 86, 76, 95, 71, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 104, 116, 115, 95, 118, 101, 114, 98, 111, 115, 101, 32, 62, 61, 32, 50, 41, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 91, 87, 58, 58, 37, 115, 93, 32, 71, 76, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 100, 101, 99, 108, 97, 114, 101, 100, 32, 97, 115, 32, 78, 117, 109, 98, 101, 114, 61, 71, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 71, 76, 95, 119, 97, 114, 110, 101, 100, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 112, 97, 114, 115, 101, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 99, 104, 97, 114, 32, 42, 104, 116, 120, 116, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 108, 101, 110, 44, 32, 110, 101, 101, 100, 115, 95, 115, 121, 110, 99, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 112, 32, 61, 32, 104, 116, 120, 116, 59, 10, 10, 32, 32, 32, 32, 47, 47, 32, 67, 104, 101, 99, 107, 32, 115, 97, 110, 105, 116, 121, 58, 32, 34, 102, 105, 108, 101, 102, 111, 114, 109, 97, 116, 34, 32, 115, 116, 114, 105, 110, 103, 32, 109, 117, 115, 116, 32, 99, 111, 109, 101, 32, 97, 115, 32, 102, 105, 114, 115, 116, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 104, 114, 101, 99, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 112, 97, 114, 115, 101, 95, 108, 105, 110, 101, 40, 104, 100, 114, 44, 112, 44, 38, 108, 101, 110, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 104, 114, 101, 99, 32, 124, 124, 32, 33, 104, 114, 101, 99, 45, 62, 107, 101, 121, 32, 124, 124, 32, 115, 116, 114, 99, 97, 115, 101, 99, 109, 112, 40, 104, 114, 101, 99, 45, 62, 107, 101, 121, 44, 34, 102, 105, 108, 101, 102, 111, 114, 109, 97, 116, 34, 41, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 32, 34, 91, 87, 58, 58, 37, 115, 93, 32, 84, 104, 101, 32, 102, 105, 114, 115, 116, 32, 108, 105, 110, 101, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 35, 35, 102, 105, 108, 101, 102, 111, 114, 109, 97, 116, 59, 32, 105, 115, 32, 116, 104, 101, 32, 86, 67, 70, 47, 66, 67, 70, 32, 104, 101, 97, 100, 101, 114, 32, 98, 114, 111, 107, 101, 110, 63, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 41, 59, 10, 32, 32, 32, 32, 110, 101, 101, 100, 115, 95, 115, 121, 110, 99, 32, 43, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 100, 100, 95, 104, 114, 101, 99, 40, 104, 100, 114, 44, 32, 104, 114, 101, 99, 41, 59, 10, 10, 32, 32, 32, 32, 47, 47, 32, 84, 104, 101, 32, 102, 105, 108, 116, 101, 114, 32, 80, 65, 83, 83, 32, 109, 117, 115, 116, 32, 97, 112, 112, 101, 97, 114, 32, 102, 105, 114, 115, 116, 32, 105, 110, 32, 116, 104, 101, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 10, 32, 32, 32, 32, 104, 114, 101, 99, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 112, 97, 114, 115, 101, 95, 108, 105, 110, 101, 40, 104, 100, 114, 44, 34, 35, 35, 70, 73, 76, 84, 69, 82, 61, 60, 73, 68, 61, 80, 65, 83, 83, 44, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, 92, 34, 65, 108, 108, 32, 102, 105, 108, 116, 101, 114, 115, 32, 112, 97, 115, 115, 101, 100, 92, 34, 62, 34, 44, 38, 108, 101, 110, 41, 59, 10, 32, 32, 32, 32, 110, 101, 101, 100, 115, 95, 115, 121, 110, 99, 32, 43, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 100, 100, 95, 104, 114, 101, 99, 40, 104, 100, 114, 44, 32, 104, 114, 101, 99, 41, 59, 10, 10, 32, 32, 32, 32, 47, 47, 32, 80, 97, 114, 115, 101, 32, 116, 104, 101, 32, 119, 104, 111, 108, 101, 32, 104, 101, 97, 100, 101, 114, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 40, 104, 114, 101, 99, 61, 98, 99, 102, 95, 104, 100, 114, 95, 112, 97, 114, 115, 101, 95, 108, 105, 110, 101, 40, 104, 100, 114, 44, 112, 44, 38, 108, 101, 110, 41, 41, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 110, 101, 101, 100, 115, 95, 115, 121, 110, 99, 32, 43, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 100, 100, 95, 104, 114, 101, 99, 40, 104, 100, 114, 44, 32, 104, 114, 101, 99, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 32, 43, 61, 32, 108, 101, 110, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 110, 116, 32, 114, 101, 116, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 112, 97, 114, 115, 101, 95, 115, 97, 109, 112, 108, 101, 95, 108, 105, 110, 101, 40, 104, 100, 114, 44, 112, 41, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 115, 121, 110, 99, 40, 104, 100, 114, 41, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 99, 104, 101, 99, 107, 95, 115, 97, 110, 105, 116, 121, 40, 104, 100, 114, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 116, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 112, 112, 101, 110, 100, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 108, 105, 110, 101, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 108, 101, 110, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 104, 114, 101, 99, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 112, 97, 114, 115, 101, 95, 108, 105, 110, 101, 40, 104, 100, 114, 44, 32, 40, 99, 104, 97, 114, 42, 41, 32, 108, 105, 110, 101, 44, 32, 38, 108, 101, 110, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 104, 114, 101, 99, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 100, 100, 95, 104, 114, 101, 99, 40, 104, 100, 114, 44, 32, 104, 114, 101, 99, 41, 59, 10, 32, 32]);
fileData0.push.apply(fileData0, [32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 10, 118, 111, 105, 100, 32, 98, 99, 102, 95, 104, 100, 114, 95, 114, 101, 109, 111, 118, 101, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 105, 110, 116, 32, 116, 121, 112, 101, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 107, 101, 121, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 104, 114, 101, 99, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 107, 101, 121, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 105, 60, 104, 100, 114, 45, 62, 110, 104, 114, 101, 99, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 116, 121, 112, 101, 33, 61, 116, 121, 112, 101, 32, 41, 32, 123, 32, 105, 43, 43, 59, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 104, 114, 101, 99, 32, 61, 32, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 70, 76, 84, 32, 124, 124, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 73, 78, 70, 79, 32, 124, 124, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 70, 77, 84, 32, 124, 124, 32, 116, 121, 112, 101, 61, 61, 32, 66, 67, 70, 95, 72, 76, 95, 67, 84, 71, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 106, 32, 61, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 102, 105, 110, 100, 95, 107, 101, 121, 40, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 44, 32, 34, 73, 68, 34, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 106, 62, 48, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 100, 105, 99, 116, 95, 116, 32, 42, 100, 32, 61, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 67, 84, 71, 32, 63, 32, 40, 118, 100, 105, 99, 116, 95, 116, 42, 41, 104, 100, 114, 45, 62, 100, 105, 99, 116, 91, 66, 67, 70, 95, 68, 84, 95, 67, 84, 71, 93, 32, 58, 32, 40, 118, 100, 105, 99, 116, 95, 116, 42, 41, 104, 100, 114, 45, 62, 100, 105, 99, 116, 91, 66, 67, 70, 95, 68, 84, 95, 73, 68, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 105, 110, 116, 95, 116, 32, 107, 32, 61, 32, 107, 104, 95, 103, 101, 116, 40, 118, 100, 105, 99, 116, 44, 32, 100, 44, 32, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 118, 97, 108, 115, 91, 106, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 46, 104, 114, 101, 99, 91, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 67, 84, 71, 63, 48, 58, 116, 121, 112, 101, 93, 32, 61, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 104, 100, 114, 45, 62, 100, 105, 114, 116, 121, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 104, 100, 114, 45, 62, 110, 104, 114, 101, 99, 45, 45, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 32, 60, 32, 104, 100, 114, 45, 62, 110, 104, 114, 101, 99, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 109, 101, 109, 109, 111, 118, 101, 40, 38, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 44, 38, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 43, 49, 93, 44, 40, 104, 100, 114, 45, 62, 110, 104, 114, 101, 99, 45, 105, 41, 42, 115, 105, 122, 101, 111, 102, 40, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 42, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 100, 101, 115, 116, 114, 111, 121, 40, 104, 114, 101, 99, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 49, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 70, 76, 84, 32, 124, 124, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 73, 78, 70, 79, 32, 124, 124, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 70, 77, 84, 32, 124, 124, 32, 116, 121, 112, 101, 61, 61, 32, 66, 67, 70, 95, 72, 76, 95, 67, 84, 71, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 104, 114, 101, 99, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 103, 101, 116, 95, 104, 114, 101, 99, 40, 104, 100, 114, 44, 32, 116, 121, 112, 101, 44, 32, 34, 73, 68, 34, 44, 32, 107, 101, 121, 44, 32, 78, 85, 76, 76, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 104, 114, 101, 99, 32, 41, 32, 114, 101, 116, 117, 114, 110, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 104, 100, 114, 45, 62, 110, 104, 114, 101, 99, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 61, 61, 104, 114, 101, 99, 32, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 32, 105, 60, 104, 100, 114, 45, 62, 110, 104, 114, 101, 99, 32, 41, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 100, 105, 99, 116, 95, 116, 32, 42, 100, 32, 61, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 67, 84, 71, 32, 63, 32, 40, 118, 100, 105, 99, 116, 95, 116, 42, 41, 104, 100, 114, 45, 62, 100, 105, 99, 116, 91, 66, 67, 70, 95, 68, 84, 95, 67, 84, 71, 93, 32, 58, 32, 40, 118, 100, 105, 99, 116, 95, 116, 42, 41, 104, 100, 114, 45, 62, 100, 105, 99, 116, 91, 66, 67, 70, 95, 68, 84, 95, 73, 68, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 105, 110, 116, 95, 116, 32, 107, 32, 61, 32, 107, 104, 95, 103, 101, 116, 40, 118, 100, 105, 99, 116, 44, 32, 100, 44, 32, 107, 101, 121, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 46, 104, 114, 101, 99, 91, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 67, 84, 71, 63, 48, 58, 116, 121, 112, 101, 93, 32, 61, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 104, 100, 114, 45, 62, 110, 104, 114, 101, 99, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 116, 121, 112, 101, 33, 61, 116, 121, 112, 101, 32, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 71, 69, 78, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 107, 101, 121, 44, 107, 101, 121, 41, 32, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 110, 111, 116, 32, 97, 108, 108, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 100, 32, 108, 105, 110, 101, 115, 32, 104, 97, 118, 101, 32, 73, 68, 44, 32, 119, 101, 32, 99, 111, 117, 108, 100, 32, 98, 101, 32, 109, 111, 114, 101, 32, 115, 111, 112, 104, 105, 115, 116, 105, 99, 97, 116, 101, 100, 32, 97, 115, 32, 105, 110, 32, 98, 99, 102, 95, 104, 100, 114, 95, 103, 101, 116, 95, 104, 114, 101, 99, 40, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 106, 32, 61, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 102, 105, 110, 100, 95, 107, 101, 121, 40, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 44, 32, 34, 73, 68, 34, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 106, 62, 61, 48, 32, 38, 38, 32, 33, 115, 116, 114, 99, 109, 112, 40, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 118, 97, 108, 115, 91, 106, 93, 44, 107, 101, 121, 41, 32, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 61, 61, 104, 100, 114, 45, 62, 110, 104, 114, 101, 99, 32, 41, 32, 114, 101, 116, 117, 114, 110, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 104, 114, 101, 99, 32, 61, 32, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 100, 114, 45, 62, 110, 104, 114, 101, 99, 45, 45, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 32, 60, 32, 104, 100, 114, 45, 62, 110, 104, 114, 101, 99, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 109, 101, 109, 109, 111, 118, 101, 40, 38, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 44, 38, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 43, 49, 93, 44, 40, 104, 100, 114, 45, 62, 110, 104, 114, 101, 99, 45, 105, 41, 42, 115, 105, 122, 101, 111, 102, 40, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 42, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 100, 101, 115, 116, 114, 111, 121, 40, 104, 114, 101, 99, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 100, 114, 45, 62, 100, 105, 114, 116, 121, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 125, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 112, 114, 105, 110, 116, 102, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 102, 109, 116, 44, 32, 46, 46, 46, 41, 10, 123, 10, 32, 32, 32, 32, 118, 97, 95, 108, 105, 115, 116, 32, 97, 112, 59, 10, 32, 32, 32, 32, 118, 97, 95, 115, 116, 97, 114, 116, 40, 97, 112, 44, 32, 102, 109, 116, 41, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 110, 32, 61, 32, 118, 115, 110, 112, 114, 105, 110, 116, 102, 40, 78, 85, 76, 76, 44, 32, 48, 44, 32, 102, 109, 116, 44, 32, 97, 112, 41, 32, 43, 32, 50, 59, 10, 32, 32, 32, 32, 118, 97, 95, 101, 110, 100, 40, 97, 112, 41, 59, 10, 10, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 108, 105, 110, 101, 32, 61, 32, 40, 99, 104, 97, 114, 42, 41, 109, 97, 108, 108, 111, 99, 40, 110, 41, 59, 10, 32, 32, 32, 32, 118, 97, 95, 115, 116, 97, 114, 116, 40, 97, 112, 44, 32, 102, 109, 116, 41, 59, 10, 32, 32, 32, 32, 118, 115, 110, 112, 114, 105, 110, 116, 102, 40, 108, 105, 110, 101, 44, 32, 110, 44, 32, 102, 109, 116, 44, 32, 97, 112, 41, 59, 10, 32, 32, 32, 32, 118, 97, 95, 101, 110, 100, 40, 97, 112, 41, 59, 10, 10, 32, 32, 32, 32, 105, 110, 116, 32, 114, 101, 116, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 112, 112, 101, 110, 100, 40, 104, 100, 114, 44, 32, 108, 105, 110, 101, 41, 59, 10, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 108, 105, 110, 101, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 116, 59, 10, 125, 10, 10, 10, 47, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 10, 32, 42, 42, 42, 32, 66, 67, 70, 32, 104, 101, 97, 100, 101, 114, 32, 73, 47, 79, 32, 42, 42, 42, 10, 32, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 47, 10, 10, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 98, 99, 102, 95, 104, 100, 114, 95, 103, 101, 116, 95, 118, 101, 114, 115, 105, 111, 110, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 41, 10, 123, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 104, 114, 101, 99, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 103, 101, 116, 95, 104, 114, 101, 99, 40, 104, 100, 114, 44, 32, 66, 67, 70, 95, 72, 76, 95, 71, 69, 78, 44, 32, 34, 102, 105, 108, 101, 102, 111, 114, 109, 97, 116, 34, 44, 32, 78, 85, 76, 76, 44, 32, 78, 85, 76, 76, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 104, 114, 101, 99, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 78, 111, 32, 118, 101, 114, 115, 105, 111, 110, 32, 115, 116, 114, 105, 110, 103, 32, 102, 111, 117, 110, 100, 44, 32, 97, 115, 115, 117, 109, 105, 110, 103, 32, 86, 67, 70, 118, 52, 46, 50, 92, 110, 34, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 34, 86, 67, 70, 118, 52, 46, 50, 34, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 117, 101, 59, 10, 125, 10, 10, 118, 111, 105, 100, 32, 98, 99, 102, 95, 104, 100, 114, 95, 115, 101, 116, 95, 118, 101, 114, 115, 105, 111, 110, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 118, 101, 114, 115, 105, 111, 110, 41, 10, 123, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 104, 114, 101, 99, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 103, 101, 116, 95, 104, 114, 101, 99, 40, 104, 100, 114, 44, 32, 66, 67, 70, 95, 72, 76, 95, 71, 69, 78, 44, 32, 34, 102, 105, 108, 101, 102, 111, 114, 109, 97, 116, 34, 44, 32, 78, 85, 76, 76, 44, 32, 78, 85, 76, 76, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 104, 114, 101, 99, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 108, 101, 110, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 115, 116, 114, 32, 61, 32, 123, 48, 44, 48, 44, 48, 125, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 112, 114, 105, 110, 116, 102, 40, 38, 115, 116, 114, 44, 34, 35, 35, 102, 105, 108, 101, 102, 111, 114, 109, 97, 116, 61, 37, 115, 34, 44, 32, 118, 101, 114, 115, 105, 111, 110, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 114, 101, 99, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 112, 97, 114, 115, 101, 95, 108, 105, 110, 101, 40, 104, 100, 114, 44, 32, 115, 116, 114, 46, 115, 44, 32, 38, 108, 101, 110, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 115, 116, 114, 46, 115, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 114, 101, 99, 45, 62, 118, 97, 108, 117, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 117, 101, 32, 61, 32, 115, 116, 114, 100, 117, 112, 40, 118, 101, 114, 115, 105, 111, 110, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 104, 100, 114, 45, 62, 100, 105, 114, 116, 121, 32, 61, 32, 49, 59, 10, 125, 10, 10, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 98, 99, 102, 95, 104, 100, 114, 95, 105, 110, 105, 116, 40, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 109, 111, 100, 101, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 59, 10, 32, 32, 32, 32, 104, 32, 61, 32, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 42, 41, 99, 97, 108, 108, 111, 99, 40, 49, 44, 32, 115, 105, 122, 101, 111, 102, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 41, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 33, 104, 41, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 51, 59, 32, 43, 43, 105, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 40, 104, 45, 62, 100, 105, 99, 116, 91, 105, 93, 32, 61, 32, 107, 104, 95, 105, 110, 105, 116, 40, 118, 100, 105, 99, 116, 41, 41, 32, 61, 61, 32, 78, 85, 76, 76, 41, 32, 103, 111, 116, 111, 32, 102, 97, 105, 108, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 115, 116, 114, 99, 104, 114, 40, 109, 111, 100, 101, 44, 39, 119, 39, 41, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 112, 112, 101, 110, 100, 40, 104, 44, 32, 34, 35, 35, 102, 105, 108, 101, 102, 111, 114, 109, 97, 116, 61, 86, 67, 70, 118, 52, 46, 50, 34, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 84, 104, 101, 32, 102, 105, 108, 116, 101, 114, 32, 80, 65, 83, 83, 32, 109, 117, 115, 116, 32, 97, 112, 112, 101, 97, 114, 32, 102, 105, 114, 115, 116, 32, 105, 110, 32, 116, 104, 101, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 112, 112, 101, 110, 100, 40, 104, 44, 32, 34, 35, 35, 70, 73, 76, 84, 69, 82, 61, 60, 73, 68, 61, 80, 65, 83, 83, 44, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, 92, 34, 65, 108, 108, 32, 102, 105, 108, 116, 101, 114, 115, 32, 112, 97, 115, 115, 101, 100, 92, 34, 62, 34, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 104, 59, 10, 10, 32, 102, 97, 105, 108, 58, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 51, 59, 32, 43, 43, 105, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 95, 100, 101, 115, 116, 114, 111, 121, 40, 118, 100, 105, 99, 116, 44, 32, 104, 45, 62, 100, 105, 99, 116, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 10, 125, 10, 10, 118, 111, 105, 100, 32, 98, 99, 102, 95, 104, 100, 114, 95, 100, 101, 115, 116, 114, 111, 121, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 107, 104, 105, 110, 116, 95, 116, 32, 107, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 51, 59, 32, 43, 43, 105, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 100, 105, 99, 116, 95, 116, 32, 42, 100, 32, 61, 32, 40, 118, 100, 105, 99, 116, 95, 116, 42, 41, 104, 45, 62, 100, 105, 99, 116, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 100, 32, 61, 61, 32, 48, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 107, 32, 61, 32, 107, 104, 95, 98, 101, 103, 105, 110, 40, 100, 41, 59, 32, 107, 32, 33, 61, 32, 107, 104, 95, 101, 110, 100, 40, 100, 41, 59, 32, 43, 43, 107, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 107, 104, 95, 101, 120, 105, 115, 116, 40, 100, 44, 32, 107, 41, 41, 32, 102, 114, 101, 101, 40, 40, 99, 104, 97, 114, 42, 41, 107, 104, 95, 107, 101, 121, 40, 100, 44, 32, 107, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 95, 100, 101, 115, 116, 114, 111, 121, 40, 118, 100, 105, 99, 116, 44, 32, 100, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 45, 62, 105, 100, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 104, 45, 62, 110, 104, 114, 101, 99, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 100, 101, 115, 116, 114, 111, 121, 40, 104, 45, 62, 104, 114, 101, 99, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 104, 45, 62, 110, 104, 114, 101, 99, 41, 32, 102, 114, 101, 101, 40, 104, 45, 62, 104, 114, 101, 99, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 104, 45, 62, 115, 97, 109, 112, 108, 101, 115, 41, 32, 102, 114, 101, 101, 40, 104, 45, 62, 115, 97, 109, 112, 108, 101, 115, 41, 59, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 45, 62, 107, 101, 101, 112, 95, 115, 97, 109, 112, 108, 101, 115, 41, 59, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 45, 62, 116, 114, 97, 110, 115, 108, 91, 48, 93, 41, 59, 32, 102, 114, 101, 101, 40, 104, 45, 62, 116, 114, 97, 110, 115, 108, 91, 49, 93, 41, 59, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 45, 62, 109, 101, 109, 46, 115, 41, 59, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 41, 59, 10, 125, 10, 10, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 98, 99, 102, 95, 104, 100, 114, 95, 114, 101, 97, 100, 40, 104, 116, 115, 70, 105, 108, 101, 32, 42, 104, 102, 112, 41, 10, 123, 10, 32, 32, 32, 32, 105, 102, 32, 40, 104, 102, 112, 45, 62, 102, 111, 114, 109, 97, 116, 46, 102, 111, 114, 109, 97, 116, 32, 61, 61, 32, 118, 99, 102, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 118, 99, 102, 95, 104, 100, 114, 95, 114, 101, 97, 100, 40, 104, 102, 112, 41, 59, 10, 10, 32, 32, 32, 32, 66, 71, 90, 70, 32, 42, 102, 112, 32, 61, 32, 104, 102, 112, 45, 62, 102, 112, 46, 98, 103, 122, 102, 59, 10, 32, 32, 32, 32, 117, 105, 110, 116, 56, 95, 116, 32, 109, 97, 103, 105, 99, 91, 53, 93, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 59, 10, 32, 32, 32, 32, 104, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 110, 105, 116, 40, 34, 114, 34, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 33, 104, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 32, 34, 91, 69, 58, 58, 37, 115, 93, 32, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 97, 108, 108, 111, 99, 97, 116, 101, 32, 98, 99, 102, 32, 104, 101, 97, 100, 101, 114, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 102, 32, 40, 98, 103, 122, 102, 95, 114, 101, 97, 100, 40, 102, 112, 44, 32, 109, 97, 103, 105, 99, 44, 32, 53, 41, 32, 33, 61, 32, 53, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 91, 37, 115, 58, 37, 100, 32, 37, 115, 93, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 116, 104, 101, 32, 104, 101, 97, 100, 101, 114, 32, 40, 114, 101, 97, 100, 105, 110, 103, 32, 66, 67, 70, 32, 105, 110, 32, 116, 101, 120, 116, 32, 109, 111, 100, 101, 63, 41, 92, 110, 34, 44, 32, 95, 95, 70, 73, 76, 69, 95, 95, 44, 95, 95, 76, 73, 78, 69, 95, 95, 44, 95, 95, 70, 85, 78, 67, 84, 73, 79, 78, 95, 95, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 100, 101, 115, 116, 114, 111, 121, 40, 104, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 102, 32, 40, 115, 116, 114, 110, 99, 109, 112, 40, 40, 99, 104, 97, 114, 42, 41, 109, 97, 103, 105, 99, 44, 32, 34, 66, 67, 70, 92, 50, 92, 50, 34, 44, 32, 53, 41, 32, 33, 61, 32, 48, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 33, 115, 116, 114, 110, 99, 109, 112, 40, 40, 99, 104, 97, 114, 42, 41, 109, 97, 103, 105, 99, 44, 32, 34, 66, 67, 70, 34, 44, 32, 51, 41, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 91, 37, 115, 58, 37, 100, 32, 37, 115, 93, 32, 105, 110, 118, 97, 108, 105, 100, 32, 66, 67, 70, 50, 32, 109, 97, 103, 105, 99, 32, 115, 116, 114, 105, 110, 103, 58, 32, 111, 110, 108, 121, 32, 66, 67, 70, 118, 50, 46, 50, 32, 105, 115, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 46, 92, 110, 34, 44, 32, 95, 95, 70, 73, 76, 69, 95, 95, 44, 95, 95, 76, 73, 78, 69, 95, 95, 44, 95, 95, 70, 85, 78, 67, 84, 73, 79, 78, 95, 95, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 104, 116, 115, 95, 118, 101, 114, 98, 111, 115, 101, 32, 62, 61, 32, 50, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 32, 34, 91, 69, 58, 58, 37, 115, 93, 32, 105, 110, 118, 97, 108, 105, 100, 32, 66, 67, 70, 50, 32, 109, 97, 103, 105, 99, 32, 115, 116, 114, 105, 110, 103, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 100, 101, 115, 116, 114, 111, 121, 40, 104, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 110, 116, 32, 104, 108, 101, 110, 59, 10, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 104, 116, 120, 116, 32, 61, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 98, 103, 122, 102, 95, 114, 101, 97, 100, 40, 102, 112, 44, 32, 38, 104, 108, 101, 110, 44, 32, 52, 41, 32, 33, 61, 32, 52, 41, 32, 103, 111, 116, 111, 32, 102, 97, 105, 108, 59, 10, 32, 32, 32, 32, 104, 116, 120, 116, 32, 61, 32, 40, 99, 104, 97, 114, 42, 41, 109, 97, 108, 108, 111, 99, 40, 104, 108, 101, 110, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 33, 104, 116, 120, 116, 41, 32, 103, 111, 116, 111, 32, 102, 97, 105, 108, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 98, 103, 122, 102, 95, 114, 101, 97, 100, 40, 102, 112, 44, 32, 104, 116, 120, 116, 44, 32, 104, 108, 101, 110, 41, 32, 33, 61, 32, 104, 108, 101, 110, 41, 32, 103, 111, 116, 111, 32, 102, 97, 105, 108, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 112, 97, 114, 115, 101, 40, 104, 44, 32, 104, 116, 120, 116, 41, 59, 32, 32, 47, 47, 32, 70, 73, 88, 77, 69, 58, 32, 68, 111, 101, 115, 32, 116, 104, 105, 115, 32, 114, 101, 116, 117, 114, 110, 32, 97, 110, 121, 116, 104, 105, 110, 103, 32, 109, 101, 97, 110, 105, 110, 103, 102, 117, 108, 63, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 116, 120, 116, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 104, 59, 10, 32, 102, 97, 105, 108, 58, 10, 32, 32, 32, 32, 105, 102, 32, 40, 104, 116, 115, 95, 118, 101, 114, 98, 111, 115, 101, 32, 62, 61, 32, 50, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 32, 34, 91, 69, 58, 58, 37, 115, 93, 32, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 66, 67, 70, 32, 104, 101, 97, 100, 101, 114, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 116, 120, 116, 41, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 100, 101, 115, 116, 114, 111, 121, 40, 104, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 119, 114, 105, 116, 101, 40, 104, 116, 115, 70, 105, 108, 101, 32, 42, 104, 102, 112, 44, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 41, 10, 123, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 104, 45, 62, 100, 105, 114, 116, 121, 32, 41, 32, 98, 99, 102, 95, 104, 100, 114, 95, 115, 121, 110, 99, 40, 104, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 104, 102, 112, 45, 62, 102, 111, 114, 109, 97, 116, 46, 102, 111, 114, 109, 97, 116, 32, 61, 61, 32, 118, 99, 102, 32, 124, 124, 32, 104, 102, 112, 45, 62, 102, 111, 114, 109, 97, 116, 46, 102, 111, 114, 109, 97, 116, 32, 61, 61, 32, 116, 101, 120, 116, 95, 102, 111, 114, 109, 97, 116, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 118, 99, 102, 95, 104, 100, 114, 95, 119, 114, 105, 116, 101, 40, 104, 102, 112, 44, 32, 104, 41, 59, 10, 10, 32, 32, 32, 32, 105, 110, 116, 32, 104, 108, 101, 110, 59, 10, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 104, 116, 120, 116, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 102, 109, 116, 95, 116, 101, 120, 116, 40, 104, 44, 32, 49, 44, 32, 38, 104, 108, 101, 110, 41, 59, 10, 32, 32, 32, 32, 104, 108, 101, 110, 43, 43, 59, 32, 47, 47, 32, 105, 110, 99, 108, 117, 100, 101, 32, 116, 104, 101, 32, 92, 48, 32, 98, 121, 116, 101, 10, 10, 32, 32, 32, 32, 66, 71, 90, 70, 32, 42, 102, 112, 32, 61, 32, 104, 102, 112, 45, 62, 102, 112, 46, 98, 103, 122, 102, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 98, 103, 122, 102, 95, 119, 114, 105, 116, 101, 40, 102, 112, 44, 32, 34, 66, 67, 70, 92, 50, 92, 50, 34, 44, 32, 53, 41, 32, 33, 61, 53, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 98, 103, 122, 102, 95, 119, 114, 105, 116, 101, 40, 102, 112, 44, 32, 38, 104, 108, 101, 110, 44, 32, 52, 41, 32, 33, 61, 52, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 98, 103, 122, 102, 95, 119, 114, 105, 116, 101, 40, 102, 112, 44, 32, 104, 116, 120, 116, 44, 32, 104, 108, 101, 110, 41, 32, 33, 61, 32, 104, 108, 101, 110, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 116, 120, 116, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 10, 47, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 10, 32, 42, 42, 42, 32, 66, 67, 70, 32, 115, 105, 116, 101, 32, 73, 47, 79, 32, 42, 42, 42, 10, 32, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 47, 10, 10, 98, 99, 102, 49, 95, 116, 32, 42, 98, 99, 102, 95, 105, 110, 105, 116, 40, 41, 10, 123, 10, 32, 32, 32, 32, 98, 99, 102, 49, 95, 116, 32, 42, 118, 59, 10, 32, 32, 32, 32, 118, 32, 61, 32, 40, 98, 99, 102, 49, 95, 116, 42, 41, 99, 97, 108, 108, 111, 99, 40, 49, 44, 32, 115, 105, 122, 101, 111, 102, 40, 98, 99, 102, 49, 95, 116, 41, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 118, 59, 10, 125, 10, 10, 118, 111, 105, 100, 32, 98, 99, 102, 95, 99, 108, 101, 97, 114, 40, 98, 99, 102, 49, 95, 116, 32, 42, 118, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 118, 45, 62, 100, 46, 109, 95, 105, 110, 102, 111, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 118, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 46, 118, 112, 116, 114, 95, 102, 114, 101, 101, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 118, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 46, 118, 112, 116, 114, 32, 45, 32, 118, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 46, 118, 112, 116, 114, 95, 111, 102, 102, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 46, 118, 112, 116, 114, 95, 102, 114, 101, 101, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 118, 45, 62, 100, 46, 109, 95, 102, 109, 116, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 118, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 46, 112, 95, 102, 114, 101, 101, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 118, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 46, 112, 32, 45, 32, 118, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 46, 112, 95, 111, 102, 102, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 46, 112, 95, 102, 114, 101, 101, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 118, 45, 62, 114, 105, 100, 32, 61, 32, 118, 45, 62, 112, 111, 115, 32, 61, 32, 118, 45, 62, 114, 108, 101, 110, 32, 61, 32, 118, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 102, 108, 111, 97, 116, 95, 115, 101, 116, 95, 109, 105, 115, 115, 105, 110, 103, 40, 118, 45, 62, 113, 117, 97, 108, 41, 59, 10, 32, 32, 32, 32, 118, 45, 62, 110, 95, 105, 110, 102, 111, 32, 61, 32, 118, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 32, 61, 32, 118, 45, 62, 110, 95, 102, 109, 116, 32, 61, 32, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 118, 45, 62, 115, 104, 97, 114, 101, 100, 46, 108, 32, 61, 32, 118, 45, 62, 105, 110, 100, 105, 118, 46, 108, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 118, 45, 62, 100, 46, 118, 97, 114, 95, 116, 121, 112, 101, 32, 61, 32, 45, 49, 59, 10, 32, 32, 32, 32, 118, 45, 62, 100, 46, 115, 104, 97, 114, 101, 100, 95, 100, 105, 114, 116, 121, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 118, 45, 62, 100, 46, 105, 110, 100, 105, 118, 95, 100, 105, 114, 116, 121, 32, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 118, 45, 62, 100, 46, 110, 95, 102, 108, 116, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 118, 45, 62, 101, 114, 114, 99, 111, 100, 101, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 118, 45, 62, 100, 46, 109, 95, 97, 108, 115, 41, 32, 118, 45, 62, 100, 46, 97, 108, 115, 91, 48, 93, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 118, 45, 62, 100, 46, 109, 95, 105, 100, 41, 32, 118, 45, 62, 100, 46, 105, 100, 91, 48, 93, 32, 61, 32, 48, 59, 10, 125, 10, 10, 118, 111, 105, 100, 32, 98, 99, 102, 95, 101, 109, 112, 116, 121, 40, 98, 99, 102, 49, 95, 116, 32, 42, 118, 41, 10, 123, 10, 32, 32, 32, 32, 98, 99, 102, 95, 99, 108, 101, 97, 114, 49, 40, 118, 41, 59, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 118, 45, 62, 100, 46, 105, 100, 41, 59, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 118, 45, 62, 100, 46, 97, 108, 115, 41, 59, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 118, 45, 62, 100, 46, 97, 108, 108, 101, 108, 101, 41, 59, 32, 102, 114, 101, 101, 40, 118, 45, 62, 100, 46, 102, 108, 116, 41, 59, 32, 102, 114, 101, 101, 40, 118, 45, 62, 100, 46, 105, 110, 102, 111, 41, 59, 32, 102, 114, 101, 101, 40, 118, 45, 62, 100, 46, 102, 109, 116, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 118, 45, 62, 100, 46, 118, 97, 114, 32, 41, 32, 102, 114, 101, 101, 40, 118, 45, 62, 100, 46, 118, 97, 114, 41, 59, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 118, 45, 62, 115, 104, 97, 114, 101, 100, 46, 115, 41, 59, 32, 102, 114, 101, 101, 40, 118, 45, 62, 105, 110, 100, 105, 118, 46, 115, 41, 59, 10, 125, 10, 10, 118, 111, 105, 100, 32, 98, 99, 102, 95, 100, 101, 115, 116, 114, 111, 121, 40, 98, 99, 102, 49, 95, 116, 32, 42, 118, 41, 10, 123, 10, 32, 32, 32, 32, 98, 99, 102, 95, 101, 109, 112, 116, 121, 49, 40, 118, 41, 59, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 118, 41, 59, 10, 125, 10, 10, 115, 116, 97, 116, 105, 99, 32, 105, 110, 108, 105, 110, 101, 32, 105, 110, 116, 32, 98, 99, 102, 95, 114, 101, 97, 100, 49, 95, 99, 111, 114, 101, 40, 66, 71, 90, 70, 32, 42, 102, 112, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 118, 41, 10, 123, 10, 32, 32, 32, 32, 117, 105, 110, 116, 51, 50, 95, 116, 32, 120, 91, 56, 93, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 114, 101, 116, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 40, 114, 101, 116, 32, 61, 32, 98, 103, 122, 102, 95, 114, 101, 97, 100, 40, 102, 112, 44, 32, 120, 44, 32, 51, 50, 41, 41, 32, 33, 61, 32, 51, 50, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 114, 101, 116, 32, 61, 61, 32, 48, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 45, 50, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 98, 99, 102, 95, 99, 108, 101, 97, 114, 49, 40, 118, 41, 59, 10, 32, 32, 32, 32, 120, 91, 48, 93, 32, 45, 61, 32, 50, 52, 59, 32, 47, 47, 32, 116, 111, 32, 101, 120, 99, 108, 117, 100, 101, 32, 115, 105, 120, 32, 51, 50, 45, 98, 105, 116, 32, 105, 110, 116, 101, 103, 101, 114, 115, 10, 32, 32, 32, 32, 107, 115, 95, 114, 101, 115, 105, 122, 101, 40, 38, 118, 45, 62, 115, 104, 97, 114, 101, 100, 44, 32, 120, 91, 48, 93, 41, 59, 10, 32, 32, 32, 32, 107, 115, 95, 114, 101, 115, 105, 122, 101, 40, 38, 118, 45, 62, 105, 110, 100, 105, 118, 44, 32, 120, 91, 49, 93, 41, 59, 10, 32, 32, 32, 32, 109, 101, 109, 99, 112, 121, 40, 118, 44, 32, 120, 32, 43, 32, 50, 44, 32, 49, 54, 41, 59, 10, 32, 32, 32, 32, 118, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 32, 61, 32, 120, 91, 54, 93, 62, 62, 49, 54, 59, 32, 118, 45, 62, 110, 95, 105, 110, 102, 111, 32, 61, 32, 120, 91, 54, 93, 38, 48, 120, 102, 102, 102, 102, 59, 10, 32, 32, 32, 32, 118, 45, 62, 110, 95, 102, 109, 116, 32, 61, 32, 120, 91, 55, 93, 62, 62, 50, 52, 59, 32, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 32, 61, 32, 120, 91, 55, 93, 38, 48, 120, 102, 102, 102, 102, 102, 102, 59, 10, 32, 32, 32, 32, 118, 45, 62, 115, 104, 97, 114, 101, 100, 46, 108, 32, 61, 32, 120, 91, 48, 93, 44, 32, 118, 45, 62, 105, 110, 100, 105, 118, 46, 108, 32, 61, 32, 120, 91, 49, 93, 59, 10, 32, 32, 32, 32, 47, 47, 32, 115, 105, 108, 101, 110, 116, 32, 102, 105, 120, 32, 111, 102, 32, 98, 114, 111, 107, 101, 110, 32, 66, 67, 70, 115, 32, 112, 114, 111, 100, 117, 99, 101, 100, 32, 98, 121, 32, 101, 97, 114, 108, 105, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 115, 32, 111, 102, 32, 98, 99, 102, 95, 115, 117, 98, 115, 101, 116, 44, 32, 112, 114, 105, 111, 114, 32, 116, 111, 32, 97, 110, 100, 32, 105, 110, 99, 108, 117, 100, 105, 110, 103, 32, 98, 100, 54, 101, 100, 56, 98, 52, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 40, 33, 118, 45, 62, 105, 110, 100, 105, 118, 46, 108, 32, 124, 124, 32, 33, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 41, 32, 38, 38, 32, 118, 45, 62, 110, 95, 102, 109, 116, 32, 41, 32, 118, 45, 62, 110, 95, 102, 109, 116, 32, 61, 32, 48, 59, 10, 10, 32, 32, 32, 32, 105, 102, 32, 40, 98, 103, 122, 102, 95, 114, 101, 97, 100, 40, 102, 112, 44, 32, 118, 45, 62, 115, 104, 97, 114, 101, 100, 46, 115, 44, 32, 118, 45, 62, 115, 104, 97, 114, 101, 100, 46, 108, 41, 32, 33, 61, 32, 118, 45, 62, 115, 104, 97, 114, 101, 100, 46, 108, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 98, 103, 122, 102, 95, 114, 101, 97, 100, 40, 102, 112, 44, 32, 118, 45, 62, 105, 110, 100, 105, 118, 46, 115, 44, 32, 118, 45, 62, 105, 110, 100, 105, 118, 46, 108, 41, 32, 33, 61, 32, 118, 45, 62, 105, 110, 100, 105, 118, 46, 108, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 10, 35, 100, 101, 102, 105, 110, 101, 32, 98, 105, 116, 95, 97, 114, 114, 97, 121, 95, 115, 105, 122, 101, 40, 110, 41, 32, 40, 40, 110, 41, 47, 56, 43, 49, 41, 10, 35, 100, 101, 102, 105, 110, 101, 32, 98, 105, 116, 95, 97, 114, 114, 97, 121, 95, 115, 101, 116, 40, 97, 44, 105, 41, 32, 32, 32, 40, 40, 97, 41, 91, 40, 105, 41, 47, 56, 93, 32, 124, 61, 32, 32, 32, 49, 32, 60, 60, 32, 40, 40, 105, 41, 37, 56, 41, 41, 10, 35, 100, 101, 102, 105, 110, 101, 32, 98, 105, 116, 95, 97, 114, 114, 97, 121, 95, 99, 108, 101, 97, 114, 40, 97, 44, 105, 41, 32, 40, 40, 97, 41, 91, 40, 105, 41, 47, 56, 93, 32, 38, 61, 32, 126, 40, 49, 32, 60, 60, 32, 40, 40, 105, 41, 37, 56, 41, 41, 41, 10, 35, 100, 101, 102, 105, 110, 101, 32, 98, 105, 116, 95, 97, 114, 114, 97, 121, 95, 116, 101, 115, 116, 40, 97, 44, 105, 41, 32, 32, 40, 40, 97, 41, 91, 40, 105, 41, 47, 56, 93, 32, 38, 32, 32, 32, 40, 49, 32, 60, 60, 32, 40, 40, 105, 41, 37, 56, 41, 41, 41, 10, 10, 115, 116, 97, 116, 105, 99, 32, 105, 110, 108, 105, 110, 101, 32, 117, 105, 110, 116, 56, 95, 116, 32, 42, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 95, 102, 109, 116, 95, 99, 111, 114, 101, 49, 40, 117, 105, 110, 116, 56, 95, 116, 32, 42, 112, 116, 114, 44, 32, 105, 110, 116, 32, 110, 95, 115, 97, 109, 112, 108, 101, 44, 32, 98, 99, 102, 95, 102, 109, 116, 95, 116, 32, 42, 102, 109, 116, 41, 59, 10, 105, 110, 116, 32, 98, 99, 102, 95, 115, 117, 98, 115, 101, 116, 95, 102, 111, 114, 109, 97, 116, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 114, 101, 99, 41, 10, 123, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 104, 100, 114, 45, 62, 107, 101, 101, 112, 95, 115, 97, 109, 112, 108, 101, 115, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 100, 114, 41, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 99, 45, 62, 105, 110, 100, 105, 118, 46, 108, 32, 61, 32, 114, 101, 99, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 44, 32, 106, 59, 10, 32, 32, 32, 32, 117, 105, 110, 116, 56, 95, 116, 32, 42, 112, 116, 114, 32, 61, 32, 40, 117, 105, 110, 116, 56, 95, 116, 42, 41, 114, 101, 99, 45, 62, 105, 110, 100, 105, 118, 46, 115, 44, 32, 42, 100, 115, 116, 32, 61, 32, 78, 85, 76, 76, 44, 32, 42, 115, 114, 99, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 100, 101, 99, 95, 116, 32, 42, 100, 101, 99, 32, 61, 32, 38, 114, 101, 99, 45, 62, 100, 59, 10, 32, 32, 32, 32, 104, 116, 115, 95, 101, 120, 112, 97, 110, 100, 40, 98, 99, 102, 95, 102, 109, 116, 95, 116, 44, 32, 114, 101, 99, 45, 62, 110, 95, 102, 109, 116, 44, 32, 100, 101, 99, 45, 62, 109, 95, 102, 109, 116, 44, 32, 100, 101, 99, 45, 62, 102, 109, 116, 41, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 100, 101, 99, 45, 62, 109, 95, 102, 109, 116, 59, 32, 43, 43, 105, 41, 32, 100, 101, 99, 45, 62, 102, 109, 116, 91, 105, 93, 46, 112, 95, 102, 114, 101, 101, 32, 61, 32, 48, 59, 10, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 114, 101, 99, 45, 62, 110, 95, 102, 109, 116, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 116, 114, 32, 61, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 95, 102, 109, 116, 95, 99, 111, 114, 101, 49, 40, 112, 116, 114, 44, 32, 114, 101, 99, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 44, 32, 38, 100, 101, 99, 45, 62, 102, 109, 116, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 61, 32, 100, 101, 99, 45, 62, 102, 109, 116, 91, 105, 93, 46, 112, 32, 45, 32, 100, 101, 99, 45, 62, 102, 109, 116, 91, 105, 93, 46, 115, 105, 122, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 100, 115, 116, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 109, 101, 109, 109, 111, 118, 101, 40, 100, 101, 99, 45, 62, 102, 109, 116, 91, 105, 45, 49, 93, 46, 112, 32, 43, 32, 100, 101, 99, 45, 62, 102, 109, 116, 91, 105, 45, 49, 93, 46, 112, 95, 108, 101, 110, 44, 32, 100, 101, 99, 45, 62, 102, 109, 116, 91, 105, 93, 46, 112, 32, 45, 32, 100, 101, 99, 45, 62, 102, 109, 116, 91, 105, 93, 46, 112, 95, 111, 102, 102, 44, 32, 100, 101, 99, 45, 62, 102, 109, 116, 91, 105, 93, 46, 112, 95, 111, 102, 102, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 99, 45, 62, 102, 109, 116, 91, 105, 93, 46, 112, 32, 61, 32, 100, 101, 99, 45, 62, 102, 109, 116, 91, 105, 45, 49, 93, 46, 112, 32, 43, 32, 100, 101, 99, 45, 62, 102, 109, 116, 91, 105, 45, 49, 93, 46, 112, 95, 108, 101, 110, 32, 43, 32, 100, 101, 99, 45, 62, 102, 109, 116, 91, 105, 93, 46, 112, 95, 111, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 115, 116, 32, 61, 32, 100, 101, 99, 45, 62, 102, 109, 116, 91, 105, 93, 46, 112, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 106, 61, 48, 59, 32, 106, 60, 104, 100, 114, 45, 62, 110, 115, 97, 109, 112, 108, 101, 115, 95, 111, 114, 105, 59, 32, 106, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 43, 61, 32, 100, 101, 99, 45, 62, 102, 109, 116, 91, 105, 93, 46, 115, 105, 122, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 98, 105, 116, 95, 97, 114, 114, 97, 121, 95, 116, 101, 115, 116, 40, 104, 100, 114, 45, 62, 107, 101, 101, 112, 95, 115, 97, 109, 112, 108, 101, 115, 44, 106, 41]);
fileData0.push.apply(fileData0, [32, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 109, 101, 109, 109, 111, 118, 101, 40, 100, 115, 116, 44, 32, 115, 114, 99, 44, 32, 100, 101, 99, 45, 62, 102, 109, 116, 91, 105, 93, 46, 115, 105, 122, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 100, 115, 116, 32, 43, 61, 32, 100, 101, 99, 45, 62, 102, 109, 116, 91, 105, 93, 46, 115, 105, 122, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 99, 45, 62, 105, 110, 100, 105, 118, 46, 108, 32, 45, 61, 32, 100, 101, 99, 45, 62, 102, 109, 116, 91, 105, 93, 46, 112, 95, 108, 101, 110, 32, 45, 32, 40, 100, 115, 116, 32, 45, 32, 100, 101, 99, 45, 62, 102, 109, 116, 91, 105, 93, 46, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 99, 45, 62, 102, 109, 116, 91, 105, 93, 46, 112, 95, 108, 101, 110, 32, 61, 32, 100, 115, 116, 32, 45, 32, 100, 101, 99, 45, 62, 102, 109, 116, 91, 105, 93, 46, 112, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 114, 101, 99, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 124, 61, 32, 66, 67, 70, 95, 85, 78, 95, 70, 77, 84, 59, 10, 10, 32, 32, 32, 32, 114, 101, 99, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 100, 114, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 114, 101, 97, 100, 40, 104, 116, 115, 70, 105, 108, 101, 32, 42, 102, 112, 44, 32, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 118, 41, 10, 123, 10, 32, 32, 32, 32, 105, 102, 32, 40, 102, 112, 45, 62, 102, 111, 114, 109, 97, 116, 46, 102, 111, 114, 109, 97, 116, 32, 61, 61, 32, 118, 99, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 118, 99, 102, 95, 114, 101, 97, 100, 40, 102, 112, 44, 104, 44, 118, 41, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 114, 101, 116, 32, 61, 32, 98, 99, 102, 95, 114, 101, 97, 100, 49, 95, 99, 111, 114, 101, 40, 102, 112, 45, 62, 102, 112, 46, 98, 103, 122, 102, 44, 32, 118, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 114, 101, 116, 33, 61, 48, 32, 124, 124, 32, 33, 104, 45, 62, 107, 101, 101, 112, 95, 115, 97, 109, 112, 108, 101, 115, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 116, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 98, 99, 102, 95, 115, 117, 98, 115, 101, 116, 95, 102, 111, 114, 109, 97, 116, 40, 104, 44, 118, 41, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 114, 101, 97, 100, 114, 101, 99, 40, 66, 71, 90, 70, 32, 42, 102, 112, 44, 32, 118, 111, 105, 100, 32, 42, 110, 117, 108, 108, 44, 32, 118, 111, 105, 100, 32, 42, 118, 118, 44, 32, 105, 110, 116, 32, 42, 116, 105, 100, 44, 32, 105, 110, 116, 32, 42, 98, 101, 103, 44, 32, 105, 110, 116, 32, 42, 101, 110, 100, 41, 10, 123, 10, 32, 32, 32, 32, 98, 99, 102, 49, 95, 116, 32, 42, 118, 32, 61, 32, 40, 98, 99, 102, 49, 95, 116, 32, 42, 41, 32, 118, 118, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 114, 101, 116, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 40, 114, 101, 116, 32, 61, 32, 98, 99, 102, 95, 114, 101, 97, 100, 49, 95, 99, 111, 114, 101, 40, 102, 112, 44, 32, 118, 41, 41, 32, 62, 61, 32, 48, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 42, 116, 105, 100, 32, 61, 32, 118, 45, 62, 114, 105, 100, 44, 32, 42, 98, 101, 103, 32, 61, 32, 118, 45, 62, 112, 111, 115, 44, 32, 42, 101, 110, 100, 32, 61, 32, 118, 45, 62, 112, 111, 115, 32, 43, 32, 118, 45, 62, 114, 108, 101, 110, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 116, 59, 10, 125, 10, 10, 115, 116, 97, 116, 105, 99, 32, 105, 110, 108, 105, 110, 101, 32, 118, 111, 105, 100, 32, 98, 99, 102, 49, 95, 115, 121, 110, 99, 95, 105, 100, 40, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 44, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 42, 115, 116, 114, 41, 10, 123, 10, 32, 32, 32, 32, 47, 47, 32, 115, 105, 110, 103, 108, 101, 32, 116, 121, 112, 101, 100, 32, 115, 116, 114, 105, 110, 103, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 100, 32, 38, 38, 32, 115, 116, 114, 99, 109, 112, 40, 108, 105, 110, 101, 45, 62, 100, 46, 105, 100, 44, 32, 34, 46, 34, 41, 32, 41, 32, 98, 99, 102, 95, 101, 110, 99, 95, 118, 99, 104, 97, 114, 40, 115, 116, 114, 44, 32, 115, 116, 114, 108, 101, 110, 40, 108, 105, 110, 101, 45, 62, 100, 46, 105, 100, 41, 44, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 100, 41, 59, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 98, 99, 102, 95, 101, 110, 99, 95, 115, 105, 122, 101, 40, 115, 116, 114, 44, 32, 48, 44, 32, 66, 67, 70, 95, 66, 84, 95, 67, 72, 65, 82, 41, 59, 10, 125, 10, 115, 116, 97, 116, 105, 99, 32, 105, 110, 108, 105, 110, 101, 32, 118, 111, 105, 100, 32, 98, 99, 102, 49, 95, 115, 121, 110, 99, 95, 97, 108, 108, 101, 108, 101, 115, 40, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 44, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 42, 115, 116, 114, 41, 10, 123, 10, 32, 32, 32, 32, 47, 47, 32, 108, 105, 115, 116, 32, 111, 102, 32, 116, 121, 112, 101, 100, 32, 115, 116, 114, 105, 110, 103, 115, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 108, 105, 110, 101, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 118, 99, 104, 97, 114, 40, 115, 116, 114, 44, 32, 115, 116, 114, 108, 101, 110, 40, 108, 105, 110, 101, 45, 62, 100, 46, 97, 108, 108, 101, 108, 101, 91, 105, 93, 41, 44, 32, 108, 105, 110, 101, 45, 62, 100, 46, 97, 108, 108, 101, 108, 101, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 108, 105, 110, 101, 45, 62, 114, 108, 101, 110, 32, 38, 38, 32, 108, 105, 110, 101, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 32, 41, 32, 108, 105, 110, 101, 45, 62, 114, 108, 101, 110, 32, 61, 32, 115, 116, 114, 108, 101, 110, 40, 108, 105, 110, 101, 45, 62, 100, 46, 97, 108, 108, 101, 108, 101, 91, 48, 93, 41, 59, 10, 125, 10, 115, 116, 97, 116, 105, 99, 32, 105, 110, 108, 105, 110, 101, 32, 118, 111, 105, 100, 32, 98, 99, 102, 49, 95, 115, 121, 110, 99, 95, 102, 105, 108, 116, 101, 114, 40, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 44, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 42, 115, 116, 114, 41, 10, 123, 10, 32, 32, 32, 32, 47, 47, 32, 116, 121, 112, 101, 100, 32, 118, 101, 99, 116, 111, 114, 32, 111, 102, 32, 105, 110, 116, 101, 103, 101, 114, 115, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 100, 46, 110, 95, 102, 108, 116, 32, 41, 32, 98, 99, 102, 95, 101, 110, 99, 95, 118, 105, 110, 116, 40, 115, 116, 114, 44, 32, 108, 105, 110, 101, 45, 62, 100, 46, 110, 95, 102, 108, 116, 44, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 108, 116, 44, 32, 45, 49, 41, 59, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 98, 99, 102, 95, 101, 110, 99, 95, 118, 105, 110, 116, 40, 115, 116, 114, 44, 32, 48, 44, 32, 48, 44, 32, 45, 49, 41, 59, 10, 125, 10, 10, 115, 116, 97, 116, 105, 99, 32, 105, 110, 108, 105, 110, 101, 32, 118, 111, 105, 100, 32, 98, 99, 102, 49, 95, 115, 121, 110, 99, 95, 105, 110, 102, 111, 40, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 44, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 42, 115, 116, 114, 41, 10, 123, 10, 32, 32, 32, 32, 47, 47, 32, 112, 97, 105, 114, 115, 32, 111, 102, 32, 116, 121, 112, 101, 100, 32, 118, 101, 99, 116, 111, 114, 115, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 44, 32, 105, 114, 109, 32, 61, 32, 45, 49, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 108, 105, 110, 101, 45, 62, 110, 95, 105, 110, 102, 111, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 105, 110, 102, 111, 95, 116, 32, 42, 105, 110, 102, 111, 32, 61, 32, 38, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 105, 110, 102, 111, 45, 62, 118, 112, 116, 114, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 109, 97, 114, 107, 101, 100, 32, 102, 111, 114, 32, 114, 101, 109, 111, 118, 97, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 114, 109, 32, 60, 32, 48, 32, 41, 32, 105, 114, 109, 32, 61, 32, 105, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 110, 95, 40, 105, 110, 102, 111, 45, 62, 118, 112, 116, 114, 32, 45, 32, 105, 110, 102, 111, 45, 62, 118, 112, 116, 114, 95, 111, 102, 102, 44, 32, 105, 110, 102, 111, 45, 62, 118, 112, 116, 114, 95, 108, 101, 110, 32, 43, 32, 105, 110, 102, 111, 45, 62, 118, 112, 116, 114, 95, 111, 102, 102, 44, 32, 115, 116, 114, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 114, 109, 32, 62, 61, 48, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 105, 110, 102, 111, 95, 116, 32, 116, 109, 112, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 114, 109, 93, 59, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 114, 109, 93, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 59, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 32, 61, 32, 116, 109, 112, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 105, 114, 109, 60, 61, 105, 32, 38, 38, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 114, 109, 93, 46, 118, 112, 116, 114, 32, 41, 32, 105, 114, 109, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 114, 109, 62, 61, 48, 32, 41, 32, 108, 105, 110, 101, 45, 62, 110, 95, 105, 110, 102, 111, 32, 61, 32, 105, 114, 109, 59, 10, 125, 10, 10, 115, 116, 97, 116, 105, 99, 32, 105, 110, 116, 32, 98, 99, 102, 49, 95, 115, 121, 110, 99, 40, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 41, 10, 123, 10, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 115, 104, 97, 114, 101, 100, 95, 111, 114, 105, 32, 61, 32, 108, 105, 110, 101, 45, 62, 115, 104, 97, 114, 101, 100, 46, 115, 59, 10, 32, 32, 32, 32, 115, 105, 122, 101, 95, 116, 32, 112, 114, 101, 118, 95, 108, 101, 110, 59, 10, 10, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 116, 109, 112, 32, 61, 32, 123, 48, 44, 48, 44, 48, 125, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 108, 105, 110, 101, 45, 62, 115, 104, 97, 114, 101, 100, 46, 108, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 78, 101, 119, 32, 108, 105, 110, 101, 32, 99, 114, 101, 97, 116, 101, 100, 32, 118, 105, 97, 32, 65, 80, 73, 44, 32, 66, 67, 70, 32, 100, 97, 116, 97, 32, 98, 108, 111, 99, 107, 115, 32, 100, 111, 32, 110, 111, 116, 32, 101, 120, 105, 115, 116, 46, 32, 71, 101, 116, 32, 105, 116, 32, 114, 101, 97, 100, 121, 32, 102, 111, 114, 32, 66, 67, 70, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 109, 112, 32, 61, 32, 108, 105, 110, 101, 45, 62, 115, 104, 97, 114, 101, 100, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 49, 95, 115, 121, 110, 99, 95, 105, 100, 40, 108, 105, 110, 101, 44, 32, 38, 116, 109, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 95, 115, 105, 122, 101, 91, 48, 93, 32, 61, 32, 116, 109, 112, 46, 108, 59, 32, 112, 114, 101, 118, 95, 108, 101, 110, 32, 61, 32, 116, 109, 112, 46, 108, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 49, 95, 115, 121, 110, 99, 95, 97, 108, 108, 101, 108, 101, 115, 40, 108, 105, 110, 101, 44, 32, 38, 116, 109, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 95, 115, 105, 122, 101, 91, 49, 93, 32, 61, 32, 116, 109, 112, 46, 108, 32, 45, 32, 112, 114, 101, 118, 95, 108, 101, 110, 59, 32, 112, 114, 101, 118, 95, 108, 101, 110, 32, 61, 32, 116, 109, 112, 46, 108, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 49, 95, 115, 121, 110, 99, 95, 102, 105, 108, 116, 101, 114, 40, 108, 105, 110, 101, 44, 32, 38, 116, 109, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 95, 115, 105, 122, 101, 91, 50, 93, 32, 61, 32, 116, 109, 112, 46, 108, 32, 45, 32, 112, 114, 101, 118, 95, 108, 101, 110, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 49, 95, 115, 121, 110, 99, 95, 105, 110, 102, 111, 40, 108, 105, 110, 101, 44, 32, 38, 116, 109, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 115, 104, 97, 114, 101, 100, 32, 61, 32, 116, 109, 112, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 100, 46, 115, 104, 97, 114, 101, 100, 95, 100, 105, 114, 116, 121, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 84, 104, 101, 32, 108, 105, 110, 101, 32, 119, 97, 115, 32, 101, 100, 105, 116, 101, 100, 44, 32, 117, 112, 100, 97, 116, 101, 32, 116, 104, 101, 32, 66, 67, 70, 32, 100, 97, 116, 97, 32, 98, 108, 111, 99, 107, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 40, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 38, 32, 66, 67, 70, 95, 85, 78, 95, 83, 84, 82, 41, 32, 41, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 40, 108, 105, 110, 101, 44, 66, 67, 70, 95, 85, 78, 95, 83, 84, 82, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 112, 116, 114, 95, 111, 114, 105, 32, 112, 111, 105, 110, 116, 115, 32, 116, 111, 32, 116, 104, 101, 32, 111, 114, 105, 103, 105, 110, 97, 108, 32, 117, 110, 99, 104, 97, 110, 103, 101, 100, 32, 66, 67, 70, 32, 100, 97, 116, 97, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 105, 110, 116, 56, 95, 116, 32, 42, 112, 116, 114, 95, 111, 114, 105, 32, 61, 32, 40, 117, 105, 110, 116, 56, 95, 116, 32, 42, 41, 32, 108, 105, 110, 101, 45, 62, 115, 104, 97, 114, 101, 100, 46, 115, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 73, 68, 58, 32, 115, 105, 110, 103, 108, 101, 32, 116, 121, 112, 101, 100, 32, 115, 116, 114, 105, 110, 103, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 100, 46, 115, 104, 97, 114, 101, 100, 95, 100, 105, 114, 116, 121, 32, 38, 32, 66, 67, 70, 49, 95, 68, 73, 82, 84, 89, 95, 73, 68, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 49, 95, 115, 121, 110, 99, 95, 105, 100, 40, 108, 105, 110, 101, 44, 32, 38, 116, 109, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 110, 95, 40, 112, 116, 114, 95, 111, 114, 105, 44, 32, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 95, 115, 105, 122, 101, 91, 48, 93, 44, 32, 38, 116, 109, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 116, 114, 95, 111, 114, 105, 32, 43, 61, 32, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 95, 115, 105, 122, 101, 91, 48, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 95, 115, 105, 122, 101, 91, 48, 93, 32, 61, 32, 116, 109, 112, 46, 108, 59, 32, 112, 114, 101, 118, 95, 108, 101, 110, 32, 61, 32, 116, 109, 112, 46, 108, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 82, 69, 70, 43, 65, 76, 84, 58, 32, 108, 105, 115, 116, 32, 111, 102, 32, 116, 121, 112, 101, 100, 32, 115, 116, 114, 105, 110, 103, 115, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 100, 46, 115, 104, 97, 114, 101, 100, 95, 100, 105, 114, 116, 121, 32, 38, 32, 66, 67, 70, 49, 95, 68, 73, 82, 84, 89, 95, 65, 76, 83, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 49, 95, 115, 121, 110, 99, 95, 97, 108, 108, 101, 108, 101, 115, 40, 108, 105, 110, 101, 44, 32, 38, 116, 109, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 110, 95, 40, 112, 116, 114, 95, 111, 114, 105, 44, 32, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 95, 115, 105, 122, 101, 91, 49, 93, 44, 32, 38, 116, 109, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 108, 105, 110, 101, 45, 62, 114, 108, 101, 110, 32, 38, 38, 32, 108, 105, 110, 101, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 32, 41, 32, 108, 105, 110, 101, 45, 62, 114, 108, 101, 110, 32, 61, 32, 115, 116, 114, 108, 101, 110, 40, 108, 105, 110, 101, 45, 62, 100, 46, 97, 108, 108, 101, 108, 101, 91, 48, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 116, 114, 95, 111, 114, 105, 32, 43, 61, 32, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 95, 115, 105, 122, 101, 91, 49, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 95, 115, 105, 122, 101, 91, 49, 93, 32, 61, 32, 116, 109, 112, 46, 108, 32, 45, 32, 112, 114, 101, 118, 95, 108, 101, 110, 59, 32, 112, 114, 101, 118, 95, 108, 101, 110, 32, 61, 32, 116, 109, 112, 46, 108, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 38, 32, 66, 67, 70, 95, 85, 78, 95, 70, 76, 84, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 70, 73, 76, 84, 69, 82, 58, 32, 116, 121, 112, 101, 100, 32, 118, 101, 99, 116, 111, 114, 32, 111, 102, 32, 105, 110, 116, 101, 103, 101, 114, 115, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 100, 46, 115, 104, 97, 114, 101, 100, 95, 100, 105, 114, 116, 121, 32, 38, 32, 66, 67, 70, 49, 95, 68, 73, 82, 84, 89, 95, 70, 76, 84, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 49, 95, 115, 121, 110, 99, 95, 102, 105, 108, 116, 101, 114, 40, 108, 105, 110, 101, 44, 32, 38, 116, 109, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 100, 46, 110, 95, 102, 108, 116, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 110, 95, 40, 112, 116, 114, 95, 111, 114, 105, 44, 32, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 95, 115, 105, 122, 101, 91, 50, 93, 44, 32, 38, 116, 109, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 118, 105, 110, 116, 40, 38, 116, 109, 112, 44, 32, 48, 44, 32, 48, 44, 32, 45, 49, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 116, 114, 95, 111, 114, 105, 32, 43, 61, 32, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 95, 115, 105, 122, 101, 91, 50, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 95, 115, 105, 122, 101, 91, 50, 93, 32, 61, 32, 116, 109, 112, 46, 108, 32, 45, 32, 112, 114, 101, 118, 95, 108, 101, 110, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 38, 32, 66, 67, 70, 95, 85, 78, 95, 73, 78, 70, 79, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 73, 78, 70, 79, 58, 32, 112, 97, 105, 114, 115, 32, 111, 102, 32, 116, 121, 112, 101, 100, 32, 118, 101, 99, 116, 111, 114, 115, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 100, 46, 115, 104, 97, 114, 101, 100, 95, 100, 105, 114, 116, 121, 32, 38, 32, 66, 67, 70, 49, 95, 68, 73, 82, 84, 89, 95, 73, 78, 70, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 49, 95, 115, 121, 110, 99, 95, 105, 110, 102, 111, 40, 108, 105, 110, 101, 44, 32, 38, 116, 109, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 116, 114, 95, 111, 114, 105, 32, 61, 32, 40, 117, 105, 110, 116, 56, 95, 116, 42, 41, 108, 105, 110, 101, 45, 62, 115, 104, 97, 114, 101, 100, 46, 115, 32, 43, 32, 108, 105, 110, 101, 45, 62, 115, 104, 97, 114, 101, 100, 46, 108, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 115, 105, 122, 101, 32, 61, 32, 108, 105, 110, 101, 45, 62, 115, 104, 97, 114, 101, 100, 46, 108, 32, 45, 32, 40, 115, 105, 122, 101, 95, 116, 41, 112, 116, 114, 95, 111, 114, 105, 32, 43, 32, 40, 115, 105, 122, 101, 95, 116, 41, 108, 105, 110, 101, 45, 62, 115, 104, 97, 114, 101, 100, 46, 115, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 115, 105, 122, 101, 32, 41, 32, 107, 112, 117, 116, 115, 110, 95, 40, 112, 116, 114, 95, 111, 114, 105, 44, 32, 115, 105, 122, 101, 44, 32, 38, 116, 109, 112, 41, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 108, 105, 110, 101, 45, 62, 115, 104, 97, 114, 101, 100, 46, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 115, 104, 97, 114, 101, 100, 32, 61, 32, 116, 109, 112, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 115, 104, 97, 114, 101, 100, 46, 115, 32, 33, 61, 32, 115, 104, 97, 114, 101, 100, 95, 111, 114, 105, 32, 38, 38, 32, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 38, 32, 66, 67, 70, 95, 85, 78, 95, 73, 78, 70, 79, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 82, 101, 97, 108, 108, 111, 99, 97, 116, 101, 100, 32, 108, 105, 110, 101, 45, 62, 115, 104, 97, 114, 101, 100, 46, 115, 32, 98, 108, 111, 99, 107, 32, 105, 110, 118, 97, 108, 105, 100, 97, 116, 101, 100, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 93, 46, 118, 112, 116, 114, 32, 112, 111, 105, 110, 116, 101, 114, 115, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 105, 122, 101, 95, 116, 32, 111, 102, 102, 95, 110, 101, 119, 32, 61, 32, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 95, 115, 105, 122, 101, 91, 48, 93, 32, 43, 32, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 95, 115, 105, 122, 101, 91, 49, 93, 32, 43, 32, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 95, 115, 105, 122, 101, 91, 50, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 108, 105, 110, 101, 45, 62, 110, 95, 105, 110, 102, 111, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 105, 110, 116, 56, 95, 116, 32, 42, 118, 112, 116, 114, 95, 102, 114, 101, 101, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 46, 118, 112, 116, 114, 95, 102, 114, 101, 101, 32, 63, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 46, 118, 112, 116, 114, 32, 45, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 46, 118, 112, 116, 114, 95, 111, 102, 102, 32, 58, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 46, 118, 112, 116, 114, 32, 61, 32, 40, 117, 105, 110, 116, 56, 95, 116, 42, 41, 32, 108, 105, 110, 101, 45, 62, 115, 104, 97, 114, 101, 100, 46, 115, 32, 43, 32, 111, 102, 102, 95, 110, 101, 119, 32, 43, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 46, 118, 112, 116, 114, 95, 111, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 111, 102, 102, 95, 110, 101, 119, 32, 43, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 46, 118, 112, 116, 114, 95, 108, 101, 110, 32, 43, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 46, 118, 112, 116, 114, 95, 111, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 118, 112, 116, 114, 95, 102, 114, 101, 101, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 118, 112, 116, 114, 95, 102, 114, 101, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 46, 118, 112, 116, 114, 95, 102, 114, 101, 101, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 32, 38, 38, 32, 108, 105, 110, 101, 45, 62, 110, 95, 102, 109, 116, 32, 38, 38, 32, 40, 33, 108, 105, 110, 101, 45, 62, 105, 110, 100, 105, 118, 46, 108, 32, 124, 124, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 100, 105, 118, 95, 100, 105, 114, 116, 121, 41, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 84, 104, 101, 32, 103, 101, 110, 111, 116, 121, 112, 101, 32, 102, 105, 101, 108, 100, 115, 32, 99, 104, 97, 110, 103, 101, 100, 32, 111, 114, 32, 97, 114, 101, 32, 110, 111, 116, 32, 112, 114, 101, 115, 101, 110, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 109, 112, 46, 108, 32, 61, 32, 116, 109, 112, 46, 109, 32, 61, 32, 48, 59, 32, 116, 109, 112, 46, 115, 32, 61, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 105, 44, 32, 105, 114, 109, 32, 61, 32, 45, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 108, 105, 110, 101, 45, 62, 110, 95, 102, 109, 116, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 102, 109, 116, 95, 116, 32, 42, 102, 109, 116, 32, 61, 32, 38, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 102, 109, 116, 45, 62, 112, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 109, 97, 114, 107, 101, 100, 32, 102, 111, 114, 32, 114, 101, 109, 111, 118, 97, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 114, 109, 32, 60, 32, 48, 32, 41, 32, 105, 114, 109, 32, 61, 32, 105, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 110, 95, 40, 102, 109, 116, 45, 62, 112, 32, 45, 32, 102, 109, 116, 45, 62, 112, 95, 111, 102, 102, 44, 32, 102, 109, 116, 45, 62, 112, 95, 108, 101, 110, 32, 43, 32, 102, 109, 116, 45, 62, 112, 95, 111, 102, 102, 44, 32, 38, 116, 109, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 114, 109, 32, 62, 61, 48, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 102, 109, 116, 95, 116, 32, 116, 102, 109, 116, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 114, 109, 93, 59, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 114, 109, 93, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 59, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 32, 61, 32, 116, 102, 109, 116, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 105, 114, 109, 60, 61, 105, 32, 38, 38, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 114, 109, 93, 46, 112, 32, 41, 32, 105, 114, 109, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 114, 109, 62, 61, 48, 32, 41, 32, 108, 105, 110, 101, 45, 62, 110, 95, 102, 109, 116, 32, 61, 32, 105, 114, 109, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 108, 105, 110, 101, 45, 62, 105, 110, 100, 105, 118, 46, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 105, 110, 100, 105, 118, 32, 61, 32, 116, 109, 112, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 82, 101, 97, 108, 108, 111, 99, 97, 116, 101, 100, 32, 108, 105, 110, 101, 45, 62, 105, 110, 100, 105, 118, 46, 115, 32, 98, 108, 111, 99, 107, 32, 105, 110, 118, 97, 108, 105, 100, 97, 116, 101, 100, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 93, 46, 112, 32, 112, 111, 105, 110, 116, 101, 114, 115, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 105, 122, 101, 95, 116, 32, 111, 102, 102, 95, 110, 101, 119, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 108, 105, 110, 101, 45, 62, 110, 95, 102, 109, 116, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 105, 110, 116, 56, 95, 116, 32, 42, 112, 95, 102, 114, 101, 101, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 46, 112, 95, 102, 114, 101, 101, 32, 63, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 46, 112, 32, 45, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 46, 112, 95, 111, 102, 102, 32, 58, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 46, 112, 32, 61, 32, 40, 117, 105, 110, 116, 56, 95, 116, 42, 41, 32, 108, 105, 110, 101, 45, 62, 105, 110, 100, 105, 118, 46, 115, 32, 43, 32, 111, 102, 102, 95, 110, 101, 119, 32, 43, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 46, 112, 95, 111, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 111, 102, 102, 95, 110, 101, 119, 32, 43, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 46, 112, 95, 108, 101, 110, 32, 43, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 46, 112, 95, 111, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 112, 95, 102, 114, 101, 101, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 112, 95, 102, 114, 101, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 46, 112, 95, 102, 114, 101, 101, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 108, 105, 110, 101, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 32, 41, 32, 108, 105, 110, 101, 45, 62, 110, 95, 102, 109, 116, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 115, 104, 97, 114, 101, 100, 95, 100, 105, 114, 116, 121, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 100, 105, 118, 95, 100, 105, 114, 116, 121, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 10, 98, 99, 102, 49, 95, 116, 32, 42, 98, 99, 102, 95, 99, 111, 112, 121, 40, 98, 99, 102, 49, 95, 116, 32, 42, 100, 115, 116, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 115, 114, 99, 41, 10, 123, 10, 32, 32, 32, 32, 98, 99, 102, 49, 95, 115, 121, 110, 99, 40, 115, 114, 99, 41, 59, 10, 10, 32, 32, 32, 32, 98, 99, 102, 95, 99, 108, 101, 97, 114, 40, 100, 115, 116, 41, 59, 10, 32, 32, 32, 32, 100, 115, 116, 45, 62, 114, 105, 100, 32, 32, 61, 32, 115, 114, 99, 45, 62, 114, 105, 100, 59, 10, 32, 32, 32, 32, 100, 115, 116, 45, 62, 112, 111, 115, 32, 32, 61, 32, 115, 114, 99, 45, 62, 112, 111, 115, 59, 10, 32, 32, 32, 32, 100, 115, 116, 45, 62, 114, 108, 101, 110, 32, 61, 32, 115, 114, 99, 45, 62, 114, 108, 101, 110, 59, 10, 32, 32, 32, 32, 100, 115, 116, 45, 62, 113, 117, 97, 108, 32, 61, 32, 115, 114, 99, 45, 62, 113, 117, 97, 108, 59, 10, 32, 32, 32, 32, 100, 115, 116, 45, 62, 110, 95, 105, 110, 102, 111, 32, 61, 32, 115, 114, 99, 45, 62, 110, 95, 105, 110, 102, 111, 59, 32, 100, 115, 116, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 32, 61, 32, 115, 114, 99, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 59, 10, 32, 32, 32, 32, 100, 115, 116, 45, 62, 110, 95, 102, 109, 116, 32, 61, 32, 115, 114, 99, 45, 62, 110, 95, 102, 109, 116, 59, 32, 100, 115, 116, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 32, 61, 32, 115, 114, 99, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 59, 10, 10, 32, 32, 32, 32, 100, 115, 116, 45, 62, 115, 104, 97, 114, 101, 100, 46, 109, 32, 61, 32, 100, 115, 116, 45, 62, 115, 104, 97, 114, 101, 100, 46, 108, 32, 61, 32, 115, 114, 99, 45, 62, 115, 104, 97, 114, 101, 100, 46, 108, 59, 10, 32, 32, 32, 32, 100, 115, 116, 45, 62, 115, 104, 97, 114, 101, 100, 46, 115, 32, 61, 32, 40, 99, 104, 97, 114, 42, 41, 32, 109, 97, 108, 108, 111, 99, 40, 100, 115, 116, 45, 62, 115, 104, 97, 114, 101, 100, 46, 108, 41, 59, 10, 32, 32, 32, 32, 109, 101, 109, 99, 112, 121, 40, 100, 115, 116, 45, 62, 115, 104, 97, 114, 101, 100, 46, 115, 44, 115, 114, 99, 45, 62, 115, 104, 97, 114, 101, 100, 46, 115, 44, 100, 115, 116, 45, 62, 115, 104, 97, 114, 101, 100, 46, 108, 41, 59, 10, 10, 32, 32, 32, 32, 100, 115, 116, 45, 62, 105, 110, 100, 105, 118, 46, 109, 32, 61, 32, 100, 115, 116, 45, 62, 105, 110, 100, 105, 118, 46, 108, 32, 61, 32, 115, 114, 99, 45, 62, 105, 110, 100, 105, 118, 46, 108, 59, 10, 32, 32, 32, 32, 100, 115, 116, 45, 62, 105, 110, 100, 105, 118, 46, 115, 32, 61, 32, 40, 99, 104, 97, 114, 42, 41, 32, 109, 97, 108, 108, 111, 99, 40, 100, 115, 116, 45, 62, 105, 110, 100, 105, 118, 46, 108, 41, 59, 10, 32, 32, 32, 32, 109, 101, 109, 99, 112, 121, 40, 100, 115, 116, 45, 62, 105, 110, 100, 105, 118, 46, 115, 44, 115, 114, 99, 45, 62, 105, 110, 100, 105, 118, 46, 115, 44, 100, 115, 116, 45, 62, 105, 110, 100, 105, 118, 46, 108, 41, 59, 10, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 115, 116, 59, 10, 125, 10, 98, 99, 102, 49, 95, 116, 32, 42, 98, 99, 102, 95, 100, 117, 112, 40, 98, 99, 102, 49, 95, 116, 32, 42, 115, 114, 99, 41, 10, 123, 10, 32, 32, 32, 32, 98, 99, 102, 49, 95, 116, 32, 42, 111, 117, 116, 32, 61, 32, 98, 99, 102, 95, 105, 110, 105, 116, 49, 40, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 98, 99, 102, 95, 99, 111, 112, 121, 40, 111, 117, 116, 44, 32, 115, 114, 99, 41, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 119, 114, 105, 116, 101, 40, 104, 116, 115, 70, 105, 108, 101, 32, 42, 104, 102, 112, 44, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 118, 41, 10, 123, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 104, 45, 62, 100, 105, 114, 116, 121, 32, 41, 32, 98, 99, 102, 95, 104, 100, 114, 95, 115, 121, 110, 99, 40, 104, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 41, 33, 61, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 91, 37, 115, 58, 37, 100, 32, 37, 115, 93, 32, 66, 114, 111, 107, 101, 110, 32, 86, 67, 70, 32, 114, 101, 99, 111, 114, 100, 44, 32, 116, 104, 101, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 99, 111, 108, 117, 109, 110, 115, 32, 97, 116, 32, 37, 115, 58, 37, 100, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 32, 116, 104, 101, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 115, 97, 109, 112, 108, 101, 115, 32, 40, 37, 100, 32, 118, 115, 32, 37, 100, 41, 46, 92, 110, 34, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 95, 95, 70, 73, 76, 69, 95, 95, 44, 95, 95, 76, 73, 78, 69, 95, 95, 44, 95, 95, 70, 85, 78, 67, 84, 73, 79, 78, 95, 95, 44, 98, 99, 102, 95, 115, 101, 113, 110, 97, 109, 101, 40, 104, 44, 118, 41, 44, 118, 45, 62, 112, 111, 115, 43, 49, 44, 32, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 44, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 104, 102, 112, 45, 62, 102, 111, 114, 109, 97, 116, 46, 102, 111, 114, 109, 97, 116, 32, 61, 61, 32, 118, 99, 102, 32, 124, 124, 32, 104, 102, 112, 45, 62, 102, 111, 114, 109, 97, 116, 46, 102, 111, 114, 109, 97, 116, 32, 61, 61, 32, 116, 101, 120, 116, 95, 102, 111, 114, 109, 97, 116, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 118, 99, 102, 95, 119, 114, 105, 116, 101, 40, 104, 102, 112, 44, 104, 44, 118, 41, 59, 10, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 118, 45, 62, 101, 114, 114, 99, 111, 100, 101, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 118, 99, 102, 95, 112, 97, 114, 115, 101, 49, 40, 41, 32, 101, 110, 99, 111, 117, 110, 116, 101, 114, 101, 100, 32, 97, 32, 110, 101, 119, 32, 99, 111, 110, 116, 105, 103, 32, 111, 114, 32, 116, 97, 103, 44, 32, 117, 110, 100, 101, 99, 108, 97, 114, 101, 100, 32, 105, 110, 32, 116, 104, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 104, 101, 97, 100, 101, 114, 46, 32, 32, 65, 116, 32, 116, 104, 105, 115, 32, 112, 111, 105, 110, 116, 44, 32, 116, 104, 101, 32, 104, 101, 97, 100, 101, 114, 32, 109, 117, 115, 116, 32, 104, 97, 118, 101, 32, 98, 101, 101, 110, 32, 112, 114, 105, 110, 116, 101, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 112, 114, 111, 99, 101, 101, 100, 105, 110, 103, 32, 119, 111, 117, 108, 100, 32, 108, 101, 97, 100, 32, 116, 111, 32, 97, 32, 98, 114, 111, 107, 101, 110, 32, 66, 67, 70, 32, 102, 105, 108, 101, 46, 32, 69, 114, 114, 111, 114, 115, 32, 109, 117, 115, 116, 32, 98, 101, 32, 99, 104, 101, 99, 107, 101, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 97, 110, 100, 32, 99, 108, 101, 97, 114, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 99, 97, 108, 108, 101, 114, 32, 98, 101, 102, 111, 114, 101, 32, 119, 101, 32, 99, 97, 110, 32, 112, 114, 111, 99, 101, 101, 100, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 91, 37, 115, 58, 37, 100, 32, 37, 115, 93, 32, 85, 110, 99, 104, 101, 99, 107, 101, 100, 32, 101, 114, 114, 111, 114, 32, 40, 37, 100, 41, 44, 32, 101, 120, 105, 116, 105, 110, 103, 46, 92, 110, 34, 44, 32, 95, 95, 70, 73, 76, 69, 95, 95, 44, 95, 95, 76, 73, 78, 69, 95, 95, 44, 95, 95, 70, 85, 78, 67, 84, 73, 79, 78, 95, 95, 44, 118, 45, 62, 101, 114, 114, 99, 111, 100, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 105, 116, 40, 49, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 98, 99, 102, 49, 95, 115, 121, 110, 99, 40, 118, 41, 59, 32, 32, 32, 47, 47, 32, 99, 104, 101, 99, 107, 32, 105, 102, 32, 116, 104, 101, 32, 66, 67, 70, 32, 114, 101, 99, 111, 114, 100, 32, 119, 97, 115, 32, 109, 111, 100, 105, 102, 105, 101, 100, 10, 10, 32, 32, 32, 32, 66, 71, 90, 70, 32, 42, 102, 112, 32, 61, 32, 104, 102, 112, 45, 62, 102, 112, 46, 98, 103, 122, 102, 59, 10, 32, 32, 32, 32, 117, 105, 110, 116, 51, 50, 95, 116, 32, 120, 91, 56, 93, 59, 10, 32, 32, 32, 32, 120, 91, 48, 93, 32, 61, 32, 118, 45, 62, 115, 104, 97, 114, 101, 100, 46, 108, 32, 43, 32, 50, 52, 59, 32, 47, 47, 32, 116, 111, 32, 105, 110, 99, 108, 117, 100, 101, 32, 115, 105, 120, 32, 51, 50, 45, 98, 105, 116, 32, 105, 110, 116, 101, 103, 101, 114, 115, 10, 32, 32, 32, 32, 120, 91, 49, 93, 32, 61, 32, 118, 45, 62, 105, 110, 100, 105, 118, 46, 108, 59, 10, 32, 32, 32, 32, 109, 101, 109, 99, 112, 121, 40, 120, 32, 43, 32, 50, 44, 32, 118, 44, 32, 49, 54, 41, 59, 10, 32, 32, 32, 32, 120, 91, 54, 93, 32, 61, 32, 40, 117, 105, 110, 116, 51, 50, 95, 116, 41, 118, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 60, 60, 49, 54, 32, 124, 32, 118, 45, 62, 110, 95, 105, 110, 102, 111, 59, 10, 32, 32, 32, 32, 120, 91, 55, 93, 32, 61, 32, 40, 117, 105, 110, 116, 51, 50, 95, 116, 41, 118, 45, 62, 110, 95, 102, 109, 116, 60, 60, 50, 52, 32, 124, 32, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 98, 103, 122, 102, 95, 119, 114, 105, 116, 101, 40, 102, 112, 44, 32, 120, 44, 32, 51, 50, 41, 32, 33, 61, 32, 51, 50, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 98, 103, 122, 102, 95, 119, 114, 105, 116, 101, 40, 102, 112, 44, 32, 118, 45, 62, 115, 104, 97, 114, 101, 100, 46, 115, 44, 32, 118, 45, 62, 115, 104, 97, 114, 101, 100, 46, 108, 41, 32, 33, 61, 32, 118, 45, 62, 115, 104, 97, 114, 101, 100, 46, 108, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 98, 103, 122, 102, 95, 119, 114, 105, 116, 101, 40, 102, 112, 44, 32, 118, 45, 62, 105, 110, 100, 105, 118, 46, 115, 44, 32, 118, 45, 62, 105, 110, 100, 105, 118, 46, 108, 41, 32, 33, 61, 32, 118, 45, 62, 105, 110, 100, 105, 118, 46, 108, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 10, 47, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 10, 32, 42, 42, 42, 32, 86, 67, 70, 32, 104, 101, 97, 100, 101, 114, 32, 73, 47, 79, 32, 42, 42, 42, 10, 32, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 47, 10, 10, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 118, 99, 102, 95, 104, 100, 114, 95, 114, 101, 97, 100, 40, 104, 116, 115, 70, 105, 108, 101, 32, 42, 102, 112, 41, 10, 123, 10, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 116, 120, 116, 44, 32, 42, 115, 32, 61, 32, 38, 102, 112, 45, 62, 108, 105, 110, 101, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 59, 10, 32, 32, 32, 32, 104, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 110, 105, 116, 40, 34, 114, 34, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 33, 104, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 32, 34, 91, 69, 58, 58, 37, 115, 93, 32, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 97, 108, 108, 111, 99, 97, 116, 101, 32, 98, 99, 102, 32, 104, 101, 97, 100, 101, 114, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 116, 120, 116, 46, 108, 32, 61, 32, 116, 120, 116, 46, 109, 32, 61, 32, 48, 59, 32, 116, 120, 116, 46, 115, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 104, 116, 115, 95, 103, 101, 116, 108, 105, 110, 101, 40, 102, 112, 44, 32, 75, 83, 95, 83, 69, 80, 95, 76, 73, 78, 69, 44, 32, 115, 41, 32, 62, 61, 32, 48, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 115, 45, 62, 108, 32, 61, 61, 32, 48, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 115, 45, 62, 115, 91, 48, 93, 32, 33, 61, 32, 39, 35, 39, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 104, 116, 115, 95, 118, 101, 114, 98, 111, 115, 101, 32, 62, 61, 32, 50, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 32, 34, 91, 69, 58, 58, 37, 115, 93, 32, 110, 111, 32, 115, 97, 109, 112, 108, 101, 32, 108, 105, 110, 101, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 116, 120, 116, 46, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 100, 101, 115, 116, 114, 111, 121, 40, 104, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 115, 45, 62, 115, 91, 49, 93, 32, 33, 61, 32, 39, 35, 39, 32, 38, 38, 32, 102, 112, 45, 62, 102, 110, 95, 97, 117, 120, 41, 32, 123, 32, 47, 47, 32, 105, 110, 115, 101, 114, 116, 32, 99, 111, 110, 116, 105, 103, 115, 32, 104, 101, 114]);
fileData0.push.apply(fileData0, [101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 100, 114, 101, 116, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 103, 122, 70, 105, 108, 101, 32, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 116, 114, 101, 97, 109, 95, 116, 32, 42, 107, 115, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 116, 109, 112, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 109, 112, 46, 108, 32, 61, 32, 116, 109, 112, 46, 109, 32, 61, 32, 48, 59, 32, 116, 109, 112, 46, 115, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 32, 61, 32, 103, 122, 111, 112, 101, 110, 40, 102, 112, 45, 62, 102, 110, 95, 97, 117, 120, 44, 32, 34, 114, 34, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 32, 61, 32, 107, 115, 95, 105, 110, 105, 116, 40, 102, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 107, 115, 95, 103, 101, 116, 117, 110, 116, 105, 108, 40, 107, 115, 44, 32, 48, 44, 32, 38, 116, 109, 112, 44, 32, 38, 100, 114, 101, 116, 41, 32, 62, 61, 32, 48, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 99, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 40, 34, 35, 35, 99, 111, 110, 116, 105, 103, 61, 60, 73, 68, 61, 34, 44, 32, 38, 116, 120, 116, 41, 59, 32, 107, 112, 117, 116, 115, 40, 116, 109, 112, 46, 115, 44, 32, 38, 116, 120, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 95, 103, 101, 116, 117, 110, 116, 105, 108, 40, 107, 115, 44, 32, 48, 44, 32, 38, 116, 109, 112, 44, 32, 38, 100, 114, 101, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 40, 34, 44, 108, 101, 110, 103, 116, 104, 61, 34, 44, 32, 38, 116, 120, 116, 41, 59, 32, 107, 112, 117, 116, 119, 40, 97, 116, 111, 108, 40, 116, 109, 112, 46, 115, 41, 44, 32, 38, 116, 120, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 110, 40, 34, 62, 92, 110, 34, 44, 32, 50, 44, 32, 38, 116, 120, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 100, 114, 101, 116, 32, 33, 61, 32, 39, 92, 110, 39, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 40, 99, 32, 61, 32, 107, 115, 95, 103, 101, 116, 99, 40, 107, 115, 41, 41, 32, 33, 61, 32, 39, 92, 110, 39, 32, 38, 38, 32, 99, 32, 33, 61, 32, 45, 49, 41, 59, 32, 47, 47, 32, 115, 107, 105, 112, 32, 116, 104, 101, 32, 114, 101, 115, 116, 32, 111, 102, 32, 116, 104, 101, 32, 108, 105, 110, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 116, 109, 112, 46, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 95, 100, 101, 115, 116, 114, 111, 121, 40, 107, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 103, 122, 99, 108, 111, 115, 101, 40, 102, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 110, 40, 115, 45, 62, 115, 44, 32, 115, 45, 62, 108, 44, 32, 38, 116, 120, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 99, 40, 39, 92, 110, 39, 44, 32, 38, 116, 120, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 115, 45, 62, 115, 91, 49, 93, 32, 33, 61, 32, 39, 35, 39, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 116, 120, 116, 46, 115, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 91, 37, 115, 58, 37, 100, 32, 37, 115, 93, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 114, 101, 97, 100, 32, 116, 104, 101, 32, 104, 101, 97, 100, 101, 114, 92, 110, 34, 44, 32, 95, 95, 70, 73, 76, 69, 95, 95, 44, 95, 95, 76, 73, 78, 69, 95, 95, 44, 95, 95, 70, 85, 78, 67, 84, 73, 79, 78, 95, 95, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 112, 97, 114, 115, 101, 40, 104, 44, 32, 116, 120, 116, 46, 115, 41, 59, 10, 10, 32, 32, 32, 32, 47, 47, 32, 99, 104, 101, 99, 107, 32, 116, 97, 98, 105, 120, 32, 105, 110, 100, 101, 120, 44, 32, 97, 114, 101, 32, 97, 108, 108, 32, 99, 111, 110, 116, 105, 103, 115, 32, 108, 105, 115, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 101, 97, 100, 101, 114, 63, 32, 97, 100, 100, 32, 116, 104, 101, 32, 109, 105, 115, 115, 105, 110, 103, 32, 111, 110, 101, 115, 10, 32, 32, 32, 32, 116, 98, 120, 95, 116, 32, 42, 105, 100, 120, 32, 61, 32, 116, 98, 120, 95, 105, 110, 100, 101, 120, 95, 108, 111, 97, 100, 40, 102, 112, 45, 62, 102, 110, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 100, 120, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 105, 44, 32, 110, 44, 32, 110, 101, 101, 100, 95, 115, 121, 110, 99, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 42, 110, 97, 109, 101, 115, 32, 61, 32, 116, 98, 120, 95, 115, 101, 113, 110, 97, 109, 101, 115, 40, 105, 100, 120, 44, 32, 38, 110, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 110, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 104, 114, 101, 99, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 103, 101, 116, 95, 104, 114, 101, 99, 40, 104, 44, 32, 66, 67, 70, 95, 72, 76, 95, 67, 84, 71, 44, 32, 34, 73, 68, 34, 44, 32, 40, 99, 104, 97, 114, 42, 41, 32, 110, 97, 109, 101, 115, 91, 105, 93, 44, 32, 78, 85, 76, 76, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 104, 114, 101, 99, 32, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 104, 114, 101, 99, 32, 61, 32, 40, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 42, 41, 32, 99, 97, 108, 108, 111, 99, 40, 49, 44, 115, 105, 122, 101, 111, 102, 40, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 104, 114, 101, 99, 45, 62, 107, 101, 121, 32, 61, 32, 115, 116, 114, 100, 117, 112, 40, 34, 99, 111, 110, 116, 105, 103, 34, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 97, 100, 100, 95, 107, 101, 121, 40, 104, 114, 101, 99, 44, 32, 34, 73, 68, 34, 44, 32, 115, 116, 114, 108, 101, 110, 40, 34, 73, 68, 34, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 115, 101, 116, 95, 118, 97, 108, 40, 104, 114, 101, 99, 44, 32, 104, 114, 101, 99, 45, 62, 110, 107, 101, 121, 115, 45, 49, 44, 32, 40, 99, 104, 97, 114, 42, 41, 32, 110, 97, 109, 101, 115, 91, 105, 93, 44, 32, 115, 116, 114, 108, 101, 110, 40, 110, 97, 109, 101, 115, 91, 105, 93, 41, 44, 32, 48, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 100, 100, 95, 104, 114, 101, 99, 40, 104, 44, 32, 104, 114, 101, 99, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 101, 101, 100, 95, 115, 121, 110, 99, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 110, 97, 109, 101, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 98, 120, 95, 100, 101, 115, 116, 114, 111, 121, 40, 105, 100, 120, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 110, 101, 101, 100, 95, 115, 121, 110, 99, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 115, 121, 110, 99, 40, 104, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 116, 120, 116, 46, 115, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 104, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 115, 101, 116, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 102, 110, 97, 109, 101, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 44, 32, 110, 59, 10, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 42, 108, 105, 110, 101, 115, 32, 61, 32, 104, 116, 115, 95, 114, 101, 97, 100, 108, 105, 110, 101, 115, 40, 102, 110, 97, 109, 101, 44, 32, 38, 110, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 108, 105, 110, 101, 115, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 49, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 110, 45, 49, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 104, 114, 101, 99, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 112, 97, 114, 115, 101, 95, 108, 105, 110, 101, 40, 104, 100, 114, 44, 108, 105, 110, 101, 115, 91, 105, 93, 44, 38, 107, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 104, 114, 101, 99, 32, 41, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 100, 100, 95, 104, 114, 101, 99, 40, 104, 100, 114, 44, 32, 104, 114, 101, 99, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 108, 105, 110, 101, 115, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 112, 97, 114, 115, 101, 95, 115, 97, 109, 112, 108, 101, 95, 108, 105, 110, 101, 40, 104, 100, 114, 44, 108, 105, 110, 101, 115, 91, 110, 45, 49, 93, 41, 59, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 108, 105, 110, 101, 115, 91, 110, 45, 49, 93, 41, 59, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 108, 105, 110, 101, 115, 41, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 115, 121, 110, 99, 40, 104, 100, 114, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 10, 115, 116, 97, 116, 105, 99, 32, 118, 111, 105, 100, 32, 95, 98, 99, 102, 95, 104, 114, 101, 99, 95, 102, 111, 114, 109, 97, 116, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 104, 114, 101, 99, 44, 32, 105, 110, 116, 32, 105, 115, 95, 98, 99, 102, 44, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 42, 115, 116, 114, 41, 10, 123, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 104, 114, 101, 99, 45, 62, 118, 97, 108, 117, 101, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 106, 44, 32, 110, 111, 117, 116, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 112, 114, 105, 110, 116, 102, 40, 115, 116, 114, 44, 32, 34, 35, 35, 37, 115, 61, 60, 34, 44, 32, 104, 114, 101, 99, 45, 62, 107, 101, 121, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 106, 61, 48, 59, 32, 106, 60, 104, 114, 101, 99, 45, 62, 110, 107, 101, 121, 115, 59, 32, 106, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 100, 111, 32, 110, 111, 116, 32, 111, 117, 116, 112, 117, 116, 32, 73, 68, 88, 32, 105, 102, 32, 111, 117, 116, 112, 117, 116, 32, 105, 115, 32, 86, 67, 70, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 105, 115, 95, 98, 99, 102, 32, 38, 38, 32, 33, 115, 116, 114, 99, 109, 112, 40, 34, 73, 68, 88, 34, 44, 104, 114, 101, 99, 45, 62, 107, 101, 121, 115, 91, 106, 93, 41, 32, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 110, 111, 117, 116, 32, 41, 32, 107, 112, 117, 116, 99, 40, 39, 44, 39, 44, 115, 116, 114, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 112, 114, 105, 110, 116, 102, 40, 115, 116, 114, 44, 34, 37, 115, 61, 37, 115, 34, 44, 32, 104, 114, 101, 99, 45, 62, 107, 101, 121, 115, 91, 106, 93, 44, 32, 104, 114, 101, 99, 45, 62, 118, 97, 108, 115, 91, 106, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 111, 117, 116, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 112, 114, 105, 110, 116, 102, 40, 115, 116, 114, 44, 34, 62, 92, 110, 34, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 112, 114, 105, 110, 116, 102, 40, 115, 116, 114, 44, 34, 35, 35, 37, 115, 61, 37, 115, 92, 110, 34, 44, 32, 104, 114, 101, 99, 45, 62, 107, 101, 121, 44, 104, 114, 101, 99, 45, 62, 118, 97, 108, 117, 101, 41, 59, 10, 125, 10, 10, 118, 111, 105, 100, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 102, 111, 114, 109, 97, 116, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 104, 114, 101, 99, 44, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 42, 115, 116, 114, 41, 10, 123, 10, 32, 32, 32, 32, 95, 98, 99, 102, 95, 104, 114, 101, 99, 95, 102, 111, 114, 109, 97, 116, 40, 104, 114, 101, 99, 44, 48, 44, 115, 116, 114, 41, 59, 10, 125, 10, 99, 104, 97, 114, 32, 42, 98, 99, 102, 95, 104, 100, 114, 95, 102, 109, 116, 95, 116, 101, 120, 116, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 105, 110, 116, 32, 105, 115, 95, 98, 99, 102, 44, 32, 105, 110, 116, 32, 42, 108, 101, 110, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 116, 120, 116, 32, 61, 32, 123, 48, 44, 48, 44, 48, 125, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 104, 100, 114, 45, 62, 110, 104, 114, 101, 99, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 95, 98, 99, 102, 95, 104, 114, 101, 99, 95, 102, 111, 114, 109, 97, 116, 40, 104, 100, 114, 45, 62, 104, 114, 101, 99, 91, 105, 93, 44, 32, 105, 115, 95, 98, 99, 102, 44, 32, 38, 116, 120, 116, 41, 59, 10, 10, 32, 32, 32, 32, 107, 115, 112, 114, 105, 110, 116, 102, 40, 38, 116, 120, 116, 44, 34, 35, 67, 72, 82, 79, 77, 92, 116, 80, 79, 83, 92, 116, 73, 68, 92, 116, 82, 69, 70, 92, 116, 65, 76, 84, 92, 116, 81, 85, 65, 76, 92, 116, 70, 73, 76, 84, 69, 82, 92, 116, 73, 78, 70, 79, 34, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 100, 114, 41, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 112, 114, 105, 110, 116, 102, 40, 38, 116, 120, 116, 44, 34, 92, 116, 70, 79, 82, 77, 65, 84, 34, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 100, 114, 41, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 112, 114, 105, 110, 116, 102, 40, 38, 116, 120, 116, 44, 34, 92, 116, 37, 115, 34, 44, 32, 104, 100, 114, 45, 62, 115, 97, 109, 112, 108, 101, 115, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 107, 115, 112, 114, 105, 110, 116, 102, 40, 38, 116, 120, 116, 44, 34, 92, 110, 34, 41, 59, 10, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 108, 101, 110, 32, 41, 32, 42, 108, 101, 110, 32, 61, 32, 116, 120, 116, 46, 108, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 120, 116, 46, 115, 59, 10, 125, 10, 10, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 42, 98, 99, 102, 95, 104, 100, 114, 95, 115, 101, 113, 110, 97, 109, 101, 115, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 44, 32, 105, 110, 116, 32, 42, 110, 41, 10, 123, 10, 32, 32, 32, 32, 118, 100, 105, 99, 116, 95, 116, 32, 42, 100, 32, 61, 32, 40, 118, 100, 105, 99, 116, 95, 116, 42, 41, 104, 45, 62, 100, 105, 99, 116, 91, 66, 67, 70, 95, 68, 84, 95, 67, 84, 71, 93, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 116, 105, 100, 44, 32, 109, 32, 61, 32, 107, 104, 95, 115, 105, 122, 101, 40, 100, 41, 59, 10, 32, 32, 32, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 42, 110, 97, 109, 101, 115, 32, 61, 32, 40, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 42, 42, 41, 32, 99, 97, 108, 108, 111, 99, 40, 109, 44, 115, 105, 122, 101, 111, 102, 40, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 42, 41, 41, 59, 10, 32, 32, 32, 32, 107, 104, 105, 110, 116, 95, 116, 32, 107, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 107, 61, 107, 104, 95, 98, 101, 103, 105, 110, 40, 100, 41, 59, 32, 107, 60, 107, 104, 95, 101, 110, 100, 40, 100, 41, 59, 32, 107, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 107, 104, 95, 101, 120, 105, 115, 116, 40, 100, 44, 107, 41, 32, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 105, 100, 32, 61, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 107, 41, 46, 105, 100, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 32, 116, 105, 100, 60, 109, 32, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 115, 91, 116, 105, 100, 93, 32, 61, 32, 107, 104, 95, 107, 101, 121, 40, 100, 44, 107, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 47, 47, 32, 115, 97, 110, 105, 116, 121, 32, 99, 104, 101, 99, 107, 58, 32, 116, 104, 101, 114, 101, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 110, 111, 32, 103, 97, 112, 115, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 116, 105, 100, 61, 48, 59, 32, 116, 105, 100, 60, 109, 59, 32, 116, 105, 100, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 110, 97, 109, 101, 115, 91, 116, 105, 100, 93, 41, 59, 10, 32, 32, 32, 32, 42, 110, 32, 61, 32, 109, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 97, 109, 101, 115, 59, 10, 125, 10, 10, 105, 110, 116, 32, 118, 99, 102, 95, 104, 100, 114, 95, 119, 114, 105, 116, 101, 40, 104, 116, 115, 70, 105, 108, 101, 32, 42, 102, 112, 44, 32, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 104, 108, 101, 110, 59, 10, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 104, 116, 120, 116, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 102, 109, 116, 95, 116, 101, 120, 116, 40, 104, 44, 32, 48, 44, 32, 38, 104, 108, 101, 110, 41, 59, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 104, 108, 101, 110, 32, 38, 38, 32, 104, 116, 120, 116, 91, 104, 108, 101, 110, 45, 49, 93, 32, 61, 61, 32, 48, 41, 32, 45, 45, 104, 108, 101, 110, 59, 32, 47, 47, 32, 107, 105, 108, 108, 32, 116, 114, 97, 105, 108, 105, 110, 103, 32, 122, 101, 114, 111, 115, 10, 32, 32, 32, 32, 105, 110, 116, 32, 114, 101, 116, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 102, 112, 45, 62, 102, 111, 114, 109, 97, 116, 46, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 33, 61, 110, 111, 95, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 32, 61, 32, 98, 103, 122, 102, 95, 119, 114, 105, 116, 101, 40, 102, 112, 45, 62, 102, 112, 46, 98, 103, 122, 102, 44, 32, 104, 116, 120, 116, 44, 32, 104, 108, 101, 110, 41, 59, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 32, 61, 32, 104, 119, 114, 105, 116, 101, 40, 102, 112, 45, 62, 102, 112, 46, 104, 102, 105, 108, 101, 44, 32, 104, 116, 120, 116, 44, 32, 104, 108, 101, 110, 41, 59, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 116, 120, 116, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 116, 60, 48, 32, 63, 32, 45, 49, 32, 58, 32, 48, 59, 10, 125, 10, 10, 47, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 10, 32, 42, 42, 42, 32, 84, 121, 112, 101, 100, 32, 118, 97, 108, 117, 101, 32, 73, 47, 79, 32, 42, 42, 42, 10, 32, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 47, 10, 10, 118, 111, 105, 100, 32, 98, 99, 102, 95, 101, 110, 99, 95, 118, 105, 110, 116, 40, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 42, 115, 44, 32, 105, 110, 116, 32, 110, 44, 32, 105, 110, 116, 51, 50, 95, 116, 32, 42, 97, 44, 32, 105, 110, 116, 32, 119, 115, 105, 122, 101, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 51, 50, 95, 116, 32, 109, 97, 120, 32, 61, 32, 73, 78, 84, 51, 50, 95, 77, 73, 78, 32, 43, 32, 49, 44, 32, 109, 105, 110, 32, 61, 32, 73, 78, 84, 51, 50, 95, 77, 65, 88, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 110, 32, 61, 61, 32, 48, 41, 32, 98, 99, 102, 95, 101, 110, 99, 95, 115, 105, 122, 101, 40, 115, 44, 32, 48, 44, 32, 66, 67, 70, 95, 66, 84, 95, 78, 85, 76, 76, 41, 59, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 110, 32, 61, 61, 32, 49, 41, 32, 98, 99, 102, 95, 101, 110, 99, 95, 105, 110, 116, 49, 40, 115, 44, 32, 97, 91, 48, 93, 41, 59, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 119, 115, 105, 122, 101, 32, 60, 61, 32, 48, 41, 32, 119, 115, 105, 122, 101, 32, 61, 32, 110, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 110, 59, 32, 43, 43, 105, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 97, 91, 105, 93, 32, 61, 61, 32, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 109, 105, 115, 115, 105, 110, 103, 32, 124, 124, 32, 97, 91, 105, 93, 32, 61, 61, 32, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 32, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 109, 97, 120, 32, 60, 32, 97, 91, 105, 93, 41, 32, 109, 97, 120, 32, 61, 32, 97, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 109, 105, 110, 32, 62, 32, 97, 91, 105, 93, 41, 32, 109, 105, 110, 32, 61, 32, 97, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 109, 97, 120, 32, 60, 61, 32, 73, 78, 84, 56, 95, 77, 65, 88, 32, 38, 38, 32, 109, 105, 110, 32, 62, 32, 98, 99, 102, 95, 105, 110, 116, 56, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 115, 105, 122, 101, 40, 115, 44, 32, 119, 115, 105, 122, 101, 44, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 56, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 110, 59, 32, 43, 43, 105, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 97, 91, 105, 93, 61, 61, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 32, 41, 32, 107, 112, 117, 116, 99, 40, 98, 99, 102, 95, 105, 110, 116, 56, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 97, 91, 105, 93, 61, 61, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 109, 105, 115, 115, 105, 110, 103, 32, 41, 32, 107, 112, 117, 116, 99, 40, 98, 99, 102, 95, 105, 110, 116, 56, 95, 109, 105, 115, 115, 105, 110, 103, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 107, 112, 117, 116, 99, 40, 97, 91, 105, 93, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 109, 97, 120, 32, 60, 61, 32, 73, 78, 84, 49, 54, 95, 77, 65, 88, 32, 38, 38, 32, 109, 105, 110, 32, 62, 32, 98, 99, 102, 95, 105, 110, 116, 49, 54, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 115, 105, 122, 101, 40, 115, 44, 32, 119, 115, 105, 122, 101, 44, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 49, 54, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 110, 59, 32, 43, 43, 105, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 49, 54, 95, 116, 32, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 97, 91, 105, 93, 61, 61, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 32, 41, 32, 120, 32, 61, 32, 98, 99, 102, 95, 105, 110, 116, 49, 54, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 97, 91, 105, 93, 61, 61, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 109, 105, 115, 115, 105, 110, 103, 32, 41, 32, 120, 32, 61, 32, 98, 99, 102, 95, 105, 110, 116, 49, 54, 95, 109, 105, 115, 115, 105, 110, 103, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 120, 32, 61, 32, 97, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 110, 40, 40, 99, 104, 97, 114, 42, 41, 38, 120, 44, 32, 50, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 115, 105, 122, 101, 40, 115, 44, 32, 119, 115, 105, 122, 101, 44, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 51, 50, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 110, 59, 32, 43, 43, 105, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 51, 50, 95, 116, 32, 120, 32, 61, 32, 97, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 110, 40, 40, 99, 104, 97, 114, 42, 41, 38, 120, 44, 32, 52, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 125, 10, 10, 118, 111, 105, 100, 32, 98, 99, 102, 95, 101, 110, 99, 95, 118, 102, 108, 111, 97, 116, 40, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 42, 115, 44, 32, 105, 110, 116, 32, 110, 44, 32, 102, 108, 111, 97, 116, 32, 42, 97, 41, 10, 123, 10, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 115, 105, 122, 101, 40, 115, 44, 32, 110, 44, 32, 66, 67, 70, 95, 66, 84, 95, 70, 76, 79, 65, 84, 41, 59, 10, 32, 32, 32, 32, 107, 112, 117, 116, 115, 110, 40, 40, 99, 104, 97, 114, 42, 41, 97, 44, 32, 110, 32, 60, 60, 32, 50, 44, 32, 115, 41, 59, 10, 125, 10, 10, 118, 111, 105, 100, 32, 98, 99, 102, 95, 101, 110, 99, 95, 118, 99, 104, 97, 114, 40, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 42, 115, 44, 32, 105, 110, 116, 32, 108, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 97, 41, 10, 123, 10, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 115, 105, 122, 101, 40, 115, 44, 32, 108, 44, 32, 66, 67, 70, 95, 66, 84, 95, 67, 72, 65, 82, 41, 59, 10, 32, 32, 32, 32, 107, 112, 117, 116, 115, 110, 40, 97, 44, 32, 108, 44, 32, 115, 41, 59, 10, 125, 10, 10, 118, 111, 105, 100, 32, 98, 99, 102, 95, 102, 109, 116, 95, 97, 114, 114, 97, 121, 40, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 42, 115, 44, 32, 105, 110, 116, 32, 110, 44, 32, 105, 110, 116, 32, 116, 121, 112, 101, 44, 32, 118, 111, 105, 100, 32, 42, 100, 97, 116, 97, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 106, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 110, 32, 61, 61, 32, 48, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 99, 40, 39, 46, 39, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 102, 32, 40, 116, 121, 112, 101, 32, 61, 61, 32, 66, 67, 70, 95, 66, 84, 95, 67, 72, 65, 82, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 112, 32, 61, 32, 40, 99, 104, 97, 114, 42, 41, 100, 97, 116, 97, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 106, 32, 61, 32, 48, 59, 32, 106, 32, 60, 32, 110, 32, 38, 38, 32, 42, 112, 59, 32, 43, 43, 106, 44, 32, 43, 43, 112, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 112, 61, 61, 98, 99, 102, 95, 115, 116, 114, 95, 109, 105, 115, 115, 105, 110, 103, 32, 41, 32, 107, 112, 117, 116, 99, 40, 39, 46, 39, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 107, 112, 117, 116, 99, 40, 42, 112, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 35, 100, 101, 102, 105, 110, 101, 32, 66, 82, 65, 78, 67, 72, 40, 116, 121, 112, 101, 95, 116, 44, 32, 105, 115, 95, 109, 105, 115, 115, 105, 110, 103, 44, 32, 105, 115, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 44, 32, 107, 112, 114, 105, 110, 116, 41, 32, 123, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 95, 116, 32, 42, 112, 32, 61, 32, 40, 116, 121, 112, 101, 95, 116, 32, 42, 41, 32, 100, 97, 116, 97, 59, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 106, 61, 48, 59, 32, 106, 60, 110, 59, 32, 106, 43, 43, 41, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 115, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 32, 41, 32, 98, 114, 101, 97, 107, 59, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 106, 32, 41, 32, 107, 112, 117, 116, 99, 40, 39, 44, 39, 44, 32, 115, 41, 59, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 115, 95, 109, 105, 115, 115, 105, 110, 103, 32, 41, 32, 107, 112, 117, 116, 99, 40, 39, 46, 39, 44, 32, 115, 41, 59, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 107, 112, 114, 105, 110, 116, 59, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 119, 105, 116, 99, 104, 32, 40, 116, 121, 112, 101, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 115, 101, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 56, 58, 32, 32, 66, 82, 65, 78, 67, 72, 40, 105, 110, 116, 56, 95, 116, 44, 32, 32, 112, 91, 106, 93, 61, 61, 98, 99, 102, 95, 105, 110, 116, 56, 95, 109, 105, 115, 115, 105, 110, 103, 44, 32, 32, 112, 91, 106, 93, 61, 61, 98, 99, 102, 95, 105, 110, 116, 56, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 44, 32, 32, 107, 112, 117, 116, 119, 40, 112, 91, 106, 93, 44, 32, 115, 41, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 115, 101, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 49, 54, 58, 32, 66, 82, 65, 78, 67, 72, 40, 105, 110, 116, 49, 54, 95, 116, 44, 32, 112, 91, 106, 93, 61, 61, 98, 99, 102, 95, 105, 110, 116, 49, 54, 95, 109, 105, 115, 115, 105, 110, 103, 44, 32, 112, 91, 106, 93, 61, 61, 98, 99, 102, 95, 105, 110, 116, 49, 54, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 44, 32, 107, 112, 117, 116, 119, 40, 112, 91, 106, 93, 44, 32, 115, 41, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 115, 101, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 51, 50, 58, 32, 66, 82, 65, 78, 67, 72, 40, 105, 110, 116, 51, 50, 95, 116, 44, 32, 112, 91, 106, 93, 61, 61, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 109, 105, 115, 115, 105, 110, 103, 44, 32, 112, 91, 106, 93, 61, 61, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 44, 32, 107, 112, 117, 116, 119, 40, 112, 91, 106, 93, 44, 32, 115, 41, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 115, 101, 32, 66, 67, 70, 95, 66, 84, 95, 70, 76, 79, 65, 84, 58, 32, 66, 82, 65, 78, 67, 72, 40, 102, 108, 111, 97, 116, 44, 32, 32, 32, 98, 99, 102, 95, 102, 108, 111, 97, 116, 95, 105, 115, 95, 109, 105, 115, 115, 105, 110, 103, 40, 112, 91, 106, 93, 41, 44, 32, 98, 99, 102, 95, 102, 108, 111, 97, 116, 95, 105, 115, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 40, 112, 91, 106, 93, 41, 44, 32, 107, 115, 112, 114, 105, 110, 116, 102, 40, 115, 44, 32, 34, 37, 103, 34, 44, 32, 112, 91, 106, 93, 41, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 102, 97, 117, 108, 116, 58, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 116, 111, 100, 111, 58, 32, 116, 121, 112, 101, 32, 37, 100, 92, 110, 34, 44, 32, 116, 121, 112, 101, 41, 59, 32, 101, 120, 105, 116, 40, 49, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 35, 117, 110, 100, 101, 102, 32, 66, 82, 65, 78, 67, 72, 10, 32, 32, 32, 32, 125, 10, 125, 10, 10, 117, 105, 110, 116, 56, 95, 116, 32, 42, 98, 99, 102, 95, 102, 109, 116, 95, 115, 105, 122, 101, 100, 95, 97, 114, 114, 97, 121, 40, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 42, 115, 44, 32, 117, 105, 110, 116, 56, 95, 116, 32, 42, 112, 116, 114, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 120, 44, 32, 116, 121, 112, 101, 59, 10, 32, 32, 32, 32, 120, 32, 61, 32, 98, 99, 102, 95, 100, 101, 99, 95, 115, 105, 122, 101, 40, 112, 116, 114, 44, 32, 38, 112, 116, 114, 44, 32, 38, 116, 121, 112, 101, 41, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 102, 109, 116, 95, 97, 114, 114, 97, 121, 40, 115, 44, 32, 120, 44, 32, 116, 121, 112, 101, 44, 32, 112, 116, 114, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 112, 116, 114, 32, 43, 32, 40, 120, 32, 60, 60, 32, 98, 99, 102, 95, 116, 121, 112, 101, 95, 115, 104, 105, 102, 116, 91, 116, 121, 112, 101, 93, 41, 59, 10, 125, 10, 10, 47, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 10, 32, 42, 42, 42, 32, 86, 67, 70, 32, 115, 105, 116, 101, 32, 73, 47, 79, 32, 42, 42, 42, 10, 32, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 47, 10, 10, 116, 121, 112, 101, 100, 101, 102, 32, 115, 116, 114, 117, 99, 116, 32, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 107, 101, 121, 44, 32, 109, 97, 120, 95, 109, 44, 32, 115, 105, 122, 101, 44, 32, 111, 102, 102, 115, 101, 116, 59, 10, 32, 32, 32, 32, 117, 105, 110, 116, 54, 52, 95, 116, 32, 105, 115, 95, 103, 116, 58, 49, 44, 32, 109, 97, 120, 95, 103, 58, 51, 49, 44, 32, 109, 97, 120, 95, 108, 58, 51, 50, 59, 10, 32, 32, 32, 32, 117, 105, 110, 116, 51, 50, 95, 116, 32, 121, 59, 10, 32, 32, 32, 32, 117, 105, 110, 116, 56, 95, 116, 32, 42, 98, 117, 102, 59, 10, 125, 32, 102, 109, 116, 95, 97, 117, 120, 95, 116, 59, 10, 10, 115, 116, 97, 116, 105, 99, 32, 105, 110, 108, 105, 110, 101, 32, 118, 111, 105, 100, 32, 97, 108, 105, 103, 110, 95, 109, 101, 109, 40, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 42, 115, 41, 10, 123, 10, 32, 32, 32, 32, 105, 102, 32, 40, 115, 45, 62, 108, 38, 55, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 105, 110, 116, 54, 52, 95, 116, 32, 122, 101, 114, 111, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 108, 32, 61, 32, 40, 40, 115, 45, 62, 108, 32, 43, 32, 55, 41, 62, 62, 51, 60, 60, 51, 41, 32, 45, 32, 115, 45, 62, 108, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 110, 40, 40, 99, 104, 97, 114, 42, 41, 38, 122, 101, 114, 111, 44, 32, 108, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 125, 10, 125, 10, 10, 47, 47, 32, 112, 44, 113, 32, 105, 115, 32, 116, 104, 101, 32, 115, 116, 97, 114, 116, 32, 97, 110, 100, 32, 116, 104, 101, 32, 101, 110, 100, 32, 111, 102, 32, 116, 104, 101, 32, 70, 79, 82, 77, 65, 84, 32, 102, 105, 101, 108, 100, 10, 35, 100, 101, 102, 105, 110, 101, 32, 77, 65, 88, 95, 78, 95, 70, 77, 84, 32, 50, 53, 53, 32, 32, 32, 47, 42, 32, 76, 105, 109, 105, 116, 101, 100, 32, 98, 121, 32, 115, 105, 122, 101, 32, 111, 102, 32, 98, 99, 102, 49, 95, 116, 32, 110, 95, 102, 109, 116, 32, 102, 105, 101, 108, 100, 32, 42, 47, 10, 115, 116, 97, 116, 105, 99, 32, 105, 110, 116, 32, 118, 99, 102, 95, 112, 97, 114, 115, 101, 95, 102, 111, 114, 109, 97, 116, 40, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 42, 115, 44, 32, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 118, 44, 32, 99, 104, 97, 114, 32, 42, 112, 44, 32, 99, 104, 97, 114, 32, 42, 113, 41, 10, 123, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 41, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 10, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 114, 44, 32, 42, 116, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 106, 44, 32, 108, 44, 32, 109, 44, 32, 103, 59, 10, 32, 32, 32, 32, 107, 104, 105, 110, 116, 95, 116, 32, 107, 59, 10, 32, 32, 32, 32, 107, 115, 95, 116, 111, 107, 97, 117, 120, 95, 116, 32, 97, 117, 120, 49, 59, 10, 32, 32, 32, 32, 118, 100, 105, 99, 116, 95, 116, 32, 42, 100, 32, 61, 32, 40, 118, 100, 105, 99, 116, 95, 116, 42, 41, 104, 45, 62, 100, 105, 99, 116, 91, 66, 67, 70, 95, 68, 84, 95, 73, 68, 93, 59, 10, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 42, 109, 101, 109, 32, 61, 32, 40, 107, 115, 116, 114, 105, 110, 103, 95, 116, 42, 41, 38, 104, 45, 62, 109, 101, 109, 59, 10, 32, 32, 32, 32, 102, 109, 116, 95, 97, 117, 120, 95, 116, 32, 102, 109, 116, 91, 77, 65, 88, 95, 78, 95, 70, 77, 84, 93, 59, 10, 32, 32, 32, 32, 109, 101, 109, 45, 62, 108, 32, 61, 32, 48, 59, 10, 10, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 101, 110, 100, 32, 61, 32, 115, 45, 62, 115, 32, 43, 32, 115, 45, 62, 108, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 113, 62, 61, 101, 110, 100, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 91, 37, 115, 58, 37, 100, 32, 37, 115, 93, 32, 69, 114, 114, 111, 114, 58, 32, 70, 79, 82, 77, 65, 84, 32, 99, 111, 108, 117, 109, 110, 32, 119, 105, 116, 104, 32, 110, 111, 32, 115, 97, 109, 112, 108, 101, 32, 99, 111, 108, 117, 109, 110, 115, 32, 115, 116, 97, 114, 116, 105, 110, 103, 32, 97, 116, 32, 37, 115, 58, 37, 100, 92, 110, 34, 44, 32, 95, 95, 70, 73, 76, 69, 95, 95, 44, 95, 95, 76, 73, 78, 69, 95, 95, 44, 95, 95, 70, 85, 78, 67, 84, 73, 79, 78, 95, 95, 44, 115, 45, 62, 115, 44, 118, 45, 62, 112, 111, 115, 43, 49, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 47, 47, 32, 103, 101, 116, 32, 102, 111, 114, 109, 97, 116, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 10, 32, 32, 32, 32, 118, 45, 62, 110, 95, 102, 109, 116, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 106, 32, 61, 32, 48, 44, 32, 116, 32, 61, 32, 107, 115, 116, 114, 116, 111, 107, 40, 112, 44, 32, 34, 58, 34, 44, 32, 38, 97, 117, 120, 49, 41, 59, 32, 116, 59, 32, 116, 32, 61, 32, 107, 115, 116, 114, 116, 111, 107, 40, 48, 44, 32, 48, 44, 32, 38, 97, 117, 120, 49, 41, 44, 32, 43, 43, 106, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 106, 32, 62, 61, 32, 77, 65, 88, 95, 78, 95, 70, 77, 84, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 45, 62, 101, 114, 114, 99, 111, 100, 101, 32, 124, 61, 32, 66, 67, 70, 95, 69, 82, 82, 95, 76, 73, 77, 73, 84, 83, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 91, 69, 58, 58, 37, 115, 93, 32, 69, 114, 114, 111, 114, 58, 32, 70, 79, 82, 77, 65, 84, 32, 99, 111, 108, 117, 109, 110, 32, 97, 116, 32, 37, 115, 58, 37, 100, 32, 108, 105, 115, 116, 115, 32, 109, 111, 114, 101, 32, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 115, 32, 116, 104, 97, 110, 32, 104, 116, 115, 108, 105, 98, 32, 99, 97, 110, 32, 104, 97, 110, 100, 108, 101, 46, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 44, 32, 98, 99, 102, 95, 115, 101, 113, 110, 97, 109, 101, 40, 104, 44, 118, 41, 44, 32, 118, 45, 62, 112, 111, 115, 43, 49, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 42, 40, 99, 104, 97, 114, 42, 41, 97, 117, 120, 49, 46, 112, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 32, 61, 32, 107, 104, 95, 103, 101, 116, 40, 118, 100, 105, 99, 116, 44, 32, 100, 44, 32, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 107, 32, 61, 61, 32, 107, 104, 95, 101, 110, 100, 40, 100, 41, 32, 124, 124, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 46, 105, 110, 102, 111, 91, 66, 67, 70, 95, 72, 76, 95, 70, 77, 84, 93, 32, 61, 61, 32, 49, 53, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 104, 116, 115, 95, 118, 101, 114, 98, 111, 115, 101, 32, 62, 61, 32, 50, 41, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 32, 34, 91, 87, 58, 58, 37, 115, 93, 32, 70, 79, 82, 77, 65, 84, 32, 39, 37, 115, 39, 32, 105, 115, 32, 110, 111, 116, 32, 100, 101, 102, 105, 110, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 101, 97, 100, 101, 114, 44, 32, 97, 115, 115, 117, 109, 105, 110, 103, 32, 84, 121, 112, 101, 61, 83, 116, 114, 105, 110, 103, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 44, 32, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 116, 109, 112, 32, 61, 32, 123, 48, 44, 48, 44, 48, 125, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 108, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 112, 114, 105, 110, 116, 102, 40, 38, 116, 109, 112, 44, 32, 34, 35, 35, 70, 79, 82, 77, 65, 84, 61, 60, 73, 68, 61, 37, 115, 44, 78, 117, 109, 98, 101, 114, 61, 49, 44, 84, 121, 112, 101, 61, 83, 116, 114, 105, 110, 103, 44, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, 92, 34, 68, 117, 109, 109, 121, 92, 34, 62, 34, 44, 32, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 104, 114, 101, 99, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 112, 97, 114, 115, 101, 95, 108, 105, 110, 101, 40, 104, 44, 116, 109, 112, 46, 115, 44, 38, 108, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 116, 109, 112, 46, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 100, 100, 95, 104, 114, 101, 99, 40, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 42, 41, 104, 44, 32, 104, 114, 101, 99, 41, 32, 41, 32, 98, 99, 102, 95, 104, 100, 114, 95, 115, 121, 110, 99, 40, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 42, 41, 104, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 32, 61, 32, 107, 104, 95, 103, 101, 116, 40, 118, 100, 105, 99, 116, 44, 32, 100, 44, 32, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 45, 62, 101, 114, 114, 99, 111, 100, 101, 32, 61, 32, 66, 67, 70, 95, 69, 82, 82, 95, 84, 65, 71, 95, 85, 78, 68, 69, 70, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 107, 32, 61, 61, 32, 107, 104, 95, 101, 110, 100, 40, 100, 41, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 32, 34, 91, 69, 58, 58, 37, 115, 93, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 97, 100, 100, 32, 100, 117, 109, 109, 121, 32, 104, 101, 97, 100, 101, 114, 32, 102, 111, 114, 32, 70, 79, 82, 77, 65, 84, 32, 39, 37, 115, 39, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 44, 32, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 45, 62, 101, 114, 114, 99, 111, 100, 101, 32, 124, 61, 32, 66, 67, 70, 95, 69, 82, 82, 95, 84, 65, 71, 95, 73, 78, 86, 65, 76, 73, 68, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32]);
fileData0.push.apply(fileData0, [32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 109, 116, 91, 106, 93, 46, 109, 97, 120, 95, 108, 32, 61, 32, 102, 109, 116, 91, 106, 93, 46, 109, 97, 120, 95, 109, 32, 61, 32, 102, 109, 116, 91, 106, 93, 46, 109, 97, 120, 95, 103, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 109, 116, 91, 106, 93, 46, 107, 101, 121, 32, 61, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 46, 105, 100, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 109, 116, 91, 106, 93, 46, 105, 115, 95, 103, 116, 32, 61, 32, 33, 115, 116, 114, 99, 109, 112, 40, 116, 44, 32, 34, 71, 84, 34, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 109, 116, 91, 106, 93, 46, 121, 32, 61, 32, 104, 45, 62, 105, 100, 91, 48, 93, 91, 102, 109, 116, 91, 106, 93, 46, 107, 101, 121, 93, 46, 118, 97, 108, 45, 62, 105, 110, 102, 111, 91, 66, 67, 70, 95, 72, 76, 95, 70, 77, 84, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 45, 62, 110, 95, 102, 109, 116, 43, 43, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 47, 47, 32, 99, 111, 109, 112, 117, 116, 101, 32, 109, 97, 120, 10, 32, 32, 32, 32, 105, 110, 116, 32, 110, 95, 115, 97, 109, 112, 108, 101, 95, 111, 114, 105, 32, 61, 32, 45, 49, 59, 10, 32, 32, 32, 32, 114, 32, 61, 32, 113, 32, 43, 32, 49, 59, 32, 32, 47, 47, 32, 114, 58, 32, 112, 111, 115, 105, 116, 105, 111, 110, 32, 105, 110, 32, 116, 104, 101, 32, 102, 111, 114, 109, 97, 116, 32, 115, 116, 114, 105, 110, 103, 10, 32, 32, 32, 32, 108, 32, 61, 32, 48, 44, 32, 109, 32, 61, 32, 103, 32, 61, 32, 49, 44, 32, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 32, 61, 32, 48, 59, 32, 32, 47, 47, 32, 109, 58, 32, 109, 97, 120, 32, 118, 101, 99, 116, 111, 114, 32, 115, 105, 122, 101, 44, 32, 108, 58, 32, 109, 97, 120, 32, 102, 105, 101, 108, 100, 32, 108, 101, 110, 44, 32, 103, 58, 32, 109, 97, 120, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 97, 108, 108, 101, 108, 101, 115, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 114, 60, 101, 110, 100, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 99, 97, 110, 32, 119, 101, 32, 115, 107, 105, 112, 32, 115, 111, 109, 101, 32, 115, 97, 109, 112, 108, 101, 115, 63, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 104, 45, 62, 107, 101, 101, 112, 95, 115, 97, 109, 112, 108, 101, 115, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 95, 115, 97, 109, 112, 108, 101, 95, 111, 114, 105, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 98, 105, 116, 95, 97, 114, 114, 97, 121, 95, 116, 101, 115, 116, 40, 104, 45, 62, 107, 101, 101, 112, 95, 115, 97, 109, 112, 108, 101, 115, 44, 110, 95, 115, 97, 109, 112, 108, 101, 95, 111, 114, 105, 41, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 42, 114, 33, 61, 39, 92, 116, 39, 32, 38, 38, 32, 114, 60, 101, 110, 100, 32, 41, 32, 114, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 114, 61, 61, 39, 92, 116, 39, 32, 41, 32, 123, 32, 42, 114, 32, 61, 32, 48, 59, 32, 114, 43, 43, 59, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 99, 111, 108, 108, 101, 99, 116, 32, 102, 109, 116, 32, 115, 116, 97, 116, 115, 58, 32, 109, 97, 120, 32, 118, 101, 99, 116, 111, 114, 32, 115, 105, 122, 101, 44, 32, 108, 101, 110, 103, 116, 104, 44, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 97, 108, 108, 101, 108, 101, 115, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 32, 61, 32, 48, 59, 32, 32, 47, 47, 32, 106, 45, 116, 104, 32, 102, 111, 114, 109, 97, 116, 32, 102, 105, 101, 108, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 59, 59, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 114, 32, 61, 61, 32, 39, 92, 116, 39, 32, 41, 32, 42, 114, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 114, 32, 61, 61, 32, 39, 58, 39, 32, 124, 124, 32, 33, 42, 114, 32, 41, 32, 32, 47, 47, 32, 101, 110, 100, 32, 111, 102, 32, 102, 105, 101, 108, 100, 32, 111, 114, 32, 101, 110, 100, 32, 111, 102, 32, 115, 97, 109, 112, 108, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 102, 109, 116, 91, 106, 93, 46, 109, 97, 120, 95, 109, 32, 60, 32, 109, 41, 32, 102, 109, 116, 91, 106, 93, 46, 109, 97, 120, 95, 109, 32, 61, 32, 109, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 102, 109, 116, 91, 106, 93, 46, 109, 97, 120, 95, 108, 32, 60, 32, 108, 41, 32, 102, 109, 116, 91, 106, 93, 46, 109, 97, 120, 95, 108, 32, 61, 32, 108, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 102, 109, 116, 91, 106, 93, 46, 105, 115, 95, 103, 116, 32, 38, 38, 32, 102, 109, 116, 91, 106, 93, 46, 109, 97, 120, 95, 103, 32, 60, 32, 103, 41, 32, 102, 109, 116, 91, 106, 93, 46, 109, 97, 120, 95, 103, 32, 61, 32, 103, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 32, 61, 32, 48, 44, 32, 109, 32, 61, 32, 103, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 114, 61, 61, 39, 58, 39, 32, 41, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 106, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 106, 62, 61, 118, 45, 62, 110, 95, 102, 109, 116, 32, 41, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 73, 110, 99, 111, 114, 114, 101, 99, 116, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 70, 79, 82, 77, 65, 84, 32, 102, 105, 101, 108, 100, 115, 32, 97, 116, 32, 37, 115, 58, 37, 100, 92, 110, 34, 44, 32, 104, 45, 62, 105, 100, 91, 66, 67, 70, 95, 68, 84, 95, 67, 84, 71, 93, 91, 118, 45, 62, 114, 105, 100, 93, 46, 107, 101, 121, 44, 118, 45, 62, 112, 111, 115, 43, 49, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 105, 116, 40, 49, 41, 59, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 42, 114, 61, 61, 32, 39, 44, 39, 32, 41, 32, 109, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 102, 109, 116, 91, 106, 93, 46, 105, 115, 95, 103, 116, 32, 38, 38, 32, 40, 42, 114, 32, 61, 61, 32, 39, 124, 39, 32, 124, 124, 32, 42, 114, 32, 61, 61, 32, 39, 47, 39, 41, 32, 41, 32, 103, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 114, 62, 61, 101, 110, 100, 32, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 43, 43, 59, 32, 108, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 32, 61, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 41, 32, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 43, 43, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 47, 47, 32, 97, 108, 108, 111, 99, 97, 116, 101, 32, 109, 101, 109, 111, 114, 121, 32, 102, 111, 114, 32, 97, 114, 114, 97, 121, 115, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 106, 32, 61, 32, 48, 59, 32, 106, 32, 60, 32, 118, 45, 62, 110, 95, 102, 109, 116, 59, 32, 43, 43, 106, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 109, 116, 95, 97, 117, 120, 95, 116, 32, 42, 102, 32, 61, 32, 38, 102, 109, 116, 91, 106, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 102, 45, 62, 109, 97, 120, 95, 109, 32, 41, 32, 102, 45, 62, 109, 97, 120, 95, 109, 32, 61, 32, 49, 59, 32, 32, 47, 47, 32, 111, 109, 105, 116, 116, 101, 100, 32, 116, 114, 97, 105, 108, 105, 110, 103, 32, 102, 111, 114, 109, 97, 116, 32, 102, 105, 101, 108, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 40, 102, 45, 62, 121, 62, 62, 52, 38, 48, 120, 102, 41, 32, 61, 61, 32, 66, 67, 70, 95, 72, 84, 95, 83, 84, 82, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 45, 62, 115, 105, 122, 101, 32, 61, 32, 102, 45, 62, 105, 115, 95, 103, 116, 63, 32, 102, 45, 62, 109, 97, 120, 95, 103, 32, 60, 60, 32, 50, 32, 58, 32, 102, 45, 62, 109, 97, 120, 95, 108, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 40, 102, 45, 62, 121, 62, 62, 52, 38, 48, 120, 102, 41, 32, 61, 61, 32, 66, 67, 70, 95, 72, 84, 95, 82, 69, 65, 76, 32, 124, 124, 32, 40, 102, 45, 62, 121, 62, 62, 52, 38, 48, 120, 102, 41, 32, 61, 61, 32, 66, 67, 70, 95, 72, 84, 95, 73, 78, 84, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 45, 62, 115, 105, 122, 101, 32, 61, 32, 102, 45, 62, 109, 97, 120, 95, 109, 32, 60, 60, 32, 50, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 32, 34, 91, 69, 58, 58, 37, 115, 93, 32, 116, 104, 101, 32, 102, 111, 114, 109, 97, 116, 32, 116, 121, 112, 101, 32, 37, 100, 32, 99, 117, 114, 114, 101, 110, 116, 108, 121, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 44, 32, 102, 45, 62, 121, 62, 62, 52, 38, 48, 120, 102, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 98, 111, 114, 116, 40, 41, 59, 32, 47, 47, 32, 73, 32, 100, 111, 32, 110, 111, 116, 32, 107, 110, 111, 119, 32, 104, 111, 119, 32, 116, 111, 32, 100, 111, 32, 119, 105, 116, 104, 32, 70, 108, 97, 103, 32, 105, 110, 32, 116, 104, 101, 32, 103, 101, 110, 111, 116, 121, 112, 101, 32, 102, 105, 101, 108, 100, 115, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 108, 105, 103, 110, 95, 109, 101, 109, 40, 109, 101, 109, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 45, 62, 111, 102, 102, 115, 101, 116, 32, 61, 32, 109, 101, 109, 45, 62, 108, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 95, 114, 101, 115, 105, 122, 101, 40, 109, 101, 109, 44, 32, 109, 101, 109, 45, 62, 108, 32, 43, 32, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 32, 42, 32, 102, 45, 62, 115, 105, 122, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 101, 109, 45, 62, 108, 32, 43, 61, 32, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 32, 42, 32, 102, 45, 62, 115, 105, 122, 101, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 106, 32, 61, 32, 48, 59, 32, 106, 32, 60, 32, 118, 45, 62, 110, 95, 102, 109, 116, 59, 32, 43, 43, 106, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 109, 116, 91, 106, 93, 46, 98, 117, 102, 32, 61, 32, 40, 117, 105, 110, 116, 56, 95, 116, 42, 41, 109, 101, 109, 45, 62, 115, 32, 43, 32, 102, 109, 116, 91, 106, 93, 46, 111, 102, 102, 115, 101, 116, 59, 10, 32, 32, 32, 32, 47, 47, 32, 102, 105, 108, 108, 32, 116, 104, 101, 32, 115, 97, 109, 112, 108, 101, 32, 102, 105, 101, 108, 100, 115, 59, 32, 97, 116, 32, 98, 101, 103, 105, 110, 110, 105, 110, 103, 32, 111, 102, 32, 116, 104, 101, 32, 108, 111, 111, 112, 44, 32, 116, 32, 112, 111, 105, 110, 116, 115, 32, 116, 111, 32, 116, 104, 101, 32, 102, 105, 114, 115, 116, 32, 99, 104, 97, 114, 32, 111, 102, 32, 97, 32, 102, 111, 114, 109, 97, 116, 10, 32, 32, 32, 32, 110, 95, 115, 97, 109, 112, 108, 101, 95, 111, 114, 105, 32, 61, 32, 45, 49, 59, 10, 32, 32, 32, 32, 116, 32, 61, 32, 113, 32, 43, 32, 49, 59, 32, 109, 32, 61, 32, 48, 59, 32, 32, 32, 47, 47, 32, 109, 58, 32, 115, 97, 109, 112, 108, 101, 32, 105, 100, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 116, 60, 101, 110, 100, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 99, 97, 110, 32, 119, 101, 32, 115, 107, 105, 112, 32, 115, 111, 109, 101, 32, 115, 97, 109, 112, 108, 101, 115, 63, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 104, 45, 62, 107, 101, 101, 112, 95, 115, 97, 109, 112, 108, 101, 115, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 95, 115, 97, 109, 112, 108, 101, 95, 111, 114, 105, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 98, 105, 116, 95, 97, 114, 114, 97, 121, 95, 116, 101, 115, 116, 40, 104, 45, 62, 107, 101, 101, 112, 95, 115, 97, 109, 112, 108, 101, 115, 44, 110, 95, 115, 97, 109, 112, 108, 101, 95, 111, 114, 105, 41, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 42, 116, 32, 38, 38, 32, 116, 60, 101, 110, 100, 32, 41, 32, 116, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 109, 32, 61, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 41, 32, 41, 32, 98, 114, 101, 97, 107, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 32, 61, 32, 48, 59, 32, 47, 47, 32, 106, 45, 116, 104, 32, 102, 111, 114, 109, 97, 116, 32, 102, 105, 101, 108, 100, 44, 32, 109, 45, 116, 104, 32, 115, 97, 109, 112, 108, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 116, 32, 60, 32, 101, 110, 100, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 109, 116, 95, 97, 117, 120, 95, 116, 32, 42, 122, 32, 61, 32, 38, 102, 109, 116, 91, 106, 43, 43, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 40, 122, 45, 62, 121, 62, 62, 52, 38, 48, 120, 102, 41, 32, 61, 61, 32, 66, 67, 70, 95, 72, 84, 95, 83, 84, 82, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 122, 45, 62, 105, 115, 95, 103, 116, 41, 32, 123, 32, 47, 47, 32, 103, 101, 110, 111, 116, 121, 112, 101, 115, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 51, 50, 95, 116, 32, 105, 115, 95, 112, 104, 97, 115, 101, 100, 32, 61, 32, 48, 44, 32, 42, 120, 32, 61, 32, 40, 105, 110, 116, 51, 50, 95, 116, 42, 41, 40, 122, 45, 62, 98, 117, 102, 32, 43, 32, 122, 45, 62, 115, 105, 122, 101, 32, 42, 32, 109, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 108, 32, 61, 32, 48, 59, 59, 32, 43, 43, 116, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 42, 116, 32, 61, 61, 32, 39, 46, 39, 41, 32, 43, 43, 116, 44, 32, 120, 91, 108, 43, 43, 93, 32, 61, 32, 105, 115, 95, 112, 104, 97, 115, 101, 100, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 120, 91, 108, 43, 43, 93, 32, 61, 32, 40, 115, 116, 114, 116, 111, 108, 40, 116, 44, 32, 38, 116, 44, 32, 49, 48, 41, 32, 43, 32, 49, 41, 32, 60, 60, 32, 49, 32, 124, 32, 105, 115, 95, 112, 104, 97, 115, 101, 100, 59, 10, 35, 105, 102, 32, 84, 72, 79, 82, 79, 85, 71, 72, 95, 83, 65, 78, 73, 84, 89, 95, 67, 72, 69, 67, 75, 83, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 32, 48, 32, 41, 59, 32, 32, 32, 32, 47, 47, 32, 115, 117, 99, 99, 101, 115, 115, 32, 111, 102, 32, 115, 116, 114, 116, 111, 108, 44, 115, 116, 114, 116, 111, 100, 32, 110, 111, 116, 32, 99, 104, 101, 99, 107, 101, 100, 10, 35, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 112, 104, 97, 115, 101, 100, 32, 61, 32, 40, 42, 116, 32, 61, 61, 32, 39, 124, 39, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 42, 116, 32, 33, 61, 32, 39, 124, 39, 32, 38, 38, 32, 42, 116, 32, 33, 61, 32, 39, 47, 39, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 108, 32, 41, 32, 120, 91, 108, 43, 43, 93, 32, 61, 32, 48, 59, 32, 32, 32, 47, 47, 32, 65, 110, 32, 101, 109, 112, 116, 121, 32, 102, 105, 101, 108, 100, 44, 32, 105, 110, 115, 101, 114, 116, 32, 109, 105, 115, 115, 105, 110, 103, 32, 118, 97, 108, 117, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 59, 32, 108, 32, 60, 32, 122, 45, 62, 115, 105, 122, 101, 62, 62, 50, 59, 32, 43, 43, 108, 41, 32, 120, 91, 108, 93, 32, 61, 32, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 120, 32, 61, 32, 40, 99, 104, 97, 114, 42, 41, 122, 45, 62, 98, 117, 102, 32, 43, 32, 122, 45, 62, 115, 105, 122, 101, 32, 42, 32, 109, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 114, 32, 61, 32, 116, 44, 32, 108, 32, 61, 32, 48, 59, 32, 42, 116, 32, 33, 61, 32, 39, 58, 39, 32, 38, 38, 32, 42, 116, 59, 32, 43, 43, 116, 41, 32, 120, 91, 108, 43, 43, 93, 32, 61, 32, 42, 116, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 59, 32, 108, 32, 60, 32, 122, 45, 62, 115, 105, 122, 101, 59, 32, 43, 43, 108, 41, 32, 120, 91, 108, 93, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 40, 122, 45, 62, 121, 62, 62, 52, 38, 48, 120, 102, 41, 32, 61, 61, 32, 66, 67, 70, 95, 72, 84, 95, 73, 78, 84, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 51, 50, 95, 116, 32, 42, 120, 32, 61, 32, 40, 105, 110, 116, 51, 50, 95, 116, 42, 41, 40, 122, 45, 62, 98, 117, 102, 32, 43, 32, 122, 45, 62, 115, 105, 122, 101, 32, 42, 32, 109, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 108, 32, 61, 32, 48, 59, 59, 32, 43, 43, 116, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 42, 116, 32, 61, 61, 32, 39, 46, 39, 41, 32, 120, 91, 108, 43, 43, 93, 32, 61, 32, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 109, 105, 115, 115, 105, 110, 103, 44, 32, 43, 43, 116, 59, 32, 47, 47, 32, 43, 43, 116, 32, 116, 111, 32, 115, 107, 105, 112, 32, 34, 46, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 120, 91, 108, 43, 43, 93, 32, 61, 32, 115, 116, 114, 116, 111, 108, 40, 116, 44, 32, 38, 116, 44, 32, 49, 48, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 42, 116, 32, 33, 61, 32, 39, 44, 39, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 108, 32, 41, 32, 120, 91, 108, 43, 43, 93, 32, 61, 32, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 109, 105, 115, 115, 105, 110, 103, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 59, 32, 108, 32, 60, 32, 122, 45, 62, 115, 105, 122, 101, 62, 62, 50, 59, 32, 43, 43, 108, 41, 32, 120, 91, 108, 93, 32, 61, 32, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 40, 122, 45, 62, 121, 62, 62, 52, 38, 48, 120, 102, 41, 32, 61, 61, 32, 66, 67, 70, 95, 72, 84, 95, 82, 69, 65, 76, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 42, 120, 32, 61, 32, 40, 102, 108, 111, 97, 116, 42, 41, 40, 122, 45, 62, 98, 117, 102, 32, 43, 32, 122, 45, 62, 115, 105, 122, 101, 32, 42, 32, 109, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 108, 32, 61, 32, 48, 59, 59, 32, 43, 43, 116, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 42, 116, 32, 61, 61, 32, 39, 46, 39, 32, 38, 38, 32, 33, 105, 115, 100, 105, 103, 105, 116, 40, 116, 91, 49, 93, 41, 41, 32, 98, 99, 102, 95, 102, 108, 111, 97, 116, 95, 115, 101, 116, 95, 109, 105, 115, 115, 105, 110, 103, 40, 120, 91, 108, 43, 43, 93, 41, 44, 32, 43, 43, 116, 59, 32, 47, 47, 32, 43, 43, 116, 32, 116, 111, 32, 115, 107, 105, 112, 32, 34, 46, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 120, 91, 108, 43, 43, 93, 32, 61, 32, 115, 116, 114, 116, 111, 100, 40, 116, 44, 32, 38, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 42, 116, 32, 33, 61, 32, 39, 44, 39, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 108, 32, 41, 32, 98, 99, 102, 95, 102, 108, 111, 97, 116, 95, 115, 101, 116, 95, 109, 105, 115, 115, 105, 110, 103, 40, 120, 91, 108, 43, 43, 93, 41, 59, 32, 32, 32, 32, 47, 47, 32, 65, 110, 32, 101, 109, 112, 116, 121, 32, 102, 105, 101, 108, 100, 44, 32, 105, 110, 115, 101, 114, 116, 32, 109, 105, 115, 115, 105, 110, 103, 32, 118, 97, 108, 117, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 59, 32, 108, 32, 60, 32, 122, 45, 62, 115, 105, 122, 101, 62, 62, 50, 59, 32, 43, 43, 108, 41, 32, 98, 99, 102, 95, 102, 108, 111, 97, 116, 95, 115, 101, 116, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 40, 120, 91, 108, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 97, 98, 111, 114, 116, 40, 41, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 42, 116, 32, 61, 61, 32, 39, 92, 48, 39, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 42, 116, 32, 61, 61, 32, 39, 58, 39, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 104, 97, 114, 32, 98, 117, 102, 102, 101, 114, 91, 56, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 91, 69, 58, 58, 37, 115, 93, 32, 73, 110, 118, 97, 108, 105, 100, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 39, 37, 115, 39, 32, 105, 110, 32, 39, 37, 115, 39, 32, 70, 79, 82, 77, 65, 84, 32, 102, 105, 101, 108, 100, 32, 97, 116, 32, 37, 115, 58, 37, 100, 92, 110, 34, 44, 32, 95, 95, 70, 85, 78, 67, 84, 73, 79, 78, 95, 95, 44, 32, 100, 117, 109, 112, 95, 99, 104, 97, 114, 40, 98, 117, 102, 102, 101, 114, 44, 32, 42, 116, 41, 44, 32, 104, 45, 62, 105, 100, 91, 66, 67, 70, 95, 68, 84, 95, 73, 68, 93, 91, 122, 45, 62, 107, 101, 121, 93, 46, 107, 101, 121, 44, 32, 98, 99, 102, 95, 115, 101, 113, 110, 97, 109, 101, 40, 104, 44, 118, 41, 44, 32, 118, 45, 62, 112, 111, 115, 43, 49, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 45, 62, 101, 114, 114, 99, 111, 100, 101, 32, 124, 61, 32, 66, 67, 70, 95, 69, 82, 82, 95, 67, 72, 65, 82, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 59, 32, 106, 32, 60, 32, 118, 45, 62, 110, 95, 102, 109, 116, 59, 32, 43, 43, 106, 41, 32, 123, 32, 47, 47, 32, 102, 105, 108, 108, 32, 101, 110, 100, 45, 111, 102, 45, 118, 101, 99, 116, 111, 114, 32, 118, 97, 108, 117, 101, 115, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 109, 116, 95, 97, 117, 120, 95, 116, 32, 42, 122, 32, 61, 32, 38, 102, 109, 116, 91, 106, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 40, 122, 45, 62, 121, 62, 62, 52, 38, 48, 120, 102, 41, 32, 61, 61, 32, 66, 67, 70, 95, 72, 84, 95, 83, 84, 82, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 122, 45, 62, 105, 115, 95, 103, 116, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 51, 50, 95, 116, 32, 42, 120, 32, 61, 32, 40, 105, 110, 116, 51, 50, 95, 116, 42, 41, 40, 122, 45, 62, 98, 117, 102, 32, 43, 32, 122, 45, 62, 115, 105, 122, 101, 32, 42, 32, 109, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 122, 45, 62, 115, 105, 122, 101, 41, 32, 120, 91, 48, 93, 32, 61, 32, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 109, 105, 115, 115, 105, 110, 103, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 108, 32, 61, 32, 49, 59, 32, 108, 32, 60, 32, 122, 45, 62, 115, 105, 122, 101, 62, 62, 50, 59, 32, 43, 43, 108, 41, 32, 120, 91, 108, 93, 32, 61, 32, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 120, 32, 61, 32, 40, 99, 104, 97, 114, 42, 41, 122, 45, 62, 98, 117, 102, 32, 43, 32, 122, 45, 62, 115, 105, 122, 101, 32, 42, 32, 109, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 122, 45, 62, 115, 105, 122, 101, 32, 41, 32, 120, 91, 48, 93, 32, 61, 32, 39, 46, 39, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 108, 32, 61, 32, 49, 59, 32, 108, 32, 60, 32, 122, 45, 62, 115, 105, 122, 101, 59, 32, 43, 43, 108, 41, 32, 120, 91, 108, 93, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 40, 122, 45, 62, 121, 62, 62, 52, 38, 48, 120, 102, 41, 32, 61, 61, 32, 66, 67, 70, 95, 72, 84, 95, 73, 78, 84, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 51, 50, 95, 116, 32, 42, 120, 32, 61, 32, 40, 105, 110, 116, 51, 50, 95, 116, 42, 41, 40, 122, 45, 62, 98, 117, 102, 32, 43, 32, 122, 45, 62, 115, 105, 122, 101, 32, 42, 32, 109, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 91, 48, 93, 32, 61, 32, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 109, 105, 115, 115, 105, 110, 103, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 108, 32, 61, 32, 49, 59, 32, 108, 32, 60, 32, 122, 45, 62, 115, 105, 122, 101, 62, 62, 50, 59, 32, 43, 43, 108, 41, 32, 120, 91, 108, 93, 32, 61, 32, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 40, 122, 45, 62, 121, 62, 62, 52, 38, 48, 120, 102, 41, 32, 61, 61, 32, 66, 67, 70, 95, 72, 84, 95, 82, 69, 65, 76, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 42, 120, 32, 61, 32, 40, 102, 108, 111, 97, 116, 42, 41, 40, 122, 45, 62, 98, 117, 102, 32, 43, 32, 122, 45, 62, 115, 105, 122, 101, 32, 42, 32, 109, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 102, 108, 111, 97, 116, 95, 115, 101, 116, 95, 109, 105, 115, 115, 105, 110, 103, 40, 120, 91, 48, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 108, 32, 61, 32, 49, 59, 32, 108, 32, 60, 32, 122, 45, 62, 115, 105, 122, 101, 62, 62, 50, 59, 32, 43, 43, 108, 41, 32, 98, 99, 102, 95, 102, 108, 111, 97, 116, 95, 115, 101, 116, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 40, 120, 91, 108, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 43, 43, 59, 32, 116, 43, 43, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 47, 47, 32, 119, 114, 105, 116, 101, 32, 105, 110, 100, 105, 118, 105, 100, 117, 97, 108, 32, 103, 101, 110, 111, 116, 121, 112, 101, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 10, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 42, 115, 116, 114, 32, 61, 32, 38, 118, 45, 62, 105, 110, 100, 105, 118, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 32, 62, 32, 48, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 118, 45, 62, 110, 95, 102, 109, 116, 59, 32, 43, 43, 105, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 109, 116, 95, 97, 117, 120, 95, 116, 32, 42, 122, 32, 61, 32, 38, 102, 109, 116, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 105, 110, 116, 49, 40, 115, 116, 114, 44, 32, 122, 45, 62, 107, 101, 121, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 40, 122, 45, 62, 121, 62, 62, 52, 38, 48, 120, 102, 41, 32, 61, 61, 32, 66, 67, 70, 95, 72, 84, 95, 83, 84, 82, 32, 38, 38, 32, 33, 122, 45, 62, 105, 115, 95, 103, 116, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 115, 105, 122, 101, 40, 115, 116, 114, 44, 32, 122, 45, 62, 115, 105, 122, 101, 44, 32, 66, 67, 70, 95, 66, 84, 95, 67, 72, 65, 82, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 110, 40, 40, 99, 104, 97, 114, 42, 41, 122, 45, 62, 98, 117, 102, 44, 32, 122, 45, 62, 115, 105, 122, 101, 32, 42, 32, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 44, 32, 115, 116, 114, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 40, 122, 45, 62, 121, 62, 62, 52, 38, 48, 120, 102, 41, 32, 61, 61, 32, 66, 67, 70, 95, 72, 84, 95, 73, 78, 84, 32, 124, 124, 32, 122, 45, 62, 105, 115, 95, 103, 116, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 118, 105, 110, 116, 40, 115, 116, 114, 44, 32, 40, 122, 45, 62, 115, 105, 122, 101, 62, 62, 50, 41, 32, 42, 32, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 44, 32, 40, 105, 110, 116, 51, 50, 95, 116, 42, 41, 122, 45, 62, 98, 117, 102, 44, 32, 122, 45, 62, 115, 105, 122, 101, 62, 62, 50, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 115, 105, 122, 101, 40, 115, 116, 114, 44, 32, 122, 45, 62, 115, 105, 122, 101, 62, 62, 50, 44, 32, 66, 67, 70, 95, 66, 84, 95, 70, 76, 79, 65, 84, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 110, 40, 40, 99, 104, 97, 114, 42, 41, 122, 45, 62, 98, 117, 102, 44, 32, 122, 45, 62, 115, 105, 122, 101, 32, 42, 32, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 44, 32, 115, 116, 114, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 33, 61, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 41, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 91, 37, 115, 58, 37, 100, 32, 37, 115, 93, 32, 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 99, 111, 108, 117, 109, 110, 115, 32, 97, 116, 32, 37, 115, 58, 37, 100, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 32, 116, 104, 101, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 115, 97, 109, 112, 108, 101, 115, 32, 40, 37, 100, 32, 118, 115, 32, 37, 100, 41, 46, 92, 110, 34, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 95, 95, 70, 73, 76, 69, 95, 95, 44, 95, 95, 76, 73, 78, 69, 95, 95, 44, 95, 95, 70, 85, 78, 67, 84, 73, 79, 78, 95, 95, 44, 98, 99, 102, 95, 115, 101, 113, 110, 97, 109, 101, 40, 104, 44, 118, 41, 44, 118, 45, 62, 112, 111, 115, 43, 49, 44, 32, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 44, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 45, 62, 101, 114, 114, 99, 111, 100, 101, 32, 124, 61, 32, 66, 67, 70, 95, 69, 82, 82, 95, 78, 67, 79, 76, 83, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 118, 45, 62, 105, 110, 100, 105, 118, 46, 108, 32, 62, 32, 48, 120, 102, 102, 102, 102, 102, 102, 102, 102, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 91, 37, 115, 58, 37, 100, 32, 37, 115, 93, 32, 84, 104, 101, 32, 70, 79, 82, 77, 65, 84, 32, 97, 116, 32, 37, 115, 58, 37, 100, 32, 105, 115, 32, 116, 111, 111, 32, 108, 111, 110, 103, 46, 46, 46, 92, 110, 34, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 95, 95, 70, 73, 76, 69, 95, 95, 44, 95, 95, 76, 73, 78, 69, 95, 95, 44, 95, 95, 70, 85, 78, 67, 84, 73, 79, 78, 95, 95, 44, 98, 99, 102, 95, 115, 101, 113, 110, 97, 109, 101, 40, 104, 44, 118, 41, 44, 118, 45, 62, 112, 111, 115, 43, 49, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 45, 62, 101, 114, 114, 99, 111, 100, 101, 32, 124, 61, 32, 66, 67, 70, 95, 69, 82, 82, 95, 76, 73, 77, 73, 84, 83, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 69, 114, 114, 111, 114, 32, 114, 101, 99, 111, 118, 101, 114, 121, 58, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 32, 105, 102, 32, 116, 104, 105, 115, 32, 105, 115, 32, 97, 32, 99, 114, 105, 116, 105, 99, 97, 108, 32, 101, 114, 114, 111, 114, 32, 111, 114, 32, 48, 32, 105, 102, 32, 119, 101, 32, 119, 97, 110, 116, 32, 116, 111, 32, 105, 103, 110, 111, 114, 101, 32, 116, 104, 101, 32, 70, 79, 82, 77, 65, 84, 32, 97, 110, 100, 32, 112, 114, 111, 99, 101, 101, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 45, 62, 110, 95, 102, 109, 116, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 10, 105, 110, 116, 32, 118, 99, 102, 95, 112, 97, 114, 115, 101, 40, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 42, 115, 44, 32, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 118, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 112, 44, 32, 42, 113, 44, 32, 42, 114, 44, 32, 42, 116, 59, 10, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 42, 115, 116, 114, 59, 10, 32, 32, 32, 32, 107, 104, 105, 110, 116, 95, 116, 32, 107, 59, 10, 32, 32, 32, 32, 107, 115, 95, 116, 111, 107, 97, 117, 120, 95, 116, 32, 97, 117, 120, 59, 10, 10, 32, 32, 32, 32, 98, 99, 102, 95, 99, 108, 101, 97, 114, 49, 40, 118, 41, 59, 10, 32, 32, 32, 32, 115, 116, 114, 32, 61, 32, 38, 118, 45, 62, 115, 104, 97, 114, 101, 100, 59, 10, 32, 32, 32, 32, 109, 101, 109, 115, 101, 116, 40, 38, 97, 117, 120, 44, 32, 48, 44, 32, 115, 105, 122, 101, 111, 102, 40, 107, 115, 95, 116, 111, 107, 97, 117, 120, 95, 116, 41, 41, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 112, 32, 61, 32, 107, 115, 116, 114, 116, 111, 107, 40, 115, 45, 62, 115, 44, 32, 34, 92, 116, 34, 44, 32, 38, 97, 117, 120, 41, 44, 32, 105, 32, 61, 32, 48, 59, 32, 112, 59, 32, 112, 32, 61, 32, 107, 115, 116, 114, 116, 111, 107, 40, 48, 44, 32, 48, 44, 32, 38, 97, 117, 120, 41, 44, 32, 43, 43, 105, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 113, 32, 61, 32, 40, 99, 104, 97, 114, 42, 41, 97, 117, 120, 46, 112, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 42, 113, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 105, 32, 61, 61, 32, 48, 41, 32, 123, 32, 47, 47, 32, 67, 72, 82, 79, 77, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 100, 105, 99, 116, 95, 116, 32, 42, 100, 32, 61, 32, 40, 118, 100, 105, 99, 116, 95, 116, 42, 41, 104, 45, 62, 100, 105, 99, 116, 91, 66, 67, 70, 95, 68, 84, 95, 67, 84, 71, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 32, 61, 32, 107, 104, 95, 103, 101, 116, 40, 118, 100, 105, 99, 116, 44, 32, 100, 44, 32, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 107, 32, 61, 61, 32, 107, 104, 95, 101, 110, 100, 40, 100, 41, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 83, 105, 109, 112, 108, 101, 32, 101, 114, 114, 111, 114, 32, 114, 101, 99, 111, 118, 101, 114, 121, 32, 102, 111, 114, 32, 99, 104, 114, 111, 109, 111, 115, 111, 109, 101, 115, 32, 110, 111, 116, 32, 100, 101, 102, 105, 110, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 101, 97, 100, 101, 114, 46, 32, 73, 116, 32, 119, 105, 108, 108, 32, 110, 111, 116, 32, 104, 101, 108, 112, 32, 119, 104, 101, 110, 32, 86, 67, 70, 32, 104, 101, 97, 100, 101, 114, 32, 104, 97, 115, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 98, 101, 101, 110, 32, 97, 108, 114, 101, 97, 100, 121, 32, 112, 114, 105, 110, 116, 101, 100, 44, 32, 98, 117, 116, 32, 119, 105, 108, 108, 32, 101, 110, 97, 98, 108, 101, 32, 116, 111, 111, 108, 115, 32, 108, 105, 107, 101, 32, 118, 99, 102, 99, 104, 101, 99, 107, 32, 116, 111, 32, 112, 114, 111, 99, 101, 101, 100, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 104, 116, 115, 95, 118, 101, 114, 98, 111, 115, 101, 32, 62, 61, 32, 50, 41, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 32, 34, 91, 87, 58, 58, 37, 115, 93, 32, 99, 111, 110, 116, 105, 103, 32, 39, 37, 115, 39, 32, 105, 115, 32, 110, 111, 116, 32, 100, 101, 102, 105, 110, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 101, 97, 100, 101, 114, 46, 32, 40, 81, 117, 105, 99, 107, 32, 119, 111, 114, 107, 97, 114, 111, 117, 110, 100, 58, 32, 105, 110, 100, 101, 120, 32, 116, 104, 101, 32, 102, 105, 108, 101, 32, 119, 105, 116, 104, 32, 116, 97, 98, 105, 120, 46, 41, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 44, 32, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 116, 109, 112, 32, 61, 32, 123, 48, 44, 48, 44, 48, 125, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 108, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 112, 114, 105, 110, 116, 102, 40, 38, 116, 109, 112, 44, 32, 34, 35, 35, 99, 111, 110, 116, 105, 103, 61, 60, 73, 68, 61, 37, 115, 62, 34, 44, 32, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 104, 114, 101, 99, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 112, 97, 114, 115, 101, 95, 108, 105, 110, 101, 40, 104, 44, 116, 109, 112, 46, 115, 44, 38, 108, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 116, 109, 112, 46, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 100, 100, 95, 104, 114, 101, 99, 40, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 42, 41, 104, 44, 32, 104, 114, 101, 99, 41, 32, 41, 32, 98, 99, 102, 95, 104, 100, 114, 95, 115, 121, 110, 99, 40, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 42, 41, 104, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 32, 61, 32, 107, 104, 95, 103, 101, 116, 40, 118, 100, 105, 99, 116, 44, 32, 100, 44, 32, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 45, 62, 101, 114, 114, 99, 111, 100, 101, 32, 61, 32, 66, 67, 70, 95, 69, 82, 82, 95, 67, 84, 71, 95, 85, 78, 68, 69, 70, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 107, 32, 61, 61, 32, 107, 104, 95, 101, 110, 100, 40, 100, 41, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 32, 34, 91, 69, 58, 58, 37, 115, 93, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 97, 100, 100, 32, 100, 117, 109, 109, 121, 32, 104, 101, 97, 100, 101, 114, 32, 102, 111, 114, 32, 99, 111, 110, 116, 105, 103, 32, 39, 37, 115, 39, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 44, 32, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 45, 62, 101, 114, 114, 99, 111, 100, 101, 32, 124, 61, 32, 66, 67, 70, 95, 69, 82, 82, 95, 67, 84, 71, 95, 73, 78, 86, 65, 76, 73, 68, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 45, 62, 114, 105, 100, 32, 61, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 46, 105, 100, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32]);
fileData0.push.apply(fileData0, [125, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 105, 32, 61, 61, 32, 49, 41, 32, 123, 32, 47, 47, 32, 80, 79, 83, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 45, 62, 112, 111, 115, 32, 61, 32, 97, 116, 111, 105, 40, 112, 41, 32, 45, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 105, 32, 61, 61, 32, 50, 41, 32, 123, 32, 47, 47, 32, 73, 68, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 115, 116, 114, 99, 109, 112, 40, 112, 44, 32, 34, 46, 34, 41, 41, 32, 98, 99, 102, 95, 101, 110, 99, 95, 118, 99, 104, 97, 114, 40, 115, 116, 114, 44, 32, 113, 32, 45, 32, 112, 44, 32, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 98, 99, 102, 95, 101, 110, 99, 95, 115, 105, 122, 101, 40, 115, 116, 114, 44, 32, 48, 44, 32, 66, 67, 70, 95, 66, 84, 95, 67, 72, 65, 82, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 105, 32, 61, 61, 32, 51, 41, 32, 123, 32, 47, 47, 32, 82, 69, 70, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 118, 99, 104, 97, 114, 40, 115, 116, 114, 44, 32, 113, 32, 45, 32, 112, 44, 32, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 32, 61, 32, 49, 44, 32, 118, 45, 62, 114, 108, 101, 110, 32, 61, 32, 113, 32, 45, 32, 112, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 105, 32, 61, 61, 32, 52, 41, 32, 123, 32, 47, 47, 32, 65, 76, 84, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 115, 116, 114, 99, 109, 112, 40, 112, 44, 32, 34, 46, 34, 41, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 114, 32, 61, 32, 116, 32, 61, 32, 112, 59, 59, 32, 43, 43, 114, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 42, 114, 32, 61, 61, 32, 39, 44, 39, 32, 124, 124, 32, 42, 114, 32, 61, 61, 32, 48, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 118, 99, 104, 97, 114, 40, 115, 116, 114, 44, 32, 114, 32, 45, 32, 116, 44, 32, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 32, 61, 32, 114, 32, 43, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 43, 43, 118, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 114, 32, 61, 61, 32, 113, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 105, 32, 61, 61, 32, 53, 41, 32, 123, 32, 47, 47, 32, 81, 85, 65, 76, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 115, 116, 114, 99, 109, 112, 40, 112, 44, 32, 34, 46, 34, 41, 41, 32, 118, 45, 62, 113, 117, 97, 108, 32, 61, 32, 97, 116, 111, 102, 40, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 109, 101, 109, 99, 112, 121, 40, 38, 118, 45, 62, 113, 117, 97, 108, 44, 32, 38, 98, 99, 102, 95, 102, 108, 111, 97, 116, 95, 109, 105, 115, 115, 105, 110, 103, 44, 32, 52, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 118, 45, 62, 109, 97, 120, 95, 117, 110, 112, 97, 99, 107, 32, 38, 38, 32, 33, 40, 118, 45, 62, 109, 97, 120, 95, 117, 110, 112, 97, 99, 107, 62, 62, 49, 41, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 32, 47, 47, 32, 66, 67, 70, 95, 85, 78, 95, 83, 84, 82, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 105, 32, 61, 61, 32, 54, 41, 32, 123, 32, 47, 47, 32, 70, 73, 76, 84, 69, 82, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 115, 116, 114, 99, 109, 112, 40, 112, 44, 32, 34, 46, 34, 41, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 51, 50, 95, 116, 32, 42, 97, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 110, 95, 102, 108, 116, 32, 61, 32, 49, 44, 32, 105, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 95, 116, 111, 107, 97, 117, 120, 95, 116, 32, 97, 117, 120, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 100, 105, 99, 116, 95, 116, 32, 42, 100, 32, 61, 32, 40, 118, 100, 105, 99, 116, 95, 116, 42, 41, 104, 45, 62, 100, 105, 99, 116, 91, 66, 67, 70, 95, 68, 84, 95, 73, 68, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 99, 111, 117, 110, 116, 32, 116, 104, 101, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 102, 105, 108, 116, 101, 114, 115, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 42, 40, 113, 45, 49, 41, 32, 61, 61, 32, 39, 59, 39, 41, 32, 42, 40, 113, 45, 49, 41, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 114, 32, 61, 32, 112, 59, 32, 42, 114, 59, 32, 43, 43, 114, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 42, 114, 32, 61, 61, 32, 39, 59, 39, 41, 32, 43, 43, 110, 95, 102, 108, 116, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 32, 61, 32, 40, 105, 110, 116, 51, 50, 95, 116, 42, 41, 97, 108, 108, 111, 99, 97, 40, 110, 95, 102, 108, 116, 32, 42, 32, 115, 105, 122, 101, 111, 102, 40, 105, 110, 116, 51, 50, 95, 116, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 97, 100, 100, 32, 102, 105, 108, 116, 101, 114, 115, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 116, 32, 61, 32, 107, 115, 116, 114, 116, 111, 107, 40, 112, 44, 32, 34, 59, 34, 44, 32, 38, 97, 117, 120, 49, 41, 44, 32, 105, 32, 61, 32, 48, 59, 32, 116, 59, 32, 116, 32, 61, 32, 107, 115, 116, 114, 116, 111, 107, 40, 48, 44, 32, 48, 44, 32, 38, 97, 117, 120, 49, 41, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 42, 40, 99, 104, 97, 114, 42, 41, 97, 117, 120, 49, 46, 112, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 32, 61, 32, 107, 104, 95, 103, 101, 116, 40, 118, 100, 105, 99, 116, 44, 32, 100, 44, 32, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 107, 32, 61, 61, 32, 107, 104, 95, 101, 110, 100, 40, 100, 41, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 83, 105, 109, 112, 108, 101, 32, 101, 114, 114, 111, 114, 32, 114, 101, 99, 111, 118, 101, 114, 121, 32, 102, 111, 114, 32, 70, 73, 76, 84, 69, 82, 115, 32, 110, 111, 116, 32, 100, 101, 102, 105, 110, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 101, 97, 100, 101, 114, 46, 32, 73, 116, 32, 119, 105, 108, 108, 32, 110, 111, 116, 32, 104, 101, 108, 112, 32, 119, 104, 101, 110, 32, 86, 67, 70, 32, 104, 101, 97, 100, 101, 114, 32, 104, 97, 115, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 98, 101, 101, 110, 32, 97, 108, 114, 101, 97, 100, 121, 32, 112, 114, 105, 110, 116, 101, 100, 44, 32, 98, 117, 116, 32, 119, 105, 108, 108, 32, 101, 110, 97, 98, 108, 101, 32, 116, 111, 111, 108, 115, 32, 108, 105, 107, 101, 32, 118, 99, 102, 99, 104, 101, 99, 107, 32, 116, 111, 32, 112, 114, 111, 99, 101, 101, 100, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 104, 116, 115, 95, 118, 101, 114, 98, 111, 115, 101, 32, 62, 61, 32, 50, 41, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 32, 34, 91, 87, 58, 58, 37, 115, 93, 32, 70, 73, 76, 84, 69, 82, 32, 39, 37, 115, 39, 32, 105, 115, 32, 110, 111, 116, 32, 100, 101, 102, 105, 110, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 101, 97, 100, 101, 114, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 44, 32, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 116, 109, 112, 32, 61, 32, 123, 48, 44, 48, 44, 48, 125, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 108, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 112, 114, 105, 110, 116, 102, 40, 38, 116, 109, 112, 44, 32, 34, 35, 35, 70, 73, 76, 84, 69, 82, 61, 60, 73, 68, 61, 37, 115, 44, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, 92, 34, 68, 117, 109, 109, 121, 92, 34, 62, 34, 44, 32, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 104, 114, 101, 99, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 112, 97, 114, 115, 101, 95, 108, 105, 110, 101, 40, 104, 44, 116, 109, 112, 46, 115, 44, 38, 108, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 116, 109, 112, 46, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 100, 100, 95, 104, 114, 101, 99, 40, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 42, 41, 104, 44, 32, 104, 114, 101, 99, 41, 32, 41, 32, 98, 99, 102, 95, 104, 100, 114, 95, 115, 121, 110, 99, 40, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 42, 41, 104, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 32, 61, 32, 107, 104, 95, 103, 101, 116, 40, 118, 100, 105, 99, 116, 44, 32, 100, 44, 32, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 45, 62, 101, 114, 114, 99, 111, 100, 101, 32, 61, 32, 66, 67, 70, 95, 69, 82, 82, 95, 84, 65, 71, 95, 85, 78, 68, 69, 70, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 107, 32, 61, 61, 32, 107, 104, 95, 101, 110, 100, 40, 100, 41, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 32, 34, 91, 69, 58, 58, 37, 115, 93, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 97, 100, 100, 32, 100, 117, 109, 109, 121, 32, 104, 101, 97, 100, 101, 114, 32, 102, 111, 114, 32, 70, 73, 76, 84, 69, 82, 32, 39, 37, 115, 39, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 44, 32, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 45, 62, 101, 114, 114, 99, 111, 100, 101, 32, 124, 61, 32, 66, 67, 70, 95, 69, 82, 82, 95, 84, 65, 71, 95, 73, 78, 86, 65, 76, 73, 68, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 91, 105, 43, 43, 93, 32, 61, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 46, 105, 100, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 95, 102, 108, 116, 32, 61, 32, 105, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 118, 105, 110, 116, 40, 115, 116, 114, 44, 32, 110, 95, 102, 108, 116, 44, 32, 97, 44, 32, 45, 49, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 98, 99, 102, 95, 101, 110, 99, 95, 118, 105, 110, 116, 40, 115, 116, 114, 44, 32, 48, 44, 32, 48, 44, 32, 45, 49, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 118, 45, 62, 109, 97, 120, 95, 117, 110, 112, 97, 99, 107, 32, 38, 38, 32, 33, 40, 118, 45, 62, 109, 97, 120, 95, 117, 110, 112, 97, 99, 107, 62, 62, 50, 41, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 32, 32, 32, 32, 47, 47, 32, 66, 67, 70, 95, 85, 78, 95, 70, 76, 84, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 105, 32, 61, 61, 32, 55, 41, 32, 123, 32, 47, 47, 32, 73, 78, 70, 79, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 107, 101, 121, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 100, 105, 99, 116, 95, 116, 32, 42, 100, 32, 61, 32, 40, 118, 100, 105, 99, 116, 95, 116, 42, 41, 104, 45, 62, 100, 105, 99, 116, 91, 66, 67, 70, 95, 68, 84, 95, 73, 68, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 45, 62, 110, 95, 105, 110, 102, 111, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 115, 116, 114, 99, 109, 112, 40, 112, 44, 32, 34, 46, 34, 41, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 42, 40, 113, 45, 49, 41, 32, 61, 61, 32, 39, 59, 39, 41, 32, 42, 40, 113, 45, 49, 41, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 114, 32, 61, 32, 107, 101, 121, 32, 61, 32, 112, 59, 59, 32, 43, 43, 114, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 99, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 118, 97, 108, 44, 32, 42, 101, 110, 100, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 42, 114, 32, 33, 61, 32, 39, 59, 39, 32, 38, 38, 32, 42, 114, 32, 33, 61, 32, 39, 61, 39, 32, 38, 38, 32, 42, 114, 32, 33, 61, 32, 48, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 32, 61, 32, 101, 110, 100, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 32, 61, 32, 42, 114, 59, 32, 42, 114, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 99, 32, 61, 61, 32, 39, 61, 39, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 32, 61, 32, 114, 32, 43, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 101, 110, 100, 32, 61, 32, 118, 97, 108, 59, 32, 42, 101, 110, 100, 32, 33, 61, 32, 39, 59, 39, 32, 38, 38, 32, 42, 101, 110, 100, 32, 33, 61, 32, 48, 59, 32, 43, 43, 101, 110, 100, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 32, 61, 32, 42, 101, 110, 100, 59, 32, 42, 101, 110, 100, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 101, 110, 100, 32, 61, 32, 114, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 42, 107, 101, 121, 32, 41, 32, 123, 32, 105, 102, 32, 40, 99, 61, 61, 48, 41, 32, 98, 114, 101, 97, 107, 59, 32, 114, 32, 61, 32, 101, 110, 100, 59, 32, 107, 101, 121, 32, 61, 32, 114, 32, 43, 32, 49, 59, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 32, 125, 32, 32, 47, 47, 32, 102, 97, 117, 108, 116, 121, 32, 86, 67, 70, 44, 32, 34, 59, 59, 34, 32, 105, 110, 32, 116, 104, 101, 32, 73, 78, 70, 79, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 32, 61, 32, 107, 104, 95, 103, 101, 116, 40, 118, 100, 105, 99, 116, 44, 32, 100, 44, 32, 107, 101, 121, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 107, 32, 61, 61, 32, 107, 104, 95, 101, 110, 100, 40, 100, 41, 32, 124, 124, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 46, 105, 110, 102, 111, 91, 66, 67, 70, 95, 72, 76, 95, 73, 78, 70, 79, 93, 32, 61, 61, 32, 49, 53, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 104, 116, 115, 95, 118, 101, 114, 98, 111, 115, 101, 32, 62, 61, 32, 50, 41, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 32, 34, 91, 87, 58, 58, 37, 115, 93, 32, 73, 78, 70, 79, 32, 39, 37, 115, 39, 32, 105, 115, 32, 110, 111, 116, 32, 100, 101, 102, 105, 110, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 101, 97, 100, 101, 114, 44, 32, 97, 115, 115, 117, 109, 105, 110, 103, 32, 84, 121, 112, 101, 61, 83, 116, 114, 105, 110, 103, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 44, 32, 107, 101, 121, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 116, 109, 112, 32, 61, 32, 123, 48, 44, 48, 44, 48, 125, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 108, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 112, 114, 105, 110, 116, 102, 40, 38, 116, 109, 112, 44, 32, 34, 35, 35, 73, 78, 70, 79, 61, 60, 73, 68, 61, 37, 115, 44, 78, 117, 109, 98, 101, 114, 61, 49, 44, 84, 121, 112, 101, 61, 83, 116, 114, 105, 110, 103, 44, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, 92, 34, 68, 117, 109, 109, 121, 92, 34, 62, 34, 44, 32, 107, 101, 121, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 104, 114, 101, 99, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 112, 97, 114, 115, 101, 95, 108, 105, 110, 101, 40, 104, 44, 116, 109, 112, 46, 115, 44, 38, 108, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 116, 109, 112, 46, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 100, 100, 95, 104, 114, 101, 99, 40, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 42, 41, 104, 44, 32, 104, 114, 101, 99, 41, 32, 41, 32, 98, 99, 102, 95, 104, 100, 114, 95, 115, 121, 110, 99, 40, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 42, 41, 104, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 32, 61, 32, 107, 104, 95, 103, 101, 116, 40, 118, 100, 105, 99, 116, 44, 32, 100, 44, 32, 107, 101, 121, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 45, 62, 101, 114, 114, 99, 111, 100, 101, 32, 61, 32, 66, 67, 70, 95, 69, 82, 82, 95, 84, 65, 71, 95, 85, 78, 68, 69, 70, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 107, 32, 61, 61, 32, 107, 104, 95, 101, 110, 100, 40, 100, 41, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 32, 34, 91, 69, 58, 58, 37, 115, 93, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 97, 100, 100, 32, 100, 117, 109, 109, 121, 32, 104, 101, 97, 100, 101, 114, 32, 102, 111, 114, 32, 73, 78, 70, 79, 32, 39, 37, 115, 39, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 44, 32, 107, 101, 121, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 45, 62, 101, 114, 114, 99, 111, 100, 101, 32, 124, 61, 32, 66, 67, 70, 95, 69, 82, 82, 95, 84, 65, 71, 95, 73, 78, 86, 65, 76, 73, 68, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 105, 110, 116, 51, 50, 95, 116, 32, 121, 32, 61, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 46, 105, 110, 102, 111, 91, 66, 67, 70, 95, 72, 76, 95, 73, 78, 70, 79, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 43, 43, 118, 45, 62, 110, 95, 105, 110, 102, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 105, 110, 116, 49, 40, 115, 116, 114, 44, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 46, 105, 100, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 118, 97, 108, 32, 61, 61, 32, 48, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 115, 105, 122, 101, 40, 115, 116, 114, 44, 32, 48, 44, 32, 66, 67, 70, 95, 66, 84, 95, 78, 85, 76, 76, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 40, 121, 62, 62, 52, 38, 48, 120, 102, 41, 32, 61, 61, 32, 66, 67, 70, 95, 72, 84, 95, 70, 76, 65, 71, 32, 124, 124, 32, 40, 121, 62, 62, 52, 38, 48, 120, 102, 41, 32, 61, 61, 32, 66, 67, 70, 95, 72, 84, 95, 83, 84, 82, 41, 32, 123, 32, 47, 47, 32, 105, 102, 32, 70, 108, 97, 103, 32, 104, 97, 115, 32, 97, 32, 118, 97, 108, 117, 101, 44, 32, 116, 114, 101, 97, 116, 32, 105, 116, 32, 97, 115, 32, 97, 32, 115, 116, 114, 105, 110, 103, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 118, 99, 104, 97, 114, 40, 115, 116, 114, 44, 32, 101, 110, 100, 32, 45, 32, 118, 97, 108, 44, 32, 118, 97, 108, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 123, 32, 47, 47, 32, 105, 110, 116, 47, 102, 108, 111, 97, 116, 32, 118, 97, 108, 117, 101, 47, 97, 114, 114, 97, 121, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 105, 44, 32, 110, 95, 118, 97, 108, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 116, 44, 32, 42, 116, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 116, 32, 61, 32, 118, 97, 108, 44, 32, 110, 95, 118, 97, 108, 32, 61, 32, 49, 59, 32, 42, 116, 59, 32, 43, 43, 116, 41, 32, 47, 47, 32, 99, 111, 117, 110, 116, 32, 116, 104, 101, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 118, 97, 108, 117, 101, 115, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 42, 116, 32, 61, 61, 32, 39, 44, 39, 41, 32, 43, 43, 110, 95, 118, 97, 108, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 40, 121, 62, 62, 52, 38, 48, 120, 102, 41, 32, 61, 61, 32, 66, 67, 70, 95, 72, 84, 95, 73, 78, 84, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 51, 50, 95, 116, 32, 42, 122, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 122, 32, 61, 32, 40, 105, 110, 116, 51, 50, 95, 116, 42, 41, 97, 108, 108, 111, 99, 97, 40, 110, 95, 118, 97, 108, 32, 42, 32, 115, 105, 122, 101, 111, 102, 40, 105, 110, 116, 51, 50, 95, 116, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 44, 32, 116, 32, 61, 32, 118, 97, 108, 59, 32, 105, 32, 60, 32, 110, 95, 118, 97, 108, 59, 32, 43, 43, 105, 44, 32, 43, 43, 116, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 122, 91, 105, 93, 32, 61, 32, 115, 116, 114, 116, 111, 108, 40, 116, 44, 32, 38, 116, 101, 44, 32, 49, 48, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 116, 101, 61, 61, 116, 32, 41, 32, 47, 47, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 122, 91, 105, 93, 32, 61, 32, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 109, 105, 115, 115, 105, 110, 103, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 42, 116, 101, 32, 38, 38, 32, 42, 116, 101, 33, 61, 39, 44, 39, 32, 41, 32, 116, 101, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 32, 61, 32, 116, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 118, 105, 110, 116, 40, 115, 116, 114, 44, 32, 110, 95, 118, 97, 108, 44, 32, 122, 44, 32, 45, 49, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 115, 116, 114, 99, 109, 112, 40, 107, 101, 121, 44, 32, 34, 69, 78, 68, 34, 41, 32, 61, 61, 32, 48, 41, 32, 118, 45, 62, 114, 108, 101, 110, 32, 61, 32, 122, 91, 48, 93, 32, 45, 32, 118, 45, 62, 112, 111, 115, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 40, 121, 62, 62, 52, 38, 48, 120, 102, 41, 32, 61, 61, 32, 66, 67, 70, 95, 72, 84, 95, 82, 69, 65, 76, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 108, 111, 97, 116, 32, 42, 122, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 122, 32, 61, 32, 40, 102, 108, 111, 97, 116, 42, 41, 97, 108, 108, 111, 99, 97, 40, 110, 95, 118, 97, 108, 32, 42, 32, 115, 105, 122, 101, 111, 102, 40, 102, 108, 111, 97, 116, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 44, 32, 116, 32, 61, 32, 118, 97, 108, 59, 32, 105, 32, 60, 32, 110, 95, 118, 97, 108, 59, 32, 43, 43, 105, 44, 32, 43, 43, 116, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 122, 91, 105, 93, 32, 61, 32, 115, 116, 114, 116, 111, 100, 40, 116, 44, 32, 38, 116, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 116, 101, 61, 61, 116, 32, 41, 32, 47, 47, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 102, 108, 111, 97, 116, 95, 115, 101, 116, 95, 109, 105, 115, 115, 105, 110, 103, 40, 122, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 42, 116, 101, 32, 38, 38, 32, 42, 116, 101, 33, 61, 39, 44, 39, 32, 41, 32, 116, 101, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 32, 61, 32, 116, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 118, 102, 108, 111, 97, 116, 40, 115, 116, 114, 44, 32, 110, 95, 118, 97, 108, 44, 32, 122, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 99, 32, 61, 61, 32, 48, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 32, 61, 32, 101, 110, 100, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 101, 121, 32, 61, 32, 114, 32, 43, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 118, 45, 62, 109, 97, 120, 95, 117, 110, 112, 97, 99, 107, 32, 38, 38, 32, 33, 40, 118, 45, 62, 109, 97, 120, 95, 117, 110, 112, 97, 99, 107, 62, 62, 51, 41, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 105, 32, 61, 61, 32, 56, 41, 32, 47, 47, 32, 70, 79, 82, 77, 65, 84, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 118, 99, 102, 95, 112, 97, 114, 115, 101, 95, 102, 111, 114, 109, 97, 116, 40, 115, 44, 32, 104, 44, 32, 118, 44, 32, 112, 44, 32, 113, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 10, 105, 110, 116, 32, 118, 99, 102, 95, 114, 101, 97, 100, 40, 104, 116, 115, 70, 105, 108, 101, 32, 42, 102, 112, 44, 32, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 118, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 114, 101, 116, 59, 10, 32, 32, 32, 32, 114, 101, 116, 32, 61, 32, 104, 116, 115, 95, 103, 101, 116, 108, 105, 110, 101, 40, 102, 112, 44, 32, 75, 83, 95, 83, 69, 80, 95, 76, 73, 78, 69, 44, 32, 38, 102, 112, 45, 62, 108, 105, 110, 101, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 114, 101, 116, 32, 60, 32, 48, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 118, 99, 102, 95, 112, 97, 114, 115, 101, 49, 40, 38, 102, 112, 45, 62, 108, 105, 110, 101, 44, 32, 104, 44, 32, 118, 41, 59, 10, 125, 10, 10, 115, 116, 97, 116, 105, 99, 32, 105, 110, 108, 105, 110, 101, 32, 117, 105, 110, 116, 56, 95, 116, 32, 42, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 95, 102, 109, 116, 95, 99, 111, 114, 101, 49, 40, 117, 105, 110, 116, 56, 95, 116, 32, 42, 112, 116, 114, 44, 32, 105, 110, 116, 32, 110, 95, 115, 97, 109, 112, 108, 101, 44, 32, 98, 99, 102, 95, 102, 109, 116, 95, 116, 32, 42, 102, 109, 116, 41, 10, 123, 10, 32, 32, 32, 32, 117, 105, 110, 116, 56, 95, 116, 32, 42, 112, 116, 114, 95, 115, 116, 97, 114, 116, 32, 61, 32, 112, 116, 114, 59, 10, 32, 32, 32, 32, 102, 109, 116, 45, 62, 105, 100, 32, 61, 32, 98, 99, 102, 95, 100, 101, 99, 95, 116, 121, 112, 101, 100, 95, 105, 110, 116, 49, 40, 112, 116, 114, 44, 32, 38, 112, 116, 114, 41, 59, 10, 32, 32, 32, 32, 102, 109, 116, 45, 62, 110, 32, 61, 32, 98, 99, 102, 95, 100, 101, 99, 95, 115, 105, 122, 101, 40, 112, 116, 114, 44, 32, 38, 112, 116, 114, 44, 32, 38, 102, 109, 116, 45, 62, 116, 121, 112, 101, 41, 59, 10, 32, 32, 32, 32, 102, 109, 116, 45, 62, 115, 105, 122, 101, 32, 61, 32, 102, 109, 116, 45, 62, 110, 32, 60, 60, 32, 98, 99, 102, 95, 116, 121, 112, 101, 95, 115, 104, 105, 102, 116, 91, 102, 109, 116, 45, 62, 116, 121, 112, 101, 93, 59, 10, 32, 32, 32, 32, 102, 109, 116, 45, 62, 112, 32, 61, 32, 112, 116, 114, 59, 10, 32, 32, 32, 32, 102, 109, 116, 45, 62, 112, 95, 111, 102, 102, 32, 32, 61, 32, 112, 116, 114, 32, 45, 32, 112, 116, 114, 95, 115, 116, 97, 114, 116, 59, 10, 32, 32, 32, 32, 102, 109, 116, 45, 62, 112, 95, 102, 114, 101, 101, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 112, 116, 114, 32, 43, 61, 32, 110, 95, 115, 97, 109, 112, 108, 101, 32, 42, 32, 102, 109, 116, 45, 62, 115, 105, 122, 101, 59, 10, 32, 32, 32, 32, 102, 109, 116, 45, 62, 112, 95, 108, 101, 110, 32, 61, 32, 112, 116, 114, 32, 45, 32, 102, 109, 116, 45, 62, 112, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 112, 116, 114, 59, 10, 125, 10, 10, 115, 116, 97, 116, 105, 99, 32, 105, 110, 108, 105, 110, 101, 32, 117, 105, 110, 116, 56, 95, 116, 32, 42, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 95, 105, 110, 102, 111, 95, 99, 111, 114, 101, 49, 40, 117, 105, 110, 116, 56, 95, 116, 32, 42, 112, 116, 114, 44, 32, 98, 99, 102, 95, 105, 110, 102, 111, 95, 116, 32, 42, 105, 110, 102, 111, 41, 10, 123, 10, 32, 32, 32, 32, 117, 105, 110, 116, 56, 95, 116, 32, 42, 112, 116, 114, 95, 115, 116, 97, 114, 116, 32, 61, 32, 112, 116, 114, 59, 10, 32, 32, 32, 32, 105, 110, 102, 111, 45, 62, 107, 101, 121, 32, 61, 32, 98, 99, 102, 95, 100, 101, 99, 95, 116, 121, 112, 101, 100, 95, 105, 110, 116, 49, 40, 112, 116, 114, 44, 32, 38, 112, 116, 114, 41, 59, 10, 32, 32, 32, 32, 105, 110, 102, 111, 45, 62, 108, 101, 110, 32, 61, 32, 98, 99, 102, 95, 100, 101, 99, 95, 115, 105, 122, 101, 40, 112, 116, 114, 44, 32, 38, 112, 116, 114, 44, 32, 38, 105, 110, 102, 111, 45, 62, 116, 121, 112, 101, 41, 59, 10, 32, 32, 32, 32, 105, 110, 102, 111, 45, 62, 118, 112, 116, 114, 32, 61, 32, 112, 116, 114, 59, 10, 32, 32, 32, 32, 105, 110, 102, 111, 45, 62, 118, 112, 116, 114, 95, 111, 102, 102, 32, 32, 61, 32, 112, 116, 114, 32, 45, 32, 112, 116, 114, 95, 115, 116, 97, 114, 116, 59, 10, 32, 32, 32, 32, 105, 110, 102, 111, 45, 62, 118, 112, 116, 114, 95, 102, 114, 101, 101, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 105, 110, 102, 111, 45, 62, 118, 49, 46, 105, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 105, 110, 102, 111, 45, 62, 108, 101, 110, 32, 61, 61, 32, 49, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 105, 110, 102, 111, 45, 62, 116, 121, 112, 101, 32, 61, 61, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 56, 32, 124, 124, 32, 105, 110, 102, 111, 45, 62, 116, 121, 112, 101, 32, 61, 61, 32, 66, 67, 70, 95, 66, 84, 95, 67, 72, 65, 82, 41, 32, 105, 110, 102, 111, 45, 62, 118, 49, 46, 105, 32, 61, 32, 42, 40, 105, 110, 116, 56, 95, 116, 42, 41, 112, 116, 114, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 105, 110, 102, 111, 45, 62, 116, 121, 112, 101, 32, 61, 61, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 51, 50, 41, 32, 105, 110, 102, 111, 45, 62, 118, 49, 46, 105, 32, 61, 32, 42, 40, 105, 110, 116, 51, 50, 95, 116, 42, 41, 112, 116, 114, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 105, 110, 102, 111, 45, 62, 116, 121, 112, 101, 32, 61, 61, 32, 66, 67, 70, 95, 66, 84, 95, 70, 76, 79, 65, 84, 41, 32, 105, 110, 102, 111, 45, 62, 118, 49, 46, 102, 32, 61, 32, 42, 40, 102, 108, 111, 97, 116, 42, 41, 112, 116, 114, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 105, 110, 102, 111, 45, 62, 116, 121, 112, 101, 32, 61, 61, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 49, 54, 41, 32, 105, 110, 102, 111, 45, 62, 118, 49, 46, 105, 32, 61, 32, 42, 40, 105, 110, 116, 49, 54, 95, 116, 42, 41, 112, 116, 114, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 112, 116, 114, 32, 43, 61, 32, 105, 110, 102, 111, 45, 62, 108, 101, 110, 32, 60, 60, 32, 98, 99, 102, 95, 116, 121, 112, 101, 95, 115, 104, 105, 102, 116, 91, 105, 110, 102, 111, 45, 62, 116, 121, 112, 101, 93, 59, 10, 32, 32, 32, 32, 105, 110, 102, 111, 45, 62, 118, 112, 116, 114, 95, 108, 101, 110, 32, 61, 32, 112, 116, 114, 32, 45, 32, 105, 110, 102, 111, 45, 62, 118, 112, 116, 114, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 112, 116, 114, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 40, 98, 99, 102, 49, 95, 116, 32, 42, 98, 44, 32, 105, 110, 116, 32, 119, 104, 105, 99, 104, 41, 10, 123, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 98, 45, 62, 115, 104, 97, 114, 101, 100, 46, 108, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 32, 47, 47, 32, 66, 117, 105, 108, 100, 105, 110, 103, 32, 97, 32, 110, 101, 119, 32, 66, 67, 70, 32, 114, 101, 99, 111, 114, 100, 32, 102, 114, 111, 109, 32, 115, 99, 114, 97, 116, 99, 104, 10, 32, 32, 32, 32, 117, 105, 110, 116, 56, 95, 116, 32, 42, 112, 116, 114, 32, 61, 32, 40, 117, 105, 110, 116, 56, 95, 116, 42, 41, 98, 45, 62, 115, 104, 97, 114, 101, 100, 46, 115, 44, 32, 42, 112, 116, 114, 95, 111, 114, 105, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 42, 111, 102, 102, 115, 101, 116, 44, 32, 105, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 100, 101, 99, 95, 116, 32, 42, 100, 32, 61, 32, 38, 98, 45, 62, 100, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 119, 104, 105, 99, 104, 32, 38, 32, 66, 67, 70, 95, 85, 78, 95, 70, 76, 84, 41, 32, 119, 104, 105, 99, 104, 32, 124, 61, 32, 66, 67, 70, 95, 85, 78, 95, 83, 84, 82, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 119, 104, 105, 99, 104, 32, 38, 32, 66, 67, 70, 95, 85, 78, 95, 73, 78, 70, 79, 41, 32, 119, 104, 105, 99, 104, 32, 124, 61, 32, 66, 67, 70, 95, 85, 78, 95, 83, 72, 82, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 40, 119, 104, 105, 99, 104, 38, 66, 67, 70, 95, 85, 78, 95, 83, 84, 82, 41, 32, 38, 38, 32, 33, 40, 98, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 38, 66, 67, 70, 95, 85, 78, 95, 83, 84, 82, 41, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 116, 109, 112, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 73, 68, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 109, 112, 46, 108, 32, 61, 32, 48, 59, 32, 116, 109, 112, 46, 115, 32, 61, 32, 100, 45, 62, 105, 100, 59, 32, 116, 109, 112, 46, 109, 32, 61, 32, 100, 45, 62, 109, 95, 105, 100, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 116, 114, 95, 111, 114, 105, 32, 61, 32, 112, 116, 114, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 116, 114, 32, 61, 32, 98, 99, 102, 95, 102, 109, 116, 95, 115, 105, 122, 101, 100, 95, 97, 114, 114, 97, 121, 40, 38, 116, 109, 112, 44, 32, 112, 116, 114, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 45, 62, 117, 110, 112, 97, 99, 107, 95, 115, 105, 122, 101, 91, 48, 93, 32, 61, 32, 112, 116, 114, 32, 45, 32, 112, 116, 114, 95, 111, 114, 105, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 99, 40, 39, 92, 48, 39, 44, 32, 38, 116, 109, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 45, 62, 105, 100, 32, 61, 32, 116, 109, 112, 46, 115, 59, 32, 100, 45, 62, 109, 95, 105, 100, 32, 61, 32, 116, 109, 112, 46, 109, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 82, 69, 70, 32, 97, 110, 100, 32, 65, 76, 84, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 115, 105, 110, 103, 108, 101, 32, 98, 108, 111, 99, 107, 32, 40, 100, 45, 62, 97, 108, 115, 41, 32, 97, 110, 100, 32, 100, 45, 62, 97, 108, 108, 101, 108, 101, 115, 32, 97, 114, 101, 32, 112, 111, 105, 110, 116, 101, 114, 115, 32, 105, 110, 116, 111, 32, 116, 104, 105, 115, 32, 98, 108, 111, 99, 107, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 109, 112, 46, 108, 32, 61, 32, 48, 59, 32, 116, 109, 112, 46, 115, 32, 61, 32, 100, 45, 62, 97, 108, 115, 59, 32, 116, 109, 112, 46, 109, 32, 61, 32, 100, 45, 62, 109, 95, 97, 108, 115, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 102, 102, 115, 101, 116, 32, 61, 32, 40, 105, 110, 116, 42, 41, 97, 108, 108, 111, 99, 97, 40, 98, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 32, 42, 32, 115, 105, 122, 101, 111, 102, 40, 105, 110, 116, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 116, 114, 95, 111, 114, 105, 32, 61, 32, 112, 116, 114, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 98, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 59, 32, 43, 43, 105, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 111, 102, 102, 115, 101, 116, 91, 105, 93, 32, 61, 32, 116, 109, 112, 46, 108, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 116, 114, 32, 61, 32, 98, 99, 102, 95, 102, 109, 116, 95, 115, 105, 122, 101, 100, 95, 97, 114, 114, 97, 121, 40, 38, 116, 109, 112, 44, 32, 112, 116, 114, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 99, 40, 39, 92, 48, 39, 44, 32, 38, 116, 109, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 45, 62, 117, 110, 112, 97, 99, 107, 95, 115, 105, 122, 101, 91, 49, 93, 32, 61, 32, 112, 116, 114, 32, 45, 32, 112, 116, 114, 95, 111, 114, 105, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 45, 62, 97, 108, 115, 32, 61, 32, 116, 109, 112, 46, 115, 59, 32, 100, 45, 62, 109, 95, 97, 108, 115, 32, 61, 32, 116, 109, 112, 46, 109, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 116, 115, 95, 101, 120, 112, 97, 110, 100, 40, 99, 104, 97, 114, 42, 44, 32, 98, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 44, 32, 100, 45, 62, 109, 95, 97, 108, 108, 101, 108, 101, 44, 32, 100, 45, 62, 97, 108, 108, 101, 108, 101, 41, 59, 32, 47, 47, 32, 78, 77, 58, 32, 104, 116, 115, 95, 101, 120, 112, 97, 110, 100, 40, 41, 32, 105, 115, 32, 97, 32, 109, 97, 99, 114, 111, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102]);
fileData0.push.apply(fileData0, [111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 98, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 59, 32, 43, 43, 105, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 100, 45, 62, 97, 108, 108, 101, 108, 101, 91, 105, 93, 32, 61, 32, 100, 45, 62, 97, 108, 115, 32, 43, 32, 111, 102, 102, 115, 101, 116, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 124, 61, 32, 66, 67, 70, 95, 85, 78, 95, 83, 84, 82, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 102, 32, 40, 40, 119, 104, 105, 99, 104, 38, 66, 67, 70, 95, 85, 78, 95, 70, 76, 84, 41, 32, 38, 38, 32, 33, 40, 98, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 38, 66, 67, 70, 95, 85, 78, 95, 70, 76, 84, 41, 41, 32, 123, 32, 47, 47, 32, 70, 73, 76, 84, 69, 82, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 116, 114, 32, 61, 32, 40, 117, 105, 110, 116, 56, 95, 116, 42, 41, 98, 45, 62, 115, 104, 97, 114, 101, 100, 46, 115, 32, 43, 32, 98, 45, 62, 117, 110, 112, 97, 99, 107, 95, 115, 105, 122, 101, 91, 48, 93, 32, 43, 32, 98, 45, 62, 117, 110, 112, 97, 99, 107, 95, 115, 105, 122, 101, 91, 49, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 116, 114, 95, 111, 114, 105, 32, 61, 32, 112, 116, 114, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 42, 112, 116, 114, 62, 62, 52, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 116, 121, 112, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 100, 45, 62, 110, 95, 102, 108, 116, 32, 61, 32, 98, 99, 102, 95, 100, 101, 99, 95, 115, 105, 122, 101, 40, 112, 116, 114, 44, 32, 38, 112, 116, 114, 44, 32, 38, 116, 121, 112, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 104, 116, 115, 95, 101, 120, 112, 97, 110, 100, 40, 105, 110, 116, 44, 32, 100, 45, 62, 110, 95, 102, 108, 116, 44, 32, 100, 45, 62, 109, 95, 102, 108, 116, 44, 32, 100, 45, 62, 102, 108, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 100, 45, 62, 110, 95, 102, 108, 116, 59, 32, 43, 43, 105, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 100, 45, 62, 102, 108, 116, 91, 105, 93, 32, 61, 32, 98, 99, 102, 95, 100, 101, 99, 95, 105, 110, 116, 49, 40, 112, 116, 114, 44, 32, 116, 121, 112, 101, 44, 32, 38, 112, 116, 114, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 43, 43, 112, 116, 114, 44, 32, 100, 45, 62, 110, 95, 102, 108, 116, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 45, 62, 117, 110, 112, 97, 99, 107, 95, 115, 105, 122, 101, 91, 50, 93, 32, 61, 32, 112, 116, 114, 32, 45, 32, 112, 116, 114, 95, 111, 114, 105, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 124, 61, 32, 66, 67, 70, 95, 85, 78, 95, 70, 76, 84, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 102, 32, 40, 40, 119, 104, 105, 99, 104, 38, 66, 67, 70, 95, 85, 78, 95, 73, 78, 70, 79, 41, 32, 38, 38, 32, 33, 40, 98, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 38, 66, 67, 70, 95, 85, 78, 95, 73, 78, 70, 79, 41, 41, 32, 123, 32, 47, 47, 32, 73, 78, 70, 79, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 116, 114, 32, 61, 32, 40, 117, 105, 110, 116, 56, 95, 116, 42, 41, 98, 45, 62, 115, 104, 97, 114, 101, 100, 46, 115, 32, 43, 32, 98, 45, 62, 117, 110, 112, 97, 99, 107, 95, 115, 105, 122, 101, 91, 48, 93, 32, 43, 32, 98, 45, 62, 117, 110, 112, 97, 99, 107, 95, 115, 105, 122, 101, 91, 49, 93, 32, 43, 32, 98, 45, 62, 117, 110, 112, 97, 99, 107, 95, 115, 105, 122, 101, 91, 50, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 116, 115, 95, 101, 120, 112, 97, 110, 100, 40, 98, 99, 102, 95, 105, 110, 102, 111, 95, 116, 44, 32, 98, 45, 62, 110, 95, 105, 110, 102, 111, 44, 32, 100, 45, 62, 109, 95, 105, 110, 102, 111, 44, 32, 100, 45, 62, 105, 110, 102, 111, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 100, 45, 62, 109, 95, 105, 110, 102, 111, 59, 32, 43, 43, 105, 41, 32, 100, 45, 62, 105, 110, 102, 111, 91, 105, 93, 46, 118, 112, 116, 114, 95, 102, 114, 101, 101, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 98, 45, 62, 110, 95, 105, 110, 102, 111, 59, 32, 43, 43, 105, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 116, 114, 32, 61, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 95, 105, 110, 102, 111, 95, 99, 111, 114, 101, 49, 40, 112, 116, 114, 44, 32, 38, 100, 45, 62, 105, 110, 102, 111, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 124, 61, 32, 66, 67, 70, 95, 85, 78, 95, 73, 78, 70, 79, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 102, 32, 40, 40, 119, 104, 105, 99, 104, 38, 66, 67, 70, 95, 85, 78, 95, 70, 77, 84, 41, 32, 38, 38, 32, 98, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 32, 38, 38, 32, 33, 40, 98, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 38, 66, 67, 70, 95, 85, 78, 95, 70, 77, 84, 41, 41, 32, 123, 32, 47, 47, 32, 70, 79, 82, 77, 65, 84, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 116, 114, 32, 61, 32, 40, 117, 105, 110, 116, 56, 95, 116, 42, 41, 98, 45, 62, 105, 110, 100, 105, 118, 46, 115, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 116, 115, 95, 101, 120, 112, 97, 110, 100, 40, 98, 99, 102, 95, 102, 109, 116, 95, 116, 44, 32, 98, 45, 62, 110, 95, 102, 109, 116, 44, 32, 100, 45, 62, 109, 95, 102, 109, 116, 44, 32, 100, 45, 62, 102, 109, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 100, 45, 62, 109, 95, 102, 109, 116, 59, 32, 43, 43, 105, 41, 32, 100, 45, 62, 102, 109, 116, 91, 105, 93, 46, 112, 95, 102, 114, 101, 101, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 98, 45, 62, 110, 95, 102, 109, 116, 59, 32, 43, 43, 105, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 116, 114, 32, 61, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 95, 102, 109, 116, 95, 99, 111, 114, 101, 49, 40, 112, 116, 114, 44, 32, 98, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 44, 32, 38, 100, 45, 62, 102, 109, 116, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 124, 61, 32, 66, 67, 70, 95, 85, 78, 95, 70, 77, 84, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 10, 105, 110, 116, 32, 118, 99, 102, 95, 102, 111, 114, 109, 97, 116, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 44, 32, 99, 111, 110, 115, 116, 32, 98, 99, 102, 49, 95, 116, 32, 42, 118, 44, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 42, 115, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 40, 40, 98, 99, 102, 49, 95, 116, 42, 41, 118, 44, 32, 66, 67, 70, 95, 85, 78, 95, 65, 76, 76, 41, 59, 10, 32, 32, 32, 32, 107, 112, 117, 116, 115, 40, 104, 45, 62, 105, 100, 91, 66, 67, 70, 95, 68, 84, 95, 67, 84, 71, 93, 91, 118, 45, 62, 114, 105, 100, 93, 46, 107, 101, 121, 44, 32, 115, 41, 59, 32, 47, 47, 32, 67, 72, 82, 79, 77, 10, 32, 32, 32, 32, 107, 112, 117, 116, 99, 40, 39, 92, 116, 39, 44, 32, 115, 41, 59, 32, 107, 112, 117, 116, 119, 40, 118, 45, 62, 112, 111, 115, 32, 43, 32, 49, 44, 32, 115, 41, 59, 32, 47, 47, 32, 80, 79, 83, 10, 32, 32, 32, 32, 107, 112, 117, 116, 99, 40, 39, 92, 116, 39, 44, 32, 115, 41, 59, 32, 107, 112, 117, 116, 115, 40, 118, 45, 62, 100, 46, 105, 100, 32, 63, 32, 118, 45, 62, 100, 46, 105, 100, 32, 58, 32, 34, 46, 34, 44, 32, 115, 41, 59, 32, 47, 47, 32, 73, 68, 10, 32, 32, 32, 32, 107, 112, 117, 116, 99, 40, 39, 92, 116, 39, 44, 32, 115, 41, 59, 32, 47, 47, 32, 82, 69, 70, 10, 32, 32, 32, 32, 105, 102, 32, 40, 118, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 32, 62, 32, 48, 41, 32, 107, 112, 117, 116, 115, 40, 118, 45, 62, 100, 46, 97, 108, 108, 101, 108, 101, 91, 48, 93, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 107, 112, 117, 116, 99, 40, 39, 46, 39, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 107, 112, 117, 116, 99, 40, 39, 92, 116, 39, 44, 32, 115, 41, 59, 32, 47, 47, 32, 65, 76, 84, 10, 32, 32, 32, 32, 105, 102, 32, 40, 118, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 32, 62, 32, 49, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 49, 59, 32, 105, 32, 60, 32, 118, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 59, 32, 43, 43, 105, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 105, 32, 62, 32, 49, 41, 32, 107, 112, 117, 116, 99, 40, 39, 44, 39, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 40, 118, 45, 62, 100, 46, 97, 108, 108, 101, 108, 101, 91, 105, 93, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 107, 112, 117, 116, 99, 40, 39, 46, 39, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 107, 112, 117, 116, 99, 40, 39, 92, 116, 39, 44, 32, 115, 41, 59, 32, 47, 47, 32, 81, 85, 65, 76, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 98, 99, 102, 95, 102, 108, 111, 97, 116, 95, 105, 115, 95, 109, 105, 115, 115, 105, 110, 103, 40, 118, 45, 62, 113, 117, 97, 108, 41, 32, 41, 32, 107, 112, 117, 116, 99, 40, 39, 46, 39, 44, 32, 115, 41, 59, 32, 47, 47, 32, 81, 85, 65, 76, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 107, 115, 112, 114, 105, 110, 116, 102, 40, 115, 44, 32, 34, 37, 103, 34, 44, 32, 118, 45, 62, 113, 117, 97, 108, 41, 59, 10, 32, 32, 32, 32, 107, 112, 117, 116, 99, 40, 39, 92, 116, 39, 44, 32, 115, 41, 59, 32, 47, 47, 32, 70, 73, 76, 84, 69, 82, 10, 32, 32, 32, 32, 105, 102, 32, 40, 118, 45, 62, 100, 46, 110, 95, 102, 108, 116, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 118, 45, 62, 100, 46, 110, 95, 102, 108, 116, 59, 32, 43, 43, 105, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 105, 41, 32, 107, 112, 117, 116, 99, 40, 39, 59, 39, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 40, 104, 45, 62, 105, 100, 91, 66, 67, 70, 95, 68, 84, 95, 73, 68, 93, 91, 118, 45, 62, 100, 46, 102, 108, 116, 91, 105, 93, 93, 46, 107, 101, 121, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 107, 112, 117, 116, 99, 40, 39, 46, 39, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 107, 112, 117, 116, 99, 40, 39, 92, 116, 39, 44, 32, 115, 41, 59, 32, 47, 47, 32, 73, 78, 70, 79, 10, 32, 32, 32, 32, 105, 102, 32, 40, 118, 45, 62, 110, 95, 105, 110, 102, 111, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 102, 105, 114, 115, 116, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 118, 45, 62, 110, 95, 105, 110, 102, 111, 59, 32, 43, 43, 105, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 105, 110, 102, 111, 95, 116, 32, 42, 122, 32, 61, 32, 38, 118, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 122, 45, 62, 118, 112, 116, 114, 32, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 102, 105, 114, 115, 116, 32, 41, 32, 107, 112, 117, 116, 99, 40, 39, 59, 39, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 105, 114, 115, 116, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 40, 104, 45, 62, 105, 100, 91, 66, 67, 70, 95, 68, 84, 95, 73, 68, 93, 91, 122, 45, 62, 107, 101, 121, 93, 46, 107, 101, 121, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 122, 45, 62, 108, 101, 110, 32, 60, 61, 32, 48, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 99, 40, 39, 61, 39, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 122, 45, 62, 108, 101, 110, 32, 61, 61, 32, 49, 41, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 119, 105, 116, 99, 104, 32, 40, 122, 45, 62, 116, 121, 112, 101, 41, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 115, 101, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 56, 58, 32, 32, 105, 102, 32, 40, 32, 122, 45, 62, 118, 49, 46, 105, 61, 61, 98, 99, 102, 95, 105, 110, 116, 56, 95, 109, 105, 115, 115, 105, 110, 103, 32, 41, 32, 107, 112, 117, 116, 99, 40, 39, 46, 39, 44, 32, 115, 41, 59, 32, 101, 108, 115, 101, 32, 107, 112, 117, 116, 119, 40, 122, 45, 62, 118, 49, 46, 105, 44, 32, 115, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 115, 101, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 49, 54, 58, 32, 105, 102, 32, 40, 32, 122, 45, 62, 118, 49, 46, 105, 61, 61, 98, 99, 102, 95, 105, 110, 116, 49, 54, 95, 109, 105, 115, 115, 105, 110, 103, 32, 41, 32, 107, 112, 117, 116, 99, 40, 39, 46, 39, 44, 32, 115, 41, 59, 32, 101, 108, 115, 101, 32, 107, 112, 117, 116, 119, 40, 122, 45, 62, 118, 49, 46, 105, 44, 32, 115, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 115, 101, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 51, 50, 58, 32, 105, 102, 32, 40, 32, 122, 45, 62, 118, 49, 46, 105, 61, 61, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 109, 105, 115, 115, 105, 110, 103, 32, 41, 32, 107, 112, 117, 116, 99, 40, 39, 46, 39, 44, 32, 115, 41, 59, 32, 101, 108, 115, 101, 32, 107, 112, 117, 116, 119, 40, 122, 45, 62, 118, 49, 46, 105, 44, 32, 115, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 115, 101, 32, 66, 67, 70, 95, 66, 84, 95, 70, 76, 79, 65, 84, 58, 32, 105, 102, 32, 40, 32, 98, 99, 102, 95, 102, 108, 111, 97, 116, 95, 105, 115, 95, 109, 105, 115, 115, 105, 110, 103, 40, 122, 45, 62, 118, 49, 46, 102, 41, 32, 41, 32, 107, 112, 117, 116, 99, 40, 39, 46, 39, 44, 32, 115, 41, 59, 32, 101, 108, 115, 101, 32, 107, 115, 112, 114, 105, 110, 116, 102, 40, 115, 44, 32, 34, 37, 103, 34, 44, 32, 122, 45, 62, 118, 49, 46, 102, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 115, 101, 32, 66, 67, 70, 95, 66, 84, 95, 67, 72, 65, 82, 58, 32, 32, 107, 112, 117, 116, 99, 40, 122, 45, 62, 118, 49, 46, 105, 44, 32, 115, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 102, 97, 117, 108, 116, 58, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 116, 111, 100, 111, 58, 32, 116, 121, 112, 101, 32, 37, 100, 92, 110, 34, 44, 32, 122, 45, 62, 116, 121, 112, 101, 41, 59, 32, 101, 120, 105, 116, 40, 49, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 98, 99, 102, 95, 102, 109, 116, 95, 97, 114, 114, 97, 121, 40, 115, 44, 32, 122, 45, 62, 108, 101, 110, 44, 32, 122, 45, 62, 116, 121, 112, 101, 44, 32, 122, 45, 62, 118, 112, 116, 114, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 102, 105, 114, 115, 116, 32, 41, 32, 107, 112, 117, 116, 99, 40, 39, 46, 39, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 107, 112, 117, 116, 99, 40, 39, 46, 39, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 47, 47, 32, 70, 79, 82, 77, 65, 84, 32, 97, 110, 100, 32, 105, 110, 100, 105, 118, 105, 100, 117, 97, 108, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 10, 32, 32, 32, 32, 105, 102, 32, 40, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 105, 44, 106, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 118, 45, 62, 110, 95, 102, 109, 116, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 103, 116, 95, 105, 32, 61, 32, 45, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 102, 109, 116, 95, 116, 32, 42, 102, 109, 116, 32, 61, 32, 118, 45, 62, 100, 46, 102, 109, 116, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 102, 105, 114, 115, 116, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 40, 105, 110, 116, 41, 118, 45, 62, 110, 95, 102, 109, 116, 59, 32, 43, 43, 105, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 102, 109, 116, 91, 105, 93, 46, 112, 32, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 99, 40, 33, 102, 105, 114, 115, 116, 32, 63, 32, 39, 58, 39, 32, 58, 32, 39, 92, 116, 39, 44, 32, 115, 41, 59, 32, 102, 105, 114, 115, 116, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 102, 109, 116, 91, 105, 93, 46, 105, 100, 60, 48, 32, 41, 32, 47, 47, 33, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 105, 110, 102, 111, 95, 101, 120, 105, 115, 116, 115, 40, 104, 44, 66, 67, 70, 95, 72, 76, 95, 70, 77, 84, 44, 102, 109, 116, 91, 105, 93, 46, 105, 100, 41, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 32, 34, 91, 69, 58, 58, 37, 115, 93, 32, 105, 110, 118, 97, 108, 105, 100, 32, 66, 67, 70, 44, 32, 116, 104, 101, 32, 70, 79, 82, 77, 65, 84, 32, 116, 97, 103, 32, 105, 100, 61, 37, 100, 32, 110, 111, 116, 32, 112, 114, 101, 115, 101, 110, 116, 32, 105, 110, 32, 116, 104, 101, 32, 104, 101, 97, 100, 101, 114, 46, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 44, 32, 102, 109, 116, 91, 105, 93, 46, 105, 100, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 98, 111, 114, 116, 40, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 40, 104, 45, 62, 105, 100, 91, 66, 67, 70, 95, 68, 84, 95, 73, 68, 93, 91, 102, 109, 116, 91, 105, 93, 46, 105, 100, 93, 46, 107, 101, 121, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 115, 116, 114, 99, 109, 112, 40, 104, 45, 62, 105, 100, 91, 66, 67, 70, 95, 68, 84, 95, 73, 68, 93, 91, 102, 109, 116, 91, 105, 93, 46, 105, 100, 93, 46, 107, 101, 121, 44, 32, 34, 71, 84, 34, 41, 32, 61, 61, 32, 48, 41, 32, 103, 116, 95, 105, 32, 61, 32, 105, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 102, 105, 114, 115, 116, 32, 41, 32, 107, 112, 117, 116, 115, 40, 34, 92, 116, 46, 34, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 106, 32, 61, 32, 48, 59, 32, 106, 32, 60, 32, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 59, 32, 43, 43, 106, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 99, 40, 39, 92, 116, 39, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 105, 114, 115, 116, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 40, 105, 110, 116, 41, 118, 45, 62, 110, 95, 102, 109, 116, 59, 32, 43, 43, 105, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 102, 109, 116, 95, 116, 32, 42, 102, 32, 61, 32, 38, 102, 109, 116, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 102, 45, 62, 112, 32, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 33, 102, 105, 114, 115, 116, 41, 32, 107, 112, 117, 116, 99, 40, 39, 58, 39, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 105, 114, 115, 116, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 103, 116, 95, 105, 32, 61, 61, 32, 105, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 102, 111, 114, 109, 97, 116, 95, 103, 116, 40, 102, 44, 106, 44, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 102, 109, 116, 95, 97, 114, 114, 97, 121, 40, 115, 44, 32, 102, 45, 62, 110, 44, 32, 102, 45, 62, 116, 121, 112, 101, 44, 32, 102, 45, 62, 112, 32, 43, 32, 106, 32, 42, 32, 102, 45, 62, 115, 105, 122, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 102, 105, 114, 115, 116, 32, 41, 32, 107, 112, 117, 116, 99, 40, 39, 46, 39, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 106, 61, 48, 59, 32, 106, 60, 61, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 59, 32, 106, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 40, 34, 92, 116, 46, 34, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 107, 112, 117, 116, 99, 40, 39, 92, 110, 39, 44, 32, 115, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 10, 105, 110, 116, 32, 118, 99, 102, 95, 119, 114, 105, 116, 101, 95, 108, 105, 110, 101, 40, 104, 116, 115, 70, 105, 108, 101, 32, 42, 102, 112, 44, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 42, 108, 105, 110, 101, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 114, 101, 116, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 115, 91, 108, 105, 110, 101, 45, 62, 108, 45, 49, 93, 33, 61, 39, 92, 110, 39, 32, 41, 32, 107, 112, 117, 116, 99, 40, 39, 92, 110, 39, 44, 108, 105, 110, 101, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 102, 112, 45, 62, 102, 111, 114, 109, 97, 116, 46, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 33, 61, 110, 111, 95, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 32, 61, 32, 98, 103, 122, 102, 95, 119, 114, 105, 116, 101, 40, 102, 112, 45, 62, 102, 112, 46, 98, 103, 122, 102, 44, 32, 108, 105, 110, 101, 45, 62, 115, 44, 32, 108, 105, 110, 101, 45, 62, 108, 41, 59, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 32, 61, 32, 104, 119, 114, 105, 116, 101, 40, 102, 112, 45, 62, 102, 112, 46, 104, 102, 105, 108, 101, 44, 32, 108, 105, 110, 101, 45, 62, 115, 44, 32, 108, 105, 110, 101, 45, 62, 108, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 116, 61, 61, 108, 105, 110, 101, 45, 62, 108, 32, 63, 32, 48, 32, 58, 32, 45, 49, 59, 10, 125, 10, 10, 105, 110, 116, 32, 118, 99, 102, 95, 119, 114, 105, 116, 101, 40, 104, 116, 115, 70, 105, 108, 101, 32, 42, 102, 112, 44, 32, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 118, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 114, 101, 116, 59, 10, 32, 32, 32, 32, 102, 112, 45, 62, 108, 105, 110, 101, 46, 108, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 118, 99, 102, 95, 102, 111, 114, 109, 97, 116, 49, 40, 104, 44, 32, 118, 44, 32, 38, 102, 112, 45, 62, 108, 105, 110, 101, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 102, 112, 45, 62, 102, 111, 114, 109, 97, 116, 46, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 33, 61, 110, 111, 95, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 32, 61, 32, 98, 103, 122, 102, 95, 119, 114, 105, 116, 101, 40, 102, 112, 45, 62, 102, 112, 46, 98, 103, 122, 102, 44, 32, 102, 112, 45, 62, 108, 105, 110, 101, 46, 115, 44, 32, 102, 112, 45, 62, 108, 105, 110, 101, 46, 108, 41, 59, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 32, 61, 32, 104, 119, 114, 105, 116, 101, 40, 102, 112, 45, 62, 102, 112, 46, 104, 102, 105, 108, 101, 44, 32, 102, 112, 45, 62, 108, 105, 110, 101, 46, 115, 44, 32, 102, 112, 45, 62, 108, 105, 110, 101, 46, 108, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 116, 61, 61, 102, 112, 45, 62, 108, 105, 110, 101, 46, 108, 32, 63, 32, 48, 32, 58, 32, 45, 49, 59, 10, 125, 10, 10, 47, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 10, 32, 42, 32, 68, 97, 116, 97, 32, 97, 99, 99, 101, 115, 115, 32, 114, 111, 117, 116, 105, 110, 101, 115, 32, 42, 10, 32, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 47, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 50, 105, 110, 116, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 44, 32, 105, 110, 116, 32, 119, 104, 105, 99, 104, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 105, 100, 41, 10, 123, 10, 32, 32, 32, 32, 107, 104, 105, 110, 116, 95, 116, 32, 107, 59, 10, 32, 32, 32, 32, 118, 100, 105, 99, 116, 95, 116, 32, 42, 100, 32, 61, 32, 40, 118, 100, 105, 99, 116, 95, 116, 42, 41, 104, 45, 62, 100, 105, 99, 116, 91, 119, 104, 105, 99, 104, 93, 59, 10, 32, 32, 32, 32, 107, 32, 61, 32, 107, 104, 95, 103, 101, 116, 40, 118, 100, 105, 99, 116, 44, 32, 100, 44, 32, 105, 100, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 107, 32, 61, 61, 32, 107, 104, 95, 101, 110, 100, 40, 100, 41, 63, 32, 45, 49, 32, 58, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 46, 105, 100, 59, 10, 125, 10, 10, 10, 47, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 10, 32, 42, 42, 42, 32, 66, 67, 70, 32, 105, 110, 100, 101, 120, 105, 110, 103, 32, 42, 42, 42, 10, 32, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 47, 10, 10, 104, 116, 115, 95, 105, 100, 120, 95, 116, 32, 42, 98, 99, 102, 95, 105, 110, 100, 101, 120, 40, 104, 116, 115, 70, 105, 108, 101, 32, 42, 102, 112, 44, 32, 105, 110, 116, 32, 109, 105, 110, 95, 115, 104, 105, 102, 116, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 110, 95, 108, 118, 108, 115, 44, 32, 105, 59, 10, 32, 32, 32, 32, 98, 99, 102, 49, 95, 116, 32, 42, 98, 59, 10, 32, 32, 32, 32, 104, 116, 115, 95, 105, 100, 120, 95, 116, 32, 42, 105, 100, 120, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 59, 10, 32, 32, 32, 32, 105, 110, 116, 54, 52, 95, 116, 32, 109, 97, 120, 95, 108, 101, 110, 32, 61, 32, 48, 44, 32, 115, 59, 10, 32, 32, 32, 32, 104, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 114, 101, 97, 100, 40, 102, 112, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 104, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 110, 105, 100, 115, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 104, 45, 62, 110, 91, 66, 67, 70, 95, 68, 84, 95, 67, 84, 71, 93, 59, 32, 43, 43, 105, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 104, 45, 62, 105, 100, 91, 66, 67, 70, 95, 68, 84, 95, 67, 84, 71, 93, 91, 105, 93, 46, 118, 97, 108, 32, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 109, 97, 120, 95, 108, 101, 110, 32, 60, 32, 104, 45, 62, 105, 100, 91, 66, 67, 70, 95, 68, 84, 95, 67, 84, 71, 93, 91, 105, 93, 46, 118, 97, 108, 45, 62, 105, 110, 102, 111, 91, 48, 93, 32, 41, 32, 109, 97, 120, 95, 108, 101, 110, 32, 61, 32, 104, 45, 62, 105, 100, 91, 66, 67, 70, 95, 68, 84, 95, 67, 84, 71, 93, 91, 105, 93, 46, 118, 97, 108, 45, 62, 105, 110, 102, 111, 91, 48, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 110, 105, 100, 115, 43, 43, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 109, 97, 120, 95, 108, 101, 110, 32, 41, 32, 109, 97, 120, 95, 108, 101, 110, 32, 61, 32, 40, 40, 105, 110, 116, 54, 52, 95, 116, 41, 49, 60, 60, 51, 49, 41, 32, 45, 32, 49, 59, 32, 32, 47, 47, 32, 73, 110, 32, 99, 97, 115, 101, 32, 99, 111, 110, 116, 105, 103, 32, 108, 105, 110, 101, 32, 105, 115, 32, 98, 114, 111, 107, 101, 110, 46, 10, 32, 32, 32, 32, 109, 97, 120, 95, 108, 101, 110, 32, 43, 61, 32, 50, 53, 54, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 110, 95, 108, 118, 108, 115, 32, 61, 32, 48, 44, 32, 115, 32, 61, 32, 49, 60, 60, 109, 105, 110, 95, 115, 104, 105, 102, 116, 59, 32, 109, 97, 120, 95, 108, 101, 110, 32, 62, 32, 115, 59, 32, 43, 43, 110, 95, 108, 118, 108, 115, 44, 32, 115, 32, 60, 60, 61, 32, 51, 41, 59, 10, 32, 32, 32, 32, 105, 100, 120, 32, 61, 32, 104, 116, 115, 95, 105, 100, 120, 95, 105, 110, 105, 116, 40, 110, 105, 100, 115, 44, 32, 72, 84, 83, 95, 70, 77, 84, 95, 67, 83, 73, 44, 32, 98, 103, 122, 102, 95, 116, 101, 108, 108, 40, 102, 112, 45, 62, 102, 112, 46, 98, 103, 122, 102, 41, 44, 32, 109, 105, 110, 95, 115, 104, 105, 102, 116, 44, 32, 110, 95, 108, 118, 108, 115, 41, 59, 10, 32, 32, 32, 32, 98, 32, 61, 32, 98, 99, 102, 95, 105, 110, 105, 116, 49, 40, 41, 59, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 98, 99, 102, 95, 114, 101, 97, 100, 49, 40, 102, 112, 44, 104, 44, 32, 98, 41, 32, 62, 61, 32, 48, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 114, 101, 116, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 32, 61, 32, 104, 116, 115, 95, 105, 100, 120, 95, 112, 117, 115, 104, 40, 105, 100, 120, 44, 32, 98, 45, 62, 114, 105, 100, 44, 32, 98, 45, 62, 112, 111, 115, 44, 32, 98, 45, 62, 112, 111, 115, 32, 43, 32, 98, 45, 62, 114, 108, 101, 110, 44, 32, 98, 103, 122, 102, 95, 116, 101, 108, 108, 40, 102, 112, 45, 62, 102, 112, 46, 98, 103, 122, 102, 41, 44, 32, 49, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 114, 101, 116, 32, 60, 32, 48, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 100, 101, 115, 116, 114, 111, 121, 49, 40, 98, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 104, 116, 115, 95, 105, 100, 120, 95, 100, 101, 115, 116, 114, 111, 121, 40, 105, 100, 120, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 104, 116, 115, 95, 105, 100, 120, 95, 102, 105, 110, 105, 115, 104, 40, 105, 100, 120, 44, 32, 98, 103, 122, 102, 95, 116, 101, 108, 108, 40, 102, 112, 45, 62, 102, 112, 46, 98, 103, 122, 102, 41, 41, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 100, 101, 115, 116, 114, 111, 121, 49, 40, 98, 41, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 100, 101, 115, 116, 114, 111, 121, 40, 104, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 105, 100, 120, 59, 10, 125, 10, 10, 104, 116, 115, 95, 105, 100, 120, 95, 116, 32, 42, 98, 99, 102, 95, 105, 110, 100, 101, 120, 95, 108, 111, 97, 100, 50, 40, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 102, 110, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 102, 110, 105, 100, 120, 41, 10, 123, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 102, 110, 105, 100, 120, 63, 32, 104, 116, 115, 95, 105, 100, 120, 95, 108, 111, 97, 100, 50, 40, 102, 110, 44, 32, 102, 110, 105, 100, 120, 41, 32, 58, 32, 98, 99, 102, 95, 105, 110, 100, 101, 120, 95, 108, 111, 97, 100, 40, 102, 110, 41, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 105, 110, 100, 101, 120, 95, 98, 117, 105, 108, 100, 50, 40, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 102, 110, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 102, 110, 105, 100, 120, 44, 32, 105, 110, 116, 32, 109, 105, 110, 95, 115, 104, 105, 102, 116, 41, 10, 123, 10, 32, 32, 32, 32, 104, 116, 115, 70, 105, 108, 101, 32, 42, 102, 112, 59, 10, 32, 32, 32, 32, 104, 116, 115, 95, 105, 100, 120, 95, 116, 32, 42, 105, 100, 120, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 114, 101, 116, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 40, 102, 112, 32, 61, 32, 104, 116, 115, 95, 111, 112, 101, 110, 40, 102, 110, 44, 32, 34, 114, 98, 34, 41, 41, 32, 61, 61, 32, 48, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 102, 112, 45, 62, 102, 111, 114, 109, 97, 116, 46, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 33, 61, 98, 103, 122, 102, 32, 41, 32, 123, 32, 104, 116, 115, 95, 99, 108, 111, 115, 101, 40, 102, 112, 41, 59, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 32, 125, 10, 32, 32, 32, 32, 105, 100, 120, 32, 61, 32, 98, 99, 102, 95, 105, 110, 100, 101, 120, 40, 102, 112, 44, 32, 109, 105, 110, 95, 115, 104, 105, 102, 116, 41, 59, 10, 32, 32, 32, 32, 104, 116, 115, 95, 99, 108, 111, 115, 101, 40, 102, 112, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 105, 100, 120, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 114, 101, 116, 32, 61, 32, 104, 116, 115, 95, 105, 100, 120, 95, 115, 97, 118, 101, 95, 97, 115, 40, 105, 100, 120, 44, 32, 102, 110, 44, 32, 102, 110, 105, 100, 120, 44, 32, 72, 84, 83, 95, 70, 77, 84, 95, 67, 83, 73, 41, 59, 10, 32, 32, 32, 32, 104, 116, 115, 95, 105, 100, 120, 95, 100, 101, 115, 116, 114, 111, 121, 40, 105, 100, 120, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 116, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 105, 110, 100, 101, 120, 95, 98, 117, 105, 108, 100, 40, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 102, 110, 44, 32, 105, 110, 116, 32, 109, 105, 110, 95, 115, 104, 105, 102, 116, 41, 10, 123, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 98, 99, 102, 95, 105, 110, 100, 101, 120, 95, 98, 117, 105, 108, 100, 50, 40, 102, 110, 44, 32, 78, 85, 76, 76, 44, 32, 109, 105, 110, 95, 115, 104, 105, 102, 116, 41, 59, 10, 125, 10, 10, 47, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 10, 32, 42, 42, 42, 32, 85, 116, 105, 108, 105, 116, 105, 101, 115, 32, 42, 42, 42, 10, 32, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 47, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 99, 111, 109, 98, 105, 110, 101, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 100, 115, 116, 44, 32, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 115, 114, 99, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 44, 32, 110, 100, 115, 116, 95, 111, 114, 105, 32, 61, 32, 100, 115, 116, 45, 62, 110, 104, 114, 101, 99, 44, 32, 110, 101, 101, 100, 95, 115, 121, 110, 99, 32, 61, 32, 48, 44, 32, 114, 101, 116, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 115, 114, 99, 45, 62, 110, 104, 114, 101, 99, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 71, 69, 78, 32, 38, 38, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 118, 97, 108, 117, 101, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 106, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 106, 61, 48, 59, 32, 106, 60, 110, 100, 115, 116, 95, 111, 114, 105, 59, 32, 106, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 100, 115, 116, 45, 62, 104, 114, 101, 99, 91, 106, 93, 45, 62, 116, 121, 112, 101, 33, 61, 66, 67, 70, 95, 72, 76, 95, 71, 69, 78, 32, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 67, 104, 101, 99, 107, 105, 110, 103, 32, 111, 110, 108, 121, 32, 116, 104, 101, 32, 107, 101, 121, 32, 112, 97, 114, 116, 32, 111, 102, 32, 103, 101, 110, 101, 114, 105, 99, 32, 108, 105, 110, 101, 115, 44, 32, 111, 116, 104, 101, 114, 119, 105, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 116, 104, 101, 32, 86, 67, 70, 115, 32, 97, 114, 101, 32, 116, 111, 111, 32, 118, 101, 114, 98, 111, 115, 101, 46, 32, 83, 104, 111, 117, 108, 100, 32, 119, 101, 32, 112, 101, 114, 104, 97, 112, 115, 32, 97, 100, 100, 32, 97, 32, 102, 108, 97, 103, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 116, 111, 32, 98, 99, 102, 95, 104, 100, 114, 95, 99, 111, 109, 98, 105, 110, 101, 40, 41, 32, 97, 110, 100, 32, 109, 97, 107, 101, 32, 116, 104, 105, 115, 32, 111, 112, 116, 105, 111, 110, 97, 108, 63, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 99, 109, 112, 40, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 107, 101, 121, 44, 100, 115, 116, 45, 62, 104, 114, 101, 99, 91, 106, 93, 45, 62, 107, 101, 121, 41, 32, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 106, 62, 61, 110, 100, 115, 116, 95, 111, 114, 105, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 101, 101, 100, 95, 115, 121, 110, 99, 32, 43, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 100, 100, 95, 104, 114, 101, 99, 40, 100, 115, 116, 44, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 100, 117, 112, 40, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 83, 84, 82, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 78, 66, 58, 32, 119, 101, 32, 97, 114, 101, 32, 105, 103, 110, 111, 114, 105, 110, 103, 32, 102, 105, 101, 108, 100, 115, 32, 119, 105, 116, 104, 111, 117, 116, 32, 73, 68, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 106, 32, 61, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 102, 105, 110, 100, 95, 107, 101, 121, 40, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 44, 34, 73, 68, 34, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 106, 62, 61, 48, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 114, 101, 99, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 103, 101, 116, 95, 104, 114, 101, 99, 40, 100, 115, 116, 44, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 116, 121, 112, 101, 44, 32, 34, 73, 68, 34, 44, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 118, 97, 108, 115, 91, 106, 93, 44, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 107, 101, 121, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 114, 101, 99, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 101, 101, 100, 95, 115, 121, 110, 99, 32, 43, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 100, 100, 95, 104, 114, 101, 99, 40, 100, 115, 116, 44, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 100, 117, 112, 40, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 106, 32, 61, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 102, 105, 110, 100, 95, 107, 101, 121, 40, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 44, 34, 73, 68, 34, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 32, 106, 62, 61, 48, 32, 41, 59, 32, 47, 47, 32, 116, 104, 105, 115, 32, 115, 104, 111, 117, 108, 100, 32, 97, 108, 119, 97, 121, 115, 32, 98, 101, 32, 116, 114, 117, 101, 32, 102, 111, 114, 32, 118, 97, 108, 105, 100, 32, 86, 67, 70, 115, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 114, 101, 99, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 103, 101, 116, 95, 104, 114, 101, 99, 40, 100, 115, 116, 44, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 116, 121, 112, 101, 44, 32, 34, 73, 68, 34, 44, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 118, 97, 108, 115, 91, 106, 93, 44, 32, 78, 85, 76, 76, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 114, 101, 99, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 101, 101, 100, 95, 115, 121, 110, 99, 32, 43, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 100, 100, 95, 104, 114, 101, 99, 40, 100, 115, 116, 44, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 100, 117, 112, 40, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 73, 78, 70, 79, 32, 124, 124, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 70, 77, 84, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 67, 104, 101, 99, 107, 32, 116, 104, 97, 116, 32, 98, 111, 116, 104, 32, 114, 101, 99, 111, 114, 100, 115, 32, 97, 114, 101, 32, 111, 102, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 116, 121, 112, 101, 46, 32, 84, 104, 101, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 50, 108, 101, 110, 103, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 109, 97, 99, 114, 111, 32, 99, 97, 110, 110, 111, 116, 32, 98, 101, 32, 117, 115, 101, 100, 32, 104, 101, 114, 101, 32, 98, 101, 99, 97, 117, 115, 101, 32, 100, 115, 116, 32, 104, 101, 97, 100, 101, 114, 32, 105, 115, 32, 110, 111, 116, 32, 115, 121, 110, 99, 101, 100, 32, 121, 101, 116, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 100, 105, 99, 116, 95, 116, 32, 42, 100, 95, 115, 114, 99, 32, 61, 32, 40, 118, 100, 105, 99, 116, 95, 116, 42, 41, 115, 114, 99, 45, 62, 100, 105, 99, 116, 91, 66, 67, 70, 95, 68, 84, 95, 73, 68, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 100, 105, 99, 116, 95, 116, 32, 42, 100, 95, 100, 115, 116, 32, 61, 32, 40, 118, 100, 105, 99, 116, 95, 116, 42, 41, 100, 115, 116, 45, 62, 100, 105, 99, 116, 91, 66, 67, 70, 95, 68, 84, 95, 73, 68, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32]);
fileData0.push.apply(fileData0, [32, 32, 32, 32, 32, 107, 104, 105, 110, 116, 95, 116, 32, 107, 95, 115, 114, 99, 32, 32, 61, 32, 107, 104, 95, 103, 101, 116, 40, 118, 100, 105, 99, 116, 44, 32, 100, 95, 115, 114, 99, 44, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 118, 97, 108, 115, 91, 48, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 105, 110, 116, 95, 116, 32, 107, 95, 100, 115, 116, 32, 32, 61, 32, 107, 104, 95, 103, 101, 116, 40, 118, 100, 105, 99, 116, 44, 32, 100, 95, 100, 115, 116, 44, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 118, 97, 108, 115, 91, 48, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 40, 107, 104, 95, 118, 97, 108, 40, 100, 95, 115, 114, 99, 44, 107, 95, 115, 114, 99, 41, 46, 105, 110, 102, 111, 91, 114, 101, 99, 45, 62, 116, 121, 112, 101, 93, 62, 62, 56, 32, 38, 32, 48, 120, 102, 41, 32, 33, 61, 32, 40, 107, 104, 95, 118, 97, 108, 40, 100, 95, 100, 115, 116, 44, 107, 95, 100, 115, 116, 41, 46, 105, 110, 102, 111, 91, 114, 101, 99, 45, 62, 116, 121, 112, 101, 93, 62, 62, 56, 32, 38, 32, 48, 120, 102, 41, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 87, 97, 114, 110, 105, 110, 103, 58, 32, 116, 114, 121, 105, 110, 103, 32, 116, 111, 32, 99, 111, 109, 98, 105, 110, 101, 32, 92, 34, 37, 115, 92, 34, 32, 116, 97, 103, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 115, 32, 111, 102, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 108, 101, 110, 103, 116, 104, 115, 92, 110, 34, 44, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 118, 97, 108, 115, 91, 48, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 32, 124, 61, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 40, 107, 104, 95, 118, 97, 108, 40, 100, 95, 115, 114, 99, 44, 107, 95, 115, 114, 99, 41, 46, 105, 110, 102, 111, 91, 114, 101, 99, 45, 62, 116, 121, 112, 101, 93, 62, 62, 52, 32, 38, 32, 48, 120, 102, 41, 32, 33, 61, 32, 40, 107, 104, 95, 118, 97, 108, 40, 100, 95, 100, 115, 116, 44, 107, 95, 100, 115, 116, 41, 46, 105, 110, 102, 111, 91, 114, 101, 99, 45, 62, 116, 121, 112, 101, 93, 62, 62, 52, 32, 38, 32, 48, 120, 102, 41, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 87, 97, 114, 110, 105, 110, 103, 58, 32, 116, 114, 121, 105, 110, 103, 32, 116, 111, 32, 99, 111, 109, 98, 105, 110, 101, 32, 92, 34, 37, 115, 92, 34, 32, 116, 97, 103, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 115, 32, 111, 102, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 116, 121, 112, 101, 115, 92, 110, 34, 44, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 118, 97, 108, 115, 91, 48, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 32, 124, 61, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 110, 101, 101, 100, 95, 115, 121, 110, 99, 32, 41, 32, 98, 99, 102, 95, 104, 100, 114, 95, 115, 121, 110, 99, 40, 100, 115, 116, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 116, 59, 10, 125, 10, 10, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 98, 99, 102, 95, 104, 100, 114, 95, 109, 101, 114, 103, 101, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 100, 115, 116, 44, 32, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 115, 114, 99, 41, 10, 123, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 100, 115, 116, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 116, 104, 105, 115, 32, 119, 105, 108, 108, 32, 101, 102, 102, 101, 99, 116, 105, 118, 101, 108, 121, 32, 115, 116, 114, 105, 112, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 73, 68, 88, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 115, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 116, 111, 32, 98, 101, 99, 111, 109, 101, 32, 100, 115, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 115, 116, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 110, 105, 116, 40, 34, 114, 34, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 104, 116, 120, 116, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 102, 109, 116, 95, 116, 101, 120, 116, 40, 115, 114, 99, 44, 32, 48, 44, 32, 78, 85, 76, 76, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 112, 97, 114, 115, 101, 40, 100, 115, 116, 44, 32, 104, 116, 120, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 116, 120, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 115, 116, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 44, 32, 110, 100, 115, 116, 95, 111, 114, 105, 32, 61, 32, 100, 115, 116, 45, 62, 110, 104, 114, 101, 99, 44, 32, 110, 101, 101, 100, 95, 115, 121, 110, 99, 32, 61, 32, 48, 44, 32, 114, 101, 116, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 115, 114, 99, 45, 62, 110, 104, 114, 101, 99, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 71, 69, 78, 32, 38, 38, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 118, 97, 108, 117, 101, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 106, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 106, 61, 48, 59, 32, 106, 60, 110, 100, 115, 116, 95, 111, 114, 105, 59, 32, 106, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 100, 115, 116, 45, 62, 104, 114, 101, 99, 91, 106, 93, 45, 62, 116, 121, 112, 101, 33, 61, 66, 67, 70, 95, 72, 76, 95, 71, 69, 78, 32, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 67, 104, 101, 99, 107, 105, 110, 103, 32, 111, 110, 108, 121, 32, 116, 104, 101, 32, 107, 101, 121, 32, 112, 97, 114, 116, 32, 111, 102, 32, 103, 101, 110, 101, 114, 105, 99, 32, 108, 105, 110, 101, 115, 44, 32, 111, 116, 104, 101, 114, 119, 105, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 116, 104, 101, 32, 86, 67, 70, 115, 32, 97, 114, 101, 32, 116, 111, 111, 32, 118, 101, 114, 98, 111, 115, 101, 46, 32, 83, 104, 111, 117, 108, 100, 32, 119, 101, 32, 112, 101, 114, 104, 97, 112, 115, 32, 97, 100, 100, 32, 97, 32, 102, 108, 97, 103, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 116, 111, 32, 98, 99, 102, 95, 104, 100, 114, 95, 99, 111, 109, 98, 105, 110, 101, 40, 41, 32, 97, 110, 100, 32, 109, 97, 107, 101, 32, 116, 104, 105, 115, 32, 111, 112, 116, 105, 111, 110, 97, 108, 63, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 115, 116, 114, 99, 109, 112, 40, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 107, 101, 121, 44, 100, 115, 116, 45, 62, 104, 114, 101, 99, 91, 106, 93, 45, 62, 107, 101, 121, 41, 32, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 106, 62, 61, 110, 100, 115, 116, 95, 111, 114, 105, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 101, 101, 100, 95, 115, 121, 110, 99, 32, 43, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 100, 100, 95, 104, 114, 101, 99, 40, 100, 115, 116, 44, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 100, 117, 112, 40, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 83, 84, 82, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 78, 66, 58, 32, 119, 101, 32, 97, 114, 101, 32, 105, 103, 110, 111, 114, 105, 110, 103, 32, 102, 105, 101, 108, 100, 115, 32, 119, 105, 116, 104, 111, 117, 116, 32, 73, 68, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 106, 32, 61, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 102, 105, 110, 100, 95, 107, 101, 121, 40, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 44, 34, 73, 68, 34, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 106, 62, 61, 48, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 114, 101, 99, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 103, 101, 116, 95, 104, 114, 101, 99, 40, 100, 115, 116, 44, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 116, 121, 112, 101, 44, 32, 34, 73, 68, 34, 44, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 118, 97, 108, 115, 91, 106, 93, 44, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 107, 101, 121, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 114, 101, 99, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 101, 101, 100, 95, 115, 121, 110, 99, 32, 43, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 100, 100, 95, 104, 114, 101, 99, 40, 100, 115, 116, 44, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 100, 117, 112, 40, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 106, 32, 61, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 102, 105, 110, 100, 95, 107, 101, 121, 40, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 44, 34, 73, 68, 34, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 32, 106, 62, 61, 48, 32, 41, 59, 32, 47, 47, 32, 116, 104, 105, 115, 32, 115, 104, 111, 117, 108, 100, 32, 97, 108, 119, 97, 121, 115, 32, 98, 101, 32, 116, 114, 117, 101, 32, 102, 111, 114, 32, 118, 97, 108, 105, 100, 32, 86, 67, 70, 115, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 116, 32, 42, 114, 101, 99, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 103, 101, 116, 95, 104, 114, 101, 99, 40, 100, 115, 116, 44, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 116, 121, 112, 101, 44, 32, 34, 73, 68, 34, 44, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 118, 97, 108, 115, 91, 106, 93, 44, 32, 78, 85, 76, 76, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 114, 101, 99, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 101, 101, 100, 95, 115, 121, 110, 99, 32, 43, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 97, 100, 100, 95, 104, 114, 101, 99, 40, 100, 115, 116, 44, 32, 98, 99, 102, 95, 104, 114, 101, 99, 95, 100, 117, 112, 40, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 73, 78, 70, 79, 32, 124, 124, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 76, 95, 70, 77, 84, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 67, 104, 101, 99, 107, 32, 116, 104, 97, 116, 32, 98, 111, 116, 104, 32, 114, 101, 99, 111, 114, 100, 115, 32, 97, 114, 101, 32, 111, 102, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 116, 121, 112, 101, 46, 32, 84, 104, 101, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 50, 108, 101, 110, 103, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 109, 97, 99, 114, 111, 32, 99, 97, 110, 110, 111, 116, 32, 98, 101, 32, 117, 115, 101, 100, 32, 104, 101, 114, 101, 32, 98, 101, 99, 97, 117, 115, 101, 32, 100, 115, 116, 32, 104, 101, 97, 100, 101, 114, 32, 105, 115, 32, 110, 111, 116, 32, 115, 121, 110, 99, 101, 100, 32, 121, 101, 116, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 100, 105, 99, 116, 95, 116, 32, 42, 100, 95, 115, 114, 99, 32, 61, 32, 40, 118, 100, 105, 99, 116, 95, 116, 42, 41, 115, 114, 99, 45, 62, 100, 105, 99, 116, 91, 66, 67, 70, 95, 68, 84, 95, 73, 68, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 100, 105, 99, 116, 95, 116, 32, 42, 100, 95, 100, 115, 116, 32, 61, 32, 40, 118, 100, 105, 99, 116, 95, 116, 42, 41, 100, 115, 116, 45, 62, 100, 105, 99, 116, 91, 66, 67, 70, 95, 68, 84, 95, 73, 68, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 105, 110, 116, 95, 116, 32, 107, 95, 115, 114, 99, 32, 32, 61, 32, 107, 104, 95, 103, 101, 116, 40, 118, 100, 105, 99, 116, 44, 32, 100, 95, 115, 114, 99, 44, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 118, 97, 108, 115, 91, 48, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 105, 110, 116, 95, 116, 32, 107, 95, 100, 115, 116, 32, 32, 61, 32, 107, 104, 95, 103, 101, 116, 40, 118, 100, 105, 99, 116, 44, 32, 100, 95, 100, 115, 116, 44, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 118, 97, 108, 115, 91, 48, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 40, 107, 104, 95, 118, 97, 108, 40, 100, 95, 115, 114, 99, 44, 107, 95, 115, 114, 99, 41, 46, 105, 110, 102, 111, 91, 114, 101, 99, 45, 62, 116, 121, 112, 101, 93, 62, 62, 56, 32, 38, 32, 48, 120, 102, 41, 32, 33, 61, 32, 40, 107, 104, 95, 118, 97, 108, 40, 100, 95, 100, 115, 116, 44, 107, 95, 100, 115, 116, 41, 46, 105, 110, 102, 111, 91, 114, 101, 99, 45, 62, 116, 121, 112, 101, 93, 62, 62, 56, 32, 38, 32, 48, 120, 102, 41, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 87, 97, 114, 110, 105, 110, 103, 58, 32, 116, 114, 121, 105, 110, 103, 32, 116, 111, 32, 99, 111, 109, 98, 105, 110, 101, 32, 92, 34, 37, 115, 92, 34, 32, 116, 97, 103, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 115, 32, 111, 102, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 108, 101, 110, 103, 116, 104, 115, 92, 110, 34, 44, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 118, 97, 108, 115, 91, 48, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 32, 124, 61, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 40, 107, 104, 95, 118, 97, 108, 40, 100, 95, 115, 114, 99, 44, 107, 95, 115, 114, 99, 41, 46, 105, 110, 102, 111, 91, 114, 101, 99, 45, 62, 116, 121, 112, 101, 93, 62, 62, 52, 32, 38, 32, 48, 120, 102, 41, 32, 33, 61, 32, 40, 107, 104, 95, 118, 97, 108, 40, 100, 95, 100, 115, 116, 44, 107, 95, 100, 115, 116, 41, 46, 105, 110, 102, 111, 91, 114, 101, 99, 45, 62, 116, 121, 112, 101, 93, 62, 62, 52, 32, 38, 32, 48, 120, 102, 41, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 87, 97, 114, 110, 105, 110, 103, 58, 32, 116, 114, 121, 105, 110, 103, 32, 116, 111, 32, 99, 111, 109, 98, 105, 110, 101, 32, 92, 34, 37, 115, 92, 34, 32, 116, 97, 103, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 115, 32, 111, 102, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 116, 121, 112, 101, 115, 92, 110, 34, 44, 32, 115, 114, 99, 45, 62, 104, 114, 101, 99, 91, 105, 93, 45, 62, 118, 97, 108, 115, 91, 48, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 32, 124, 61, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 110, 101, 101, 100, 95, 115, 121, 110, 99, 32, 41, 32, 98, 99, 102, 95, 104, 100, 114, 95, 115, 121, 110, 99, 40, 100, 115, 116, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 115, 116, 59, 10, 125, 10, 105, 110, 116, 32, 98, 99, 102, 95, 116, 114, 97, 110, 115, 108, 97, 116, 101, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 100, 115, 116, 95, 104, 100, 114, 44, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 115, 114, 99, 95, 104, 100, 114, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 101, 114, 114, 99, 111, 100, 101, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 91, 37, 115, 58, 37, 100, 32, 37, 115, 93, 32, 85, 110, 99, 104, 101, 99, 107, 101, 100, 32, 101, 114, 114, 111, 114, 32, 40, 37, 100, 41, 44, 32, 101, 120, 105, 116, 105, 110, 103, 46, 92, 110, 34, 44, 32, 95, 95, 70, 73, 76, 69, 95, 95, 44, 95, 95, 76, 73, 78, 69, 95, 95, 44, 95, 95, 70, 85, 78, 67, 84, 73, 79, 78, 95, 95, 44, 108, 105, 110, 101, 45, 62, 101, 114, 114, 99, 111, 100, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 105, 116, 40, 49, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 115, 114, 99, 95, 104, 100, 114, 45, 62, 110, 116, 114, 97, 110, 115, 108, 61, 61, 45, 49, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 32, 32, 32, 32, 47, 47, 32, 110, 111, 32, 110, 101, 101, 100, 32, 116, 111, 32, 116, 114, 97, 110, 115, 108, 97, 116, 101, 44, 32, 97, 108, 108, 32, 116, 97, 103, 115, 32, 104, 97, 118, 101, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 105, 100, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 115, 114, 99, 95, 104, 100, 114, 45, 62, 110, 116, 114, 97, 110, 115, 108, 32, 41, 32, 32, 47, 47, 32, 99, 97, 108, 108, 101, 100, 32, 102, 111, 114, 32, 116, 104, 101, 32, 102, 105, 114, 115, 116, 32, 116, 105, 109, 101, 44, 32, 115, 101, 101, 32, 119, 104, 97, 116, 32, 110, 101, 101, 100, 115, 32, 116, 114, 97, 110, 115, 108, 97, 116, 105, 110, 103, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 100, 105, 99, 116, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 100, 105, 99, 116, 61, 48, 59, 32, 100, 105, 99, 116, 60, 50, 59, 32, 100, 105, 99, 116, 43, 43, 41, 32, 32, 32, 32, 47, 47, 32, 66, 67, 70, 95, 68, 84, 95, 73, 68, 32, 97, 110, 100, 32, 66, 67, 70, 95, 68, 84, 95, 67, 84, 71, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 95, 104, 100, 114, 45, 62, 116, 114, 97, 110, 115, 108, 91, 100, 105, 99, 116, 93, 32, 61, 32, 40, 105, 110, 116, 42, 41, 32, 109, 97, 108, 108, 111, 99, 40, 115, 114, 99, 95, 104, 100, 114, 45, 62, 110, 91, 100, 105, 99, 116, 93, 42, 115, 105, 122, 101, 111, 102, 40, 105, 110, 116, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 115, 114, 99, 95, 104, 100, 114, 45, 62, 110, 91, 100, 105, 99, 116, 93, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 115, 114, 99, 95, 104, 100, 114, 45, 62, 105, 100, 91, 100, 105, 99, 116, 93, 91, 105, 93, 46, 107, 101, 121, 32, 41, 32, 47, 47, 32, 103, 97, 112, 32, 108, 101, 102, 116, 32, 97, 102, 116, 101, 114, 32, 114, 101, 109, 111, 118, 101, 100, 32, 66, 67, 70, 32, 104, 101, 97, 100, 101, 114, 32, 108, 105, 110, 101, 115, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 95, 104, 100, 114, 45, 62, 116, 114, 97, 110, 115, 108, 91, 100, 105, 99, 116, 93, 91, 105, 93, 32, 61, 32, 45, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 95, 104, 100, 114, 45, 62, 116, 114, 97, 110, 115, 108, 91, 100, 105, 99, 116, 93, 91, 105, 93, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 50, 105, 110, 116, 40, 100, 115, 116, 95, 104, 100, 114, 44, 100, 105, 99, 116, 44, 115, 114, 99, 95, 104, 100, 114, 45, 62, 105, 100, 91, 100, 105, 99, 116, 93, 91, 105, 93, 46, 107, 101, 121, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 115, 114, 99, 95, 104, 100, 114, 45, 62, 116, 114, 97, 110, 115, 108, 91, 100, 105, 99, 116, 93, 91, 105, 93, 33, 61, 45, 49, 32, 38, 38, 32, 105, 33, 61, 115, 114, 99, 95, 104, 100, 114, 45, 62, 116, 114, 97, 110, 115, 108, 91, 100, 105, 99, 116, 93, 91, 105, 93, 32, 41, 32, 115, 114, 99, 95, 104, 100, 114, 45, 62, 110, 116, 114, 97, 110, 115, 108, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 115, 114, 99, 95, 104, 100, 114, 45, 62, 110, 116, 114, 97, 110, 115, 108, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 115, 114, 99, 95, 104, 100, 114, 45, 62, 116, 114, 97, 110, 115, 108, 91, 48, 93, 41, 59, 32, 115, 114, 99, 95, 104, 100, 114, 45, 62, 116, 114, 97, 110, 115, 108, 91, 48, 93, 32, 61, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 115, 114, 99, 95, 104, 100, 114, 45, 62, 116, 114, 97, 110, 115, 108, 91, 49, 93, 41, 59, 32, 115, 114, 99, 95, 104, 100, 114, 45, 62, 116, 114, 97, 110, 115, 108, 91, 49, 93, 32, 61, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 95, 104, 100, 114, 45, 62, 110, 116, 114, 97, 110, 115, 108, 32, 61, 32, 45, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 115, 114, 99, 95, 104, 100, 114, 45, 62, 110, 116, 114, 97, 110, 115, 108, 61, 61, 45, 49, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 40, 108, 105, 110, 101, 44, 66, 67, 70, 95, 85, 78, 95, 65, 76, 76, 41, 59, 10, 10, 32, 32, 32, 32, 47, 47, 32, 67, 72, 82, 79, 77, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 115, 114, 99, 95, 104, 100, 114, 45, 62, 116, 114, 97, 110, 115, 108, 91, 66, 67, 70, 95, 68, 84, 95, 67, 84, 71, 93, 91, 108, 105, 110, 101, 45, 62, 114, 105, 100, 93, 32, 62, 61, 48, 32, 41, 32, 108, 105, 110, 101, 45, 62, 114, 105, 100, 32, 61, 32, 115, 114, 99, 95, 104, 100, 114, 45, 62, 116, 114, 97, 110, 115, 108, 91, 66, 67, 70, 95, 68, 84, 95, 67, 84, 71, 93, 91, 108, 105, 110, 101, 45, 62, 114, 105, 100, 93, 59, 10, 10, 32, 32, 32, 32, 47, 47, 32, 70, 73, 76, 84, 69, 82, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 108, 105, 110, 101, 45, 62, 100, 46, 110, 95, 102, 108, 116, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 115, 114, 99, 95, 105, 100, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 108, 116, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 115, 114, 99, 95, 104, 100, 114, 45, 62, 116, 114, 97, 110, 115, 108, 91, 66, 67, 70, 95, 68, 84, 95, 73, 68, 93, 91, 115, 114, 99, 95, 105, 100, 93, 32, 62, 61, 48, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 108, 116, 91, 105, 93, 32, 61, 32, 115, 114, 99, 95, 104, 100, 114, 45, 62, 116, 114, 97, 110, 115, 108, 91, 66, 67, 70, 95, 68, 84, 95, 73, 68, 93, 91, 115, 114, 99, 95, 105, 100, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 115, 104, 97, 114, 101, 100, 95, 100, 105, 114, 116, 121, 32, 124, 61, 32, 66, 67, 70, 49, 95, 68, 73, 82, 84, 89, 95, 70, 76, 84, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 47, 47, 32, 73, 78, 70, 79, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 108, 105, 110, 101, 45, 62, 110, 95, 105, 110, 102, 111, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 115, 114, 99, 95, 105, 100, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 46, 107, 101, 121, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 100, 115, 116, 95, 105, 100, 32, 61, 32, 115, 114, 99, 95, 104, 100, 114, 45, 62, 116, 114, 97, 110, 115, 108, 91, 66, 67, 70, 95, 68, 84, 95, 73, 68, 93, 91, 115, 114, 99, 95, 105, 100, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 100, 115, 116, 95, 105, 100, 60, 48, 32, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 115, 114, 99, 95, 115, 105, 122, 101, 32, 61, 32, 115, 114, 99, 95, 105, 100, 62, 62, 55, 32, 63, 32, 40, 32, 115, 114, 99, 95, 105, 100, 62, 62, 49, 53, 32, 63, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 51, 50, 32, 58, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 49, 54, 41, 32, 58, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 56, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 100, 115, 116, 95, 115, 105, 122, 101, 32, 61, 32, 100, 115, 116, 95, 105, 100, 62, 62, 55, 32, 63, 32, 40, 32, 100, 115, 116, 95, 105, 100, 62, 62, 49, 53, 32, 63, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 51, 50, 32, 58, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 49, 54, 41, 32, 58, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 56, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 115, 114, 99, 95, 115, 105, 122, 101, 61, 61, 100, 115, 116, 95, 115, 105, 122, 101, 32, 41, 32, 32, 32, 47, 47, 32, 99, 97, 110, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 46, 107, 101, 121, 32, 61, 32, 100, 115, 116, 95, 105, 100, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 105, 110, 116, 56, 95, 116, 32, 42, 118, 112, 116, 114, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 46, 118, 112, 116, 114, 32, 45, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 46, 118, 112, 116, 114, 95, 111, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 100, 115, 116, 95, 115, 105, 122, 101, 61, 61, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 56, 32, 41, 32, 123, 32, 118, 112, 116, 114, 91, 49, 93, 32, 61, 32, 40, 117, 105, 110, 116, 56, 95, 116, 41, 100, 115, 116, 95, 105, 100, 59, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 100, 115, 116, 95, 115, 105, 122, 101, 61, 61, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 49, 54, 32, 41, 32, 123, 32, 42, 40, 117, 105, 110, 116, 49, 54, 95, 116, 42, 41, 118, 112, 116, 114, 32, 61, 32, 40, 117, 105, 110, 116, 49, 54, 95, 116, 41, 100, 115, 116, 95, 105, 100, 59, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 123, 32, 42, 40, 117, 105, 110, 116, 51, 50, 95, 116, 42, 41, 118, 112, 116, 114, 32, 61, 32, 40, 117, 105, 110, 116, 51, 50, 95, 116, 41, 100, 115, 116, 95, 105, 100, 59, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 32, 32, 32, 47, 47, 32, 109, 117, 115, 116, 32, 114, 101, 97, 108, 108, 111, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 105, 110, 102, 111, 95, 116, 32, 42, 105, 110, 102, 111, 32, 61, 32, 38, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 32, 33, 105, 110, 102, 111, 45, 62, 118, 112, 116, 114, 95, 102, 114, 101, 101, 32, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 115, 116, 114, 32, 61, 32, 123, 48, 44, 48, 44, 48, 125, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 105, 110, 116, 49, 40, 38, 115, 116, 114, 44, 32, 100, 115, 116, 95, 105, 100, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 115, 105, 122, 101, 40, 38, 115, 116, 114, 44, 32, 105, 110, 102, 111, 45, 62, 108, 101, 110, 44, 105, 110, 102, 111, 45, 62, 116, 121, 112, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 102, 111, 45, 62, 118, 112, 116, 114, 95, 111, 102, 102, 32, 61, 32, 115, 116, 114, 46, 108, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 110, 40, 40, 99, 104, 97, 114, 42, 41, 105, 110, 102, 111, 45, 62, 118, 112, 116, 114, 44, 32, 105, 110, 102, 111, 45, 62, 118, 112, 116, 114, 95, 108, 101, 110, 44, 32, 38, 115, 116, 114, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 102, 111, 45, 62, 118, 112, 116, 114, 32, 61, 32, 40, 117, 105, 110, 116, 56, 95, 116, 42, 41, 115, 116, 114, 46, 115, 32, 43, 32, 105, 110, 102, 111, 45, 62, 118, 112, 116, 114, 95, 111, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 102, 111, 45, 62, 118, 112, 116, 114, 95, 102, 114, 101, 101, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 102, 111, 45, 62, 107, 101, 121, 32, 61, 32, 100, 115, 116, 95, 105, 100, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 115, 104, 97, 114, 101, 100, 95, 100, 105, 114, 116, 121, 32, 124, 61, 32, 66, 67, 70, 49, 95, 68, 73, 82, 84, 89, 95, 73, 78, 70, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 47, 47, 32, 70, 79, 82, 77, 65, 84, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 108, 105, 110, 101, 45, 62, 110, 95, 102, 109, 116, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 115, 114, 99, 95, 105, 100, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 46, 105, 100, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 100, 115, 116, 95, 105, 100, 32, 61, 32, 115, 114, 99, 95, 104, 100, 114, 45, 62, 116, 114, 97, 110, 115, 108, 91, 66, 67, 70, 95, 68, 84, 95, 73, 68, 93, 91, 115, 114, 99, 95, 105, 100, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 100, 115, 116, 95, 105, 100, 60, 48, 32, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 115, 114, 99, 95, 115, 105, 122, 101, 32, 61, 32, 115, 114, 99, 95, 105, 100, 62, 62, 55, 32, 63, 32, 40, 32, 115, 114, 99, 95, 105, 100, 62, 62, 49, 53, 32, 63, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 51, 50, 32, 58, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 49, 54, 41, 32, 58, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 56, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 100, 115, 116, 95, 115, 105, 122, 101, 32, 61, 32, 100, 115, 116, 95, 105, 100, 62, 62, 55, 32, 63, 32, 40, 32, 100, 115, 116, 95, 105, 100, 62, 62, 49, 53, 32, 63, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 51, 50, 32, 58, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 49, 54, 41, 32, 58, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 56, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 115, 114, 99, 95, 115, 105, 122, 101, 61, 61, 100, 115, 116, 95, 115, 105, 122, 101, 32, 41, 32, 32, 32, 47, 47, 32, 99, 97, 110, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 46, 105, 100, 32, 61, 32, 100, 115, 116, 95, 105, 100, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 105, 110, 116, 56, 95, 116, 32, 42, 112, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 46, 112, 32, 45, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 46, 112, 95, 111, 102, 102, 59, 32, 32, 32, 32, 47, 47, 32, 112, 111, 105, 110, 116, 101, 114, 32, 116, 111, 32, 116, 104, 101, 32, 118, 101, 99, 116, 111, 114, 32, 115, 105, 122, 101, 32, 40, 52, 98, 105, 116, 115, 41, 32, 97, 110, 100, 32, 66, 84, 32, 116, 121, 112, 101, 32, 40, 52, 98, 105, 116, 115, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 100, 115, 116, 95, 115, 105, 122, 101, 61, 61, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 56, 32, 41, 32, 123, 32, 112, 91, 49, 93, 32, 61, 32, 100, 115, 116, 95, 105, 100, 59, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 100, 115, 116, 95, 115, 105, 122, 101, 61, 61, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 49, 54, 32, 41, 32, 123, 32, 117, 105, 110, 116, 56, 95, 116, 32, 42, 120, 32, 61, 32, 40, 117, 105, 110, 116, 56, 95, 116, 42, 41, 32, 38, 100, 115, 116, 95, 105, 100, 59, 32, 112, 91, 49, 93, 32, 61, 32, 120, 91, 48, 93, 59, 32, 112, 91, 50, 93, 32, 61, 32, 120, 91, 49, 93, 59, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 123, 32, 117, 105, 110, 116, 56, 95, 116, 32, 42, 120, 32, 61, 32, 40, 117, 105, 110, 116, 56, 95, 116, 42, 41, 32, 38, 100, 115, 116, 95, 105, 100, 59, 32, 112, 91, 49, 93, 32, 61, 32, 120, 91, 48, 93, 59, 32, 112, 91, 50, 93, 32, 61, 32, 120, 91, 49, 93, 59, 32, 112, 91, 51, 93, 32, 61, 32, 120, 91, 50, 93, 59, 32, 112, 91, 52, 93, 32, 61, 32, 120, 91, 51, 93, 59, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 32, 32, 32, 47, 47, 32, 109, 117, 115, 116, 32, 114, 101, 97, 108, 108, 111, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 102, 109, 116, 95, 116, 32, 42, 102, 109, 116, 32, 61, 32, 38, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 32, 33, 102, 109, 116, 45, 62, 112, 95, 102, 114, 101, 101, 32, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 115, 116, 114, 32, 61, 32, 123, 48, 44, 48, 44, 48, 125, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 105, 110, 116, 49, 40, 38, 115, 116, 114, 44, 32, 100, 115, 116, 95, 105, 100, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 115, 105, 122, 101, 40, 38, 115, 116, 114, 44, 32, 102, 109, 116, 45, 62, 110, 44, 32, 102, 109, 116, 45, 62, 116, 121, 112, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 109, 116, 45, 62, 112, 95, 111, 102, 102, 32, 61, 32, 115, 116, 114, 46, 108, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 110, 40, 40, 99, 104, 97, 114, 42, 41, 102, 109, 116, 45, 62, 112, 44, 32, 102, 109, 116, 45, 62, 112, 95, 108, 101, 110, 44, 32, 38, 115, 116, 114, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 109, 116, 45, 62, 112, 32, 61, 32, 40, 117, 105, 110, 116, 56, 95, 116, 42, 41, 115, 116, 114, 46, 115, 32, 43, 32, 102, 109, 116, 45, 62, 112, 95, 111, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 109, 116, 45, 62, 112, 95, 102, 114, 101, 101, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 109, 116, 45, 62, 105, 100, 32, 61, 32, 100, 115, 116, 95, 105, 100, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 100, 105, 118, 95, 100, 105, 114, 116, 121, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 10, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 98, 99, 102, 95, 104, 100, 114, 95, 100, 117, 112, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 41, 10, 123, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 111, 117, 116, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 110, 105, 116, 40, 34, 114, 34, 41, 59, 10, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 104, 116, 120, 116, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 102, 109, 116, 95, 116, 101, 120, 116, 40, 104, 100, 114, 44, 32, 49, 44, 32, 78, 85, 76, 76, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 33, 104, 111, 117, 116, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 32, 34, 91, 69, 58, 58, 37, 115, 93, 32, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 97, 108, 108, 111, 99, 97, 116, 101, 32, 98, 99, 102, 32, 104, 101, 97, 100, 101, 114, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 116, 120, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 112, 97, 114, 115, 101, 40, 104, 111, 117, 116, 44, 32, 104, 116, 120, 116, 41, 59, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 116, 120, 116, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 104, 111, 117, 116, 59, 10, 125, 10, 10, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 98, 99, 102, 95, 104, 100, 114, 95, 115, 117, 98, 115, 101, 116, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 48, 44, 32, 105, 110, 116, 32, 110, 44, 32, 99, 104, 97, 114, 32, 42, 99, 111, 110, 115, 116, 42, 32, 115, 97, 109, 112, 108, 101, 115, 44, 32, 105, 110, 116, 32, 42, 105, 109, 97, 112, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 104, 108, 101, 110, 59, 10, 32, 32, 32, 32, 118, 111, 105, 100, 32, 42, 110, 97, 109, 101, 115, 95, 104, 97, 115, 104, 32, 61, 32, 107, 104, 97, 115, 104, 95, 115, 116, 114, 50, 105, 110, 116, 95, 105, 110, 105, 116, 40, 41, 59, 10, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 104, 116, 120, 116, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 102, 109, 116, 95, 116, 101, 120, 116, 40, 104, 48, 44, 32, 49, 44, 32, 38, 104, 108, 101, 110, 41, 59, 10, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 115, 116, 114, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 59, 10, 32, 32, 32, 32, 115, 116, 114, 46, 108, 32, 61, 32, 115, 116, 114, 46, 109, 32, 61, 32, 48, 59, 32, 115, 116, 114, 46, 115, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 104, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 110, 105, 116, 40, 34, 119, 34, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 33, 104, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 32, 34, 91, 69, 58, 58, 37, 115, 93, 32, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 97, 108, 108, 111, 99, 97, 116, 101, 32, 98, 99, 102, 32, 104, 101, 97, 100, 101, 114, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 116, 120, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 115, 101, 116, 95, 118, 101, 114, 115, 105, 111, 110, 40, 104, 44, 98, 99, 102, 95, 104, 100, 114, 95, 103, 101, 116, 95, 118, 101, 114, 115, 105, 111, 110, 40, 104, 48, 41, 41, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 106, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 106, 61, 48, 59, 32, 106, 60, 110, 59, 32, 106, 43, 43, 41, 32, 105, 109, 97, 112, 91, 106, 93, 32, 61, 32, 45, 49, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 48, 41, 32, 62, 32, 48, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 112, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 105, 32, 61, 32, 48, 44, 32, 101, 110, 100, 32, 61, 32, 110, 63, 32, 56, 32, 58, 32, 55, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 40, 112, 32, 61, 32, 115, 116, 114, 115, 116, 114, 40, 104, 116, 120, 116, 44, 32, 34, 35, 67, 72, 82, 79, 77, 92, 116, 34, 41, 41, 32, 33, 61, 32, 48, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 112, 32, 62, 32, 104, 116, 120, 116, 32, 38, 38, 32, 42, 40, 112, 45, 49, 41, 32, 61, 61, 32, 39, 92, 110, 39, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 40, 112, 32, 61, 32, 115, 116, 114, 99, 104, 114, 40, 112, 44, 32, 39, 92, 116, 39, 41, 41, 32, 33, 61, 32, 48, 32, 38, 38, 32, 105, 32, 60, 32, 101, 110, 100, 41, 32, 43, 43, 105, 44, 32, 43, 43, 112, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 105, 32, 33, 61, 32, 101, 110, 100, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 41, 59, 32, 102, 114, 101, 101, 40, 115, 116, 114, 46, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 32, 47, 47, 32, 109, 97, 108, 102, 111, 114, 109, 97, 116, 101, 100, 32, 104, 101, 97, 100, 101, 114, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 110, 40, 104, 116, 120, 116, 44, 32, 112, 32, 45, 32, 104, 116, 120, 116, 44, 32, 38, 115, 116, 114, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 110, 59, 32, 43, 43, 105, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 107, 104, 97, 115, 104, 95, 115, 116, 114, 50, 105, 110, 116, 95, 104, 97, 115, 95, 107, 101, 121, 40, 110, 97, 109, 101, 115, 95, 104, 97, 115, 104, 44, 115, 97, 109, 112, 108, 101, 115, 91, 105, 93, 41, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 91, 69, 58, 58, 98, 99, 102, 95, 104, 100, 114, 95, 115, 117, 98, 115, 101, 116, 93, 32, 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 115, 97, 109, 112, 108, 101, 32, 110, 97, 109, 101, 32, 92, 34, 37, 115, 92, 34, 46, 92, 110, 34, 44, 32, 115, 97, 109, 112, 108, 101, 115, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 115, 116, 114, 46, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 116, 120, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 97, 115, 104, 95, 115, 116, 114, 50, 105, 110, 116, 95, 100, 101, 115, 116, 114, 111, 121, 40, 110, 97, 109, 101, 115, 95, 104, 97, 115, 104, 41, 59, 10, 32, 32, 32]);
fileData0.push.apply(fileData0, [32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 100, 101, 115, 116, 114, 111, 121, 40, 104, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 109, 97, 112, 91, 105, 93, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 50, 105, 110, 116, 40, 104, 48, 44, 32, 66, 67, 70, 95, 68, 84, 95, 83, 65, 77, 80, 76, 69, 44, 32, 115, 97, 109, 112, 108, 101, 115, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 105, 109, 97, 112, 91, 105, 93, 32, 60, 32, 48, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 99, 40, 39, 92, 116, 39, 44, 32, 38, 115, 116, 114, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 40, 115, 97, 109, 112, 108, 101, 115, 91, 105, 93, 44, 32, 38, 115, 116, 114, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 97, 115, 104, 95, 115, 116, 114, 50, 105, 110, 116, 95, 105, 110, 99, 40, 110, 97, 109, 101, 115, 95, 104, 97, 115, 104, 44, 115, 97, 109, 112, 108, 101, 115, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 107, 112, 117, 116, 115, 110, 40, 104, 116, 120, 116, 44, 32, 104, 108, 101, 110, 44, 32, 38, 115, 116, 114, 41, 59, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 115, 116, 114, 46, 108, 32, 38, 38, 32, 40, 33, 115, 116, 114, 46, 115, 91, 115, 116, 114, 46, 108, 45, 49, 93, 32, 124, 124, 32, 115, 116, 114, 46, 115, 91, 115, 116, 114, 46, 108, 45, 49, 93, 61, 61, 39, 92, 110, 39, 41, 32, 41, 32, 115, 116, 114, 46, 108, 45, 45, 59, 32, 47, 47, 32, 107, 105, 108, 108, 32, 116, 114, 97, 105, 108, 105, 110, 103, 32, 122, 101, 114, 111, 115, 32, 97, 110, 100, 32, 110, 101, 119, 108, 105, 110, 101, 115, 10, 32, 32, 32, 32, 107, 112, 117, 116, 99, 40, 39, 92, 110, 39, 44, 38, 115, 116, 114, 41, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 112, 97, 114, 115, 101, 40, 104, 44, 32, 115, 116, 114, 46, 115, 41, 59, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 115, 116, 114, 46, 115, 41, 59, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 116, 120, 116, 41, 59, 10, 32, 32, 32, 32, 107, 104, 97, 115, 104, 95, 115, 116, 114, 50, 105, 110, 116, 95, 100, 101, 115, 116, 114, 111, 121, 40, 110, 97, 109, 101, 115, 95, 104, 97, 115, 104, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 104, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 115, 101, 116, 95, 115, 97, 109, 112, 108, 101, 115, 40, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 115, 97, 109, 112, 108, 101, 115, 44, 32, 105, 110, 116, 32, 105, 115, 95, 102, 105, 108, 101, 41, 10, 123, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 115, 97, 109, 112, 108, 101, 115, 32, 38, 38, 32, 33, 115, 116, 114, 99, 109, 112, 40, 34, 45, 34, 44, 115, 97, 109, 112, 108, 101, 115, 41, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 107, 101, 101, 112, 32, 97, 108, 108, 32, 115, 97, 109, 112, 108, 101, 115, 10, 10, 32, 32, 32, 32, 104, 100, 114, 45, 62, 110, 115, 97, 109, 112, 108, 101, 115, 95, 111, 114, 105, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 100, 114, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 115, 97, 109, 112, 108, 101, 115, 32, 41, 32, 123, 32, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 100, 114, 41, 32, 61, 32, 48, 59, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 32, 125, 32, 32, 32, 32, 47, 47, 32, 101, 120, 99, 108, 117, 100, 101, 32, 97, 108, 108, 32, 115, 97, 109, 112, 108, 101, 115, 10, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 44, 32, 110, 97, 114, 114, 32, 61, 32, 98, 105, 116, 95, 97, 114, 114, 97, 121, 95, 115, 105, 122, 101, 40, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 100, 114, 41, 41, 59, 10, 32, 32, 32, 32, 104, 100, 114, 45, 62, 107, 101, 101, 112, 95, 115, 97, 109, 112, 108, 101, 115, 32, 61, 32, 40, 117, 105, 110, 116, 56, 95, 116, 42, 41, 32, 99, 97, 108, 108, 111, 99, 40, 110, 97, 114, 114, 44, 49, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 115, 97, 109, 112, 108, 101, 115, 91, 48, 93, 61, 61, 39, 94, 39, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 100, 114, 41, 59, 32, 105, 43, 43, 41, 32, 98, 105, 116, 95, 97, 114, 114, 97, 121, 95, 115, 101, 116, 40, 104, 100, 114, 45, 62, 107, 101, 101, 112, 95, 115, 97, 109, 112, 108, 101, 115, 44, 105, 41, 59, 10, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 100, 120, 44, 32, 110, 44, 32, 114, 101, 116, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 42, 115, 109, 112, 108, 115, 32, 61, 32, 104, 116, 115, 95, 114, 101, 97, 100, 108, 105, 115, 116, 40, 115, 97, 109, 112, 108, 101, 115, 91, 48, 93, 61, 61, 39, 94, 39, 63, 115, 97, 109, 112, 108, 101, 115, 43, 49, 58, 115, 97, 109, 112, 108, 101, 115, 44, 32, 105, 115, 95, 102, 105, 108, 101, 44, 32, 38, 110, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 115, 109, 112, 108, 115, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 110, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 120, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 50, 105, 110, 116, 40, 104, 100, 114, 44, 66, 67, 70, 95, 68, 84, 95, 83, 65, 77, 80, 76, 69, 44, 115, 109, 112, 108, 115, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 100, 120, 60, 48, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 114, 101, 116, 32, 41, 32, 114, 101, 116, 32, 61, 32, 105, 43, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 32, 105, 100, 120, 60, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 100, 114, 41, 32, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 32, 115, 97, 109, 112, 108, 101, 115, 91, 48, 93, 61, 61, 39, 94, 39, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 95, 97, 114, 114, 97, 121, 95, 99, 108, 101, 97, 114, 40, 104, 100, 114, 45, 62, 107, 101, 101, 112, 95, 115, 97, 109, 112, 108, 101, 115, 44, 32, 105, 100, 120, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 95, 97, 114, 114, 97, 121, 95, 115, 101, 116, 40, 104, 100, 114, 45, 62, 107, 101, 101, 112, 95, 115, 97, 109, 112, 108, 101, 115, 44, 32, 105, 100, 120, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 110, 59, 32, 105, 43, 43, 41, 32, 102, 114, 101, 101, 40, 115, 109, 112, 108, 115, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 115, 109, 112, 108, 115, 41, 59, 10, 10, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 100, 114, 41, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 104, 100, 114, 45, 62, 110, 115, 97, 109, 112, 108, 101, 115, 95, 111, 114, 105, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 98, 105, 116, 95, 97, 114, 114, 97, 121, 95, 116, 101, 115, 116, 40, 104, 100, 114, 45, 62, 107, 101, 101, 112, 95, 115, 97, 109, 112, 108, 101, 115, 44, 105, 41, 32, 41, 32, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 100, 114, 41, 43, 43, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 100, 114, 41, 32, 41, 32, 123, 32, 102, 114, 101, 101, 40, 104, 100, 114, 45, 62, 107, 101, 101, 112, 95, 115, 97, 109, 112, 108, 101, 115, 41, 59, 32, 104, 100, 114, 45, 62, 107, 101, 101, 112, 95, 115, 97, 109, 112, 108, 101, 115, 61, 78, 85, 76, 76, 59, 32, 125, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 42, 115, 97, 109, 112, 108, 101, 115, 32, 61, 32, 40, 99, 104, 97, 114, 42, 42, 41, 32, 109, 97, 108, 108, 111, 99, 40, 115, 105, 122, 101, 111, 102, 40, 99, 104, 97, 114, 42, 41, 42, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 100, 114, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 120, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 104, 100, 114, 45, 62, 110, 115, 97, 109, 112, 108, 101, 115, 95, 111, 114, 105, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 98, 105, 116, 95, 97, 114, 114, 97, 121, 95, 116, 101, 115, 116, 40, 104, 100, 114, 45, 62, 107, 101, 101, 112, 95, 115, 97, 109, 112, 108, 101, 115, 44, 105, 41, 32, 41, 32, 115, 97, 109, 112, 108, 101, 115, 91, 105, 100, 120, 43, 43, 93, 32, 61, 32, 115, 116, 114, 100, 117, 112, 40, 104, 100, 114, 45, 62, 115, 97, 109, 112, 108, 101, 115, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 104, 100, 114, 45, 62, 115, 97, 109, 112, 108, 101, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 100, 114, 45, 62, 115, 97, 109, 112, 108, 101, 115, 32, 61, 32, 115, 97, 109, 112, 108, 101, 115, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 100, 101, 108, 101, 116, 101, 32, 111, 114, 105, 103, 105, 110, 97, 108, 32, 115, 97, 109, 112, 108, 101, 115, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 100, 105, 99, 116, 95, 116, 32, 42, 100, 32, 61, 32, 40, 118, 100, 105, 99, 116, 95, 116, 42, 41, 104, 100, 114, 45, 62, 100, 105, 99, 116, 91, 66, 67, 70, 95, 68, 84, 95, 83, 65, 77, 80, 76, 69, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 107, 32, 61, 32, 107, 104, 95, 98, 101, 103, 105, 110, 40, 100, 41, 59, 32, 107, 32, 33, 61, 32, 107, 104, 95, 101, 110, 100, 40, 100, 41, 59, 32, 43, 43, 107, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 107, 104, 95, 101, 120, 105, 115, 116, 40, 100, 44, 32, 107, 41, 41, 32, 102, 114, 101, 101, 40, 40, 99, 104, 97, 114, 42, 41, 107, 104, 95, 107, 101, 121, 40, 100, 44, 32, 107, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 95, 100, 101, 115, 116, 114, 111, 121, 40, 118, 100, 105, 99, 116, 44, 32, 100, 41, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 97, 100, 100, 32, 116, 104, 101, 32, 115, 117, 98, 115, 101, 116, 32, 98, 97, 99, 107, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 100, 114, 45, 62, 100, 105, 99, 116, 91, 66, 67, 70, 95, 68, 84, 95, 83, 65, 77, 80, 76, 69, 93, 32, 61, 32, 100, 32, 61, 32, 107, 104, 95, 105, 110, 105, 116, 40, 118, 100, 105, 99, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 100, 114, 41, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 105, 103, 110, 111, 114, 101, 44, 32, 107, 32, 61, 32, 107, 104, 95, 112, 117, 116, 40, 118, 100, 105, 99, 116, 44, 32, 100, 44, 32, 104, 100, 114, 45, 62, 115, 97, 109, 112, 108, 101, 115, 91, 105, 93, 44, 32, 38, 105, 103, 110, 111, 114, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 32, 61, 32, 98, 99, 102, 95, 105, 100, 105, 110, 102, 111, 95, 100, 101, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 104, 95, 118, 97, 108, 40, 100, 44, 32, 107, 41, 46, 105, 100, 32, 61, 32, 107, 104, 95, 115, 105, 122, 101, 40, 100, 41, 32, 45, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 104, 100, 114, 95, 115, 121, 110, 99, 40, 104, 100, 114, 41, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 116, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 115, 117, 98, 115, 101, 116, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 118, 44, 32, 105, 110, 116, 32, 110, 44, 32, 105, 110, 116, 32, 42, 105, 109, 97, 112, 41, 10, 123, 10, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 105, 110, 100, 59, 10, 32, 32, 32, 32, 105, 110, 100, 46, 115, 32, 61, 32, 48, 59, 32, 105, 110, 100, 46, 108, 32, 61, 32, 105, 110, 100, 46, 109, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 110, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 102, 109, 116, 95, 116, 32, 42, 102, 109, 116, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 105, 44, 32, 106, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 109, 116, 32, 61, 32, 40, 98, 99, 102, 95, 102, 109, 116, 95, 116, 42, 41, 97, 108, 108, 111, 99, 97, 40, 118, 45, 62, 110, 95, 102, 109, 116, 32, 42, 32, 115, 105, 122, 101, 111, 102, 40, 98, 99, 102, 95, 102, 109, 116, 95, 116, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 105, 110, 116, 56, 95, 116, 32, 42, 112, 116, 114, 32, 61, 32, 40, 117, 105, 110, 116, 56, 95, 116, 42, 41, 118, 45, 62, 105, 110, 100, 105, 118, 46, 115, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 118, 45, 62, 110, 95, 102, 109, 116, 59, 32, 43, 43, 105, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 116, 114, 32, 61, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 95, 102, 109, 116, 95, 99, 111, 114, 101, 49, 40, 112, 116, 114, 44, 32, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 44, 32, 38, 102, 109, 116, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 40, 105, 110, 116, 41, 118, 45, 62, 110, 95, 102, 109, 116, 59, 32, 43, 43, 105, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 102, 109, 116, 95, 116, 32, 42, 102, 32, 61, 32, 38, 102, 109, 116, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 105, 110, 116, 49, 40, 38, 105, 110, 100, 44, 32, 102, 45, 62, 105, 100, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 115, 105, 122, 101, 40, 38, 105, 110, 100, 44, 32, 102, 45, 62, 110, 44, 32, 102, 45, 62, 116, 121, 112, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 106, 32, 61, 32, 48, 59, 32, 106, 32, 60, 32, 110, 59, 32, 43, 43, 106, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 105, 109, 97, 112, 91, 106, 93, 32, 62, 61, 32, 48, 41, 32, 107, 112, 117, 116, 115, 110, 40, 40, 99, 104, 97, 114, 42, 41, 40, 102, 45, 62, 112, 32, 43, 32, 105, 109, 97, 112, 91, 106, 93, 32, 42, 32, 102, 45, 62, 115, 105, 122, 101, 41, 44, 32, 102, 45, 62, 115, 105, 122, 101, 44, 32, 38, 105, 110, 100, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 106, 32, 61, 32, 48, 59, 32, 106, 32, 60, 32, 110, 59, 32, 43, 43, 106, 41, 32, 105, 102, 32, 40, 105, 109, 97, 112, 91, 106, 93, 32, 62, 61, 32, 48, 41, 32, 43, 43, 105, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 32, 61, 32, 105, 59, 10, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 118, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 32, 41, 32, 118, 45, 62, 110, 95, 102, 109, 116, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 118, 45, 62, 105, 110, 100, 105, 118, 46, 115, 41, 59, 10, 32, 32, 32, 32, 118, 45, 62, 105, 110, 100, 105, 118, 32, 61, 32, 105, 110, 100, 59, 10, 32, 32, 32, 32, 118, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 38, 61, 32, 126, 66, 67, 70, 95, 85, 78, 95, 70, 77, 84, 59, 32, 32, 32, 32, 47, 47, 32, 111, 110, 108, 121, 32, 66, 67, 70, 32, 105, 115, 32, 114, 101, 97, 100, 121, 32, 102, 111, 114, 32, 111, 117, 116, 112, 117, 116, 44, 32, 86, 67, 70, 32, 119, 105, 108, 108, 32, 110, 101, 101, 100, 32, 116, 111, 32, 117, 110, 112, 97, 99, 107, 32, 97, 103, 97, 105, 110, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 105, 115, 95, 115, 110, 112, 40, 98, 99, 102, 49, 95, 116, 32, 42, 118, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 40, 118, 44, 32, 66, 67, 70, 95, 85, 78, 95, 83, 84, 82, 41, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 118, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 59, 32, 43, 43, 105, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 118, 45, 62, 100, 46, 97, 108, 108, 101, 108, 101, 91, 105, 93, 91, 49, 93, 61, 61, 48, 32, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 109, 112, 105, 108, 101, 117, 112, 39, 115, 32, 60, 88, 62, 32, 97, 108, 108, 101, 108, 101, 44, 32, 115, 101, 101, 32, 97, 108, 115, 111, 32, 98, 101, 108, 111, 119, 46, 32, 84, 104, 105, 115, 32, 105, 115, 32, 110, 111, 116, 32, 99, 111, 109, 112, 108, 101, 116, 101, 108, 121, 32, 115, 97, 116, 105, 115, 102, 97, 99, 116, 111, 114, 121, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 97, 32, 103, 101, 110, 101, 114, 97, 108, 32, 108, 105, 98, 114, 97, 114, 121, 32, 105, 115, 32, 104, 101, 114, 101, 32, 110, 97, 114, 114, 111, 119, 108, 121, 32, 116, 97, 105, 108, 111, 114, 101, 100, 32, 116, 111, 32, 102, 105, 116, 32, 115, 97, 109, 116, 111, 111, 108, 115, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 118, 45, 62, 100, 46, 97, 108, 108, 101, 108, 101, 91, 105, 93, 91, 48, 93, 61, 61, 39, 60, 39, 32, 38, 38, 32, 118, 45, 62, 100, 46, 97, 108, 108, 101, 108, 101, 91, 105, 93, 91, 49, 93, 61, 61, 39, 88, 39, 32, 38, 38, 32, 118, 45, 62, 100, 46, 97, 108, 108, 101, 108, 101, 91, 105, 93, 91, 50, 93, 61, 61, 39, 62, 39, 32, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 118, 45, 62, 100, 46, 97, 108, 108, 101, 108, 101, 91, 105, 93, 91, 48, 93, 61, 61, 39, 60, 39, 32, 38, 38, 32, 118, 45, 62, 100, 46, 97, 108, 108, 101, 108, 101, 91, 105, 93, 91, 49, 93, 61, 61, 39, 42, 39, 32, 38, 38, 32, 118, 45, 62, 100, 46, 97, 108, 108, 101, 108, 101, 91, 105, 93, 91, 50, 93, 61, 61, 39, 62, 39, 32, 41, 32, 99, 111, 110, 116, 105, 110, 117, 101, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 105, 32, 61, 61, 32, 118, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 59, 10, 125, 10, 10, 115, 116, 97, 116, 105, 99, 32, 118, 111, 105, 100, 32, 98, 99, 102, 95, 115, 101, 116, 95, 118, 97, 114, 105, 97, 110, 116, 95, 116, 121, 112, 101, 40, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 114, 101, 102, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 97, 108, 116, 44, 32, 118, 97, 114, 105, 97, 110, 116, 95, 116, 32, 42, 118, 97, 114, 41, 10, 123, 10, 32, 32, 32, 32, 47, 47, 32, 84, 104, 101, 32, 109, 111, 115, 116, 32, 102, 114, 101, 113, 117, 101, 110, 116, 32, 99, 97, 115, 101, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 114, 101, 102, 91, 49, 93, 32, 38, 38, 32, 33, 97, 108, 116, 91, 49, 93, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 97, 108, 116, 32, 61, 61, 32, 39, 46, 39, 32, 124, 124, 32, 42, 114, 101, 102, 61, 61, 42, 97, 108, 116, 32, 41, 32, 123, 32, 118, 97, 114, 45, 62, 110, 32, 61, 32, 48, 59, 32, 118, 97, 114, 45, 62, 116, 121, 112, 101, 32, 61, 32, 86, 67, 70, 95, 82, 69, 70, 59, 32, 114, 101, 116, 117, 114, 110, 59, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 97, 108, 116, 32, 61, 61, 32, 39, 88, 39, 32, 41, 32, 123, 32, 118, 97, 114, 45, 62, 110, 32, 61, 32, 48, 59, 32, 118, 97, 114, 45, 62, 116, 121, 112, 101, 32, 61, 32, 86, 67, 70, 95, 82, 69, 70, 59, 32, 114, 101, 116, 117, 114, 110, 59, 32, 125, 32, 32, 47, 47, 32, 109, 112, 105, 108, 101, 117, 112, 39, 115, 32, 88, 32, 97, 108, 108, 101, 108, 101, 32, 115, 104, 111, 117, 108, 100, 110, 39, 116, 32, 98, 101, 32, 116, 114, 101, 97, 116, 101, 100, 32, 97, 115, 32, 118, 97, 114, 105, 97, 110, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 97, 108, 116, 32, 61, 61, 32, 39, 42, 39, 32, 41, 32, 123, 32, 118, 97, 114, 45, 62, 110, 32, 61, 32, 48, 59, 32, 118, 97, 114, 45, 62, 116, 121, 112, 101, 32, 61, 32, 86, 67, 70, 95, 82, 69, 70, 59, 32, 114, 101, 116, 117, 114, 110, 59, 32, 125, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 114, 45, 62, 110, 32, 61, 32, 49, 59, 32, 118, 97, 114, 45, 62, 116, 121, 112, 101, 32, 61, 32, 86, 67, 70, 95, 83, 78, 80, 59, 32, 114, 101, 116, 117, 114, 110, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 97, 108, 116, 91, 48, 93, 61, 61, 39, 60, 39, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 97, 108, 116, 91, 49, 93, 61, 61, 39, 88, 39, 32, 38, 38, 32, 97, 108, 116, 91, 50, 93, 61, 61, 39, 62, 39, 32, 41, 32, 123, 32, 118, 97, 114, 45, 62, 110, 32, 61, 32, 48, 59, 32, 118, 97, 114, 45, 62, 116, 121, 112, 101, 32, 61, 32, 86, 67, 70, 95, 82, 69, 70, 59, 32, 114, 101, 116, 117, 114, 110, 59, 32, 125, 32, 32, 47, 47, 32, 109, 112, 105, 108, 101, 117, 112, 39, 115, 32, 88, 32, 97, 108, 108, 101, 108, 101, 32, 115, 104, 111, 117, 108, 100, 110, 39, 116, 32, 98, 101, 32, 116, 114, 101, 97, 116, 101, 100, 32, 97, 115, 32, 118, 97, 114, 105, 97, 110, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 97, 108, 116, 91, 49, 93, 61, 61, 39, 42, 39, 32, 38, 38, 32, 97, 108, 116, 91, 50, 93, 61, 61, 39, 62, 39, 32, 41, 32, 123, 32, 118, 97, 114, 45, 62, 110, 32, 61, 32, 48, 59, 32, 118, 97, 114, 45, 62, 116, 121, 112, 101, 32, 61, 32, 86, 67, 70, 95, 82, 69, 70, 59, 32, 114, 101, 116, 117, 114, 110, 59, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 114, 45, 62, 116, 121, 112, 101, 32, 61, 32, 86, 67, 70, 95, 79, 84, 72, 69, 82, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 114, 32, 61, 32, 114, 101, 102, 44, 32, 42, 97, 32, 61, 32, 97, 108, 116, 59, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 42, 114, 32, 38, 38, 32, 42, 97, 32, 38, 38, 32, 116, 111, 117, 112, 112, 101, 114, 40, 42, 114, 41, 61, 61, 116, 111, 117, 112, 112, 101, 114, 40, 42, 97, 41, 32, 41, 32, 123, 32, 114, 43, 43, 59, 32, 97, 43, 43, 59, 32, 125, 32, 32, 32, 32, 32, 47, 47, 32, 117, 110, 102, 111, 114, 116, 117, 110, 97, 116, 101, 108, 121, 44, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 82, 69, 70, 44, 65, 76, 84, 32, 99, 97, 115, 101, 32, 105, 115, 32, 110, 111, 116, 32, 103, 117, 97, 114, 97, 110, 116, 101, 101, 100, 10, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 97, 32, 38, 38, 32, 33, 42, 114, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 42, 97, 32, 41, 32, 97, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 114, 45, 62, 110, 32, 61, 32, 40, 97, 45, 97, 108, 116, 41, 45, 40, 114, 45, 114, 101, 102, 41, 59, 32, 118, 97, 114, 45, 62, 116, 121, 112, 101, 32, 61, 32, 86, 67, 70, 95, 73, 78, 68, 69, 76, 59, 32, 114, 101, 116, 117, 114, 110, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 42, 114, 32, 38, 38, 32, 33, 42, 97, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 42, 114, 32, 41, 32, 114, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 114, 45, 62, 110, 32, 61, 32, 40, 97, 45, 97, 108, 116, 41, 45, 40, 114, 45, 114, 101, 102, 41, 59, 32, 118, 97, 114, 45, 62, 116, 121, 112, 101, 32, 61, 32, 86, 67, 70, 95, 73, 78, 68, 69, 76, 59, 32, 114, 101, 116, 117, 114, 110, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 33, 42, 114, 32, 38, 38, 32, 33, 42, 97, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 114, 45, 62, 110, 32, 61, 32, 48, 59, 32, 118, 97, 114, 45, 62, 116, 121, 112, 101, 32, 61, 32, 86, 67, 70, 95, 82, 69, 70, 59, 32, 114, 101, 116, 117, 114, 110, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 114, 101, 32, 61, 32, 114, 44, 32, 42, 97, 101, 32, 61, 32, 97, 59, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 114, 101, 91, 49, 93, 32, 41, 32, 114, 101, 43, 43, 59, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 97, 101, 91, 49, 93, 32, 41, 32, 97, 101, 43, 43, 59, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 114, 101, 62, 114, 32, 38, 38, 32, 97, 101, 62, 97, 32, 38, 38, 32, 116, 111, 117, 112, 112, 101, 114, 40, 42, 114, 101, 41, 61, 61, 116, 111, 117, 112, 112, 101, 114, 40, 42, 97, 101, 41, 32, 41, 32, 123, 32, 114, 101, 45, 45, 59, 32, 97, 101, 45, 45, 59, 32, 125, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 97, 101, 61, 61, 97, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 114, 101, 61, 61, 114, 32, 41, 32, 123, 32, 118, 97, 114, 45, 62, 110, 32, 61, 32, 49, 59, 32, 118, 97, 114, 45, 62, 116, 121, 112, 101, 32, 61, 32, 86, 67, 70, 95, 83, 78, 80, 59, 32, 114, 101, 116, 117, 114, 110, 59, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 114, 45, 62, 110, 32, 61, 32, 45, 40, 114, 101, 45, 114, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 116, 111, 117, 112, 112, 101, 114, 40, 42, 114, 101, 41, 61, 61, 116, 111, 117, 112, 112, 101, 114, 40, 42, 97, 101, 41, 32, 41, 32, 123, 32, 118, 97, 114, 45, 62, 116, 121, 112, 101, 32, 61, 32, 86, 67, 70, 95, 73, 78, 68, 69, 76, 59, 32, 114, 101, 116, 117, 114, 110, 59, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 114, 45, 62, 116, 121, 112, 101, 32, 61, 32, 86, 67, 70, 95, 79, 84, 72, 69, 82, 59, 32, 114, 101, 116, 117, 114, 110, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 114, 101, 61, 61, 114, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 114, 45, 62, 110, 32, 61, 32, 97, 101, 45, 97, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 116, 111, 117, 112, 112, 101, 114, 40, 42, 114, 101, 41, 61, 61, 116, 111, 117, 112, 112, 101, 114, 40, 42, 97, 101, 41, 32, 41, 32, 123, 32, 118, 97, 114, 45, 62, 116, 121, 112, 101, 32, 61, 32, 86, 67, 70, 95, 73, 78, 68, 69, 76, 59, 32, 114, 101, 116, 117, 114, 110, 59, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 114, 45, 62, 116, 121, 112, 101, 32, 61, 32, 86, 67, 70, 95, 79, 84, 72, 69, 82, 59, 32, 114, 101, 116, 117, 114, 110, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 118, 97, 114, 45, 62, 116, 121, 112, 101, 32, 61, 32, 40, 32, 114, 101, 45, 114, 32, 61, 61, 32, 97, 101, 45, 97, 32, 41, 32, 63, 32, 86, 67, 70, 95, 77, 78, 80, 32, 58, 32, 86, 67, 70, 95, 79, 84, 72, 69, 82, 59, 10, 32, 32, 32, 32, 118, 97, 114, 45, 62, 110, 32, 61, 32, 40, 32, 114, 101, 45, 114, 32, 62, 32, 97, 101, 45, 97, 32, 41, 32, 63, 32, 45, 40, 114, 101, 45, 114, 43, 49, 41, 32, 58, 32, 97, 101, 45, 97, 43, 49, 59, 10, 10, 32, 32, 32, 32, 47, 47, 32, 115, 104, 111, 117, 108, 100, 32, 100, 111, 32, 97, 108, 115, 111, 32, 99, 111, 109, 112, 108, 101, 120, 32, 101, 118, 101, 110, 116, 115, 44, 32, 83, 86, 115, 44, 32, 101, 116, 99, 46, 46, 46, 10, 125, 10, 10, 115, 116, 97, 116, 105, 99, 32, 118, 111, 105, 100, 32, 98, 99, 102, 95, 115, 101, 116, 95, 118, 97, 114, 105, 97, 110, 116, 95, 116, 121, 112, 101, 115, 40, 98, 99, 102, 49, 95, 116, 32, 42, 98, 41, 10, 123, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 40, 98, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 38, 32, 66, 67, 70, 95, 85, 78, 95, 83, 84, 82, 41, 32, 41, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 40, 98, 44, 32, 66, 67, 70, 95, 85, 78, 95, 83, 84, 82, 41, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 100, 101, 99, 95, 116, 32, 42, 100, 32, 61, 32, 38, 98, 45, 62, 100, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 100, 45, 62, 110, 95, 118, 97, 114, 32, 60, 32, 98, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 45, 62, 118, 97, 114, 32, 61, 32, 40, 118, 97, 114, 105, 97, 110, 116, 95, 116, 32, 42, 41, 32, 114, 101, 97, 108, 108, 111, 99, 40, 100, 45, 62, 118, 97, 114, 44, 32, 115, 105, 122, 101, 111, 102, 40, 118, 97, 114, 105, 97, 110, 116, 95, 116, 41, 42, 98, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 45, 62, 110, 95, 118, 97, 114, 32, 61, 32, 98, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 98, 45, 62, 100, 46, 118, 97, 114, 95, 116, 121, 112, 101, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 49, 59, 32, 105, 60, 98, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 115, 101, 116, 95, 118, 97, 114, 105, 97, 110, 116, 95, 116, 121, 112, 101, 40, 100, 45, 62, 97, 108, 108, 101, 108, 101, 91, 48, 93, 44, 100, 45, 62, 97, 108, 108, 101, 108, 101, 91, 105, 93, 44, 32, 38, 100, 45, 62, 118, 97, 114, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 45, 62, 100, 46, 118, 97, 114, 95, 116, 121, 112, 101, 32, 124, 61, 32, 100, 45, 62, 118, 97, 114, 91, 105, 93, 46, 116, 121, 112, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 91, 115, 101, 116, 95, 118, 97, 114, 105, 97, 110, 116, 95, 116, 121, 112, 101, 93, 32, 37, 100, 32, 32, 32, 37, 115, 32, 37, 115, 32, 45, 62, 32, 37, 100, 32, 37, 100, 32, 46, 46, 32, 37, 100, 92, 110, 34, 44, 32, 98, 45, 62, 112, 111, 115, 43, 49, 44, 100, 45, 62, 97, 108, 108, 101, 108, 101, 91, 48, 93, 44, 100, 45, 62, 97, 108, 108, 101, 108, 101, 91, 105, 93, 44, 100, 45, 62, 118, 97, 114, 91, 105, 93, 46, 116, 121, 112, 101, 44, 100, 45, 62, 118, 97, 114, 91, 105, 93, 46, 110, 44, 32, 98, 45, 62, 100, 46, 118, 97, 114, 95, 116, 121, 112, 101, 41, 59, 10, 32, 32, 32, 32, 125, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 103, 101, 116, 95, 118, 97, 114, 105, 97, 110, 116, 95, 116, 121, 112, 101, 115, 40, 98, 99, 102, 49, 95, 116, 32, 42, 114, 101, 99, 41, 10, 123, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 114, 101, 99, 45, 62, 100, 46, 118, 97, 114, 95, 116, 121, 112, 101, 61, 61, 45, 49, 32, 41, 32, 98, 99, 102, 95, 115, 101, 116, 95, 118, 97, 114, 105, 97, 110, 116, 95, 116, 121, 112, 101, 115, 40, 114, 101, 99, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 99, 45, 62, 100, 46, 118, 97, 114, 95, 116, 121, 112, 101, 59, 10, 125, 10, 105, 110, 116, 32, 98, 99, 102, 95, 103, 101, 116, 95, 118, 97, 114, 105, 97, 110, 116, 95, 116, 121, 112, 101, 40, 98, 99, 102, 49, 95, 116, 32, 42, 114, 101, 99, 44, 32, 105, 110, 116, 32, 105, 116, 104, 95, 97, 108, 108, 101, 108, 101, 41, 10, 123, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 114, 101, 99, 45, 62, 100, 46, 118, 97, 114, 95, 116, 121, 112, 101, 61, 61, 45, 49, 32, 41, 32, 98, 99, 102, 95, 115, 101, 116, 95, 118, 97, 114, 105, 97, 110, 116, 95, 116, 121, 112, 101, 115, 40, 114, 101, 99, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 99, 45, 62, 100, 46, 118, 97, 114, 91, 105, 116, 104, 95, 97, 108, 108, 101, 108, 101, 93, 46, 116, 121, 112, 101, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 117, 112, 100, 97, 116, 101, 95, 105, 110, 102, 111, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 107, 101, 121, 44, 32, 99, 111, 110, 115, 116, 32, 118, 111, 105, 100, 32, 42, 118, 97, 108, 117, 101, 115, 44, 32, 105, 110, 116, 32, 110, 44, 32, 105, 110, 116, 32, 116, 121, 112, 101, 41, 10, 123, 10, 32, 32, 32, 32, 47, 47, 32, 73, 115, 32, 116, 104, 101, 32, 102, 105, 101, 108, 100, 32, 97, 108, 114, 101, 97, 100, 121, 32, 112, 114, 101, 115, 101, 110, 116, 63, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 44, 32, 105, 110, 102, 95, 105, 100, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 50, 105, 110, 116, 40, 104, 100, 114, 44, 66, 67, 70, 95, 68, 84, 95, 73, 68, 44, 107, 101, 121, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 105, 110, 102, 111, 95, 101, 120, 105, 115, 116, 115, 40, 104, 100, 114, 44, 66, 67, 70, 95, 72, 76, 95, 73, 78, 70, 79, 44, 105, 110, 102, 95, 105, 100, 41, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 32, 32, 32, 32, 47, 47, 32, 78, 111, 32, 115, 117, 99, 104, 32, 73, 78, 70, 79, 32, 102, 105, 101, 108, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 101, 97, 100, 101, 114, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 40, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 38, 32, 66, 67, 70, 95, 85, 78, 95, 73, 78, 70, 79, 41, 32, 41, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 40, 108, 105, 110, 101, 44, 32, 66, 67, 70, 95, 85, 78, 95, 73, 78, 70, 79, 41, 59, 10, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 108, 105, 110, 101, 45, 62, 110, 95, 105, 110, 102, 111, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 110, 102, 95, 105, 100, 61, 61, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 46, 107, 101, 121, 32, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 105, 110, 102, 111, 95, 116, 32, 42, 105, 110, 102, 32, 61, 32, 105, 61, 61, 108, 105, 110, 101, 45, 62, 110, 95, 105, 110, 102, 111, 32, 63, 32, 78, 85, 76, 76, 32, 58, 32, 38, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 59, 10, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 110, 32, 124, 124, 32, 40, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 84, 95, 83, 84, 82, 32, 38, 38, 32, 33, 118, 97, 108, 117, 101, 115, 41, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 110, 61, 61, 48, 32, 38, 38, 32, 33, 115, 116, 114, 99, 109, 112, 40, 34, 69, 78, 68, 34, 44, 107, 101, 121, 41, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 114, 108, 101, 110, 32, 61, 32, 108, 105, 110, 101, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 32, 63, 32, 115, 116, 114, 108, 101, 110, 40, 108, 105, 110, 101, 45, 62, 100, 46, 97, 108, 108, 101, 108, 101, 91, 48, 93, 41, 32, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 110, 102, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 77, 97, 114, 107, 32, 116, 104, 101, 32, 116, 97, 103, 32, 102, 111, 114, 32, 114, 101, 109, 111, 118, 97, 108, 44, 32, 102, 114, 101, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 109, 101, 109, 111, 114, 121, 32, 105, 102, 32, 110, 101, 99, 101, 115, 115, 97, 114, 121, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 110, 102, 45, 62, 118, 112, 116, 114, 95, 102, 114, 101, 101, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 105, 110, 102, 45, 62, 118, 112, 116, 114, 32, 45, 32, 105, 110, 102, 45, 62, 118, 112, 116, 114, 95, 111, 102, 102, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 102, 45, 62, 118, 112, 116, 114, 95, 102, 114, 101, 101, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 115, 104, 97, 114, 101, 100, 95, 100, 105, 114, 116, 121, 32, 124, 61, 32, 66, 67, 70, 49, 95, 68, 73, 82, 84, 89, 95, 73, 78, 70, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 102, 45, 62, 118, 112, 116, 114, 32, 61, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 47, 47, 32, 69, 110, 99, 111, 100, 101, 32, 116, 104, 101, 32, 118, 97, 108, 117, 101, 115, 32, 97, 110, 100, 32, 100, 101, 116, 101, 114, 109, 105, 110, 101, 32, 116, 104, 101, 32, 115, 105, 122, 101, 32, 114, 101, 113, 117, 105, 114, 101, 100, 32, 116, 111, 32, 97, 99, 99, 111, 109, 109, 111, 100, 97, 116, 101, 32, 116, 104, 101, 32, 118, 97, 108, 117, 101, 115, 10, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 115, 116, 114, 32, 61, 32, 123, 48, 44, 48, 44, 48, 125, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 105, 110, 116, 49, 40, 38, 115, 116, 114, 44, 32, 105, 110, 102, 95, 105, 100, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 84, 95, 73, 78, 84, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 118, 105, 110, 116, 40, 38, 115, 116, 114, 44, 32, 110, 44, 32, 40, 105, 110, 116, 51, 50, 95, 116, 42, 41, 118, 97, 108, 117, 101, 115, 44, 32, 45, 49, 41, 59, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 84, 95, 82, 69, 65, 76, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 118, 102, 108, 111, 97, 116, 40, 38, 115, 116, 114, 44, 32, 110, 44, 32, 40, 102, 108, 111, 97, 116, 42, 41, 118, 97, 108, 117, 101, 115, 41, 59, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 84, 95, 70, 76, 65, 71, 32, 124, 124, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 84, 95, 83, 84, 82, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 118, 97, 108, 117, 101, 115, 61, 61, 78, 85, 76, 76, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 115, 105, 122, 101, 40, 38, 115, 116, 114, 44, 32, 48, 44, 32, 66, 67, 70, 95, 66, 84, 95, 78, 85, 76, 76, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 118, 99, 104, 97, 114, 40, 38, 115, 116, 114, 44, 32, 115, 116, 114, 108, 101, 110, 40, 40, 99, 104, 97, 114, 42, 41, 118, 97, 108, 117, 101, 115, 41, 44, 32, 40, 99, 104, 97, 114, 42, 41, 118, 97, 108, 117, 101, 115, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 32, 34, 91, 69, 58, 58, 37, 115, 93, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 37, 100, 32, 110, 111, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 32, 121, 101, 116, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 44, 32, 116, 121, 112, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 98, 111, 114, 116, 40, 41, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 47, 47, 32, 73, 115, 32, 116, 104, 101, 32, 73, 78, 70, 79, 32, 116, 97, 103, 32, 97, 108, 114, 101, 97, 100, 121, 32, 112, 114, 101, 115, 101, 110, 116, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 110, 102, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 73, 115, 32, 105, 116, 32, 98, 105, 103, 32, 101, 110, 111, 117, 103, 104, 32, 116, 111, 32, 97, 99, 99, 111, 109, 109, 111, 100, 97, 116, 101, 32, 110, 101, 119, 32, 98, 108, 111, 99, 107, 63, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 115, 116, 114, 46, 108, 32, 60, 61, 32, 105, 110, 102, 45, 62, 118, 112, 116, 114, 95, 108, 101, 110, 32, 43, 32, 105, 110, 102, 45, 62, 118, 112, 116, 114, 95, 111, 102, 102, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 115, 116, 114, 46, 108, 32, 33, 61, 32, 105, 110, 102, 45, 62, 118, 112, 116, 114, 95, 108, 101, 110, 32, 43, 32, 105, 110, 102, 45, 62, 118, 112, 116, 114, 95, 111, 102, 102, 32, 41, 32, 108, 105, 110, 101, 45, 62, 100, 46, 115, 104, 97, 114, 101, 100, 95, 100, 105, 114, 116, 121, 32, 124, 61, 32, 66, 67, 70, 49, 95, 68, 73, 82, 84, 89, 95, 73, 78, 70, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 105, 110, 116, 56, 95, 116, 32, 42, 112, 116, 114, 32, 61, 32, 105, 110, 102, 45, 62, 118, 112, 116, 114, 32, 45, 32, 105, 110, 102, 45, 62, 118, 112, 116, 114, 95, 111, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 109, 101, 109, 99, 112, 121, 40, 112, 116, 114, 44, 32, 115, 116, 114, 46, 115, 44, 32, 115, 116, 114, 46, 108, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 115, 116, 114, 46, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 118, 112, 116, 114, 95, 102, 114, 101, 101, 32, 61, 32, 105, 110, 102, 45, 62, 118, 112, 116, 114, 95, 102, 114, 101, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 95, 105, 110, 102, 111, 95, 99, 111, 114, 101, 49, 40, 112, 116, 114, 44, 32, 105, 110, 102, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 102, 45, 62, 118, 112, 116, 114, 95, 102, 114, 101, 101, 32, 61, 32, 118, 112, 116, 114, 95, 102, 114, 101, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 32, 33, 105, 110, 102, 45, 62, 118, 112, 116, 114, 95, 102, 114, 101, 101, 32, 41, 59, 32, 32, 47, 47, 32, 102, 105, 120, 32, 116, 104, 101, 32, 99, 97, 108, 108, 101, 114, 32, 111, 114, 32, 105, 109, 112, 114, 111, 118, 101, 32, 104, 101, 114, 101, 58, 32, 116, 104, 105, 115, 32, 104, 97, 115, 32, 98, 101, 101, 110, 32, 109, 111, 100, 105, 102, 105, 101, 100, 32, 98, 101, 102, 111, 114, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 95, 105, 110, 102, 111, 95, 99, 111, 114, 101, 49, 40, 40, 117, 105, 110, 116, 56, 95, 116, 42, 41, 115, 116, 114, 46, 115, 44, 32, 105, 110, 102, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 102, 45, 62, 118, 112, 116, 114, 95, 102, 114, 101, 101, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 115, 104, 97, 114, 101, 100, 95, 100, 105, 114, 116, 121, 32, 124, 61, 32, 66, 67, 70, 49, 95, 68, 73, 82, 84, 89, 95, 73, 78, 70, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 84, 104, 101, 32, 116, 97, 103, 32, 105, 115, 32, 110, 111, 116, 32, 112, 114, 101, 115, 101, 110, 116, 44, 32, 99, 114, 101, 97, 116, 101, 32, 110, 101, 119, 32, 111, 110, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 110, 95, 105, 110, 102, 111, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 116, 115, 95, 101, 120, 112, 97, 110, 100, 48, 40, 98, 99, 102, 95, 105, 110, 102, 111, 95, 116, 44, 32, 108, 105, 110, 101, 45, 62, 110, 95, 105, 110, 102, 111, 44, 32, 108, 105, 110, 101, 45, 62, 100, 46, 109, 95, 105, 110, 102, 111, 32, 44, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 102, 32, 61, 32, 38, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 108, 105, 110, 101, 45, 62, 110, 95, 105, 110, 102, 111, 45, 49, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 95, 105, 110, 102, 111, 95, 99, 111, 114, 101, 49, 40, 40, 117, 105, 110, 116, 56, 95, 116, 42, 41, 115, 116, 114, 46, 115, 44, 32, 105, 110, 102, 41, 59, 10]);
fileData0.push.apply(fileData0, [32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 102, 45, 62, 118, 112, 116, 114, 95, 102, 114, 101, 101, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 115, 104, 97, 114, 101, 100, 95, 100, 105, 114, 116, 121, 32, 124, 61, 32, 66, 67, 70, 49, 95, 68, 73, 82, 84, 89, 95, 73, 78, 70, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 124, 61, 32, 66, 67, 70, 95, 85, 78, 95, 73, 78, 70, 79, 59, 10, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 110, 61, 61, 49, 32, 38, 38, 32, 33, 115, 116, 114, 99, 109, 112, 40, 34, 69, 78, 68, 34, 44, 107, 101, 121, 41, 32, 41, 32, 108, 105, 110, 101, 45, 62, 114, 108, 101, 110, 32, 61, 32, 40, 40, 105, 110, 116, 51, 50, 95, 116, 42, 41, 118, 97, 108, 117, 101, 115, 41, 91, 48, 93, 32, 45, 32, 108, 105, 110, 101, 45, 62, 112, 111, 115, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 117, 112, 100, 97, 116, 101, 95, 102, 111, 114, 109, 97, 116, 95, 115, 116, 114, 105, 110, 103, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 107, 101, 121, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 42, 118, 97, 108, 117, 101, 115, 44, 32, 105, 110, 116, 32, 110, 41, 10, 123, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 110, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 98, 99, 102, 95, 117, 112, 100, 97, 116, 101, 95, 102, 111, 114, 109, 97, 116, 40, 104, 100, 114, 44, 108, 105, 110, 101, 44, 107, 101, 121, 44, 78, 85, 76, 76, 44, 48, 44, 66, 67, 70, 95, 72, 84, 95, 83, 84, 82, 41, 59, 10, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 44, 32, 109, 97, 120, 95, 108, 101, 110, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 110, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 108, 101, 110, 32, 61, 32, 115, 116, 114, 108, 101, 110, 40, 118, 97, 108, 117, 101, 115, 91, 105, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 108, 101, 110, 32, 62, 32, 109, 97, 120, 95, 108, 101, 110, 32, 41, 32, 109, 97, 120, 95, 108, 101, 110, 32, 61, 32, 108, 101, 110, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 111, 117, 116, 32, 61, 32, 40, 99, 104, 97, 114, 42, 41, 32, 109, 97, 108, 108, 111, 99, 40, 109, 97, 120, 95, 108, 101, 110, 42, 110, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 111, 117, 116, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 50, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 110, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 100, 115, 116, 32, 61, 32, 111, 117, 116, 43, 105, 42, 109, 97, 120, 95, 108, 101, 110, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 115, 114, 99, 32, 61, 32, 118, 97, 108, 117, 101, 115, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 106, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 115, 114, 99, 91, 106, 93, 32, 41, 32, 123, 32, 100, 115, 116, 91, 106, 93, 32, 61, 32, 115, 114, 99, 91, 106, 93, 59, 32, 106, 43, 43, 59, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 59, 32, 106, 60, 109, 97, 120, 95, 108, 101, 110, 59, 32, 106, 43, 43, 41, 32, 100, 115, 116, 91, 106, 93, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 110, 116, 32, 114, 101, 116, 32, 61, 32, 98, 99, 102, 95, 117, 112, 100, 97, 116, 101, 95, 102, 111, 114, 109, 97, 116, 40, 104, 100, 114, 44, 108, 105, 110, 101, 44, 107, 101, 121, 44, 111, 117, 116, 44, 109, 97, 120, 95, 108, 101, 110, 42, 110, 44, 66, 67, 70, 95, 72, 84, 95, 83, 84, 82, 41, 59, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 111, 117, 116, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 116, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 117, 112, 100, 97, 116, 101, 95, 102, 111, 114, 109, 97, 116, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 107, 101, 121, 44, 32, 99, 111, 110, 115, 116, 32, 118, 111, 105, 100, 32, 42, 118, 97, 108, 117, 101, 115, 44, 32, 105, 110, 116, 32, 110, 44, 32, 105, 110, 116, 32, 116, 121, 112, 101, 41, 10, 123, 10, 32, 32, 32, 32, 47, 47, 32, 73, 115, 32, 116, 104, 101, 32, 102, 105, 101, 108, 100, 32, 97, 108, 114, 101, 97, 100, 121, 32, 112, 114, 101, 115, 101, 110, 116, 63, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 44, 32, 102, 109, 116, 95, 105, 100, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 50, 105, 110, 116, 40, 104, 100, 114, 44, 66, 67, 70, 95, 68, 84, 95, 73, 68, 44, 107, 101, 121, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 105, 110, 102, 111, 95, 101, 120, 105, 115, 116, 115, 40, 104, 100, 114, 44, 66, 67, 70, 95, 72, 76, 95, 70, 77, 84, 44, 102, 109, 116, 95, 105, 100, 41, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 110, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 32, 32, 47, 47, 32, 116, 104, 101, 32, 107, 101, 121, 32, 110, 111, 116, 32, 112, 114, 101, 115, 101, 110, 116, 32, 105, 110, 32, 116, 104, 101, 32, 104, 101, 97, 100, 101, 114, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 40, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 38, 32, 66, 67, 70, 95, 85, 78, 95, 70, 77, 84, 41, 32, 41, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 40, 108, 105, 110, 101, 44, 32, 66, 67, 70, 95, 85, 78, 95, 70, 77, 84, 41, 59, 10, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 108, 105, 110, 101, 45, 62, 110, 95, 102, 109, 116, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 46, 105, 100, 61, 61, 102, 109, 116, 95, 105, 100, 32, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 102, 109, 116, 95, 116, 32, 42, 102, 109, 116, 32, 61, 32, 105, 61, 61, 108, 105, 110, 101, 45, 62, 110, 95, 102, 109, 116, 32, 63, 32, 78, 85, 76, 76, 32, 58, 32, 38, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 59, 10, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 110, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 102, 109, 116, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 77, 97, 114, 107, 32, 116, 104, 101, 32, 116, 97, 103, 32, 102, 111, 114, 32, 114, 101, 109, 111, 118, 97, 108, 44, 32, 102, 114, 101, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 109, 101, 109, 111, 114, 121, 32, 105, 102, 32, 110, 101, 99, 101, 115, 115, 97, 114, 121, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 102, 109, 116, 45, 62, 112, 95, 102, 114, 101, 101, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 102, 109, 116, 45, 62, 112, 32, 45, 32, 102, 109, 116, 45, 62, 112, 95, 111, 102, 102, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 109, 116, 45, 62, 112, 95, 102, 114, 101, 101, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 100, 105, 118, 95, 100, 105, 114, 116, 121, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 109, 116, 45, 62, 112, 32, 61, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 100, 114, 41, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 110, 112, 115, 32, 61, 32, 110, 32, 47, 32, 108, 105, 110, 101, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 59, 32, 32, 47, 47, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 118, 97, 108, 117, 101, 115, 32, 112, 101, 114, 32, 115, 97, 109, 112, 108, 101, 10, 32, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 32, 110, 112, 115, 32, 38, 38, 32, 110, 112, 115, 42, 108, 105, 110, 101, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 61, 61, 110, 32, 41, 59, 32, 32, 32, 32, 32, 47, 47, 32, 109, 117, 115, 116, 32, 98, 101, 32, 100, 105, 118, 105, 115, 105, 98, 108, 101, 32, 98, 121, 32, 110, 95, 115, 97, 109, 112, 108, 101, 10, 10, 32, 32, 32, 32, 47, 47, 32, 69, 110, 99, 111, 100, 101, 32, 116, 104, 101, 32, 118, 97, 108, 117, 101, 115, 32, 97, 110, 100, 32, 100, 101, 116, 101, 114, 109, 105, 110, 101, 32, 116, 104, 101, 32, 115, 105, 122, 101, 32, 114, 101, 113, 117, 105, 114, 101, 100, 32, 116, 111, 32, 97, 99, 99, 111, 109, 109, 111, 100, 97, 116, 101, 32, 116, 104, 101, 32, 118, 97, 108, 117, 101, 115, 10, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 115, 116, 114, 32, 61, 32, 123, 48, 44, 48, 44, 48, 125, 59, 10, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 105, 110, 116, 49, 40, 38, 115, 116, 114, 44, 32, 102, 109, 116, 95, 105, 100, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 84, 95, 73, 78, 84, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 118, 105, 110, 116, 40, 38, 115, 116, 114, 44, 32, 110, 44, 32, 40, 105, 110, 116, 51, 50, 95, 116, 42, 41, 118, 97, 108, 117, 101, 115, 44, 32, 110, 112, 115, 41, 59, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 84, 95, 82, 69, 65, 76, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 115, 105, 122, 101, 40, 38, 115, 116, 114, 44, 32, 110, 112, 115, 44, 32, 66, 67, 70, 95, 66, 84, 95, 70, 76, 79, 65, 84, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 110, 40, 40, 99, 104, 97, 114, 42, 41, 118, 97, 108, 117, 101, 115, 44, 32, 110, 112, 115, 42, 108, 105, 110, 101, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 42, 115, 105, 122, 101, 111, 102, 40, 102, 108, 111, 97, 116, 41, 44, 32, 38, 115, 116, 114, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 84, 95, 83, 84, 82, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 101, 110, 99, 95, 115, 105, 122, 101, 40, 38, 115, 116, 114, 44, 32, 110, 112, 115, 44, 32, 66, 67, 70, 95, 66, 84, 95, 67, 72, 65, 82, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 110, 40, 40, 99, 104, 97, 114, 42, 41, 118, 97, 108, 117, 101, 115, 44, 32, 110, 112, 115, 42, 108, 105, 110, 101, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 44, 32, 38, 115, 116, 114, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 32, 34, 91, 69, 58, 58, 37, 115, 93, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 37, 100, 32, 110, 111, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 32, 121, 101, 116, 92, 110, 34, 44, 32, 95, 95, 102, 117, 110, 99, 95, 95, 44, 32, 116, 121, 112, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 98, 111, 114, 116, 40, 41, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 102, 109, 116, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 78, 111, 116, 32, 112, 114, 101, 115, 101, 110, 116, 44, 32, 110, 101, 119, 32, 102, 111, 114, 109, 97, 116, 32, 102, 105, 101, 108, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 110, 95, 102, 109, 116, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 116, 115, 95, 101, 120, 112, 97, 110, 100, 48, 40, 98, 99, 102, 95, 102, 109, 116, 95, 116, 44, 32, 108, 105, 110, 101, 45, 62, 110, 95, 102, 109, 116, 44, 32, 108, 105, 110, 101, 45, 62, 100, 46, 109, 95, 102, 109, 116, 44, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 41, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 83, 112, 101, 99, 105, 97, 108, 32, 99, 97, 115, 101, 58, 32, 86, 67, 70, 32, 115, 112, 101, 99, 105, 102, 105, 99, 97, 116, 105, 111, 110, 32, 114, 101, 113, 117, 105, 114, 101, 115, 32, 116, 104, 97, 116, 32, 71, 84, 32, 105, 115, 32, 97, 108, 119, 97, 121, 115, 32, 102, 105, 114, 115, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 110, 95, 102, 109, 116, 32, 62, 32, 49, 32, 38, 38, 32, 107, 101, 121, 91, 48, 93, 61, 61, 39, 71, 39, 32, 38, 38, 32, 107, 101, 121, 91, 49, 93, 61, 61, 39, 84, 39, 32, 38, 38, 32, 33, 107, 101, 121, 91, 50, 93, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 108, 105, 110, 101, 45, 62, 110, 95, 102, 109, 116, 45, 49, 59, 32, 105, 62, 48, 59, 32, 105, 45, 45, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 45, 49, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 109, 116, 32, 61, 32, 38, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 48, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 109, 116, 32, 61, 32, 38, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 108, 105, 110, 101, 45, 62, 110, 95, 102, 109, 116, 45, 49, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 95, 102, 109, 116, 95, 99, 111, 114, 101, 49, 40, 40, 117, 105, 110, 116, 56, 95, 116, 42, 41, 115, 116, 114, 46, 115, 44, 32, 108, 105, 110, 101, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 44, 32, 102, 109, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 100, 105, 118, 95, 100, 105, 114, 116, 121, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 109, 116, 45, 62, 112, 95, 102, 114, 101, 101, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 84, 104, 101, 32, 116, 97, 103, 32, 105, 115, 32, 97, 108, 114, 101, 97, 100, 121, 32, 112, 114, 101, 115, 101, 110, 116, 44, 32, 99, 104, 101, 99, 107, 32, 105, 102, 32, 105, 116, 32, 105, 115, 32, 98, 105, 103, 32, 101, 110, 111, 117, 103, 104, 32, 116, 111, 32, 97, 99, 99, 111, 109, 111, 100, 97, 116, 101, 32, 116, 104, 101, 32, 110, 101, 119, 32, 98, 108, 111, 99, 107, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 115, 116, 114, 46, 108, 32, 60, 61, 32, 102, 109, 116, 45, 62, 112, 95, 108, 101, 110, 32, 43, 32, 102, 109, 116, 45, 62, 112, 95, 111, 102, 102, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 103, 111, 111, 100, 44, 32, 116, 104, 101, 32, 98, 108, 111, 99, 107, 32, 105, 115, 32, 98, 105, 103, 32, 101, 110, 111, 117, 103, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 115, 116, 114, 46, 108, 32, 33, 61, 32, 102, 109, 116, 45, 62, 112, 95, 108, 101, 110, 32, 43, 32, 102, 109, 116, 45, 62, 112, 95, 111, 102, 102, 32, 41, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 100, 105, 118, 95, 100, 105, 114, 116, 121, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 105, 110, 116, 56, 95, 116, 32, 42, 112, 116, 114, 32, 61, 32, 102, 109, 116, 45, 62, 112, 32, 45, 32, 102, 109, 116, 45, 62, 112, 95, 111, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 109, 101, 109, 99, 112, 121, 40, 112, 116, 114, 44, 32, 115, 116, 114, 46, 115, 44, 32, 115, 116, 114, 46, 108, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 40, 115, 116, 114, 46, 115, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 112, 95, 102, 114, 101, 101, 32, 61, 32, 102, 109, 116, 45, 62, 112, 95, 102, 114, 101, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 95, 102, 109, 116, 95, 99, 111, 114, 101, 49, 40, 112, 116, 114, 44, 32, 108, 105, 110, 101, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 44, 32, 102, 109, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 109, 116, 45, 62, 112, 95, 102, 114, 101, 101, 32, 61, 32, 112, 95, 102, 114, 101, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 32, 33, 102, 109, 116, 45, 62, 112, 95, 102, 114, 101, 101, 32, 41, 59, 32, 32, 47, 47, 32, 102, 105, 120, 32, 116, 104, 101, 32, 99, 97, 108, 108, 101, 114, 32, 111, 114, 32, 105, 109, 112, 114, 111, 118, 101, 32, 104, 101, 114, 101, 58, 32, 116, 104, 105, 115, 32, 104, 97, 115, 32, 98, 101, 101, 110, 32, 109, 111, 100, 105, 102, 105, 101, 100, 32, 98, 101, 102, 111, 114, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 95, 102, 109, 116, 95, 99, 111, 114, 101, 49, 40, 40, 117, 105, 110, 116, 56, 95, 116, 42, 41, 115, 116, 114, 46, 115, 44, 32, 108, 105, 110, 101, 45, 62, 110, 95, 115, 97, 109, 112, 108, 101, 44, 32, 102, 109, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 109, 116, 45, 62, 112, 95, 102, 114, 101, 101, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 100, 105, 118, 95, 100, 105, 114, 116, 121, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 124, 61, 32, 66, 67, 70, 95, 85, 78, 95, 70, 77, 84, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 117, 112, 100, 97, 116, 101, 95, 102, 105, 108, 116, 101, 114, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 44, 32, 105, 110, 116, 32, 42, 102, 108, 116, 95, 105, 100, 115, 44, 32, 105, 110, 116, 32, 110, 41, 10, 123, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 40, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 38, 32, 66, 67, 70, 95, 85, 78, 95, 70, 76, 84, 41, 32, 41, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 40, 108, 105, 110, 101, 44, 32, 66, 67, 70, 95, 85, 78, 95, 70, 76, 84, 41, 59, 10, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 115, 104, 97, 114, 101, 100, 95, 100, 105, 114, 116, 121, 32, 124, 61, 32, 66, 67, 70, 49, 95, 68, 73, 82, 84, 89, 95, 70, 76, 84, 59, 10, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 110, 95, 102, 108, 116, 32, 61, 32, 110, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 110, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 32, 32, 32, 32, 104, 116, 115, 95, 101, 120, 112, 97, 110, 100, 40, 105, 110, 116, 44, 32, 108, 105, 110, 101, 45, 62, 100, 46, 110, 95, 102, 108, 116, 44, 32, 108, 105, 110, 101, 45, 62, 100, 46, 109, 95, 102, 108, 116, 44, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 108, 116, 41, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 110, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 108, 116, 91, 105, 93, 32, 61, 32, 102, 108, 116, 95, 105, 100, 115, 91, 105, 93, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 97, 100, 100, 95, 102, 105, 108, 116, 101, 114, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 44, 32, 105, 110, 116, 32, 102, 108, 116, 95, 105, 100, 41, 10, 123, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 40, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 38, 32, 66, 67, 70, 95, 85, 78, 95, 70, 76, 84, 41, 32, 41, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 40, 108, 105, 110, 101, 44, 32, 66, 67, 70, 95, 85, 78, 95, 70, 76, 84, 41, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 108, 105, 110, 101, 45, 62, 100, 46, 110, 95, 102, 108, 116, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 102, 108, 116, 95, 105, 100, 61, 61, 108, 105, 110, 101, 45, 62, 100, 46, 102, 108, 116, 91, 105, 93, 32, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 60, 108, 105, 110, 101, 45, 62, 100, 46, 110, 95, 102, 108, 116, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 32, 32, 32, 32, 47, 47, 32, 116, 104, 105, 115, 32, 102, 105, 108, 116, 101, 114, 32, 105, 115, 32, 97, 108, 114, 101, 97, 100, 121, 32, 115, 101, 116, 10, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 115, 104, 97, 114, 101, 100, 95, 100, 105, 114, 116, 121, 32, 124, 61, 32, 66, 67, 70, 49, 95, 68, 73, 82, 84, 89, 95, 70, 76, 84, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 102, 108, 116, 95, 105, 100, 61, 61, 48, 32, 41, 32, 32, 32, 32, 47, 47, 32, 115, 101, 116, 32, 116, 111, 32, 80, 65, 83, 83, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 110, 95, 102, 108, 116, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 100, 46, 110, 95, 102, 108, 116, 61, 61, 49, 32, 38, 38, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 108, 116, 91, 48, 93, 61, 61, 48, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 110, 95, 102, 108, 116, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 110, 95, 102, 108, 116, 43, 43, 59, 10, 32, 32, 32, 32, 104, 116, 115, 95, 101, 120, 112, 97, 110, 100, 40, 105, 110, 116, 44, 32, 108, 105, 110, 101, 45, 62, 100, 46, 110, 95, 102, 108, 116, 44, 32, 108, 105, 110, 101, 45, 62, 100, 46, 109, 95, 102, 108, 116, 44, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 108, 116, 41, 59, 10, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 108, 116, 91, 108, 105, 110, 101, 45, 62, 100, 46, 110, 95, 102, 108, 116, 45, 49, 93, 32, 61, 32, 102, 108, 116, 95, 105, 100, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 49, 59, 10, 125, 10, 105, 110, 116, 32, 98, 99, 102, 95, 114, 101, 109, 111, 118, 101, 95, 102, 105, 108, 116, 101, 114, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 44, 32, 105, 110, 116, 32, 102, 108, 116, 95, 105, 100, 44, 32, 105, 110, 116, 32, 112, 97, 115, 115, 41, 10, 123, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 40, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 38, 32, 66, 67, 70, 95, 85, 78, 95, 70, 76, 84, 41, 32, 41, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 40, 108, 105, 110, 101, 44, 32, 66, 67, 70, 95, 85, 78, 95, 70, 76, 84, 41, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 108, 105, 110, 101, 45, 62, 100, 46, 110, 95, 102, 108, 116, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 102, 108, 116, 95, 105, 100, 61, 61, 108, 105, 110, 101, 45, 62, 100, 46, 102, 108, 116, 91, 105, 93, 32, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 61, 61, 108, 105, 110, 101, 45, 62, 100, 46, 110, 95, 102, 108, 116, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 32, 32, 32, 47, 47, 32, 116, 104, 101, 32, 102, 105, 108, 116, 101, 114, 32, 105, 115, 32, 110, 111, 116, 32, 112, 114, 101, 115, 101, 110, 116, 10, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 115, 104, 97, 114, 101, 100, 95, 100, 105, 114, 116, 121, 32, 124, 61, 32, 66, 67, 70, 49, 95, 68, 73, 82, 84, 89, 95, 70, 76, 84, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 33, 61, 108, 105, 110, 101, 45, 62, 100, 46, 110, 95, 102, 108, 116, 45, 49, 32, 41, 32, 109, 101, 109, 109, 111, 118, 101, 40, 108, 105, 110, 101, 45, 62, 100, 46, 102, 108, 116, 43, 105, 44, 108, 105, 110, 101, 45, 62, 100, 46, 102, 108, 116, 43, 105, 43, 49, 44, 40, 108, 105, 110, 101, 45, 62, 100, 46, 110, 95, 102, 108, 116, 45, 105, 45, 49, 41, 42, 115, 105, 122, 101, 111, 102, 40, 42, 108, 105, 110, 101, 45, 62, 100, 46, 102, 108, 116, 41, 41, 59, 10, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 110, 95, 102, 108, 116, 45, 45, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 108, 105, 110, 101, 45, 62, 100, 46, 110, 95, 102, 108, 116, 32, 38, 38, 32, 112, 97, 115, 115, 32, 41, 32, 98, 99, 102, 95, 97, 100, 100, 95, 102, 105, 108, 116, 101, 114, 40, 104, 100, 114, 44, 108, 105, 110, 101, 44, 48, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 104, 97, 115, 95, 102, 105, 108, 116, 101, 114, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 44, 32, 99, 104, 97, 114, 32, 42, 102, 105, 108, 116, 101, 114, 41, 10, 123, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 102, 105, 108, 116, 101, 114, 91, 48, 93, 61, 61, 39, 46, 39, 32, 38, 38, 32, 33, 102, 105, 108, 116, 101, 114, 91, 49, 93, 32, 41, 32, 102, 105, 108, 116, 101, 114, 32, 61, 32, 34, 80, 65, 83, 83, 34, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 100, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 50, 105, 110, 116, 40, 104, 100, 114, 44, 32, 66, 67, 70, 95, 68, 84, 95, 73, 68, 44, 32, 102, 105, 108, 116, 101, 114, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 105, 110, 102, 111, 95, 101, 120, 105, 115, 116, 115, 40, 104, 100, 114, 44, 66, 67, 70, 95, 72, 76, 95, 70, 76, 84, 44, 105, 100, 41, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 32, 32, 47, 47, 32, 110, 111, 116, 32, 100, 101, 102, 105, 110, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 101, 97, 100, 101, 114, 10, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 40, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 38, 32, 66, 67, 70, 95, 85, 78, 95, 70, 76, 84, 41, 32, 41, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 40, 108, 105, 110, 101, 44, 32, 66, 67, 70, 95, 85, 78, 95, 70, 76, 84, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 100, 61, 61, 48, 32, 38, 38, 32, 33, 108, 105, 110, 101, 45, 62, 100, 46, 110, 95, 102, 108, 116, 41, 32, 114, 101, 116, 117, 114, 110, 32, 49, 59, 32, 47, 47, 32, 80, 65, 83, 83, 10, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 108, 105, 110, 101, 45, 62, 100, 46, 110, 95, 102, 108, 116, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 108, 116, 91, 105, 93, 61, 61, 105, 100, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 49, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 10, 115, 116, 97, 116, 105, 99, 32, 105, 110, 108, 105, 110, 101, 32, 105, 110, 116, 32, 95, 98, 99, 102, 49, 95, 115, 121, 110, 99, 95, 97, 108, 108, 101, 108, 101, 115, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 44, 32, 105, 110, 116, 32, 110, 97, 108, 115, 41, 10, 123, 10, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 115, 104, 97, 114, 101, 100, 95, 100, 105, 114, 116, 121, 32, 124, 61, 32, 66, 67, 70, 49, 95, 68, 73, 82, 84, 89, 95, 65, 76, 83, 59, 10, 10, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 32, 61, 32, 110, 97, 108, 115, 59, 10, 32, 32, 32, 32, 104, 116, 115, 95, 101, 120, 112, 97, 110, 100, 40, 99, 104, 97, 114, 42, 44, 32, 108, 105, 110, 101, 45, 62, 110, 95, 97, 108, 108, 101, 108, 101, 44, 32, 108, 105, 110, 101, 45, 62, 100, 46, 109, 95, 97, 108, 108, 101, 108, 101, 44, 32, 108, 105, 110, 101, 45, 62, 100, 46, 97, 108, 108, 101, 108, 101, 41, 59, 10, 10, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 97, 108, 115, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 97, 108, 115, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 110, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 110, 60, 110, 97, 108, 115, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 97, 108, 108, 101, 108, 101, 91, 110, 93, 32, 61, 32, 97, 108, 115, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 42, 97, 108, 115, 32, 41, 32, 97, 108, 115, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 108, 115, 43, 43, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 110, 43, 43, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 47, 47, 32, 85, 112, 100, 97, 116, 101, 32, 82, 69, 70, 32, 108, 101, 110, 103, 116, 104, 10, 32, 32, 32, 32, 98, 99, 102, 95, 105, 110, 102, 111, 95, 116, 32, 42, 101, 110, 100, 95, 105, 110, 102, 111, 32, 61, 32, 98, 99, 102, 95, 103, 101, 116, 95, 105, 110, 102, 111, 40, 104, 100, 114, 44, 108, 105, 110, 101, 44, 34, 69, 78, 68, 34, 41, 59, 10, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 114, 108, 101, 110, 32, 61, 32, 101, 110, 100, 95, 105, 110, 102, 111, 32, 63, 32, 101, 110, 100, 95, 105, 110, 102, 111, 45, 62, 118, 49, 46, 105, 32, 58, 32, 115, 116, 114, 108, 101, 110, 40, 108, 105, 110, 101, 45, 62, 100, 46, 97, 108, 108, 101, 108, 101, 91, 48, 93, 41, 59, 10, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 105, 110, 116, 32, 98, 99, 102, 95, 117, 112, 100, 97, 116, 101, 95, 97, 108, 108, 101, 108, 101, 115, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 42, 97, 108, 108, 101, 108, 101, 115, 44, 32, 105, 110, 116, 32, 110, 97, 108, 115, 41, 10, 123, 10, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 116, 109, 112, 32, 61, 32, 123, 48, 44, 48, 44, 48, 125, 59, 10, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 102, 114, 101, 101, 95, 111, 108, 100, 32, 61, 32, 78, 85, 76, 76, 59, 10, 10, 32, 32, 32, 32, 47, 47, 32, 73, 102, 32, 116, 104, 101, 32, 115, 117, 112, 112, 108, 105, 101, 100, 32, 97, 108, 108, 101, 108, 101, 115, 32, 97, 114, 101, 32, 110, 111, 116, 32, 112, 111, 105, 110, 116, 101, 114, 115, 32, 116, 111, 32, 108, 105, 110, 101, 45, 62, 100, 46, 97, 108, 115, 44, 32, 116, 104, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 98, 108, 111, 99, 107, 32, 99, 97, 110, 32, 98, 101, 32, 114, 101, 117, 115, 101, 100, 46, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 110, 97, 108, 115, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 97, 108, 108, 101, 108, 101, 115, 91, 105, 93, 62, 61, 108, 105, 110, 101, 45, 62, 100, 46, 97, 108, 115, 32, 38, 38, 32, 97, 108, 108, 101, 108, 101, 115, 91, 105, 93, 60, 108, 105, 110, 101, 45, 62, 100, 46, 97, 108, 115, 43, 108, 105, 110, 101, 45, 62, 100, 46, 109, 95, 97, 108, 115, 32, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 61, 61, 110, 97, 108, 115, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 97, 108, 108, 32, 97, 108, 108, 101, 108, 101, 115, 32, 112, 111, 105, 110, 116, 32, 101, 108, 115, 101, 119, 104, 101, 114, 101, 44, 32, 114, 101, 117, 115, 101, 32, 116, 104, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 98, 108, 111, 99, 107, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 109, 112, 46, 108, 32, 61, 32, 48, 59, 32, 116, 109, 112, 46, 115, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 97, 108, 115, 59, 32, 116, 109, 112, 46, 109, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 109, 95, 97, 108, 115, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 101, 101, 95, 111, 108, 100, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 97, 108, 115, 59, 10, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 110, 97, 108, 115, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 40, 97, 108, 108, 101, 108, 101, 115, 91, 105, 93, 44, 32, 38, 116, 109, 112, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 99, 40, 48, 44, 32, 38, 116, 109, 112, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 97, 108, 115, 32, 61, 32, 116, 109, 112, 46, 115, 59, 32, 108, 105, 110, 101, 45, 62, 100, 46, 109, 95, 97, 108, 115, 32, 61, 32, 116, 109, 112, 46, 109, 59, 10, 32, 32, 32, 32, 102, 114, 101, 101, 40, 102, 114, 101, 101, 95, 111, 108, 100, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 95, 98, 99, 102, 49, 95, 115, 121, 110, 99, 95, 97, 108, 108, 101, 108, 101, 115, 40, 104, 100, 114, 44, 108, 105, 110, 101, 44, 110, 97, 108, 115, 41, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 117, 112, 100, 97, 116, 101, 95, 97, 108, 108, 101, 108, 101, 115, 95, 115, 116, 114, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 97, 108, 108, 101, 108, 101, 115, 95, 115, 116, 114, 105, 110, 103, 41, 10, 123, 10, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 116, 109, 112, 59, 10, 32, 32, 32, 32, 116, 109, 112, 46, 108, 32, 61, 32, 48, 59, 32, 116, 109, 112, 46, 115, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 97, 108, 115, 59, 32, 116, 109, 112, 46, 109, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 109, 95, 97, 108, 115, 59, 10, 32, 32, 32, 32, 107, 112, 117, 116, 115, 40, 97, 108, 108, 101, 108, 101, 115, 95, 115, 116, 114, 105, 110, 103, 44, 32, 38, 116, 109, 112, 41, 59, 10, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 97, 108, 115, 32, 61, 32, 116, 109, 112, 46, 115, 59, 32, 108, 105, 110, 101, 45, 62, 100, 46, 109, 95, 97, 108, 115, 32, 61, 32, 116, 109, 112, 46, 109, 59, 10, 10, 32, 32, 32, 32, 105, 110, 116, 32, 110, 97, 108, 115, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 116, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 97, 108, 115, 59, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 42, 116, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 116, 61, 61, 39, 44, 39, 32, 41, 32, 123, 32, 42, 116, 32, 61, 32, 48, 59, 32, 110, 97, 108, 115, 43, 43, 59, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 43, 43, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 95, 98, 99, 102, 49, 95, 115, 121, 110, 99, 95, 97, 108, 108, 101, 108, 101, 115, 40, 104, 100, 114, 44, 32, 108, 105, 110, 101, 44, 32, 110, 97, 108, 115, 41, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 117, 112, 100, 97, 116, 101, 95, 105, 100, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 105, 100, 41, 10, 123, 10, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 116, 109, 112, 59, 10, 32, 32, 32, 32, 116, 109, 112, 46, 108, 32, 61, 32, 48, 59, 32, 116, 109, 112, 46, 115, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 100, 59, 32, 116, 109, 112, 46, 109, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 109, 95, 105, 100, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 100, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 40, 105, 100, 44, 32, 38, 116, 109, 112, 41, 59, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 115, 40, 34, 46, 34, 44, 32, 38, 116, 109, 112, 41, 59, 10, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 100, 32, 61, 32, 116, 109, 112, 46, 115, 59, 32, 108, 105, 110, 101, 45, 62, 100, 46, 109, 95, 105, 100, 32, 61, 32, 116, 109, 112, 46, 109, 59, 10, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 115, 104, 97, 114, 101, 100, 95, 100, 105, 114, 116, 121, 32, 124, 61, 32, 66, 67, 70, 49, 95, 68, 73, 82, 84, 89, 95, 73, 68, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 97, 100, 100, 95, 105, 100, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 105, 100, 41, 10, 123, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 105, 100, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 10, 32, 32, 32, 32, 107, 115, 116, 114, 105, 110, 103, 95, 116, 32, 116, 109, 112, 59, 10, 32, 32, 32, 32, 116, 109, 112, 46, 108, 32, 61, 32, 48, 59, 32, 116, 109, 112, 46, 115, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 100, 59, 32, 116, 109, 112, 46, 109, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 109, 95, 105, 100, 59, 10, 10, 32, 32, 32, 32, 105, 110, 116, 32, 108, 101, 110, 32, 61, 32, 115, 116, 114, 108, 101, 110, 40, 105, 100, 41, 59, 10, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 100, 115, 116, 32, 61, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 100, 59, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 32, 42, 100, 115, 116, 32, 38, 38, 32, 40, 100, 115, 116, 61, 115, 116, 114, 115, 116, 114, 40, 100, 115, 116, 44, 105, 100, 41, 41, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 100, 115, 116, 91, 108, 101, 110, 93, 33, 61, 48, 32, 38, 38, 32, 100, 115, 116, 91, 108, 101, 110, 93, 33, 61, 39, 59, 39, 32, 41, 32, 100, 115, 116, 43, 43, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 97, 32, 112, 114, 101, 102, 105, 120, 44, 32, 110, 111, 116, 32, 97, 32, 109, 97, 116, 99, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 100, 115, 116, 61, 61, 108, 105, 110, 101, 45, 62, 100, 46, 105, 100, 32, 124, 124, 32, 100, 115, 116, 91, 45, 49, 93, 61, 61, 39, 59, 39, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 32, 32, 32, 47, 47, 32, 97, 108, 114, 101, 97, 100, 121, 32, 112, 114, 101, 115, 101, 110, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 115, 116, 43, 43, 59, 32, 32, 47, 47, 32, 97, 32, 115, 117, 102, 102, 105, 120, 44, 32, 110, 111, 116, 32, 97, 32, 109, 97, 116, 99, 104, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 100, 32, 38, 38, 32, 40, 108, 105, 110, 101, 45, 62, 100, 46, 105, 100, 91, 48, 93, 33, 61, 39, 46, 39, 32, 124, 124, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 100, 91, 49, 93, 41, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 109, 112, 46, 108, 32, 61, 32, 115, 116, 114, 108, 101, 110, 40, 108, 105, 110, 101, 45, 62, 100, 46, 105, 100, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 107, 112, 117, 116, 99, 40, 39, 59, 39, 44, 38, 116, 109, 112, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 107, 112, 117, 116, 115, 40, 105, 100, 44, 38, 116, 109, 112, 41, 59, 10, 10, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 100, 32, 61, 32, 116, 109, 112, 46, 115, 59, 32, 108, 105, 110, 101, 45, 62, 100, 46, 109, 95, 105, 100, 32, 61, 32, 116, 109, 112, 46, 109, 59, 10, 32, 32, 32, 32, 108, 105, 110, 101, 45, 62, 100, 46, 115, 104, 97, 114, 101, 100, 95, 100, 105, 114, 116, 121, 32, 124, 61, 32, 66, 67, 70, 49, 95, 68, 73, 82, 84, 89, 95, 73, 68, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 10, 125, 10, 10, 98, 99, 102, 95, 102, 109, 116, 95, 116, 32, 42, 98, 99, 102, 95, 103, 101, 116, 95, 102, 109, 116, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 107, 101, 121, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 100, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 50, 105, 110, 116, 40, 104, 100, 114, 44, 32, 66, 67, 70, 95, 68, 84, 95, 73, 68, 44, 32, 107, 101, 121, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 105, 110, 102, 111, 95, 101, 120, 105, 115, 116, 115, 40, 104, 100, 114, 44, 66, 67, 70, 95, 72, 76, 95, 70, 77, 84, 44, 105, 100, 41, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 32, 32, 32, 47, 47, 32, 110, 111, 32, 115, 117, 99, 104, 32, 70, 77, 84, 32, 102, 105, 101, 108, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 101, 97, 100, 101, 114, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 98, 99, 102, 95, 103, 101, 116, 95, 102, 109, 116, 95, 105, 100, 40, 108, 105, 110, 101, 44, 32, 105, 100, 41, 59, 10, 125, 10, 10, 98, 99, 102, 95, 105, 110, 102, 111, 95, 116, 32, 42, 98, 99, 102, 95, 103, 101, 116, 95, 105, 110, 102, 111, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 107, 101, 121, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 100, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 50, 105, 110, 116, 40, 104, 100, 114, 44, 32, 66, 67, 70, 95, 68, 84, 95, 73, 68, 44, 32, 107, 101, 121, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 105, 110, 102, 111, 95, 101, 120, 105, 115, 116, 115, 40, 104, 100, 114, 44, 66, 67, 70, 95, 72, 76, 95, 73, 78, 70, 79, 44, 105, 100, 41, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 32, 32, 32, 47, 47, 32, 110, 111, 32, 115, 117, 99, 104, 32, 73, 78, 70, 79, 32, 102, 105, 101, 108, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 101, 97, 100, 101, 114, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 98, 99, 102, 95, 103, 101, 116, 95, 105, 110, 102, 111, 95, 105, 100, 40, 108, 105, 110, 101, 44, 32, 105, 100, 41, 59, 10, 125, 10, 10, 98, 99, 102, 95, 102, 109, 116, 95, 116, 32, 42, 98, 99, 102, 95, 103, 101, 116, 95, 102, 109, 116, 95, 105, 100, 40, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 44, 32, 99, 111, 110, 115, 116, 32, 105, 110, 116, 32, 105, 100, 41, 32, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 40, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 38, 32, 66, 67, 70, 95, 85, 78, 95, 70, 77, 84, 41, 32, 41, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 40, 108, 105, 110, 101, 44, 32, 66, 67, 70, 95, 85, 78, 95, 70, 77, 84, 41, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 108, 105, 110, 101, 45, 62, 110, 95, 102, 109, 116, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 46, 105, 100, 61, 61, 105, 100, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 38, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 10, 125, 10, 10, 98, 99, 102, 95, 105, 110, 102, 111, 95, 116, 32, 42, 98, 99, 102, 95, 103, 101, 116, 95, 105, 110, 102, 111, 95, 105, 100, 40, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 44, 32, 99, 111, 110, 115, 116, 32, 105, 110, 116, 32, 105, 100, 41, 32, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 40, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 38, 32, 66, 67, 70, 95, 85, 78, 95, 73, 78, 70, 79, 41, 32, 41, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 40, 108, 105, 110, 101, 44, 32, 66, 67, 70, 95, 85, 78, 95, 73, 78, 70, 79, 41, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105]);
fileData0.push.apply(fileData0, [60, 108, 105, 110, 101, 45, 62, 110, 95, 105, 110, 102, 111, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 46, 107, 101, 121, 61, 61, 105, 100, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 38, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 78, 85, 76, 76, 59, 10, 125, 10, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 103, 101, 116, 95, 105, 110, 102, 111, 95, 118, 97, 108, 117, 101, 115, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 116, 97, 103, 44, 32, 118, 111, 105, 100, 32, 42, 42, 100, 115, 116, 44, 32, 105, 110, 116, 32, 42, 110, 100, 115, 116, 44, 32, 105, 110, 116, 32, 116, 121, 112, 101, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 44, 106, 44, 32, 116, 97, 103, 95, 105, 100, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 50, 105, 110, 116, 40, 104, 100, 114, 44, 32, 66, 67, 70, 95, 68, 84, 95, 73, 68, 44, 32, 116, 97, 103, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 105, 110, 102, 111, 95, 101, 120, 105, 115, 116, 115, 40, 104, 100, 114, 44, 66, 67, 70, 95, 72, 76, 95, 73, 78, 70, 79, 44, 116, 97, 103, 95, 105, 100, 41, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 32, 32, 32, 32, 47, 47, 32, 110, 111, 32, 115, 117, 99, 104, 32, 73, 78, 70, 79, 32, 102, 105, 101, 108, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 101, 97, 100, 101, 114, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 50, 116, 121, 112, 101, 40, 104, 100, 114, 44, 66, 67, 70, 95, 72, 76, 95, 73, 78, 70, 79, 44, 116, 97, 103, 95, 105, 100, 41, 33, 61, 116, 121, 112, 101, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 50, 59, 32, 32, 32, 32, 32, 47, 47, 32, 101, 120, 112, 101, 99, 116, 101, 100, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 116, 121, 112, 101, 10, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 40, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 38, 32, 66, 67, 70, 95, 85, 78, 95, 73, 78, 70, 79, 41, 32, 41, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 40, 108, 105, 110, 101, 44, 32, 66, 67, 70, 95, 85, 78, 95, 73, 78, 70, 79, 41, 59, 10, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 108, 105, 110, 101, 45, 62, 110, 95, 105, 110, 102, 111, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 46, 107, 101, 121, 61, 61, 116, 97, 103, 95, 105, 100, 32, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 61, 61, 108, 105, 110, 101, 45, 62, 110, 95, 105, 110, 102, 111, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 40, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 84, 95, 70, 76, 65, 71, 32, 41, 32, 63, 32, 48, 32, 58, 32, 45, 51, 59, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 116, 104, 101, 32, 116, 97, 103, 32, 105, 115, 32, 110, 111, 116, 32, 112, 114, 101, 115, 101, 110, 116, 32, 105, 110, 32, 116, 104, 105, 115, 32, 114, 101, 99, 111, 114, 100, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 84, 95, 70, 76, 65, 71, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 49, 59, 10, 10, 32, 32, 32, 32, 98, 99, 102, 95, 105, 110, 102, 111, 95, 116, 32, 42, 105, 110, 102, 111, 32, 61, 32, 38, 108, 105, 110, 101, 45, 62, 100, 46, 105, 110, 102, 111, 91, 105, 93, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 105, 110, 102, 111, 45, 62, 118, 112, 116, 114, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 51, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 116, 104, 101, 32, 116, 97, 103, 32, 119, 97, 115, 32, 109, 97, 114, 107, 101, 100, 32, 102, 111, 114, 32, 114, 101, 109, 111, 118, 97, 108, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 84, 95, 83, 84, 82, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 110, 100, 115, 116, 32, 60, 32, 105, 110, 102, 111, 45, 62, 108, 101, 110, 43, 49, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 42, 110, 100, 115, 116, 32, 61, 32, 105, 110, 102, 111, 45, 62, 108, 101, 110, 32, 43, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 42, 100, 115, 116, 32, 32, 61, 32, 114, 101, 97, 108, 108, 111, 99, 40, 42, 100, 115, 116, 44, 32, 42, 110, 100, 115, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 101, 109, 99, 112, 121, 40, 42, 100, 115, 116, 44, 105, 110, 102, 111, 45, 62, 118, 112, 116, 114, 44, 105, 110, 102, 111, 45, 62, 108, 101, 110, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 40, 40, 117, 105, 110, 116, 56, 95, 116, 42, 41, 42, 100, 115, 116, 41, 91, 105, 110, 102, 111, 45, 62, 108, 101, 110, 93, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 105, 110, 102, 111, 45, 62, 108, 101, 110, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 47, 47, 32, 77, 97, 107, 101, 32, 115, 117, 114, 101, 32, 116, 104, 101, 32, 98, 117, 102, 102, 101, 114, 32, 105, 115, 32, 98, 105, 103, 32, 101, 110, 111, 117, 103, 104, 10, 32, 32, 32, 32, 105, 110, 116, 32, 115, 105, 122, 101, 49, 32, 61, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 84, 95, 73, 78, 84, 32, 63, 32, 115, 105, 122, 101, 111, 102, 40, 105, 110, 116, 51, 50, 95, 116, 41, 32, 58, 32, 115, 105, 122, 101, 111, 102, 40, 102, 108, 111, 97, 116, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 110, 100, 115, 116, 32, 60, 32, 105, 110, 102, 111, 45, 62, 108, 101, 110, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 42, 110, 100, 115, 116, 32, 61, 32, 105, 110, 102, 111, 45, 62, 108, 101, 110, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 42, 100, 115, 116, 32, 32, 61, 32, 114, 101, 97, 108, 108, 111, 99, 40, 42, 100, 115, 116, 44, 32, 42, 110, 100, 115, 116, 32, 42, 32, 115, 105, 122, 101, 49, 41, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 110, 102, 111, 45, 62, 108, 101, 110, 32, 61, 61, 32, 49, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 110, 102, 111, 45, 62, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 66, 84, 95, 70, 76, 79, 65, 84, 32, 41, 32, 42, 40, 40, 102, 108, 111, 97, 116, 42, 41, 42, 100, 115, 116, 41, 32, 61, 32, 105, 110, 102, 111, 45, 62, 118, 49, 46, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 100, 101, 102, 105, 110, 101, 32, 66, 82, 65, 78, 67, 72, 40, 116, 121, 112, 101, 95, 116, 44, 32, 109, 105, 115, 115, 105, 110, 103, 41, 32, 123, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 110, 102, 111, 45, 62, 118, 49, 46, 105, 61, 61, 109, 105, 115, 115, 105, 110, 103, 32, 41, 32, 42, 40, 40, 105, 110, 116, 51, 50, 95, 116, 42, 41, 42, 100, 115, 116, 41, 32, 61, 32, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 109, 105, 115, 115, 105, 110, 103, 59, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 42, 40, 40, 105, 110, 116, 51, 50, 95, 116, 42, 41, 42, 100, 115, 116, 41, 32, 61, 32, 105, 110, 102, 111, 45, 62, 118, 49, 46, 105, 59, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 119, 105, 116, 99, 104, 32, 40, 105, 110, 102, 111, 45, 62, 116, 121, 112, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 115, 101, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 56, 58, 32, 32, 66, 82, 65, 78, 67, 72, 40, 105, 110, 116, 56, 95, 116, 44, 32, 32, 98, 99, 102, 95, 105, 110, 116, 56, 95, 109, 105, 115, 115, 105, 110, 103, 32, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 115, 101, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 49, 54, 58, 32, 66, 82, 65, 78, 67, 72, 40, 105, 110, 116, 49, 54, 95, 116, 44, 32, 98, 99, 102, 95, 105, 110, 116, 49, 54, 95, 109, 105, 115, 115, 105, 110, 103, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 115, 101, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 51, 50, 58, 32, 66, 82, 65, 78, 67, 72, 40, 105, 110, 116, 51, 50, 95, 116, 44, 32, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 109, 105, 115, 115, 105, 110, 103, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 117, 110, 100, 101, 102, 32, 66, 82, 65, 78, 67, 72, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 49, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 35, 100, 101, 102, 105, 110, 101, 32, 66, 82, 65, 78, 67, 72, 40, 116, 121, 112, 101, 95, 116, 44, 32, 105, 115, 95, 109, 105, 115, 115, 105, 110, 103, 44, 32, 105, 115, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 44, 32, 115, 101, 116, 95, 109, 105, 115, 115, 105, 110, 103, 44, 32, 111, 117, 116, 95, 116, 121, 112, 101, 95, 116, 41, 32, 123, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 95, 116, 121, 112, 101, 95, 116, 32, 42, 116, 109, 112, 32, 61, 32, 40, 111, 117, 116, 95, 116, 121, 112, 101, 95, 116, 32, 42, 41, 32, 42, 100, 115, 116, 59, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 95, 116, 32, 42, 112, 32, 61, 32, 40, 116, 121, 112, 101, 95, 116, 32, 42, 41, 32, 105, 110, 102, 111, 45, 62, 118, 112, 116, 114, 59, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 106, 61, 48, 59, 32, 106, 60, 105, 110, 102, 111, 45, 62, 108, 101, 110, 59, 32, 106, 43, 43, 41, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 115, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 106, 59, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 115, 95, 109, 105, 115, 115, 105, 110, 103, 32, 41, 32, 115, 101, 116, 95, 109, 105, 115, 115, 105, 110, 103, 59, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 42, 116, 109, 112, 32, 61, 32, 112, 91, 106, 93, 59, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 109, 112, 43, 43, 59, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 106, 59, 32, 92, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 115, 119, 105, 116, 99, 104, 32, 40, 105, 110, 102, 111, 45, 62, 116, 121, 112, 101, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 115, 101, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 56, 58, 32, 32, 66, 82, 65, 78, 67, 72, 40, 105, 110, 116, 56, 95, 116, 44, 32, 32, 112, 91, 106, 93, 61, 61, 98, 99, 102, 95, 105, 110, 116, 56, 95, 109, 105, 115, 115, 105, 110, 103, 44, 32, 32, 112, 91, 106, 93, 61, 61, 98, 99, 102, 95, 105, 110, 116, 56, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 44, 32, 32, 42, 116, 109, 112, 61, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 109, 105, 115, 115, 105, 110, 103, 44, 32, 105, 110, 116, 51, 50, 95, 116, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 115, 101, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 49, 54, 58, 32, 66, 82, 65, 78, 67, 72, 40, 105, 110, 116, 49, 54, 95, 116, 44, 32, 112, 91, 106, 93, 61, 61, 98, 99, 102, 95, 105, 110, 116, 49, 54, 95, 109, 105, 115, 115, 105, 110, 103, 44, 32, 112, 91, 106, 93, 61, 61, 98, 99, 102, 95, 105, 110, 116, 49, 54, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 44, 32, 42, 116, 109, 112, 61, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 109, 105, 115, 115, 105, 110, 103, 44, 32, 105, 110, 116, 51, 50, 95, 116, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 115, 101, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 51, 50, 58, 32, 66, 82, 65, 78, 67, 72, 40, 105, 110, 116, 51, 50, 95, 116, 44, 32, 112, 91, 106, 93, 61, 61, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 109, 105, 115, 115, 105, 110, 103, 44, 32, 112, 91, 106, 93, 61, 61, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 44, 32, 42, 116, 109, 112, 61, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 109, 105, 115, 115, 105, 110, 103, 44, 32, 105, 110, 116, 51, 50, 95, 116, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 115, 101, 32, 66, 67, 70, 95, 66, 84, 95, 70, 76, 79, 65, 84, 58, 32, 66, 82, 65, 78, 67, 72, 40, 102, 108, 111, 97, 116, 44, 32, 32, 32, 98, 99, 102, 95, 102, 108, 111, 97, 116, 95, 105, 115, 95, 109, 105, 115, 115, 105, 110, 103, 40, 112, 91, 106, 93, 41, 44, 32, 98, 99, 102, 95, 102, 108, 111, 97, 116, 95, 105, 115, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 40, 112, 91, 106, 93, 41, 44, 32, 98, 99, 102, 95, 102, 108, 111, 97, 116, 95, 115, 101, 116, 95, 109, 105, 115, 115, 105, 110, 103, 40, 42, 116, 109, 112, 41, 44, 32, 102, 108, 111, 97, 116, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 102, 97, 117, 108, 116, 58, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 84, 79, 68, 79, 58, 32, 37, 115, 58, 37, 100, 32, 46, 46, 32, 105, 110, 102, 111, 45, 62, 116, 121, 112, 101, 61, 37, 100, 92, 110, 34, 44, 32, 95, 95, 70, 73, 76, 69, 95, 95, 44, 95, 95, 76, 73, 78, 69, 95, 95, 44, 32, 105, 110, 102, 111, 45, 62, 116, 121, 112, 101, 41, 59, 32, 101, 120, 105, 116, 40, 49, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 35, 117, 110, 100, 101, 102, 32, 66, 82, 65, 78, 67, 72, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 45, 52, 59, 32, 32, 47, 47, 32, 116, 104, 105, 115, 32, 99, 97, 110, 32, 110, 101, 118, 101, 114, 32, 104, 97, 112, 112, 101, 110, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 103, 101, 116, 95, 102, 111, 114, 109, 97, 116, 95, 115, 116, 114, 105, 110, 103, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 116, 97, 103, 44, 32, 99, 104, 97, 114, 32, 42, 42, 42, 100, 115, 116, 44, 32, 105, 110, 116, 32, 42, 110, 100, 115, 116, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 44, 116, 97, 103, 95, 105, 100, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 50, 105, 110, 116, 40, 104, 100, 114, 44, 32, 66, 67, 70, 95, 68, 84, 95, 73, 68, 44, 32, 116, 97, 103, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 105, 110, 102, 111, 95, 101, 120, 105, 115, 116, 115, 40, 104, 100, 114, 44, 66, 67, 70, 95, 72, 76, 95, 70, 77, 84, 44, 116, 97, 103, 95, 105, 100, 41, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 32, 32, 32, 32, 47, 47, 32, 110, 111, 32, 115, 117, 99, 104, 32, 70, 79, 82, 77, 65, 84, 32, 102, 105, 101, 108, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 101, 97, 100, 101, 114, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 50, 116, 121, 112, 101, 40, 104, 100, 114, 44, 66, 67, 70, 95, 72, 76, 95, 70, 77, 84, 44, 116, 97, 103, 95, 105, 100, 41, 33, 61, 66, 67, 70, 95, 72, 84, 95, 83, 84, 82, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 50, 59, 32, 32, 32, 32, 32, 47, 47, 32, 101, 120, 112, 101, 99, 116, 101, 100, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 116, 121, 112, 101, 10, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 40, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 38, 32, 66, 67, 70, 95, 85, 78, 95, 70, 77, 84, 41, 32, 41, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 40, 108, 105, 110, 101, 44, 32, 66, 67, 70, 95, 85, 78, 95, 70, 77, 84, 41, 59, 10, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 108, 105, 110, 101, 45, 62, 110, 95, 102, 109, 116, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 46, 105, 100, 61, 61, 116, 97, 103, 95, 105, 100, 32, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 61, 61, 108, 105, 110, 101, 45, 62, 110, 95, 102, 109, 116, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 51, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 116, 104, 101, 32, 116, 97, 103, 32, 105, 115, 32, 110, 111, 116, 32, 112, 114, 101, 115, 101, 110, 116, 32, 105, 110, 32, 116, 104, 105, 115, 32, 114, 101, 99, 111, 114, 100, 10, 32, 32, 32, 32, 98, 99, 102, 95, 102, 109, 116, 95, 116, 32, 42, 102, 109, 116, 32, 61, 32, 38, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 102, 109, 116, 45, 62, 112, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 51, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 116, 104, 101, 32, 116, 97, 103, 32, 119, 97, 115, 32, 109, 97, 114, 107, 101, 100, 32, 102, 111, 114, 32, 114, 101, 109, 111, 118, 97, 108, 10, 10, 32, 32, 32, 32, 105, 110, 116, 32, 110, 115, 109, 112, 108, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 100, 114, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 42, 100, 115, 116, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 42, 100, 115, 116, 32, 61, 32, 40, 99, 104, 97, 114, 42, 42, 41, 32, 109, 97, 108, 108, 111, 99, 40, 115, 105, 122, 101, 111, 102, 40, 99, 104, 97, 114, 42, 41, 42, 110, 115, 109, 112, 108, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 42, 100, 115, 116, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 52, 59, 32, 32, 32, 32, 32, 47, 47, 32, 99, 111, 117, 108, 100, 32, 110, 111, 116, 32, 97, 108, 108, 111, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 40, 42, 100, 115, 116, 41, 91, 48, 93, 32, 61, 32, 78, 85, 76, 76, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 110, 116, 32, 110, 32, 61, 32, 40, 102, 109, 116, 45, 62, 110, 43, 49, 41, 42, 110, 115, 109, 112, 108, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 110, 100, 115, 116, 32, 60, 32, 110, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 40, 42, 100, 115, 116, 41, 91, 48, 93, 32, 61, 32, 114, 101, 97, 108, 108, 111, 99, 40, 40, 42, 100, 115, 116, 41, 91, 48, 93, 44, 32, 110, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 40, 42, 100, 115, 116, 41, 91, 48, 93, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 52, 59, 32, 32, 32, 32, 47, 47, 32, 99, 111, 117, 108, 100, 32, 110, 111, 116, 32, 97, 108, 108, 111, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 42, 110, 100, 115, 116, 32, 61, 32, 110, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 110, 115, 109, 112, 108, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 105, 110, 116, 56, 95, 116, 32, 42, 115, 114, 99, 32, 61, 32, 102, 109, 116, 45, 62, 112, 32, 43, 32, 105, 42, 102, 109, 116, 45, 62, 110, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 105, 110, 116, 56, 95, 116, 32, 42, 116, 109, 112, 32, 61, 32, 40, 117, 105, 110, 116, 56, 95, 116, 42, 41, 40, 42, 100, 115, 116, 41, 91, 48, 93, 32, 43, 32, 105, 42, 40, 102, 109, 116, 45, 62, 110, 43, 49, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 101, 109, 99, 112, 121, 40, 116, 109, 112, 44, 115, 114, 99, 44, 102, 109, 116, 45, 62, 110, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 109, 112, 91, 102, 109, 116, 45, 62, 110, 93, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 40, 42, 100, 115, 116, 41, 91, 105, 93, 32, 61, 32, 40, 99, 104, 97, 114, 42, 41, 32, 116, 109, 112, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 59, 10, 125, 10, 10, 105, 110, 116, 32, 98, 99, 102, 95, 103, 101, 116, 95, 102, 111, 114, 109, 97, 116, 95, 118, 97, 108, 117, 101, 115, 40, 99, 111, 110, 115, 116, 32, 98, 99, 102, 95, 104, 100, 114, 95, 116, 32, 42, 104, 100, 114, 44, 32, 98, 99, 102, 49, 95, 116, 32, 42, 108, 105, 110, 101, 44, 32, 99, 111, 110, 115, 116, 32, 99, 104, 97, 114, 32, 42, 116, 97, 103, 44, 32, 118, 111, 105, 100, 32, 42, 42, 100, 115, 116, 44, 32, 105, 110, 116, 32, 42, 110, 100, 115, 116, 44, 32, 105, 110, 116, 32, 116, 121, 112, 101, 41, 10, 123, 10, 32, 32, 32, 32, 105, 110, 116, 32, 105, 44, 106, 44, 32, 116, 97, 103, 95, 105, 100, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 50, 105, 110, 116, 40, 104, 100, 114, 44, 32, 66, 67, 70, 95, 68, 84, 95, 73, 68, 44, 32, 116, 97, 103, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 105, 110, 102, 111, 95, 101, 120, 105, 115, 116, 115, 40, 104, 100, 114, 44, 66, 67, 70, 95, 72, 76, 95, 70, 77, 84, 44, 116, 97, 103, 95, 105, 100, 41, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 59, 32, 32, 32, 32, 47, 47, 32, 110, 111, 32, 115, 117, 99, 104, 32, 70, 79, 82, 77, 65, 84, 32, 102, 105, 101, 108, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 101, 97, 100, 101, 114, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 116, 97, 103, 91, 48, 93, 61, 61, 39, 71, 39, 32, 38, 38, 32, 116, 97, 103, 91, 49, 93, 61, 61, 39, 84, 39, 32, 38, 38, 32, 116, 97, 103, 91, 50, 93, 61, 61, 48, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 85, 103, 108, 121, 58, 32, 71, 84, 32, 102, 105, 101, 108, 100, 32, 105, 115, 32, 99, 111, 110, 115, 105, 100, 101, 114, 101, 100, 32, 116, 111, 32, 98, 101, 32, 97, 32, 115, 116, 114, 105, 110, 103, 32, 98, 121, 32, 116, 104, 101, 32, 86, 67, 70, 32, 104, 101, 97, 100, 101, 114, 32, 98, 117, 116, 32, 66, 67, 70, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 115, 32, 105, 116, 32, 97, 115, 32, 73, 78, 84, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 50, 116, 121, 112, 101, 40, 104, 100, 114, 44, 66, 67, 70, 95, 72, 76, 95, 70, 77, 84, 44, 116, 97, 103, 95, 105, 100, 41, 33, 61, 66, 67, 70, 95, 72, 84, 95, 83, 84, 82, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 50, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 98, 99, 102, 95, 104, 100, 114, 95, 105, 100, 50, 116, 121, 112, 101, 40, 104, 100, 114, 44, 66, 67, 70, 95, 72, 76, 95, 70, 77, 84, 44, 116, 97, 103, 95, 105, 100, 41, 33, 61, 116, 121, 112, 101, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 50, 59, 32, 32, 32, 32, 32, 47, 47, 32, 101, 120, 112, 101, 99, 116, 101, 100, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 116, 121, 112, 101, 10, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 40, 108, 105, 110, 101, 45, 62, 117, 110, 112, 97, 99, 107, 101, 100, 32, 38, 32, 66, 67, 70, 95, 85, 78, 95, 70, 77, 84, 41, 32, 41, 32, 98, 99, 102, 95, 117, 110, 112, 97, 99, 107, 40, 108, 105, 110, 101, 44, 32, 66, 67, 70, 95, 85, 78, 95, 70, 77, 84, 41, 59, 10, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 108, 105, 110, 101, 45, 62, 110, 95, 102, 109, 116, 59, 32, 105, 43, 43, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 46, 105, 100, 61, 61, 116, 97, 103, 95, 105, 100, 32, 41, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 61, 61, 108, 105, 110, 101, 45, 62, 110, 95, 102, 109, 116, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 51, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 116, 104, 101, 32, 116, 97, 103, 32, 105, 115, 32, 110, 111, 116, 32, 112, 114, 101, 115, 101, 110, 116, 32, 105, 110, 32, 116, 104, 105, 115, 32, 114, 101, 99, 111, 114, 100, 10, 32, 32, 32, 32, 98, 99, 102, 95, 102, 109, 116, 95, 116, 32, 42, 102, 109, 116, 32, 61, 32, 38, 108, 105, 110, 101, 45, 62, 100, 46, 102, 109, 116, 91, 105, 93, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 102, 109, 116, 45, 62, 112, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 51, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 116, 104, 101, 32, 116, 97, 103, 32, 119, 97, 115, 32, 109, 97, 114, 107, 101, 100, 32, 102, 111, 114, 32, 114, 101, 109, 111, 118, 97, 108, 10, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 84, 95, 83, 84, 82, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 116, 32, 110, 32, 61, 32, 102, 109, 116, 45, 62, 110, 42, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 100, 114, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 110, 100, 115, 116, 32, 60, 32, 110, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 42, 100, 115, 116, 32, 32, 61, 32, 114, 101, 97, 108, 108, 111, 99, 40, 42, 100, 115, 116, 44, 32, 110, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 42, 100, 115, 116, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 52, 59, 32, 32, 32, 32, 32, 47, 47, 32, 99, 111, 117, 108, 100, 32, 110, 111, 116, 32, 97, 108, 108, 111, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 42, 110, 100, 115, 116, 32, 61, 32, 110, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 101, 109, 99, 112, 121, 40, 42, 100, 115, 116, 44, 102, 109, 116, 45, 62, 112, 44, 110, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 47, 47, 32, 77, 97, 107, 101, 32, 115, 117, 114, 101, 32, 116, 104, 101, 32, 98, 117, 102, 102, 101, 114, 32, 105, 115, 32, 98, 105, 103, 32, 101, 110, 111, 117, 103, 104, 10, 32, 32, 32, 32, 105, 110, 116, 32, 110, 115, 109, 112, 108, 32, 61, 32, 98, 99, 102, 95, 104, 100, 114, 95, 110, 115, 97, 109, 112, 108, 101, 115, 40, 104, 100, 114, 41, 59, 10, 32, 32, 32, 32, 105, 110, 116, 32, 115, 105, 122, 101, 49, 32, 61, 32, 116, 121, 112, 101, 61, 61, 66, 67, 70, 95, 72, 84, 95, 73, 78, 84, 32, 63, 32, 115, 105, 122, 101, 111, 102, 40, 105, 110, 116, 51, 50, 95, 116, 41, 32, 58, 32, 115, 105, 122, 101, 111, 102, 40, 102, 108, 111, 97, 116, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 32, 42, 110, 100, 115, 116, 32, 60, 32, 102, 109, 116, 45, 62, 110, 42, 110, 115, 109, 112, 108, 32, 41, 10, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 42, 110, 100, 115, 116, 32, 61, 32, 102, 109, 116, 45, 62, 110, 42, 110, 115, 109, 112, 108, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 42, 100, 115, 116, 32, 32, 61, 32, 114, 101, 97, 108, 108, 111, 99, 40, 42, 100, 115, 116, 44, 32, 42, 110, 100, 115, 116, 42, 115, 105, 122, 101, 49, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 33, 100, 115, 116, 32, 41, 32, 114, 101, 116, 117, 114, 110, 32, 45, 52, 59, 32, 32, 32, 32, 32, 47, 47, 32, 99, 111, 117, 108, 100, 32, 110, 111, 116, 32, 97, 108, 108, 111, 99, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 35, 100, 101, 102, 105, 110, 101, 32, 66, 82, 65, 78, 67, 72, 40, 116, 121, 112, 101, 95, 116, 44, 32, 105, 115, 95, 109, 105, 115, 115, 105, 110, 103, 44, 32, 105, 115, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 44, 32, 115, 101, 116, 95, 109, 105, 115, 115, 105, 110, 103, 44, 32, 115, 101, 116, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 44, 32, 111, 117, 116, 95, 116, 121, 112, 101, 95, 116, 41, 32, 123, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 95, 116, 121, 112, 101, 95, 116, 32, 42, 116, 109, 112, 32, 61, 32, 40, 111, 117, 116, 95, 116, 121, 112, 101, 95, 116, 32, 42, 41, 32, 42, 100, 115, 116, 59, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 95, 116, 32, 42, 112, 32, 61, 32, 40, 116, 121, 112, 101, 95, 116, 42, 41, 32, 102, 109, 116, 45, 62, 112, 59, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 61, 48, 59, 32, 105, 60, 110, 115, 109, 112, 108, 59, 32, 105, 43, 43, 41, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 106, 61, 48, 59, 32, 106, 60, 102, 109, 116, 45, 62, 110, 59, 32, 106, 43, 43, 41, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 32, 105, 115, 95, 109, 105, 115, 115, 105, 110, 103, 32, 41, 32, 115, 101, 116, 95, 109, 105, 115, 115, 105, 110, 103, 59, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 32, 105, 115, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 32, 41, 32, 123, 32, 115, 101, 116, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 59, 32, 98, 114, 101, 97, 107, 59, 32, 125, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 42, 116, 109, 112, 32, 61, 32, 112, 91, 106, 93, 59, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 109, 112, 43, 43, 59, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 59, 32, 106, 60, 102, 109, 116, 45, 62, 110, 59, 32, 106, 43, 43, 41, 32, 123, 32, 115, 101, 116, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 59, 32, 116, 109, 112, 43, 43, 59, 32, 125, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 32, 61, 32, 40, 116, 121, 112, 101, 95, 116, 32, 42, 41, 40, 40, 99, 104, 97, 114, 32, 42, 41, 112, 32, 43, 32, 102, 109, 116, 45, 62, 115, 105, 122, 101, 41, 59, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 92, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 115, 119, 105, 116, 99, 104, 32, 40, 102, 109, 116, 45, 62, 116, 121, 112, 101, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 115, 101, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 56, 58, 32, 32, 66, 82, 65, 78, 67, 72, 40, 105, 110, 116, 56, 95, 116, 44, 32, 32, 112, 91, 106, 93, 61, 61, 98, 99, 102, 95, 105, 110, 116, 56, 95, 109, 105, 115, 115, 105, 110, 103, 44, 32, 32, 112, 91, 106, 93, 61, 61, 98, 99, 102, 95, 105, 110, 116, 56, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 44, 32, 32, 42, 116, 109, 112, 61, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 109, 105, 115, 115, 105, 110, 103, 44, 32, 42, 116, 109, 112, 61, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 44, 32, 105, 110, 116, 51, 50, 95, 116, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 115, 101, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 49, 54, 58, 32, 66, 82, 65, 78, 67, 72, 40, 105, 110, 116, 49, 54, 95, 116, 44, 32, 112, 91, 106, 93, 61, 61, 98, 99, 102, 95, 105, 110, 116, 49, 54, 95, 109, 105, 115, 115, 105, 110, 103, 44, 32, 112, 91, 106, 93, 61, 61, 98, 99, 102, 95, 105, 110, 116, 49, 54, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 44, 32, 42, 116, 109, 112, 61, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 109, 105, 115, 115, 105, 110, 103, 44, 32, 42, 116, 109, 112, 61, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 44, 32, 105, 110, 116, 51, 50, 95, 116, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 115, 101, 32, 66, 67, 70, 95, 66, 84, 95, 73, 78, 84, 51, 50, 58, 32, 66, 82, 65, 78, 67, 72, 40, 105, 110, 116, 51, 50, 95, 116, 44, 32, 112, 91, 106, 93, 61, 61, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 109, 105, 115, 115, 105, 110, 103, 44, 32, 112, 91, 106, 93, 61, 61, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 44, 32, 42, 116, 109, 112, 61, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 109, 105, 115, 115, 105, 110, 103, 44, 32, 42, 116, 109, 112, 61, 98, 99, 102, 95, 105, 110, 116, 51, 50, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 44, 32, 105, 110, 116, 51, 50, 95, 116, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 115, 101, 32, 66, 67, 70, 95, 66, 84, 95, 70, 76, 79, 65, 84, 58, 32, 66, 82, 65, 78, 67, 72, 40, 102, 108, 111, 97, 116, 44, 32, 32, 32, 98, 99, 102, 95, 102, 108, 111, 97, 116, 95, 105, 115, 95, 109, 105, 115, 115, 105, 110, 103, 40, 112, 91, 106, 93, 41, 44, 32, 98, 99, 102, 95, 102, 108, 111, 97, 116, 95, 105, 115, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 40, 112, 91, 106, 93, 41, 44, 32, 98, 99, 102, 95, 102, 108, 111, 97, 116, 95, 115, 101, 116, 95, 109, 105, 115, 115, 105, 110, 103, 40, 42, 116, 109, 112, 41, 44, 32, 98, 99, 102, 95, 102, 108, 111, 97, 116, 95, 115, 101, 116, 95, 118, 101, 99, 116, 111, 114, 95, 101, 110, 100, 40, 42, 116, 109, 112, 41, 44, 32, 102, 108, 111, 97, 116, 41, 59, 32, 98, 114, 101, 97, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 102, 97, 117, 108, 116, 58, 32, 102, 112, 114, 105, 110, 116, 102, 40, 115, 116, 100, 101, 114, 114, 44, 34, 84, 79, 68, 79, 58, 32, 37, 115, 58, 37, 100, 32, 46, 46, 32, 102, 109, 116, 45, 62, 116, 121, 112, 101, 61, 37, 100, 92, 110, 34, 44, 32, 95, 95, 70, 73, 76, 69, 95, 95, 44, 95, 95, 76, 73, 78, 69, 95, 95, 44, 32, 102, 109, 116, 45, 62, 116, 121, 112, 101, 41, 59, 32, 101, 120, 105, 116, 40, 49, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 35, 117, 110, 100, 101, 102, 32, 66, 82, 65, 78, 67, 72, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 115, 109, 112, 108, 42, 102, 109, 116, 45, 62, 110, 59, 10, 125, 10, 10]);
Module['FS_createDataFile']('/', 'vcf.c', fileData0, true, true, false);

  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": []});

})();

define([], function() {
    return function(Module) {

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var s = func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var WASM_PAGE_SIZE = 64 * 1024;

var totalMemory = WASM_PAGE_SIZE;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024;
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var lastChar, end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);    
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;





// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 27488;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,150,48,7,119,44,97,14,238,186,81,9,153,25,196,109,7,143,244,106,112,53,165,99,233,163,149,100,158,50,136,219,14,164,184,220,121,30,233,213,224,136,217,210,151,43,76,182,9,189,124,177,126,7,45,184,231,145,29,191,144,100,16,183,29,242,32,176,106,72,113,185,243,222,65,190,132,125,212,218,26,235,228,221,109,81,181,212,244,199,133,211,131,86,152,108,19,192,168,107,100,122,249,98,253,236,201,101,138,79,92,1,20,217,108,6,99,99,61,15,250,245,13,8,141,200,32,110,59,94,16,105,76,228,65,96,213,114,113,103,162,209,228,3,60,71,212,4,75,253,133,13,210,107,181,10,165,250,168,181,53,108,152,178,66,214,201,187,219,64,249,188,172,227,108,216,50,117,92,223,69,207,13,214,220,89,61,209,171,172,48,217,38,58,0,222,81,128,81,215,200,22,97,208,191,181,244,180,33,35,196,179,86,153,149,186,207,15,165,189,184,158,184,2,40,8,136,5,95,178,217,12,198,36,233,11,177,135,124,111,47,17,76,104,88,171,29,97,193,61,45,102,182,144,65,220,118,6,113,219,1,188,32,210,152,42,16,213,239,137,133,177,113,31,181,182,6,165,228,191,159,51,212,184,232,162,201,7,120,52,249,0,15,142,168,9,150,24,152,14,225,187,13,106,127,45,61,109,8,151,108,100,145,1,92,99,230,244,81,107,107,98,97,108,28,216,48,101,133,78,0,98,242,237,149,6,108,123,165,1,27,193,244,8,130,87,196,15,245,198,217,176,101,80,233,183,18,234,184,190,139,124,136,185,252,223,29,221,98,73,45,218,21,243,124,211,140,101,76,212,251,88,97,178,77,206,81,181,58,116,0,188,163,226,48,187,212,65,165,223,74,215,149,216,61,109,196,209,164,251,244,214,211,106,233,105,67,252,217,110,52,70,136,103,173,208,184,96,218,115,45,4,68,229,29,3,51,95,76,10,170,201,124,13,221,60,113,5,80,170,65,2,39,16,16,11,190,134,32,12,201,37,181,104,87,179,133,111,32,9,212,102,185,159,228,97,206,14,249,222,94,152,201,217,41,34,152,208,176,180,168,215,199,23,61,179,89,129,13,180,46,59,92,189,183,173,108,186,192,32,131,184,237,182,179,191,154,12,226,182,3,154,210,177,116,57,71,213,234,175,119,210,157,21,38,219,4,131,22,220,115,18,11,99,227,132,59,100,148,62,106,109,13,168,90,106,122,11,207,14,228,157,255,9,147,39,174,0,10,177,158,7,125,68,147,15,240,210,163,8,135,104,242,1,30,254,194,6,105,93,87,98,247,203,103,101,128,113,54,108,25,231,6,107,110,118,27,212,254,224,43,211,137,90,122,218,16,204,74,221,103,111,223,185,249,249,239,190,142,67,190,183,23,213,142,176,96,232,163,214,214,126,147,209,161,196,194,216,56,82,242,223,79,241,103,187,209,103,87,188,166,221,6,181,63,75,54,178,72,218,43,13,216,76,27,10,175,246,74,3,54,96,122,4,65,195,239,96,223,85,223,103,168,239,142,110,49,121,190,105,70,140,179,97,203,26,131,102,188,160,210,111,37,54,226,104,82,149,119,12,204,3,71,11,187,185,22,2,34,47,38,5,85,190,59,186,197,40,11,189,178,146,90,180,43,4,106,179,92,167,255,215,194,49,207,208,181,139,158,217,44,29,174,222,91,176,194,100,155,38,242,99,236,156,163,106,117,10,147,109,2,169,6,9,156,63,54,14,235,133,103,7,114,19,87,0,5,130,74,191,149,20,122,184,226,174,43,177,123,56,27,182,12,155,142,210,146,13,190,213,229,183,239,220,124,33,223,219,11,212,210,211,134,66,226,212,241,248,179,221,104,110,131,218,31,205,22,190,129,91,38,185,246,225,119,176,111,119,71,183,24,230,90,8,136,112,106,15,255,202,59,6,102,92,11,1,17,255,158,101,143,105,174,98,248,211,255,107,97,69,207,108,22,120,226,10,160,238,210,13,215,84,131,4,78,194,179,3,57,97,38,103,167,247,22,96,208,77,71,105,73,219,119,110,62,74,106,209,174,220,90,214,217,102,11,223,64,240,59,216,55,83,174,188,169,197,158,187,222,127,207,178,71,233,255,181,48,28,242,189,189,138,194,186,202,48,147,179,83,166,163,180,36,5,54,208,186,147,6,215,205,41,87,222,84,191,103,217,35,46,122,102,179,184,74,97,196,2,27,104,93,148,43,111,42,55,190,11,180,161,142,12,195,27,223,5,90,141,239,2,45,0,0,0,0,65,49,27,25,130,98,54,50,195,83,45,43,4,197,108,100,69,244,119,125,134,167,90,86,199,150,65,79,8,138,217,200,73,187,194,209,138,232,239,250,203,217,244,227,12,79,181,172,77,126,174,181,142,45,131,158,207,28,152,135,81,18,194,74,16,35,217,83,211,112,244,120,146,65,239,97,85,215,174,46,20,230,181,55,215,181,152,28,150,132,131,5,89,152,27,130,24,169,0,155,219,250,45,176,154,203,54,169,93,93,119,230,28,108,108,255,223,63,65,212,158,14,90,205,162,36,132,149,227,21,159,140,32,70,178,167,97,119,169,190,166,225,232,241,231,208,243,232,36,131,222,195,101,178,197,218,170,174,93,93,235,159,70,68,40,204,107,111,105,253,112,118,174,107,49,57,239,90,42,32,44,9,7,11,109,56,28,18,243,54,70,223,178,7,93,198,113,84,112,237,48,101,107,244,247,243,42,187,182,194,49,162,117,145,28,137,52,160,7,144,251,188,159,23,186,141,132,14,121,222,169,37,56,239,178,60,255,121,243,115,190,72,232,106,125,27,197,65,60,42,222,88,5,79,121,240,68,126,98,233,135,45,79,194,198,28,84,219,1,138,21,148,64,187,14,141,131,232,35,166,194,217,56,191,13,197,160,56,76,244,187,33,143,167,150,10,206,150,141,19,9,0,204,92,72,49,215,69,139,98,250,110,202,83,225,119,84,93,187,186,21,108,160,163,214,63,141,136,151,14,150,145,80,152,215,222,17,169,204,199,210,250,225,236,147,203,250,245,92,215,98,114,29,230,121,107,222,181,84,64,159,132,79,89,88,18,14,22,25,35,21,15,218,112,56,36,155,65,35,61,167,107,253,101,230,90,230,124,37,9,203,87,100,56,208,78,163,174,145,1,226,159,138,24,33,204,167,51,96,253,188,42,175,225,36,173,238,208,63,180,45,131,18,159,108,178,9,134,171,36,72,201,234,21,83,208,41,70,126,251,104,119,101,226,246,121,63,47,183,72,36,54,116,27,9,29,53,42,18,4,242,188,83,75,179,141,72,82,112,222,101,121,49,239,126,96,254,243,230,231,191,194,253,254,124,145,208,213,61,160,203,204,250,54,138,131,187,7,145,154,120,84,188,177,57,101,167,168,75,152,131,59,10,169,152,34,201,250,181,9,136,203,174,16,79,93,239,95,14,108,244,70,205,63,217,109,140,14,194,116,67,18,90,243,2,35,65,234,193,112,108,193,128,65,119,216,71,215,54,151,6,230,45,142,197,181,0,165,132,132,27,188,26,138,65,113,91,187,90,104,152,232,119,67,217,217,108,90,30,79,45,21,95,126,54,12,156,45,27,39,221,28,0,62,18,0,152,185,83,49,131,160,144,98,174,139,209,83,181,146,22,197,244,221,87,244,239,196,148,167,194,239,213,150,217,246,233,188,7,174,168,141,28,183,107,222,49,156,42,239,42,133,237,121,107,202,172,72,112,211,111,27,93,248,46,42,70,225,225,54,222,102,160,7,197,127,99,84,232,84,34,101,243,77,229,243,178,2,164,194,169,27,103,145,132,48,38,160,159,41,184,174,197,228,249,159,222,253,58,204,243,214,123,253,232,207,188,107,169,128,253,90,178,153,62,9,159,178,127,56,132,171,176,36,28,44,241,21,7,53,50,70,42,30,115,119,49,7,180,225,112,72,245,208,107,81,54,131,70,122,119,178,93,99,78,215,250,203,15,230,225,210,204,181,204,249,141,132,215,224,74,18,150,175,11,35,141,182,200,112,160,157,137,65,187,132,70,93,35,3,7,108,56,26,196,63,21,49,133,14,14,40,66,152,79,103,3,169,84,126,192,250,121,85,129,203,98,76,31,197,56,129,94,244,35,152,157,167,14,179,220,150,21,170,27,0,84,229,90,49,79,252,153,98,98,215,216,83,121,206,23,79,225,73,86,126,250,80,149,45,215,123,212,28,204,98,19,138,141,45,82,187,150,52,145,232,187,31,208,217,160,6,236,243,126,94,173,194,101,71,110,145,72,108,47,160,83,117,232,54,18,58,169,7,9,35,106,84,36,8,43,101,63,17,228,121,167,150,165,72,188,143,102,27,145,164,39,42,138,189,224,188,203,242,161,141,208,235,98,222,253,192,35,239,230,217,189,225,188,20,252,208,167,13,63,131,138,38,126,178,145,63,185,36,208,112,248,21,203,105,59,70,230,66,122,119,253,91,181,107,101,220,244,90,126,197,55,9,83,238,118,56,72,247,177,174,9,184,240,159,18,161,51,204,63,138,114,253,36,147,0,0,0,0,55,106,194,1,110,212,132,3,89,190,70,2,220,168,9,7,235,194,203,6,178,124,141,4,133,22,79,5,184,81,19,14,143,59,209,15,214,133,151,13,225,239,85,12,100,249,26,9,83,147,216,8,10,45,158,10,61,71,92,11,112,163,38,28,71,201,228,29,30,119,162,31,41,29,96,30,172,11,47,27,155,97,237,26,194,223,171,24,245,181,105,25,200,242,53,18,255,152,247,19,166,38,177,17,145,76,115,16,20,90,60,21,35,48,254,20,122,142,184,22,77,228,122,23,224,70,77,56,215,44,143,57,142,146,201,59,185,248,11,58,60,238,68,63,11,132,134,62,82,58,192,60,101,80,2,61,88,23,94,54,111,125,156,55,54,195,218,53,1,169,24,52,132,191,87,49,179,213,149,48,234,107,211,50,221,1,17,51,144,229,107,36,167,143,169,37,254,49,239,39,201,91,45,38,76,77,98,35,123,39,160,34,34,153,230,32,21,243,36,33,40,180,120,42,31,222,186,43,70,96,252,41,113,10,62,40,244,28,113,45,195,118,179,44,154,200,245,46,173,162,55,47,192,141,154,112,247,231,88,113,174,89,30,115,153,51,220,114,28,37,147,119,43,79,81,118,114,241,23,116,69,155,213,117,120,220,137,126,79,182,75,127,22,8,13,125,33,98,207,124,164,116,128,121,147,30,66,120,202,160,4,122,253,202,198,123,176,46,188,108,135,68,126,109,222,250,56,111,233,144,250,110,108,134,181,107,91,236,119,106,2,82,49,104,53,56,243,105,8,127,175,98,63,21,109,99,102,171,43,97,81,193,233,96,212,215,166,101,227,189,100,100,186,3,34,102,141,105,224,103,32,203,215,72,23,161,21,73,78,31,83,75,121,117,145,74,252,99,222,79,203,9,28,78,146,183,90,76,165,221,152,77,152,154,196,70,175,240,6,71,246,78,64,69,193,36,130,68,68,50,205,65,115,88,15,64,42,230,73,66,29,140,139,67,80,104,241,84,103,2,51,85,62,188,117,87,9,214,183,86,140,192,248,83,187,170,58,82,226,20,124,80,213,126,190,81,232,57,226,90,223,83,32,91,134,237,102,89,177,135,164,88,52,145,235,93,3,251,41,92,90,69,111,94,109,47,173,95,128,27,53,225,183,113,247,224,238,207,177,226,217,165,115,227,92,179,60,230,107,217,254,231,50,103,184,229,5,13,122,228,56,74,38,239,15,32,228,238,86,158,162,236,97,244,96,237,228,226,47,232,211,136,237,233,138,54,171,235,189,92,105,234,240,184,19,253,199,210,209,252,158,108,151,254,169,6,85,255,44,16,26,250,27,122,216,251,66,196,158,249,117,174,92,248,72,233,0,243,127,131,194,242,38,61,132,240,17,87,70,241,148,65,9,244,163,43,203,245,250,149,141,247,205,255,79,246,96,93,120,217,87,55,186,216,14,137,252,218,57,227,62,219,188,245,113,222,139,159,179,223,210,33,245,221,229,75,55,220,216,12,107,215,239,102,169,214,182,216,239,212,129,178,45,213,4,164,98,208,51,206,160,209,106,112,230,211,93,26,36,210,16,254,94,197,39,148,156,196,126,42,218,198,73,64,24,199,204,86,87,194,251,60,149,195,162,130,211,193,149,232,17,192,168,175,77,203,159,197,143,202,198,123,201,200,241,17,11,201,116,7,68,204,67,109,134,205,26,211,192,207,45,185,2,206,64,150,175,145,119,252,109,144,46,66,43,146,25,40,233,147,156,62,166,150,171,84,100,151,242,234,34,149,197,128,224,148,248,199,188,159,207,173,126,158,150,19,56,156,161,121,250,157,36,111,181,152,19,5,119,153,74,187,49,155,125,209,243,154,48,53,137,141,7,95,75,140,94,225,13,142,105,139,207,143,236,157,128,138,219,247,66,139,130,73,4,137,181,35,198,136,136,100,154,131,191,14,88,130,230,176,30,128,209,218,220,129,84,204,147,132,99,166,81,133,58,24,23,135,13,114,213,134,160,208,226,169,151,186,32,168,206,4,102,170,249,110,164,171,124,120,235,174,75,18,41,175,18,172,111,173,37,198,173,172,24,129,241,167,47,235,51,166,118,85,117,164,65,63,183,165,196,41,248,160,243,67,58,161,170,253,124,163,157,151,190,162,208,115,196,181,231,25,6,180,190,167,64,182,137,205,130,183,12,219,205,178,59,177,15,179,98,15,73,177,85,101,139,176,104,34,215,187,95,72,21,186,6,246,83,184,49,156,145,185,180,138,222,188,131,224,28,189,218,94,90,191,237,52,152,190,0,0,0,0,101,103,188,184,139,200,9,170,238,175,181,18,87,151,98,143,50,240,222,55,220,95,107,37,185,56,215,157,239,40,180,197,138,79,8,125,100,224,189,111,1,135,1,215,184,191,214,74,221,216,106,242,51,119,223,224,86,16,99,88,159,87,25,80,250,48,165,232,20,159,16,250,113,248,172,66,200,192,123,223,173,167,199,103,67,8,114,117,38,111,206,205,112,127,173,149,21,24,17,45,251,183,164,63,158,208,24,135,39,232,207,26,66,143,115,162,172,32,198,176,201,71,122,8,62,175,50,160,91,200,142,24,181,103,59,10,208,0,135,178,105,56,80,47,12,95,236,151,226,240,89,133,135,151,229,61,209,135,134,101,180,224,58,221,90,79,143,207,63,40,51,119,134,16,228,234,227,119,88,82,13,216,237,64,104,191,81,248,161,248,43,240,196,159,151,72,42,48,34,90,79,87,158,226,246,111,73,127,147,8,245,199,125,167,64,213,24,192,252,109,78,208,159,53,43,183,35,141,197,24,150,159,160,127,42,39,25,71,253,186,124,32,65,2,146,143,244,16,247,232,72,168,61,88,20,155,88,63,168,35,182,144,29,49,211,247,161,137,106,207,118,20,15,168,202,172,225,7,127,190,132,96,195,6,210,112,160,94,183,23,28,230,89,184,169,244,60,223,21,76,133,231,194,209,224,128,126,105,14,47,203,123,107,72,119,195,162,15,13,203,199,104,177,115,41,199,4,97,76,160,184,217,245,152,111,68,144,255,211,252,126,80,102,238,27,55,218,86,77,39,185,14,40,64,5,182,198,239,176,164,163,136,12,28,26,176,219,129,127,215,103,57,145,120,210,43,244,31,110,147,3,247,38,59,102,144,154,131,136,63,47,145,237,88,147,41,84,96,68,180,49,7,248,12,223,168,77,30,186,207,241,166,236,223,146,254,137,184,46,70,103,23,155,84,2,112,39,236,187,72,240,113,222,47,76,201,48,128,249,219,85,231,69,99,156,160,63,107,249,199,131,211,23,104,54,193,114,15,138,121,203,55,93,228,174,80,225,92,64,255,84,78,37,152,232,246,115,136,139,174,22,239,55,22,248,64,130,4,157,39,62,188,36,31,233,33,65,120,85,153,175,215,224,139,202,176,92,51,59,182,89,237,94,209,229,85,176,126,80,71,213,25,236,255,108,33,59,98,9,70,135,218,231,233,50,200,130,142,142,112,212,158,237,40,177,249,81,144,95,86,228,130,58,49,88,58,131,9,143,167,230,110,51,31,8,193,134,13,109,166,58,181,164,225,64,189,193,134,252,5,47,41,73,23,74,78,245,175,243,118,34,50,150,17,158,138,120,190,43,152,29,217,151,32,75,201,244,120,46,174,72,192,192,1,253,210,165,102,65,106,28,94,150,247,121,57,42,79,151,150,159,93,242,241,35,229,5,25,107,77,96,126,215,245,142,209,98,231,235,182,222,95,82,142,9,194,55,233,181,122,217,70,0,104,188,33,188,208,234,49,223,136,143,86,99,48,97,249,214,34,4,158,106,154,189,166,189,7,216,193,1,191,54,110,180,173,83,9,8,21,154,78,114,29,255,41,206,165,17,134,123,183,116,225,199,15,205,217,16,146,168,190,172,42,70,17,25,56,35,118,165,128,117,102,198,216,16,1,122,96,254,174,207,114,155,201,115,202,34,241,164,87,71,150,24,239,169,57,173,253,204,94,17,69,6,238,77,118,99,137,241,206,141,38,68,220,232,65,248,100,81,121,47,249,52,30,147,65,218,177,38,83,191,214,154,235,233,198,249,179,140,161,69,11,98,14,240,25,7,105,76,161,190,81,155,60,219,54,39,132,53,153,146,150,80,254,46,46,153,185,84,38,252,222,232,158,18,113,93,140,119,22,225,52,206,46,54,169,171,73,138,17,69,230,63,3,32,129,131,187,118,145,224,227,19,246,92,91,253,89,233,73,152,62,85,241,33,6,130,108,68,97,62,212,170,206,139,198,207,169,55,126,56,65,127,214,93,38,195,110,179,137,118,124,214,238,202,196,111,214,29,89,10,177,161,225,228,30,20,243,129,121,168,75,215,105,203,19,178,14,119,171,92,161,194,185,57,198,126,1,128,254,169,156,229,153,21,36,11,54,160,54,110,81,28,142,167,22,102,134,194,113,218,62,44,222,111,44,73,185,211,148,240,129,4,9,149,230,184,177,123,73,13,163,30,46,177,27,72,62,210,67,45,89,110,251,195,246,219,233,166,145,103,81,31,169,176,204,122,206,12,116,148,97,185,102,241,6,5,222,0,0,0,0,119,7,48,150,238,14,97,44,153,9,81,186,7,109,196,25,112,106,244,143,233,99,165,53,158,100,149,163,14,219,136,50,121,220,184,164,224,213,233,30,151,210,217,136,9,182,76,43,126,177,124,189,231,184,45,7,144,191,29,145,29,183,16,100,106,176,32,242,243,185,113,72,132,190,65,222,26,218,212,125,109,221,228,235,244,212,181,81,131,211,133,199,19,108,152,86,100,107,168,192,253,98,249,122,138,101,201,236,20,1,92,79,99,6,108,217,250,15,61,99,141,8,13,245,59,110,32,200,76,105,16,94,213,96,65,228,162,103,113,114,60,3,228,209,75,4,212,71,210,13,133,253,165,10,181,107,53,181,168,250,66,178,152,108,219,187,201,214,172,188,249,64,50,216,108,227,69,223,92,117,220,214,13,207,171,209,61,89,38,217,48,172,81,222,0,58,200,215,81,128,191,208,97,22,33,180,244,181,86,179,196,35,207,186,149,153,184,189,165,15,40,2,184,158,95,5,136,8,198,12,217,178,177,11,233,36,47,111,124,135,88,104,76,17,193,97,29,171,182,102,45,61,118,220,65,144,1,219,113,6,152,210,32,188,239,213,16,42,113,177,133,137,6,182,181,31,159,191,228,165,232,184,212,51,120,7,201,162,15,0,249,52,150,9,168,142,225,14,152,24,127,106,13,187,8,109,61,45,145,100,108,151,230,99,92,1,107,107,81,244,28,108,97,98,133,101,48,216,242,98,0,78,108,6,149,237,27,1,165,123,130,8,244,193,245,15,196,87,101,176,217,198,18,183,233,80,139,190,184,234,252,185,136,124,98,221,29,223,21,218,45,73,140,211,124,243,251,212,76,101,77,178,97,88,58,181,81,206,163,188,0,116,212,187,48,226,74,223,165,65,61,216,149,215,164,209,196,109,211,214,244,251,67,105,233,106,52,110,217,252,173,103,136,70,218,96,184,208,68,4,45,115,51,3,29,229,170,10,76,95,221,13,124,201,80,5,113,60,39,2,65,170,190,11,16,16,201,12,32,134,87,104,181,37,32,111,133,179,185,102,212,9,206,97,228,159,94,222,249,14,41,217,201,152,176,208,152,34,199,215,168,180,89,179,61,23,46,180,13,129,183,189,92,59,192,186,108,173,237,184,131,32,154,191,179,182,3,182,226,12,116,177,210,154,234,213,71,57,157,210,119,175,4,219,38,21,115,220,22,131,227,99,11,18,148,100,59,132,13,109,106,62,122,106,90,168,228,14,207,11,147,9,255,157,10,0,174,39,125,7,158,177,240,15,147,68,135,8,163,210,30,1,242,104,105,6,194,254,247,98,87,93,128,101,103,203,25,108,54,113,110,107,6,231,254,212,27,118,137,211,43,224,16,218,122,90,103,221,74,204,249,185,223,111,142,190,239,249,23,183,190,67,96,176,142,213,214,214,163,232,161,209,147,126,56,216,194,196,79,223,242,82,209,187,103,241,166,188,87,103,63,181,6,221,72,178,54,75,216,13,43,218,175,10,27,76,54,3,74,246,65,4,122,96,223,96,239,195,168,103,223,85,49,110,142,239,70,105,190,121,203,97,179,140,188,102,131,26,37,111,210,160,82,104,226,54,204,12,119,149,187,11,71,3,34,2,22,185,85,5,38,47,197,186,59,190,178,189,11,40,43,180,90,146,92,179,106,4,194,215,255,167,181,208,207,49,44,217,158,139,91,222,174,29,155,100,194,176,236,99,242,38,117,106,163,156,2,109,147,10,156,9,6,169,235,14,54,63,114,7,103,133,5,0,87,19,149,191,74,130,226,184,122,20,123,177,43,174,12,182,27,56,146,210,142,155,229,213,190,13,124,220,239,183,11,219,223,33,134,211,210,212,241,212,226,66,104,221,179,248,31,218,131,110,129,190,22,205,246,185,38,91,111,176,119,225,24,183,71,119,136,8,90,230,255,15,106,112,102,6,59,202,17,1,11,92,143,101,158,255,248,98,174,105,97,107,255,211,22,108,207,69,160,10,226,120,215,13,210,238,78,4,131,84,57,3,179,194,167,103,38,97,208,96,22,247,73,105,71,77,62,110,119,219,174,209,106,74,217,214,90,220,64,223,11,102,55,216,59,240,169,188,174,83,222,187,158,197,71,178,207,127,48,181,255,233,189,189,242,28,202,186,194,138,83,179,147,48,36,180,163,166,186,208,54,5,205,215,6,147,84,222,87,41,35,217,103,191,179,102,122,46,196,97,74,184,93,104,27,2,42,111,43,148,180,11,190,55,195,12,142,161,90,5,223,27,45,2,239,141,0,0,0,0,25,27,49,65,50,54,98,130,43,45,83,195,100,108,197,4,125,119,244,69,86,90,167,134,79,65,150,199,200,217,138,8,209,194,187,73,250,239,232,138,227,244,217,203,172,181,79,12,181,174,126,77,158,131,45,142,135,152,28,207,74,194,18,81,83,217,35,16,120,244,112,211,97,239,65,146,46,174,215,85,55,181,230,20,28,152,181,215,5,131,132,150,130,27,152,89,155,0,169,24,176,45,250,219,169,54,203,154,230,119,93,93,255,108,108,28,212,65,63,223,205,90,14,158,149,132,36,162,140,159,21,227,167,178,70,32,190,169,119,97,241,232,225,166,232,243,208,231,195,222,131,36,218,197,178,101,93,93,174,170,68,70,159,235,111,107,204,40,118,112,253,105,57,49,107,174,32,42,90,239,11,7,9,44,18,28,56,109,223,70,54,243,198,93,7,178,237,112,84,113,244,107,101,48,187,42,243,247,162,49,194,182,137,28,145,117,144,7,160,52,23,159,188,251,14,132,141,186,37,169,222,121,60,178,239,56,115,243,121,255,106,232,72,190,65,197,27,125,88,222,42,60,240,121,79,5,233,98,126,68,194,79,45,135,219,84,28,198,148,21,138,1,141,14,187,64,166,35,232,131,191,56,217,194,56,160,197,13,33,187,244,76,10,150,167,143,19,141,150,206,92,204,0,9,69,215,49,72,110,250,98,139,119,225,83,202,186,187,93,84,163,160,108,21,136,141,63,214,145,150,14,151,222,215,152,80,199,204,169,17,236,225,250,210,245,250,203,147,114,98,215,92,107,121,230,29,64,84,181,222,89,79,132,159,22,14,18,88,15,21,35,25,36,56,112,218,61,35,65,155,101,253,107,167,124,230,90,230,87,203,9,37,78,208,56,100,1,145,174,163,24,138,159,226,51,167,204,33,42,188,253,96,173,36,225,175,180,63,208,238,159,18,131,45,134,9,178,108,201,72,36,171,208,83,21,234,251,126,70,41,226,101,119,104,47,63,121,246,54,36,72,183,29,9,27,116,4,18,42,53,75,83,188,242,82,72,141,179,121,101,222,112,96,126,239,49,231,230,243,254,254,253,194,191,213,208,145,124,204,203,160,61,131,138,54,250,154,145,7,187,177,188,84,120,168,167,101,57,59,131,152,75,34,152,169,10,9,181,250,201,16,174,203,136,95,239,93,79,70,244,108,14,109,217,63,205,116,194,14,140,243,90,18,67,234,65,35,2,193,108,112,193,216,119,65,128,151,54,215,71,142,45,230,6,165,0,181,197,188,27,132,132,113,65,138,26,104,90,187,91,67,119,232,152,90,108,217,217,21,45,79,30,12,54,126,95,39,27,45,156,62,0,28,221,185,152,0,18,160,131,49,83,139,174,98,144,146,181,83,209,221,244,197,22,196,239,244,87,239,194,167,148,246,217,150,213,174,7,188,233,183,28,141,168,156,49,222,107,133,42,239,42,202,107,121,237,211,112,72,172,248,93,27,111,225,70,42,46,102,222,54,225,127,197,7,160,84,232,84,99,77,243,101,34,2,178,243,229,27,169,194,164,48,132,145,103,41,159,160,38,228,197,174,184,253,222,159,249,214,243,204,58,207,232,253,123,128,169,107,188,153,178,90,253,178,159,9,62,171,132,56,127,44,28,36,176,53,7,21,241,30,42,70,50,7,49,119,115,72,112,225,180,81,107,208,245,122,70,131,54,99,93,178,119,203,250,215,78,210,225,230,15,249,204,181,204,224,215,132,141,175,150,18,74,182,141,35,11,157,160,112,200,132,187,65,137,3,35,93,70,26,56,108,7,49,21,63,196,40,14,14,133,103,79,152,66,126,84,169,3,85,121,250,192,76,98,203,129,129,56,197,31,152,35,244,94,179,14,167,157,170,21,150,220,229,84,0,27,252,79,49,90,215,98,98,153,206,121,83,216,73,225,79,23,80,250,126,86,123,215,45,149,98,204,28,212,45,141,138,19,52,150,187,82,31,187,232,145,6,160,217,208,94,126,243,236,71,101,194,173,108,72,145,110,117,83,160,47,58,18,54,232,35,9,7,169,8,36,84,106,17,63,101,43,150,167,121,228,143,188,72,165,164,145,27,102,189,138,42,39,242,203,188,224,235,208,141,161,192,253,222,98,217,230,239,35,20,188,225,189,13,167,208,252,38,138,131,63,63,145,178,126,112,208,36,185,105,203,21,248,66,230,70,59,91,253,119,122,220,101,107,181,197,126,90,244,238,83,9,55,247,72,56,118,184,9,174,177,161,18,159,240,138,63,204,51,147,36,253,114,0,0,0,0,1,194,106,55,3,132,212,110,2,70,190,89,7,9,168,220,6,203,194,235,4,141,124,178,5,79,22,133,14,19,81,184,15,209,59,143,13,151,133,214,12,85,239,225,9,26,249,100,8,216,147,83,10,158,45,10,11,92,71,61,28,38,163,112,29,228,201,71,31,162,119,30,30,96,29,41,27,47,11,172,26,237,97,155,24,171,223,194,25,105,181,245,18,53,242,200,19,247,152,255,17,177,38,166,16,115,76,145,21,60,90,20,20,254,48,35,22,184,142,122,23,122,228,77,56,77,70,224,57,143,44,215,59,201,146,142,58,11,248,185,63,68,238,60,62,134,132,11,60,192,58,82,61,2,80,101,54,94,23,88,55,156,125,111,53,218,195,54,52,24,169,1,49,87,191,132,48,149,213,179,50,211,107,234,51,17,1,221,36,107,229,144,37,169,143,167,39,239,49,254,38,45,91,201,35,98,77,76,34,160,39,123,32,230,153,34,33,36,243,21,42,120,180,40,43,186,222,31,41,252,96,70,40,62,10,113,45,113,28,244,44,179,118,195,46,245,200,154,47,55,162,173,112,154,141,192,113,88,231,247,115,30,89,174,114,220,51,153,119,147,37,28,118,81,79,43,116,23,241,114,117,213,155,69,126,137,220,120,127,75,182,79,125,13,8,22,124,207,98,33,121,128,116,164,120,66,30,147,122,4,160,202,123,198,202,253,108,188,46,176,109,126,68,135,111,56,250,222,110,250,144,233,107,181,134,108,106,119,236,91,104,49,82,2,105,243,56,53,98,175,127,8,99,109,21,63,97,43,171,102,96,233,193,81,101,166,215,212,100,100,189,227,102,34,3,186,103,224,105,141,72,215,203,32,73,21,161,23,75,83,31,78,74,145,117,121,79,222,99,252,78,28,9,203,76,90,183,146,77,152,221,165,70,196,154,152,71,6,240,175,69,64,78,246,68,130,36,193,65,205,50,68,64,15,88,115,66,73,230,42,67,139,140,29,84,241,104,80,85,51,2,103,87,117,188,62,86,183,214,9,83,248,192,140,82,58,170,187,80,124,20,226,81,190,126,213,90,226,57,232,91,32,83,223,89,102,237,134,88,164,135,177,93,235,145,52,92,41,251,3,94,111,69,90,95,173,47,109,225,53,27,128,224,247,113,183,226,177,207,238,227,115,165,217,230,60,179,92,231,254,217,107,229,184,103,50,228,122,13,5,239,38,74,56,238,228,32,15,236,162,158,86,237,96,244,97,232,47,226,228,233,237,136,211,235,171,54,138,234,105,92,189,253,19,184,240,252,209,210,199,254,151,108,158,255,85,6,169,250,26,16,44,251,216,122,27,249,158,196,66,248,92,174,117,243,0,233,72,242,194,131,127,240,132,61,38,241,70,87,17,244,9,65,148,245,203,43,163,247,141,149,250,246,79,255,205,217,120,93,96,216,186,55,87,218,252,137,14,219,62,227,57,222,113,245,188,223,179,159,139,221,245,33,210,220,55,75,229,215,107,12,216,214,169,102,239,212,239,216,182,213,45,178,129,208,98,164,4,209,160,206,51,211,230,112,106,210,36,26,93,197,94,254,16,196,156,148,39,198,218,42,126,199,24,64,73,194,87,86,204,195,149,60,251,193,211,130,162,192,17,232,149,203,77,175,168,202,143,197,159,200,201,123,198,201,11,17,241,204,68,7,116,205,134,109,67,207,192,211,26,206,2,185,45,145,175,150,64,144,109,252,119,146,43,66,46,147,233,40,25,150,166,62,156,151,100,84,171,149,34,234,242,148,224,128,197,159,188,199,248,158,126,173,207,156,56,19,150,157,250,121,161,152,181,111,36,153,119,5,19,155,49,187,74,154,243,209,125,141,137,53,48,140,75,95,7,142,13,225,94,143,207,139,105,138,128,157,236,139,66,247,219,137,4,73,130,136,198,35,181,131,154,100,136,130,88,14,191,128,30,176,230,129,220,218,209,132,147,204,84,133,81,166,99,135,23,24,58,134,213,114,13,169,226,208,160,168,32,186,151,170,102,4,206,171,164,110,249,174,235,120,124,175,41,18,75,173,111,172,18,172,173,198,37,167,241,129,24,166,51,235,47,164,117,85,118,165,183,63,65,160,248,41,196,161,58,67,243,163,124,253,170,162,190,151,157,181,196,115,208,180,6,25,231,182,64,167,190,183,130,205,137,178,205,219,12,179,15,177,59,177,73,15,98,176,139,101,85,187,215,34,104,186,21,72,95,184,83,246,6,185,145,156,49,188,222,138,180,189,28,224,131,191,90,94,218,190,152,52,237,0,0,0,0,184,188,103,101,170,9,200,139,18,181,175,238,143,98,151,87,55,222,240,50,37,107,95,220,157,215,56,185,197,180,40,239,125,8,79,138,111,189,224,100,215,1,135,1,74,214,191,184,242,106,216,221,224,223,119,51,88,99,16,86,80,25,87,159,232,165,48,250,250,16,159,20,66,172,248,113,223,123,192,200,103,199,167,173,117,114,8,67,205,206,111,38,149,173,127,112,45,17,24,21,63,164,183,251,135,24,208,158,26,207,232,39,162,115,143,66,176,198,32,172,8,122,71,201,160,50,175,62,24,142,200,91,10,59,103,181,178,135,0,208,47,80,56,105,151,236,95,12,133,89,240,226,61,229,151,135,101,134,135,209,221,58,224,180,207,143,79,90,119,51,40,63,234,228,16,134,82,88,119,227,64,237,216,13,248,81,191,104,240,43,248,161,72,151,159,196,90,34,48,42,226,158,87,79,127,73,111,246,199,245,8,147,213,64,167,125,109,252,192,24,53,159,208,78,141,35,183,43,159,150,24,197,39,42,127,160,186,253,71,25,2,65,32,124,16,244,143,146,168,72,232,247,155,20,88,61,35,168,63,88,49,29,144,182,137,161,247,211,20,118,207,106,172,202,168,15,190,127,7,225,6,195,96,132,94,160,112,210,230,28,23,183,244,169,184,89,76,21,223,60,209,194,231,133,105,126,128,224,123,203,47,14,195,119,72,107,203,13,15,162,115,177,104,199,97,4,199,41,217,184,160,76,68,111,152,245,252,211,255,144,238,102,80,126,86,218,55,27,14,185,39,77,182,5,64,40,164,176,239,198,28,12,136,163,129,219,176,26,57,103,215,127,43,210,120,145,147,110,31,244,59,38,247,3,131,154,144,102,145,47,63,136,41,147,88,237,180,68,96,84,12,248,7,49,30,77,168,223,166,241,207,186,254,146,223,236,70,46,184,137,84,155,23,103,236,39,112,2,113,240,72,187,201,76,47,222,219,249,128,48,99,69,231,85,107,63,160,156,211,131,199,249,193,54,104,23,121,138,15,114,228,93,55,203,92,225,80,174,78,84,255,64,246,232,152,37,174,139,136,115,22,55,239,22,4,130,64,248,188,62,39,157,33,233,31,36,153,85,120,65,139,224,215,175,51,92,176,202,237,89,182,59,85,229,209,94,71,80,126,176,255,236,25,213,98,59,33,108,218,135,70,9,200,50,233,231,112,142,142,130,40,237,158,212,144,81,249,177,130,228,86,95,58,88,49,58,167,143,9,131,31,51,110,230,13,134,193,8,181,58,166,109,189,64,225,164,5,252,134,193,23,73,41,47,175,245,78,74,50,34,118,243,138,158,17,150,152,43,190,120,32,151,217,29,120,244,201,75,192,72,174,46,210,253,1,192,106,65,102,165,247,150,94,28,79,42,57,121,93,159,150,151,229,35,241,242,77,107,25,5,245,215,126,96,231,98,209,142,95,222,182,235,194,9,142,82,122,181,233,55,104,0,70,217,208,188,33,188,136,223,49,234,48,99,86,143,34,214,249,97,154,106,158,4,7,189,166,189,191,1,193,216,173,180,110,54,21,8,9,83,29,114,78,154,165,206,41,255,183,123,134,17,15,199,225,116,146,16,217,205,42,172,190,168,56,25,17,70,128,165,118,35,216,198,102,117,96,122,1,16,114,207,174,254,202,115,201,155,87,164,241,34,239,24,150,71,253,173,57,169,69,17,94,204,118,77,238,6,206,241,137,99,220,68,38,141,100,248,65,232,249,47,121,81,65,147,30,52,83,38,177,218,235,154,214,191,179,249,198,233,11,69,161,140,25,240,14,98,161,76,105,7,60,155,81,190,132,39,54,219,150,146,153,53,46,46,254,80,38,84,185,153,158,232,222,252,140,93,113,18,52,225,22,119,169,54,46,206,17,138,73,171,3,63,230,69,187,131,129,32,227,224,145,118,91,92,246,19,73,233,89,253,241,85,62,152,108,130,6,33,212,62,97,68,198,139,206,170,126,55,169,207,214,127,65,56,110,195,38,93,124,118,137,179,196,202,238,214,89,29,214,111,225,161,177,10,243,20,30,228,75,168,121,129,19,203,105,215,171,119,14,178,185,194,161,92,1,126,198,57,156,169,254,128,36,21,153,229,54,160,54,11,142,28,81,110,134,102,22,167,62,218,113,194,44,111,222,44,148,211,185,73,9,4,129,240,177,184,230,149,163,13,73,123,27,177,46,30,67,210,62,72,251,110,89,45,233,219,246,195,81,103,145,166,204,176,169,31,116,12,206,122,102,185,97,148,222,5,6,241,0,0,0,0,0,0,0,0,1,0,0,0,4,0,4,0,8,0,4,0,2,0,0,0,4,0,5,0,16,0,8,0,2,0,0,0,4,0,6,0,32,0,32,0,2,0,0,0,4,0,4,0,16,0,16,0,3,0,0,0,8,0,16,0,32,0,32,0,3,0,0,0,8,0,16,0,128,0,128,0,3,0,0,0,8,0,32,0,128,0,0,1,3,0,0,0,32,0,128,0,2,1,0,4,3,0,0,0,32,0,2,1,2,1,0,16,3,0,0,0,66,49,0,0,128,33,0,0,1,1,0,0,30,1,0,0,15,0,0,0,202,48,0,0,8,33,0,0,0,0,0,0,30,0,0,0,15,0,0,0,0,0,0,0,188,32,0,0,0,0,0,0,19,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,28,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,192,0,0,0,0,1,0,0,128,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,162,58,0,0,178,58,0,0,73,103,0,0,189,58,0,0,200,58,0,0,213,58,0,0,224,58,0,0,244,58,0,0,1,59,0,0,73,103,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,127,0,0,0,127,0,0,0,127,0,0,0,127,0,0,0,127,0,0,0,127,0,0,0,127,0,0,0,127,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,31,0,0,0,31,0,0,0,15,0,0,0,15,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,76,68,0,0,0,0,0,0,11,0,0,0,10,0,0,0,76,68,0,0,80,0,0,0,12,0,0,0,10,0,0,0,76,68,0,0,80,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,0,0,0,0,22,0,0,0,15,0,0,0,17,0,0,0,28,0,0,0,25,0,0,0,29,0,0,0,24,0,0,0,30,0,0,0,12,0,0,0,27,0,0,0,26,0,0,0,31,0,0,0,13,0,0,0,18,0,0,0,19,0,0,0,32,0,0,0,11,0,0,0,20,0,0,0,23,0,0,0,22,0,0,0,21,0,0,0,16,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,14,0,0,0,37,0,0,0,38,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,170,85,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,172,37,0,0,5,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,30,0,0,0,82,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,30,0,0,0,90,103,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,95,112,137,0,255,9,47,15,16,0,17,0,18,0,0,0,8,0,7,0,9,0,6,0,10,0,5,0,11,0,4,0,12,0,3,0,13,0,2,0,14,0,1,0,15,0,96,7,0,0,0,8,80,0,0,8,16,0,20,8,115,0,18,7,31,0,0,8,112,0,0,8,48,0,0,9,192,0,16,7,10,0,0,8,96,0,0,8,32,0,0,9,160,0,0,8,0,0,0,8,128,0,0,8,64,0,0,9,224,0,16,7,6,0,0,8,88,0,0,8,24,0,0,9,144,0,19,7,59,0,0,8,120,0,0,8,56,0,0,9,208,0,17,7,17,0,0,8,104,0,0,8,40,0,0,9,176,0,0,8,8,0,0,8,136,0,0,8,72,0,0,9,240,0,16,7,4,0,0,8,84,0,0,8,20,0,21,8,227,0,19,7,43,0,0,8,116,0,0,8,52,0,0,9,200,0,17,7,13,0,0,8,100,0,0,8,36,0,0,9,168,0,0,8,4,0,0,8,132,0,0,8], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([68,0,0,9,232,0,16,7,8,0,0,8,92,0,0,8,28,0,0,9,152,0,20,7,83,0,0,8,124,0,0,8,60,0,0,9,216,0,18,7,23,0,0,8,108,0,0,8,44,0,0,9,184,0,0,8,12,0,0,8,140,0,0,8,76,0,0,9,248,0,16,7,3,0,0,8,82,0,0,8,18,0,21,8,163,0,19,7,35,0,0,8,114,0,0,8,50,0,0,9,196,0,17,7,11,0,0,8,98,0,0,8,34,0,0,9,164,0,0,8,2,0,0,8,130,0,0,8,66,0,0,9,228,0,16,7,7,0,0,8,90,0,0,8,26,0,0,9,148,0,20,7,67,0,0,8,122,0,0,8,58,0,0,9,212,0,18,7,19,0,0,8,106,0,0,8,42,0,0,9,180,0,0,8,10,0,0,8,138,0,0,8,74,0,0,9,244,0,16,7,5,0,0,8,86,0,0,8,22,0,64,8,0,0,19,7,51,0,0,8,118,0,0,8,54,0,0,9,204,0,17,7,15,0,0,8,102,0,0,8,38,0,0,9,172,0,0,8,6,0,0,8,134,0,0,8,70,0,0,9,236,0,16,7,9,0,0,8,94,0,0,8,30,0,0,9,156,0,20,7,99,0,0,8,126,0,0,8,62,0,0,9,220,0,18,7,27,0,0,8,110,0,0,8,46,0,0,9,188,0,0,8,14,0,0,8,142,0,0,8,78,0,0,9,252,0,96,7,0,0,0,8,81,0,0,8,17,0,21,8,131,0,18,7,31,0,0,8,113,0,0,8,49,0,0,9,194,0,16,7,10,0,0,8,97,0,0,8,33,0,0,9,162,0,0,8,1,0,0,8,129,0,0,8,65,0,0,9,226,0,16,7,6,0,0,8,89,0,0,8,25,0,0,9,146,0,19,7,59,0,0,8,121,0,0,8,57,0,0,9,210,0,17,7,17,0,0,8,105,0,0,8,41,0,0,9,178,0,0,8,9,0,0,8,137,0,0,8,73,0,0,9,242,0,16,7,4,0,0,8,85,0,0,8,21,0,16,8,2,1,19,7,43,0,0,8,117,0,0,8,53,0,0,9,202,0,17,7,13,0,0,8,101,0,0,8,37,0,0,9,170,0,0,8,5,0,0,8,133,0,0,8,69,0,0,9,234,0,16,7,8,0,0,8,93,0,0,8,29,0,0,9,154,0,20,7,83,0,0,8,125,0,0,8,61,0,0,9,218,0,18,7,23,0,0,8,109,0,0,8,45,0,0,9,186,0,0,8,13,0,0,8,141,0,0,8,77,0,0,9,250,0,16,7,3,0,0,8,83,0,0,8,19,0,21,8,195,0,19,7,35,0,0,8,115,0,0,8,51,0,0,9,198,0,17,7,11,0,0,8,99,0,0,8,35,0,0,9,166,0,0,8,3,0,0,8,131,0,0,8,67,0,0,9,230,0,16,7,7,0,0,8,91,0,0,8,27,0,0,9,150,0,20,7,67,0,0,8,123,0,0,8,59,0,0,9,214,0,18,7,19,0,0,8,107,0,0,8,43,0,0,9,182,0,0,8,11,0,0,8,139,0,0,8,75,0,0,9,246,0,16,7,5,0,0,8,87,0,0,8,23,0,64,8,0,0,19,7,51,0,0,8,119,0,0,8,55,0,0,9,206,0,17,7,15,0,0,8,103,0,0,8,39,0,0,9,174,0,0,8,7,0,0,8,135,0,0,8,71,0,0,9,238,0,16,7,9,0,0,8,95,0,0,8,31,0,0,9,158,0,20,7,99,0,0,8,127,0,0,8,63,0,0,9,222,0,18,7,27,0,0,8,111,0,0,8,47,0,0,9,190,0,0,8,15,0,0,8,143,0,0,8,79,0,0,9,254,0,96,7,0,0,0,8,80,0,0,8,16,0,20,8,115,0,18,7,31,0,0,8,112,0,0,8,48,0,0,9,193,0,16,7,10,0,0,8,96,0,0,8,32,0,0,9,161,0,0,8,0,0,0,8,128,0,0,8,64,0,0,9,225,0,16,7,6,0,0,8,88,0,0,8,24,0,0,9,145,0,19,7,59,0,0,8,120,0,0,8,56,0,0,9,209,0,17,7,17,0,0,8,104,0,0,8,40,0,0,9,177,0,0,8,8,0,0,8,136,0,0,8,72,0,0,9,241,0,16,7,4,0,0,8,84,0,0,8,20,0,21,8,227,0,19,7,43,0,0,8,116,0,0,8,52,0,0,9,201,0,17,7,13,0,0,8,100,0,0,8,36,0,0,9,169,0,0,8,4,0,0,8,132,0,0,8,68,0,0,9,233,0,16,7,8,0,0,8,92,0,0,8,28,0,0,9,153,0,20,7,83,0,0,8,124,0,0,8,60,0,0,9,217,0,18,7,23,0,0,8,108,0,0,8,44,0,0,9,185,0,0,8,12,0,0,8,140,0,0,8,76,0,0,9,249,0,16,7,3,0,0,8,82,0,0,8,18,0,21,8,163,0,19,7,35,0,0,8,114,0,0,8,50,0,0,9,197,0,17,7,11,0,0,8,98,0,0,8,34,0,0,9,165,0,0,8,2,0,0,8,130,0,0,8,66,0,0,9,229,0,16,7,7,0,0,8,90,0,0,8,26,0,0,9,149,0,20,7,67,0,0,8,122,0,0,8,58,0,0,9,213,0,18,7,19,0,0,8,106,0,0,8,42,0,0,9,181,0,0,8,10,0,0,8,138,0,0,8,74,0,0,9,245,0,16,7,5,0,0,8,86,0,0,8,22,0,64,8,0,0,19,7,51,0,0,8,118,0,0,8,54,0,0,9,205,0,17,7,15,0,0,8,102,0,0,8,38,0,0,9,173,0,0,8,6,0,0,8,134,0,0,8,70,0,0,9,237,0,16,7,9,0,0,8,94,0,0,8,30,0,0,9,157,0,20,7,99,0,0,8,126,0,0,8,62,0,0,9,221,0,18,7,27,0,0,8,110,0,0,8,46,0,0,9,189,0,0,8,14,0,0,8,142,0,0,8,78,0,0,9,253,0,96,7,0,0,0,8,81,0,0,8,17,0,21,8,131,0,18,7,31,0,0,8,113,0,0,8,49,0,0,9,195,0,16,7,10,0,0,8,97,0,0,8,33,0,0,9,163,0,0,8,1,0,0,8,129,0,0,8,65,0,0,9,227,0,16,7,6,0,0,8,89,0,0,8,25,0,0,9,147,0,19,7,59,0,0,8,121,0,0,8,57,0,0,9,211,0,17,7,17,0,0,8,105,0,0,8,41,0,0,9,179,0,0,8,9,0,0,8,137,0,0,8,73,0,0,9,243,0,16,7,4,0,0,8,85,0,0,8,21,0,16,8,2,1,19,7,43,0,0,8,117,0,0,8,53,0,0,9,203,0,17,7,13,0,0,8,101,0,0,8,37,0,0,9,171,0,0,8,5,0,0,8,133,0,0,8,69,0,0,9,235,0,16,7,8,0,0,8,93,0,0,8,29,0,0,9,155,0,20,7,83,0,0,8,125,0,0,8,61,0,0,9,219,0,18,7,23,0,0,8,109,0,0,8,45,0,0,9,187,0,0,8,13,0,0,8,141,0,0,8,77,0,0,9,251,0,16,7,3,0,0,8,83,0,0,8,19,0,21,8,195,0,19,7,35,0,0,8,115,0,0,8,51,0,0,9,199,0,17,7,11,0,0,8,99,0,0,8,35,0,0,9,167,0,0,8,3,0,0,8,131,0,0,8,67,0,0,9,231,0,16,7,7,0,0,8,91,0,0,8,27,0,0,9,151,0,20,7,67,0,0,8,123,0,0,8,59,0,0,9,215,0,18,7,19,0,0,8,107,0,0,8,43,0,0,9,183,0,0,8,11,0,0,8,139,0,0,8,75,0,0,9,247,0,16,7,5,0,0,8,87,0,0,8,23,0,64,8,0,0,19,7,51,0,0,8,119,0,0,8,55,0,0,9,207,0,17,7,15,0,0,8,103,0,0,8,39,0,0,9,175,0,0,8,7,0,0,8,135,0,0,8,71,0,0,9,239,0,16,7,9,0,0,8,95,0,0,8,31,0,0,9,159,0,20,7,99,0,0,8,127,0,0,8,63,0,0,9,223,0,18,7,27,0,0,8,111,0,0,8,47,0,0,9,191,0,0,8,15,0,0,8,143,0,0,8,79,0,0,9,255,0,16,5,1,0,23,5,1,1,19,5,17,0,27,5,1,16,17,5,5,0,25,5,1,4,21,5,65,0,29,5,1,64,16,5,3,0,24,5,1,2,20,5,33,0,28,5,1,32,18,5,9,0,26,5,1,8,22,5,129,0,64,5,0,0,16,5,2,0,23,5,129,1,19,5,25,0,27,5,1,24,17,5,7,0,25,5,1,6,21,5,97,0,29,5,1,96,16,5,4,0,24,5,1,3,20,5,49,0,28,5,1,48,18,5,13,0,26,5,1,12,22,5,193,0,64,5,0,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,13,0,15,0,17,0,19,0,23,0,27,0,31,0,35,0,43,0,51,0,59,0,67,0,83,0,99,0,115,0,131,0,163,0,195,0,227,0,2,1,0,0,0,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,17,0,17,0,17,0,17,0,18,0,18,0,18,0,18,0,19,0,19,0,19,0,19,0,20,0,20,0,20,0,20,0,21,0,21,0,21,0,21,0,16,0,192,0,202,0,1,0,2,0,3,0,4,0,5,0,7,0,9,0,13,0,17,0,25,0,33,0,49,0,65,0,97,0,129,0,193,0,1,1,129,1,1,2,1,3,1,4,1,6,1,8,1,12,1,16,1,24,1,32,1,48,1,64,1,96,0,0,0,0,16,0,16,0,16,0,16,0,17,0,17,0,18,0,18,0,19,0,19,0,20,0,20,0,21,0,21,0,22,0,22,0,23,0,23,0,24,0,24,0,25,0,25,0,26,0,26,0,27,0,27,0,28,0,28,0,29,0,29,0,64,0,64,0,0,0,5,0,16,0,5,0,8,0,5,0,24,0,5,0,4,0,5,0,20,0,5,0,12,0,5,0,28,0,5,0,2,0,5,0,18,0,5,0,10,0,5,0,26,0,5,0,6,0,5,0,22,0,5,0,14,0,5,0,30,0,5,0,1,0,5,0,17,0,5,0,9,0,5,0,25,0,5,0,5,0,5,0,21,0,5,0,13,0,5,0,29,0,5,0,3,0,5,0,19,0,5,0,11,0,5,0,27,0,5,0,7,0,5,0,23,0,5,0,12,0,8,0,140,0,8,0,76,0,8,0,204,0,8,0,44,0,8,0,172,0,8,0,108,0,8,0,236,0,8,0,28,0,8,0,156,0,8,0,92,0,8,0,220,0,8,0,60,0,8,0,188,0,8,0,124,0,8,0,252,0,8,0,2,0,8,0,130,0,8,0,66,0,8,0,194,0,8,0,34,0,8,0,162,0,8,0,98,0,8,0,226,0,8,0,18,0,8,0,146,0,8,0,82,0,8,0,210,0,8,0,50,0,8,0,178,0,8,0,114,0,8,0,242,0,8,0,10,0,8,0,138,0,8,0,74,0,8,0,202,0,8,0,42,0,8,0,170,0,8,0,106,0,8,0,234,0,8,0,26,0,8,0,154,0,8,0,90,0,8,0,218,0,8,0,58,0,8,0,186,0,8,0,122,0,8,0,250,0,8,0,6,0,8,0,134,0,8,0,70,0,8,0,198,0,8,0,38,0,8,0,166,0,8,0,102,0,8,0,230,0,8,0,22,0,8,0,150,0,8,0,86,0,8,0,214,0,8,0,54,0,8,0,182,0,8,0,118,0,8,0,246,0,8,0,14,0,8,0,142,0,8,0,78,0,8,0,206,0,8,0,46,0,8,0,174,0,8,0,110,0,8,0,238,0,8,0,30,0,8,0,158,0,8,0,94,0,8,0,222,0,8,0,62,0,8,0,190,0,8,0,126,0,8,0,254,0,8,0,1,0,8,0,129,0,8,0,65,0,8,0,193,0,8,0,33,0,8,0,161,0,8,0,97,0,8,0,225,0,8,0,17,0,8,0,145,0,8,0,81,0,8,0,209,0,8,0,49,0,8,0,177,0,8,0,113,0,8,0,241,0,8,0,9,0,8,0,137,0,8,0,73,0,8,0,201,0,8,0,41,0,8,0,169,0,8,0,105,0,8,0,233,0,8,0,25,0,8,0,153,0,8,0,89,0,8,0,217,0,8,0,57,0,8,0,185,0,8,0,121,0,8,0,249,0,8,0,5,0,8,0,133,0,8,0,69,0,8,0,197,0,8,0,37,0,8,0,165,0,8,0,101,0,8,0,229,0,8,0,21,0,8,0,149,0,8,0,85,0,8,0,213,0,8,0,53,0,8,0,181,0,8,0,117,0,8,0,245,0,8,0,13,0,8,0,141,0,8,0,77,0,8,0,205,0,8,0,45,0,8,0,173,0,8,0,109,0,8,0,237,0,8,0,29,0,8,0,157,0,8,0,93,0,8,0,221,0,8,0,61,0,8,0,189,0,8,0,125,0,8,0,253,0,8,0,19,0,9,0,19,1,9,0,147,0,9,0,147,1,9,0,83,0,9,0,83,1,9,0,211,0,9,0,211,1,9,0,51,0,9,0,51,1,9,0,179,0,9,0,179,1,9,0,115,0,9,0,115,1,9,0,243,0,9,0,243,1,9,0,11,0,9,0,11,1,9,0,139,0,9,0,139,1,9,0,75,0,9,0,75,1,9,0,203,0,9,0,203,1,9,0,43,0,9,0,43,1,9,0,171,0,9,0,171,1,9,0,107,0,9,0,107,1,9,0,235,0,9,0,235,1,9,0,27,0,9,0,27,1,9,0,155,0,9,0,155,1,9,0,91,0,9,0,91,1,9,0,219,0,9,0,219,1,9,0,59,0,9,0,59,1,9,0,187,0,9,0,187,1,9,0,123,0,9,0,123,1,9,0,251,0,9,0,251,1,9,0,7,0,9,0,7,1,9,0,135,0,9,0,135,1,9,0,71,0,9,0,71,1,9,0,199,0,9,0,199,1,9,0,39,0,9,0,39,1,9,0,167,0,9,0,167,1,9,0,103,0,9,0,103,1,9,0,231,0,9,0,231,1,9,0,23,0,9,0,23,1,9,0,151,0,9,0,151,1,9,0,87,0,9,0,87,1,9,0,215,0,9,0,215,1,9,0,55,0,9,0,55,1,9,0,183,0,9,0,183,1,9,0,119,0,9,0,119,1,9,0,247,0,9,0,247,1,9,0,15,0,9,0,15,1,9,0,143,0,9,0,143,1,9,0,79,0,9,0,79,1,9,0,207,0,9,0,207,1,9,0,47,0,9,0,47,1,9,0,175,0,9,0,175,1,9,0,111,0,9,0,111,1,9,0,239,0,9,0,239,1,9,0,31,0,9,0,31,1,9,0,159,0,9,0,159,1,9,0,95,0,9,0,95,1,9,0,223,0,9,0,223,1,9,0,63,0,9,0,63,1,9,0,191,0,9,0,191,1,9,0,127,0,9,0,127,1,9,0,255,0,9,0,255,1,9,0,0,0,7,0,64,0,7,0,32,0,7,0,96,0,7,0,16,0,7,0,80,0,7,0,48,0,7,0,112,0,7,0,8,0,7,0,72,0,7,0,40,0,7,0,104,0,7,0,24,0,7,0,88,0,7,0,56,0,7,0,120,0,7,0,4,0,7,0,68,0,7,0,36,0,7,0,100,0,7,0,20,0,7,0,84,0,7,0,52,0,7,0,116,0,7,0,3,0,8,0,131,0,8,0,67,0,8,0,195,0,8,0,35,0,8,0,163,0,8,0,99,0,8,0,227,0,8,0,105,110,99,111,114,114,101,99,116,32,104,101,97,100,101,114,32,99,104,101,99,107,0,117,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,0,105,110,118,97,108,105,100,32,119,105,110,100,111,119,32,115,105,122,101,0,117,110,107,110,111,119,110,32,104,101,97,100,101,114,32,102,108,97,103,115,32,115,101,116,0,104,101,97,100,101,114,32,99,114,99,32,109,105,115,109,97,116,99,104,0,105,110,118,97,108,105,100,32,98,108,111,99,107,32,116,121,112,101,0,105,110,118,97,108,105,100,32,115,116,111,114,101,100,32,98,108,111,99,107,32,108,101,110,103,116,104,115,0,116,111,111,32,109,97,110,121,32,108,101,110,103,116,104,32,111,114,32,100,105,115,116,97,110,99,101,32,115,121,109,98,111,108,115,0,105,110,118,97,108,105,100,32,99,111,100,101,32,108,101,110,103,116,104,115,32,115,101,116,0,105,110,118,97,108,105,100,32,98,105,116,32,108,101,110,103,116,104,32,114,101,112,101,97,116,0,105,110,118,97,108,105,100,32,99,111,100,101,32,45,45,32,109,105,115,115,105,110,103,32,101,110,100,45,111,102,45,98,108,111,99,107,0,105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,115,32,115,101,116,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,115,32,115,101,116,0,105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,32,99,111,100,101,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,99,111,100,101,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,116,111,111,32,102,97,114,32,98,97,99,107,0,105,110,99,111,114,114,101,99,116,32,100,97,116,97,32,99,104,101,99,107,0,105,110,99,111,114,114,101,99,116,32,108,101,110,103,116,104,32,99,104,101,99,107,0,0,1,2,3,4,4,5,5,6,6,6,6,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,16,17,18,18,19,19,20,20,20,20,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,1,2,3,4,5,6,7,8,8,9,9,10,10,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15,110,101,101,100,32,100,105,99,116,105,111,110,97,114,121,0,115,116,114,101,97,109,32,101,110,100,0,102,105,108,101,32,101,114,114,111,114,0,115,116,114,101,97,109,32,101,114,114,111,114,0,100,97,116,97,32,101,114,114,111,114,0,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,0,98,117,102,102,101,114,32,101,114,114,111,114,0,105,110,99,111,109,112,97,116,105,98,108,101,32,118,101,114,115,105,111,110,0,122,108,105,98,32,105,110,102,108,97,116,101,73,110,105,116,32,101,114,114,111,114,58,32,37,115,10,0,122,108,105,98,32,105,110,102,108,97,116,101,32,101,114,114,111,114,58,32,37,115,10,0,66,108,111,99,107,32,67,82,67,51,50,32,102,97,105,108,117,114,101,10,0,99,114,97,109,47,99,114,97,109,95,105,111,46,99,0,66,122,105,112,50,32,99,111,109,112,114,101,115,115,105,111,110,32,105,115,32,110,111,116,32,99,111,109,112,105,108,101,100,32,105,110,116,111,32,116,104,105,115,32,118,101,114,115,105,111,110,46,10,80,108,101,97,115,101,32,114,101,98,117,105,108,100,32,97,110,100,32,116,114,121,32,97,103,97,105,110,46,10,0,76,122,109,97,32,99,111,109,112,114,101,115,115,105,111,110,32,105,115,32,110,111,116,32,99,111,109,112,105,108,101,100,32,105,110,116,111,32,116,104,105,115,32,118,101,114,115,105,111,110,46,10,80,108,101,97,115,101,32,114,101,98,117,105,108,100,32,97,110,100,32,116,114,121,32,97,103,97,105,110,46,10,0,70,73,76,69,95,72,69,65,68,69,82,0,67,79,77,80,82,69,83,83,73,79,78,95,72,69,65,68,69,82,0,77,65,80,80,69,68,95,83,76,73,67,69,0,85,78,77,65,80,80,69,68,95,83,76,73,67,69,0,67,79,82,69,0,85,110,97,98,108,101,32,116,111,32,102,105,110,100,32,114,101,102,32,110,97,109,101,32,39,37,115,39,10,0,83,81,0,83,78,0,77,53,0,114,45,62,114,101,102,95,105,100,91,105,100,93,45,62,99,111,117,110,116,32,62,61,32,48,0,99,114,97,109,95,114,101,102,95,100,101,99,114,95,108,111,99,107,101,100,0,114,45,62,114,101,102,95,105,100,91,105,100,93,45,62,99,111,117,110,116,32,61,61,32,48,0,101,45,62,99,111,117,110,116,32,61,61,32,48,0,99,114,97,109,95,114,101,102,95,108,111,97,100,0,114,45,62,108,97,115,116,45,62,99,111,117,110,116,32,62,32,48,0,98,103,122,102,95,117,115,101,101,107,40,41,32,111,110,32,114,101,102,101,114,101,110,99,101,32,102,105,108,101,0,98,103,122,102,95,114,101,97,100,40,41,32,111,110,32,114,101,102,101,114,101,110,99,101,32,102,105,108,101,0,77,97,108,102,111,114,109,101,100,32,114,101,102,101,114,101,110,99,101,32,102,105,108,101,63,10,0,85,110,97,98,108,101,32,116,111,32,108,111,97,100,32,46,103,122,105,32,105,110,100,101,120,32,39,37,115,46,103,122,105,39,10,0,78,111,32,114,101,102,101,114,101,110,99,101,32,102,111,117,110,100,32,102,111,114,32,105,100,32,37,100,10,0,70,97,105,108,101,100,32,116,111,32,112,111,112,117,108,97,116,101,32,114,101,102,101,114,101,110,99,101,32,102,111,114,32,105,100,32,37,100,10,0,115,116,97,114,116,32,62,61,32,49,0,99,114,97,109,95,103,101,116,95,114,101,102,0,82,69,70,95,80,65,84,72,0,82,69,70,95,67,65,67,72,69,0,99,114,97,109,95,112,111,112,117,108,97,116,101,95,114,101,102,32,111,110,32,102,100,32,37,112,44,32,105,100,32,37,100,10,0,104,116,116,112,58,47,47,119,119,119,46,101,98,105,46,97,99,46,117,107,58,56,48,47,101,110,97,47,99,114,97,109,47,109,100,53,47,37,115,0,37,115,37,115,47,104,116,115,45,114,101,102,0,37,115,37,115,47,104,116,115,45,114,101,102,47,37,37,50,115,47,37,37,50,115,47,37,37,115,0,80,111,112,117,108,97,116,105,110,103,32,108,111,99,97,108,32,99,97,99,104,101,58,32,37,115,10,0,81,117,101,114,121,105,110,103,32,114,101,102,32,37,115,10,0,85,82,0,102,105,108,101,58,0,67,114,101,97,116,105,110,103,32,114,101,102,101,114,101,110,99,101,32,99,97,99,104,101,32,100,105,114,101,99,116,111,114,121,32,37,115,10,84,104,105,115,32,109,97,121,32,98,101,99,111,109,101,32,108,97,114,103,101,59,32,115,101,101,32,116,104,101,32,115,97,109,116,111,111,108,115,40,49,41,32,109,97,110,117,97,108,32,112,97,103,101,32,82,69,70,95,67,65,67,72,69,32,100,105,115,99,117,115,115,105,111,110,10,0,87,114,105,116,105,110,103,32,99,97,99,104,101,32,102,105,108,101,32,39,37,115,39,10,0,37,115,46,116,109,112,95,37,100,95,37,117,95,37,117,0,119,120,0,91,69,58,58,37,115,93,32,109,105,115,109,97,116,99,104,105,110,103,32,109,100,53,115,117,109,32,102,111,114,32,100,111,119,110,108,111,97,100,101,100,32,114,101,102,101,114,101,110,99,101,46,10,0,99,114,97,109,95,112,111,112,117,108,97,116,101,95,114,101,102,0,115,116,114,99,109,112,40,114,45,62,110,97,109,101,44,32,102,100,45,62,104,101,97,100,101,114,45,62,114,101,102,91,105,93,46,110,97,109,101,41,32,61,61,32,48,0,115,97,110,105,116,105,115,101,95,83,81,95,108,105,110,101,115,0,87,65,82,78,73,78,71,58,32,72,101,97,100,101,114,32,64,83,81,32,108,101,110,103,116,104,32,109,105,115,109,97,116,99,104,32,102,111,114,32,114,101,102,32,37,115,44,32,37,100,32,118,115,32,37,100,10,0,46,102,97,105,0,37,46,42,115,46,102,97,105,0,88,68,71,95,67,65,67,72,69,95,72,79,77,69,0,72,79,77,69,0,47,46,99,97,99,104,101,0,84,77,80,68,73,82,0,84,69,77,80,0,47,116,109,112,0,67,111,110,116,97,105,110,101,114,32,104,101,97,100,101,114,32,67,82,67,51,50,32,102,97,105,108,117,114,101,10,0,85,110,101,120,112,101,99,116,101,100,32,98,108,111,99,107,32,111,102,32,116,121,112,101,32,37,115,10,0,83,108,105,99,101,32,100,111,101,115,32,110,111,116,32,105,110,99,108,117,100,101,32,97,110,121,32,100,97,116,97,32,98,108,111,99,107,115,46,10,0,67,82,65,77,32,118,101,114,115,105,111,110,32,110,117,109,98,101,114,32,109,105,115,109,97,116,99,104,10,69,120,112,101,99,116,101,100,32,49,46,120,44,32,50,46,120,32,111,114,32,51,46,120,44,32,103,111,116,32,37,100,46,37,100,10,0,65,67,71,84,78,0,37,100,46,37,100,0,77,97,108,102,111,114,109,101,100,32,118,101,114,115,105,111,110,32,115,116,114,105,110,103,32,37,115,10,0,85,110,107,110,111,119,110,32,118,101,114,115,105,111,110,32,115,116,114,105,110,103,59,32,117,115,101,32,49,46,48,44,32,50,46,48,44,32,50,46,49,32,111,114,32,51,46,48,10,0,85,110,107,110,111,119,110,32,67,82,65,77,32,111,112,116,105,111,110,32,99,111,100,101,32,37,100,10,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,1,2,4,8,15,15,15,15,15,15,15,15,15,0,15,15,15,1,14,2,13,15,15,4,11,15,15,12,15,3,15,15,15,15,5,6,8,15,7,9,15,10,15,15,15,15,15,15,15,1,14,2,13,15,15,4,11,15,15,12,15,3,15,15,15,15,5,6,8,15,7,9,15,10,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,67,82,65,77,0,66,65,73,1,0,66,67,70,4,0,66,67,70,2,0,67,83,73,1,0,84,66,73,1,0,35,35,102,105,108,101,102,111,114,109,97,116,61,86,67,70,0,64,72,68,9,0,64,82,71,9,0,64,80,71,9,0,64,72,68,9,86,78,58,0,0,103,0,0,98,0,99,0,0,98,0,103,0,0,0,91,69,58,58,37,115,93,32,102,97,105,108,32,116,111,32,111,112,101,110,32,102,105,108,101,32,39,37,115,39,10,0,104,116,115,95,111,112,101,110,95,102,111,114,109,97,116,0,104,116,115,95,104,111,112,101,110,0,49,0,100,101,99,111,100,101,95,109,100,0,68,69,67,79,68,69,95,77,68,0,118,101,114,98,111,115,105,116,121,0,86,69,82,66,79,83,73,84,89,0,115,101,113,115,95,112,101,114,95,115,108,105,99,101,0,83,69,81,83,95,80,69,82,95,83,76,73,67,69,0,115,108,105,99,101,115,95,112,101,114,95,99,111,110,116,97,105,110,101,114,0,83,76,73,67,69,83,95,80,69,82,95,67,79,78,84,65,73,78,69,82,0,101,109,98,101,100,95,114,101,102,0,69,77,66,69,68,95,82,69,70,0,110,111,95,114,101,102,0,78,79,95,82,69,70,0,105,103,110,111,114,101,95,109,100,53,0,73,71,78,79,82,69,95,77,68,53,0,117,115,101,95,98,122,105,112,50,0,85,83,69,95,66,90,73,80,50,0,117,115,101,95,114,97,110,115,0,85,83,69,95,82,65,78,83,0,117,115,101,95,108,122,109,97,0,85,83,69,95,76,90,77,65,0,114,101,102,101,114,101,110,99,101,0,82,69,70,69,82,69,78,67,69,0,118,101,114,115,105,111,110,0,86,69,82,83,73,79,78,0,109,117,108,116,105,95,115,101,113,95,112,101,114,95,115,108,105,99,101,0,77,85,76,84,73,95,83,69,81,95,80,69,82,95,83,76,73,67,69,0,110,116,104,114,101,97,100,115,0,78,84,72,82,69,65,68,83,0,114,101,113,117,105,114,101,100,95,102,105,101,108,100,115,0,82,69,81,85,73,82,69,68,95,70,73,69,76,68,83,0,85,110,107,110,111,119,110,32,111,112,116,105,111,110,32,39,37,115,39,10,0,45,0,98,117,105,108,116,45,105,110,0,100,97,116,97,0,102,105,108,101,0,91,87,58,58,108,111,97,100,95,104,102,105,108,101,95,112,108,117,103,105,110,115,93,32,105,110,105,116,105,97,108,105,115,97,116,105,111,110,32,102,97,105,108,101,100,32,102,111,114,32,112,108,117,103,105,110,32,34,37,115,34,58,32,37,100,10,0,91,77,58,58,108,111,97,100,95,104,102,105,108,101,95,112,108,117,103,105,110,115,93,32,108,111,97,100,101,100,32,34,37,115,34,10,0,102,105,108,101,58,47,47,108,111,99,97,108,104,111,115,116,47,0,102,105,108,101,58,47,47,47,0,100,97,116,97,58,0,91,87,58,58,98,97,109,95,104,100,114,95,114,101,97,100,93,32,98,103,122,102,95,99,104,101,99,107,95,69,79,70,0,91,87,58,58,37,115,93,32,69,79,70,32,109,97,114,107,101,114,32,105,115,32,97,98,115,101,110,116,46,32,84,104,101,32,105,110,112,117,116,32,105,115,32,112,114,111,98,97,98,108,121,32,116,114,117,110,99,97,116,101,100,46,10,0,98,97,109,95,104,100,114,95,114,101,97,100,0,66,65,77,1,0,91,69,58,58,37,115,93,32,105,110,118,97,108,105,100,32,66,65,77,32,98,105,110,97,114,121,32,104,101,97,100,101,114,10,0,91,69,58,58,37,115,93,32,111,117,116,32,111,102,32,109,101,109,111,114,121,10,0,91,69,58,58,37,115,93,32,101,114,114,111,114,32,114,101,97,100,105,110,103,32,66,71,90,70,32,115,116,114,101,97,109,10,0,91,69,58,58,37,115,93,32,116,114,117,110,99,97,116,101,100,32,98,97,109,32,104,101,97,100,101,114,10,0,64,83,81,9,0,83,78,58,0,76,78,58,0,91,87,58,58,37,115,93,32,100,117,112,108,105,99,97,116,101,100,32,115,101,113,117,101,110,99,101,32,39,37,115,39,10,0,115,97,109,95,104,100,114,95,112,97,114,115,101,0,64,83,81,0,9,0,64,83,81,9,83,78,58,37,115,9,76,78,58,37,115,10,0,77,73,68,78,83,72,80,61,88,66,0,91,87,58,58,37,115,93,32,101,109,112,116,121,32,113,117,101,114,121,32,110,97,109,101,10,0,115,97,109,95,112,97,114,115,101,49,0,91,69,58,58,37,115,93,32,113,117,101,114,121,32,110,97,109,101,32,116,111,111,32,108,111,110,103,10,0,91,69,58,58,37,115,93,32,109,105,115,115,105,110,103,32,83,65,77,32,104,101,97,100,101,114,10,0,91,87,58,58,37,115,93,32,117,114,101,99,111,103,110,105,122,101,100,32,114,101,102,101,114,101,110,99,101,32,110,97,109,101,59,32,116,114,101,97,116,101,100,32,97,115,32,117,110,109,97,112,112,101,100,10,0,91,87,58,58,37,115,93,32,109,97,112,112,101,100,32,113,117,101,114,121,32,99,97,110,110,111,116,32,104,97,118,101,32,122,101,114,111,32,99,111,111,114,100,105,110,97,116,101,59,32,116,114,101,97,116,101,100,32,97,115,32,117,110,109,97,112,112,101,100,10,0,91,69,58,58,37,115,93,32,110,111,32,67,73,71,65,82,32,111,112,101,114,97,116,105,111,110,115,10,0,91,69,58,58,37,115,93,32,116,111,111,32,109,97,110,121,32,67,73,71,65,82,32,111,112,101,114,97,116,105,111,110,115,10,0,91,69,58,58,37,115,93,32,117,110,114,101,99,111,103,110,105,122,101,100,32,67,73,71,65,82,32,111,112,101,114,97,116,111,114,10,0,91,87,58,58,37,115,93,32,109,97,112,112,101,100,32,113,117,101,114,121,32,109,117,115,116,32,104,97,118,101,32,97,32,67,73,71,65,82,59,32,116,114,101,97,116,101,100,32,97,115,32,117,110,109,97,112,112,101,100,10,0,61,0,91,87,58,58,37,115,93,32,117,114,101,99,111,103,110,105,122,101,100,32,109,97,116,101,32,114,101,102,101,114,101,110,99,101,32,110,97,109,101,59,32,116,114,101,97,116,101,100,32,97,115,32,117,110,109,97,112,112,101,100,10,0,91,87,58,58,37,115,93,32,109,97,112,112,101,100,32,109,97,116,101,32,99,97,110,110,111,116,32,104,97,118,101,32,122,101,114,111,32,99,111,111,114,100,105,110,97,116,101,59,32,116,114,101,97,116,101,100,32,97,115,32,117,110,109,97,112,112,101,100,10,0,91,69,58,58,37,115,93,32,67,73,71,65,82,32,97,110,100,32,113,117,101,114,121,32,115,101,113,117,101,110,99,101,32,97,114,101,32,111,102,32,100,105,102,102,101,114,101,110,116,32,108,101,110,103,116,104,10,0,91,69,58,58,37,115,93,32,83,69,81,32,97,110,100,32,81,85,65,76,32,97,114,101,32,111,102,32,100,105,102,102,101,114,101,110,116,32,108,101,110,103,116,104,10,0,91,69,58,58,37,115,93,32,105,110,99,111,109,112,108,101,116,101,32,97,117,120,32,102,105,101,108,100,10,0,91,69,58,58,37,115,93,32,105,110,99,111,109,112,108,101,116,101,32,66,45,116,121,112,101,100,32,97,117,120,32,102,105,101,108,100,10,0,91,69,58,58,37,115,93,32,117,110,114,101,99,111,103,110,105,122,101,100,32,116,121,112,101,10,0,91,87,58,58,37,115,93,32,112,97,114,115,101,32,101,114,114,111,114,32,97,116,32,108,105,110,101,32,37,108,108,100,10,0,115,97,109,95,114,101,97,100,49,0,99,111,109,112,114,101,115,115,66,111,117,110,100,40,66,71,90,70,95,66,76,79,67,75,95,83,73,90,69,41,32,60,32,66,71,90,70,95,77,65,88,95,66,76,79,67,75,95,83,73,90,69,0,98,103,122,102,46,99,0,98,103,122,102,95,111,112,101,110,0,49,46,50,46,49,48,0,91,69,58,58,37,115,93,32,100,101,102,108,97,116,101,73,110,105,116,50,32,102,97,105,108,101,100,58,32,37,115,10,0,98,103,122,102,95,119,114,105,116,101,95,105,110,105,116,0,91,69,58,58,37,115,93,32,37,115,10,0,105,110,118,97,108,105,100,32,112,97,114,97,109,101,116,101,114,47,99,111,109,112,114,101,115,115,105,111,110,32,108,101,118,101,108,44,32,111,114,32,105,110,99,111,110,115,105,115,116,101,110,116,32,115,116,114,101,97,109,32,115,116,97,116,101,0,105,110,118,97,108,105,100,32,111,114,32,105,110,99,111,109,112,108,101,116,101,32,73,79,0,111,117,116,32,111,102,32,109,101,109,111,114,121,0,112,114,111,103,114,101,115,115,32,116,101,109,112,111,114,97,114,105,108,121,32,110,111,116,32,112,111,115,115,105,98,108,101,44,32,111,114,32,105,110,40,41,32,47,32,111,117,116,40,41,32,114,101,116,117,114,110,101,100,32,97,110,32,101,114,114,111,114,0,122,108,105,98,32,118,101,114,115,105,111,110,32,109,105,115,109,97,116,99,104,0,91,37,100,93,32,117,110,107,110,111,119,110,0,66,67,2,0,0,98,103,122,102,95,104,111,112,101,110,0,98,103,122,102,95,99,111,109,112,114,101,115,115,0,91,69,58,58,37,115,93,32,100,101,102,108,97,116,101,32,102,97,105,108,101,100,58,32,37,115,10,0,91,69,58,58,37,115,93,32,100,101,102,108,97,116,101,69,110,100,32,102,97,105,108,101,100,58,32,37,115,10,0,31,139,8,4,0,0,0,0,0,255,6,0,66,67,2,0,0,0,0,91,69,58,58,37,115,93,32,105,110,102,108,97,116,101,73,110,105,116,50,32,102,97,105,108,101,100,58,32,37,115,0,98,103,122,102,95,114,101,97,100,95,98,108,111,99,107,0,91,69,58,58,37,115,93,32,105,110,102,108,97,116,101,95,98,108,111,99,107,32,101,114,114,111,114,32,37,100,10,0,91,69,58,58,37,115,93,32,105,110,102,108,97,116,101,73,110,105,116,50,32,102,97,105,108,101,100,58,32,37,115,10,0,105,110,102,108,97,116,101,95,98,108,111,99,107,0,91,69,58,58,37,115,93,32,105,110,102,108,97,116,101,32,102,97,105,108,101,100,58,32,37,115,10,0,91,69,58,58,37,115,93,32,105,110,102,108,97,116,101,69,110,100,32,102,97,105,108,101,100,58,32,37,115,10,0,67,111,117,108,100,32,110,111,116,32,104,115,101,101,107,32,116,111,32,37,108,108,100,10,0,105,110,102,108,97,116,101,95,103,122,105,112,95,98,108,111,99,107,0,102,112,45,62,105,115,95,119,114,105,116,101,32,61,61,32,48,0,98,103,122,102,95,114,101,97,100,0,91,69,58,58,37,115,93,32,98,103,122,102,95,114,101,97,100,95,98,108,111,99,107,32,101,114,114,111,114,32,37,100,32,97,102,116,101,114,32,37,122,100,32,111,102,32,37,122,117,32,98,121,116,101,115,10,0,91,69,58,58,37,115,93,32,98,103,122,102,95,99,111,109,112,114,101,115,115,32,101,114,114,111,114,32,37,100,10,0,119,111,114,107,101,114,95,97,117,120,0,91,69,58,58,37,115,93,32,100,101,102,108,97,116,101,95,98,108,111,99,107,32,101,114,114,111,114,32,37,100,10,0,98,103,122,102,95,102,108,117,115,104,0,91,69,58,58,37,115,93,32,104,119,114,105,116,101,32,101,114,114,111,114,32,40,119,114,111,110,103,32,115,105,122,101,41,10,0,91,69,58,58,37,115,93,32,99,111,109,112,114,101,115,115,105,111,110,32,101,114,114,111,114,32,37,100,10,0,100,101,102,108,97,116,101,95,98,108,111,99,107,0,98,103,122,102,95,103,122,105,112,95,99,111,109,112,114,101,115,115,0,109,116,45,62,99,117,114,114,32,60,32,109,116,45,62,110,95,98,108,107,115,0,109,116,95,113,117,101,117,101,0,98,103,122,102,95,99,108,111,115,101,0,91,69,58,58,37,115,93,32,102,105,108,101,32,119,114,105,116,101,32,101,114,114,111,114,10,0,91,69,58,58,37,115,93,32,105,110,102,108,97,116,101,69,110,100,47,100,101,102,108,97,116,101,69,110,100,32,102,97,105,108,101,100,58,32,37,115,10,0,31,139,8,4,0,0,0,0,0,255,6,0,66,67,2,0,27,0,3,0,0,0,0,0,0,0,0,0,0,102,112,45,62,105,100,120,0,98,103,122,102,95,105,110,100,101,120,95,100,117,109,112,0,91,69,58,58,37,115,93,32,69,114,114,111,114,32,111,112,101,110,105,110,103,32,37,115,37,115,32,58,32,37,115,10,0,91,69,58,58,37,115,93,32,69,114,114,111,114,32,111,110,32,99,108,111,115,105,110,103,32,37,115,37,115,32,58,32,37,115,10,0,91,69,58,58,37,115,93,32,69,114,114,111,114,32,119,114,105,116,105,110,103,32,116,111,32,37,115,37,115,32,58,32,37,115,10,0,114,98,0,98,103,122,102,95,105,110,100,101,120,95,108,111,97,100,0,91,69,58,58,37,115,93,32,69,114,114,111,114,32,114,101,97,100,105,110,103,32,37,115,37,115,32,58,32,37,115,10,0,102,112,45,62,98,108,111,99,107,95,111,102,102,115,101,116,32,60,61,32,102,112,45,62,98,108,111,99,107,95,108,101,110,103,116,104,0,98,103,122,102,95,117,115,101,101,107,0,72,101,97,100,101,114,32,108,105,110,101,32,100,111,101,115,32,110,111,116,32,115,116,97,114,116,32,119,105,116,104,32,39,64,39,0,72,101,97,100,101,114,32,108,105,110,101,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,97,32,116,119,111,32,99,104,97,114,97,99,116,101,114,32,107,101,121,0,112,45,62,110,101,120,116,32,61,61,32,116,0,99,114,97,109,47,115,97,109,95,104,101,97,100,101,114,46,99,0,115,97,109,95,104,100,114,95,97,100,100,95,108,105,110,101,115,0,77,105,115,115,105,110,103,32,116,97,98,0,77,97,108,102,111,114,109,101,100,32,107,101,121,58,118,97,108,117,101,32,112,97,105,114,0,37,115,32,97,116,32,108,105,110,101,32,37,100,58,32,34,37,46,42,115,34,10,0,72,68,0,117,110,115,111,114,116,101,100,0,113,117,101,114,121,110,97,109,101,0,99,111,111,114,100,105,110,97,116,101,0,117,110,107,110,111,119,110,0,85,110,107,110,111,119,110,32,115,111,114,116,32,111,114,100,101,114,32,102,105,101,108,100,58,32,37,115,10,0,77,97,108,102,111,114,109,101,100,32,101,120,116,101,114,110,97,108,32,104,101,97,100,101,114,32,115,116,114,101,97,109,10,0,77,97,108,102,111,114,109,101,100,32,98,101,116,97,32,104,101,97,100,101,114,32,115,116,114,101,97,109,10,0,77,97,108,102,111,114,109,101,100,32,115,117,98,101,120,112,32,104,101,97,100,101,114,32,115,116,114,101,97,109,10,0,77,97,108,102,111,114,109,101,100,32,103,97,109,109,97,32,104,101,97,100,101,114,32,115,116,114,101,97,109,10,0,77,97,108,102,111,114,109,101,100,32,104,117,102,102,109,97,110,32,104,101,97,100,101,114,32,115,116,114,101,97,109,10,0,77,97,108,102,111,114,109,101,100,32], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([98,121,116,101,95,97,114,114,97,121,95,108,101,110,32,104,101,97,100,101,114,32,115,116,114,101,97,109,10,0,85,110,105,109,112,108,101,109,101,110,116,101,100,32,99,111,100,101,99,32,111,102,32,116,121,112,101,32,37,115,10,0,78,85,76,76,0,69,88,84,69,82,78,65,76,0,71,79,76,79,77,66,0,72,85,70,70,77,65,78,0,66,89,84,69,95,65,82,82,65,89,95,76,69,78,0,66,89,84,69,95,65,82,82,65,89,95,83,84,79,80,0,66,69,84,65,0,83,85,66,69,88,80,0,71,79,76,79,77,66,95,82,73,67,69,0,71,65,77,77,65,0,98,121,116,101,95,97,114,114,97,121,95,115,116,111,112,32,99,111,100,101,99,32,111,110,108,121,32,115,117,112,112,111,114,116,115,32,66,89,84,69,95,65,82,82,65,89,115,46,10,0,77,97,108,102,111,114,109,101,100,32,98,121,116,101,95,97,114,114,97,121,95,115,116,111,112,32,104,101,97,100,101,114,32,115,116,114,101,97,109,10,0,85,110,107,110,111,119,110,32,99,111,100,101,99,32,116,121,112,101,32,37,100,10,0,67,71,84,78,65,71,84,78,65,67,84,78,65,67,71,78,65,67,71,84,0,77,73,0,85,73,0,80,73,0,82,78,0,65,80,0,82,82,0,83,77,0,84,68,0,85,110,114,101,99,111,103,110,105,115,101,100,32,112,114,101,115,101,114,118,97,116,105,111,110,32,109,97,112,32,107,101,121,32,37,99,37,99,10,0,85,110,114,101,99,111,103,110,105,115,101,100,32,107,101,121,58,32,37,46,50,115,10,0,85,78,75,78,79,87,78,0,78,111,32,114,101,102,101,114,101,110,99,101,32,115,112,101,99,105,102,105,101,100,32,97,110,100,32,110,111,32,101,109,98,101,100,100,101,100,32,114,101,102,101,114,101,110,99,101,32,105,115,32,97,118,97,105,108,97,98,108,101,46,10,0,83,108,105,99,101,32,115,116,97,114,116,115,32,98,101,102,111,114,101,32,98,97,115,101,32,49,46,10,0,85,110,97,98,108,101,32,116,111,32,102,101,116,99,104,32,114,101,102,101,114,101,110,99,101,32,35,37,100,32,37,100,46,46,37,100,10,0,83,108,105,99,101,32,101,110,100,115,32,98,101,121,111,110,100,32,114,101,102,101,114,101,110,99,101,32,101,110,100,46,10,0,69,82,82,79,82,58,32,109,100,53,115,117,109,32,114,101,102,101,114,101,110,99,101,32,109,105,115,109,97,116,99,104,32,102,111,114,32,114,101,102,32,37,100,32,112,111,115,32,37,100,46,46,37,100,10,0,67,82,65,77,58,32,37,115,10,0,82,101,102,32,58,32,37,115,10,0,82,101,113,117,101,115,116,101,100,32,117,110,107,110,111,119,110,32,114,101,102,101,114,101,110,99,101,32,73,68,32,37,100,10,0,82,101,97,100,32,104,97,115,32,110,101,103,97,116,105,118,101,32,108,101,110,103,116,104,10,0,82,101,97,100,32,104,97,115,32,97,108,105,103,110,109,101,110,116,32,112,111,115,105,116,105,111,110,32,37,100,32,98,117,116,32,110,111,32,117,110,109,97,112,112,101,100,32,102,108,97,103,10,0,77,97,116,101,32,108,105,110,101,32,111,117,116,32,111,102,32,98,111,117,110,100,115,58,32,37,100,32,118,115,32,91,48,44,32,37,100,93,10,0,77,68,90,0,69,114,114,111,114,58,32,102,101,97,116,117,114,101,32,112,111,115,105,116,105,111,110,32,37,100,32,98,101,102,111,114,101,32,115,116,97,114,116,32,111,102,32,114,101,97,100,46,10,0,82,101,102,32,112,111,115,32,111,117,116,115,105,100,101,32,111,102,32,114,101,102,32,115,101,113,117,101,110,99,101,32,98,111,117,110,100,97,114,121,10,0,69,114,114,111,114,58,32,85,110,107,110,111,119,110,32,102,101,97,116,117,114,101,32,99,111,100,101,32,39,37,99,39,10,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,0,70,97,105,108,117,114,101,32,116,111,32,100,101,99,111,100,101,32,115,108,105,99,101,10,0,116,95,112,111,111,108,95,110,101,120,116,95,114,101,115,117,108,116,32,102,97,105,108,117,114,101,10,0,63,0,42,0,99,114,97,109,47,114,65,78,83,95,115,116,97,116,105,99,46,99,0,46,47,99,114,97,109,47,114,65,78,83,95,98,121,116,101,46,104,0,120,32,60,32,84,79,84,70,82,69,81,0,114,97,110,115,95,117,110,99,111,109,112,114,101,115,115,95,79,48,0,115,116,97,114,116,32,60,61,32,40,49,32,60,60,32,49,54,41,0,82,97,110,115,68,101,99,83,121,109,98,111,108,73,110,105,116,0,102,114,101,113,32,60,61,32,40,49,32,60,60,32,49,54,41,32,45,32,115,116,97,114,116,0,120,32,60,61,32,84,79,84,70,82,69,81,0,114,97,110,115,95,117,110,99,111,109,112,114,101,115,115,95,79,49,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,15,15,15,1,14,2,13,15,15,4,11,15,15,12,15,3,15,15,15,15,5,6,8,15,7,9,15,10,15,15,15,15,15,15,15,1,14,2,13,15,15,4,11,15,15,12,15,3,15,15,15,15,5,6,8,15,7,9,15,10,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,77,117,115,116,32,115,112,101,99,105,102,121,32,101,105,116,104,101,114,32,114,44,32,119,32,111,114,32,97,32,102,111,114,32,109,111,100,101,10,0,107,110,101,116,102,105,108,101,0,104,116,116,112,0,102,116,112,0,85,83,69,82,32,97,110,111,110,121,109,111,117,115,13,10,0,80,65,83,83,32,107,102,116,112,64,13,10,0,84,89,80,69,32,73,13,10,0,115,101,108,101,99,116,0,99,97,110,39,116,32,114,101,115,111,108,118,101,32,37,115,58,37,115,58,32,37,115,10,0,115,111,99,107,101,116,0,115,101,116,115,111,99,107,111,112,116,0,99,111,110,110,101,99,116,0,102,116,112,58,47,47,0,50,49,0,82,69,84,82,32,37,115,13,10,0,83,73,90,69,32,37,115,13,10,0,37,42,100,32,37,108,108,100,0,82,69,83,84,32,37,108,108,100,13,10,0,91,107,102,116,112,95,99,111,110,110,101,99,116,95,102,105,108,101,93,32,37,115,10,0,91,107,102,116,112,95,112,97,115,118,95,99,111,110,110,101,99,116,93,32,107,102,116,112,95,112,97,115,118,95,112,114,101,112,40,41,32,105,115,32,110,111,116,32,99,97,108,108,101,100,32,98,101,102,111,114,101,32,104,97,110,100,46,10,0,37,100,46,37,100,46,37,100,46,37,100,0,37,100,0,80,65,83,86,13,10,0,37,100,44,37,100,44,37,100,44,37,100,44,37,100,44,37,100,0,104,116,116,112,58,47,47,0,104,116,116,112,95,112,114,111,120,121,0,56,48,0,47,0,71,69,84,32,37,115,32,72,84,84,80,47,49,46,48,13,10,72,111,115,116,58,32,37,115,13,10,0,82,97,110,103,101,58,32,98,121,116,101,115,61,37,108,108,100,45,13,10,0,13,10,0,13,10,13,10,0,91,107,102,116,112,95,111,112,101,110,93,32,111,110,108,121,32,109,111,100,101,32,34,114,34,32,105,115,32,115,117,112,112,111,114,116,101,100,46,10,0,111,112,101,110,0,91,107,110,101,116,95,115,101,101,107,93,32,83,69,69,75,95,69,78,68,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,102,111,114,32,72,84,84,80,46,32,79,102,102,115,101,116,32,105,115,32,117,110,99,104,97,110,103,101,100,46,10,0,91,107,110,101,116,95,115,101,101,107,93,32,37,115,10,0,91,102,97,105,95,98,117,105,108,100,95,99,111,114,101,93,32,116,104,101,32,108,97,115,116,32,101,110,116,114,121,32,104,97,115,32,110,111,32,115,101,113,117,101,110,99,101,10,0,91,102,97,105,95,98,117,105,108,100,95,99,111,114,101,93,32,105,110,108,105,110,101,100,32,101,109,112,116,121,32,108,105,110,101,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,115,101,113,117,101,110,99,101,32,39,37,115,39,46,10,0,91,102,97,105,95,98,117,105,108,100,95,99,111,114,101,93,32,100,105,102,102,101,114,101,110,116,32,108,105,110,101,32,108,101,110,103,116,104,32,105,110,32,115,101,113,117,101,110,99,101,32,39,37,115,39,46,10,0,91,102,97,105,95,98,117,105,108,100,95,99,111,114,101,93,32,109,97,108,102,111,114,109,101,100,32,108,105,110,101,10,0,91,102,97,105,95,98,117,105,108,100,95,99,111,114,101,93,32,105,103,110,111,114,105,110,103,32,100,117,112,108,105,99,97,116,101,32,115,101,113,117,101,110,99,101,32,34,37,115,34,32,97,116,32,98,121,116,101,32,111,102,102,115,101,116,32,37,108,108,117,10,0,91,102,97,105,95,98,117,105,108,100,95,99,111,114,101,93,32,111,117,116,32,111,102,32,109,101,109,111,114,121,10,0,37,115,9,37,100,9,37,108,108,100,9,37,100,9,37,100,10,0,37,115,46,102,97,105,0,91,102,97,105,95,98,117,105,108,100,93,32,102,97,105,108,32,116,111,32,111,112,101,110,32,116,104,101,32,70,65,83,84,65,32,102,105,108,101,32,37,115,10,0,67,97,110,110,111,116,32,105,110,100,101,120,32,102,105,108,101,115,32,99,111,109,112,114,101,115,115,101,100,32,119,105,116,104,32,103,122,105,112,44,32,112,108,101,97,115,101,32,117,115,101,32,98,103,122,105,112,10,0,46,103,122,105,0,91,102,97,105,95,98,117,105,108,100,93,32,102,97,105,108,32,116,111,32,109,97,107,101,32,98,103,122,102,32,105,110,100,101,120,32,37,115,46,103,122,105,10,0,91,102,97,105,95,98,117,105,108,100,93,32,69,114,114,111,114,32,111,110,32,99,108,111,115,105,110,103,32,37,115,10,0,119,98,0,91,102,97,105,95,98,117,105,108,100,93,32,102,97,105,108,32,116,111,32,119,114,105,116,101,32,70,65,83,84,65,32,105,110,100,101,120,32,37,115,10,0,104,116,116,112,58,0,102,116,112,58,0,124,104,116,116,112,58,0,124,102,116,112,58,0,85,82,76,61,104,116,116,112,58,0,85,82,76,61,102,116,112,58,0,114,0,82,65,87,68,65,84,65,0,85,82,76,61,0,114,98,109,0,37,115,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,46,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,47,112,114,111,99,47,115,101,108,102,47,102,100,47,0,105,110,102,105,110,105,116,121,0,110,97,110,0,114,119,97,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};var Sockets={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};
  
  
  function __inet_pton4_raw(str) {
      var b = str.split('.');
      for (var i = 0; i < 4; i++) {
        var tmp = Number(b[i]);
        if (isNaN(tmp)) return null;
        b[i] = tmp;
      }
      return (b[0] | (b[1] << 8) | (b[2] << 16) | (b[3] << 24)) >>> 0;
    }
  
  
  var _htons=undefined;
  Module["_htons"] = _htons;function __inet_pton6_raw(str) {
      var words;
      var w, offset, z, i;
      /* http://home.deds.nl/~aeron/regex/ */
      var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i
      var parts = [];
      if (!valid6regx.test(str)) {
        return null;
      }
      if (str === "::") {
        return [0, 0, 0, 0, 0, 0, 0, 0];
      }
      // Z placeholder to keep track of zeros when splitting the string on ":"
      if (str.indexOf("::") === 0) {
        str = str.replace("::", "Z:"); // leading zeros case
      } else {
        str = str.replace("::", ":Z:");
      }
  
      if (str.indexOf(".") > 0) {
        // parse IPv4 embedded stress
        str = str.replace(new RegExp('[.]', 'g'), ":");
        words = str.split(":");
        words[words.length-4] = parseInt(words[words.length-4]) + parseInt(words[words.length-3])*256;
        words[words.length-3] = parseInt(words[words.length-2]) + parseInt(words[words.length-1])*256;
        words = words.slice(0, words.length-2);
      } else {
        words = str.split(":");
      }
  
      offset = 0; z = 0;
      for (w=0; w < words.length; w++) {
        if (typeof words[w] === 'string') {
          if (words[w] === 'Z') {
            // compressed zeros - write appropriate number of zero words
            for (z = 0; z < (8 - words.length+1); z++) {
              parts[w+z] = 0;
            }
            offset = z-1;
          } else {
            // parse hex to field to 16-bit value and write it in network byte-order
            parts[w+offset] = _htons(parseInt(words[w],16));
          }
        } else {
          // parsed IPv4 words
          parts[w+offset] = words[w];
        }
      }
      return [
        (parts[1] << 16) | parts[0],
        (parts[3] << 16) | parts[2],
        (parts[5] << 16) | parts[4],
        (parts[7] << 16) | parts[6]
      ];
    }var DNS={address_map:{id:1,addrs:{},names:{}},lookup_name:function (name) {
        // If the name is already a valid ipv4 / ipv6 address, don't generate a fake one.
        var res = __inet_pton4_raw(name);
        if (res !== null) {
          return name;
        }
        res = __inet_pton6_raw(name);
        if (res !== null) {
          return name;
        }
  
        // See if this name is already mapped.
        var addr;
  
        if (DNS.address_map.addrs[name]) {
          addr = DNS.address_map.addrs[name];
        } else {
          var id = DNS.address_map.id++;
          assert(id < 65535, 'exceeded max address mappings of 65535');
  
          addr = '172.29.' + (id & 0xff) + '.' + (id & 0xff00);
  
          DNS.address_map.names[addr] = name;
          DNS.address_map.addrs[name] = addr;
        }
  
        return addr;
      },lookup_addr:function (addr) {
        if (DNS.address_map.names[addr]) {
          return DNS.address_map.names[addr];
        }
  
        return null;
      }};
  
  function __inet_ntop4_raw(addr) {
      return (addr & 0xff) + '.' + ((addr >> 8) & 0xff) + '.' + ((addr >> 16) & 0xff) + '.' + ((addr >> 24) & 0xff)
    }
  
  function __inet_ntop6_raw(ints) {
      //  ref:  http://www.ietf.org/rfc/rfc2373.txt - section 2.5.4
      //  Format for IPv4 compatible and mapped  128-bit IPv6 Addresses
      //  128-bits are split into eight 16-bit words
      //  stored in network byte order (big-endian)
      //  |                80 bits               | 16 |      32 bits        |
      //  +-----------------------------------------------------------------+
      //  |               10 bytes               |  2 |      4 bytes        |
      //  +--------------------------------------+--------------------------+
      //  +               5 words                |  1 |      2 words        |
      //  +--------------------------------------+--------------------------+
      //  |0000..............................0000|0000|    IPv4 ADDRESS     | (compatible)
      //  +--------------------------------------+----+---------------------+
      //  |0000..............................0000|FFFF|    IPv4 ADDRESS     | (mapped)
      //  +--------------------------------------+----+---------------------+
      var str = "";
      var word = 0;
      var longest = 0;
      var lastzero = 0;
      var zstart = 0;
      var len = 0;
      var i = 0;
      var parts = [
        ints[0] & 0xffff,
        (ints[0] >> 16),
        ints[1] & 0xffff,
        (ints[1] >> 16),
        ints[2] & 0xffff,
        (ints[2] >> 16),
        ints[3] & 0xffff,
        (ints[3] >> 16)
      ];
  
      // Handle IPv4-compatible, IPv4-mapped, loopback and any/unspecified addresses
  
      var hasipv4 = true;
      var v4part = "";
      // check if the 10 high-order bytes are all zeros (first 5 words)
      for (i = 0; i < 5; i++) {
        if (parts[i] !== 0) { hasipv4 = false; break; }
      }
  
      if (hasipv4) {
        // low-order 32-bits store an IPv4 address (bytes 13 to 16) (last 2 words)
        v4part = __inet_ntop4_raw(parts[6] | (parts[7] << 16));
        // IPv4-mapped IPv6 address if 16-bit value (bytes 11 and 12) == 0xFFFF (6th word)
        if (parts[5] === -1) {
          str = "::ffff:";
          str += v4part;
          return str;
        }
        // IPv4-compatible IPv6 address if 16-bit value (bytes 11 and 12) == 0x0000 (6th word)
        if (parts[5] === 0) {
          str = "::";
          //special case IPv6 addresses
          if(v4part === "0.0.0.0") v4part = ""; // any/unspecified address
          if(v4part === "0.0.0.1") v4part = "1";// loopback address
          str += v4part;
          return str;
        }
      }
  
      // Handle all other IPv6 addresses
  
      // first run to find the longest contiguous zero words
      for (word = 0; word < 8; word++) {
        if (parts[word] === 0) {
          if (word - lastzero > 1) {
            len = 0;
          }
          lastzero = word;
          len++;
        }
        if (len > longest) {
          longest = len;
          zstart = word - longest + 1;
        }
      }
  
      for (word = 0; word < 8; word++) {
        if (longest > 1) {
          // compress contiguous zeros - to produce "::"
          if (parts[word] === 0 && word >= zstart && word < (zstart + longest) ) {
            if (word === zstart) {
              str += ":";
              if (zstart === 0) str += ":"; //leading zeros case
            }
            continue;
          }
        }
        // converts 16-bit words from big-endian to little-endian before converting to hex string
        str += Number(_ntohs(parts[word] & 0xffff)).toString(16);
        str += word < 7 ? ":" : "";
      }
      return str;
    }
  
  function __write_sockaddr(sa, family, addr, port) {
      switch (family) {
        case 2:
          addr = __inet_pton4_raw(addr);
          HEAP16[((sa)>>1)]=family;
          HEAP32[(((sa)+(4))>>2)]=addr;
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          break;
        case 10:
          addr = __inet_pton6_raw(addr);
          HEAP32[((sa)>>2)]=family;
          HEAP32[(((sa)+(8))>>2)]=addr[0];
          HEAP32[(((sa)+(12))>>2)]=addr[1];
          HEAP32[(((sa)+(16))>>2)]=addr[2];
          HEAP32[(((sa)+(20))>>2)]=addr[3];
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          HEAP32[(((sa)+(4))>>2)]=0;
          HEAP32[(((sa)+(24))>>2)]=0;
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
      // kind of lame, but let's match _read_sockaddr's interface
      return {};
    }function _getaddrinfo(node, service, hint, out) {
      // Note getaddrinfo currently only returns a single addrinfo with ai_next defaulting to NULL. When NULL
      // hints are specified or ai_family set to AF_UNSPEC or ai_socktype or ai_protocol set to 0 then we
      // really should provide a linked list of suitable addrinfo values.
      var addrs = [];
      var canon = null;
      var addr = 0;
      var port = 0;
      var flags = 0;
      var family = 0;
      var type = 0;
      var proto = 0;
      var ai, last;
  
      function allocaddrinfo(family, type, proto, canon, addr, port) {
        var sa, salen, ai;
        var res;
  
        salen = family === 10 ?
          28 :
          16;
        addr = family === 10 ?
          __inet_ntop6_raw(addr) :
          __inet_ntop4_raw(addr);
        sa = _malloc(salen);
        res = __write_sockaddr(sa, family, addr, port);
        assert(!res.errno);
  
        ai = _malloc(32);
        HEAP32[(((ai)+(4))>>2)]=family;
        HEAP32[(((ai)+(8))>>2)]=type;
        HEAP32[(((ai)+(12))>>2)]=proto;
        if (canon) {
          HEAP32[(((ai)+(24))>>2)]=canon;
        }
        HEAP32[(((ai)+(20))>>2)]=sa;
        if (family === 10) {
          HEAP32[(((ai)+(16))>>2)]=28;
        } else {
          HEAP32[(((ai)+(16))>>2)]=16;
        }
        HEAP32[(((ai)+(28))>>2)]=0;
  
        return ai;
      }
  
      if (hint) {
        flags = HEAP32[((hint)>>2)];
        family = HEAP32[(((hint)+(4))>>2)];
        type = HEAP32[(((hint)+(8))>>2)];
        proto = HEAP32[(((hint)+(12))>>2)];
      }
      if (type && !proto) {
        proto = type === 2 ? 17 : 6;
      }
      if (!type && proto) {
        type = proto === 17 ? 2 : 1;
      }
  
      // If type or proto are set to zero in hints we should really be returning multiple addrinfo values, but for
      // now default to a TCP STREAM socket so we can at least return a sensible addrinfo given NULL hints.
      if (proto === 0) {
        proto = 6;
      }
      if (type === 0) {
        type = 1;
      }
  
      if (!node && !service) {
        return -2;
      }
      if (flags & ~(1|2|4|
          1024|8|16|32)) {
        return -1;
      }
      if (hint !== 0 && (HEAP32[((hint)>>2)] & 2) && !node) {
        return -1;
      }
      if (flags & 32) {
        // TODO
        return -2;
      }
      if (type !== 0 && type !== 1 && type !== 2) {
        return -7;
      }
      if (family !== 0 && family !== 2 && family !== 10) {
        return -6;
      }
  
      if (service) {
        service = Pointer_stringify(service);
        port = parseInt(service, 10);
  
        if (isNaN(port)) {
          if (flags & 1024) {
            return -2;
          }
          // TODO support resolving well-known service names from:
          // http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
          return -8;
        }
      }
  
      if (!node) {
        if (family === 0) {
          family = 2;
        }
        if ((flags & 1) === 0) {
          if (family === 2) {
            addr = _htonl(2130706433);
          } else {
            addr = [0, 0, 0, 1];
          }
        }
        ai = allocaddrinfo(family, type, proto, null, addr, port);
        HEAP32[((out)>>2)]=ai;
        return 0;
      }
  
      //
      // try as a numeric address
      //
      node = Pointer_stringify(node);
      addr = __inet_pton4_raw(node);
      if (addr !== null) {
        // incoming node is a valid ipv4 address
        if (family === 0 || family === 2) {
          family = 2;
        }
        else if (family === 10 && (flags & 8)) {
          addr = [0, 0, _htonl(0xffff), addr];
          family = 10;
        } else {
          return -2;
        }
      } else {
        addr = __inet_pton6_raw(node);
        if (addr !== null) {
          // incoming node is a valid ipv6 address
          if (family === 0 || family === 10) {
            family = 10;
          } else {
            return -2;
          }
        }
      }
      if (addr != null) {
        ai = allocaddrinfo(family, type, proto, node, addr, port);
        HEAP32[((out)>>2)]=ai;
        return 0;
      }
      if (flags & 4) {
        return -2;
      }
  
      //
      // try as a hostname
      //
      // resolve the hostname to a temporary fake address
      node = DNS.lookup_name(node);
      addr = __inet_pton4_raw(node);
      if (family === 0) {
        family = 2;
      } else if (family === 10) {
        addr = [0, 0, _htonl(0xffff), addr];
      }
      ai = allocaddrinfo(family, type, proto, null, addr, port);
      HEAP32[((out)>>2)]=ai;
      return 0;
    }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

   
  Module["_pthread_mutex_lock"] = _pthread_mutex_lock;

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall194(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ftruncate64
      var fd = SYSCALLS.get(), zero = SYSCALLS.getZero(), length = SYSCALLS.get64();
      FS.ftruncate(fd, length);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall197(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_fstat64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, stream.path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _pthread_create() {
      return 11;
    }

  function ___syscall118(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fsync
      var stream = SYSCALLS.getStreamFromFD();
      return 0; // we can't do anything synchronously; the in-memory FS is already synced to
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _pthread_mutex_init() {}

  function _pthread_cond_timedwait() { return 0; }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Ashr"] = _bitshift64Ashr;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function ___syscall38(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rename
      var old_path = SYSCALLS.getStr(), new_path = SYSCALLS.getStr();
      FS.rename(old_path, new_path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall33(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // access
      var path = SYSCALLS.getStr(), amode = SYSCALLS.get();
      return SYSCALLS.doAccess(path, amode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var GAI_ERRNO_MESSAGES={};function _gai_strerror(val) {
      var buflen = 256;
  
      // On first call to gai_strerror we initialise the buffer and populate the error messages.
      if (!_gai_strerror.buffer) {
          _gai_strerror.buffer = _malloc(buflen);
  
          GAI_ERRNO_MESSAGES['0'] = 'Success';
          GAI_ERRNO_MESSAGES['' + -1] = 'Invalid value for \'ai_flags\' field';
          GAI_ERRNO_MESSAGES['' + -2] = 'NAME or SERVICE is unknown';
          GAI_ERRNO_MESSAGES['' + -3] = 'Temporary failure in name resolution';
          GAI_ERRNO_MESSAGES['' + -4] = 'Non-recoverable failure in name res';
          GAI_ERRNO_MESSAGES['' + -6] = '\'ai_family\' not supported';
          GAI_ERRNO_MESSAGES['' + -7] = '\'ai_socktype\' not supported';
          GAI_ERRNO_MESSAGES['' + -8] = 'SERVICE not supported for \'ai_socktype\'';
          GAI_ERRNO_MESSAGES['' + -10] = 'Memory allocation failure';
          GAI_ERRNO_MESSAGES['' + -11] = 'System error returned in \'errno\'';
          GAI_ERRNO_MESSAGES['' + -12] = 'Argument buffer overflow';
      }
  
      var msg = 'Unknown error';
  
      if (val in GAI_ERRNO_MESSAGES) {
        if (GAI_ERRNO_MESSAGES[val].length > buflen - 1) {
          msg = 'Message too long'; // EMSGSIZE message. This should never occur given the GAI_ERRNO_MESSAGES above. 
        } else {
          msg = GAI_ERRNO_MESSAGES[val];
        }
      }
  
      writeAsciiToMemory(msg, _gai_strerror.buffer);
      return _gai_strerror.buffer;
    }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

   
  Module["_pthread_cond_broadcast"] = _pthread_cond_broadcast;

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

   
  Module["_pthread_mutex_unlock"] = _pthread_mutex_unlock;

  function _pthread_cond_signal() { return 0; }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

   
  Module["_sbrk"] = _sbrk;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

   
  Module["_memmove"] = _memmove;

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___uremdi3"] = ___uremdi3;

  function _pthread_cond_wait() { return 0; }

  function ___syscall4(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // write
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  var PROCINFO={ppid:1,pid:42,sid:42,pgid:42};function ___syscall20(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpid
      return PROCINFO.pid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_memset"] = _memset;

  function ___syscall39(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mkdir
      var path = SYSCALLS.getStr(), mode = SYSCALLS.get();
      return SYSCALLS.doMkdir(path, mode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }

  function _abort() {
      Module['abort']();
    }

  function _pthread_cond_destroy() { return 0; }

  function _pthread_mutex_destroy() {}

  function ___lock() {}

  function ___unlock() {}

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return ((Date.now() - _clock.start) * (1000000 / 1000))|0;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _pthread_exit() {}

  function _pthread_attr_setdetachstate() {}

  function ___syscall15(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // chmod
      var path = SYSCALLS.getStr(), mode = SYSCALLS.get();
      FS.chmod(path, mode);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlink
      var path = SYSCALLS.getStr();
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _pthread_attr_init(attr) {
      /* int pthread_attr_init(pthread_attr_t *attr); */
      //FIXME: should allocate a pthread_attr_t
      return 0;
    }

  function _pthread_join() {}

  function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _pthread_cond_init() { return 0; }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["___udivdi3"] = ___udivdi3;

  
   
  Module["___muldsi3"] = ___muldsi3; 
  Module["___muldi3"] = ___muldi3;

  
  var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocketConstructor;
              if (ENVIRONMENT_IS_NODE) {
                WebSocketConstructor = require('ws');
              } else if (ENVIRONMENT_IS_WEB) {
                WebSocketConstructor = window['WebSocket'];
              } else {
                WebSocketConstructor = WebSocket;
              }
              ws = new WebSocketConstructor(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
  
            // An empty ArrayBuffer will emit a pseudo disconnect event
            // as recv/recvmsg will return zero which indicates that a socket
            // has performed a shutdown although the connection has not been disconnected yet.
            if (data.byteLength == 0) {
              return;
            }
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port;
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};
  
  function __read_sockaddr(sa, salen) {
      // family / port offsets are common to both sockaddr_in and sockaddr_in6
      var family = HEAP16[((sa)>>1)];
      var port = _ntohs(HEAP16[(((sa)+(2))>>1)]);
      var addr;
  
      switch (family) {
        case 2:
          if (salen !== 16) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = HEAP32[(((sa)+(4))>>2)];
          addr = __inet_ntop4_raw(addr);
          break;
        case 10:
          if (salen !== 28) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = [
            HEAP32[(((sa)+(8))>>2)],
            HEAP32[(((sa)+(12))>>2)],
            HEAP32[(((sa)+(16))>>2)],
            HEAP32[(((sa)+(20))>>2)]
          ];
          addr = __inet_ntop6_raw(addr);
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
  
      return { family: family, addr: addr, port: port };
    }function ___syscall102(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // socketcall
      var call = SYSCALLS.get(), socketvararg = SYSCALLS.get();
      // socketcalls pass the rest of the arguments in a struct
      SYSCALLS.varargs = socketvararg;
      switch (call) {
        case 1: { // socket
          var domain = SYSCALLS.get(), type = SYSCALLS.get(), protocol = SYSCALLS.get();
          var sock = SOCKFS.createSocket(domain, type, protocol);
          assert(sock.stream.fd < 64); // XXX ? select() assumes socket fd values are in 0..63
          return sock.stream.fd;
        }
        case 2: { // bind
          var sock = SYSCALLS.getSocketFromFD(), info = SYSCALLS.getSocketAddress();
          sock.sock_ops.bind(sock, info.addr, info.port);
          return 0;
        }
        case 3: { // connect
          var sock = SYSCALLS.getSocketFromFD(), info = SYSCALLS.getSocketAddress();
          sock.sock_ops.connect(sock, info.addr, info.port);
          return 0;
        }
        case 4: { // listen
          var sock = SYSCALLS.getSocketFromFD(), backlog = SYSCALLS.get();
          sock.sock_ops.listen(sock, backlog);
          return 0;
        }
        case 5: { // accept
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var newsock = sock.sock_ops.accept(sock);
          if (addr) {
            var res = __write_sockaddr(addr, newsock.family, DNS.lookup_name(newsock.daddr), newsock.dport);
            assert(!res.errno);
          }
          return newsock.stream.fd;
        }
        case 6: { // getsockname
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          // TODO: sock.saddr should never be undefined, see TODO in websocket_sock_ops.getname
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.saddr || '0.0.0.0'), sock.sport);
          assert(!res.errno);
          return 0;
        }
        case 7: { // getpeername
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          if (!sock.daddr) {
            return -ERRNO_CODES.ENOTCONN; // The socket is not connected.
          }
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.daddr), sock.dport);
          assert(!res.errno);
          return 0;
        }
        case 11: { // sendto
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), length = SYSCALLS.get(), flags = SYSCALLS.get(), dest = SYSCALLS.getSocketAddress(true);
          if (!dest) {
            // send, no address provided
            return FS.write(sock.stream, HEAP8,message, length);
          } else {
            // sendto an address
            return sock.sock_ops.sendmsg(sock, HEAP8,message, length, dest.addr, dest.port);
          }
        }
        case 12: { // recvfrom
          var sock = SYSCALLS.getSocketFromFD(), buf = SYSCALLS.get(), len = SYSCALLS.get(), flags = SYSCALLS.get(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var msg = sock.sock_ops.recvmsg(sock, len);
          if (!msg) return 0; // socket is closed
          if (addr) {
            var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          HEAPU8.set(msg.buffer, buf);
          return msg.buffer.byteLength;
        }
        case 14: { // setsockopt
          return -ERRNO_CODES.ENOPROTOOPT; // The option is unknown at the level indicated.
        }
        case 15: { // getsockopt
          var sock = SYSCALLS.getSocketFromFD(), level = SYSCALLS.get(), optname = SYSCALLS.get(), optval = SYSCALLS.get(), optlen = SYSCALLS.get();
          // Minimal getsockopt aimed at resolving https://github.com/kripken/emscripten/issues/2211
          // so only supports SOL_SOCKET with SO_ERROR.
          if (level === 1) {
            if (optname === 4) {
              HEAP32[((optval)>>2)]=sock.error;
              HEAP32[((optlen)>>2)]=4;
              sock.error = null; // Clear the error (The SO_ERROR option obtains and then clears this field).
              return 0;
            }
          }
          return -ERRNO_CODES.ENOPROTOOPT; // The option is unknown at the level indicated.
        }
        case 16: { // sendmsg
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // read the address and port to send to
          var addr, port;
          var name = HEAP32[((message)>>2)];
          var namelen = HEAP32[(((message)+(4))>>2)];
          if (name) {
            var info = __read_sockaddr(name, namelen);
            if (info.errno) return -info.errno;
            port = info.port;
            addr = DNS.lookup_addr(info.addr) || info.addr;
          }
          // concatenate scatter-gather arrays into one message buffer
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          var view = new Uint8Array(total);
          var offset = 0;
          for (var i = 0; i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            for (var j = 0; j < iovlen; j++) {  
              view[offset++] = HEAP8[(((iovbase)+(j))>>0)];
            }
          }
          // write the buffer
          return sock.sock_ops.sendmsg(sock, view, 0, total, addr, port);
        }
        case 17: { // recvmsg
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // get the total amount of data we can read across all arrays
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          // try to read total data
          var msg = sock.sock_ops.recvmsg(sock, total);
          if (!msg) return 0; // socket is closed
  
          // TODO honor flags:
          // MSG_OOB
          // Requests out-of-band data. The significance and semantics of out-of-band data are protocol-specific.
          // MSG_PEEK
          // Peeks at the incoming message.
          // MSG_WAITALL
          // Requests that the function block until the full amount of data requested can be returned. The function may return a smaller amount of data if a signal is caught, if the connection is terminated, if MSG_PEEK was specified, or if an error is pending for the socket.
  
          // write the source address out
          var name = HEAP32[((message)>>2)];
          if (name) {
            var res = __write_sockaddr(name, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          // write the buffer out to the scatter-gather arrays
          var bytesRead = 0;
          var bytesRemaining = msg.buffer.byteLength;
          for (var i = 0; bytesRemaining > 0 && i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            if (!iovlen) {
              continue;
            }
            var length = Math.min(iovlen, bytesRemaining);
            var buf = msg.buffer.subarray(bytesRead, bytesRead + length);
            HEAPU8.set(buf, iovbase + bytesRead);
            bytesRead += length;
            bytesRemaining -= length;
          }
  
          // TODO set msghdr.msg_flags
          // MSG_EOR
          // End of record was received (if supported by the protocol).
          // MSG_OOB
          // Out-of-band data was received.
          // MSG_TRUNC
          // Normal data was truncated.
          // MSG_CTRUNC
  
          return bytesRead;
        }
        default: abort('unsupported socketcall syscall ' + call);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }

   
  Module["_llvm_bswap_i16"] = _llvm_bswap_i16;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function ___syscall142(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // newselect
      // readfds are supported,
      // writefds checks socket open status
      // exceptfds not supported
      // timeout is always 0 - fully async
      var nfds = SYSCALLS.get(), readfds = SYSCALLS.get(), writefds = SYSCALLS.get(), exceptfds = SYSCALLS.get(), timeout = SYSCALLS.get();
  
      assert(nfds <= 64, 'nfds must be less than or equal to 64');  // fd sets have 64 bits // TODO: this could be 1024 based on current musl headers
      assert(!exceptfds, 'exceptfds not supported');
  
      var total = 0;
      
      var srcReadLow = (readfds ? HEAP32[((readfds)>>2)] : 0),
          srcReadHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0);
      var srcWriteLow = (writefds ? HEAP32[((writefds)>>2)] : 0),
          srcWriteHigh = (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0);
      var srcExceptLow = (exceptfds ? HEAP32[((exceptfds)>>2)] : 0),
          srcExceptHigh = (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      var dstReadLow = 0,
          dstReadHigh = 0;
      var dstWriteLow = 0,
          dstWriteHigh = 0;
      var dstExceptLow = 0,
          dstExceptHigh = 0;
  
      var allLow = (readfds ? HEAP32[((readfds)>>2)] : 0) |
                   (writefds ? HEAP32[((writefds)>>2)] : 0) |
                   (exceptfds ? HEAP32[((exceptfds)>>2)] : 0);
      var allHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0) |
                    (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0) |
                    (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      function check(fd, low, high, val) {
        return (fd < 32 ? (low & val) : (high & val));
      }
  
      for (var fd = 0; fd < nfds; fd++) {
        var mask = 1 << (fd % 32);
        if (!(check(fd, allLow, allHigh, mask))) {
          continue;  // index isn't in the set
        }
  
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  
        var flags = SYSCALLS.DEFAULT_POLLMASK;
  
        if (stream.stream_ops.poll) {
          flags = stream.stream_ops.poll(stream);
        }
  
        if ((flags & 1) && check(fd, srcReadLow, srcReadHigh, mask)) {
          fd < 32 ? (dstReadLow = dstReadLow | mask) : (dstReadHigh = dstReadHigh | mask);
          total++;
        }
        if ((flags & 4) && check(fd, srcWriteLow, srcWriteHigh, mask)) {
          fd < 32 ? (dstWriteLow = dstWriteLow | mask) : (dstWriteHigh = dstWriteHigh | mask);
          total++;
        }
        if ((flags & 2) && check(fd, srcExceptLow, srcExceptHigh, mask)) {
          fd < 32 ? (dstExceptLow = dstExceptLow | mask) : (dstExceptHigh = dstExceptHigh | mask);
          total++;
        }
      }
  
      if (readfds) {
        HEAP32[((readfds)>>2)]=dstReadLow;
        HEAP32[(((readfds)+(4))>>2)]=dstReadHigh;
      }
      if (writefds) {
        HEAP32[((writefds)>>2)]=dstWriteLow;
        HEAP32[(((writefds)+(4))>>2)]=dstWriteHigh;
      }
      if (exceptfds) {
        HEAP32[((exceptfds)>>2)]=dstExceptLow;
        HEAP32[(((exceptfds)+(4))>>2)]=dstExceptHigh;
      }
      
      return total;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_pthread_self"] = _pthread_self;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
___buildEnvironment(ENV);;
__ATINIT__.push(function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); });;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall221": ___syscall221, "_pthread_cond_wait": _pthread_cond_wait, "__inet_pton4_raw": __inet_pton4_raw, "__inet_ntop6_raw": __inet_ntop6_raw, "___syscall102": ___syscall102, "__inet_ntop4_raw": __inet_ntop4_raw, "_pthread_cleanup_push": _pthread_cleanup_push, "__inet_pton6_raw": __inet_pton6_raw, "___syscall20": ___syscall20, "__read_sockaddr": __read_sockaddr, "___assert_fail": ___assert_fail, "_pthread_join": _pthread_join, "_pthread_attr_setdetachstate": _pthread_attr_setdetachstate, "___buildEnvironment": ___buildEnvironment, "_gai_strerror": _gai_strerror, "___setErrNo": ___setErrNo, "___syscall197": ___syscall197, "___syscall195": ___syscall195, "___syscall194": ___syscall194, "_pthread_attr_init": _pthread_attr_init, "__exit": __exit, "_clock": _clock, "__write_sockaddr": __write_sockaddr, "___syscall118": ___syscall118, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_pthread_cond_signal": _pthread_cond_signal, "_exit": _exit, "_pthread_mutex_destroy": _pthread_mutex_destroy, "_abort": _abort, "_getenv": _getenv, "_pthread_cond_init": _pthread_cond_init, "_pthread_exit": _pthread_exit, "___syscall33": ___syscall33, "___syscall54": ___syscall54, "___unlock": ___unlock, "___syscall15": ___syscall15, "_pthread_create": _pthread_create, "___syscall39": ___syscall39, "___syscall38": ___syscall38, "___syscall10": ___syscall10, "___syscall3": ___syscall3, "___lock": ___lock, "_pthread_cond_timedwait": _pthread_cond_timedwait, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "___syscall4": ___syscall4, "_getaddrinfo": _getaddrinfo, "_time": _time, "_pthread_cond_destroy": _pthread_cond_destroy, "_gettimeofday": _gettimeofday, "_atexit": _atexit, "___syscall140": ___syscall140, "_pthread_mutex_init": _pthread_mutex_init, "___syscall142": ___syscall142, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall221=env.___syscall221;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var __inet_pton4_raw=env.__inet_pton4_raw;
  var __inet_ntop6_raw=env.__inet_ntop6_raw;
  var ___syscall102=env.___syscall102;
  var __inet_ntop4_raw=env.__inet_ntop4_raw;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var __inet_pton6_raw=env.__inet_pton6_raw;
  var ___syscall20=env.___syscall20;
  var __read_sockaddr=env.__read_sockaddr;
  var ___assert_fail=env.___assert_fail;
  var _pthread_join=env._pthread_join;
  var _pthread_attr_setdetachstate=env._pthread_attr_setdetachstate;
  var ___buildEnvironment=env.___buildEnvironment;
  var _gai_strerror=env._gai_strerror;
  var ___setErrNo=env.___setErrNo;
  var ___syscall197=env.___syscall197;
  var ___syscall195=env.___syscall195;
  var ___syscall194=env.___syscall194;
  var _pthread_attr_init=env._pthread_attr_init;
  var __exit=env.__exit;
  var _clock=env._clock;
  var __write_sockaddr=env.__write_sockaddr;
  var ___syscall118=env.___syscall118;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _exit=env._exit;
  var _pthread_mutex_destroy=env._pthread_mutex_destroy;
  var _abort=env._abort;
  var _getenv=env._getenv;
  var _pthread_cond_init=env._pthread_cond_init;
  var _pthread_exit=env._pthread_exit;
  var ___syscall33=env.___syscall33;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var ___syscall15=env.___syscall15;
  var _pthread_create=env._pthread_create;
  var ___syscall39=env.___syscall39;
  var ___syscall38=env.___syscall38;
  var ___syscall10=env.___syscall10;
  var ___syscall3=env.___syscall3;
  var ___lock=env.___lock;
  var _pthread_cond_timedwait=env._pthread_cond_timedwait;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var ___syscall4=env.___syscall4;
  var _getaddrinfo=env._getaddrinfo;
  var _time=env._time;
  var _pthread_cond_destroy=env._pthread_cond_destroy;
  var _gettimeofday=env._gettimeofday;
  var _atexit=env._atexit;
  var ___syscall140=env.___syscall140;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var ___syscall142=env.___syscall142;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _adler32_z($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = $9 >>> 16;
 $11 = $10 & 65535;
 $7 = $11;
 $12 = $4;
 $13 = $12 & 65535;
 $4 = $13;
 $14 = $6;
 $15 = ($14|0)==(1);
 $16 = $5;
 if ($15) {
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $4;
  $20 = (($19) + ($18))|0;
  $4 = $20;
  $21 = $4;
  $22 = ($21>>>0)>=(65521);
  if ($22) {
   $23 = $4;
   $24 = (($23) - 65521)|0;
   $4 = $24;
  }
  $25 = $4;
  $26 = $7;
  $27 = (($26) + ($25))|0;
  $7 = $27;
  $28 = $7;
  $29 = ($28>>>0)>=(65521);
  if ($29) {
   $30 = $7;
   $31 = (($30) - 65521)|0;
   $7 = $31;
  }
  $32 = $4;
  $33 = $7;
  $34 = $33 << 16;
  $35 = $32 | $34;
  $3 = $35;
  $387 = $3;
  STACKTOP = sp;return ($387|0);
 }
 $36 = ($16|0)==(0|0);
 if ($36) {
  $3 = 1;
  $387 = $3;
  STACKTOP = sp;return ($387|0);
 }
 $37 = $6;
 $38 = ($37>>>0)<(16);
 if ($38) {
  while(1) {
   $39 = $6;
   $40 = (($39) + -1)|0;
   $6 = $40;
   $41 = ($39|0)!=(0);
   if (!($41)) {
    break;
   }
   $42 = $5;
   $43 = ((($42)) + 1|0);
   $5 = $43;
   $44 = HEAP8[$42>>0]|0;
   $45 = $44&255;
   $46 = $4;
   $47 = (($46) + ($45))|0;
   $4 = $47;
   $48 = $4;
   $49 = $7;
   $50 = (($49) + ($48))|0;
   $7 = $50;
  }
  $51 = $4;
  $52 = ($51>>>0)>=(65521);
  if ($52) {
   $53 = $4;
   $54 = (($53) - 65521)|0;
   $4 = $54;
  }
  $55 = $7;
  $56 = (($55>>>0) % 65521)&-1;
  $7 = $56;
  $57 = $4;
  $58 = $7;
  $59 = $58 << 16;
  $60 = $57 | $59;
  $3 = $60;
  $387 = $3;
  STACKTOP = sp;return ($387|0);
 }
 while(1) {
  $61 = $6;
  $62 = ($61>>>0)>=(5552);
  $63 = $6;
  if (!($62)) {
   break;
  }
  $64 = (($63) - 5552)|0;
  $6 = $64;
  $8 = 347;
  while(1) {
   $65 = $5;
   $66 = HEAP8[$65>>0]|0;
   $67 = $66&255;
   $68 = $4;
   $69 = (($68) + ($67))|0;
   $4 = $69;
   $70 = $4;
   $71 = $7;
   $72 = (($71) + ($70))|0;
   $7 = $72;
   $73 = $5;
   $74 = ((($73)) + 1|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75&255;
   $77 = $4;
   $78 = (($77) + ($76))|0;
   $4 = $78;
   $79 = $4;
   $80 = $7;
   $81 = (($80) + ($79))|0;
   $7 = $81;
   $82 = $5;
   $83 = ((($82)) + 2|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = $4;
   $87 = (($86) + ($85))|0;
   $4 = $87;
   $88 = $4;
   $89 = $7;
   $90 = (($89) + ($88))|0;
   $7 = $90;
   $91 = $5;
   $92 = ((($91)) + 3|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   $95 = $4;
   $96 = (($95) + ($94))|0;
   $4 = $96;
   $97 = $4;
   $98 = $7;
   $99 = (($98) + ($97))|0;
   $7 = $99;
   $100 = $5;
   $101 = ((($100)) + 4|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = $102&255;
   $104 = $4;
   $105 = (($104) + ($103))|0;
   $4 = $105;
   $106 = $4;
   $107 = $7;
   $108 = (($107) + ($106))|0;
   $7 = $108;
   $109 = $5;
   $110 = ((($109)) + 5|0);
   $111 = HEAP8[$110>>0]|0;
   $112 = $111&255;
   $113 = $4;
   $114 = (($113) + ($112))|0;
   $4 = $114;
   $115 = $4;
   $116 = $7;
   $117 = (($116) + ($115))|0;
   $7 = $117;
   $118 = $5;
   $119 = ((($118)) + 6|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = $120&255;
   $122 = $4;
   $123 = (($122) + ($121))|0;
   $4 = $123;
   $124 = $4;
   $125 = $7;
   $126 = (($125) + ($124))|0;
   $7 = $126;
   $127 = $5;
   $128 = ((($127)) + 7|0);
   $129 = HEAP8[$128>>0]|0;
   $130 = $129&255;
   $131 = $4;
   $132 = (($131) + ($130))|0;
   $4 = $132;
   $133 = $4;
   $134 = $7;
   $135 = (($134) + ($133))|0;
   $7 = $135;
   $136 = $5;
   $137 = ((($136)) + 8|0);
   $138 = HEAP8[$137>>0]|0;
   $139 = $138&255;
   $140 = $4;
   $141 = (($140) + ($139))|0;
   $4 = $141;
   $142 = $4;
   $143 = $7;
   $144 = (($143) + ($142))|0;
   $7 = $144;
   $145 = $5;
   $146 = ((($145)) + 9|0);
   $147 = HEAP8[$146>>0]|0;
   $148 = $147&255;
   $149 = $4;
   $150 = (($149) + ($148))|0;
   $4 = $150;
   $151 = $4;
   $152 = $7;
   $153 = (($152) + ($151))|0;
   $7 = $153;
   $154 = $5;
   $155 = ((($154)) + 10|0);
   $156 = HEAP8[$155>>0]|0;
   $157 = $156&255;
   $158 = $4;
   $159 = (($158) + ($157))|0;
   $4 = $159;
   $160 = $4;
   $161 = $7;
   $162 = (($161) + ($160))|0;
   $7 = $162;
   $163 = $5;
   $164 = ((($163)) + 11|0);
   $165 = HEAP8[$164>>0]|0;
   $166 = $165&255;
   $167 = $4;
   $168 = (($167) + ($166))|0;
   $4 = $168;
   $169 = $4;
   $170 = $7;
   $171 = (($170) + ($169))|0;
   $7 = $171;
   $172 = $5;
   $173 = ((($172)) + 12|0);
   $174 = HEAP8[$173>>0]|0;
   $175 = $174&255;
   $176 = $4;
   $177 = (($176) + ($175))|0;
   $4 = $177;
   $178 = $4;
   $179 = $7;
   $180 = (($179) + ($178))|0;
   $7 = $180;
   $181 = $5;
   $182 = ((($181)) + 13|0);
   $183 = HEAP8[$182>>0]|0;
   $184 = $183&255;
   $185 = $4;
   $186 = (($185) + ($184))|0;
   $4 = $186;
   $187 = $4;
   $188 = $7;
   $189 = (($188) + ($187))|0;
   $7 = $189;
   $190 = $5;
   $191 = ((($190)) + 14|0);
   $192 = HEAP8[$191>>0]|0;
   $193 = $192&255;
   $194 = $4;
   $195 = (($194) + ($193))|0;
   $4 = $195;
   $196 = $4;
   $197 = $7;
   $198 = (($197) + ($196))|0;
   $7 = $198;
   $199 = $5;
   $200 = ((($199)) + 15|0);
   $201 = HEAP8[$200>>0]|0;
   $202 = $201&255;
   $203 = $4;
   $204 = (($203) + ($202))|0;
   $4 = $204;
   $205 = $4;
   $206 = $7;
   $207 = (($206) + ($205))|0;
   $7 = $207;
   $208 = $5;
   $209 = ((($208)) + 16|0);
   $5 = $209;
   $210 = $8;
   $211 = (($210) + -1)|0;
   $8 = $211;
   $212 = ($211|0)!=(0);
   if (!($212)) {
    break;
   }
  }
  $213 = $4;
  $214 = (($213>>>0) % 65521)&-1;
  $4 = $214;
  $215 = $7;
  $216 = (($215>>>0) % 65521)&-1;
  $7 = $216;
 }
 $217 = ($63|0)!=(0);
 if ($217) {
  while(1) {
   $218 = $6;
   $219 = ($218>>>0)>=(16);
   if (!($219)) {
    break;
   }
   $220 = $6;
   $221 = (($220) - 16)|0;
   $6 = $221;
   $222 = $5;
   $223 = HEAP8[$222>>0]|0;
   $224 = $223&255;
   $225 = $4;
   $226 = (($225) + ($224))|0;
   $4 = $226;
   $227 = $4;
   $228 = $7;
   $229 = (($228) + ($227))|0;
   $7 = $229;
   $230 = $5;
   $231 = ((($230)) + 1|0);
   $232 = HEAP8[$231>>0]|0;
   $233 = $232&255;
   $234 = $4;
   $235 = (($234) + ($233))|0;
   $4 = $235;
   $236 = $4;
   $237 = $7;
   $238 = (($237) + ($236))|0;
   $7 = $238;
   $239 = $5;
   $240 = ((($239)) + 2|0);
   $241 = HEAP8[$240>>0]|0;
   $242 = $241&255;
   $243 = $4;
   $244 = (($243) + ($242))|0;
   $4 = $244;
   $245 = $4;
   $246 = $7;
   $247 = (($246) + ($245))|0;
   $7 = $247;
   $248 = $5;
   $249 = ((($248)) + 3|0);
   $250 = HEAP8[$249>>0]|0;
   $251 = $250&255;
   $252 = $4;
   $253 = (($252) + ($251))|0;
   $4 = $253;
   $254 = $4;
   $255 = $7;
   $256 = (($255) + ($254))|0;
   $7 = $256;
   $257 = $5;
   $258 = ((($257)) + 4|0);
   $259 = HEAP8[$258>>0]|0;
   $260 = $259&255;
   $261 = $4;
   $262 = (($261) + ($260))|0;
   $4 = $262;
   $263 = $4;
   $264 = $7;
   $265 = (($264) + ($263))|0;
   $7 = $265;
   $266 = $5;
   $267 = ((($266)) + 5|0);
   $268 = HEAP8[$267>>0]|0;
   $269 = $268&255;
   $270 = $4;
   $271 = (($270) + ($269))|0;
   $4 = $271;
   $272 = $4;
   $273 = $7;
   $274 = (($273) + ($272))|0;
   $7 = $274;
   $275 = $5;
   $276 = ((($275)) + 6|0);
   $277 = HEAP8[$276>>0]|0;
   $278 = $277&255;
   $279 = $4;
   $280 = (($279) + ($278))|0;
   $4 = $280;
   $281 = $4;
   $282 = $7;
   $283 = (($282) + ($281))|0;
   $7 = $283;
   $284 = $5;
   $285 = ((($284)) + 7|0);
   $286 = HEAP8[$285>>0]|0;
   $287 = $286&255;
   $288 = $4;
   $289 = (($288) + ($287))|0;
   $4 = $289;
   $290 = $4;
   $291 = $7;
   $292 = (($291) + ($290))|0;
   $7 = $292;
   $293 = $5;
   $294 = ((($293)) + 8|0);
   $295 = HEAP8[$294>>0]|0;
   $296 = $295&255;
   $297 = $4;
   $298 = (($297) + ($296))|0;
   $4 = $298;
   $299 = $4;
   $300 = $7;
   $301 = (($300) + ($299))|0;
   $7 = $301;
   $302 = $5;
   $303 = ((($302)) + 9|0);
   $304 = HEAP8[$303>>0]|0;
   $305 = $304&255;
   $306 = $4;
   $307 = (($306) + ($305))|0;
   $4 = $307;
   $308 = $4;
   $309 = $7;
   $310 = (($309) + ($308))|0;
   $7 = $310;
   $311 = $5;
   $312 = ((($311)) + 10|0);
   $313 = HEAP8[$312>>0]|0;
   $314 = $313&255;
   $315 = $4;
   $316 = (($315) + ($314))|0;
   $4 = $316;
   $317 = $4;
   $318 = $7;
   $319 = (($318) + ($317))|0;
   $7 = $319;
   $320 = $5;
   $321 = ((($320)) + 11|0);
   $322 = HEAP8[$321>>0]|0;
   $323 = $322&255;
   $324 = $4;
   $325 = (($324) + ($323))|0;
   $4 = $325;
   $326 = $4;
   $327 = $7;
   $328 = (($327) + ($326))|0;
   $7 = $328;
   $329 = $5;
   $330 = ((($329)) + 12|0);
   $331 = HEAP8[$330>>0]|0;
   $332 = $331&255;
   $333 = $4;
   $334 = (($333) + ($332))|0;
   $4 = $334;
   $335 = $4;
   $336 = $7;
   $337 = (($336) + ($335))|0;
   $7 = $337;
   $338 = $5;
   $339 = ((($338)) + 13|0);
   $340 = HEAP8[$339>>0]|0;
   $341 = $340&255;
   $342 = $4;
   $343 = (($342) + ($341))|0;
   $4 = $343;
   $344 = $4;
   $345 = $7;
   $346 = (($345) + ($344))|0;
   $7 = $346;
   $347 = $5;
   $348 = ((($347)) + 14|0);
   $349 = HEAP8[$348>>0]|0;
   $350 = $349&255;
   $351 = $4;
   $352 = (($351) + ($350))|0;
   $4 = $352;
   $353 = $4;
   $354 = $7;
   $355 = (($354) + ($353))|0;
   $7 = $355;
   $356 = $5;
   $357 = ((($356)) + 15|0);
   $358 = HEAP8[$357>>0]|0;
   $359 = $358&255;
   $360 = $4;
   $361 = (($360) + ($359))|0;
   $4 = $361;
   $362 = $4;
   $363 = $7;
   $364 = (($363) + ($362))|0;
   $7 = $364;
   $365 = $5;
   $366 = ((($365)) + 16|0);
   $5 = $366;
  }
  while(1) {
   $367 = $6;
   $368 = (($367) + -1)|0;
   $6 = $368;
   $369 = ($367|0)!=(0);
   if (!($369)) {
    break;
   }
   $370 = $5;
   $371 = ((($370)) + 1|0);
   $5 = $371;
   $372 = HEAP8[$370>>0]|0;
   $373 = $372&255;
   $374 = $4;
   $375 = (($374) + ($373))|0;
   $4 = $375;
   $376 = $4;
   $377 = $7;
   $378 = (($377) + ($376))|0;
   $7 = $378;
  }
  $379 = $4;
  $380 = (($379>>>0) % 65521)&-1;
  $4 = $380;
  $381 = $7;
  $382 = (($381>>>0) % 65521)&-1;
  $7 = $382;
 }
 $383 = $4;
 $384 = $7;
 $385 = $384 << 16;
 $386 = $383 | $385;
 $3 = $386;
 $387 = $3;
 STACKTOP = sp;return ($387|0);
}
function _adler32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = (_adler32_z($6,$7,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _crc32_z($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $5;
 $9 = ($8|0)==(0|0);
 do {
  if ($9) {
   $3 = 0;
  } else {
   HEAP32[$7>>2] = 1;
   $10 = HEAP8[$7>>0]|0;
   $11 = ($10<<24>>24)!=(0);
   $12 = $4;
   $13 = $5;
   $14 = $6;
   if ($11) {
    $15 = (_crc32_little($12,$13,$14)|0);
    $3 = $15;
    break;
   } else {
    $16 = (_crc32_big($12,$13,$14)|0);
    $3 = $16;
    break;
   }
  }
 } while(0);
 $17 = $3;
 STACKTOP = sp;return ($17|0);
}
function _crc32_little($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $6 = $8;
 $9 = $6;
 $10 = $9 ^ -1;
 $6 = $10;
 while(1) {
  $11 = $5;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   break;
  }
  $13 = $4;
  $14 = $13;
  $15 = $14 & 3;
  $16 = ($15|0)!=(0);
  if (!($16)) {
   break;
  }
  $17 = $6;
  $18 = $4;
  $19 = ((($18)) + 1|0);
  $4 = $19;
  $20 = HEAP8[$18>>0]|0;
  $21 = $20&255;
  $22 = $17 ^ $21;
  $23 = $22 & 255;
  $24 = (8 + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $6;
  $27 = $26 >>> 8;
  $28 = $25 ^ $27;
  $6 = $28;
  $29 = $5;
  $30 = (($29) + -1)|0;
  $5 = $30;
 }
 $31 = $4;
 $7 = $31;
 while(1) {
  $32 = $5;
  $33 = ($32>>>0)>=(32);
  if (!($33)) {
   break;
  }
  $34 = $7;
  $35 = ((($34)) + 4|0);
  $7 = $35;
  $36 = HEAP32[$34>>2]|0;
  $37 = $6;
  $38 = $37 ^ $36;
  $6 = $38;
  $39 = $6;
  $40 = $39 & 255;
  $41 = ((3080) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $6;
  $44 = $43 >>> 8;
  $45 = $44 & 255;
  $46 = ((2056) + ($45<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $42 ^ $47;
  $49 = $6;
  $50 = $49 >>> 16;
  $51 = $50 & 255;
  $52 = ((1032) + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $48 ^ $53;
  $55 = $6;
  $56 = $55 >>> 24;
  $57 = (8 + ($56<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $54 ^ $58;
  $6 = $59;
  $60 = $7;
  $61 = ((($60)) + 4|0);
  $7 = $61;
  $62 = HEAP32[$60>>2]|0;
  $63 = $6;
  $64 = $63 ^ $62;
  $6 = $64;
  $65 = $6;
  $66 = $65 & 255;
  $67 = ((3080) + ($66<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $6;
  $70 = $69 >>> 8;
  $71 = $70 & 255;
  $72 = ((2056) + ($71<<2)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $68 ^ $73;
  $75 = $6;
  $76 = $75 >>> 16;
  $77 = $76 & 255;
  $78 = ((1032) + ($77<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $74 ^ $79;
  $81 = $6;
  $82 = $81 >>> 24;
  $83 = (8 + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $80 ^ $84;
  $6 = $85;
  $86 = $7;
  $87 = ((($86)) + 4|0);
  $7 = $87;
  $88 = HEAP32[$86>>2]|0;
  $89 = $6;
  $90 = $89 ^ $88;
  $6 = $90;
  $91 = $6;
  $92 = $91 & 255;
  $93 = ((3080) + ($92<<2)|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $6;
  $96 = $95 >>> 8;
  $97 = $96 & 255;
  $98 = ((2056) + ($97<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $94 ^ $99;
  $101 = $6;
  $102 = $101 >>> 16;
  $103 = $102 & 255;
  $104 = ((1032) + ($103<<2)|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $100 ^ $105;
  $107 = $6;
  $108 = $107 >>> 24;
  $109 = (8 + ($108<<2)|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = $106 ^ $110;
  $6 = $111;
  $112 = $7;
  $113 = ((($112)) + 4|0);
  $7 = $113;
  $114 = HEAP32[$112>>2]|0;
  $115 = $6;
  $116 = $115 ^ $114;
  $6 = $116;
  $117 = $6;
  $118 = $117 & 255;
  $119 = ((3080) + ($118<<2)|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $6;
  $122 = $121 >>> 8;
  $123 = $122 & 255;
  $124 = ((2056) + ($123<<2)|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = $120 ^ $125;
  $127 = $6;
  $128 = $127 >>> 16;
  $129 = $128 & 255;
  $130 = ((1032) + ($129<<2)|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $126 ^ $131;
  $133 = $6;
  $134 = $133 >>> 24;
  $135 = (8 + ($134<<2)|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $132 ^ $136;
  $6 = $137;
  $138 = $7;
  $139 = ((($138)) + 4|0);
  $7 = $139;
  $140 = HEAP32[$138>>2]|0;
  $141 = $6;
  $142 = $141 ^ $140;
  $6 = $142;
  $143 = $6;
  $144 = $143 & 255;
  $145 = ((3080) + ($144<<2)|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = $6;
  $148 = $147 >>> 8;
  $149 = $148 & 255;
  $150 = ((2056) + ($149<<2)|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = $146 ^ $151;
  $153 = $6;
  $154 = $153 >>> 16;
  $155 = $154 & 255;
  $156 = ((1032) + ($155<<2)|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = $152 ^ $157;
  $159 = $6;
  $160 = $159 >>> 24;
  $161 = (8 + ($160<<2)|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = $158 ^ $162;
  $6 = $163;
  $164 = $7;
  $165 = ((($164)) + 4|0);
  $7 = $165;
  $166 = HEAP32[$164>>2]|0;
  $167 = $6;
  $168 = $167 ^ $166;
  $6 = $168;
  $169 = $6;
  $170 = $169 & 255;
  $171 = ((3080) + ($170<<2)|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = $6;
  $174 = $173 >>> 8;
  $175 = $174 & 255;
  $176 = ((2056) + ($175<<2)|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = $172 ^ $177;
  $179 = $6;
  $180 = $179 >>> 16;
  $181 = $180 & 255;
  $182 = ((1032) + ($181<<2)|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = $178 ^ $183;
  $185 = $6;
  $186 = $185 >>> 24;
  $187 = (8 + ($186<<2)|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = $184 ^ $188;
  $6 = $189;
  $190 = $7;
  $191 = ((($190)) + 4|0);
  $7 = $191;
  $192 = HEAP32[$190>>2]|0;
  $193 = $6;
  $194 = $193 ^ $192;
  $6 = $194;
  $195 = $6;
  $196 = $195 & 255;
  $197 = ((3080) + ($196<<2)|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = $6;
  $200 = $199 >>> 8;
  $201 = $200 & 255;
  $202 = ((2056) + ($201<<2)|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = $198 ^ $203;
  $205 = $6;
  $206 = $205 >>> 16;
  $207 = $206 & 255;
  $208 = ((1032) + ($207<<2)|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = $204 ^ $209;
  $211 = $6;
  $212 = $211 >>> 24;
  $213 = (8 + ($212<<2)|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = $210 ^ $214;
  $6 = $215;
  $216 = $7;
  $217 = ((($216)) + 4|0);
  $7 = $217;
  $218 = HEAP32[$216>>2]|0;
  $219 = $6;
  $220 = $219 ^ $218;
  $6 = $220;
  $221 = $6;
  $222 = $221 & 255;
  $223 = ((3080) + ($222<<2)|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = $6;
  $226 = $225 >>> 8;
  $227 = $226 & 255;
  $228 = ((2056) + ($227<<2)|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = $224 ^ $229;
  $231 = $6;
  $232 = $231 >>> 16;
  $233 = $232 & 255;
  $234 = ((1032) + ($233<<2)|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = $230 ^ $235;
  $237 = $6;
  $238 = $237 >>> 24;
  $239 = (8 + ($238<<2)|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $236 ^ $240;
  $6 = $241;
  $242 = $5;
  $243 = (($242) - 32)|0;
  $5 = $243;
 }
 while(1) {
  $244 = $5;
  $245 = ($244>>>0)>=(4);
  $246 = $7;
  if (!($245)) {
   break;
  }
  $247 = ((($246)) + 4|0);
  $7 = $247;
  $248 = HEAP32[$246>>2]|0;
  $249 = $6;
  $250 = $249 ^ $248;
  $6 = $250;
  $251 = $6;
  $252 = $251 & 255;
  $253 = ((3080) + ($252<<2)|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = $6;
  $256 = $255 >>> 8;
  $257 = $256 & 255;
  $258 = ((2056) + ($257<<2)|0);
  $259 = HEAP32[$258>>2]|0;
  $260 = $254 ^ $259;
  $261 = $6;
  $262 = $261 >>> 16;
  $263 = $262 & 255;
  $264 = ((1032) + ($263<<2)|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = $260 ^ $265;
  $267 = $6;
  $268 = $267 >>> 24;
  $269 = (8 + ($268<<2)|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = $266 ^ $270;
  $6 = $271;
  $272 = $5;
  $273 = (($272) - 4)|0;
  $5 = $273;
 }
 $4 = $246;
 $274 = $5;
 $275 = ($274|0)!=(0);
 if (!($275)) {
  $291 = $6;
  $292 = $291 ^ -1;
  $6 = $292;
  $293 = $6;
  STACKTOP = sp;return ($293|0);
 }
 while(1) {
  $276 = $6;
  $277 = $4;
  $278 = ((($277)) + 1|0);
  $4 = $278;
  $279 = HEAP8[$277>>0]|0;
  $280 = $279&255;
  $281 = $276 ^ $280;
  $282 = $281 & 255;
  $283 = (8 + ($282<<2)|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = $6;
  $286 = $285 >>> 8;
  $287 = $284 ^ $286;
  $6 = $287;
  $288 = $5;
  $289 = (($288) + -1)|0;
  $5 = $289;
  $290 = ($289|0)!=(0);
  if (!($290)) {
   break;
  }
 }
 $291 = $6;
 $292 = $291 ^ -1;
 $6 = $292;
 $293 = $6;
 STACKTOP = sp;return ($293|0);
}
function _crc32_big($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $8 >>> 24;
 $10 = $9 & 255;
 $11 = $3;
 $12 = $11 >>> 8;
 $13 = $12 & 65280;
 $14 = (($10) + ($13))|0;
 $15 = $3;
 $16 = $15 & 65280;
 $17 = $16 << 8;
 $18 = (($14) + ($17))|0;
 $19 = $3;
 $20 = $19 & 255;
 $21 = $20 << 24;
 $22 = (($18) + ($21))|0;
 $6 = $22;
 $23 = $6;
 $24 = $23 ^ -1;
 $6 = $24;
 while(1) {
  $25 = $5;
  $26 = ($25|0)!=(0);
  if (!($26)) {
   break;
  }
  $27 = $4;
  $28 = $27;
  $29 = $28 & 3;
  $30 = ($29|0)!=(0);
  if (!($30)) {
   break;
  }
  $31 = $6;
  $32 = $31 >>> 24;
  $33 = $4;
  $34 = ((($33)) + 1|0);
  $4 = $34;
  $35 = HEAP8[$33>>0]|0;
  $36 = $35&255;
  $37 = $32 ^ $36;
  $38 = ((4104) + ($37<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $6;
  $41 = $40 << 8;
  $42 = $39 ^ $41;
  $6 = $42;
  $43 = $5;
  $44 = (($43) + -1)|0;
  $5 = $44;
 }
 $45 = $4;
 $7 = $45;
 while(1) {
  $46 = $5;
  $47 = ($46>>>0)>=(32);
  if (!($47)) {
   break;
  }
  $48 = $7;
  $49 = ((($48)) + 4|0);
  $7 = $49;
  $50 = HEAP32[$48>>2]|0;
  $51 = $6;
  $52 = $51 ^ $50;
  $6 = $52;
  $53 = $6;
  $54 = $53 & 255;
  $55 = ((4104) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $6;
  $58 = $57 >>> 8;
  $59 = $58 & 255;
  $60 = ((5128) + ($59<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $56 ^ $61;
  $63 = $6;
  $64 = $63 >>> 16;
  $65 = $64 & 255;
  $66 = ((6152) + ($65<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $62 ^ $67;
  $69 = $6;
  $70 = $69 >>> 24;
  $71 = ((7176) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $68 ^ $72;
  $6 = $73;
  $74 = $7;
  $75 = ((($74)) + 4|0);
  $7 = $75;
  $76 = HEAP32[$74>>2]|0;
  $77 = $6;
  $78 = $77 ^ $76;
  $6 = $78;
  $79 = $6;
  $80 = $79 & 255;
  $81 = ((4104) + ($80<<2)|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $6;
  $84 = $83 >>> 8;
  $85 = $84 & 255;
  $86 = ((5128) + ($85<<2)|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $82 ^ $87;
  $89 = $6;
  $90 = $89 >>> 16;
  $91 = $90 & 255;
  $92 = ((6152) + ($91<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $88 ^ $93;
  $95 = $6;
  $96 = $95 >>> 24;
  $97 = ((7176) + ($96<<2)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $94 ^ $98;
  $6 = $99;
  $100 = $7;
  $101 = ((($100)) + 4|0);
  $7 = $101;
  $102 = HEAP32[$100>>2]|0;
  $103 = $6;
  $104 = $103 ^ $102;
  $6 = $104;
  $105 = $6;
  $106 = $105 & 255;
  $107 = ((4104) + ($106<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $6;
  $110 = $109 >>> 8;
  $111 = $110 & 255;
  $112 = ((5128) + ($111<<2)|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $108 ^ $113;
  $115 = $6;
  $116 = $115 >>> 16;
  $117 = $116 & 255;
  $118 = ((6152) + ($117<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = $114 ^ $119;
  $121 = $6;
  $122 = $121 >>> 24;
  $123 = ((7176) + ($122<<2)|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $120 ^ $124;
  $6 = $125;
  $126 = $7;
  $127 = ((($126)) + 4|0);
  $7 = $127;
  $128 = HEAP32[$126>>2]|0;
  $129 = $6;
  $130 = $129 ^ $128;
  $6 = $130;
  $131 = $6;
  $132 = $131 & 255;
  $133 = ((4104) + ($132<<2)|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $6;
  $136 = $135 >>> 8;
  $137 = $136 & 255;
  $138 = ((5128) + ($137<<2)|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = $134 ^ $139;
  $141 = $6;
  $142 = $141 >>> 16;
  $143 = $142 & 255;
  $144 = ((6152) + ($143<<2)|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = $140 ^ $145;
  $147 = $6;
  $148 = $147 >>> 24;
  $149 = ((7176) + ($148<<2)|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = $146 ^ $150;
  $6 = $151;
  $152 = $7;
  $153 = ((($152)) + 4|0);
  $7 = $153;
  $154 = HEAP32[$152>>2]|0;
  $155 = $6;
  $156 = $155 ^ $154;
  $6 = $156;
  $157 = $6;
  $158 = $157 & 255;
  $159 = ((4104) + ($158<<2)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $6;
  $162 = $161 >>> 8;
  $163 = $162 & 255;
  $164 = ((5128) + ($163<<2)|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = $160 ^ $165;
  $167 = $6;
  $168 = $167 >>> 16;
  $169 = $168 & 255;
  $170 = ((6152) + ($169<<2)|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = $166 ^ $171;
  $173 = $6;
  $174 = $173 >>> 24;
  $175 = ((7176) + ($174<<2)|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $172 ^ $176;
  $6 = $177;
  $178 = $7;
  $179 = ((($178)) + 4|0);
  $7 = $179;
  $180 = HEAP32[$178>>2]|0;
  $181 = $6;
  $182 = $181 ^ $180;
  $6 = $182;
  $183 = $6;
  $184 = $183 & 255;
  $185 = ((4104) + ($184<<2)|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = $6;
  $188 = $187 >>> 8;
  $189 = $188 & 255;
  $190 = ((5128) + ($189<<2)|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = $186 ^ $191;
  $193 = $6;
  $194 = $193 >>> 16;
  $195 = $194 & 255;
  $196 = ((6152) + ($195<<2)|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = $192 ^ $197;
  $199 = $6;
  $200 = $199 >>> 24;
  $201 = ((7176) + ($200<<2)|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = $198 ^ $202;
  $6 = $203;
  $204 = $7;
  $205 = ((($204)) + 4|0);
  $7 = $205;
  $206 = HEAP32[$204>>2]|0;
  $207 = $6;
  $208 = $207 ^ $206;
  $6 = $208;
  $209 = $6;
  $210 = $209 & 255;
  $211 = ((4104) + ($210<<2)|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = $6;
  $214 = $213 >>> 8;
  $215 = $214 & 255;
  $216 = ((5128) + ($215<<2)|0);
  $217 = HEAP32[$216>>2]|0;
  $218 = $212 ^ $217;
  $219 = $6;
  $220 = $219 >>> 16;
  $221 = $220 & 255;
  $222 = ((6152) + ($221<<2)|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = $218 ^ $223;
  $225 = $6;
  $226 = $225 >>> 24;
  $227 = ((7176) + ($226<<2)|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = $224 ^ $228;
  $6 = $229;
  $230 = $7;
  $231 = ((($230)) + 4|0);
  $7 = $231;
  $232 = HEAP32[$230>>2]|0;
  $233 = $6;
  $234 = $233 ^ $232;
  $6 = $234;
  $235 = $6;
  $236 = $235 & 255;
  $237 = ((4104) + ($236<<2)|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = $6;
  $240 = $239 >>> 8;
  $241 = $240 & 255;
  $242 = ((5128) + ($241<<2)|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = $238 ^ $243;
  $245 = $6;
  $246 = $245 >>> 16;
  $247 = $246 & 255;
  $248 = ((6152) + ($247<<2)|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = $244 ^ $249;
  $251 = $6;
  $252 = $251 >>> 24;
  $253 = ((7176) + ($252<<2)|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = $250 ^ $254;
  $6 = $255;
  $256 = $5;
  $257 = (($256) - 32)|0;
  $5 = $257;
 }
 while(1) {
  $258 = $5;
  $259 = ($258>>>0)>=(4);
  $260 = $7;
  if (!($259)) {
   break;
  }
  $261 = ((($260)) + 4|0);
  $7 = $261;
  $262 = HEAP32[$260>>2]|0;
  $263 = $6;
  $264 = $263 ^ $262;
  $6 = $264;
  $265 = $6;
  $266 = $265 & 255;
  $267 = ((4104) + ($266<<2)|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = $6;
  $270 = $269 >>> 8;
  $271 = $270 & 255;
  $272 = ((5128) + ($271<<2)|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = $268 ^ $273;
  $275 = $6;
  $276 = $275 >>> 16;
  $277 = $276 & 255;
  $278 = ((6152) + ($277<<2)|0);
  $279 = HEAP32[$278>>2]|0;
  $280 = $274 ^ $279;
  $281 = $6;
  $282 = $281 >>> 24;
  $283 = ((7176) + ($282<<2)|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = $280 ^ $284;
  $6 = $285;
  $286 = $5;
  $287 = (($286) - 4)|0;
  $5 = $287;
 }
 $4 = $260;
 $288 = $5;
 $289 = ($288|0)!=(0);
 if (!($289)) {
  $305 = $6;
  $306 = $305 ^ -1;
  $6 = $306;
  $307 = $6;
  $308 = $307 >>> 24;
  $309 = $308 & 255;
  $310 = $6;
  $311 = $310 >>> 8;
  $312 = $311 & 65280;
  $313 = (($309) + ($312))|0;
  $314 = $6;
  $315 = $314 & 65280;
  $316 = $315 << 8;
  $317 = (($313) + ($316))|0;
  $318 = $6;
  $319 = $318 & 255;
  $320 = $319 << 24;
  $321 = (($317) + ($320))|0;
  STACKTOP = sp;return ($321|0);
 }
 while(1) {
  $290 = $6;
  $291 = $290 >>> 24;
  $292 = $4;
  $293 = ((($292)) + 1|0);
  $4 = $293;
  $294 = HEAP8[$292>>0]|0;
  $295 = $294&255;
  $296 = $291 ^ $295;
  $297 = ((4104) + ($296<<2)|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = $6;
  $300 = $299 << 8;
  $301 = $298 ^ $300;
  $6 = $301;
  $302 = $5;
  $303 = (($302) + -1)|0;
  $5 = $303;
  $304 = ($303|0)!=(0);
  if (!($304)) {
   break;
  }
 }
 $305 = $6;
 $306 = $305 ^ -1;
 $6 = $306;
 $307 = $6;
 $308 = $307 >>> 24;
 $309 = $308 & 255;
 $310 = $6;
 $311 = $310 >>> 8;
 $312 = $311 & 65280;
 $313 = (($309) + ($312))|0;
 $314 = $6;
 $315 = $314 & 65280;
 $316 = $315 << 8;
 $317 = (($313) + ($316))|0;
 $318 = $6;
 $319 = $318 & 255;
 $320 = $319 << 24;
 $321 = (($317) + ($320))|0;
 STACKTOP = sp;return ($321|0);
}
function _crc32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = (_crc32_z($6,$7,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _deflateInit2_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $18 = 1;
 $20 = $15;
 $21 = ($20|0)==(0|0);
 if (!($21)) {
  $22 = $15;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $25 = HEAP8[18804]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($24|0)!=($26|0);
  $28 = $16;
  $29 = ($28|0)!=(56);
  $or$cond = $27 | $29;
  if (!($or$cond)) {
   $30 = $9;
   $31 = ($30|0)==(0|0);
   if ($31) {
    $8 = -2;
    $256 = $8;
    STACKTOP = sp;return ($256|0);
   }
   $32 = $9;
   $33 = ((($32)) + 24|0);
   HEAP32[$33>>2] = 0;
   $34 = $9;
   $35 = ((($34)) + 32|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(0|0);
   if ($37) {
    $38 = $9;
    $39 = ((($38)) + 32|0);
    HEAP32[$39>>2] = 33;
    $40 = $9;
    $41 = ((($40)) + 40|0);
    HEAP32[$41>>2] = 0;
   }
   $42 = $9;
   $43 = ((($42)) + 36|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(0|0);
   if ($45) {
    $46 = $9;
    $47 = ((($46)) + 36|0);
    HEAP32[$47>>2] = 34;
   }
   $48 = $10;
   $49 = ($48|0)==(-1);
   if ($49) {
    $10 = 6;
   }
   $50 = $12;
   $51 = ($50|0)<(0);
   if ($51) {
    $18 = 0;
    $52 = $12;
    $53 = (0 - ($52))|0;
    $12 = $53;
   } else {
    $54 = $12;
    $55 = ($54|0)>(15);
    if ($55) {
     $18 = 2;
     $56 = $12;
     $57 = (($56) - 16)|0;
     $12 = $57;
    }
   }
   $58 = $13;
   $59 = ($58|0)<(1);
   $60 = $13;
   $61 = ($60|0)>(9);
   $or$cond3 = $59 | $61;
   $62 = $11;
   $63 = ($62|0)!=(8);
   $or$cond5 = $or$cond3 | $63;
   $64 = $12;
   $65 = ($64|0)<(8);
   $or$cond7 = $or$cond5 | $65;
   $66 = $12;
   $67 = ($66|0)>(15);
   $or$cond9 = $or$cond7 | $67;
   $68 = $10;
   $69 = ($68|0)<(0);
   $or$cond11 = $or$cond9 | $69;
   $70 = $10;
   $71 = ($70|0)>(9);
   $or$cond13 = $or$cond11 | $71;
   $72 = $14;
   $73 = ($72|0)<(0);
   $or$cond15 = $or$cond13 | $73;
   $74 = $14;
   $75 = ($74|0)>(4);
   $or$cond17 = $or$cond15 | $75;
   if (!($or$cond17)) {
    $76 = $12;
    $77 = ($76|0)==(8);
    $78 = $18;
    $79 = ($78|0)!=(1);
    $or$cond19 = $77 & $79;
    if (!($or$cond19)) {
     $80 = $12;
     $81 = ($80|0)==(8);
     if ($81) {
      $12 = 9;
     }
     $82 = $9;
     $83 = ((($82)) + 32|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = $9;
     $86 = ((($85)) + 40|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (FUNCTION_TABLE_iiii[$84 & 127]($87,1,5828)|0);
     $17 = $88;
     $89 = $17;
     $90 = ($89|0)==(0|0);
     if ($90) {
      $8 = -4;
      $256 = $8;
      STACKTOP = sp;return ($256|0);
     }
     $91 = $17;
     $92 = $9;
     $93 = ((($92)) + 28|0);
     HEAP32[$93>>2] = $91;
     $94 = $9;
     $95 = $17;
     HEAP32[$95>>2] = $94;
     $96 = $17;
     $97 = ((($96)) + 4|0);
     HEAP32[$97>>2] = 42;
     $98 = $18;
     $99 = $17;
     $100 = ((($99)) + 24|0);
     HEAP32[$100>>2] = $98;
     $101 = $17;
     $102 = ((($101)) + 28|0);
     HEAP32[$102>>2] = 0;
     $103 = $12;
     $104 = $17;
     $105 = ((($104)) + 48|0);
     HEAP32[$105>>2] = $103;
     $106 = $17;
     $107 = ((($106)) + 48|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = 1 << $108;
     $110 = $17;
     $111 = ((($110)) + 44|0);
     HEAP32[$111>>2] = $109;
     $112 = $17;
     $113 = ((($112)) + 44|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = (($114) - 1)|0;
     $116 = $17;
     $117 = ((($116)) + 52|0);
     HEAP32[$117>>2] = $115;
     $118 = $13;
     $119 = (($118) + 7)|0;
     $120 = $17;
     $121 = ((($120)) + 80|0);
     HEAP32[$121>>2] = $119;
     $122 = $17;
     $123 = ((($122)) + 80|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = 1 << $124;
     $126 = $17;
     $127 = ((($126)) + 76|0);
     HEAP32[$127>>2] = $125;
     $128 = $17;
     $129 = ((($128)) + 76|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($130) - 1)|0;
     $132 = $17;
     $133 = ((($132)) + 84|0);
     HEAP32[$133>>2] = $131;
     $134 = $17;
     $135 = ((($134)) + 80|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($136) + 3)|0;
     $138 = (($137) - 1)|0;
     $139 = (($138>>>0) / 3)&-1;
     $140 = $17;
     $141 = ((($140)) + 88|0);
     HEAP32[$141>>2] = $139;
     $142 = $9;
     $143 = ((($142)) + 32|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = $9;
     $146 = ((($145)) + 40|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = $17;
     $149 = ((($148)) + 44|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = (FUNCTION_TABLE_iiii[$144 & 127]($147,$150,2)|0);
     $152 = $17;
     $153 = ((($152)) + 56|0);
     HEAP32[$153>>2] = $151;
     $154 = $9;
     $155 = ((($154)) + 32|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = $9;
     $158 = ((($157)) + 40|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = $17;
     $161 = ((($160)) + 44|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = (FUNCTION_TABLE_iiii[$156 & 127]($159,$162,2)|0);
     $164 = $17;
     $165 = ((($164)) + 64|0);
     HEAP32[$165>>2] = $163;
     $166 = $9;
     $167 = ((($166)) + 32|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = $9;
     $170 = ((($169)) + 40|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = $17;
     $173 = ((($172)) + 76|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = (FUNCTION_TABLE_iiii[$168 & 127]($171,$174,2)|0);
     $176 = $17;
     $177 = ((($176)) + 68|0);
     HEAP32[$177>>2] = $175;
     $178 = $17;
     $179 = ((($178)) + 5824|0);
     HEAP32[$179>>2] = 0;
     $180 = $13;
     $181 = (($180) + 6)|0;
     $182 = 1 << $181;
     $183 = $17;
     $184 = ((($183)) + 5788|0);
     HEAP32[$184>>2] = $182;
     $185 = $9;
     $186 = ((($185)) + 32|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = $9;
     $189 = ((($188)) + 40|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = $17;
     $192 = ((($191)) + 5788|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (FUNCTION_TABLE_iiii[$187 & 127]($190,$193,4)|0);
     $19 = $194;
     $195 = $19;
     $196 = $17;
     $197 = ((($196)) + 8|0);
     HEAP32[$197>>2] = $195;
     $198 = $17;
     $199 = ((($198)) + 5788|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = $200<<2;
     $202 = $17;
     $203 = ((($202)) + 12|0);
     HEAP32[$203>>2] = $201;
     $204 = $17;
     $205 = ((($204)) + 56|0);
     $206 = HEAP32[$205>>2]|0;
     $207 = ($206|0)==(0|0);
     if (!($207)) {
      $208 = $17;
      $209 = ((($208)) + 64|0);
      $210 = HEAP32[$209>>2]|0;
      $211 = ($210|0)==(0|0);
      if (!($211)) {
       $212 = $17;
       $213 = ((($212)) + 68|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = ($214|0)==(0|0);
       if (!($215)) {
        $216 = $17;
        $217 = ((($216)) + 8|0);
        $218 = HEAP32[$217>>2]|0;
        $219 = ($218|0)==(0|0);
        if (!($219)) {
         $226 = $19;
         $227 = $17;
         $228 = ((($227)) + 5788|0);
         $229 = HEAP32[$228>>2]|0;
         $230 = (($229>>>0) / 2)&-1;
         $231 = (($226) + ($230<<1)|0);
         $232 = $17;
         $233 = ((($232)) + 5796|0);
         HEAP32[$233>>2] = $231;
         $234 = $17;
         $235 = ((($234)) + 8|0);
         $236 = HEAP32[$235>>2]|0;
         $237 = $17;
         $238 = ((($237)) + 5788|0);
         $239 = HEAP32[$238>>2]|0;
         $240 = ($239*3)|0;
         $241 = (($236) + ($240)|0);
         $242 = $17;
         $243 = ((($242)) + 5784|0);
         HEAP32[$243>>2] = $241;
         $244 = $10;
         $245 = $17;
         $246 = ((($245)) + 132|0);
         HEAP32[$246>>2] = $244;
         $247 = $14;
         $248 = $17;
         $249 = ((($248)) + 136|0);
         HEAP32[$249>>2] = $247;
         $250 = $11;
         $251 = $250&255;
         $252 = $17;
         $253 = ((($252)) + 36|0);
         HEAP8[$253>>0] = $251;
         $254 = $9;
         $255 = (_deflateReset($254)|0);
         $8 = $255;
         $256 = $8;
         STACKTOP = sp;return ($256|0);
        }
       }
      }
     }
     $220 = $17;
     $221 = ((($220)) + 4|0);
     HEAP32[$221>>2] = 666;
     $222 = HEAP32[(8952)>>2]|0;
     $223 = $9;
     $224 = ((($223)) + 24|0);
     HEAP32[$224>>2] = $222;
     $225 = $9;
     (_deflateEnd($225)|0);
     $8 = -4;
     $256 = $8;
     STACKTOP = sp;return ($256|0);
    }
   }
   $8 = -2;
   $256 = $8;
   STACKTOP = sp;return ($256|0);
  }
 }
 $8 = -6;
 $256 = $8;
 STACKTOP = sp;return ($256|0);
}
function _deflateEnd($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (_deflateStateCheck($4)|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $1 = -2;
  $94 = $1;
  STACKTOP = sp;return ($94|0);
 }
 $7 = $2;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $3 = $11;
 $12 = $2;
 $13 = ((($12)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $2;
  $19 = ((($18)) + 36|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $2;
  $22 = ((($21)) + 40|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $2;
  $25 = ((($24)) + 28|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  FUNCTION_TABLE_vii[$20 & 63]($23,$28);
 }
 $29 = $2;
 $30 = ((($29)) + 28|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 68|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $35 = $2;
  $36 = ((($35)) + 36|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $2;
  $39 = ((($38)) + 40|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $2;
  $42 = ((($41)) + 28|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($43)) + 68|0);
  $45 = HEAP32[$44>>2]|0;
  FUNCTION_TABLE_vii[$37 & 63]($40,$45);
 }
 $46 = $2;
 $47 = ((($46)) + 28|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($48)) + 64|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)!=(0|0);
 if ($51) {
  $52 = $2;
  $53 = ((($52)) + 36|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $2;
  $56 = ((($55)) + 40|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $2;
  $59 = ((($58)) + 28|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($60)) + 64|0);
  $62 = HEAP32[$61>>2]|0;
  FUNCTION_TABLE_vii[$54 & 63]($57,$62);
 }
 $63 = $2;
 $64 = ((($63)) + 28|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ((($65)) + 56|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)!=(0|0);
 if ($68) {
  $69 = $2;
  $70 = ((($69)) + 36|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $2;
  $73 = ((($72)) + 40|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $2;
  $76 = ((($75)) + 28|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($77)) + 56|0);
  $79 = HEAP32[$78>>2]|0;
  FUNCTION_TABLE_vii[$71 & 63]($74,$79);
 }
 $80 = $2;
 $81 = ((($80)) + 36|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = $2;
 $84 = ((($83)) + 40|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $2;
 $87 = ((($86)) + 28|0);
 $88 = HEAP32[$87>>2]|0;
 FUNCTION_TABLE_vii[$82 & 63]($85,$88);
 $89 = $2;
 $90 = ((($89)) + 28|0);
 HEAP32[$90>>2] = 0;
 $91 = $3;
 $92 = ($91|0)==(113);
 $93 = $92 ? -3 : 0;
 $1 = $93;
 $94 = $1;
 STACKTOP = sp;return ($94|0);
}
function _deflateReset($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_deflateResetKeep($3)|0);
 $2 = $4;
 $5 = $2;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $1;
  $8 = ((($7)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  _lm_init($9);
 }
 $10 = $2;
 STACKTOP = sp;return ($10|0);
}
function _deflateResetKeep($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (_deflateStateCheck($4)|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $1 = -2;
  $59 = $1;
  STACKTOP = sp;return ($59|0);
 }
 $7 = $2;
 $8 = ((($7)) + 20|0);
 HEAP32[$8>>2] = 0;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 HEAP32[$10>>2] = 0;
 $11 = $2;
 $12 = ((($11)) + 24|0);
 HEAP32[$12>>2] = 0;
 $13 = $2;
 $14 = ((($13)) + 44|0);
 HEAP32[$14>>2] = 2;
 $15 = $2;
 $16 = ((($15)) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $3 = $17;
 $18 = $3;
 $19 = ((($18)) + 20|0);
 HEAP32[$19>>2] = 0;
 $20 = $3;
 $21 = ((($20)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $3;
 $24 = ((($23)) + 16|0);
 HEAP32[$24>>2] = $22;
 $25 = $3;
 $26 = ((($25)) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)<(0);
 if ($28) {
  $29 = $3;
  $30 = ((($29)) + 24|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (0 - ($31))|0;
  $33 = $3;
  $34 = ((($33)) + 24|0);
  HEAP32[$34>>2] = $32;
 }
 $35 = $3;
 $36 = ((($35)) + 24|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(2);
 if ($38) {
  $46 = 57;
 } else {
  $39 = $3;
  $40 = ((($39)) + 24|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0);
  $43 = $42 ? 42 : 113;
  $46 = $43;
 }
 $44 = $3;
 $45 = ((($44)) + 4|0);
 HEAP32[$45>>2] = $46;
 $47 = $3;
 $48 = ((($47)) + 24|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(2);
 if ($50) {
  $51 = (_crc32(0,0,0)|0);
  $55 = $51;
 } else {
  $52 = (_adler32(0,0,0)|0);
  $55 = $52;
 }
 $53 = $2;
 $54 = ((($53)) + 48|0);
 HEAP32[$54>>2] = $55;
 $56 = $3;
 $57 = ((($56)) + 40|0);
 HEAP32[$57>>2] = 0;
 $58 = $3;
 __tr_init($58);
 $1 = 0;
 $59 = $1;
 STACKTOP = sp;return ($59|0);
}
function _lm_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4<<1;
 $6 = $1;
 $7 = ((($6)) + 60|0);
 HEAP32[$7>>2] = $5;
 $8 = $1;
 $9 = ((($8)) + 76|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - 1)|0;
 $12 = $1;
 $13 = ((($12)) + 68|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($11<<1)|0);
 HEAP16[$15>>1] = 0;
 $16 = $1;
 $17 = ((($16)) + 68|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $1;
 $20 = ((($19)) + 76|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) - 1)|0;
 $23 = $22<<1;
 _memset(($18|0),0,($23|0))|0;
 $24 = $1;
 $25 = ((($24)) + 132|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (8200 + (($26*12)|0)|0);
 $28 = ((($27)) + 2|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29&65535;
 $31 = $1;
 $32 = ((($31)) + 128|0);
 HEAP32[$32>>2] = $30;
 $33 = $1;
 $34 = ((($33)) + 132|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (8200 + (($35*12)|0)|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $37&65535;
 $39 = $1;
 $40 = ((($39)) + 140|0);
 HEAP32[$40>>2] = $38;
 $41 = $1;
 $42 = ((($41)) + 132|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (8200 + (($43*12)|0)|0);
 $45 = ((($44)) + 4|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = $46&65535;
 $48 = $1;
 $49 = ((($48)) + 144|0);
 HEAP32[$49>>2] = $47;
 $50 = $1;
 $51 = ((($50)) + 132|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (8200 + (($52*12)|0)|0);
 $54 = ((($53)) + 6|0);
 $55 = HEAP16[$54>>1]|0;
 $56 = $55&65535;
 $57 = $1;
 $58 = ((($57)) + 124|0);
 HEAP32[$58>>2] = $56;
 $59 = $1;
 $60 = ((($59)) + 108|0);
 HEAP32[$60>>2] = 0;
 $61 = $1;
 $62 = ((($61)) + 92|0);
 HEAP32[$62>>2] = 0;
 $63 = $1;
 $64 = ((($63)) + 116|0);
 HEAP32[$64>>2] = 0;
 $65 = $1;
 $66 = ((($65)) + 5812|0);
 HEAP32[$66>>2] = 0;
 $67 = $1;
 $68 = ((($67)) + 120|0);
 HEAP32[$68>>2] = 2;
 $69 = $1;
 $70 = ((($69)) + 96|0);
 HEAP32[$70>>2] = 2;
 $71 = $1;
 $72 = ((($71)) + 104|0);
 HEAP32[$72>>2] = 0;
 $73 = $1;
 $74 = ((($73)) + 72|0);
 HEAP32[$74>>2] = 0;
 STACKTOP = sp;return;
}
function _deflate_stored($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $11 = $3;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) - 5)|0;
 $15 = $3;
 $16 = ((($15)) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14>>>0)>($17>>>0);
 $19 = $3;
 if ($18) {
  $20 = ((($19)) + 44|0);
  $21 = HEAP32[$20>>2]|0;
  $25 = $21;
 } else {
  $22 = ((($19)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) - 5)|0;
  $25 = $24;
 }
 $5 = $25;
 $9 = 0;
 $26 = $3;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $10 = $29;
 while(1) {
  $6 = 65535;
  $30 = $3;
  $31 = ((($30)) + 5820|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 42)|0;
  $34 = $33 >> 3;
  $8 = $34;
  $35 = $3;
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($36)) + 16|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $8;
  $40 = ($38>>>0)<($39>>>0);
  if ($40) {
   break;
  }
  $41 = $3;
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($42)) + 16|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $8;
  $46 = (($44) - ($45))|0;
  $8 = $46;
  $47 = $3;
  $48 = ((($47)) + 108|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $3;
  $51 = ((($50)) + 92|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($49) - ($52))|0;
  $7 = $53;
  $54 = $6;
  $55 = $7;
  $56 = $3;
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($55) + ($59))|0;
  $61 = ($54>>>0)>($60>>>0);
  if ($61) {
   $62 = $7;
   $63 = $3;
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($62) + ($66))|0;
   $6 = $67;
  }
  $68 = $6;
  $69 = $8;
  $70 = ($68>>>0)>($69>>>0);
  if ($70) {
   $71 = $8;
   $6 = $71;
  }
  $72 = $7;
  $73 = $6;
  $74 = ($72>>>0)>($73>>>0);
  if ($74) {
   $75 = $6;
   $7 = $75;
  }
  $76 = $6;
  $77 = $5;
  $78 = ($76>>>0)<($77>>>0);
  if ($78) {
   $79 = $6;
   $80 = ($79|0)==(0);
   $81 = $4;
   $82 = ($81|0)!=(4);
   $or$cond = $80 & $82;
   $83 = $4;
   $84 = ($83|0)==(0);
   $or$cond3 = $or$cond | $84;
   if ($or$cond3) {
    break;
   }
   $85 = $6;
   $86 = $7;
   $87 = (($85) - ($86))|0;
   $88 = $3;
   $89 = HEAP32[$88>>2]|0;
   $90 = ((($89)) + 4|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ($87|0)!=($91|0);
   if ($92) {
    break;
   }
  }
  $93 = $4;
  $94 = ($93|0)==(4);
  if ($94) {
   $95 = $6;
   $96 = $7;
   $97 = (($95) - ($96))|0;
   $98 = $3;
   $99 = HEAP32[$98>>2]|0;
   $100 = ((($99)) + 4|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($97|0)==($101|0);
   $103 = $102;
  } else {
   $103 = 0;
  }
  $104 = $103 ? 1 : 0;
  $9 = $104;
  $105 = $3;
  $106 = $9;
  __tr_stored_block($105,0,0,$106);
  $107 = $6;
  $108 = $107&255;
  $109 = $3;
  $110 = ((($109)) + 20|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) - 4)|0;
  $113 = $3;
  $114 = ((($113)) + 8|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (($115) + ($112)|0);
  HEAP8[$116>>0] = $108;
  $117 = $6;
  $118 = $117 >>> 8;
  $119 = $118&255;
  $120 = $3;
  $121 = ((($120)) + 20|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($122) - 3)|0;
  $124 = $3;
  $125 = ((($124)) + 8|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (($126) + ($123)|0);
  HEAP8[$127>>0] = $119;
  $128 = $6;
  $129 = $128 ^ -1;
  $130 = $129&255;
  $131 = $3;
  $132 = ((($131)) + 20|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (($133) - 2)|0;
  $135 = $3;
  $136 = ((($135)) + 8|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (($137) + ($134)|0);
  HEAP8[$138>>0] = $130;
  $139 = $6;
  $140 = $139 ^ -1;
  $141 = $140 >>> 8;
  $142 = $141&255;
  $143 = $3;
  $144 = ((($143)) + 20|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = (($145) - 1)|0;
  $147 = $3;
  $148 = ((($147)) + 8|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($149) + ($146)|0);
  HEAP8[$150>>0] = $142;
  $151 = $3;
  $152 = HEAP32[$151>>2]|0;
  _flush_pending($152);
  $153 = $7;
  $154 = ($153|0)!=(0);
  if ($154) {
   $155 = $3;
   $156 = HEAP32[$155>>2]|0;
   $157 = ((($156)) + 12|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = $3;
   $160 = ((($159)) + 56|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = $3;
   $163 = ((($162)) + 92|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = (($161) + ($164)|0);
   $166 = $7;
   _memcpy(($158|0),($165|0),($166|0))|0;
   $167 = $7;
   $168 = $3;
   $169 = HEAP32[$168>>2]|0;
   $170 = ((($169)) + 12|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (($171) + ($167)|0);
   HEAP32[$170>>2] = $172;
   $173 = $7;
   $174 = $3;
   $175 = HEAP32[$174>>2]|0;
   $176 = ((($175)) + 16|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = (($177) - ($173))|0;
   HEAP32[$176>>2] = $178;
   $179 = $7;
   $180 = $3;
   $181 = HEAP32[$180>>2]|0;
   $182 = ((($181)) + 20|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = (($183) + ($179))|0;
   HEAP32[$182>>2] = $184;
   $185 = $7;
   $186 = $3;
   $187 = ((($186)) + 92|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = (($188) + ($185))|0;
   HEAP32[$187>>2] = $189;
   $190 = $7;
   $191 = $6;
   $192 = (($191) - ($190))|0;
   $6 = $192;
  }
  $193 = $6;
  $194 = ($193|0)!=(0);
  if ($194) {
   $195 = $3;
   $196 = HEAP32[$195>>2]|0;
   $197 = $3;
   $198 = HEAP32[$197>>2]|0;
   $199 = ((($198)) + 12|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = $6;
   (_read_buf($196,$200,$201)|0);
   $202 = $6;
   $203 = $3;
   $204 = HEAP32[$203>>2]|0;
   $205 = ((($204)) + 12|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = (($206) + ($202)|0);
   HEAP32[$205>>2] = $207;
   $208 = $6;
   $209 = $3;
   $210 = HEAP32[$209>>2]|0;
   $211 = ((($210)) + 16|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = (($212) - ($208))|0;
   HEAP32[$211>>2] = $213;
   $214 = $6;
   $215 = $3;
   $216 = HEAP32[$215>>2]|0;
   $217 = ((($216)) + 20|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = (($218) + ($214))|0;
   HEAP32[$217>>2] = $219;
  }
  $220 = $9;
  $221 = ($220|0)==(0);
  if (!($221)) {
   break;
  }
 }
 $222 = $3;
 $223 = HEAP32[$222>>2]|0;
 $224 = ((($223)) + 4|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = $10;
 $227 = (($226) - ($225))|0;
 $10 = $227;
 $228 = $10;
 $229 = ($228|0)!=(0);
 if ($229) {
  $230 = $10;
  $231 = $3;
  $232 = ((($231)) + 44|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = ($230>>>0)>=($233>>>0);
  $235 = $3;
  if ($234) {
   $236 = ((($235)) + 5808|0);
   HEAP32[$236>>2] = 2;
   $237 = $3;
   $238 = ((($237)) + 56|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = $3;
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[$241>>2]|0;
   $243 = $3;
   $244 = ((($243)) + 44|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = (0 - ($245))|0;
   $247 = (($242) + ($246)|0);
   $248 = $3;
   $249 = ((($248)) + 44|0);
   $250 = HEAP32[$249>>2]|0;
   _memcpy(($239|0),($247|0),($250|0))|0;
   $251 = $3;
   $252 = ((($251)) + 44|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = $3;
   $255 = ((($254)) + 108|0);
   HEAP32[$255>>2] = $253;
  } else {
   $256 = ((($235)) + 60|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = $3;
   $259 = ((($258)) + 108|0);
   $260 = HEAP32[$259>>2]|0;
   $261 = (($257) - ($260))|0;
   $262 = $10;
   $263 = ($261>>>0)<=($262>>>0);
   if ($263) {
    $264 = $3;
    $265 = ((($264)) + 44|0);
    $266 = HEAP32[$265>>2]|0;
    $267 = $3;
    $268 = ((($267)) + 108|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = (($269) - ($266))|0;
    HEAP32[$268>>2] = $270;
    $271 = $3;
    $272 = ((($271)) + 56|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = $3;
    $275 = ((($274)) + 56|0);
    $276 = HEAP32[$275>>2]|0;
    $277 = $3;
    $278 = ((($277)) + 44|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = (($276) + ($279)|0);
    $281 = $3;
    $282 = ((($281)) + 108|0);
    $283 = HEAP32[$282>>2]|0;
    _memcpy(($273|0),($280|0),($283|0))|0;
    $284 = $3;
    $285 = ((($284)) + 5808|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = ($286>>>0)<(2);
    if ($287) {
     $288 = $3;
     $289 = ((($288)) + 5808|0);
     $290 = HEAP32[$289>>2]|0;
     $291 = (($290) + 1)|0;
     HEAP32[$289>>2] = $291;
    }
   }
   $292 = $3;
   $293 = ((($292)) + 56|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = $3;
   $296 = ((($295)) + 108|0);
   $297 = HEAP32[$296>>2]|0;
   $298 = (($294) + ($297)|0);
   $299 = $3;
   $300 = HEAP32[$299>>2]|0;
   $301 = HEAP32[$300>>2]|0;
   $302 = $10;
   $303 = (0 - ($302))|0;
   $304 = (($301) + ($303)|0);
   $305 = $10;
   _memcpy(($298|0),($304|0),($305|0))|0;
   $306 = $10;
   $307 = $3;
   $308 = ((($307)) + 108|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = (($309) + ($306))|0;
   HEAP32[$308>>2] = $310;
  }
  $311 = $3;
  $312 = ((($311)) + 108|0);
  $313 = HEAP32[$312>>2]|0;
  $314 = $3;
  $315 = ((($314)) + 92|0);
  HEAP32[$315>>2] = $313;
  $316 = $10;
  $317 = $3;
  $318 = ((($317)) + 44|0);
  $319 = HEAP32[$318>>2]|0;
  $320 = $3;
  $321 = ((($320)) + 5812|0);
  $322 = HEAP32[$321>>2]|0;
  $323 = (($319) - ($322))|0;
  $324 = ($316>>>0)>($323>>>0);
  if ($324) {
   $325 = $3;
   $326 = ((($325)) + 44|0);
   $327 = HEAP32[$326>>2]|0;
   $328 = $3;
   $329 = ((($328)) + 5812|0);
   $330 = HEAP32[$329>>2]|0;
   $331 = (($327) - ($330))|0;
   $337 = $331;
  } else {
   $332 = $10;
   $337 = $332;
  }
  $333 = $3;
  $334 = ((($333)) + 5812|0);
  $335 = HEAP32[$334>>2]|0;
  $336 = (($335) + ($337))|0;
  HEAP32[$334>>2] = $336;
 }
 $338 = $9;
 $339 = ($338|0)!=(0);
 if ($339) {
  $2 = 3;
  $533 = $2;
  STACKTOP = sp;return ($533|0);
 }
 $340 = $4;
 $341 = ($340|0)!=(0);
 $342 = $4;
 $343 = ($342|0)!=(4);
 $or$cond5 = $341 & $343;
 if ($or$cond5) {
  $344 = $3;
  $345 = HEAP32[$344>>2]|0;
  $346 = ((($345)) + 4|0);
  $347 = HEAP32[$346>>2]|0;
  $348 = ($347|0)==(0);
  if ($348) {
   $349 = $3;
   $350 = ((($349)) + 108|0);
   $351 = HEAP32[$350>>2]|0;
   $352 = $3;
   $353 = ((($352)) + 92|0);
   $354 = HEAP32[$353>>2]|0;
   $355 = ($351|0)==($354|0);
   if ($355) {
    $2 = 1;
    $533 = $2;
    STACKTOP = sp;return ($533|0);
   }
  }
 }
 $356 = $3;
 $357 = ((($356)) + 60|0);
 $358 = HEAP32[$357>>2]|0;
 $359 = $3;
 $360 = ((($359)) + 108|0);
 $361 = HEAP32[$360>>2]|0;
 $362 = (($358) - ($361))|0;
 $363 = (($362) - 1)|0;
 $8 = $363;
 $364 = $3;
 $365 = HEAP32[$364>>2]|0;
 $366 = ((($365)) + 4|0);
 $367 = HEAP32[$366>>2]|0;
 $368 = $8;
 $369 = ($367>>>0)>($368>>>0);
 if ($369) {
  $370 = $3;
  $371 = ((($370)) + 92|0);
  $372 = HEAP32[$371>>2]|0;
  $373 = $3;
  $374 = ((($373)) + 44|0);
  $375 = HEAP32[$374>>2]|0;
  $376 = ($372|0)>=($375|0);
  if ($376) {
   $377 = $3;
   $378 = ((($377)) + 44|0);
   $379 = HEAP32[$378>>2]|0;
   $380 = $3;
   $381 = ((($380)) + 92|0);
   $382 = HEAP32[$381>>2]|0;
   $383 = (($382) - ($379))|0;
   HEAP32[$381>>2] = $383;
   $384 = $3;
   $385 = ((($384)) + 44|0);
   $386 = HEAP32[$385>>2]|0;
   $387 = $3;
   $388 = ((($387)) + 108|0);
   $389 = HEAP32[$388>>2]|0;
   $390 = (($389) - ($386))|0;
   HEAP32[$388>>2] = $390;
   $391 = $3;
   $392 = ((($391)) + 56|0);
   $393 = HEAP32[$392>>2]|0;
   $394 = $3;
   $395 = ((($394)) + 56|0);
   $396 = HEAP32[$395>>2]|0;
   $397 = $3;
   $398 = ((($397)) + 44|0);
   $399 = HEAP32[$398>>2]|0;
   $400 = (($396) + ($399)|0);
   $401 = $3;
   $402 = ((($401)) + 108|0);
   $403 = HEAP32[$402>>2]|0;
   _memcpy(($393|0),($400|0),($403|0))|0;
   $404 = $3;
   $405 = ((($404)) + 5808|0);
   $406 = HEAP32[$405>>2]|0;
   $407 = ($406>>>0)<(2);
   if ($407) {
    $408 = $3;
    $409 = ((($408)) + 5808|0);
    $410 = HEAP32[$409>>2]|0;
    $411 = (($410) + 1)|0;
    HEAP32[$409>>2] = $411;
   }
   $412 = $3;
   $413 = ((($412)) + 44|0);
   $414 = HEAP32[$413>>2]|0;
   $415 = $8;
   $416 = (($415) + ($414))|0;
   $8 = $416;
  }
 }
 $417 = $8;
 $418 = $3;
 $419 = HEAP32[$418>>2]|0;
 $420 = ((($419)) + 4|0);
 $421 = HEAP32[$420>>2]|0;
 $422 = ($417>>>0)>($421>>>0);
 if ($422) {
  $423 = $3;
  $424 = HEAP32[$423>>2]|0;
  $425 = ((($424)) + 4|0);
  $426 = HEAP32[$425>>2]|0;
  $8 = $426;
 }
 $427 = $8;
 $428 = ($427|0)!=(0);
 if ($428) {
  $429 = $3;
  $430 = HEAP32[$429>>2]|0;
  $431 = $3;
  $432 = ((($431)) + 56|0);
  $433 = HEAP32[$432>>2]|0;
  $434 = $3;
  $435 = ((($434)) + 108|0);
  $436 = HEAP32[$435>>2]|0;
  $437 = (($433) + ($436)|0);
  $438 = $8;
  (_read_buf($430,$437,$438)|0);
  $439 = $8;
  $440 = $3;
  $441 = ((($440)) + 108|0);
  $442 = HEAP32[$441>>2]|0;
  $443 = (($442) + ($439))|0;
  HEAP32[$441>>2] = $443;
 }
 $444 = $3;
 $445 = ((($444)) + 5820|0);
 $446 = HEAP32[$445>>2]|0;
 $447 = (($446) + 42)|0;
 $448 = $447 >> 3;
 $8 = $448;
 $449 = $3;
 $450 = ((($449)) + 12|0);
 $451 = HEAP32[$450>>2]|0;
 $452 = $8;
 $453 = (($451) - ($452))|0;
 $454 = ($453>>>0)>(65535);
 if ($454) {
  $460 = 65535;
 } else {
  $455 = $3;
  $456 = ((($455)) + 12|0);
  $457 = HEAP32[$456>>2]|0;
  $458 = $8;
  $459 = (($457) - ($458))|0;
  $460 = $459;
 }
 $8 = $460;
 $461 = $8;
 $462 = $3;
 $463 = ((($462)) + 44|0);
 $464 = HEAP32[$463>>2]|0;
 $465 = ($461>>>0)>($464>>>0);
 if ($465) {
  $466 = $3;
  $467 = ((($466)) + 44|0);
  $468 = HEAP32[$467>>2]|0;
  $470 = $468;
 } else {
  $469 = $8;
  $470 = $469;
 }
 $5 = $470;
 $471 = $3;
 $472 = ((($471)) + 108|0);
 $473 = HEAP32[$472>>2]|0;
 $474 = $3;
 $475 = ((($474)) + 92|0);
 $476 = HEAP32[$475>>2]|0;
 $477 = (($473) - ($476))|0;
 $7 = $477;
 $478 = $7;
 $479 = $5;
 $480 = ($478>>>0)>=($479>>>0);
 if ($480) {
  label = 57;
 } else {
  $481 = $7;
  $482 = ($481|0)!=(0);
  $483 = $4;
  $484 = ($483|0)==(4);
  $or$cond7 = $482 | $484;
  $485 = $4;
  $486 = ($485|0)!=(0);
  $or$cond9 = $or$cond7 & $486;
  if ($or$cond9) {
   $487 = $3;
   $488 = HEAP32[$487>>2]|0;
   $489 = ((($488)) + 4|0);
   $490 = HEAP32[$489>>2]|0;
   $491 = ($490|0)==(0);
   if ($491) {
    $492 = $7;
    $493 = $8;
    $494 = ($492>>>0)<=($493>>>0);
    if ($494) {
     label = 57;
    }
   }
  }
 }
 if ((label|0) == 57) {
  $495 = $7;
  $496 = $8;
  $497 = ($495>>>0)>($496>>>0);
  $498 = $8;
  $499 = $7;
  $500 = $497 ? $498 : $499;
  $6 = $500;
  $501 = $4;
  $502 = ($501|0)==(4);
  if ($502) {
   $503 = $3;
   $504 = HEAP32[$503>>2]|0;
   $505 = ((($504)) + 4|0);
   $506 = HEAP32[$505>>2]|0;
   $507 = ($506|0)==(0);
   if ($507) {
    $508 = $6;
    $509 = $7;
    $510 = ($508|0)==($509|0);
    $511 = $510;
   } else {
    $511 = 0;
   }
  } else {
   $511 = 0;
  }
  $512 = $511 ? 1 : 0;
  $9 = $512;
  $513 = $3;
  $514 = $3;
  $515 = ((($514)) + 56|0);
  $516 = HEAP32[$515>>2]|0;
  $517 = $3;
  $518 = ((($517)) + 92|0);
  $519 = HEAP32[$518>>2]|0;
  $520 = (($516) + ($519)|0);
  $521 = $6;
  $522 = $9;
  __tr_stored_block($513,$520,$521,$522);
  $523 = $6;
  $524 = $3;
  $525 = ((($524)) + 92|0);
  $526 = HEAP32[$525>>2]|0;
  $527 = (($526) + ($523))|0;
  HEAP32[$525>>2] = $527;
  $528 = $3;
  $529 = HEAP32[$528>>2]|0;
  _flush_pending($529);
 }
 $530 = $9;
 $531 = ($530|0)!=(0);
 $532 = $531 ? 2 : 0;
 $2 = $532;
 $533 = $2;
 STACKTOP = sp;return ($533|0);
}
function _deflate_fast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 while(1) {
  $10 = $3;
  $11 = ((($10)) + 116|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12>>>0)<(262);
  if ($13) {
   $14 = $3;
   _fill_window($14);
   $15 = $3;
   $16 = ((($15)) + 116|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17>>>0)<(262);
   $19 = $4;
   $20 = ($19|0)==(0);
   $or$cond = $18 & $20;
   if ($or$cond) {
    label = 4;
    break;
   }
   $21 = $3;
   $22 = ((($21)) + 116|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(0);
   if ($24) {
    label = 27;
    break;
   }
  }
  $5 = 0;
  $25 = $3;
  $26 = ((($25)) + 116|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27>>>0)>=(3);
  if ($28) {
   $29 = $3;
   $30 = ((($29)) + 72|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $3;
   $33 = ((($32)) + 88|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $31 << $34;
   $36 = $3;
   $37 = ((($36)) + 108|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + 2)|0;
   $40 = $3;
   $41 = ((($40)) + 56|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) + ($39)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = $35 ^ $45;
   $47 = $3;
   $48 = ((($47)) + 84|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $46 & $49;
   $51 = $3;
   $52 = ((($51)) + 72|0);
   HEAP32[$52>>2] = $50;
   $53 = $3;
   $54 = ((($53)) + 72|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $3;
   $57 = ((($56)) + 68|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($58) + ($55<<1)|0);
   $60 = HEAP16[$59>>1]|0;
   $61 = $3;
   $62 = ((($61)) + 108|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $3;
   $65 = ((($64)) + 52|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $63 & $66;
   $68 = $3;
   $69 = ((($68)) + 64|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($70) + ($67<<1)|0);
   HEAP16[$71>>1] = $60;
   $72 = $60&65535;
   $5 = $72;
   $73 = $3;
   $74 = ((($73)) + 108|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $75&65535;
   $77 = $3;
   $78 = ((($77)) + 72|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $3;
   $81 = ((($80)) + 68|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (($82) + ($79<<1)|0);
   HEAP16[$83>>1] = $76;
  }
  $84 = $5;
  $85 = ($84|0)!=(0);
  if ($85) {
   $86 = $3;
   $87 = ((($86)) + 108|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $5;
   $90 = (($88) - ($89))|0;
   $91 = $3;
   $92 = ((($91)) + 44|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($93) - 262)|0;
   $95 = ($90>>>0)<=($94>>>0);
   if ($95) {
    $96 = $3;
    $97 = $5;
    $98 = (_longest_match($96,$97)|0);
    $99 = $3;
    $100 = ((($99)) + 96|0);
    HEAP32[$100>>2] = $98;
   }
  }
  $101 = $3;
  $102 = ((($101)) + 96|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103>>>0)>=(3);
  $105 = $3;
  do {
   if ($104) {
    $106 = ((($105)) + 96|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (($107) - 3)|0;
    $109 = $108&255;
    $7 = $109;
    $110 = $3;
    $111 = ((($110)) + 108|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $3;
    $114 = ((($113)) + 112|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (($112) - ($115))|0;
    $117 = $116&65535;
    $8 = $117;
    $118 = $8;
    $119 = $3;
    $120 = ((($119)) + 5792|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = $3;
    $123 = ((($122)) + 5796|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (($124) + ($121<<1)|0);
    HEAP16[$125>>1] = $118;
    $126 = $7;
    $127 = $3;
    $128 = ((($127)) + 5792|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (($129) + 1)|0;
    HEAP32[$128>>2] = $130;
    $131 = $3;
    $132 = ((($131)) + 5784|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (($133) + ($129)|0);
    HEAP8[$134>>0] = $126;
    $135 = $8;
    $136 = (($135) + -1)<<16>>16;
    $8 = $136;
    $137 = $7;
    $138 = $137&255;
    $139 = (14735 + ($138)|0);
    $140 = HEAP8[$139>>0]|0;
    $141 = $140&255;
    $142 = (($141) + 256)|0;
    $143 = (($142) + 1)|0;
    $144 = $3;
    $145 = ((($144)) + 148|0);
    $146 = (($145) + ($143<<2)|0);
    $147 = HEAP16[$146>>1]|0;
    $148 = (($147) + 1)<<16>>16;
    HEAP16[$146>>1] = $148;
    $149 = $8;
    $150 = $149&65535;
    $151 = ($150|0)<(256);
    $152 = $8;
    $153 = $152&65535;
    if ($151) {
     $154 = (14223 + ($153)|0);
     $155 = HEAP8[$154>>0]|0;
     $$sink = $155;
    } else {
     $156 = $153 >> 7;
     $157 = (256 + ($156))|0;
     $158 = (14223 + ($157)|0);
     $159 = HEAP8[$158>>0]|0;
     $$sink = $159;
    }
    $160 = $$sink&255;
    $161 = $3;
    $162 = ((($161)) + 2440|0);
    $163 = (($162) + ($160<<2)|0);
    $164 = HEAP16[$163>>1]|0;
    $165 = (($164) + 1)<<16>>16;
    HEAP16[$163>>1] = $165;
    $166 = $3;
    $167 = ((($166)) + 5792|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = $3;
    $170 = ((($169)) + 5788|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = (($171) - 1)|0;
    $173 = ($168|0)==($172|0);
    $174 = $173&1;
    $6 = $174;
    $175 = $3;
    $176 = ((($175)) + 96|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = $3;
    $179 = ((($178)) + 116|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = (($180) - ($177))|0;
    HEAP32[$179>>2] = $181;
    $182 = $3;
    $183 = ((($182)) + 96|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = $3;
    $186 = ((($185)) + 128|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = ($184>>>0)<=($187>>>0);
    if ($188) {
     $189 = $3;
     $190 = ((($189)) + 116|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ($191>>>0)>=(3);
     if ($192) {
      $193 = $3;
      $194 = ((($193)) + 96|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = (($195) + -1)|0;
      HEAP32[$194>>2] = $196;
      while(1) {
       $197 = $3;
       $198 = ((($197)) + 108|0);
       $199 = HEAP32[$198>>2]|0;
       $200 = (($199) + 1)|0;
       HEAP32[$198>>2] = $200;
       $201 = $3;
       $202 = ((($201)) + 72|0);
       $203 = HEAP32[$202>>2]|0;
       $204 = $3;
       $205 = ((($204)) + 88|0);
       $206 = HEAP32[$205>>2]|0;
       $207 = $203 << $206;
       $208 = $3;
       $209 = ((($208)) + 108|0);
       $210 = HEAP32[$209>>2]|0;
       $211 = (($210) + 2)|0;
       $212 = $3;
       $213 = ((($212)) + 56|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = (($214) + ($211)|0);
       $216 = HEAP8[$215>>0]|0;
       $217 = $216&255;
       $218 = $207 ^ $217;
       $219 = $3;
       $220 = ((($219)) + 84|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = $218 & $221;
       $223 = $3;
       $224 = ((($223)) + 72|0);
       HEAP32[$224>>2] = $222;
       $225 = $3;
       $226 = ((($225)) + 72|0);
       $227 = HEAP32[$226>>2]|0;
       $228 = $3;
       $229 = ((($228)) + 68|0);
       $230 = HEAP32[$229>>2]|0;
       $231 = (($230) + ($227<<1)|0);
       $232 = HEAP16[$231>>1]|0;
       $233 = $3;
       $234 = ((($233)) + 108|0);
       $235 = HEAP32[$234>>2]|0;
       $236 = $3;
       $237 = ((($236)) + 52|0);
       $238 = HEAP32[$237>>2]|0;
       $239 = $235 & $238;
       $240 = $3;
       $241 = ((($240)) + 64|0);
       $242 = HEAP32[$241>>2]|0;
       $243 = (($242) + ($239<<1)|0);
       HEAP16[$243>>1] = $232;
       $244 = $232&65535;
       $5 = $244;
       $245 = $3;
       $246 = ((($245)) + 108|0);
       $247 = HEAP32[$246>>2]|0;
       $248 = $247&65535;
       $249 = $3;
       $250 = ((($249)) + 72|0);
       $251 = HEAP32[$250>>2]|0;
       $252 = $3;
       $253 = ((($252)) + 68|0);
       $254 = HEAP32[$253>>2]|0;
       $255 = (($254) + ($251<<1)|0);
       HEAP16[$255>>1] = $248;
       $256 = $3;
       $257 = ((($256)) + 96|0);
       $258 = HEAP32[$257>>2]|0;
       $259 = (($258) + -1)|0;
       HEAP32[$257>>2] = $259;
       $260 = ($259|0)!=(0);
       if (!($260)) {
        break;
       }
      }
      $261 = $3;
      $262 = ((($261)) + 108|0);
      $263 = HEAP32[$262>>2]|0;
      $264 = (($263) + 1)|0;
      HEAP32[$262>>2] = $264;
      break;
     }
    }
    $265 = $3;
    $266 = ((($265)) + 96|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = $3;
    $269 = ((($268)) + 108|0);
    $270 = HEAP32[$269>>2]|0;
    $271 = (($270) + ($267))|0;
    HEAP32[$269>>2] = $271;
    $272 = $3;
    $273 = ((($272)) + 96|0);
    HEAP32[$273>>2] = 0;
    $274 = $3;
    $275 = ((($274)) + 108|0);
    $276 = HEAP32[$275>>2]|0;
    $277 = $3;
    $278 = ((($277)) + 56|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = (($279) + ($276)|0);
    $281 = HEAP8[$280>>0]|0;
    $282 = $281&255;
    $283 = $3;
    $284 = ((($283)) + 72|0);
    HEAP32[$284>>2] = $282;
    $285 = $3;
    $286 = ((($285)) + 72|0);
    $287 = HEAP32[$286>>2]|0;
    $288 = $3;
    $289 = ((($288)) + 88|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = $287 << $290;
    $292 = $3;
    $293 = ((($292)) + 108|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = (($294) + 1)|0;
    $296 = $3;
    $297 = ((($296)) + 56|0);
    $298 = HEAP32[$297>>2]|0;
    $299 = (($298) + ($295)|0);
    $300 = HEAP8[$299>>0]|0;
    $301 = $300&255;
    $302 = $291 ^ $301;
    $303 = $3;
    $304 = ((($303)) + 84|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = $302 & $305;
    $307 = $3;
    $308 = ((($307)) + 72|0);
    HEAP32[$308>>2] = $306;
   } else {
    $309 = ((($105)) + 108|0);
    $310 = HEAP32[$309>>2]|0;
    $311 = $3;
    $312 = ((($311)) + 56|0);
    $313 = HEAP32[$312>>2]|0;
    $314 = (($313) + ($310)|0);
    $315 = HEAP8[$314>>0]|0;
    $9 = $315;
    $316 = $3;
    $317 = ((($316)) + 5792|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = $3;
    $320 = ((($319)) + 5796|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = (($321) + ($318<<1)|0);
    HEAP16[$322>>1] = 0;
    $323 = $9;
    $324 = $3;
    $325 = ((($324)) + 5792|0);
    $326 = HEAP32[$325>>2]|0;
    $327 = (($326) + 1)|0;
    HEAP32[$325>>2] = $327;
    $328 = $3;
    $329 = ((($328)) + 5784|0);
    $330 = HEAP32[$329>>2]|0;
    $331 = (($330) + ($326)|0);
    HEAP8[$331>>0] = $323;
    $332 = $9;
    $333 = $332&255;
    $334 = $3;
    $335 = ((($334)) + 148|0);
    $336 = (($335) + ($333<<2)|0);
    $337 = HEAP16[$336>>1]|0;
    $338 = (($337) + 1)<<16>>16;
    HEAP16[$336>>1] = $338;
    $339 = $3;
    $340 = ((($339)) + 5792|0);
    $341 = HEAP32[$340>>2]|0;
    $342 = $3;
    $343 = ((($342)) + 5788|0);
    $344 = HEAP32[$343>>2]|0;
    $345 = (($344) - 1)|0;
    $346 = ($341|0)==($345|0);
    $347 = $346&1;
    $6 = $347;
    $348 = $3;
    $349 = ((($348)) + 116|0);
    $350 = HEAP32[$349>>2]|0;
    $351 = (($350) + -1)|0;
    HEAP32[$349>>2] = $351;
    $352 = $3;
    $353 = ((($352)) + 108|0);
    $354 = HEAP32[$353>>2]|0;
    $355 = (($354) + 1)|0;
    HEAP32[$353>>2] = $355;
   }
  } while(0);
  $356 = $6;
  $357 = ($356|0)!=(0);
  if (!($357)) {
   continue;
  }
  $358 = $3;
  $359 = $3;
  $360 = ((($359)) + 92|0);
  $361 = HEAP32[$360>>2]|0;
  $362 = ($361|0)>=(0);
  if ($362) {
   $363 = $3;
   $364 = ((($363)) + 92|0);
   $365 = HEAP32[$364>>2]|0;
   $366 = $3;
   $367 = ((($366)) + 56|0);
   $368 = HEAP32[$367>>2]|0;
   $369 = (($368) + ($365)|0);
   $377 = $369;
  } else {
   $377 = 0;
  }
  $370 = $3;
  $371 = ((($370)) + 108|0);
  $372 = HEAP32[$371>>2]|0;
  $373 = $3;
  $374 = ((($373)) + 92|0);
  $375 = HEAP32[$374>>2]|0;
  $376 = (($372) - ($375))|0;
  __tr_flush_block($358,$377,$376,0);
  $378 = $3;
  $379 = ((($378)) + 108|0);
  $380 = HEAP32[$379>>2]|0;
  $381 = $3;
  $382 = ((($381)) + 92|0);
  HEAP32[$382>>2] = $380;
  $383 = $3;
  $384 = HEAP32[$383>>2]|0;
  _flush_pending($384);
  $385 = $3;
  $386 = HEAP32[$385>>2]|0;
  $387 = ((($386)) + 16|0);
  $388 = HEAP32[$387>>2]|0;
  $389 = ($388|0)==(0);
  if ($389) {
   label = 26;
   break;
  }
 }
 if ((label|0) == 4) {
  $2 = 0;
  $469 = $2;
  STACKTOP = sp;return ($469|0);
 }
 else if ((label|0) == 26) {
  $2 = 0;
  $469 = $2;
  STACKTOP = sp;return ($469|0);
 }
 else if ((label|0) == 27) {
  $390 = $3;
  $391 = ((($390)) + 108|0);
  $392 = HEAP32[$391>>2]|0;
  $393 = ($392>>>0)<(2);
  if ($393) {
   $394 = $3;
   $395 = ((($394)) + 108|0);
   $396 = HEAP32[$395>>2]|0;
   $399 = $396;
  } else {
   $399 = 2;
  }
  $397 = $3;
  $398 = ((($397)) + 5812|0);
  HEAP32[$398>>2] = $399;
  $400 = $4;
  $401 = ($400|0)==(4);
  $402 = $3;
  if ($401) {
   $403 = $3;
   $404 = ((($403)) + 92|0);
   $405 = HEAP32[$404>>2]|0;
   $406 = ($405|0)>=(0);
   if ($406) {
    $407 = $3;
    $408 = ((($407)) + 92|0);
    $409 = HEAP32[$408>>2]|0;
    $410 = $3;
    $411 = ((($410)) + 56|0);
    $412 = HEAP32[$411>>2]|0;
    $413 = (($412) + ($409)|0);
    $421 = $413;
   } else {
    $421 = 0;
   }
   $414 = $3;
   $415 = ((($414)) + 108|0);
   $416 = HEAP32[$415>>2]|0;
   $417 = $3;
   $418 = ((($417)) + 92|0);
   $419 = HEAP32[$418>>2]|0;
   $420 = (($416) - ($419))|0;
   __tr_flush_block($402,$421,$420,1);
   $422 = $3;
   $423 = ((($422)) + 108|0);
   $424 = HEAP32[$423>>2]|0;
   $425 = $3;
   $426 = ((($425)) + 92|0);
   HEAP32[$426>>2] = $424;
   $427 = $3;
   $428 = HEAP32[$427>>2]|0;
   _flush_pending($428);
   $429 = $3;
   $430 = HEAP32[$429>>2]|0;
   $431 = ((($430)) + 16|0);
   $432 = HEAP32[$431>>2]|0;
   $433 = ($432|0)==(0);
   if ($433) {
    $2 = 2;
    $469 = $2;
    STACKTOP = sp;return ($469|0);
   } else {
    $2 = 3;
    $469 = $2;
    STACKTOP = sp;return ($469|0);
   }
  }
  $434 = ((($402)) + 5792|0);
  $435 = HEAP32[$434>>2]|0;
  $436 = ($435|0)!=(0);
  if ($436) {
   $437 = $3;
   $438 = $3;
   $439 = ((($438)) + 92|0);
   $440 = HEAP32[$439>>2]|0;
   $441 = ($440|0)>=(0);
   if ($441) {
    $442 = $3;
    $443 = ((($442)) + 92|0);
    $444 = HEAP32[$443>>2]|0;
    $445 = $3;
    $446 = ((($445)) + 56|0);
    $447 = HEAP32[$446>>2]|0;
    $448 = (($447) + ($444)|0);
    $456 = $448;
   } else {
    $456 = 0;
   }
   $449 = $3;
   $450 = ((($449)) + 108|0);
   $451 = HEAP32[$450>>2]|0;
   $452 = $3;
   $453 = ((($452)) + 92|0);
   $454 = HEAP32[$453>>2]|0;
   $455 = (($451) - ($454))|0;
   __tr_flush_block($437,$456,$455,0);
   $457 = $3;
   $458 = ((($457)) + 108|0);
   $459 = HEAP32[$458>>2]|0;
   $460 = $3;
   $461 = ((($460)) + 92|0);
   HEAP32[$461>>2] = $459;
   $462 = $3;
   $463 = HEAP32[$462>>2]|0;
   _flush_pending($463);
   $464 = $3;
   $465 = HEAP32[$464>>2]|0;
   $466 = ((($465)) + 16|0);
   $467 = HEAP32[$466>>2]|0;
   $468 = ($467|0)==(0);
   if ($468) {
    $2 = 0;
    $469 = $2;
    STACKTOP = sp;return ($469|0);
   }
  }
  $2 = 1;
  $469 = $2;
  STACKTOP = sp;return ($469|0);
 }
 return (0)|0;
}
function _deflate_slow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 while(1) {
  $12 = $3;
  $13 = ((($12)) + 116|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14>>>0)<(262);
  if ($15) {
   $16 = $3;
   _fill_window($16);
   $17 = $3;
   $18 = ((($17)) + 116|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19>>>0)<(262);
   $21 = $4;
   $22 = ($21|0)==(0);
   $or$cond = $20 & $22;
   if ($or$cond) {
    label = 4;
    break;
   }
   $23 = $3;
   $24 = ((($23)) + 116|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0);
   if ($26) {
    label = 38;
    break;
   }
  }
  $5 = 0;
  $27 = $3;
  $28 = ((($27)) + 116|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29>>>0)>=(3);
  if ($30) {
   $31 = $3;
   $32 = ((($31)) + 72|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $3;
   $35 = ((($34)) + 88|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $33 << $36;
   $38 = $3;
   $39 = ((($38)) + 108|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + 2)|0;
   $42 = $3;
   $43 = ((($42)) + 56|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + ($41)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $48 = $37 ^ $47;
   $49 = $3;
   $50 = ((($49)) + 84|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $48 & $51;
   $53 = $3;
   $54 = ((($53)) + 72|0);
   HEAP32[$54>>2] = $52;
   $55 = $3;
   $56 = ((($55)) + 72|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $3;
   $59 = ((($58)) + 68|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + ($57<<1)|0);
   $62 = HEAP16[$61>>1]|0;
   $63 = $3;
   $64 = ((($63)) + 108|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $3;
   $67 = ((($66)) + 52|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $65 & $68;
   $70 = $3;
   $71 = ((($70)) + 64|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($72) + ($69<<1)|0);
   HEAP16[$73>>1] = $62;
   $74 = $62&65535;
   $5 = $74;
   $75 = $3;
   $76 = ((($75)) + 108|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $77&65535;
   $79 = $3;
   $80 = ((($79)) + 72|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $3;
   $83 = ((($82)) + 68|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + ($81<<1)|0);
   HEAP16[$85>>1] = $78;
  }
  $86 = $3;
  $87 = ((($86)) + 96|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = ((($89)) + 120|0);
  HEAP32[$90>>2] = $88;
  $91 = $3;
  $92 = ((($91)) + 112|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $3;
  $95 = ((($94)) + 100|0);
  HEAP32[$95>>2] = $93;
  $96 = $3;
  $97 = ((($96)) + 96|0);
  HEAP32[$97>>2] = 2;
  $98 = $5;
  $99 = ($98|0)!=(0);
  do {
   if ($99) {
    $100 = $3;
    $101 = ((($100)) + 120|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $3;
    $104 = ((($103)) + 128|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ($102>>>0)<($105>>>0);
    if ($106) {
     $107 = $3;
     $108 = ((($107)) + 108|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = $5;
     $111 = (($109) - ($110))|0;
     $112 = $3;
     $113 = ((($112)) + 44|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = (($114) - 262)|0;
     $116 = ($111>>>0)<=($115>>>0);
     if ($116) {
      $117 = $3;
      $118 = $5;
      $119 = (_longest_match($117,$118)|0);
      $120 = $3;
      $121 = ((($120)) + 96|0);
      HEAP32[$121>>2] = $119;
      $122 = $3;
      $123 = ((($122)) + 96|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($124>>>0)<=(5);
      if ($125) {
       $126 = $3;
       $127 = ((($126)) + 136|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = ($128|0)==(1);
       if (!($129)) {
        $130 = $3;
        $131 = ((($130)) + 96|0);
        $132 = HEAP32[$131>>2]|0;
        $133 = ($132|0)==(3);
        if (!($133)) {
         break;
        }
        $134 = $3;
        $135 = ((($134)) + 108|0);
        $136 = HEAP32[$135>>2]|0;
        $137 = $3;
        $138 = ((($137)) + 112|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = (($136) - ($139))|0;
        $141 = ($140>>>0)>(4096);
        if (!($141)) {
         break;
        }
       }
       $142 = $3;
       $143 = ((($142)) + 96|0);
       HEAP32[$143>>2] = 2;
      }
     }
    }
   }
  } while(0);
  $144 = $3;
  $145 = ((($144)) + 120|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = ($146>>>0)>=(3);
  if ($147) {
   $148 = $3;
   $149 = ((($148)) + 96|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = $3;
   $152 = ((($151)) + 120|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = ($150>>>0)<=($153>>>0);
   if ($154) {
    $155 = $3;
    $156 = ((($155)) + 108|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = $3;
    $159 = ((($158)) + 116|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = (($157) + ($160))|0;
    $162 = (($161) - 3)|0;
    $7 = $162;
    $163 = $3;
    $164 = ((($163)) + 120|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = (($165) - 3)|0;
    $167 = $166&255;
    $8 = $167;
    $168 = $3;
    $169 = ((($168)) + 108|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = (($170) - 1)|0;
    $172 = $3;
    $173 = ((($172)) + 100|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = (($171) - ($174))|0;
    $176 = $175&65535;
    $9 = $176;
    $177 = $9;
    $178 = $3;
    $179 = ((($178)) + 5792|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = $3;
    $182 = ((($181)) + 5796|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = (($183) + ($180<<1)|0);
    HEAP16[$184>>1] = $177;
    $185 = $8;
    $186 = $3;
    $187 = ((($186)) + 5792|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = (($188) + 1)|0;
    HEAP32[$187>>2] = $189;
    $190 = $3;
    $191 = ((($190)) + 5784|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = (($192) + ($188)|0);
    HEAP8[$193>>0] = $185;
    $194 = $9;
    $195 = (($194) + -1)<<16>>16;
    $9 = $195;
    $196 = $8;
    $197 = $196&255;
    $198 = (14735 + ($197)|0);
    $199 = HEAP8[$198>>0]|0;
    $200 = $199&255;
    $201 = (($200) + 256)|0;
    $202 = (($201) + 1)|0;
    $203 = $3;
    $204 = ((($203)) + 148|0);
    $205 = (($204) + ($202<<2)|0);
    $206 = HEAP16[$205>>1]|0;
    $207 = (($206) + 1)<<16>>16;
    HEAP16[$205>>1] = $207;
    $208 = $9;
    $209 = $208&65535;
    $210 = ($209|0)<(256);
    $211 = $9;
    $212 = $211&65535;
    if ($210) {
     $213 = (14223 + ($212)|0);
     $214 = HEAP8[$213>>0]|0;
     $$sink = $214;
    } else {
     $215 = $212 >> 7;
     $216 = (256 + ($215))|0;
     $217 = (14223 + ($216)|0);
     $218 = HEAP8[$217>>0]|0;
     $$sink = $218;
    }
    $219 = $$sink&255;
    $220 = $3;
    $221 = ((($220)) + 2440|0);
    $222 = (($221) + ($219<<2)|0);
    $223 = HEAP16[$222>>1]|0;
    $224 = (($223) + 1)<<16>>16;
    HEAP16[$222>>1] = $224;
    $225 = $3;
    $226 = ((($225)) + 5792|0);
    $227 = HEAP32[$226>>2]|0;
    $228 = $3;
    $229 = ((($228)) + 5788|0);
    $230 = HEAP32[$229>>2]|0;
    $231 = (($230) - 1)|0;
    $232 = ($227|0)==($231|0);
    $233 = $232&1;
    $6 = $233;
    $234 = $3;
    $235 = ((($234)) + 120|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = (($236) - 1)|0;
    $238 = $3;
    $239 = ((($238)) + 116|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = (($240) - ($237))|0;
    HEAP32[$239>>2] = $241;
    $242 = $3;
    $243 = ((($242)) + 120|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = (($244) - 2)|0;
    HEAP32[$243>>2] = $245;
    while(1) {
     $246 = $3;
     $247 = ((($246)) + 108|0);
     $248 = HEAP32[$247>>2]|0;
     $249 = (($248) + 1)|0;
     HEAP32[$247>>2] = $249;
     $250 = $7;
     $251 = ($249>>>0)<=($250>>>0);
     if ($251) {
      $252 = $3;
      $253 = ((($252)) + 72|0);
      $254 = HEAP32[$253>>2]|0;
      $255 = $3;
      $256 = ((($255)) + 88|0);
      $257 = HEAP32[$256>>2]|0;
      $258 = $254 << $257;
      $259 = $3;
      $260 = ((($259)) + 108|0);
      $261 = HEAP32[$260>>2]|0;
      $262 = (($261) + 2)|0;
      $263 = $3;
      $264 = ((($263)) + 56|0);
      $265 = HEAP32[$264>>2]|0;
      $266 = (($265) + ($262)|0);
      $267 = HEAP8[$266>>0]|0;
      $268 = $267&255;
      $269 = $258 ^ $268;
      $270 = $3;
      $271 = ((($270)) + 84|0);
      $272 = HEAP32[$271>>2]|0;
      $273 = $269 & $272;
      $274 = $3;
      $275 = ((($274)) + 72|0);
      HEAP32[$275>>2] = $273;
      $276 = $3;
      $277 = ((($276)) + 72|0);
      $278 = HEAP32[$277>>2]|0;
      $279 = $3;
      $280 = ((($279)) + 68|0);
      $281 = HEAP32[$280>>2]|0;
      $282 = (($281) + ($278<<1)|0);
      $283 = HEAP16[$282>>1]|0;
      $284 = $3;
      $285 = ((($284)) + 108|0);
      $286 = HEAP32[$285>>2]|0;
      $287 = $3;
      $288 = ((($287)) + 52|0);
      $289 = HEAP32[$288>>2]|0;
      $290 = $286 & $289;
      $291 = $3;
      $292 = ((($291)) + 64|0);
      $293 = HEAP32[$292>>2]|0;
      $294 = (($293) + ($290<<1)|0);
      HEAP16[$294>>1] = $283;
      $295 = $283&65535;
      $5 = $295;
      $296 = $3;
      $297 = ((($296)) + 108|0);
      $298 = HEAP32[$297>>2]|0;
      $299 = $298&65535;
      $300 = $3;
      $301 = ((($300)) + 72|0);
      $302 = HEAP32[$301>>2]|0;
      $303 = $3;
      $304 = ((($303)) + 68|0);
      $305 = HEAP32[$304>>2]|0;
      $306 = (($305) + ($302<<1)|0);
      HEAP16[$306>>1] = $299;
     }
     $307 = $3;
     $308 = ((($307)) + 120|0);
     $309 = HEAP32[$308>>2]|0;
     $310 = (($309) + -1)|0;
     HEAP32[$308>>2] = $310;
     $311 = ($310|0)!=(0);
     if (!($311)) {
      break;
     }
    }
    $312 = $3;
    $313 = ((($312)) + 104|0);
    HEAP32[$313>>2] = 0;
    $314 = $3;
    $315 = ((($314)) + 96|0);
    HEAP32[$315>>2] = 2;
    $316 = $3;
    $317 = ((($316)) + 108|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = (($318) + 1)|0;
    HEAP32[$317>>2] = $319;
    $320 = $6;
    $321 = ($320|0)!=(0);
    if (!($321)) {
     continue;
    }
    $322 = $3;
    $323 = $3;
    $324 = ((($323)) + 92|0);
    $325 = HEAP32[$324>>2]|0;
    $326 = ($325|0)>=(0);
    if ($326) {
     $327 = $3;
     $328 = ((($327)) + 92|0);
     $329 = HEAP32[$328>>2]|0;
     $330 = $3;
     $331 = ((($330)) + 56|0);
     $332 = HEAP32[$331>>2]|0;
     $333 = (($332) + ($329)|0);
     $341 = $333;
    } else {
     $341 = 0;
    }
    $334 = $3;
    $335 = ((($334)) + 108|0);
    $336 = HEAP32[$335>>2]|0;
    $337 = $3;
    $338 = ((($337)) + 92|0);
    $339 = HEAP32[$338>>2]|0;
    $340 = (($336) - ($339))|0;
    __tr_flush_block($322,$341,$340,0);
    $342 = $3;
    $343 = ((($342)) + 108|0);
    $344 = HEAP32[$343>>2]|0;
    $345 = $3;
    $346 = ((($345)) + 92|0);
    HEAP32[$346>>2] = $344;
    $347 = $3;
    $348 = HEAP32[$347>>2]|0;
    _flush_pending($348);
    $349 = $3;
    $350 = HEAP32[$349>>2]|0;
    $351 = ((($350)) + 16|0);
    $352 = HEAP32[$351>>2]|0;
    $353 = ($352|0)==(0);
    if ($353) {
     label = 29;
     break;
    } else {
     continue;
    }
   }
  }
  $354 = $3;
  $355 = ((($354)) + 104|0);
  $356 = HEAP32[$355>>2]|0;
  $357 = ($356|0)!=(0);
  $358 = $3;
  if (!($357)) {
   $441 = ((($358)) + 104|0);
   HEAP32[$441>>2] = 1;
   $442 = $3;
   $443 = ((($442)) + 108|0);
   $444 = HEAP32[$443>>2]|0;
   $445 = (($444) + 1)|0;
   HEAP32[$443>>2] = $445;
   $446 = $3;
   $447 = ((($446)) + 116|0);
   $448 = HEAP32[$447>>2]|0;
   $449 = (($448) + -1)|0;
   HEAP32[$447>>2] = $449;
   continue;
  }
  $359 = ((($358)) + 108|0);
  $360 = HEAP32[$359>>2]|0;
  $361 = (($360) - 1)|0;
  $362 = $3;
  $363 = ((($362)) + 56|0);
  $364 = HEAP32[$363>>2]|0;
  $365 = (($364) + ($361)|0);
  $366 = HEAP8[$365>>0]|0;
  $10 = $366;
  $367 = $3;
  $368 = ((($367)) + 5792|0);
  $369 = HEAP32[$368>>2]|0;
  $370 = $3;
  $371 = ((($370)) + 5796|0);
  $372 = HEAP32[$371>>2]|0;
  $373 = (($372) + ($369<<1)|0);
  HEAP16[$373>>1] = 0;
  $374 = $10;
  $375 = $3;
  $376 = ((($375)) + 5792|0);
  $377 = HEAP32[$376>>2]|0;
  $378 = (($377) + 1)|0;
  HEAP32[$376>>2] = $378;
  $379 = $3;
  $380 = ((($379)) + 5784|0);
  $381 = HEAP32[$380>>2]|0;
  $382 = (($381) + ($377)|0);
  HEAP8[$382>>0] = $374;
  $383 = $10;
  $384 = $383&255;
  $385 = $3;
  $386 = ((($385)) + 148|0);
  $387 = (($386) + ($384<<2)|0);
  $388 = HEAP16[$387>>1]|0;
  $389 = (($388) + 1)<<16>>16;
  HEAP16[$387>>1] = $389;
  $390 = $3;
  $391 = ((($390)) + 5792|0);
  $392 = HEAP32[$391>>2]|0;
  $393 = $3;
  $394 = ((($393)) + 5788|0);
  $395 = HEAP32[$394>>2]|0;
  $396 = (($395) - 1)|0;
  $397 = ($392|0)==($396|0);
  $398 = $397&1;
  $6 = $398;
  $399 = $6;
  $400 = ($399|0)!=(0);
  if ($400) {
   $401 = $3;
   $402 = $3;
   $403 = ((($402)) + 92|0);
   $404 = HEAP32[$403>>2]|0;
   $405 = ($404|0)>=(0);
   if ($405) {
    $406 = $3;
    $407 = ((($406)) + 92|0);
    $408 = HEAP32[$407>>2]|0;
    $409 = $3;
    $410 = ((($409)) + 56|0);
    $411 = HEAP32[$410>>2]|0;
    $412 = (($411) + ($408)|0);
    $420 = $412;
   } else {
    $420 = 0;
   }
   $413 = $3;
   $414 = ((($413)) + 108|0);
   $415 = HEAP32[$414>>2]|0;
   $416 = $3;
   $417 = ((($416)) + 92|0);
   $418 = HEAP32[$417>>2]|0;
   $419 = (($415) - ($418))|0;
   __tr_flush_block($401,$420,$419,0);
   $421 = $3;
   $422 = ((($421)) + 108|0);
   $423 = HEAP32[$422>>2]|0;
   $424 = $3;
   $425 = ((($424)) + 92|0);
   HEAP32[$425>>2] = $423;
   $426 = $3;
   $427 = HEAP32[$426>>2]|0;
   _flush_pending($427);
  }
  $428 = $3;
  $429 = ((($428)) + 108|0);
  $430 = HEAP32[$429>>2]|0;
  $431 = (($430) + 1)|0;
  HEAP32[$429>>2] = $431;
  $432 = $3;
  $433 = ((($432)) + 116|0);
  $434 = HEAP32[$433>>2]|0;
  $435 = (($434) + -1)|0;
  HEAP32[$433>>2] = $435;
  $436 = $3;
  $437 = HEAP32[$436>>2]|0;
  $438 = ((($437)) + 16|0);
  $439 = HEAP32[$438>>2]|0;
  $440 = ($439|0)==(0);
  if ($440) {
   label = 36;
   break;
  }
 }
 if ((label|0) == 4) {
  $2 = 0;
  $576 = $2;
  STACKTOP = sp;return ($576|0);
 }
 else if ((label|0) == 29) {
  $2 = 0;
  $576 = $2;
  STACKTOP = sp;return ($576|0);
 }
 else if ((label|0) == 36) {
  $2 = 0;
  $576 = $2;
  STACKTOP = sp;return ($576|0);
 }
 else if ((label|0) == 38) {
  $450 = $3;
  $451 = ((($450)) + 104|0);
  $452 = HEAP32[$451>>2]|0;
  $453 = ($452|0)!=(0);
  if ($453) {
   $454 = $3;
   $455 = ((($454)) + 108|0);
   $456 = HEAP32[$455>>2]|0;
   $457 = (($456) - 1)|0;
   $458 = $3;
   $459 = ((($458)) + 56|0);
   $460 = HEAP32[$459>>2]|0;
   $461 = (($460) + ($457)|0);
   $462 = HEAP8[$461>>0]|0;
   $11 = $462;
   $463 = $3;
   $464 = ((($463)) + 5792|0);
   $465 = HEAP32[$464>>2]|0;
   $466 = $3;
   $467 = ((($466)) + 5796|0);
   $468 = HEAP32[$467>>2]|0;
   $469 = (($468) + ($465<<1)|0);
   HEAP16[$469>>1] = 0;
   $470 = $11;
   $471 = $3;
   $472 = ((($471)) + 5792|0);
   $473 = HEAP32[$472>>2]|0;
   $474 = (($473) + 1)|0;
   HEAP32[$472>>2] = $474;
   $475 = $3;
   $476 = ((($475)) + 5784|0);
   $477 = HEAP32[$476>>2]|0;
   $478 = (($477) + ($473)|0);
   HEAP8[$478>>0] = $470;
   $479 = $11;
   $480 = $479&255;
   $481 = $3;
   $482 = ((($481)) + 148|0);
   $483 = (($482) + ($480<<2)|0);
   $484 = HEAP16[$483>>1]|0;
   $485 = (($484) + 1)<<16>>16;
   HEAP16[$483>>1] = $485;
   $486 = $3;
   $487 = ((($486)) + 5792|0);
   $488 = HEAP32[$487>>2]|0;
   $489 = $3;
   $490 = ((($489)) + 5788|0);
   $491 = HEAP32[$490>>2]|0;
   $492 = (($491) - 1)|0;
   $493 = ($488|0)==($492|0);
   $494 = $493&1;
   $6 = $494;
   $495 = $3;
   $496 = ((($495)) + 104|0);
   HEAP32[$496>>2] = 0;
  }
  $497 = $3;
  $498 = ((($497)) + 108|0);
  $499 = HEAP32[$498>>2]|0;
  $500 = ($499>>>0)<(2);
  if ($500) {
   $501 = $3;
   $502 = ((($501)) + 108|0);
   $503 = HEAP32[$502>>2]|0;
   $506 = $503;
  } else {
   $506 = 2;
  }
  $504 = $3;
  $505 = ((($504)) + 5812|0);
  HEAP32[$505>>2] = $506;
  $507 = $4;
  $508 = ($507|0)==(4);
  $509 = $3;
  if ($508) {
   $510 = $3;
   $511 = ((($510)) + 92|0);
   $512 = HEAP32[$511>>2]|0;
   $513 = ($512|0)>=(0);
   if ($513) {
    $514 = $3;
    $515 = ((($514)) + 92|0);
    $516 = HEAP32[$515>>2]|0;
    $517 = $3;
    $518 = ((($517)) + 56|0);
    $519 = HEAP32[$518>>2]|0;
    $520 = (($519) + ($516)|0);
    $528 = $520;
   } else {
    $528 = 0;
   }
   $521 = $3;
   $522 = ((($521)) + 108|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $3;
   $525 = ((($524)) + 92|0);
   $526 = HEAP32[$525>>2]|0;
   $527 = (($523) - ($526))|0;
   __tr_flush_block($509,$528,$527,1);
   $529 = $3;
   $530 = ((($529)) + 108|0);
   $531 = HEAP32[$530>>2]|0;
   $532 = $3;
   $533 = ((($532)) + 92|0);
   HEAP32[$533>>2] = $531;
   $534 = $3;
   $535 = HEAP32[$534>>2]|0;
   _flush_pending($535);
   $536 = $3;
   $537 = HEAP32[$536>>2]|0;
   $538 = ((($537)) + 16|0);
   $539 = HEAP32[$538>>2]|0;
   $540 = ($539|0)==(0);
   if ($540) {
    $2 = 2;
    $576 = $2;
    STACKTOP = sp;return ($576|0);
   } else {
    $2 = 3;
    $576 = $2;
    STACKTOP = sp;return ($576|0);
   }
  }
  $541 = ((($509)) + 5792|0);
  $542 = HEAP32[$541>>2]|0;
  $543 = ($542|0)!=(0);
  if ($543) {
   $544 = $3;
   $545 = $3;
   $546 = ((($545)) + 92|0);
   $547 = HEAP32[$546>>2]|0;
   $548 = ($547|0)>=(0);
   if ($548) {
    $549 = $3;
    $550 = ((($549)) + 92|0);
    $551 = HEAP32[$550>>2]|0;
    $552 = $3;
    $553 = ((($552)) + 56|0);
    $554 = HEAP32[$553>>2]|0;
    $555 = (($554) + ($551)|0);
    $563 = $555;
   } else {
    $563 = 0;
   }
   $556 = $3;
   $557 = ((($556)) + 108|0);
   $558 = HEAP32[$557>>2]|0;
   $559 = $3;
   $560 = ((($559)) + 92|0);
   $561 = HEAP32[$560>>2]|0;
   $562 = (($558) - ($561))|0;
   __tr_flush_block($544,$563,$562,0);
   $564 = $3;
   $565 = ((($564)) + 108|0);
   $566 = HEAP32[$565>>2]|0;
   $567 = $3;
   $568 = ((($567)) + 92|0);
   HEAP32[$568>>2] = $566;
   $569 = $3;
   $570 = HEAP32[$569>>2]|0;
   _flush_pending($570);
   $571 = $3;
   $572 = HEAP32[$571>>2]|0;
   $573 = ((($572)) + 16|0);
   $574 = HEAP32[$573>>2]|0;
   $575 = ($574|0)==(0);
   if ($575) {
    $2 = 0;
    $576 = $2;
    STACKTOP = sp;return ($576|0);
   }
  }
  $2 = 1;
  $576 = $2;
  STACKTOP = sp;return ($576|0);
 }
 return (0)|0;
}
function _fill_window($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $8 = $1;
 $9 = ((($8)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $4 = $10;
 while(1) {
  $11 = $1;
  $12 = ((($11)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $1;
  $15 = ((($14)) + 116|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($13) - ($16))|0;
  $18 = $1;
  $19 = ((($18)) + 108|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($17) - ($20))|0;
  $3 = $21;
  $22 = $1;
  $23 = ((($22)) + 108|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $4;
  $26 = $1;
  $27 = ((($26)) + 44|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) - 262)|0;
  $30 = (($25) + ($29))|0;
  $31 = ($24>>>0)>=($30>>>0);
  if ($31) {
   $32 = $1;
   $33 = ((($32)) + 56|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $1;
   $36 = ((($35)) + 56|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $4;
   $39 = (($37) + ($38)|0);
   $40 = $4;
   $41 = $3;
   $42 = (($40) - ($41))|0;
   _memcpy(($34|0),($39|0),($42|0))|0;
   $43 = $4;
   $44 = $1;
   $45 = ((($44)) + 112|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) - ($43))|0;
   HEAP32[$45>>2] = $47;
   $48 = $4;
   $49 = $1;
   $50 = ((($49)) + 108|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) - ($48))|0;
   HEAP32[$50>>2] = $52;
   $53 = $4;
   $54 = $1;
   $55 = ((($54)) + 92|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) - ($53))|0;
   HEAP32[$55>>2] = $57;
   $58 = $1;
   _slide_hash($58);
   $59 = $4;
   $60 = $3;
   $61 = (($60) + ($59))|0;
   $3 = $61;
  }
  $62 = $1;
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($63)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)==(0);
  if ($66) {
   break;
  }
  $67 = $1;
  $68 = HEAP32[$67>>2]|0;
  $69 = $1;
  $70 = ((($69)) + 56|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $1;
  $73 = ((($72)) + 108|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($71) + ($74)|0);
  $76 = $1;
  $77 = ((($76)) + 116|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($75) + ($78)|0);
  $80 = $3;
  $81 = (_read_buf($68,$79,$80)|0);
  $2 = $81;
  $82 = $2;
  $83 = $1;
  $84 = ((($83)) + 116|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + ($82))|0;
  HEAP32[$84>>2] = $86;
  $87 = $1;
  $88 = ((($87)) + 116|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $1;
  $91 = ((($90)) + 5812|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (($89) + ($92))|0;
  $94 = ($93>>>0)>=(3);
  L7: do {
   if ($94) {
    $95 = $1;
    $96 = ((($95)) + 108|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = $1;
    $99 = ((($98)) + 5812|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = (($97) - ($100))|0;
    $5 = $101;
    $102 = $5;
    $103 = $1;
    $104 = ((($103)) + 56|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (($105) + ($102)|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = $107&255;
    $109 = $1;
    $110 = ((($109)) + 72|0);
    HEAP32[$110>>2] = $108;
    $111 = $1;
    $112 = ((($111)) + 72|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = $1;
    $115 = ((($114)) + 88|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = $113 << $116;
    $118 = $5;
    $119 = (($118) + 1)|0;
    $120 = $1;
    $121 = ((($120)) + 56|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = (($122) + ($119)|0);
    $124 = HEAP8[$123>>0]|0;
    $125 = $124&255;
    $126 = $117 ^ $125;
    $127 = $1;
    $128 = ((($127)) + 84|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = $126 & $129;
    $131 = $1;
    $132 = ((($131)) + 72|0);
    HEAP32[$132>>2] = $130;
    while(1) {
     $133 = $1;
     $134 = ((($133)) + 5812|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)!=(0);
     if (!($136)) {
      break L7;
     }
     $137 = $1;
     $138 = ((($137)) + 72|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = $1;
     $141 = ((($140)) + 88|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = $139 << $142;
     $144 = $5;
     $145 = (($144) + 3)|0;
     $146 = (($145) - 1)|0;
     $147 = $1;
     $148 = ((($147)) + 56|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = (($149) + ($146)|0);
     $151 = HEAP8[$150>>0]|0;
     $152 = $151&255;
     $153 = $143 ^ $152;
     $154 = $1;
     $155 = ((($154)) + 84|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = $153 & $156;
     $158 = $1;
     $159 = ((($158)) + 72|0);
     HEAP32[$159>>2] = $157;
     $160 = $1;
     $161 = ((($160)) + 72|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = $1;
     $164 = ((($163)) + 68|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = (($165) + ($162<<1)|0);
     $167 = HEAP16[$166>>1]|0;
     $168 = $5;
     $169 = $1;
     $170 = ((($169)) + 52|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = $168 & $171;
     $173 = $1;
     $174 = ((($173)) + 64|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = (($175) + ($172<<1)|0);
     HEAP16[$176>>1] = $167;
     $177 = $5;
     $178 = $177&65535;
     $179 = $1;
     $180 = ((($179)) + 72|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = $1;
     $183 = ((($182)) + 68|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = (($184) + ($181<<1)|0);
     HEAP16[$185>>1] = $178;
     $186 = $5;
     $187 = (($186) + 1)|0;
     $5 = $187;
     $188 = $1;
     $189 = ((($188)) + 5812|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = (($190) + -1)|0;
     HEAP32[$189>>2] = $191;
     $192 = $1;
     $193 = ((($192)) + 116|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = $1;
     $196 = ((($195)) + 5812|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = (($194) + ($197))|0;
     $199 = ($198>>>0)<(3);
     if ($199) {
      break;
     }
    }
   }
  } while(0);
  $200 = $1;
  $201 = ((($200)) + 116|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = ($202>>>0)<(262);
  if (!($203)) {
   break;
  }
  $204 = $1;
  $205 = HEAP32[$204>>2]|0;
  $206 = ((($205)) + 4|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = ($207|0)!=(0);
  if (!($208)) {
   break;
  }
 }
 $209 = $1;
 $210 = ((($209)) + 5824|0);
 $211 = HEAP32[$210>>2]|0;
 $212 = $1;
 $213 = ((($212)) + 60|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = ($211>>>0)<($214>>>0);
 if (!($215)) {
  STACKTOP = sp;return;
 }
 $216 = $1;
 $217 = ((($216)) + 108|0);
 $218 = HEAP32[$217>>2]|0;
 $219 = $1;
 $220 = ((($219)) + 116|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = (($218) + ($221))|0;
 $6 = $222;
 $223 = $1;
 $224 = ((($223)) + 5824|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = $6;
 $227 = ($225>>>0)<($226>>>0);
 $228 = $1;
 if ($227) {
  $229 = ((($228)) + 60|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = $6;
  $232 = (($230) - ($231))|0;
  $7 = $232;
  $233 = $7;
  $234 = ($233>>>0)>(258);
  $$ = $234 ? 258 : $232;
  $7 = $$;
  $235 = $1;
  $236 = ((($235)) + 56|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = $6;
  $239 = (($237) + ($238)|0);
  $240 = $7;
  _memset(($239|0),0,($240|0))|0;
  $241 = $6;
  $242 = $7;
  $243 = (($241) + ($242))|0;
  $244 = $1;
  $245 = ((($244)) + 5824|0);
  HEAP32[$245>>2] = $243;
  STACKTOP = sp;return;
 }
 $246 = ((($228)) + 5824|0);
 $247 = HEAP32[$246>>2]|0;
 $248 = $6;
 $249 = (($248) + 258)|0;
 $250 = ($247>>>0)<($249>>>0);
 if (!($250)) {
  STACKTOP = sp;return;
 }
 $251 = $6;
 $252 = (($251) + 258)|0;
 $253 = $1;
 $254 = ((($253)) + 5824|0);
 $255 = HEAP32[$254>>2]|0;
 $256 = (($252) - ($255))|0;
 $7 = $256;
 $257 = $7;
 $258 = $1;
 $259 = ((($258)) + 60|0);
 $260 = HEAP32[$259>>2]|0;
 $261 = $1;
 $262 = ((($261)) + 5824|0);
 $263 = HEAP32[$262>>2]|0;
 $264 = (($260) - ($263))|0;
 $265 = ($257>>>0)>($264>>>0);
 if ($265) {
  $266 = $1;
  $267 = ((($266)) + 60|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = $1;
  $270 = ((($269)) + 5824|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = (($268) - ($271))|0;
  $7 = $272;
 }
 $273 = $1;
 $274 = ((($273)) + 56|0);
 $275 = HEAP32[$274>>2]|0;
 $276 = $1;
 $277 = ((($276)) + 5824|0);
 $278 = HEAP32[$277>>2]|0;
 $279 = (($275) + ($278)|0);
 $280 = $7;
 _memset(($279|0),0,($280|0))|0;
 $281 = $7;
 $282 = $1;
 $283 = ((($282)) + 5824|0);
 $284 = HEAP32[$283>>2]|0;
 $285 = (($284) + ($281))|0;
 HEAP32[$283>>2] = $285;
 STACKTOP = sp;return;
}
function _longest_match($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $17 = $3;
 $18 = ((($17)) + 124|0);
 $19 = HEAP32[$18>>2]|0;
 $5 = $19;
 $20 = $3;
 $21 = ((($20)) + 56|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $3;
 $24 = ((($23)) + 108|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($22) + ($25)|0);
 $6 = $26;
 $27 = $3;
 $28 = ((($27)) + 120|0);
 $29 = HEAP32[$28>>2]|0;
 $9 = $29;
 $30 = $3;
 $31 = ((($30)) + 144|0);
 $32 = HEAP32[$31>>2]|0;
 $10 = $32;
 $33 = $3;
 $34 = ((($33)) + 108|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $3;
 $37 = ((($36)) + 44|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) - 262)|0;
 $40 = ($35>>>0)>($39>>>0);
 if ($40) {
  $41 = $3;
  $42 = ((($41)) + 108|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $3;
  $45 = ((($44)) + 44|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) - 262)|0;
  $48 = (($43) - ($47))|0;
  $49 = $48;
 } else {
  $49 = 0;
 }
 $11 = $49;
 $50 = $3;
 $51 = ((($50)) + 64|0);
 $52 = HEAP32[$51>>2]|0;
 $12 = $52;
 $53 = $3;
 $54 = ((($53)) + 52|0);
 $55 = HEAP32[$54>>2]|0;
 $13 = $55;
 $56 = $3;
 $57 = ((($56)) + 56|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $3;
 $60 = ((($59)) + 108|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($58) + ($61)|0);
 $63 = ((($62)) + 258|0);
 $14 = $63;
 $64 = $9;
 $65 = (($64) - 1)|0;
 $66 = $6;
 $67 = (($66) + ($65)|0);
 $68 = HEAP8[$67>>0]|0;
 $15 = $68;
 $69 = $9;
 $70 = $6;
 $71 = (($70) + ($69)|0);
 $72 = HEAP8[$71>>0]|0;
 $16 = $72;
 $73 = $3;
 $74 = ((($73)) + 120|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $3;
 $77 = ((($76)) + 140|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($75>>>0)>=($78>>>0);
 if ($79) {
  $80 = $5;
  $81 = $80 >>> 2;
  $5 = $81;
 }
 $82 = $10;
 $83 = $3;
 $84 = ((($83)) + 116|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($82>>>0)>($85>>>0);
 if ($86) {
  $87 = $3;
  $88 = ((($87)) + 116|0);
  $89 = HEAP32[$88>>2]|0;
  $10 = $89;
 }
 while(1) {
  $90 = $3;
  $91 = ((($90)) + 56|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $4;
  $94 = (($92) + ($93)|0);
  $7 = $94;
  $95 = $9;
  $96 = $7;
  $97 = (($96) + ($95)|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = $98&255;
  $100 = $16;
  $101 = $100&255;
  $102 = ($99|0)!=($101|0);
  if (!($102)) {
   $103 = $9;
   $104 = (($103) - 1)|0;
   $105 = $7;
   $106 = (($105) + ($104)|0);
   $107 = HEAP8[$106>>0]|0;
   $108 = $107&255;
   $109 = $15;
   $110 = $109&255;
   $111 = ($108|0)!=($110|0);
   if (!($111)) {
    $112 = $7;
    $113 = HEAP8[$112>>0]|0;
    $114 = $113&255;
    $115 = $6;
    $116 = HEAP8[$115>>0]|0;
    $117 = $116&255;
    $118 = ($114|0)!=($117|0);
    if (!($118)) {
     $119 = $7;
     $120 = ((($119)) + 1|0);
     $7 = $120;
     $121 = HEAP8[$120>>0]|0;
     $122 = $121&255;
     $123 = $6;
     $124 = ((($123)) + 1|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = $125&255;
     $127 = ($122|0)!=($126|0);
     if (!($127)) {
      $128 = $6;
      $129 = ((($128)) + 2|0);
      $6 = $129;
      $130 = $7;
      $131 = ((($130)) + 1|0);
      $7 = $131;
      while(1) {
       $132 = $6;
       $133 = ((($132)) + 1|0);
       $6 = $133;
       $134 = HEAP8[$133>>0]|0;
       $135 = $134&255;
       $136 = $7;
       $137 = ((($136)) + 1|0);
       $7 = $137;
       $138 = HEAP8[$137>>0]|0;
       $139 = $138&255;
       $140 = ($135|0)==($139|0);
       if (!($140)) {
        break;
       }
       $141 = $6;
       $142 = ((($141)) + 1|0);
       $6 = $142;
       $143 = HEAP8[$142>>0]|0;
       $144 = $143&255;
       $145 = $7;
       $146 = ((($145)) + 1|0);
       $7 = $146;
       $147 = HEAP8[$146>>0]|0;
       $148 = $147&255;
       $149 = ($144|0)==($148|0);
       if (!($149)) {
        break;
       }
       $150 = $6;
       $151 = ((($150)) + 1|0);
       $6 = $151;
       $152 = HEAP8[$151>>0]|0;
       $153 = $152&255;
       $154 = $7;
       $155 = ((($154)) + 1|0);
       $7 = $155;
       $156 = HEAP8[$155>>0]|0;
       $157 = $156&255;
       $158 = ($153|0)==($157|0);
       if (!($158)) {
        break;
       }
       $159 = $6;
       $160 = ((($159)) + 1|0);
       $6 = $160;
       $161 = HEAP8[$160>>0]|0;
       $162 = $161&255;
       $163 = $7;
       $164 = ((($163)) + 1|0);
       $7 = $164;
       $165 = HEAP8[$164>>0]|0;
       $166 = $165&255;
       $167 = ($162|0)==($166|0);
       if (!($167)) {
        break;
       }
       $168 = $6;
       $169 = ((($168)) + 1|0);
       $6 = $169;
       $170 = HEAP8[$169>>0]|0;
       $171 = $170&255;
       $172 = $7;
       $173 = ((($172)) + 1|0);
       $7 = $173;
       $174 = HEAP8[$173>>0]|0;
       $175 = $174&255;
       $176 = ($171|0)==($175|0);
       if (!($176)) {
        break;
       }
       $177 = $6;
       $178 = ((($177)) + 1|0);
       $6 = $178;
       $179 = HEAP8[$178>>0]|0;
       $180 = $179&255;
       $181 = $7;
       $182 = ((($181)) + 1|0);
       $7 = $182;
       $183 = HEAP8[$182>>0]|0;
       $184 = $183&255;
       $185 = ($180|0)==($184|0);
       if (!($185)) {
        break;
       }
       $186 = $6;
       $187 = ((($186)) + 1|0);
       $6 = $187;
       $188 = HEAP8[$187>>0]|0;
       $189 = $188&255;
       $190 = $7;
       $191 = ((($190)) + 1|0);
       $7 = $191;
       $192 = HEAP8[$191>>0]|0;
       $193 = $192&255;
       $194 = ($189|0)==($193|0);
       if (!($194)) {
        break;
       }
       $195 = $6;
       $196 = ((($195)) + 1|0);
       $6 = $196;
       $197 = HEAP8[$196>>0]|0;
       $198 = $197&255;
       $199 = $7;
       $200 = ((($199)) + 1|0);
       $7 = $200;
       $201 = HEAP8[$200>>0]|0;
       $202 = $201&255;
       $203 = ($198|0)==($202|0);
       if (!($203)) {
        break;
       }
       $204 = $6;
       $205 = $14;
       $206 = ($204>>>0)<($205>>>0);
       if (!($206)) {
        break;
       }
      }
      $207 = $14;
      $208 = $6;
      $209 = $207;
      $210 = $208;
      $211 = (($209) - ($210))|0;
      $212 = (258 - ($211))|0;
      $8 = $212;
      $213 = $14;
      $214 = ((($213)) + -258|0);
      $6 = $214;
      $215 = $8;
      $216 = $9;
      $217 = ($215|0)>($216|0);
      if ($217) {
       $218 = $4;
       $219 = $3;
       $220 = ((($219)) + 112|0);
       HEAP32[$220>>2] = $218;
       $221 = $8;
       $9 = $221;
       $222 = $8;
       $223 = $10;
       $224 = ($222|0)>=($223|0);
       if ($224) {
        break;
       }
       $225 = $9;
       $226 = (($225) - 1)|0;
       $227 = $6;
       $228 = (($227) + ($226)|0);
       $229 = HEAP8[$228>>0]|0;
       $15 = $229;
       $230 = $9;
       $231 = $6;
       $232 = (($231) + ($230)|0);
       $233 = HEAP8[$232>>0]|0;
       $16 = $233;
      }
     }
    }
   }
  }
  $234 = $4;
  $235 = $13;
  $236 = $234 & $235;
  $237 = $12;
  $238 = (($237) + ($236<<1)|0);
  $239 = HEAP16[$238>>1]|0;
  $240 = $239&65535;
  $4 = $240;
  $241 = $11;
  $242 = ($240>>>0)>($241>>>0);
  if (!($242)) {
   break;
  }
  $243 = $5;
  $244 = (($243) + -1)|0;
  $5 = $244;
  $245 = ($244|0)!=(0);
  if (!($245)) {
   break;
  }
 }
 $246 = $9;
 $247 = $3;
 $248 = ((($247)) + 116|0);
 $249 = HEAP32[$248>>2]|0;
 $250 = ($246>>>0)<=($249>>>0);
 if ($250) {
  $251 = $9;
  $2 = $251;
  $255 = $2;
  STACKTOP = sp;return ($255|0);
 } else {
  $252 = $3;
  $253 = ((($252)) + 116|0);
  $254 = HEAP32[$253>>2]|0;
  $2 = $254;
  $255 = $2;
  STACKTOP = sp;return ($255|0);
 }
 return (0)|0;
}
function _flush_pending($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 $7 = $3;
 __tr_flush_bits($7);
 $8 = $3;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $2 = $10;
 $11 = $2;
 $12 = $1;
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11>>>0)>($14>>>0);
 if ($15) {
  $16 = $1;
  $17 = ((($16)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $2 = $18;
 }
 $19 = $2;
 $20 = ($19|0)==(0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $21 = $1;
 $22 = ((($21)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $3;
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $2;
 _memcpy(($23|0),($26|0),($27|0))|0;
 $28 = $2;
 $29 = $1;
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($28)|0);
 HEAP32[$30>>2] = $32;
 $33 = $2;
 $34 = $3;
 $35 = ((($34)) + 16|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + ($33)|0);
 HEAP32[$35>>2] = $37;
 $38 = $2;
 $39 = $1;
 $40 = ((($39)) + 20|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + ($38))|0;
 HEAP32[$40>>2] = $42;
 $43 = $2;
 $44 = $1;
 $45 = ((($44)) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) - ($43))|0;
 HEAP32[$45>>2] = $47;
 $48 = $2;
 $49 = $3;
 $50 = ((($49)) + 20|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) - ($48))|0;
 HEAP32[$50>>2] = $52;
 $53 = $3;
 $54 = ((($53)) + 20|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)==(0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $57 = $3;
 $58 = ((($57)) + 8|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $3;
 $61 = ((($60)) + 16|0);
 HEAP32[$61>>2] = $59;
 STACKTOP = sp;return;
}
function _slide_hash($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $6 = $1;
 $7 = ((($6)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 $9 = $1;
 $10 = ((($9)) + 76|0);
 $11 = HEAP32[$10>>2]|0;
 $2 = $11;
 $12 = $2;
 $13 = $1;
 $14 = ((($13)) + 68|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + ($12<<1)|0);
 $4 = $16;
 while(1) {
  $17 = $4;
  $18 = ((($17)) + -2|0);
  $4 = $18;
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $3 = $20;
  $21 = $3;
  $22 = $5;
  $23 = ($21>>>0)>=($22>>>0);
  if ($23) {
   $24 = $3;
   $25 = $5;
   $26 = (($24) - ($25))|0;
   $28 = $26;
  } else {
   $28 = 0;
  }
  $27 = $28&65535;
  $29 = $4;
  HEAP16[$29>>1] = $27;
  $30 = $2;
  $31 = (($30) + -1)|0;
  $2 = $31;
  $32 = ($31|0)!=(0);
  if (!($32)) {
   break;
  }
 }
 $33 = $5;
 $2 = $33;
 $34 = $2;
 $35 = $1;
 $36 = ((($35)) + 64|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + ($34<<1)|0);
 $4 = $38;
 while(1) {
  $39 = $4;
  $40 = ((($39)) + -2|0);
  $4 = $40;
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $3 = $42;
  $43 = $3;
  $44 = $5;
  $45 = ($43>>>0)>=($44>>>0);
  if ($45) {
   $46 = $3;
   $47 = $5;
   $48 = (($46) - ($47))|0;
   $50 = $48;
  } else {
   $50 = 0;
  }
  $49 = $50&65535;
  $51 = $4;
  HEAP16[$51>>1] = $49;
  $52 = $2;
  $53 = (($52) + -1)|0;
  $2 = $53;
  $54 = ($53|0)!=(0);
  if (!($54)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _read_buf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $7 = $10;
 $11 = $7;
 $12 = $6;
 $13 = ($11>>>0)>($12>>>0);
 if ($13) {
  $14 = $6;
  $7 = $14;
 }
 $15 = $7;
 $16 = ($15|0)==(0);
 if ($16) {
  $3 = 0;
  $63 = $3;
  STACKTOP = sp;return ($63|0);
 }
 $17 = $7;
 $18 = $4;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) - ($17))|0;
 HEAP32[$19>>2] = $21;
 $22 = $5;
 $23 = $4;
 $24 = HEAP32[$23>>2]|0;
 $25 = $7;
 _memcpy(($22|0),($24|0),($25|0))|0;
 $26 = $4;
 $27 = ((($26)) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 24|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(1);
 $32 = $4;
 if ($31) {
  $33 = ((($32)) + 48|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = $7;
  $37 = (_adler32($34,$35,$36)|0);
  $38 = $4;
  $39 = ((($38)) + 48|0);
  HEAP32[$39>>2] = $37;
 } else {
  $40 = ((($32)) + 28|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($41)) + 24|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)==(2);
  if ($44) {
   $45 = $4;
   $46 = ((($45)) + 48|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $5;
   $49 = $7;
   $50 = (_crc32($47,$48,$49)|0);
   $51 = $4;
   $52 = ((($51)) + 48|0);
   HEAP32[$52>>2] = $50;
  }
 }
 $53 = $7;
 $54 = $4;
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) + ($53)|0);
 HEAP32[$54>>2] = $56;
 $57 = $7;
 $58 = $4;
 $59 = ((($58)) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + ($57))|0;
 HEAP32[$59>>2] = $61;
 $62 = $7;
 $3 = $62;
 $63 = $3;
 STACKTOP = sp;return ($63|0);
}
function _deflateStateCheck($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = $2;
  $7 = ((($6)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $10 = $2;
   $11 = ((($10)) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    $14 = $2;
    $15 = ((($14)) + 28|0);
    $16 = HEAP32[$15>>2]|0;
    $3 = $16;
    $17 = $3;
    $18 = ($17|0)==(0|0);
    do {
     if (!($18)) {
      $19 = $3;
      $20 = HEAP32[$19>>2]|0;
      $21 = $2;
      $22 = ($20|0)!=($21|0);
      if (!($22)) {
       $23 = $3;
       $24 = ((($23)) + 4|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = ($25|0)!=(42);
       if ($26) {
        $27 = $3;
        $28 = ((($27)) + 4|0);
        $29 = HEAP32[$28>>2]|0;
        $30 = ($29|0)!=(57);
        if ($30) {
         $31 = $3;
         $32 = ((($31)) + 4|0);
         $33 = HEAP32[$32>>2]|0;
         $34 = ($33|0)!=(69);
         if ($34) {
          $35 = $3;
          $36 = ((($35)) + 4|0);
          $37 = HEAP32[$36>>2]|0;
          $38 = ($37|0)!=(73);
          if ($38) {
           $39 = $3;
           $40 = ((($39)) + 4|0);
           $41 = HEAP32[$40>>2]|0;
           $42 = ($41|0)!=(91);
           if ($42) {
            $43 = $3;
            $44 = ((($43)) + 4|0);
            $45 = HEAP32[$44>>2]|0;
            $46 = ($45|0)!=(103);
            if ($46) {
             $47 = $3;
             $48 = ((($47)) + 4|0);
             $49 = HEAP32[$48>>2]|0;
             $50 = ($49|0)!=(113);
             if ($50) {
              $51 = $3;
              $52 = ((($51)) + 4|0);
              $53 = HEAP32[$52>>2]|0;
              $54 = ($53|0)!=(666);
              if ($54) {
               break;
              }
             }
            }
           }
          }
         }
        }
       }
       $1 = 0;
       $55 = $1;
       STACKTOP = sp;return ($55|0);
      }
     }
    } while(0);
    $1 = 1;
    $55 = $1;
    STACKTOP = sp;return ($55|0);
   }
  }
 }
 $1 = 1;
 $55 = $1;
 STACKTOP = sp;return ($55|0);
}
function _deflate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $17 = $3;
 $18 = (_deflateStateCheck($17)|0);
 $19 = ($18|0)!=(0);
 $20 = $4;
 $21 = ($20|0)>(5);
 $or$cond = $19 | $21;
 $22 = $4;
 $23 = ($22|0)<(0);
 $or$cond3 = $or$cond | $23;
 if ($or$cond3) {
  $2 = -2;
  $1178 = $2;
  STACKTOP = sp;return ($1178|0);
 }
 $24 = $3;
 $25 = ((($24)) + 28|0);
 $26 = HEAP32[$25>>2]|0;
 $6 = $26;
 $27 = $3;
 $28 = ((($27)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 do {
  if (!($30)) {
   $31 = $3;
   $32 = ((($31)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(0);
   if ($34) {
    $35 = $3;
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(0|0);
    if ($37) {
     break;
    }
   }
   $38 = $6;
   $39 = ((($38)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)==(666);
   $42 = $4;
   $43 = ($42|0)!=(4);
   $or$cond5 = $41 & $43;
   if (!($or$cond5)) {
    $47 = $3;
    $48 = ((($47)) + 16|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)==(0);
    if ($50) {
     $51 = HEAP32[(8956)>>2]|0;
     $52 = $3;
     $53 = ((($52)) + 24|0);
     HEAP32[$53>>2] = $51;
     $2 = -5;
     $1178 = $2;
     STACKTOP = sp;return ($1178|0);
    }
    $54 = $6;
    $55 = ((($54)) + 40|0);
    $56 = HEAP32[$55>>2]|0;
    $5 = $56;
    $57 = $4;
    $58 = $6;
    $59 = ((($58)) + 40|0);
    HEAP32[$59>>2] = $57;
    $60 = $6;
    $61 = ((($60)) + 20|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)!=(0);
    $64 = $3;
    if ($63) {
     _flush_pending($64);
     $65 = $3;
     $66 = ((($65)) + 16|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)==(0);
     if ($68) {
      $69 = $6;
      $70 = ((($69)) + 40|0);
      HEAP32[$70>>2] = -1;
      $2 = 0;
      $1178 = $2;
      STACKTOP = sp;return ($1178|0);
     }
    } else {
     $71 = ((($64)) + 4|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ($72|0)==(0);
     if ($73) {
      $74 = $4;
      $75 = $74<<1;
      $76 = $4;
      $77 = ($76|0)>(4);
      $78 = $77 ? 9 : 0;
      $79 = (($75) - ($78))|0;
      $80 = $5;
      $81 = $80<<1;
      $82 = $5;
      $83 = ($82|0)>(4);
      $84 = $83 ? 9 : 0;
      $85 = (($81) - ($84))|0;
      $86 = ($79|0)<=($85|0);
      $87 = $4;
      $88 = ($87|0)!=(4);
      $or$cond7 = $86 & $88;
      if ($or$cond7) {
       $89 = HEAP32[(8956)>>2]|0;
       $90 = $3;
       $91 = ((($90)) + 24|0);
       HEAP32[$91>>2] = $89;
       $2 = -5;
       $1178 = $2;
       STACKTOP = sp;return ($1178|0);
      }
     }
    }
    $92 = $6;
    $93 = ((($92)) + 4|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(666);
    if ($95) {
     $96 = $3;
     $97 = ((($96)) + 4|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = ($98|0)!=(0);
     if ($99) {
      $100 = HEAP32[(8956)>>2]|0;
      $101 = $3;
      $102 = ((($101)) + 24|0);
      HEAP32[$102>>2] = $100;
      $2 = -5;
      $1178 = $2;
      STACKTOP = sp;return ($1178|0);
     }
    }
    $103 = $6;
    $104 = ((($103)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ($105|0)==(42);
    if ($106) {
     $107 = $6;
     $108 = ((($107)) + 48|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = (($109) - 8)|0;
     $111 = $110 << 4;
     $112 = (8 + ($111))|0;
     $113 = $112 << 8;
     $7 = $113;
     $114 = $6;
     $115 = ((($114)) + 136|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)>=(2);
     do {
      if ($117) {
       label = 22;
      } else {
       $118 = $6;
       $119 = ((($118)) + 132|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = ($120|0)<(2);
       if ($121) {
        label = 22;
       } else {
        $122 = $6;
        $123 = ((($122)) + 132|0);
        $124 = HEAP32[$123>>2]|0;
        $125 = ($124|0)<(6);
        if ($125) {
         $8 = 1;
         break;
        }
        $126 = $6;
        $127 = ((($126)) + 132|0);
        $128 = HEAP32[$127>>2]|0;
        $129 = ($128|0)==(6);
        if ($129) {
         $8 = 2;
         break;
        } else {
         $8 = 3;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 22) {
      $8 = 0;
     }
     $130 = $8;
     $131 = $130 << 6;
     $132 = $7;
     $133 = $132 | $131;
     $7 = $133;
     $134 = $6;
     $135 = ((($134)) + 108|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ($136|0)!=(0);
     if ($137) {
      $138 = $7;
      $139 = $138 | 32;
      $7 = $139;
     }
     $140 = $7;
     $141 = (($140>>>0) % 31)&-1;
     $142 = (31 - ($141))|0;
     $143 = $7;
     $144 = (($143) + ($142))|0;
     $7 = $144;
     $145 = $6;
     $146 = $7;
     _putShortMSB($145,$146);
     $147 = $6;
     $148 = ((($147)) + 108|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($149|0)!=(0);
     if ($150) {
      $151 = $6;
      $152 = $3;
      $153 = ((($152)) + 48|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = $154 >>> 16;
      _putShortMSB($151,$155);
      $156 = $6;
      $157 = $3;
      $158 = ((($157)) + 48|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = $159 & 65535;
      _putShortMSB($156,$160);
     }
     $161 = (_adler32(0,0,0)|0);
     $162 = $3;
     $163 = ((($162)) + 48|0);
     HEAP32[$163>>2] = $161;
     $164 = $6;
     $165 = ((($164)) + 4|0);
     HEAP32[$165>>2] = 113;
     $166 = $3;
     _flush_pending($166);
     $167 = $6;
     $168 = ((($167)) + 20|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = ($169|0)!=(0);
     if ($170) {
      $171 = $6;
      $172 = ((($171)) + 40|0);
      HEAP32[$172>>2] = -1;
      $2 = 0;
      $1178 = $2;
      STACKTOP = sp;return ($1178|0);
     }
    }
    $173 = $6;
    $174 = ((($173)) + 4|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = ($175|0)==(57);
    do {
     if ($176) {
      $177 = (_crc32(0,0,0)|0);
      $178 = $3;
      $179 = ((($178)) + 48|0);
      HEAP32[$179>>2] = $177;
      $180 = $6;
      $181 = ((($180)) + 20|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = (($182) + 1)|0;
      HEAP32[$181>>2] = $183;
      $184 = $6;
      $185 = ((($184)) + 8|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = (($186) + ($182)|0);
      HEAP8[$187>>0] = 31;
      $188 = $6;
      $189 = ((($188)) + 20|0);
      $190 = HEAP32[$189>>2]|0;
      $191 = (($190) + 1)|0;
      HEAP32[$189>>2] = $191;
      $192 = $6;
      $193 = ((($192)) + 8|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = (($194) + ($190)|0);
      HEAP8[$195>>0] = -117;
      $196 = $6;
      $197 = ((($196)) + 20|0);
      $198 = HEAP32[$197>>2]|0;
      $199 = (($198) + 1)|0;
      HEAP32[$197>>2] = $199;
      $200 = $6;
      $201 = ((($200)) + 8|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = (($202) + ($198)|0);
      HEAP8[$203>>0] = 8;
      $204 = $6;
      $205 = ((($204)) + 28|0);
      $206 = HEAP32[$205>>2]|0;
      $207 = ($206|0)==(0|0);
      $208 = $6;
      if ($207) {
       $209 = ((($208)) + 20|0);
       $210 = HEAP32[$209>>2]|0;
       $211 = (($210) + 1)|0;
       HEAP32[$209>>2] = $211;
       $212 = $6;
       $213 = ((($212)) + 8|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = (($214) + ($210)|0);
       HEAP8[$215>>0] = 0;
       $216 = $6;
       $217 = ((($216)) + 20|0);
       $218 = HEAP32[$217>>2]|0;
       $219 = (($218) + 1)|0;
       HEAP32[$217>>2] = $219;
       $220 = $6;
       $221 = ((($220)) + 8|0);
       $222 = HEAP32[$221>>2]|0;
       $223 = (($222) + ($218)|0);
       HEAP8[$223>>0] = 0;
       $224 = $6;
       $225 = ((($224)) + 20|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = (($226) + 1)|0;
       HEAP32[$225>>2] = $227;
       $228 = $6;
       $229 = ((($228)) + 8|0);
       $230 = HEAP32[$229>>2]|0;
       $231 = (($230) + ($226)|0);
       HEAP8[$231>>0] = 0;
       $232 = $6;
       $233 = ((($232)) + 20|0);
       $234 = HEAP32[$233>>2]|0;
       $235 = (($234) + 1)|0;
       HEAP32[$233>>2] = $235;
       $236 = $6;
       $237 = ((($236)) + 8|0);
       $238 = HEAP32[$237>>2]|0;
       $239 = (($238) + ($234)|0);
       HEAP8[$239>>0] = 0;
       $240 = $6;
       $241 = ((($240)) + 20|0);
       $242 = HEAP32[$241>>2]|0;
       $243 = (($242) + 1)|0;
       HEAP32[$241>>2] = $243;
       $244 = $6;
       $245 = ((($244)) + 8|0);
       $246 = HEAP32[$245>>2]|0;
       $247 = (($246) + ($242)|0);
       HEAP8[$247>>0] = 0;
       $248 = $6;
       $249 = ((($248)) + 132|0);
       $250 = HEAP32[$249>>2]|0;
       $251 = ($250|0)==(9);
       if ($251) {
        $263 = 2;
       } else {
        $252 = $6;
        $253 = ((($252)) + 136|0);
        $254 = HEAP32[$253>>2]|0;
        $255 = ($254|0)>=(2);
        if ($255) {
         $260 = 1;
        } else {
         $256 = $6;
         $257 = ((($256)) + 132|0);
         $258 = HEAP32[$257>>2]|0;
         $259 = ($258|0)<(2);
         $260 = $259;
        }
        $261 = $260 ? 4 : 0;
        $263 = $261;
       }
       $262 = $263&255;
       $264 = $6;
       $265 = ((($264)) + 20|0);
       $266 = HEAP32[$265>>2]|0;
       $267 = (($266) + 1)|0;
       HEAP32[$265>>2] = $267;
       $268 = $6;
       $269 = ((($268)) + 8|0);
       $270 = HEAP32[$269>>2]|0;
       $271 = (($270) + ($266)|0);
       HEAP8[$271>>0] = $262;
       $272 = $6;
       $273 = ((($272)) + 20|0);
       $274 = HEAP32[$273>>2]|0;
       $275 = (($274) + 1)|0;
       HEAP32[$273>>2] = $275;
       $276 = $6;
       $277 = ((($276)) + 8|0);
       $278 = HEAP32[$277>>2]|0;
       $279 = (($278) + ($274)|0);
       HEAP8[$279>>0] = 3;
       $280 = $6;
       $281 = ((($280)) + 4|0);
       HEAP32[$281>>2] = 113;
       $282 = $3;
       _flush_pending($282);
       $283 = $6;
       $284 = ((($283)) + 20|0);
       $285 = HEAP32[$284>>2]|0;
       $286 = ($285|0)!=(0);
       if (!($286)) {
        break;
       }
       $287 = $6;
       $288 = ((($287)) + 40|0);
       HEAP32[$288>>2] = -1;
       $2 = 0;
       $1178 = $2;
       STACKTOP = sp;return ($1178|0);
      }
      $289 = ((($208)) + 28|0);
      $290 = HEAP32[$289>>2]|0;
      $291 = HEAP32[$290>>2]|0;
      $292 = ($291|0)!=(0);
      $293 = $292 ? 1 : 0;
      $294 = $6;
      $295 = ((($294)) + 28|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = ((($296)) + 44|0);
      $298 = HEAP32[$297>>2]|0;
      $299 = ($298|0)!=(0);
      $300 = $299 ? 2 : 0;
      $301 = (($293) + ($300))|0;
      $302 = $6;
      $303 = ((($302)) + 28|0);
      $304 = HEAP32[$303>>2]|0;
      $305 = ((($304)) + 16|0);
      $306 = HEAP32[$305>>2]|0;
      $307 = ($306|0)==(0|0);
      $308 = $307 ? 0 : 4;
      $309 = (($301) + ($308))|0;
      $310 = $6;
      $311 = ((($310)) + 28|0);
      $312 = HEAP32[$311>>2]|0;
      $313 = ((($312)) + 28|0);
      $314 = HEAP32[$313>>2]|0;
      $315 = ($314|0)==(0|0);
      $316 = $315 ? 0 : 8;
      $317 = (($309) + ($316))|0;
      $318 = $6;
      $319 = ((($318)) + 28|0);
      $320 = HEAP32[$319>>2]|0;
      $321 = ((($320)) + 36|0);
      $322 = HEAP32[$321>>2]|0;
      $323 = ($322|0)==(0|0);
      $324 = $323 ? 0 : 16;
      $325 = (($317) + ($324))|0;
      $326 = $325&255;
      $327 = $6;
      $328 = ((($327)) + 20|0);
      $329 = HEAP32[$328>>2]|0;
      $330 = (($329) + 1)|0;
      HEAP32[$328>>2] = $330;
      $331 = $6;
      $332 = ((($331)) + 8|0);
      $333 = HEAP32[$332>>2]|0;
      $334 = (($333) + ($329)|0);
      HEAP8[$334>>0] = $326;
      $335 = $6;
      $336 = ((($335)) + 28|0);
      $337 = HEAP32[$336>>2]|0;
      $338 = ((($337)) + 4|0);
      $339 = HEAP32[$338>>2]|0;
      $340 = $339 & 255;
      $341 = $340&255;
      $342 = $6;
      $343 = ((($342)) + 20|0);
      $344 = HEAP32[$343>>2]|0;
      $345 = (($344) + 1)|0;
      HEAP32[$343>>2] = $345;
      $346 = $6;
      $347 = ((($346)) + 8|0);
      $348 = HEAP32[$347>>2]|0;
      $349 = (($348) + ($344)|0);
      HEAP8[$349>>0] = $341;
      $350 = $6;
      $351 = ((($350)) + 28|0);
      $352 = HEAP32[$351>>2]|0;
      $353 = ((($352)) + 4|0);
      $354 = HEAP32[$353>>2]|0;
      $355 = $354 >>> 8;
      $356 = $355 & 255;
      $357 = $356&255;
      $358 = $6;
      $359 = ((($358)) + 20|0);
      $360 = HEAP32[$359>>2]|0;
      $361 = (($360) + 1)|0;
      HEAP32[$359>>2] = $361;
      $362 = $6;
      $363 = ((($362)) + 8|0);
      $364 = HEAP32[$363>>2]|0;
      $365 = (($364) + ($360)|0);
      HEAP8[$365>>0] = $357;
      $366 = $6;
      $367 = ((($366)) + 28|0);
      $368 = HEAP32[$367>>2]|0;
      $369 = ((($368)) + 4|0);
      $370 = HEAP32[$369>>2]|0;
      $371 = $370 >>> 16;
      $372 = $371 & 255;
      $373 = $372&255;
      $374 = $6;
      $375 = ((($374)) + 20|0);
      $376 = HEAP32[$375>>2]|0;
      $377 = (($376) + 1)|0;
      HEAP32[$375>>2] = $377;
      $378 = $6;
      $379 = ((($378)) + 8|0);
      $380 = HEAP32[$379>>2]|0;
      $381 = (($380) + ($376)|0);
      HEAP8[$381>>0] = $373;
      $382 = $6;
      $383 = ((($382)) + 28|0);
      $384 = HEAP32[$383>>2]|0;
      $385 = ((($384)) + 4|0);
      $386 = HEAP32[$385>>2]|0;
      $387 = $386 >>> 24;
      $388 = $387 & 255;
      $389 = $388&255;
      $390 = $6;
      $391 = ((($390)) + 20|0);
      $392 = HEAP32[$391>>2]|0;
      $393 = (($392) + 1)|0;
      HEAP32[$391>>2] = $393;
      $394 = $6;
      $395 = ((($394)) + 8|0);
      $396 = HEAP32[$395>>2]|0;
      $397 = (($396) + ($392)|0);
      HEAP8[$397>>0] = $389;
      $398 = $6;
      $399 = ((($398)) + 132|0);
      $400 = HEAP32[$399>>2]|0;
      $401 = ($400|0)==(9);
      if ($401) {
       $413 = 2;
      } else {
       $402 = $6;
       $403 = ((($402)) + 136|0);
       $404 = HEAP32[$403>>2]|0;
       $405 = ($404|0)>=(2);
       if ($405) {
        $410 = 1;
       } else {
        $406 = $6;
        $407 = ((($406)) + 132|0);
        $408 = HEAP32[$407>>2]|0;
        $409 = ($408|0)<(2);
        $410 = $409;
       }
       $411 = $410 ? 4 : 0;
       $413 = $411;
      }
      $412 = $413&255;
      $414 = $6;
      $415 = ((($414)) + 20|0);
      $416 = HEAP32[$415>>2]|0;
      $417 = (($416) + 1)|0;
      HEAP32[$415>>2] = $417;
      $418 = $6;
      $419 = ((($418)) + 8|0);
      $420 = HEAP32[$419>>2]|0;
      $421 = (($420) + ($416)|0);
      HEAP8[$421>>0] = $412;
      $422 = $6;
      $423 = ((($422)) + 28|0);
      $424 = HEAP32[$423>>2]|0;
      $425 = ((($424)) + 12|0);
      $426 = HEAP32[$425>>2]|0;
      $427 = $426 & 255;
      $428 = $427&255;
      $429 = $6;
      $430 = ((($429)) + 20|0);
      $431 = HEAP32[$430>>2]|0;
      $432 = (($431) + 1)|0;
      HEAP32[$430>>2] = $432;
      $433 = $6;
      $434 = ((($433)) + 8|0);
      $435 = HEAP32[$434>>2]|0;
      $436 = (($435) + ($431)|0);
      HEAP8[$436>>0] = $428;
      $437 = $6;
      $438 = ((($437)) + 28|0);
      $439 = HEAP32[$438>>2]|0;
      $440 = ((($439)) + 16|0);
      $441 = HEAP32[$440>>2]|0;
      $442 = ($441|0)!=(0|0);
      if ($442) {
       $443 = $6;
       $444 = ((($443)) + 28|0);
       $445 = HEAP32[$444>>2]|0;
       $446 = ((($445)) + 20|0);
       $447 = HEAP32[$446>>2]|0;
       $448 = $447 & 255;
       $449 = $448&255;
       $450 = $6;
       $451 = ((($450)) + 20|0);
       $452 = HEAP32[$451>>2]|0;
       $453 = (($452) + 1)|0;
       HEAP32[$451>>2] = $453;
       $454 = $6;
       $455 = ((($454)) + 8|0);
       $456 = HEAP32[$455>>2]|0;
       $457 = (($456) + ($452)|0);
       HEAP8[$457>>0] = $449;
       $458 = $6;
       $459 = ((($458)) + 28|0);
       $460 = HEAP32[$459>>2]|0;
       $461 = ((($460)) + 20|0);
       $462 = HEAP32[$461>>2]|0;
       $463 = $462 >>> 8;
       $464 = $463 & 255;
       $465 = $464&255;
       $466 = $6;
       $467 = ((($466)) + 20|0);
       $468 = HEAP32[$467>>2]|0;
       $469 = (($468) + 1)|0;
       HEAP32[$467>>2] = $469;
       $470 = $6;
       $471 = ((($470)) + 8|0);
       $472 = HEAP32[$471>>2]|0;
       $473 = (($472) + ($468)|0);
       HEAP8[$473>>0] = $465;
      }
      $474 = $6;
      $475 = ((($474)) + 28|0);
      $476 = HEAP32[$475>>2]|0;
      $477 = ((($476)) + 44|0);
      $478 = HEAP32[$477>>2]|0;
      $479 = ($478|0)!=(0);
      if ($479) {
       $480 = $3;
       $481 = ((($480)) + 48|0);
       $482 = HEAP32[$481>>2]|0;
       $483 = $6;
       $484 = ((($483)) + 8|0);
       $485 = HEAP32[$484>>2]|0;
       $486 = $6;
       $487 = ((($486)) + 20|0);
       $488 = HEAP32[$487>>2]|0;
       $489 = (_crc32($482,$485,$488)|0);
       $490 = $3;
       $491 = ((($490)) + 48|0);
       HEAP32[$491>>2] = $489;
      }
      $492 = $6;
      $493 = ((($492)) + 32|0);
      HEAP32[$493>>2] = 0;
      $494 = $6;
      $495 = ((($494)) + 4|0);
      HEAP32[$495>>2] = 69;
     }
    } while(0);
    $496 = $6;
    $497 = ((($496)) + 4|0);
    $498 = HEAP32[$497>>2]|0;
    $499 = ($498|0)==(69);
    if ($499) {
     $500 = $6;
     $501 = ((($500)) + 28|0);
     $502 = HEAP32[$501>>2]|0;
     $503 = ((($502)) + 16|0);
     $504 = HEAP32[$503>>2]|0;
     $505 = ($504|0)!=(0|0);
     if ($505) {
      $506 = $6;
      $507 = ((($506)) + 20|0);
      $508 = HEAP32[$507>>2]|0;
      $9 = $508;
      $509 = $6;
      $510 = ((($509)) + 28|0);
      $511 = HEAP32[$510>>2]|0;
      $512 = ((($511)) + 20|0);
      $513 = HEAP32[$512>>2]|0;
      $514 = $513 & 65535;
      $515 = $6;
      $516 = ((($515)) + 32|0);
      $517 = HEAP32[$516>>2]|0;
      $518 = (($514) - ($517))|0;
      $10 = $518;
      while(1) {
       $519 = $6;
       $520 = ((($519)) + 20|0);
       $521 = HEAP32[$520>>2]|0;
       $522 = $10;
       $523 = (($521) + ($522))|0;
       $524 = $6;
       $525 = ((($524)) + 12|0);
       $526 = HEAP32[$525>>2]|0;
       $527 = ($523>>>0)>($526>>>0);
       $528 = $6;
       if (!($527)) {
        break;
       }
       $529 = ((($528)) + 12|0);
       $530 = HEAP32[$529>>2]|0;
       $531 = $6;
       $532 = ((($531)) + 20|0);
       $533 = HEAP32[$532>>2]|0;
       $534 = (($530) - ($533))|0;
       $11 = $534;
       $535 = $6;
       $536 = ((($535)) + 8|0);
       $537 = HEAP32[$536>>2]|0;
       $538 = $6;
       $539 = ((($538)) + 20|0);
       $540 = HEAP32[$539>>2]|0;
       $541 = (($537) + ($540)|0);
       $542 = $6;
       $543 = ((($542)) + 28|0);
       $544 = HEAP32[$543>>2]|0;
       $545 = ((($544)) + 16|0);
       $546 = HEAP32[$545>>2]|0;
       $547 = $6;
       $548 = ((($547)) + 32|0);
       $549 = HEAP32[$548>>2]|0;
       $550 = (($546) + ($549)|0);
       $551 = $11;
       _memcpy(($541|0),($550|0),($551|0))|0;
       $552 = $6;
       $553 = ((($552)) + 12|0);
       $554 = HEAP32[$553>>2]|0;
       $555 = $6;
       $556 = ((($555)) + 20|0);
       HEAP32[$556>>2] = $554;
       $557 = $6;
       $558 = ((($557)) + 28|0);
       $559 = HEAP32[$558>>2]|0;
       $560 = ((($559)) + 44|0);
       $561 = HEAP32[$560>>2]|0;
       $562 = ($561|0)!=(0);
       if ($562) {
        $563 = $6;
        $564 = ((($563)) + 20|0);
        $565 = HEAP32[$564>>2]|0;
        $566 = $9;
        $567 = ($565>>>0)>($566>>>0);
        if ($567) {
         $568 = $3;
         $569 = ((($568)) + 48|0);
         $570 = HEAP32[$569>>2]|0;
         $571 = $6;
         $572 = ((($571)) + 8|0);
         $573 = HEAP32[$572>>2]|0;
         $574 = $9;
         $575 = (($573) + ($574)|0);
         $576 = $6;
         $577 = ((($576)) + 20|0);
         $578 = HEAP32[$577>>2]|0;
         $579 = $9;
         $580 = (($578) - ($579))|0;
         $581 = (_crc32($570,$575,$580)|0);
         $582 = $3;
         $583 = ((($582)) + 48|0);
         HEAP32[$583>>2] = $581;
        }
       }
       $584 = $11;
       $585 = $6;
       $586 = ((($585)) + 32|0);
       $587 = HEAP32[$586>>2]|0;
       $588 = (($587) + ($584))|0;
       HEAP32[$586>>2] = $588;
       $589 = $3;
       _flush_pending($589);
       $590 = $6;
       $591 = ((($590)) + 20|0);
       $592 = HEAP32[$591>>2]|0;
       $593 = ($592|0)!=(0);
       if ($593) {
        label = 59;
        break;
       }
       $9 = 0;
       $596 = $11;
       $597 = $10;
       $598 = (($597) - ($596))|0;
       $10 = $598;
      }
      if ((label|0) == 59) {
       $594 = $6;
       $595 = ((($594)) + 40|0);
       HEAP32[$595>>2] = -1;
       $2 = 0;
       $1178 = $2;
       STACKTOP = sp;return ($1178|0);
      }
      $599 = ((($528)) + 8|0);
      $600 = HEAP32[$599>>2]|0;
      $601 = $6;
      $602 = ((($601)) + 20|0);
      $603 = HEAP32[$602>>2]|0;
      $604 = (($600) + ($603)|0);
      $605 = $6;
      $606 = ((($605)) + 28|0);
      $607 = HEAP32[$606>>2]|0;
      $608 = ((($607)) + 16|0);
      $609 = HEAP32[$608>>2]|0;
      $610 = $6;
      $611 = ((($610)) + 32|0);
      $612 = HEAP32[$611>>2]|0;
      $613 = (($609) + ($612)|0);
      $614 = $10;
      _memcpy(($604|0),($613|0),($614|0))|0;
      $615 = $10;
      $616 = $6;
      $617 = ((($616)) + 20|0);
      $618 = HEAP32[$617>>2]|0;
      $619 = (($618) + ($615))|0;
      HEAP32[$617>>2] = $619;
      $620 = $6;
      $621 = ((($620)) + 28|0);
      $622 = HEAP32[$621>>2]|0;
      $623 = ((($622)) + 44|0);
      $624 = HEAP32[$623>>2]|0;
      $625 = ($624|0)!=(0);
      if ($625) {
       $626 = $6;
       $627 = ((($626)) + 20|0);
       $628 = HEAP32[$627>>2]|0;
       $629 = $9;
       $630 = ($628>>>0)>($629>>>0);
       if ($630) {
        $631 = $3;
        $632 = ((($631)) + 48|0);
        $633 = HEAP32[$632>>2]|0;
        $634 = $6;
        $635 = ((($634)) + 8|0);
        $636 = HEAP32[$635>>2]|0;
        $637 = $9;
        $638 = (($636) + ($637)|0);
        $639 = $6;
        $640 = ((($639)) + 20|0);
        $641 = HEAP32[$640>>2]|0;
        $642 = $9;
        $643 = (($641) - ($642))|0;
        $644 = (_crc32($633,$638,$643)|0);
        $645 = $3;
        $646 = ((($645)) + 48|0);
        HEAP32[$646>>2] = $644;
       }
      }
      $647 = $6;
      $648 = ((($647)) + 32|0);
      HEAP32[$648>>2] = 0;
     }
     $649 = $6;
     $650 = ((($649)) + 4|0);
     HEAP32[$650>>2] = 73;
    }
    $651 = $6;
    $652 = ((($651)) + 4|0);
    $653 = HEAP32[$652>>2]|0;
    $654 = ($653|0)==(73);
    if ($654) {
     $655 = $6;
     $656 = ((($655)) + 28|0);
     $657 = HEAP32[$656>>2]|0;
     $658 = ((($657)) + 28|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = ($659|0)!=(0|0);
     if ($660) {
      $661 = $6;
      $662 = ((($661)) + 20|0);
      $663 = HEAP32[$662>>2]|0;
      $12 = $663;
      while(1) {
       $664 = $6;
       $665 = ((($664)) + 20|0);
       $666 = HEAP32[$665>>2]|0;
       $667 = $6;
       $668 = ((($667)) + 12|0);
       $669 = HEAP32[$668>>2]|0;
       $670 = ($666|0)==($669|0);
       if ($670) {
        $671 = $6;
        $672 = ((($671)) + 28|0);
        $673 = HEAP32[$672>>2]|0;
        $674 = ((($673)) + 44|0);
        $675 = HEAP32[$674>>2]|0;
        $676 = ($675|0)!=(0);
        do {
         if ($676) {
          $677 = $6;
          $678 = ((($677)) + 20|0);
          $679 = HEAP32[$678>>2]|0;
          $680 = $12;
          $681 = ($679>>>0)>($680>>>0);
          if (!($681)) {
           break;
          }
          $682 = $3;
          $683 = ((($682)) + 48|0);
          $684 = HEAP32[$683>>2]|0;
          $685 = $6;
          $686 = ((($685)) + 8|0);
          $687 = HEAP32[$686>>2]|0;
          $688 = $12;
          $689 = (($687) + ($688)|0);
          $690 = $6;
          $691 = ((($690)) + 20|0);
          $692 = HEAP32[$691>>2]|0;
          $693 = $12;
          $694 = (($692) - ($693))|0;
          $695 = (_crc32($684,$689,$694)|0);
          $696 = $3;
          $697 = ((($696)) + 48|0);
          HEAP32[$697>>2] = $695;
         }
        } while(0);
        $698 = $3;
        _flush_pending($698);
        $699 = $6;
        $700 = ((($699)) + 20|0);
        $701 = HEAP32[$700>>2]|0;
        $702 = ($701|0)!=(0);
        if ($702) {
         label = 74;
         break;
        }
        $12 = 0;
       }
       $705 = $6;
       $706 = ((($705)) + 32|0);
       $707 = HEAP32[$706>>2]|0;
       $708 = (($707) + 1)|0;
       HEAP32[$706>>2] = $708;
       $709 = $6;
       $710 = ((($709)) + 28|0);
       $711 = HEAP32[$710>>2]|0;
       $712 = ((($711)) + 28|0);
       $713 = HEAP32[$712>>2]|0;
       $714 = (($713) + ($707)|0);
       $715 = HEAP8[$714>>0]|0;
       $716 = $715&255;
       $13 = $716;
       $717 = $13;
       $718 = $717&255;
       $719 = $6;
       $720 = ((($719)) + 20|0);
       $721 = HEAP32[$720>>2]|0;
       $722 = (($721) + 1)|0;
       HEAP32[$720>>2] = $722;
       $723 = $6;
       $724 = ((($723)) + 8|0);
       $725 = HEAP32[$724>>2]|0;
       $726 = (($725) + ($721)|0);
       HEAP8[$726>>0] = $718;
       $727 = $13;
       $728 = ($727|0)!=(0);
       if (!($728)) {
        break;
       }
      }
      if ((label|0) == 74) {
       $703 = $6;
       $704 = ((($703)) + 40|0);
       HEAP32[$704>>2] = -1;
       $2 = 0;
       $1178 = $2;
       STACKTOP = sp;return ($1178|0);
      }
      $729 = $6;
      $730 = ((($729)) + 28|0);
      $731 = HEAP32[$730>>2]|0;
      $732 = ((($731)) + 44|0);
      $733 = HEAP32[$732>>2]|0;
      $734 = ($733|0)!=(0);
      if ($734) {
       $735 = $6;
       $736 = ((($735)) + 20|0);
       $737 = HEAP32[$736>>2]|0;
       $738 = $12;
       $739 = ($737>>>0)>($738>>>0);
       if ($739) {
        $740 = $3;
        $741 = ((($740)) + 48|0);
        $742 = HEAP32[$741>>2]|0;
        $743 = $6;
        $744 = ((($743)) + 8|0);
        $745 = HEAP32[$744>>2]|0;
        $746 = $12;
        $747 = (($745) + ($746)|0);
        $748 = $6;
        $749 = ((($748)) + 20|0);
        $750 = HEAP32[$749>>2]|0;
        $751 = $12;
        $752 = (($750) - ($751))|0;
        $753 = (_crc32($742,$747,$752)|0);
        $754 = $3;
        $755 = ((($754)) + 48|0);
        HEAP32[$755>>2] = $753;
       }
      }
      $756 = $6;
      $757 = ((($756)) + 32|0);
      HEAP32[$757>>2] = 0;
     }
     $758 = $6;
     $759 = ((($758)) + 4|0);
     HEAP32[$759>>2] = 91;
    }
    $760 = $6;
    $761 = ((($760)) + 4|0);
    $762 = HEAP32[$761>>2]|0;
    $763 = ($762|0)==(91);
    if ($763) {
     $764 = $6;
     $765 = ((($764)) + 28|0);
     $766 = HEAP32[$765>>2]|0;
     $767 = ((($766)) + 36|0);
     $768 = HEAP32[$767>>2]|0;
     $769 = ($768|0)!=(0|0);
     if ($769) {
      $770 = $6;
      $771 = ((($770)) + 20|0);
      $772 = HEAP32[$771>>2]|0;
      $14 = $772;
      while(1) {
       $773 = $6;
       $774 = ((($773)) + 20|0);
       $775 = HEAP32[$774>>2]|0;
       $776 = $6;
       $777 = ((($776)) + 12|0);
       $778 = HEAP32[$777>>2]|0;
       $779 = ($775|0)==($778|0);
       if ($779) {
        $780 = $6;
        $781 = ((($780)) + 28|0);
        $782 = HEAP32[$781>>2]|0;
        $783 = ((($782)) + 44|0);
        $784 = HEAP32[$783>>2]|0;
        $785 = ($784|0)!=(0);
        do {
         if ($785) {
          $786 = $6;
          $787 = ((($786)) + 20|0);
          $788 = HEAP32[$787>>2]|0;
          $789 = $14;
          $790 = ($788>>>0)>($789>>>0);
          if (!($790)) {
           break;
          }
          $791 = $3;
          $792 = ((($791)) + 48|0);
          $793 = HEAP32[$792>>2]|0;
          $794 = $6;
          $795 = ((($794)) + 8|0);
          $796 = HEAP32[$795>>2]|0;
          $797 = $14;
          $798 = (($796) + ($797)|0);
          $799 = $6;
          $800 = ((($799)) + 20|0);
          $801 = HEAP32[$800>>2]|0;
          $802 = $14;
          $803 = (($801) - ($802))|0;
          $804 = (_crc32($793,$798,$803)|0);
          $805 = $3;
          $806 = ((($805)) + 48|0);
          HEAP32[$806>>2] = $804;
         }
        } while(0);
        $807 = $3;
        _flush_pending($807);
        $808 = $6;
        $809 = ((($808)) + 20|0);
        $810 = HEAP32[$809>>2]|0;
        $811 = ($810|0)!=(0);
        if ($811) {
         label = 90;
         break;
        }
        $14 = 0;
       }
       $814 = $6;
       $815 = ((($814)) + 32|0);
       $816 = HEAP32[$815>>2]|0;
       $817 = (($816) + 1)|0;
       HEAP32[$815>>2] = $817;
       $818 = $6;
       $819 = ((($818)) + 28|0);
       $820 = HEAP32[$819>>2]|0;
       $821 = ((($820)) + 36|0);
       $822 = HEAP32[$821>>2]|0;
       $823 = (($822) + ($816)|0);
       $824 = HEAP8[$823>>0]|0;
       $825 = $824&255;
       $15 = $825;
       $826 = $15;
       $827 = $826&255;
       $828 = $6;
       $829 = ((($828)) + 20|0);
       $830 = HEAP32[$829>>2]|0;
       $831 = (($830) + 1)|0;
       HEAP32[$829>>2] = $831;
       $832 = $6;
       $833 = ((($832)) + 8|0);
       $834 = HEAP32[$833>>2]|0;
       $835 = (($834) + ($830)|0);
       HEAP8[$835>>0] = $827;
       $836 = $15;
       $837 = ($836|0)!=(0);
       if (!($837)) {
        break;
       }
      }
      if ((label|0) == 90) {
       $812 = $6;
       $813 = ((($812)) + 40|0);
       HEAP32[$813>>2] = -1;
       $2 = 0;
       $1178 = $2;
       STACKTOP = sp;return ($1178|0);
      }
      $838 = $6;
      $839 = ((($838)) + 28|0);
      $840 = HEAP32[$839>>2]|0;
      $841 = ((($840)) + 44|0);
      $842 = HEAP32[$841>>2]|0;
      $843 = ($842|0)!=(0);
      if ($843) {
       $844 = $6;
       $845 = ((($844)) + 20|0);
       $846 = HEAP32[$845>>2]|0;
       $847 = $14;
       $848 = ($846>>>0)>($847>>>0);
       if ($848) {
        $849 = $3;
        $850 = ((($849)) + 48|0);
        $851 = HEAP32[$850>>2]|0;
        $852 = $6;
        $853 = ((($852)) + 8|0);
        $854 = HEAP32[$853>>2]|0;
        $855 = $14;
        $856 = (($854) + ($855)|0);
        $857 = $6;
        $858 = ((($857)) + 20|0);
        $859 = HEAP32[$858>>2]|0;
        $860 = $14;
        $861 = (($859) - ($860))|0;
        $862 = (_crc32($851,$856,$861)|0);
        $863 = $3;
        $864 = ((($863)) + 48|0);
        HEAP32[$864>>2] = $862;
       }
      }
     }
     $865 = $6;
     $866 = ((($865)) + 4|0);
     HEAP32[$866>>2] = 103;
    }
    $867 = $6;
    $868 = ((($867)) + 4|0);
    $869 = HEAP32[$868>>2]|0;
    $870 = ($869|0)==(103);
    if ($870) {
     $871 = $6;
     $872 = ((($871)) + 28|0);
     $873 = HEAP32[$872>>2]|0;
     $874 = ((($873)) + 44|0);
     $875 = HEAP32[$874>>2]|0;
     $876 = ($875|0)!=(0);
     if ($876) {
      $877 = $6;
      $878 = ((($877)) + 20|0);
      $879 = HEAP32[$878>>2]|0;
      $880 = (($879) + 2)|0;
      $881 = $6;
      $882 = ((($881)) + 12|0);
      $883 = HEAP32[$882>>2]|0;
      $884 = ($880>>>0)>($883>>>0);
      if ($884) {
       $885 = $3;
       _flush_pending($885);
       $886 = $6;
       $887 = ((($886)) + 20|0);
       $888 = HEAP32[$887>>2]|0;
       $889 = ($888|0)!=(0);
       if ($889) {
        $890 = $6;
        $891 = ((($890)) + 40|0);
        HEAP32[$891>>2] = -1;
        $2 = 0;
        $1178 = $2;
        STACKTOP = sp;return ($1178|0);
       }
      }
      $892 = $3;
      $893 = ((($892)) + 48|0);
      $894 = HEAP32[$893>>2]|0;
      $895 = $894 & 255;
      $896 = $895&255;
      $897 = $6;
      $898 = ((($897)) + 20|0);
      $899 = HEAP32[$898>>2]|0;
      $900 = (($899) + 1)|0;
      HEAP32[$898>>2] = $900;
      $901 = $6;
      $902 = ((($901)) + 8|0);
      $903 = HEAP32[$902>>2]|0;
      $904 = (($903) + ($899)|0);
      HEAP8[$904>>0] = $896;
      $905 = $3;
      $906 = ((($905)) + 48|0);
      $907 = HEAP32[$906>>2]|0;
      $908 = $907 >>> 8;
      $909 = $908 & 255;
      $910 = $909&255;
      $911 = $6;
      $912 = ((($911)) + 20|0);
      $913 = HEAP32[$912>>2]|0;
      $914 = (($913) + 1)|0;
      HEAP32[$912>>2] = $914;
      $915 = $6;
      $916 = ((($915)) + 8|0);
      $917 = HEAP32[$916>>2]|0;
      $918 = (($917) + ($913)|0);
      HEAP8[$918>>0] = $910;
      $919 = (_crc32(0,0,0)|0);
      $920 = $3;
      $921 = ((($920)) + 48|0);
      HEAP32[$921>>2] = $919;
     }
     $922 = $6;
     $923 = ((($922)) + 4|0);
     HEAP32[$923>>2] = 113;
     $924 = $3;
     _flush_pending($924);
     $925 = $6;
     $926 = ((($925)) + 20|0);
     $927 = HEAP32[$926>>2]|0;
     $928 = ($927|0)!=(0);
     if ($928) {
      $929 = $6;
      $930 = ((($929)) + 40|0);
      HEAP32[$930>>2] = -1;
      $2 = 0;
      $1178 = $2;
      STACKTOP = sp;return ($1178|0);
     }
    }
    $931 = $3;
    $932 = ((($931)) + 4|0);
    $933 = HEAP32[$932>>2]|0;
    $934 = ($933|0)!=(0);
    if ($934) {
     label = 109;
    } else {
     $935 = $6;
     $936 = ((($935)) + 116|0);
     $937 = HEAP32[$936>>2]|0;
     $938 = ($937|0)!=(0);
     if ($938) {
      label = 109;
     } else {
      $939 = $4;
      $940 = ($939|0)!=(0);
      if ($940) {
       $941 = $6;
       $942 = ((($941)) + 4|0);
       $943 = HEAP32[$942>>2]|0;
       $944 = ($943|0)!=(666);
       if ($944) {
        label = 109;
       }
      }
     }
    }
    do {
     if ((label|0) == 109) {
      $945 = $6;
      $946 = ((($945)) + 132|0);
      $947 = HEAP32[$946>>2]|0;
      $948 = ($947|0)==(0);
      $949 = $6;
      do {
       if ($948) {
        $950 = $4;
        $951 = (_deflate_stored($949,$950)|0);
        $972 = $951;
       } else {
        $952 = ((($949)) + 136|0);
        $953 = HEAP32[$952>>2]|0;
        $954 = ($953|0)==(2);
        $955 = $6;
        if ($954) {
         $956 = $4;
         $957 = (_deflate_huff($955,$956)|0);
         $972 = $957;
         break;
        }
        $958 = ((($955)) + 136|0);
        $959 = HEAP32[$958>>2]|0;
        $960 = ($959|0)==(3);
        $961 = $6;
        if ($960) {
         $962 = $4;
         $963 = (_deflate_rle($961,$962)|0);
         $972 = $963;
         break;
        } else {
         $964 = ((($961)) + 132|0);
         $965 = HEAP32[$964>>2]|0;
         $966 = (8200 + (($965*12)|0)|0);
         $967 = ((($966)) + 8|0);
         $968 = HEAP32[$967>>2]|0;
         $969 = $6;
         $970 = $4;
         $971 = (FUNCTION_TABLE_iii[$968 & 63]($969,$970)|0);
         $972 = $971;
         break;
        }
       }
      } while(0);
      $16 = $972;
      $973 = $16;
      $974 = ($973|0)==(2);
      $975 = $16;
      $976 = ($975|0)==(3);
      $or$cond9 = $974 | $976;
      if ($or$cond9) {
       $977 = $6;
       $978 = ((($977)) + 4|0);
       HEAP32[$978>>2] = 666;
      }
      $979 = $16;
      $980 = ($979|0)==(0);
      $981 = $16;
      $982 = ($981|0)==(2);
      $or$cond11 = $980 | $982;
      if ($or$cond11) {
       $983 = $3;
       $984 = ((($983)) + 16|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = ($985|0)==(0);
       if ($986) {
        $987 = $6;
        $988 = ((($987)) + 40|0);
        HEAP32[$988>>2] = -1;
       }
       $2 = 0;
       $1178 = $2;
       STACKTOP = sp;return ($1178|0);
      }
      $989 = $16;
      $990 = ($989|0)==(1);
      if ($990) {
       $991 = $4;
       $992 = ($991|0)==(1);
       do {
        if ($992) {
         $993 = $6;
         __tr_align($993);
        } else {
         $994 = $4;
         $995 = ($994|0)!=(5);
         if (!($995)) {
          break;
         }
         $996 = $6;
         __tr_stored_block($996,0,0,0);
         $997 = $4;
         $998 = ($997|0)==(3);
         if (!($998)) {
          break;
         }
         $999 = $6;
         $1000 = ((($999)) + 76|0);
         $1001 = HEAP32[$1000>>2]|0;
         $1002 = (($1001) - 1)|0;
         $1003 = $6;
         $1004 = ((($1003)) + 68|0);
         $1005 = HEAP32[$1004>>2]|0;
         $1006 = (($1005) + ($1002<<1)|0);
         HEAP16[$1006>>1] = 0;
         $1007 = $6;
         $1008 = ((($1007)) + 68|0);
         $1009 = HEAP32[$1008>>2]|0;
         $1010 = $6;
         $1011 = ((($1010)) + 76|0);
         $1012 = HEAP32[$1011>>2]|0;
         $1013 = (($1012) - 1)|0;
         $1014 = $1013<<1;
         _memset(($1009|0),0,($1014|0))|0;
         $1015 = $6;
         $1016 = ((($1015)) + 116|0);
         $1017 = HEAP32[$1016>>2]|0;
         $1018 = ($1017|0)==(0);
         if (!($1018)) {
          break;
         }
         $1019 = $6;
         $1020 = ((($1019)) + 108|0);
         HEAP32[$1020>>2] = 0;
         $1021 = $6;
         $1022 = ((($1021)) + 92|0);
         HEAP32[$1022>>2] = 0;
         $1023 = $6;
         $1024 = ((($1023)) + 5812|0);
         HEAP32[$1024>>2] = 0;
        }
       } while(0);
       $1025 = $3;
       _flush_pending($1025);
       $1026 = $3;
       $1027 = ((($1026)) + 16|0);
       $1028 = HEAP32[$1027>>2]|0;
       $1029 = ($1028|0)==(0);
       if (!($1029)) {
        break;
       }
       $1030 = $6;
       $1031 = ((($1030)) + 40|0);
       HEAP32[$1031>>2] = -1;
       $2 = 0;
       $1178 = $2;
       STACKTOP = sp;return ($1178|0);
      }
     }
    } while(0);
    $1032 = $4;
    $1033 = ($1032|0)!=(4);
    if ($1033) {
     $2 = 0;
     $1178 = $2;
     STACKTOP = sp;return ($1178|0);
    }
    $1034 = $6;
    $1035 = ((($1034)) + 24|0);
    $1036 = HEAP32[$1035>>2]|0;
    $1037 = ($1036|0)<=(0);
    if ($1037) {
     $2 = 1;
     $1178 = $2;
     STACKTOP = sp;return ($1178|0);
    }
    $1038 = $6;
    $1039 = ((($1038)) + 24|0);
    $1040 = HEAP32[$1039>>2]|0;
    $1041 = ($1040|0)==(2);
    if ($1041) {
     $1042 = $3;
     $1043 = ((($1042)) + 48|0);
     $1044 = HEAP32[$1043>>2]|0;
     $1045 = $1044 & 255;
     $1046 = $1045&255;
     $1047 = $6;
     $1048 = ((($1047)) + 20|0);
     $1049 = HEAP32[$1048>>2]|0;
     $1050 = (($1049) + 1)|0;
     HEAP32[$1048>>2] = $1050;
     $1051 = $6;
     $1052 = ((($1051)) + 8|0);
     $1053 = HEAP32[$1052>>2]|0;
     $1054 = (($1053) + ($1049)|0);
     HEAP8[$1054>>0] = $1046;
     $1055 = $3;
     $1056 = ((($1055)) + 48|0);
     $1057 = HEAP32[$1056>>2]|0;
     $1058 = $1057 >>> 8;
     $1059 = $1058 & 255;
     $1060 = $1059&255;
     $1061 = $6;
     $1062 = ((($1061)) + 20|0);
     $1063 = HEAP32[$1062>>2]|0;
     $1064 = (($1063) + 1)|0;
     HEAP32[$1062>>2] = $1064;
     $1065 = $6;
     $1066 = ((($1065)) + 8|0);
     $1067 = HEAP32[$1066>>2]|0;
     $1068 = (($1067) + ($1063)|0);
     HEAP8[$1068>>0] = $1060;
     $1069 = $3;
     $1070 = ((($1069)) + 48|0);
     $1071 = HEAP32[$1070>>2]|0;
     $1072 = $1071 >>> 16;
     $1073 = $1072 & 255;
     $1074 = $1073&255;
     $1075 = $6;
     $1076 = ((($1075)) + 20|0);
     $1077 = HEAP32[$1076>>2]|0;
     $1078 = (($1077) + 1)|0;
     HEAP32[$1076>>2] = $1078;
     $1079 = $6;
     $1080 = ((($1079)) + 8|0);
     $1081 = HEAP32[$1080>>2]|0;
     $1082 = (($1081) + ($1077)|0);
     HEAP8[$1082>>0] = $1074;
     $1083 = $3;
     $1084 = ((($1083)) + 48|0);
     $1085 = HEAP32[$1084>>2]|0;
     $1086 = $1085 >>> 24;
     $1087 = $1086 & 255;
     $1088 = $1087&255;
     $1089 = $6;
     $1090 = ((($1089)) + 20|0);
     $1091 = HEAP32[$1090>>2]|0;
     $1092 = (($1091) + 1)|0;
     HEAP32[$1090>>2] = $1092;
     $1093 = $6;
     $1094 = ((($1093)) + 8|0);
     $1095 = HEAP32[$1094>>2]|0;
     $1096 = (($1095) + ($1091)|0);
     HEAP8[$1096>>0] = $1088;
     $1097 = $3;
     $1098 = ((($1097)) + 8|0);
     $1099 = HEAP32[$1098>>2]|0;
     $1100 = $1099 & 255;
     $1101 = $1100&255;
     $1102 = $6;
     $1103 = ((($1102)) + 20|0);
     $1104 = HEAP32[$1103>>2]|0;
     $1105 = (($1104) + 1)|0;
     HEAP32[$1103>>2] = $1105;
     $1106 = $6;
     $1107 = ((($1106)) + 8|0);
     $1108 = HEAP32[$1107>>2]|0;
     $1109 = (($1108) + ($1104)|0);
     HEAP8[$1109>>0] = $1101;
     $1110 = $3;
     $1111 = ((($1110)) + 8|0);
     $1112 = HEAP32[$1111>>2]|0;
     $1113 = $1112 >>> 8;
     $1114 = $1113 & 255;
     $1115 = $1114&255;
     $1116 = $6;
     $1117 = ((($1116)) + 20|0);
     $1118 = HEAP32[$1117>>2]|0;
     $1119 = (($1118) + 1)|0;
     HEAP32[$1117>>2] = $1119;
     $1120 = $6;
     $1121 = ((($1120)) + 8|0);
     $1122 = HEAP32[$1121>>2]|0;
     $1123 = (($1122) + ($1118)|0);
     HEAP8[$1123>>0] = $1115;
     $1124 = $3;
     $1125 = ((($1124)) + 8|0);
     $1126 = HEAP32[$1125>>2]|0;
     $1127 = $1126 >>> 16;
     $1128 = $1127 & 255;
     $1129 = $1128&255;
     $1130 = $6;
     $1131 = ((($1130)) + 20|0);
     $1132 = HEAP32[$1131>>2]|0;
     $1133 = (($1132) + 1)|0;
     HEAP32[$1131>>2] = $1133;
     $1134 = $6;
     $1135 = ((($1134)) + 8|0);
     $1136 = HEAP32[$1135>>2]|0;
     $1137 = (($1136) + ($1132)|0);
     HEAP8[$1137>>0] = $1129;
     $1138 = $3;
     $1139 = ((($1138)) + 8|0);
     $1140 = HEAP32[$1139>>2]|0;
     $1141 = $1140 >>> 24;
     $1142 = $1141 & 255;
     $1143 = $1142&255;
     $1144 = $6;
     $1145 = ((($1144)) + 20|0);
     $1146 = HEAP32[$1145>>2]|0;
     $1147 = (($1146) + 1)|0;
     HEAP32[$1145>>2] = $1147;
     $1148 = $6;
     $1149 = ((($1148)) + 8|0);
     $1150 = HEAP32[$1149>>2]|0;
     $1151 = (($1150) + ($1146)|0);
     HEAP8[$1151>>0] = $1143;
    } else {
     $1152 = $6;
     $1153 = $3;
     $1154 = ((($1153)) + 48|0);
     $1155 = HEAP32[$1154>>2]|0;
     $1156 = $1155 >>> 16;
     _putShortMSB($1152,$1156);
     $1157 = $6;
     $1158 = $3;
     $1159 = ((($1158)) + 48|0);
     $1160 = HEAP32[$1159>>2]|0;
     $1161 = $1160 & 65535;
     _putShortMSB($1157,$1161);
    }
    $1162 = $3;
    _flush_pending($1162);
    $1163 = $6;
    $1164 = ((($1163)) + 24|0);
    $1165 = HEAP32[$1164>>2]|0;
    $1166 = ($1165|0)>(0);
    if ($1166) {
     $1167 = $6;
     $1168 = ((($1167)) + 24|0);
     $1169 = HEAP32[$1168>>2]|0;
     $1170 = (0 - ($1169))|0;
     $1171 = $6;
     $1172 = ((($1171)) + 24|0);
     HEAP32[$1172>>2] = $1170;
    }
    $1173 = $6;
    $1174 = ((($1173)) + 20|0);
    $1175 = HEAP32[$1174>>2]|0;
    $1176 = ($1175|0)!=(0);
    $1177 = $1176 ? 0 : 1;
    $2 = $1177;
    $1178 = $2;
    STACKTOP = sp;return ($1178|0);
   }
  }
 } while(0);
 $44 = HEAP32[(8944)>>2]|0;
 $45 = $3;
 $46 = ((($45)) + 24|0);
 HEAP32[$46>>2] = $44;
 $2 = -2;
 $1178 = $2;
 STACKTOP = sp;return ($1178|0);
}
function _putShortMSB($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $4 >>> 8;
 $6 = $5&255;
 $7 = $2;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[$8>>2] = $10;
 $11 = $2;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($9)|0);
 HEAP8[$14>>0] = $6;
 $15 = $3;
 $16 = $15 & 255;
 $17 = $16&255;
 $18 = $2;
 $19 = ((($18)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 1)|0;
 HEAP32[$19>>2] = $21;
 $22 = $2;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($20)|0);
 HEAP8[$25>>0] = $17;
 STACKTOP = sp;return;
}
function _deflate_huff($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 while(1) {
  $7 = $3;
  $8 = ((($7)) + 116|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  if ($10) {
   $11 = $3;
   _fill_window($11);
   $12 = $3;
   $13 = ((($12)) + 116|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0);
   if ($15) {
    break;
   }
  }
  $18 = $3;
  $19 = ((($18)) + 96|0);
  HEAP32[$19>>2] = 0;
  $20 = $3;
  $21 = ((($20)) + 108|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $3;
  $24 = ((($23)) + 56|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($22)|0);
  $27 = HEAP8[$26>>0]|0;
  $6 = $27;
  $28 = $3;
  $29 = ((($28)) + 5792|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $3;
  $32 = ((($31)) + 5796|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30<<1)|0);
  HEAP16[$34>>1] = 0;
  $35 = $6;
  $36 = $3;
  $37 = ((($36)) + 5792|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 1)|0;
  HEAP32[$37>>2] = $39;
  $40 = $3;
  $41 = ((($40)) + 5784|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + ($38)|0);
  HEAP8[$43>>0] = $35;
  $44 = $6;
  $45 = $44&255;
  $46 = $3;
  $47 = ((($46)) + 148|0);
  $48 = (($47) + ($45<<2)|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = (($49) + 1)<<16>>16;
  HEAP16[$48>>1] = $50;
  $51 = $3;
  $52 = ((($51)) + 5792|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $3;
  $55 = ((($54)) + 5788|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) - 1)|0;
  $58 = ($53|0)==($57|0);
  $59 = $58&1;
  $5 = $59;
  $60 = $3;
  $61 = ((($60)) + 116|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + -1)|0;
  HEAP32[$61>>2] = $63;
  $64 = $3;
  $65 = ((($64)) + 108|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + 1)|0;
  HEAP32[$65>>2] = $67;
  $68 = $5;
  $69 = ($68|0)!=(0);
  if (!($69)) {
   continue;
  }
  $70 = $3;
  $71 = $3;
  $72 = ((($71)) + 92|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($73|0)>=(0);
  if ($74) {
   $75 = $3;
   $76 = ((($75)) + 92|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $3;
   $79 = ((($78)) + 56|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (($80) + ($77)|0);
   $89 = $81;
  } else {
   $89 = 0;
  }
  $82 = $3;
  $83 = ((($82)) + 108|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $3;
  $86 = ((($85)) + 92|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($84) - ($87))|0;
  __tr_flush_block($70,$89,$88,0);
  $90 = $3;
  $91 = ((($90)) + 108|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $3;
  $94 = ((($93)) + 92|0);
  HEAP32[$94>>2] = $92;
  $95 = $3;
  $96 = HEAP32[$95>>2]|0;
  _flush_pending($96);
  $97 = $3;
  $98 = HEAP32[$97>>2]|0;
  $99 = ((($98)) + 16|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ($100|0)==(0);
  if ($101) {
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  $2 = 0;
  $173 = $2;
  STACKTOP = sp;return ($173|0);
 }
 $16 = $4;
 $17 = ($16|0)==(0);
 if ($17) {
  $2 = 0;
  $173 = $2;
  STACKTOP = sp;return ($173|0);
 }
 $102 = $3;
 $103 = ((($102)) + 5812|0);
 HEAP32[$103>>2] = 0;
 $104 = $4;
 $105 = ($104|0)==(4);
 $106 = $3;
 if ($105) {
  $107 = $3;
  $108 = ((($107)) + 92|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ($109|0)>=(0);
  if ($110) {
   $111 = $3;
   $112 = ((($111)) + 92|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $3;
   $115 = ((($114)) + 56|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (($116) + ($113)|0);
   $125 = $117;
  } else {
   $125 = 0;
  }
  $118 = $3;
  $119 = ((($118)) + 108|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $3;
  $122 = ((($121)) + 92|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($120) - ($123))|0;
  __tr_flush_block($106,$125,$124,1);
  $126 = $3;
  $127 = ((($126)) + 108|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = $3;
  $130 = ((($129)) + 92|0);
  HEAP32[$130>>2] = $128;
  $131 = $3;
  $132 = HEAP32[$131>>2]|0;
  _flush_pending($132);
  $133 = $3;
  $134 = HEAP32[$133>>2]|0;
  $135 = ((($134)) + 16|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = ($136|0)==(0);
  if ($137) {
   $2 = 2;
   $173 = $2;
   STACKTOP = sp;return ($173|0);
  } else {
   $2 = 3;
   $173 = $2;
   STACKTOP = sp;return ($173|0);
  }
 }
 $138 = ((($106)) + 5792|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = ($139|0)!=(0);
 if ($140) {
  $141 = $3;
  $142 = $3;
  $143 = ((($142)) + 92|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = ($144|0)>=(0);
  if ($145) {
   $146 = $3;
   $147 = ((($146)) + 92|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = $3;
   $150 = ((($149)) + 56|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = (($151) + ($148)|0);
   $160 = $152;
  } else {
   $160 = 0;
  }
  $153 = $3;
  $154 = ((($153)) + 108|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = $3;
  $157 = ((($156)) + 92|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = (($155) - ($158))|0;
  __tr_flush_block($141,$160,$159,0);
  $161 = $3;
  $162 = ((($161)) + 108|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = $3;
  $165 = ((($164)) + 92|0);
  HEAP32[$165>>2] = $163;
  $166 = $3;
  $167 = HEAP32[$166>>2]|0;
  _flush_pending($167);
  $168 = $3;
  $169 = HEAP32[$168>>2]|0;
  $170 = ((($169)) + 16|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = ($171|0)==(0);
  if ($172) {
   $2 = 0;
   $173 = $2;
   STACKTOP = sp;return ($173|0);
  }
 }
 $2 = 1;
 $173 = $2;
 STACKTOP = sp;return ($173|0);
}
function _deflate_rle($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 while(1) {
  $12 = $3;
  $13 = ((($12)) + 116|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14>>>0)<=(258);
  if ($15) {
   $16 = $3;
   _fill_window($16);
   $17 = $3;
   $18 = ((($17)) + 116|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19>>>0)<=(258);
   $21 = $4;
   $22 = ($21|0)==(0);
   $or$cond = $20 & $22;
   if ($or$cond) {
    label = 4;
    break;
   }
   $23 = $3;
   $24 = ((($23)) + 116|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0);
   if ($26) {
    label = 34;
    break;
   }
  }
  $27 = $3;
  $28 = ((($27)) + 96|0);
  HEAP32[$28>>2] = 0;
  $29 = $3;
  $30 = ((($29)) + 116|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31>>>0)>=(3);
  if ($32) {
   $33 = $3;
   $34 = ((($33)) + 108|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35>>>0)>(0);
   if ($36) {
    $37 = $3;
    $38 = ((($37)) + 56|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $3;
    $41 = ((($40)) + 108|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (($39) + ($42)|0);
    $44 = ((($43)) + -1|0);
    $7 = $44;
    $45 = $7;
    $46 = HEAP8[$45>>0]|0;
    $47 = $46&255;
    $6 = $47;
    $48 = $6;
    $49 = $7;
    $50 = ((($49)) + 1|0);
    $7 = $50;
    $51 = HEAP8[$50>>0]|0;
    $52 = $51&255;
    $53 = ($48|0)==($52|0);
    if ($53) {
     $54 = $6;
     $55 = $7;
     $56 = ((($55)) + 1|0);
     $7 = $56;
     $57 = HEAP8[$56>>0]|0;
     $58 = $57&255;
     $59 = ($54|0)==($58|0);
     if ($59) {
      $60 = $6;
      $61 = $7;
      $62 = ((($61)) + 1|0);
      $7 = $62;
      $63 = HEAP8[$62>>0]|0;
      $64 = $63&255;
      $65 = ($60|0)==($64|0);
      if ($65) {
       $66 = $3;
       $67 = ((($66)) + 56|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = $3;
       $70 = ((($69)) + 108|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = (($68) + ($71)|0);
       $73 = ((($72)) + 258|0);
       $8 = $73;
       while(1) {
        $74 = $6;
        $75 = $7;
        $76 = ((($75)) + 1|0);
        $7 = $76;
        $77 = HEAP8[$76>>0]|0;
        $78 = $77&255;
        $79 = ($74|0)==($78|0);
        if (!($79)) {
         break;
        }
        $80 = $6;
        $81 = $7;
        $82 = ((($81)) + 1|0);
        $7 = $82;
        $83 = HEAP8[$82>>0]|0;
        $84 = $83&255;
        $85 = ($80|0)==($84|0);
        if (!($85)) {
         break;
        }
        $86 = $6;
        $87 = $7;
        $88 = ((($87)) + 1|0);
        $7 = $88;
        $89 = HEAP8[$88>>0]|0;
        $90 = $89&255;
        $91 = ($86|0)==($90|0);
        if (!($91)) {
         break;
        }
        $92 = $6;
        $93 = $7;
        $94 = ((($93)) + 1|0);
        $7 = $94;
        $95 = HEAP8[$94>>0]|0;
        $96 = $95&255;
        $97 = ($92|0)==($96|0);
        if (!($97)) {
         break;
        }
        $98 = $6;
        $99 = $7;
        $100 = ((($99)) + 1|0);
        $7 = $100;
        $101 = HEAP8[$100>>0]|0;
        $102 = $101&255;
        $103 = ($98|0)==($102|0);
        if (!($103)) {
         break;
        }
        $104 = $6;
        $105 = $7;
        $106 = ((($105)) + 1|0);
        $7 = $106;
        $107 = HEAP8[$106>>0]|0;
        $108 = $107&255;
        $109 = ($104|0)==($108|0);
        if (!($109)) {
         break;
        }
        $110 = $6;
        $111 = $7;
        $112 = ((($111)) + 1|0);
        $7 = $112;
        $113 = HEAP8[$112>>0]|0;
        $114 = $113&255;
        $115 = ($110|0)==($114|0);
        if (!($115)) {
         break;
        }
        $116 = $6;
        $117 = $7;
        $118 = ((($117)) + 1|0);
        $7 = $118;
        $119 = HEAP8[$118>>0]|0;
        $120 = $119&255;
        $121 = ($116|0)==($120|0);
        if (!($121)) {
         break;
        }
        $122 = $7;
        $123 = $8;
        $124 = ($122>>>0)<($123>>>0);
        if (!($124)) {
         break;
        }
       }
       $125 = $8;
       $126 = $7;
       $127 = $125;
       $128 = $126;
       $129 = (($127) - ($128))|0;
       $130 = (258 - ($129))|0;
       $131 = $3;
       $132 = ((($131)) + 96|0);
       HEAP32[$132>>2] = $130;
       $133 = $3;
       $134 = ((($133)) + 96|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = $3;
       $137 = ((($136)) + 116|0);
       $138 = HEAP32[$137>>2]|0;
       $139 = ($135>>>0)>($138>>>0);
       if ($139) {
        $140 = $3;
        $141 = ((($140)) + 116|0);
        $142 = HEAP32[$141>>2]|0;
        $143 = $3;
        $144 = ((($143)) + 96|0);
        HEAP32[$144>>2] = $142;
       }
      }
     }
    }
   }
  }
  $145 = $3;
  $146 = ((($145)) + 96|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = ($147>>>0)>=(3);
  $149 = $3;
  if ($148) {
   $150 = ((($149)) + 96|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = (($151) - 3)|0;
   $153 = $152&255;
   $9 = $153;
   $10 = 1;
   $154 = $10;
   $155 = $3;
   $156 = ((($155)) + 5792|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = $3;
   $159 = ((($158)) + 5796|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = (($160) + ($157<<1)|0);
   HEAP16[$161>>1] = $154;
   $162 = $9;
   $163 = $3;
   $164 = ((($163)) + 5792|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = (($165) + 1)|0;
   HEAP32[$164>>2] = $166;
   $167 = $3;
   $168 = ((($167)) + 5784|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = (($169) + ($165)|0);
   HEAP8[$170>>0] = $162;
   $171 = $10;
   $172 = (($171) + -1)<<16>>16;
   $10 = $172;
   $173 = $9;
   $174 = $173&255;
   $175 = (14735 + ($174)|0);
   $176 = HEAP8[$175>>0]|0;
   $177 = $176&255;
   $178 = (($177) + 256)|0;
   $179 = (($178) + 1)|0;
   $180 = $3;
   $181 = ((($180)) + 148|0);
   $182 = (($181) + ($179<<2)|0);
   $183 = HEAP16[$182>>1]|0;
   $184 = (($183) + 1)<<16>>16;
   HEAP16[$182>>1] = $184;
   $185 = $10;
   $186 = $185&65535;
   $187 = ($186|0)<(256);
   $188 = $10;
   $189 = $188&65535;
   if ($187) {
    $190 = (14223 + ($189)|0);
    $191 = HEAP8[$190>>0]|0;
    $$sink = $191;
   } else {
    $192 = $189 >> 7;
    $193 = (256 + ($192))|0;
    $194 = (14223 + ($193)|0);
    $195 = HEAP8[$194>>0]|0;
    $$sink = $195;
   }
   $196 = $$sink&255;
   $197 = $3;
   $198 = ((($197)) + 2440|0);
   $199 = (($198) + ($196<<2)|0);
   $200 = HEAP16[$199>>1]|0;
   $201 = (($200) + 1)<<16>>16;
   HEAP16[$199>>1] = $201;
   $202 = $3;
   $203 = ((($202)) + 5792|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = $3;
   $206 = ((($205)) + 5788|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = (($207) - 1)|0;
   $209 = ($204|0)==($208|0);
   $210 = $209&1;
   $5 = $210;
   $211 = $3;
   $212 = ((($211)) + 96|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = $3;
   $215 = ((($214)) + 116|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = (($216) - ($213))|0;
   HEAP32[$215>>2] = $217;
   $218 = $3;
   $219 = ((($218)) + 96|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = $3;
   $222 = ((($221)) + 108|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = (($223) + ($220))|0;
   HEAP32[$222>>2] = $224;
   $225 = $3;
   $226 = ((($225)) + 96|0);
   HEAP32[$226>>2] = 0;
  } else {
   $227 = ((($149)) + 108|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = $3;
   $230 = ((($229)) + 56|0);
   $231 = HEAP32[$230>>2]|0;
   $232 = (($231) + ($228)|0);
   $233 = HEAP8[$232>>0]|0;
   $11 = $233;
   $234 = $3;
   $235 = ((($234)) + 5792|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = $3;
   $238 = ((($237)) + 5796|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = (($239) + ($236<<1)|0);
   HEAP16[$240>>1] = 0;
   $241 = $11;
   $242 = $3;
   $243 = ((($242)) + 5792|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = (($244) + 1)|0;
   HEAP32[$243>>2] = $245;
   $246 = $3;
   $247 = ((($246)) + 5784|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = (($248) + ($244)|0);
   HEAP8[$249>>0] = $241;
   $250 = $11;
   $251 = $250&255;
   $252 = $3;
   $253 = ((($252)) + 148|0);
   $254 = (($253) + ($251<<2)|0);
   $255 = HEAP16[$254>>1]|0;
   $256 = (($255) + 1)<<16>>16;
   HEAP16[$254>>1] = $256;
   $257 = $3;
   $258 = ((($257)) + 5792|0);
   $259 = HEAP32[$258>>2]|0;
   $260 = $3;
   $261 = ((($260)) + 5788|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = (($262) - 1)|0;
   $264 = ($259|0)==($263|0);
   $265 = $264&1;
   $5 = $265;
   $266 = $3;
   $267 = ((($266)) + 116|0);
   $268 = HEAP32[$267>>2]|0;
   $269 = (($268) + -1)|0;
   HEAP32[$267>>2] = $269;
   $270 = $3;
   $271 = ((($270)) + 108|0);
   $272 = HEAP32[$271>>2]|0;
   $273 = (($272) + 1)|0;
   HEAP32[$271>>2] = $273;
  }
  $274 = $5;
  $275 = ($274|0)!=(0);
  if (!($275)) {
   continue;
  }
  $276 = $3;
  $277 = $3;
  $278 = ((($277)) + 92|0);
  $279 = HEAP32[$278>>2]|0;
  $280 = ($279|0)>=(0);
  if ($280) {
   $281 = $3;
   $282 = ((($281)) + 92|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = $3;
   $285 = ((($284)) + 56|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = (($286) + ($283)|0);
   $295 = $287;
  } else {
   $295 = 0;
  }
  $288 = $3;
  $289 = ((($288)) + 108|0);
  $290 = HEAP32[$289>>2]|0;
  $291 = $3;
  $292 = ((($291)) + 92|0);
  $293 = HEAP32[$292>>2]|0;
  $294 = (($290) - ($293))|0;
  __tr_flush_block($276,$295,$294,0);
  $296 = $3;
  $297 = ((($296)) + 108|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = $3;
  $300 = ((($299)) + 92|0);
  HEAP32[$300>>2] = $298;
  $301 = $3;
  $302 = HEAP32[$301>>2]|0;
  _flush_pending($302);
  $303 = $3;
  $304 = HEAP32[$303>>2]|0;
  $305 = ((($304)) + 16|0);
  $306 = HEAP32[$305>>2]|0;
  $307 = ($306|0)==(0);
  if ($307) {
   label = 33;
   break;
  }
 }
 if ((label|0) == 4) {
  $2 = 0;
  $379 = $2;
  STACKTOP = sp;return ($379|0);
 }
 else if ((label|0) == 33) {
  $2 = 0;
  $379 = $2;
  STACKTOP = sp;return ($379|0);
 }
 else if ((label|0) == 34) {
  $308 = $3;
  $309 = ((($308)) + 5812|0);
  HEAP32[$309>>2] = 0;
  $310 = $4;
  $311 = ($310|0)==(4);
  $312 = $3;
  if ($311) {
   $313 = $3;
   $314 = ((($313)) + 92|0);
   $315 = HEAP32[$314>>2]|0;
   $316 = ($315|0)>=(0);
   if ($316) {
    $317 = $3;
    $318 = ((($317)) + 92|0);
    $319 = HEAP32[$318>>2]|0;
    $320 = $3;
    $321 = ((($320)) + 56|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = (($322) + ($319)|0);
    $331 = $323;
   } else {
    $331 = 0;
   }
   $324 = $3;
   $325 = ((($324)) + 108|0);
   $326 = HEAP32[$325>>2]|0;
   $327 = $3;
   $328 = ((($327)) + 92|0);
   $329 = HEAP32[$328>>2]|0;
   $330 = (($326) - ($329))|0;
   __tr_flush_block($312,$331,$330,1);
   $332 = $3;
   $333 = ((($332)) + 108|0);
   $334 = HEAP32[$333>>2]|0;
   $335 = $3;
   $336 = ((($335)) + 92|0);
   HEAP32[$336>>2] = $334;
   $337 = $3;
   $338 = HEAP32[$337>>2]|0;
   _flush_pending($338);
   $339 = $3;
   $340 = HEAP32[$339>>2]|0;
   $341 = ((($340)) + 16|0);
   $342 = HEAP32[$341>>2]|0;
   $343 = ($342|0)==(0);
   if ($343) {
    $2 = 2;
    $379 = $2;
    STACKTOP = sp;return ($379|0);
   } else {
    $2 = 3;
    $379 = $2;
    STACKTOP = sp;return ($379|0);
   }
  }
  $344 = ((($312)) + 5792|0);
  $345 = HEAP32[$344>>2]|0;
  $346 = ($345|0)!=(0);
  if ($346) {
   $347 = $3;
   $348 = $3;
   $349 = ((($348)) + 92|0);
   $350 = HEAP32[$349>>2]|0;
   $351 = ($350|0)>=(0);
   if ($351) {
    $352 = $3;
    $353 = ((($352)) + 92|0);
    $354 = HEAP32[$353>>2]|0;
    $355 = $3;
    $356 = ((($355)) + 56|0);
    $357 = HEAP32[$356>>2]|0;
    $358 = (($357) + ($354)|0);
    $366 = $358;
   } else {
    $366 = 0;
   }
   $359 = $3;
   $360 = ((($359)) + 108|0);
   $361 = HEAP32[$360>>2]|0;
   $362 = $3;
   $363 = ((($362)) + 92|0);
   $364 = HEAP32[$363>>2]|0;
   $365 = (($361) - ($364))|0;
   __tr_flush_block($347,$366,$365,0);
   $367 = $3;
   $368 = ((($367)) + 108|0);
   $369 = HEAP32[$368>>2]|0;
   $370 = $3;
   $371 = ((($370)) + 92|0);
   HEAP32[$371>>2] = $369;
   $372 = $3;
   $373 = HEAP32[$372>>2]|0;
   _flush_pending($373);
   $374 = $3;
   $375 = HEAP32[$374>>2]|0;
   $376 = ((($375)) + 16|0);
   $377 = HEAP32[$376>>2]|0;
   $378 = ($377|0)==(0);
   if ($378) {
    $2 = 0;
    $379 = $2;
    STACKTOP = sp;return ($379|0);
   }
  }
  $2 = 1;
  $379 = $2;
  STACKTOP = sp;return ($379|0);
 }
 return (0)|0;
}
function _inflate_fast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $20 = sp + 88|0;
 $2 = $0;
 $3 = $1;
 $25 = $2;
 $26 = ((($25)) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 $4 = $27;
 $28 = $2;
 $29 = HEAP32[$28>>2]|0;
 $5 = $29;
 $30 = $5;
 $31 = $2;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) - 5)|0;
 $35 = (($30) + ($34)|0);
 $6 = $35;
 $36 = $2;
 $37 = ((($36)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $7 = $38;
 $39 = $7;
 $40 = $3;
 $41 = $2;
 $42 = ((($41)) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($40) - ($43))|0;
 $45 = (0 - ($44))|0;
 $46 = (($39) + ($45)|0);
 $8 = $46;
 $47 = $7;
 $48 = $2;
 $49 = ((($48)) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) - 257)|0;
 $52 = (($47) + ($51)|0);
 $9 = $52;
 $53 = $4;
 $54 = ((($53)) + 44|0);
 $55 = HEAP32[$54>>2]|0;
 $10 = $55;
 $56 = $4;
 $57 = ((($56)) + 48|0);
 $58 = HEAP32[$57>>2]|0;
 $11 = $58;
 $59 = $4;
 $60 = ((($59)) + 52|0);
 $61 = HEAP32[$60>>2]|0;
 $12 = $61;
 $62 = $4;
 $63 = ((($62)) + 56|0);
 $64 = HEAP32[$63>>2]|0;
 $13 = $64;
 $65 = $4;
 $66 = ((($65)) + 60|0);
 $67 = HEAP32[$66>>2]|0;
 $14 = $67;
 $68 = $4;
 $69 = ((($68)) + 64|0);
 $70 = HEAP32[$69>>2]|0;
 $15 = $70;
 $71 = $4;
 $72 = ((($71)) + 80|0);
 $73 = HEAP32[$72>>2]|0;
 $16 = $73;
 $74 = $4;
 $75 = ((($74)) + 84|0);
 $76 = HEAP32[$75>>2]|0;
 $17 = $76;
 $77 = $4;
 $78 = ((($77)) + 88|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = 1 << $79;
 $81 = (($80) - 1)|0;
 $18 = $81;
 $82 = $4;
 $83 = ((($82)) + 92|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = 1 << $84;
 $86 = (($85) - 1)|0;
 $19 = $86;
 L1: while(1) {
  $87 = $15;
  $88 = ($87>>>0)<(15);
  if ($88) {
   $89 = $5;
   $90 = ((($89)) + 1|0);
   $5 = $90;
   $91 = HEAP8[$89>>0]|0;
   $92 = $91&255;
   $93 = $15;
   $94 = $92 << $93;
   $95 = $14;
   $96 = (($95) + ($94))|0;
   $14 = $96;
   $97 = $15;
   $98 = (($97) + 8)|0;
   $15 = $98;
   $99 = $5;
   $100 = ((($99)) + 1|0);
   $5 = $100;
   $101 = HEAP8[$99>>0]|0;
   $102 = $101&255;
   $103 = $15;
   $104 = $102 << $103;
   $105 = $14;
   $106 = (($105) + ($104))|0;
   $14 = $106;
   $107 = $15;
   $108 = (($107) + 8)|0;
   $15 = $108;
  }
  $109 = $14;
  $110 = $18;
  $111 = $109 & $110;
  $112 = $16;
  $113 = (($112) + ($111<<2)|0);
  ;HEAP16[$20>>1]=HEAP16[$113>>1]|0;HEAP16[$20+2>>1]=HEAP16[$113+2>>1]|0;
  while(1) {
   $114 = ((($20)) + 1|0);
   $115 = HEAP8[$114>>0]|0;
   $116 = $115&255;
   $21 = $116;
   $117 = $21;
   $118 = $14;
   $119 = $118 >>> $117;
   $14 = $119;
   $120 = $21;
   $121 = $15;
   $122 = (($121) - ($120))|0;
   $15 = $122;
   $123 = HEAP8[$20>>0]|0;
   $124 = $123&255;
   $21 = $124;
   $125 = $21;
   $126 = ($125|0)==(0);
   if ($126) {
    label = 6;
    break;
   }
   $132 = $21;
   $133 = $132 & 16;
   $134 = ($133|0)!=(0);
   if ($134) {
    label = 8;
    break;
   }
   $459 = $21;
   $460 = $459 & 64;
   $461 = ($460|0)==(0);
   if (!($461)) {
    label = 55;
    break L1;
   }
   $462 = ((($20)) + 2|0);
   $463 = HEAP16[$462>>1]|0;
   $464 = $463&65535;
   $465 = $14;
   $466 = $21;
   $467 = 1 << $466;
   $468 = (($467) - 1)|0;
   $469 = $465 & $468;
   $470 = (($464) + ($469))|0;
   $471 = $16;
   $472 = (($471) + ($470<<2)|0);
   ;HEAP16[$20>>1]=HEAP16[$472>>1]|0;HEAP16[$20+2>>1]=HEAP16[$472+2>>1]|0;
  }
  do {
   if ((label|0) == 6) {
    label = 0;
    $127 = ((($20)) + 2|0);
    $128 = HEAP16[$127>>1]|0;
    $129 = $128&255;
    $130 = $7;
    $131 = ((($130)) + 1|0);
    $7 = $131;
    HEAP8[$130>>0] = $129;
   }
   else if ((label|0) == 8) {
    label = 0;
    $135 = ((($20)) + 2|0);
    $136 = HEAP16[$135>>1]|0;
    $137 = $136&65535;
    $22 = $137;
    $138 = $21;
    $139 = $138 & 15;
    $21 = $139;
    $140 = $21;
    $141 = ($140|0)!=(0);
    if ($141) {
     $142 = $15;
     $143 = $21;
     $144 = ($142>>>0)<($143>>>0);
     if ($144) {
      $145 = $5;
      $146 = ((($145)) + 1|0);
      $5 = $146;
      $147 = HEAP8[$145>>0]|0;
      $148 = $147&255;
      $149 = $15;
      $150 = $148 << $149;
      $151 = $14;
      $152 = (($151) + ($150))|0;
      $14 = $152;
      $153 = $15;
      $154 = (($153) + 8)|0;
      $15 = $154;
     }
     $155 = $14;
     $156 = $21;
     $157 = 1 << $156;
     $158 = (($157) - 1)|0;
     $159 = $155 & $158;
     $160 = $22;
     $161 = (($160) + ($159))|0;
     $22 = $161;
     $162 = $21;
     $163 = $14;
     $164 = $163 >>> $162;
     $14 = $164;
     $165 = $21;
     $166 = $15;
     $167 = (($166) - ($165))|0;
     $15 = $167;
    }
    $168 = $15;
    $169 = ($168>>>0)<(15);
    if ($169) {
     $170 = $5;
     $171 = ((($170)) + 1|0);
     $5 = $171;
     $172 = HEAP8[$170>>0]|0;
     $173 = $172&255;
     $174 = $15;
     $175 = $173 << $174;
     $176 = $14;
     $177 = (($176) + ($175))|0;
     $14 = $177;
     $178 = $15;
     $179 = (($178) + 8)|0;
     $15 = $179;
     $180 = $5;
     $181 = ((($180)) + 1|0);
     $5 = $181;
     $182 = HEAP8[$180>>0]|0;
     $183 = $182&255;
     $184 = $15;
     $185 = $183 << $184;
     $186 = $14;
     $187 = (($186) + ($185))|0;
     $14 = $187;
     $188 = $15;
     $189 = (($188) + 8)|0;
     $15 = $189;
    }
    $190 = $14;
    $191 = $19;
    $192 = $190 & $191;
    $193 = $17;
    $194 = (($193) + ($192<<2)|0);
    ;HEAP16[$20>>1]=HEAP16[$194>>1]|0;HEAP16[$20+2>>1]=HEAP16[$194+2>>1]|0;
    while(1) {
     $195 = ((($20)) + 1|0);
     $196 = HEAP8[$195>>0]|0;
     $197 = $196&255;
     $21 = $197;
     $198 = $21;
     $199 = $14;
     $200 = $199 >>> $198;
     $14 = $200;
     $201 = $21;
     $202 = $15;
     $203 = (($202) - ($201))|0;
     $15 = $203;
     $204 = HEAP8[$20>>0]|0;
     $205 = $204&255;
     $21 = $205;
     $206 = $21;
     $207 = $206 & 16;
     $208 = ($207|0)!=(0);
     if ($208) {
      break;
     }
     $441 = $21;
     $442 = $441 & 64;
     $443 = ($442|0)==(0);
     if (!($443)) {
      label = 52;
      break L1;
     }
     $444 = ((($20)) + 2|0);
     $445 = HEAP16[$444>>1]|0;
     $446 = $445&65535;
     $447 = $14;
     $448 = $21;
     $449 = 1 << $448;
     $450 = (($449) - 1)|0;
     $451 = $447 & $450;
     $452 = (($446) + ($451))|0;
     $453 = $17;
     $454 = (($453) + ($452<<2)|0);
     ;HEAP16[$20>>1]=HEAP16[$454>>1]|0;HEAP16[$20+2>>1]=HEAP16[$454+2>>1]|0;
    }
    $209 = ((($20)) + 2|0);
    $210 = HEAP16[$209>>1]|0;
    $211 = $210&65535;
    $23 = $211;
    $212 = $21;
    $213 = $212 & 15;
    $21 = $213;
    $214 = $15;
    $215 = $21;
    $216 = ($214>>>0)<($215>>>0);
    if ($216) {
     $217 = $5;
     $218 = ((($217)) + 1|0);
     $5 = $218;
     $219 = HEAP8[$217>>0]|0;
     $220 = $219&255;
     $221 = $15;
     $222 = $220 << $221;
     $223 = $14;
     $224 = (($223) + ($222))|0;
     $14 = $224;
     $225 = $15;
     $226 = (($225) + 8)|0;
     $15 = $226;
     $227 = $15;
     $228 = $21;
     $229 = ($227>>>0)<($228>>>0);
     if ($229) {
      $230 = $5;
      $231 = ((($230)) + 1|0);
      $5 = $231;
      $232 = HEAP8[$230>>0]|0;
      $233 = $232&255;
      $234 = $15;
      $235 = $233 << $234;
      $236 = $14;
      $237 = (($236) + ($235))|0;
      $14 = $237;
      $238 = $15;
      $239 = (($238) + 8)|0;
      $15 = $239;
     }
    }
    $240 = $14;
    $241 = $21;
    $242 = 1 << $241;
    $243 = (($242) - 1)|0;
    $244 = $240 & $243;
    $245 = $23;
    $246 = (($245) + ($244))|0;
    $23 = $246;
    $247 = $21;
    $248 = $14;
    $249 = $248 >>> $247;
    $14 = $249;
    $250 = $21;
    $251 = $15;
    $252 = (($251) - ($250))|0;
    $15 = $252;
    $253 = $7;
    $254 = $8;
    $255 = $253;
    $256 = $254;
    $257 = (($255) - ($256))|0;
    $21 = $257;
    $258 = $23;
    $259 = $21;
    $260 = ($258>>>0)>($259>>>0);
    if (!($260)) {
     $404 = $7;
     $405 = $23;
     $406 = (0 - ($405))|0;
     $407 = (($404) + ($406)|0);
     $24 = $407;
     while(1) {
      $408 = $24;
      $409 = ((($408)) + 1|0);
      $24 = $409;
      $410 = HEAP8[$408>>0]|0;
      $411 = $7;
      $412 = ((($411)) + 1|0);
      $7 = $412;
      HEAP8[$411>>0] = $410;
      $413 = $24;
      $414 = ((($413)) + 1|0);
      $24 = $414;
      $415 = HEAP8[$413>>0]|0;
      $416 = $7;
      $417 = ((($416)) + 1|0);
      $7 = $417;
      HEAP8[$416>>0] = $415;
      $418 = $24;
      $419 = ((($418)) + 1|0);
      $24 = $419;
      $420 = HEAP8[$418>>0]|0;
      $421 = $7;
      $422 = ((($421)) + 1|0);
      $7 = $422;
      HEAP8[$421>>0] = $420;
      $423 = $22;
      $424 = (($423) - 3)|0;
      $22 = $424;
      $425 = $22;
      $426 = ($425>>>0)>(2);
      if (!($426)) {
       break;
      }
     }
     $427 = $22;
     $428 = ($427|0)!=(0);
     if (!($428)) {
      break;
     }
     $429 = $24;
     $430 = ((($429)) + 1|0);
     $24 = $430;
     $431 = HEAP8[$429>>0]|0;
     $432 = $7;
     $433 = ((($432)) + 1|0);
     $7 = $433;
     HEAP8[$432>>0] = $431;
     $434 = $22;
     $435 = ($434>>>0)>(1);
     if (!($435)) {
      break;
     }
     $436 = $24;
     $437 = ((($436)) + 1|0);
     $24 = $437;
     $438 = HEAP8[$436>>0]|0;
     $439 = $7;
     $440 = ((($439)) + 1|0);
     $7 = $440;
     HEAP8[$439>>0] = $438;
     break;
    }
    $261 = $23;
    $262 = $21;
    $263 = (($261) - ($262))|0;
    $21 = $263;
    $264 = $21;
    $265 = $11;
    $266 = ($264>>>0)>($265>>>0);
    if ($266) {
     $267 = $4;
     $268 = ((($267)) + 7108|0);
     $269 = HEAP32[$268>>2]|0;
     $270 = ($269|0)!=(0);
     if ($270) {
      label = 22;
      break L1;
     }
    }
    $275 = $13;
    $24 = $275;
    $276 = $12;
    $277 = ($276|0)==(0);
    do {
     if ($277) {
      $278 = $10;
      $279 = $21;
      $280 = (($278) - ($279))|0;
      $281 = $24;
      $282 = (($281) + ($280)|0);
      $24 = $282;
      $283 = $21;
      $284 = $22;
      $285 = ($283>>>0)<($284>>>0);
      if ($285) {
       $286 = $21;
       $287 = $22;
       $288 = (($287) - ($286))|0;
       $22 = $288;
       while(1) {
        $289 = $24;
        $290 = ((($289)) + 1|0);
        $24 = $290;
        $291 = HEAP8[$289>>0]|0;
        $292 = $7;
        $293 = ((($292)) + 1|0);
        $7 = $293;
        HEAP8[$292>>0] = $291;
        $294 = $21;
        $295 = (($294) + -1)|0;
        $21 = $295;
        $296 = ($295|0)!=(0);
        if (!($296)) {
         break;
        }
       }
       $297 = $7;
       $298 = $23;
       $299 = (0 - ($298))|0;
       $300 = (($297) + ($299)|0);
       $24 = $300;
      }
     } else {
      $301 = $12;
      $302 = $21;
      $303 = ($301>>>0)<($302>>>0);
      if (!($303)) {
       $348 = $12;
       $349 = $21;
       $350 = (($348) - ($349))|0;
       $351 = $24;
       $352 = (($351) + ($350)|0);
       $24 = $352;
       $353 = $21;
       $354 = $22;
       $355 = ($353>>>0)<($354>>>0);
       if (!($355)) {
        break;
       }
       $356 = $21;
       $357 = $22;
       $358 = (($357) - ($356))|0;
       $22 = $358;
       while(1) {
        $359 = $24;
        $360 = ((($359)) + 1|0);
        $24 = $360;
        $361 = HEAP8[$359>>0]|0;
        $362 = $7;
        $363 = ((($362)) + 1|0);
        $7 = $363;
        HEAP8[$362>>0] = $361;
        $364 = $21;
        $365 = (($364) + -1)|0;
        $21 = $365;
        $366 = ($365|0)!=(0);
        if (!($366)) {
         break;
        }
       }
       $367 = $7;
       $368 = $23;
       $369 = (0 - ($368))|0;
       $370 = (($367) + ($369)|0);
       $24 = $370;
       break;
      }
      $304 = $10;
      $305 = $12;
      $306 = (($304) + ($305))|0;
      $307 = $21;
      $308 = (($306) - ($307))|0;
      $309 = $24;
      $310 = (($309) + ($308)|0);
      $24 = $310;
      $311 = $12;
      $312 = $21;
      $313 = (($312) - ($311))|0;
      $21 = $313;
      $314 = $21;
      $315 = $22;
      $316 = ($314>>>0)<($315>>>0);
      if ($316) {
       $317 = $21;
       $318 = $22;
       $319 = (($318) - ($317))|0;
       $22 = $319;
       while(1) {
        $320 = $24;
        $321 = ((($320)) + 1|0);
        $24 = $321;
        $322 = HEAP8[$320>>0]|0;
        $323 = $7;
        $324 = ((($323)) + 1|0);
        $7 = $324;
        HEAP8[$323>>0] = $322;
        $325 = $21;
        $326 = (($325) + -1)|0;
        $21 = $326;
        $327 = ($326|0)!=(0);
        if (!($327)) {
         break;
        }
       }
       $328 = $13;
       $24 = $328;
       $329 = $12;
       $330 = $22;
       $331 = ($329>>>0)<($330>>>0);
       if ($331) {
        $332 = $12;
        $21 = $332;
        $333 = $21;
        $334 = $22;
        $335 = (($334) - ($333))|0;
        $22 = $335;
        while(1) {
         $336 = $24;
         $337 = ((($336)) + 1|0);
         $24 = $337;
         $338 = HEAP8[$336>>0]|0;
         $339 = $7;
         $340 = ((($339)) + 1|0);
         $7 = $340;
         HEAP8[$339>>0] = $338;
         $341 = $21;
         $342 = (($341) + -1)|0;
         $21 = $342;
         $343 = ($342|0)!=(0);
         if (!($343)) {
          break;
         }
        }
        $344 = $7;
        $345 = $23;
        $346 = (0 - ($345))|0;
        $347 = (($344) + ($346)|0);
        $24 = $347;
       }
      }
     }
    } while(0);
    while(1) {
     $371 = $22;
     $372 = ($371>>>0)>(2);
     if (!($372)) {
      break;
     }
     $373 = $24;
     $374 = ((($373)) + 1|0);
     $24 = $374;
     $375 = HEAP8[$373>>0]|0;
     $376 = $7;
     $377 = ((($376)) + 1|0);
     $7 = $377;
     HEAP8[$376>>0] = $375;
     $378 = $24;
     $379 = ((($378)) + 1|0);
     $24 = $379;
     $380 = HEAP8[$378>>0]|0;
     $381 = $7;
     $382 = ((($381)) + 1|0);
     $7 = $382;
     HEAP8[$381>>0] = $380;
     $383 = $24;
     $384 = ((($383)) + 1|0);
     $24 = $384;
     $385 = HEAP8[$383>>0]|0;
     $386 = $7;
     $387 = ((($386)) + 1|0);
     $7 = $387;
     HEAP8[$386>>0] = $385;
     $388 = $22;
     $389 = (($388) - 3)|0;
     $22 = $389;
    }
    $390 = $22;
    $391 = ($390|0)!=(0);
    if ($391) {
     $392 = $24;
     $393 = ((($392)) + 1|0);
     $24 = $393;
     $394 = HEAP8[$392>>0]|0;
     $395 = $7;
     $396 = ((($395)) + 1|0);
     $7 = $396;
     HEAP8[$395>>0] = $394;
     $397 = $22;
     $398 = ($397>>>0)>(1);
     if ($398) {
      $399 = $24;
      $400 = ((($399)) + 1|0);
      $24 = $400;
      $401 = HEAP8[$399>>0]|0;
      $402 = $7;
      $403 = ((($402)) + 1|0);
      $7 = $403;
      HEAP8[$402>>0] = $401;
     }
    }
   }
  } while(0);
  $482 = $5;
  $483 = $6;
  $484 = ($482>>>0)<($483>>>0);
  if (!($484)) {
   break;
  }
  $485 = $7;
  $486 = $9;
  $487 = ($485>>>0)<($486>>>0);
  if (!($487)) {
   break;
  }
 }
 do {
  if ((label|0) == 22) {
   $271 = $2;
   $272 = ((($271)) + 24|0);
   HEAP32[$272>>2] = 14149;
   $273 = $4;
   $274 = ((($273)) + 4|0);
   HEAP32[$274>>2] = 16209;
  }
  else if ((label|0) == 52) {
   $455 = $2;
   $456 = ((($455)) + 24|0);
   HEAP32[$456>>2] = 14127;
   $457 = $4;
   $458 = ((($457)) + 4|0);
   HEAP32[$458>>2] = 16209;
  }
  else if ((label|0) == 55) {
   $473 = $21;
   $474 = $473 & 32;
   $475 = ($474|0)!=(0);
   if ($475) {
    $476 = $4;
    $477 = ((($476)) + 4|0);
    HEAP32[$477>>2] = 16191;
    break;
   } else {
    $478 = $2;
    $479 = ((($478)) + 24|0);
    HEAP32[$479>>2] = 14099;
    $480 = $4;
    $481 = ((($480)) + 4|0);
    HEAP32[$481>>2] = 16209;
    break;
   }
  }
 } while(0);
 $488 = $15;
 $489 = $488 >>> 3;
 $22 = $489;
 $490 = $22;
 $491 = $5;
 $492 = (0 - ($490))|0;
 $493 = (($491) + ($492)|0);
 $5 = $493;
 $494 = $22;
 $495 = $494 << 3;
 $496 = $15;
 $497 = (($496) - ($495))|0;
 $15 = $497;
 $498 = $15;
 $499 = 1 << $498;
 $500 = (($499) - 1)|0;
 $501 = $14;
 $502 = $501 & $500;
 $14 = $502;
 $503 = $5;
 $504 = $2;
 HEAP32[$504>>2] = $503;
 $505 = $7;
 $506 = $2;
 $507 = ((($506)) + 12|0);
 HEAP32[$507>>2] = $505;
 $508 = $5;
 $509 = $6;
 $510 = ($508>>>0)<($509>>>0);
 if ($510) {
  $511 = $6;
  $512 = $5;
  $513 = $511;
  $514 = $512;
  $515 = (($513) - ($514))|0;
  $516 = (5 + ($515))|0;
  $525 = $516;
 } else {
  $517 = $5;
  $518 = $6;
  $519 = $517;
  $520 = $518;
  $521 = (($519) - ($520))|0;
  $522 = (5 - ($521))|0;
  $525 = $522;
 }
 $523 = $2;
 $524 = ((($523)) + 4|0);
 HEAP32[$524>>2] = $525;
 $526 = $7;
 $527 = $9;
 $528 = ($526>>>0)<($527>>>0);
 if ($528) {
  $529 = $9;
  $530 = $7;
  $531 = $529;
  $532 = $530;
  $533 = (($531) - ($532))|0;
  $534 = (257 + ($533))|0;
  $543 = $534;
  $541 = $2;
  $542 = ((($541)) + 16|0);
  HEAP32[$542>>2] = $543;
  $544 = $14;
  $545 = $4;
  $546 = ((($545)) + 60|0);
  HEAP32[$546>>2] = $544;
  $547 = $15;
  $548 = $4;
  $549 = ((($548)) + 64|0);
  HEAP32[$549>>2] = $547;
  STACKTOP = sp;return;
 } else {
  $535 = $7;
  $536 = $9;
  $537 = $535;
  $538 = $536;
  $539 = (($537) - ($538))|0;
  $540 = (257 - ($539))|0;
  $543 = $540;
  $541 = $2;
  $542 = ((($541)) + 16|0);
  HEAP32[$542>>2] = $543;
  $544 = $14;
  $545 = $4;
  $546 = ((($545)) + 60|0);
  HEAP32[$546>>2] = $544;
  $547 = $15;
  $548 = $4;
  $549 = ((($548)) + 64|0);
  HEAP32[$549>>2] = $547;
  STACKTOP = sp;return;
 }
}
function _inflateResetKeep($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (_inflateStateCheck($4)|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $1 = -2;
  $54 = $1;
  STACKTOP = sp;return ($54|0);
 }
 $7 = $2;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $3 = $9;
 $10 = $3;
 $11 = ((($10)) + 32|0);
 HEAP32[$11>>2] = 0;
 $12 = $2;
 $13 = ((($12)) + 20|0);
 HEAP32[$13>>2] = 0;
 $14 = $2;
 $15 = ((($14)) + 8|0);
 HEAP32[$15>>2] = 0;
 $16 = $2;
 $17 = ((($16)) + 24|0);
 HEAP32[$17>>2] = 0;
 $18 = $3;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $3;
  $23 = ((($22)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $24 & 1;
  $26 = $2;
  $27 = ((($26)) + 48|0);
  HEAP32[$27>>2] = $25;
 }
 $28 = $3;
 $29 = ((($28)) + 4|0);
 HEAP32[$29>>2] = 16180;
 $30 = $3;
 $31 = ((($30)) + 8|0);
 HEAP32[$31>>2] = 0;
 $32 = $3;
 $33 = ((($32)) + 16|0);
 HEAP32[$33>>2] = 0;
 $34 = $3;
 $35 = ((($34)) + 24|0);
 HEAP32[$35>>2] = 32768;
 $36 = $3;
 $37 = ((($36)) + 36|0);
 HEAP32[$37>>2] = 0;
 $38 = $3;
 $39 = ((($38)) + 60|0);
 HEAP32[$39>>2] = 0;
 $40 = $3;
 $41 = ((($40)) + 64|0);
 HEAP32[$41>>2] = 0;
 $42 = $3;
 $43 = ((($42)) + 1332|0);
 $44 = $3;
 $45 = ((($44)) + 112|0);
 HEAP32[$45>>2] = $43;
 $46 = $3;
 $47 = ((($46)) + 84|0);
 HEAP32[$47>>2] = $43;
 $48 = $3;
 $49 = ((($48)) + 80|0);
 HEAP32[$49>>2] = $43;
 $50 = $3;
 $51 = ((($50)) + 7108|0);
 HEAP32[$51>>2] = 1;
 $52 = $3;
 $53 = ((($52)) + 7112|0);
 HEAP32[$53>>2] = -1;
 $1 = 0;
 $54 = $1;
 STACKTOP = sp;return ($54|0);
}
function _inflateStateCheck($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = $2;
  $7 = ((($6)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $10 = $2;
   $11 = ((($10)) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    $14 = $2;
    $15 = ((($14)) + 28|0);
    $16 = HEAP32[$15>>2]|0;
    $3 = $16;
    $17 = $3;
    $18 = ($17|0)==(0|0);
    if (!($18)) {
     $19 = $3;
     $20 = HEAP32[$19>>2]|0;
     $21 = $2;
     $22 = ($20|0)!=($21|0);
     if (!($22)) {
      $23 = $3;
      $24 = ((($23)) + 4|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($25>>>0)<(16180);
      if (!($26)) {
       $27 = $3;
       $28 = ((($27)) + 4|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = ($29>>>0)>(16211);
       if (!($30)) {
        $1 = 0;
        $31 = $1;
        STACKTOP = sp;return ($31|0);
       }
      }
     }
    }
    $1 = 1;
    $31 = $1;
    STACKTOP = sp;return ($31|0);
   }
  }
 }
 $1 = 1;
 $31 = $1;
 STACKTOP = sp;return ($31|0);
}
function _inflateReset($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (_inflateStateCheck($4)|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $1 = -2;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 } else {
  $7 = $2;
  $8 = ((($7)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $3 = $9;
  $10 = $3;
  $11 = ((($10)) + 44|0);
  HEAP32[$11>>2] = 0;
  $12 = $3;
  $13 = ((($12)) + 48|0);
  HEAP32[$13>>2] = 0;
  $14 = $3;
  $15 = ((($14)) + 52|0);
  HEAP32[$15>>2] = 0;
  $16 = $2;
  $17 = (_inflateResetKeep($16)|0);
  $1 = $17;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _inflateReset2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = (_inflateStateCheck($7)|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  $2 = -2;
  $58 = $2;
  STACKTOP = sp;return ($58|0);
 }
 $10 = $3;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $6 = $12;
 $13 = $4;
 $14 = ($13|0)<(0);
 if ($14) {
  $5 = 0;
  $15 = $4;
  $16 = (0 - ($15))|0;
  $4 = $16;
 } else {
  $17 = $4;
  $18 = $17 >> 4;
  $19 = (($18) + 5)|0;
  $5 = $19;
  $20 = $4;
  $21 = ($20|0)<(48);
  if ($21) {
   $22 = $4;
   $23 = $22 & 15;
   $4 = $23;
  }
 }
 $24 = $4;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = $4;
  $27 = ($26|0)<(8);
  $28 = $4;
  $29 = ($28|0)>(15);
  $or$cond = $27 | $29;
  if ($or$cond) {
   $2 = -2;
   $58 = $2;
   STACKTOP = sp;return ($58|0);
  }
 }
 $30 = $6;
 $31 = ((($30)) + 56|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = $6;
  $35 = ((($34)) + 40|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $4;
  $38 = ($36|0)!=($37|0);
  if ($38) {
   $39 = $3;
   $40 = ((($39)) + 36|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $3;
   $43 = ((($42)) + 40|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $6;
   $46 = ((($45)) + 56|0);
   $47 = HEAP32[$46>>2]|0;
   FUNCTION_TABLE_vii[$41 & 63]($44,$47);
   $48 = $6;
   $49 = ((($48)) + 56|0);
   HEAP32[$49>>2] = 0;
  }
 }
 $50 = $5;
 $51 = $6;
 $52 = ((($51)) + 12|0);
 HEAP32[$52>>2] = $50;
 $53 = $4;
 $54 = $6;
 $55 = ((($54)) + 40|0);
 HEAP32[$55>>2] = $53;
 $56 = $3;
 $57 = (_inflateReset($56)|0);
 $2 = $57;
 $58 = $2;
 STACKTOP = sp;return ($58|0);
}
function _inflateInit2_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $7;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = $7;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = HEAP8[18804]|0;
  $17 = $16 << 24 >> 24;
  $18 = ($15|0)!=($17|0);
  $19 = $8;
  $20 = ($19|0)!=(56);
  $or$cond = $18 | $20;
  if (!($or$cond)) {
   $21 = $5;
   $22 = ($21|0)==(0|0);
   if ($22) {
    $4 = -2;
    $72 = $4;
    STACKTOP = sp;return ($72|0);
   }
   $23 = $5;
   $24 = ((($23)) + 24|0);
   HEAP32[$24>>2] = 0;
   $25 = $5;
   $26 = ((($25)) + 32|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    $29 = $5;
    $30 = ((($29)) + 32|0);
    HEAP32[$30>>2] = 33;
    $31 = $5;
    $32 = ((($31)) + 40|0);
    HEAP32[$32>>2] = 0;
   }
   $33 = $5;
   $34 = ((($33)) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(0|0);
   if ($36) {
    $37 = $5;
    $38 = ((($37)) + 36|0);
    HEAP32[$38>>2] = 34;
   }
   $39 = $5;
   $40 = ((($39)) + 32|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $5;
   $43 = ((($42)) + 40|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (FUNCTION_TABLE_iiii[$41 & 127]($44,1,7120)|0);
   $10 = $45;
   $46 = $10;
   $47 = ($46|0)==(0|0);
   if ($47) {
    $4 = -4;
    $72 = $4;
    STACKTOP = sp;return ($72|0);
   }
   $48 = $10;
   $49 = $5;
   $50 = ((($49)) + 28|0);
   HEAP32[$50>>2] = $48;
   $51 = $5;
   $52 = $10;
   HEAP32[$52>>2] = $51;
   $53 = $10;
   $54 = ((($53)) + 56|0);
   HEAP32[$54>>2] = 0;
   $55 = $10;
   $56 = ((($55)) + 4|0);
   HEAP32[$56>>2] = 16180;
   $57 = $5;
   $58 = $6;
   $59 = (_inflateReset2($57,$58)|0);
   $9 = $59;
   $60 = $9;
   $61 = ($60|0)!=(0);
   if ($61) {
    $62 = $5;
    $63 = ((($62)) + 36|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $5;
    $66 = ((($65)) + 40|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = $10;
    FUNCTION_TABLE_vii[$64 & 63]($67,$68);
    $69 = $5;
    $70 = ((($69)) + 28|0);
    HEAP32[$70>>2] = 0;
   }
   $71 = $9;
   $4 = $71;
   $72 = $4;
   STACKTOP = sp;return ($72|0);
  }
 }
 $4 = -6;
 $72 = $4;
 STACKTOP = sp;return ($72|0);
}
function _inflate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
 var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
 var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
 var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
 var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
 var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
 var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
 var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
 var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0;
 var $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0;
 var $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0;
 var $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0;
 var $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0;
 var $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0;
 var $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0;
 var $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0;
 var $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0;
 var $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0;
 var $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0;
 var $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0;
 var $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0;
 var $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0;
 var $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0;
 var $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond12 = 0, $or$cond14 = 0, $or$cond16 = 0, $or$cond18 = 0, $or$cond4 = 0, $or$cond6 = 0, $or$cond8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $16 = sp + 68|0;
 $17 = sp + 64|0;
 $20 = sp + 72|0;
 $3 = $0;
 $4 = $1;
 $21 = $3;
 $22 = (_inflateStateCheck($21)|0);
 $23 = ($22|0)!=(0);
 do {
  if (!($23)) {
   $24 = $3;
   $25 = ((($24)) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0|0);
   if (!($27)) {
    $28 = $3;
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(0|0);
    if ($30) {
     $31 = $3;
     $32 = ((($31)) + 4|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     }
    }
    $35 = $3;
    $36 = ((($35)) + 28|0);
    $37 = HEAP32[$36>>2]|0;
    $5 = $37;
    $38 = $5;
    $39 = ((($38)) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==(16191);
    if ($41) {
     $42 = $5;
     $43 = ((($42)) + 4|0);
     HEAP32[$43>>2] = 16192;
    }
    $44 = $3;
    $45 = ((($44)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $7 = $46;
    $47 = $3;
    $48 = ((($47)) + 16|0);
    $49 = HEAP32[$48>>2]|0;
    $9 = $49;
    $50 = $3;
    $51 = HEAP32[$50>>2]|0;
    $6 = $51;
    $52 = $3;
    $53 = ((($52)) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $8 = $54;
    $55 = $5;
    $56 = ((($55)) + 60|0);
    $57 = HEAP32[$56>>2]|0;
    $10 = $57;
    $58 = $5;
    $59 = ((($58)) + 64|0);
    $60 = HEAP32[$59>>2]|0;
    $11 = $60;
    $61 = $8;
    $12 = $61;
    $62 = $9;
    $13 = $62;
    $19 = 0;
    L10: while(1) {
     $63 = $5;
     $64 = ((($63)) + 4|0);
     $65 = HEAP32[$64>>2]|0;
     L12: do {
      switch ($65|0) {
      case 16208:  {
       label = 313;
       break L10;
       break;
      }
      case 16209:  {
       label = 314;
       break L10;
       break;
      }
      case 16210:  {
       label = 315;
       break L10;
       break;
      }
      case 16180:  {
       $66 = $5;
       $67 = ((($66)) + 12|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = ($68|0)==(0);
       if ($69) {
        $70 = $5;
        $71 = ((($70)) + 4|0);
        HEAP32[$71>>2] = 16192;
        continue L10;
       }
       while(1) {
        $72 = $11;
        $73 = ($72>>>0)<(16);
        if (!($73)) {
         break;
        }
        $74 = $8;
        $75 = ($74|0)==(0);
        if ($75) {
         break L10;
        }
        $76 = $8;
        $77 = (($76) + -1)|0;
        $8 = $77;
        $78 = $6;
        $79 = ((($78)) + 1|0);
        $6 = $79;
        $80 = HEAP8[$78>>0]|0;
        $81 = $80&255;
        $82 = $11;
        $83 = $81 << $82;
        $84 = $10;
        $85 = (($84) + ($83))|0;
        $10 = $85;
        $86 = $11;
        $87 = (($86) + 8)|0;
        $11 = $87;
       }
       $88 = $5;
       $89 = ((($88)) + 12|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = $90 & 2;
       $92 = ($91|0)!=(0);
       $93 = $10;
       $94 = ($93|0)==(35615);
       $or$cond = $92 & $94;
       $95 = $5;
       if ($or$cond) {
        $96 = ((($95)) + 40|0);
        $97 = HEAP32[$96>>2]|0;
        $98 = ($97|0)==(0);
        if ($98) {
         $99 = $5;
         $100 = ((($99)) + 40|0);
         HEAP32[$100>>2] = 15;
        }
        $101 = (_crc32(0,0,0)|0);
        $102 = $5;
        $103 = ((($102)) + 28|0);
        HEAP32[$103>>2] = $101;
        $104 = $10;
        $105 = $104&255;
        HEAP8[$20>>0] = $105;
        $106 = $10;
        $107 = $106 >>> 8;
        $108 = $107&255;
        $109 = ((($20)) + 1|0);
        HEAP8[$109>>0] = $108;
        $110 = $5;
        $111 = ((($110)) + 28|0);
        $112 = HEAP32[$111>>2]|0;
        $113 = (_crc32($112,$20,2)|0);
        $114 = $5;
        $115 = ((($114)) + 28|0);
        HEAP32[$115>>2] = $113;
        $10 = 0;
        $11 = 0;
        $116 = $5;
        $117 = ((($116)) + 4|0);
        HEAP32[$117>>2] = 16181;
        continue L10;
       }
       $118 = ((($95)) + 20|0);
       HEAP32[$118>>2] = 0;
       $119 = $5;
       $120 = ((($119)) + 36|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = ($121|0)!=(0|0);
       if ($122) {
        $123 = $5;
        $124 = ((($123)) + 36|0);
        $125 = HEAP32[$124>>2]|0;
        $126 = ((($125)) + 48|0);
        HEAP32[$126>>2] = -1;
       }
       $127 = $5;
       $128 = ((($127)) + 12|0);
       $129 = HEAP32[$128>>2]|0;
       $130 = $129 & 1;
       $131 = ($130|0)!=(0);
       if ($131) {
        $132 = $10;
        $133 = $132 & 255;
        $134 = $133 << 8;
        $135 = $10;
        $136 = $135 >>> 8;
        $137 = (($134) + ($136))|0;
        $138 = (($137>>>0) % 31)&-1;
        $139 = ($138|0)!=(0);
        if (!($139)) {
         $144 = $10;
         $145 = $144 & 15;
         $146 = ($145|0)!=(8);
         if ($146) {
          $147 = $3;
          $148 = ((($147)) + 24|0);
          HEAP32[$148>>2] = 13785;
          $149 = $5;
          $150 = ((($149)) + 4|0);
          HEAP32[$150>>2] = 16209;
          continue L10;
         }
         $151 = $10;
         $152 = $151 >>> 4;
         $10 = $152;
         $153 = $11;
         $154 = (($153) - 4)|0;
         $11 = $154;
         $155 = $10;
         $156 = $155 & 15;
         $157 = (($156) + 8)|0;
         $18 = $157;
         $158 = $5;
         $159 = ((($158)) + 40|0);
         $160 = HEAP32[$159>>2]|0;
         $161 = ($160|0)==(0);
         if ($161) {
          $162 = $18;
          $163 = $5;
          $164 = ((($163)) + 40|0);
          HEAP32[$164>>2] = $162;
         }
         $165 = $18;
         $166 = ($165>>>0)>(15);
         if (!($166)) {
          $167 = $18;
          $168 = $5;
          $169 = ((($168)) + 40|0);
          $170 = HEAP32[$169>>2]|0;
          $171 = ($167>>>0)>($170>>>0);
          if (!($171)) {
           $176 = $18;
           $177 = 1 << $176;
           $178 = $5;
           $179 = ((($178)) + 24|0);
           HEAP32[$179>>2] = $177;
           $180 = (_adler32(0,0,0)|0);
           $181 = $5;
           $182 = ((($181)) + 28|0);
           HEAP32[$182>>2] = $180;
           $183 = $3;
           $184 = ((($183)) + 48|0);
           HEAP32[$184>>2] = $180;
           $185 = $10;
           $186 = $185 & 512;
           $187 = ($186|0)!=(0);
           $188 = $187 ? 16189 : 16191;
           $189 = $5;
           $190 = ((($189)) + 4|0);
           HEAP32[$190>>2] = $188;
           $10 = 0;
           $11 = 0;
           continue L10;
          }
         }
         $172 = $3;
         $173 = ((($172)) + 24|0);
         HEAP32[$173>>2] = 13812;
         $174 = $5;
         $175 = ((($174)) + 4|0);
         HEAP32[$175>>2] = 16209;
         continue L10;
        }
       }
       $140 = $3;
       $141 = ((($140)) + 24|0);
       HEAP32[$141>>2] = 13762;
       $142 = $5;
       $143 = ((($142)) + 4|0);
       HEAP32[$143>>2] = 16209;
       continue L10;
       break;
      }
      case 16181:  {
       while(1) {
        $191 = $11;
        $192 = ($191>>>0)<(16);
        if (!($192)) {
         break;
        }
        $193 = $8;
        $194 = ($193|0)==(0);
        if ($194) {
         break L10;
        }
        $195 = $8;
        $196 = (($195) + -1)|0;
        $8 = $196;
        $197 = $6;
        $198 = ((($197)) + 1|0);
        $6 = $198;
        $199 = HEAP8[$197>>0]|0;
        $200 = $199&255;
        $201 = $11;
        $202 = $200 << $201;
        $203 = $10;
        $204 = (($203) + ($202))|0;
        $10 = $204;
        $205 = $11;
        $206 = (($205) + 8)|0;
        $11 = $206;
       }
       $207 = $10;
       $208 = $5;
       $209 = ((($208)) + 20|0);
       HEAP32[$209>>2] = $207;
       $210 = $5;
       $211 = ((($210)) + 20|0);
       $212 = HEAP32[$211>>2]|0;
       $213 = $212 & 255;
       $214 = ($213|0)!=(8);
       if ($214) {
        $215 = $3;
        $216 = ((($215)) + 24|0);
        HEAP32[$216>>2] = 13785;
        $217 = $5;
        $218 = ((($217)) + 4|0);
        HEAP32[$218>>2] = 16209;
        continue L10;
       }
       $219 = $5;
       $220 = ((($219)) + 20|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = $221 & 57344;
       $223 = ($222|0)!=(0);
       if ($223) {
        $224 = $3;
        $225 = ((($224)) + 24|0);
        HEAP32[$225>>2] = 13832;
        $226 = $5;
        $227 = ((($226)) + 4|0);
        HEAP32[$227>>2] = 16209;
        continue L10;
       }
       $228 = $5;
       $229 = ((($228)) + 36|0);
       $230 = HEAP32[$229>>2]|0;
       $231 = ($230|0)!=(0|0);
       if ($231) {
        $232 = $10;
        $233 = $232 >>> 8;
        $234 = $233 & 1;
        $235 = $5;
        $236 = ((($235)) + 36|0);
        $237 = HEAP32[$236>>2]|0;
        HEAP32[$237>>2] = $234;
       }
       $238 = $5;
       $239 = ((($238)) + 20|0);
       $240 = HEAP32[$239>>2]|0;
       $241 = $240 & 512;
       $242 = ($241|0)!=(0);
       if ($242) {
        $243 = $5;
        $244 = ((($243)) + 12|0);
        $245 = HEAP32[$244>>2]|0;
        $246 = $245 & 4;
        $247 = ($246|0)!=(0);
        if ($247) {
         $248 = $10;
         $249 = $248&255;
         HEAP8[$20>>0] = $249;
         $250 = $10;
         $251 = $250 >>> 8;
         $252 = $251&255;
         $253 = ((($20)) + 1|0);
         HEAP8[$253>>0] = $252;
         $254 = $5;
         $255 = ((($254)) + 28|0);
         $256 = HEAP32[$255>>2]|0;
         $257 = (_crc32($256,$20,2)|0);
         $258 = $5;
         $259 = ((($258)) + 28|0);
         HEAP32[$259>>2] = $257;
        }
       }
       $10 = 0;
       $11 = 0;
       $260 = $5;
       $261 = ((($260)) + 4|0);
       HEAP32[$261>>2] = 16182;
       label = 45;
       break;
      }
      case 16182:  {
       label = 45;
       break;
      }
      case 16183:  {
       label = 54;
       break;
      }
      case 16184:  {
       label = 63;
       break;
      }
      case 16185:  {
       label = 76;
       break;
      }
      case 16186:  {
       label = 92;
       break;
      }
      case 16187:  {
       label = 108;
       break;
      }
      case 16188:  {
       label = 124;
       break;
      }
      case 16189:  {
       while(1) {
        $768 = $11;
        $769 = ($768>>>0)<(32);
        if (!($769)) {
         break;
        }
        $770 = $8;
        $771 = ($770|0)==(0);
        if ($771) {
         break L10;
        }
        $772 = $8;
        $773 = (($772) + -1)|0;
        $8 = $773;
        $774 = $6;
        $775 = ((($774)) + 1|0);
        $6 = $775;
        $776 = HEAP8[$774>>0]|0;
        $777 = $776&255;
        $778 = $11;
        $779 = $777 << $778;
        $780 = $10;
        $781 = (($780) + ($779))|0;
        $10 = $781;
        $782 = $11;
        $783 = (($782) + 8)|0;
        $11 = $783;
       }
       $784 = $10;
       $785 = $784 >>> 24;
       $786 = $785 & 255;
       $787 = $10;
       $788 = $787 >>> 8;
       $789 = $788 & 65280;
       $790 = (($786) + ($789))|0;
       $791 = $10;
       $792 = $791 & 65280;
       $793 = $792 << 8;
       $794 = (($790) + ($793))|0;
       $795 = $10;
       $796 = $795 & 255;
       $797 = $796 << 24;
       $798 = (($794) + ($797))|0;
       $799 = $5;
       $800 = ((($799)) + 28|0);
       HEAP32[$800>>2] = $798;
       $801 = $3;
       $802 = ((($801)) + 48|0);
       HEAP32[$802>>2] = $798;
       $10 = 0;
       $11 = 0;
       $803 = $5;
       $804 = ((($803)) + 4|0);
       HEAP32[$804>>2] = 16190;
       label = 139;
       break;
      }
      case 16190:  {
       label = 139;
       break;
      }
      case 16191:  {
       label = 142;
       break;
      }
      case 16192:  {
       label = 143;
       break;
      }
      case 16193:  {
       $898 = $11;
       $899 = $898 & 7;
       $900 = $10;
       $901 = $900 >>> $899;
       $10 = $901;
       $902 = $11;
       $903 = $902 & 7;
       $904 = $11;
       $905 = (($904) - ($903))|0;
       $11 = $905;
       while(1) {
        $906 = $11;
        $907 = ($906>>>0)<(32);
        if (!($907)) {
         break;
        }
        $908 = $8;
        $909 = ($908|0)==(0);
        if ($909) {
         break L10;
        }
        $910 = $8;
        $911 = (($910) + -1)|0;
        $8 = $911;
        $912 = $6;
        $913 = ((($912)) + 1|0);
        $6 = $913;
        $914 = HEAP8[$912>>0]|0;
        $915 = $914&255;
        $916 = $11;
        $917 = $915 << $916;
        $918 = $10;
        $919 = (($918) + ($917))|0;
        $10 = $919;
        $920 = $11;
        $921 = (($920) + 8)|0;
        $11 = $921;
       }
       $922 = $10;
       $923 = $922 & 65535;
       $924 = $10;
       $925 = $924 >>> 16;
       $926 = $925 ^ 65535;
       $927 = ($923|0)!=($926|0);
       if ($927) {
        $928 = $3;
        $929 = ((($928)) + 24|0);
        HEAP32[$929>>2] = 13896;
        $930 = $5;
        $931 = ((($930)) + 4|0);
        HEAP32[$931>>2] = 16209;
        continue L10;
       } else {
        $932 = $10;
        $933 = $932 & 65535;
        $934 = $5;
        $935 = ((($934)) + 68|0);
        HEAP32[$935>>2] = $933;
        $10 = 0;
        $11 = 0;
        $936 = $5;
        $937 = ((($936)) + 4|0);
        HEAP32[$937>>2] = 16194;
        $938 = $4;
        $939 = ($938|0)==(6);
        if ($939) {
         break L10;
        } else {
         label = 163;
         break L12;
        }
       }
       break;
      }
      case 16194:  {
       label = 163;
       break;
      }
      case 16195:  {
       label = 164;
       break;
      }
      case 16196:  {
       while(1) {
        $979 = $11;
        $980 = ($979>>>0)<(14);
        if (!($980)) {
         break;
        }
        $981 = $8;
        $982 = ($981|0)==(0);
        if ($982) {
         break L10;
        }
        $983 = $8;
        $984 = (($983) + -1)|0;
        $8 = $984;
        $985 = $6;
        $986 = ((($985)) + 1|0);
        $6 = $986;
        $987 = HEAP8[$985>>0]|0;
        $988 = $987&255;
        $989 = $11;
        $990 = $988 << $989;
        $991 = $10;
        $992 = (($991) + ($990))|0;
        $10 = $992;
        $993 = $11;
        $994 = (($993) + 8)|0;
        $11 = $994;
       }
       $995 = $10;
       $996 = $995 & 31;
       $997 = (($996) + 257)|0;
       $998 = $5;
       $999 = ((($998)) + 100|0);
       HEAP32[$999>>2] = $997;
       $1000 = $10;
       $1001 = $1000 >>> 5;
       $10 = $1001;
       $1002 = $11;
       $1003 = (($1002) - 5)|0;
       $11 = $1003;
       $1004 = $10;
       $1005 = $1004 & 31;
       $1006 = (($1005) + 1)|0;
       $1007 = $5;
       $1008 = ((($1007)) + 104|0);
       HEAP32[$1008>>2] = $1006;
       $1009 = $10;
       $1010 = $1009 >>> 5;
       $10 = $1010;
       $1011 = $11;
       $1012 = (($1011) - 5)|0;
       $11 = $1012;
       $1013 = $10;
       $1014 = $1013 & 15;
       $1015 = (($1014) + 4)|0;
       $1016 = $5;
       $1017 = ((($1016)) + 96|0);
       HEAP32[$1017>>2] = $1015;
       $1018 = $10;
       $1019 = $1018 >>> 4;
       $10 = $1019;
       $1020 = $11;
       $1021 = (($1020) - 4)|0;
       $11 = $1021;
       $1022 = $5;
       $1023 = ((($1022)) + 100|0);
       $1024 = HEAP32[$1023>>2]|0;
       $1025 = ($1024>>>0)>(286);
       if (!($1025)) {
        $1026 = $5;
        $1027 = ((($1026)) + 104|0);
        $1028 = HEAP32[$1027>>2]|0;
        $1029 = ($1028>>>0)>(30);
        if (!($1029)) {
         $1034 = $5;
         $1035 = ((($1034)) + 108|0);
         HEAP32[$1035>>2] = 0;
         $1036 = $5;
         $1037 = ((($1036)) + 4|0);
         HEAP32[$1037>>2] = 16197;
         label = 179;
         break L12;
        }
       }
       $1030 = $3;
       $1031 = ((($1030)) + 24|0);
       HEAP32[$1031>>2] = 13925;
       $1032 = $5;
       $1033 = ((($1032)) + 4|0);
       HEAP32[$1033>>2] = 16209;
       continue L10;
       break;
      }
      case 16197:  {
       label = 179;
       break;
      }
      case 16198:  {
       label = 189;
       break;
      }
      case 16199:  {
       label = 223;
       break;
      }
      case 16200:  {
       label = 224;
       break;
      }
      case 16201:  {
       label = 245;
       break;
      }
      case 16202:  {
       label = 251;
       break;
      }
      case 16203:  {
       label = 263;
       break;
      }
      case 16204:  {
       break;
      }
      case 16205:  {
       $1967 = $9;
       $1968 = ($1967|0)==(0);
       if ($1968) {
        break L10;
       }
       $1969 = $5;
       $1970 = ((($1969)) + 68|0);
       $1971 = HEAP32[$1970>>2]|0;
       $1972 = $1971&255;
       $1973 = $7;
       $1974 = ((($1973)) + 1|0);
       $7 = $1974;
       HEAP8[$1973>>0] = $1972;
       $1975 = $9;
       $1976 = (($1975) + -1)|0;
       $9 = $1976;
       $1977 = $5;
       $1978 = ((($1977)) + 4|0);
       HEAP32[$1978>>2] = 16200;
       continue L10;
       break;
      }
      case 16206:  {
       $1979 = $5;
       $1980 = ((($1979)) + 12|0);
       $1981 = HEAP32[$1980>>2]|0;
       $1982 = ($1981|0)!=(0);
       if ($1982) {
        while(1) {
         $1983 = $11;
         $1984 = ($1983>>>0)<(32);
         if (!($1984)) {
          break;
         }
         $1985 = $8;
         $1986 = ($1985|0)==(0);
         if ($1986) {
          break L10;
         }
         $1987 = $8;
         $1988 = (($1987) + -1)|0;
         $8 = $1988;
         $1989 = $6;
         $1990 = ((($1989)) + 1|0);
         $6 = $1990;
         $1991 = HEAP8[$1989>>0]|0;
         $1992 = $1991&255;
         $1993 = $11;
         $1994 = $1992 << $1993;
         $1995 = $10;
         $1996 = (($1995) + ($1994))|0;
         $10 = $1996;
         $1997 = $11;
         $1998 = (($1997) + 8)|0;
         $11 = $1998;
        }
        $1999 = $9;
        $2000 = $13;
        $2001 = (($2000) - ($1999))|0;
        $13 = $2001;
        $2002 = $13;
        $2003 = $3;
        $2004 = ((($2003)) + 20|0);
        $2005 = HEAP32[$2004>>2]|0;
        $2006 = (($2005) + ($2002))|0;
        HEAP32[$2004>>2] = $2006;
        $2007 = $13;
        $2008 = $5;
        $2009 = ((($2008)) + 32|0);
        $2010 = HEAP32[$2009>>2]|0;
        $2011 = (($2010) + ($2007))|0;
        HEAP32[$2009>>2] = $2011;
        $2012 = $5;
        $2013 = ((($2012)) + 12|0);
        $2014 = HEAP32[$2013>>2]|0;
        $2015 = $2014 & 4;
        $2016 = ($2015|0)!=(0);
        $2017 = $13;
        $2018 = ($2017|0)!=(0);
        $or$cond8 = $2016 & $2018;
        if ($or$cond8) {
         $2019 = $5;
         $2020 = ((($2019)) + 20|0);
         $2021 = HEAP32[$2020>>2]|0;
         $2022 = ($2021|0)!=(0);
         $2023 = $5;
         $2024 = ((($2023)) + 28|0);
         $2025 = HEAP32[$2024>>2]|0;
         $2026 = $7;
         $2027 = $13;
         $2028 = (0 - ($2027))|0;
         $2029 = (($2026) + ($2028)|0);
         $2030 = $13;
         if ($2022) {
          $2031 = (_crc32($2025,$2029,$2030)|0);
          $2035 = $2031;
         } else {
          $2032 = (_adler32($2025,$2029,$2030)|0);
          $2035 = $2032;
         }
         $2033 = $5;
         $2034 = ((($2033)) + 28|0);
         HEAP32[$2034>>2] = $2035;
         $2036 = $3;
         $2037 = ((($2036)) + 48|0);
         HEAP32[$2037>>2] = $2035;
        }
        $2038 = $9;
        $13 = $2038;
        $2039 = $5;
        $2040 = ((($2039)) + 12|0);
        $2041 = HEAP32[$2040>>2]|0;
        $2042 = $2041 & 4;
        $2043 = ($2042|0)!=(0);
        if ($2043) {
         $2044 = $5;
         $2045 = ((($2044)) + 20|0);
         $2046 = HEAP32[$2045>>2]|0;
         $2047 = ($2046|0)!=(0);
         $2048 = $10;
         if ($2047) {
          $2066 = $2048;
         } else {
          $2049 = $2048 >>> 24;
          $2050 = $2049 & 255;
          $2051 = $10;
          $2052 = $2051 >>> 8;
          $2053 = $2052 & 65280;
          $2054 = (($2050) + ($2053))|0;
          $2055 = $10;
          $2056 = $2055 & 65280;
          $2057 = $2056 << 8;
          $2058 = (($2054) + ($2057))|0;
          $2059 = $10;
          $2060 = $2059 & 255;
          $2061 = $2060 << 24;
          $2062 = (($2058) + ($2061))|0;
          $2066 = $2062;
         }
         $2063 = $5;
         $2064 = ((($2063)) + 28|0);
         $2065 = HEAP32[$2064>>2]|0;
         $2067 = ($2066|0)!=($2065|0);
         if ($2067) {
          $2068 = $3;
          $2069 = ((($2068)) + 24|0);
          HEAP32[$2069>>2] = 14179;
          $2070 = $5;
          $2071 = ((($2070)) + 4|0);
          HEAP32[$2071>>2] = 16209;
          continue L10;
         }
        }
        $10 = 0;
        $11 = 0;
       }
       $2072 = $5;
       $2073 = ((($2072)) + 4|0);
       HEAP32[$2073>>2] = 16207;
       label = 304;
       break;
      }
      case 16207:  {
       label = 304;
       break;
      }
      default: {
       label = 316;
       break L10;
      }
      }
     } while(0);
     do {
      if ((label|0) == 45) {
       while(1) {
        label = 0;
        $262 = $11;
        $263 = ($262>>>0)<(32);
        if (!($263)) {
         break;
        }
        $264 = $8;
        $265 = ($264|0)==(0);
        if ($265) {
         break L10;
        }
        $266 = $8;
        $267 = (($266) + -1)|0;
        $8 = $267;
        $268 = $6;
        $269 = ((($268)) + 1|0);
        $6 = $269;
        $270 = HEAP8[$268>>0]|0;
        $271 = $270&255;
        $272 = $11;
        $273 = $271 << $272;
        $274 = $10;
        $275 = (($274) + ($273))|0;
        $10 = $275;
        $276 = $11;
        $277 = (($276) + 8)|0;
        $11 = $277;
        label = 45;
       }
       $278 = $5;
       $279 = ((($278)) + 36|0);
       $280 = HEAP32[$279>>2]|0;
       $281 = ($280|0)!=(0|0);
       if ($281) {
        $282 = $10;
        $283 = $5;
        $284 = ((($283)) + 36|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = ((($285)) + 4|0);
        HEAP32[$286>>2] = $282;
       }
       $287 = $5;
       $288 = ((($287)) + 20|0);
       $289 = HEAP32[$288>>2]|0;
       $290 = $289 & 512;
       $291 = ($290|0)!=(0);
       if ($291) {
        $292 = $5;
        $293 = ((($292)) + 12|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = $294 & 4;
        $296 = ($295|0)!=(0);
        if ($296) {
         $297 = $10;
         $298 = $297&255;
         HEAP8[$20>>0] = $298;
         $299 = $10;
         $300 = $299 >>> 8;
         $301 = $300&255;
         $302 = ((($20)) + 1|0);
         HEAP8[$302>>0] = $301;
         $303 = $10;
         $304 = $303 >>> 16;
         $305 = $304&255;
         $306 = ((($20)) + 2|0);
         HEAP8[$306>>0] = $305;
         $307 = $10;
         $308 = $307 >>> 24;
         $309 = $308&255;
         $310 = ((($20)) + 3|0);
         HEAP8[$310>>0] = $309;
         $311 = $5;
         $312 = ((($311)) + 28|0);
         $313 = HEAP32[$312>>2]|0;
         $314 = (_crc32($313,$20,4)|0);
         $315 = $5;
         $316 = ((($315)) + 28|0);
         HEAP32[$316>>2] = $314;
        }
       }
       $10 = 0;
       $11 = 0;
       $317 = $5;
       $318 = ((($317)) + 4|0);
       HEAP32[$318>>2] = 16183;
       label = 54;
      }
      else if ((label|0) == 139) {
       label = 0;
       $805 = $5;
       $806 = ((($805)) + 16|0);
       $807 = HEAP32[$806>>2]|0;
       $808 = ($807|0)==(0);
       if ($808) {
        label = 140;
        break L10;
       }
       $826 = (_adler32(0,0,0)|0);
       $827 = $5;
       $828 = ((($827)) + 28|0);
       HEAP32[$828>>2] = $826;
       $829 = $3;
       $830 = ((($829)) + 48|0);
       HEAP32[$830>>2] = $826;
       $831 = $5;
       $832 = ((($831)) + 4|0);
       HEAP32[$832>>2] = 16191;
       label = 142;
      }
      else if ((label|0) == 163) {
       label = 0;
       $940 = $5;
       $941 = ((($940)) + 4|0);
       HEAP32[$941>>2] = 16195;
       label = 164;
      }
      else if ((label|0) == 179) {
       while(1) {
        label = 0;
        $1038 = $5;
        $1039 = ((($1038)) + 108|0);
        $1040 = HEAP32[$1039>>2]|0;
        $1041 = $5;
        $1042 = ((($1041)) + 96|0);
        $1043 = HEAP32[$1042>>2]|0;
        $1044 = ($1040>>>0)<($1043>>>0);
        if (!($1044)) {
         break;
        }
        while(1) {
         $1045 = $11;
         $1046 = ($1045>>>0)<(3);
         if (!($1046)) {
          break;
         }
         $1047 = $8;
         $1048 = ($1047|0)==(0);
         if ($1048) {
          break L10;
         }
         $1049 = $8;
         $1050 = (($1049) + -1)|0;
         $8 = $1050;
         $1051 = $6;
         $1052 = ((($1051)) + 1|0);
         $6 = $1052;
         $1053 = HEAP8[$1051>>0]|0;
         $1054 = $1053&255;
         $1055 = $11;
         $1056 = $1054 << $1055;
         $1057 = $10;
         $1058 = (($1057) + ($1056))|0;
         $10 = $1058;
         $1059 = $11;
         $1060 = (($1059) + 8)|0;
         $11 = $1060;
        }
        $1061 = $10;
        $1062 = $1061 & 7;
        $1063 = $1062&65535;
        $1064 = $5;
        $1065 = ((($1064)) + 108|0);
        $1066 = HEAP32[$1065>>2]|0;
        $1067 = (($1066) + 1)|0;
        HEAP32[$1065>>2] = $1067;
        $1068 = (10024 + ($1066<<1)|0);
        $1069 = HEAP16[$1068>>1]|0;
        $1070 = $1069&65535;
        $1071 = $5;
        $1072 = ((($1071)) + 116|0);
        $1073 = (($1072) + ($1070<<1)|0);
        HEAP16[$1073>>1] = $1063;
        $1074 = $10;
        $1075 = $1074 >>> 3;
        $10 = $1075;
        $1076 = $11;
        $1077 = (($1076) - 3)|0;
        $11 = $1077;
        label = 179;
       }
       while(1) {
        $1078 = $5;
        $1079 = ((($1078)) + 108|0);
        $1080 = HEAP32[$1079>>2]|0;
        $1081 = ($1080>>>0)<(19);
        $1082 = $5;
        if (!($1081)) {
         break;
        }
        $1083 = ((($1082)) + 108|0);
        $1084 = HEAP32[$1083>>2]|0;
        $1085 = (($1084) + 1)|0;
        HEAP32[$1083>>2] = $1085;
        $1086 = (10024 + ($1084<<1)|0);
        $1087 = HEAP16[$1086>>1]|0;
        $1088 = $1087&65535;
        $1089 = $5;
        $1090 = ((($1089)) + 116|0);
        $1091 = (($1090) + ($1088<<1)|0);
        HEAP16[$1091>>1] = 0;
       }
       $1092 = ((($1082)) + 1332|0);
       $1093 = $5;
       $1094 = ((($1093)) + 112|0);
       HEAP32[$1094>>2] = $1092;
       $1095 = $5;
       $1096 = ((($1095)) + 112|0);
       $1097 = HEAP32[$1096>>2]|0;
       $1098 = $5;
       $1099 = ((($1098)) + 80|0);
       HEAP32[$1099>>2] = $1097;
       $1100 = $5;
       $1101 = ((($1100)) + 88|0);
       HEAP32[$1101>>2] = 7;
       $1102 = $5;
       $1103 = ((($1102)) + 116|0);
       $1104 = $5;
       $1105 = ((($1104)) + 112|0);
       $1106 = $5;
       $1107 = ((($1106)) + 88|0);
       $1108 = $5;
       $1109 = ((($1108)) + 756|0);
       $1110 = (_inflate_table(0,$1103,19,$1105,$1107,$1109)|0);
       $19 = $1110;
       $1111 = $19;
       $1112 = ($1111|0)!=(0);
       if ($1112) {
        $1113 = $3;
        $1114 = ((($1113)) + 24|0);
        HEAP32[$1114>>2] = 13961;
        $1115 = $5;
        $1116 = ((($1115)) + 4|0);
        HEAP32[$1116>>2] = 16209;
        continue L10;
       } else {
        $1117 = $5;
        $1118 = ((($1117)) + 108|0);
        HEAP32[$1118>>2] = 0;
        $1119 = $5;
        $1120 = ((($1119)) + 4|0);
        HEAP32[$1120>>2] = 16198;
        label = 189;
        break;
       }
      }
      else if ((label|0) == 304) {
       label = 0;
       $2074 = $5;
       $2075 = ((($2074)) + 12|0);
       $2076 = HEAP32[$2075>>2]|0;
       $2077 = ($2076|0)!=(0);
       if (!($2077)) {
        label = 312;
        break L10;
       }
       $2078 = $5;
       $2079 = ((($2078)) + 20|0);
       $2080 = HEAP32[$2079>>2]|0;
       $2081 = ($2080|0)!=(0);
       if (!($2081)) {
        label = 312;
        break L10;
       }
       while(1) {
        $2082 = $11;
        $2083 = ($2082>>>0)<(32);
        if (!($2083)) {
         break;
        }
        $2084 = $8;
        $2085 = ($2084|0)==(0);
        if ($2085) {
         break L10;
        }
        $2086 = $8;
        $2087 = (($2086) + -1)|0;
        $8 = $2087;
        $2088 = $6;
        $2089 = ((($2088)) + 1|0);
        $6 = $2089;
        $2090 = HEAP8[$2088>>0]|0;
        $2091 = $2090&255;
        $2092 = $11;
        $2093 = $2091 << $2092;
        $2094 = $10;
        $2095 = (($2094) + ($2093))|0;
        $10 = $2095;
        $2096 = $11;
        $2097 = (($2096) + 8)|0;
        $11 = $2097;
       }
       $2098 = $10;
       $2099 = $5;
       $2100 = ((($2099)) + 32|0);
       $2101 = HEAP32[$2100>>2]|0;
       $2102 = ($2098|0)!=($2101|0);
       if (!($2102)) {
        label = 311;
        break L10;
       }
       $2103 = $3;
       $2104 = ((($2103)) + 24|0);
       HEAP32[$2104>>2] = 14200;
       $2105 = $5;
       $2106 = ((($2105)) + 4|0);
       HEAP32[$2106>>2] = 16209;
       continue L10;
      }
     } while(0);
     do {
      if ((label|0) == 54) {
       while(1) {
        label = 0;
        $319 = $11;
        $320 = ($319>>>0)<(16);
        if (!($320)) {
         break;
        }
        $321 = $8;
        $322 = ($321|0)==(0);
        if ($322) {
         break L10;
        }
        $323 = $8;
        $324 = (($323) + -1)|0;
        $8 = $324;
        $325 = $6;
        $326 = ((($325)) + 1|0);
        $6 = $326;
        $327 = HEAP8[$325>>0]|0;
        $328 = $327&255;
        $329 = $11;
        $330 = $328 << $329;
        $331 = $10;
        $332 = (($331) + ($330))|0;
        $10 = $332;
        $333 = $11;
        $334 = (($333) + 8)|0;
        $11 = $334;
        label = 54;
       }
       $335 = $5;
       $336 = ((($335)) + 36|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)!=(0|0);
       if ($338) {
        $339 = $10;
        $340 = $339 & 255;
        $341 = $5;
        $342 = ((($341)) + 36|0);
        $343 = HEAP32[$342>>2]|0;
        $344 = ((($343)) + 8|0);
        HEAP32[$344>>2] = $340;
        $345 = $10;
        $346 = $345 >>> 8;
        $347 = $5;
        $348 = ((($347)) + 36|0);
        $349 = HEAP32[$348>>2]|0;
        $350 = ((($349)) + 12|0);
        HEAP32[$350>>2] = $346;
       }
       $351 = $5;
       $352 = ((($351)) + 20|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = $353 & 512;
       $355 = ($354|0)!=(0);
       if ($355) {
        $356 = $5;
        $357 = ((($356)) + 12|0);
        $358 = HEAP32[$357>>2]|0;
        $359 = $358 & 4;
        $360 = ($359|0)!=(0);
        if ($360) {
         $361 = $10;
         $362 = $361&255;
         HEAP8[$20>>0] = $362;
         $363 = $10;
         $364 = $363 >>> 8;
         $365 = $364&255;
         $366 = ((($20)) + 1|0);
         HEAP8[$366>>0] = $365;
         $367 = $5;
         $368 = ((($367)) + 28|0);
         $369 = HEAP32[$368>>2]|0;
         $370 = (_crc32($369,$20,2)|0);
         $371 = $5;
         $372 = ((($371)) + 28|0);
         HEAP32[$372>>2] = $370;
        }
       }
       $10 = 0;
       $11 = 0;
       $373 = $5;
       $374 = ((($373)) + 4|0);
       HEAP32[$374>>2] = 16184;
       label = 63;
      }
      else if ((label|0) == 142) {
       label = 0;
       $833 = $4;
       $834 = ($833|0)==(5);
       $835 = $4;
       $836 = ($835|0)==(6);
       $or$cond4 = $834 | $836;
       if ($or$cond4) {
        break L10;
       } else {
        label = 143;
       }
      }
      else if ((label|0) == 164) {
       label = 0;
       $942 = $5;
       $943 = ((($942)) + 68|0);
       $944 = HEAP32[$943>>2]|0;
       $14 = $944;
       $945 = $14;
       $946 = ($945|0)!=(0);
       if (!($946)) {
        $977 = $5;
        $978 = ((($977)) + 4|0);
        HEAP32[$978>>2] = 16191;
        continue L10;
       }
       $947 = $14;
       $948 = $8;
       $949 = ($947>>>0)>($948>>>0);
       if ($949) {
        $950 = $8;
        $14 = $950;
       }
       $951 = $14;
       $952 = $9;
       $953 = ($951>>>0)>($952>>>0);
       if ($953) {
        $954 = $9;
        $14 = $954;
       }
       $955 = $14;
       $956 = ($955|0)==(0);
       if ($956) {
        break L10;
       }
       $957 = $7;
       $958 = $6;
       $959 = $14;
       _memcpy(($957|0),($958|0),($959|0))|0;
       $960 = $14;
       $961 = $8;
       $962 = (($961) - ($960))|0;
       $8 = $962;
       $963 = $14;
       $964 = $6;
       $965 = (($964) + ($963)|0);
       $6 = $965;
       $966 = $14;
       $967 = $9;
       $968 = (($967) - ($966))|0;
       $9 = $968;
       $969 = $14;
       $970 = $7;
       $971 = (($970) + ($969)|0);
       $7 = $971;
       $972 = $14;
       $973 = $5;
       $974 = ((($973)) + 68|0);
       $975 = HEAP32[$974>>2]|0;
       $976 = (($975) - ($972))|0;
       HEAP32[$974>>2] = $976;
       continue L10;
      }
      else if ((label|0) == 189) {
       L172: while(1) {
        label = 0;
        $1121 = $5;
        $1122 = ((($1121)) + 108|0);
        $1123 = HEAP32[$1122>>2]|0;
        $1124 = $5;
        $1125 = ((($1124)) + 100|0);
        $1126 = HEAP32[$1125>>2]|0;
        $1127 = $5;
        $1128 = ((($1127)) + 104|0);
        $1129 = HEAP32[$1128>>2]|0;
        $1130 = (($1126) + ($1129))|0;
        $1131 = ($1123>>>0)<($1130>>>0);
        if (!($1131)) {
         break;
        }
        while(1) {
         $1132 = $10;
         $1133 = $5;
         $1134 = ((($1133)) + 88|0);
         $1135 = HEAP32[$1134>>2]|0;
         $1136 = 1 << $1135;
         $1137 = (($1136) - 1)|0;
         $1138 = $1132 & $1137;
         $1139 = $5;
         $1140 = ((($1139)) + 80|0);
         $1141 = HEAP32[$1140>>2]|0;
         $1142 = (($1141) + ($1138<<2)|0);
         ;HEAP16[$16>>1]=HEAP16[$1142>>1]|0;HEAP16[$16+2>>1]=HEAP16[$1142+2>>1]|0;
         $1143 = ((($16)) + 1|0);
         $1144 = HEAP8[$1143>>0]|0;
         $1145 = $1144&255;
         $1146 = $11;
         $1147 = ($1145>>>0)<=($1146>>>0);
         if ($1147) {
          break;
         }
         $1148 = $8;
         $1149 = ($1148|0)==(0);
         if ($1149) {
          break L10;
         }
         $1150 = $8;
         $1151 = (($1150) + -1)|0;
         $8 = $1151;
         $1152 = $6;
         $1153 = ((($1152)) + 1|0);
         $6 = $1153;
         $1154 = HEAP8[$1152>>0]|0;
         $1155 = $1154&255;
         $1156 = $11;
         $1157 = $1155 << $1156;
         $1158 = $10;
         $1159 = (($1158) + ($1157))|0;
         $10 = $1159;
         $1160 = $11;
         $1161 = (($1160) + 8)|0;
         $11 = $1161;
        }
        $1162 = ((($16)) + 2|0);
        $1163 = HEAP16[$1162>>1]|0;
        $1164 = $1163&65535;
        $1165 = ($1164|0)<(16);
        if ($1165) {
         $1166 = ((($16)) + 1|0);
         $1167 = HEAP8[$1166>>0]|0;
         $1168 = $1167&255;
         $1169 = $10;
         $1170 = $1169 >>> $1168;
         $10 = $1170;
         $1171 = ((($16)) + 1|0);
         $1172 = HEAP8[$1171>>0]|0;
         $1173 = $1172&255;
         $1174 = $11;
         $1175 = (($1174) - ($1173))|0;
         $11 = $1175;
         $1176 = ((($16)) + 2|0);
         $1177 = HEAP16[$1176>>1]|0;
         $1178 = $5;
         $1179 = ((($1178)) + 108|0);
         $1180 = HEAP32[$1179>>2]|0;
         $1181 = (($1180) + 1)|0;
         HEAP32[$1179>>2] = $1181;
         $1182 = $5;
         $1183 = ((($1182)) + 116|0);
         $1184 = (($1183) + ($1180<<1)|0);
         HEAP16[$1184>>1] = $1177;
         label = 189;
         continue;
        }
        $1185 = ((($16)) + 2|0);
        $1186 = HEAP16[$1185>>1]|0;
        $1187 = $1186&65535;
        $1188 = ($1187|0)==(16);
        do {
         if ($1188) {
          while(1) {
           $1189 = $11;
           $1190 = ((($16)) + 1|0);
           $1191 = HEAP8[$1190>>0]|0;
           $1192 = $1191&255;
           $1193 = (($1192) + 2)|0;
           $1194 = ($1189>>>0)<($1193>>>0);
           if (!($1194)) {
            break;
           }
           $1195 = $8;
           $1196 = ($1195|0)==(0);
           if ($1196) {
            break L10;
           }
           $1197 = $8;
           $1198 = (($1197) + -1)|0;
           $8 = $1198;
           $1199 = $6;
           $1200 = ((($1199)) + 1|0);
           $6 = $1200;
           $1201 = HEAP8[$1199>>0]|0;
           $1202 = $1201&255;
           $1203 = $11;
           $1204 = $1202 << $1203;
           $1205 = $10;
           $1206 = (($1205) + ($1204))|0;
           $10 = $1206;
           $1207 = $11;
           $1208 = (($1207) + 8)|0;
           $11 = $1208;
          }
          $1209 = ((($16)) + 1|0);
          $1210 = HEAP8[$1209>>0]|0;
          $1211 = $1210&255;
          $1212 = $10;
          $1213 = $1212 >>> $1211;
          $10 = $1213;
          $1214 = ((($16)) + 1|0);
          $1215 = HEAP8[$1214>>0]|0;
          $1216 = $1215&255;
          $1217 = $11;
          $1218 = (($1217) - ($1216))|0;
          $11 = $1218;
          $1219 = $5;
          $1220 = ((($1219)) + 108|0);
          $1221 = HEAP32[$1220>>2]|0;
          $1222 = ($1221|0)==(0);
          if ($1222) {
           label = 200;
           break L172;
          }
          $1227 = $5;
          $1228 = ((($1227)) + 108|0);
          $1229 = HEAP32[$1228>>2]|0;
          $1230 = (($1229) - 1)|0;
          $1231 = $5;
          $1232 = ((($1231)) + 116|0);
          $1233 = (($1232) + ($1230<<1)|0);
          $1234 = HEAP16[$1233>>1]|0;
          $1235 = $1234&65535;
          $18 = $1235;
          $1236 = $10;
          $1237 = $1236 & 3;
          $1238 = (3 + ($1237))|0;
          $14 = $1238;
          $1239 = $10;
          $1240 = $1239 >>> 2;
          $10 = $1240;
          $1241 = $11;
          $1242 = (($1241) - 2)|0;
          $11 = $1242;
         } else {
          $1243 = ((($16)) + 2|0);
          $1244 = HEAP16[$1243>>1]|0;
          $1245 = $1244&65535;
          $1246 = ($1245|0)==(17);
          if ($1246) {
           while(1) {
            $1247 = $11;
            $1248 = ((($16)) + 1|0);
            $1249 = HEAP8[$1248>>0]|0;
            $1250 = $1249&255;
            $1251 = (($1250) + 3)|0;
            $1252 = ($1247>>>0)<($1251>>>0);
            if (!($1252)) {
             break;
            }
            $1253 = $8;
            $1254 = ($1253|0)==(0);
            if ($1254) {
             break L10;
            }
            $1255 = $8;
            $1256 = (($1255) + -1)|0;
            $8 = $1256;
            $1257 = $6;
            $1258 = ((($1257)) + 1|0);
            $6 = $1258;
            $1259 = HEAP8[$1257>>0]|0;
            $1260 = $1259&255;
            $1261 = $11;
            $1262 = $1260 << $1261;
            $1263 = $10;
            $1264 = (($1263) + ($1262))|0;
            $10 = $1264;
            $1265 = $11;
            $1266 = (($1265) + 8)|0;
            $11 = $1266;
           }
           $1267 = ((($16)) + 1|0);
           $1268 = HEAP8[$1267>>0]|0;
           $1269 = $1268&255;
           $1270 = $10;
           $1271 = $1270 >>> $1269;
           $10 = $1271;
           $1272 = ((($16)) + 1|0);
           $1273 = HEAP8[$1272>>0]|0;
           $1274 = $1273&255;
           $1275 = $11;
           $1276 = (($1275) - ($1274))|0;
           $11 = $1276;
           $18 = 0;
           $1277 = $10;
           $1278 = $1277 & 7;
           $1279 = (3 + ($1278))|0;
           $14 = $1279;
           $1280 = $10;
           $1281 = $1280 >>> 3;
           $10 = $1281;
           $1282 = $11;
           $1283 = (($1282) - 3)|0;
           $11 = $1283;
           break;
          } else {
           while(1) {
            $1284 = $11;
            $1285 = ((($16)) + 1|0);
            $1286 = HEAP8[$1285>>0]|0;
            $1287 = $1286&255;
            $1288 = (($1287) + 7)|0;
            $1289 = ($1284>>>0)<($1288>>>0);
            if (!($1289)) {
             break;
            }
            $1290 = $8;
            $1291 = ($1290|0)==(0);
            if ($1291) {
             break L10;
            }
            $1292 = $8;
            $1293 = (($1292) + -1)|0;
            $8 = $1293;
            $1294 = $6;
            $1295 = ((($1294)) + 1|0);
            $6 = $1295;
            $1296 = HEAP8[$1294>>0]|0;
            $1297 = $1296&255;
            $1298 = $11;
            $1299 = $1297 << $1298;
            $1300 = $10;
            $1301 = (($1300) + ($1299))|0;
            $10 = $1301;
            $1302 = $11;
            $1303 = (($1302) + 8)|0;
            $11 = $1303;
           }
           $1304 = ((($16)) + 1|0);
           $1305 = HEAP8[$1304>>0]|0;
           $1306 = $1305&255;
           $1307 = $10;
           $1308 = $1307 >>> $1306;
           $10 = $1308;
           $1309 = ((($16)) + 1|0);
           $1310 = HEAP8[$1309>>0]|0;
           $1311 = $1310&255;
           $1312 = $11;
           $1313 = (($1312) - ($1311))|0;
           $11 = $1313;
           $18 = 0;
           $1314 = $10;
           $1315 = $1314 & 127;
           $1316 = (11 + ($1315))|0;
           $14 = $1316;
           $1317 = $10;
           $1318 = $1317 >>> 7;
           $10 = $1318;
           $1319 = $11;
           $1320 = (($1319) - 7)|0;
           $11 = $1320;
           break;
          }
         }
        } while(0);
        $1321 = $5;
        $1322 = ((($1321)) + 108|0);
        $1323 = HEAP32[$1322>>2]|0;
        $1324 = $14;
        $1325 = (($1323) + ($1324))|0;
        $1326 = $5;
        $1327 = ((($1326)) + 100|0);
        $1328 = HEAP32[$1327>>2]|0;
        $1329 = $5;
        $1330 = ((($1329)) + 104|0);
        $1331 = HEAP32[$1330>>2]|0;
        $1332 = (($1328) + ($1331))|0;
        $1333 = ($1325>>>0)>($1332>>>0);
        if ($1333) {
         label = 212;
         break;
        }
        while(1) {
         $1338 = $14;
         $1339 = (($1338) + -1)|0;
         $14 = $1339;
         $1340 = ($1338|0)!=(0);
         if (!($1340)) {
          label = 189;
          continue L172;
         }
         $1341 = $18;
         $1342 = $1341&65535;
         $1343 = $5;
         $1344 = ((($1343)) + 108|0);
         $1345 = HEAP32[$1344>>2]|0;
         $1346 = (($1345) + 1)|0;
         HEAP32[$1344>>2] = $1346;
         $1347 = $5;
         $1348 = ((($1347)) + 116|0);
         $1349 = (($1348) + ($1345<<1)|0);
         HEAP16[$1349>>1] = $1342;
        }
       }
       if ((label|0) == 200) {
        label = 0;
        $1223 = $3;
        $1224 = ((($1223)) + 24|0);
        HEAP32[$1224>>2] = 13986;
        $1225 = $5;
        $1226 = ((($1225)) + 4|0);
        HEAP32[$1226>>2] = 16209;
       }
       else if ((label|0) == 212) {
        label = 0;
        $1334 = $3;
        $1335 = ((($1334)) + 24|0);
        HEAP32[$1335>>2] = 13986;
        $1336 = $5;
        $1337 = ((($1336)) + 4|0);
        HEAP32[$1337>>2] = 16209;
       }
       $1350 = $5;
       $1351 = ((($1350)) + 4|0);
       $1352 = HEAP32[$1351>>2]|0;
       $1353 = ($1352|0)==(16209);
       if ($1353) {
        continue L10;
       }
       $1354 = $5;
       $1355 = ((($1354)) + 116|0);
       $1356 = ((($1355)) + 512|0);
       $1357 = HEAP16[$1356>>1]|0;
       $1358 = $1357&65535;
       $1359 = ($1358|0)==(0);
       if ($1359) {
        $1360 = $3;
        $1361 = ((($1360)) + 24|0);
        HEAP32[$1361>>2] = 14012;
        $1362 = $5;
        $1363 = ((($1362)) + 4|0);
        HEAP32[$1363>>2] = 16209;
        continue L10;
       }
       $1364 = $5;
       $1365 = ((($1364)) + 1332|0);
       $1366 = $5;
       $1367 = ((($1366)) + 112|0);
       HEAP32[$1367>>2] = $1365;
       $1368 = $5;
       $1369 = ((($1368)) + 112|0);
       $1370 = HEAP32[$1369>>2]|0;
       $1371 = $5;
       $1372 = ((($1371)) + 80|0);
       HEAP32[$1372>>2] = $1370;
       $1373 = $5;
       $1374 = ((($1373)) + 88|0);
       HEAP32[$1374>>2] = 9;
       $1375 = $5;
       $1376 = ((($1375)) + 116|0);
       $1377 = $5;
       $1378 = ((($1377)) + 100|0);
       $1379 = HEAP32[$1378>>2]|0;
       $1380 = $5;
       $1381 = ((($1380)) + 112|0);
       $1382 = $5;
       $1383 = ((($1382)) + 88|0);
       $1384 = $5;
       $1385 = ((($1384)) + 756|0);
       $1386 = (_inflate_table(1,$1376,$1379,$1381,$1383,$1385)|0);
       $19 = $1386;
       $1387 = $19;
       $1388 = ($1387|0)!=(0);
       if ($1388) {
        $1389 = $3;
        $1390 = ((($1389)) + 24|0);
        HEAP32[$1390>>2] = 14049;
        $1391 = $5;
        $1392 = ((($1391)) + 4|0);
        HEAP32[$1392>>2] = 16209;
        continue L10;
       }
       $1393 = $5;
       $1394 = ((($1393)) + 112|0);
       $1395 = HEAP32[$1394>>2]|0;
       $1396 = $5;
       $1397 = ((($1396)) + 84|0);
       HEAP32[$1397>>2] = $1395;
       $1398 = $5;
       $1399 = ((($1398)) + 92|0);
       HEAP32[$1399>>2] = 6;
       $1400 = $5;
       $1401 = ((($1400)) + 116|0);
       $1402 = $5;
       $1403 = ((($1402)) + 100|0);
       $1404 = HEAP32[$1403>>2]|0;
       $1405 = (($1401) + ($1404<<1)|0);
       $1406 = $5;
       $1407 = ((($1406)) + 104|0);
       $1408 = HEAP32[$1407>>2]|0;
       $1409 = $5;
       $1410 = ((($1409)) + 112|0);
       $1411 = $5;
       $1412 = ((($1411)) + 92|0);
       $1413 = $5;
       $1414 = ((($1413)) + 756|0);
       $1415 = (_inflate_table(2,$1405,$1408,$1410,$1412,$1414)|0);
       $19 = $1415;
       $1416 = $19;
       $1417 = ($1416|0)!=(0);
       if ($1417) {
        $1418 = $3;
        $1419 = ((($1418)) + 24|0);
        HEAP32[$1419>>2] = 14077;
        $1420 = $5;
        $1421 = ((($1420)) + 4|0);
        HEAP32[$1421>>2] = 16209;
        continue L10;
       } else {
        $1422 = $5;
        $1423 = ((($1422)) + 4|0);
        HEAP32[$1423>>2] = 16199;
        $1424 = $4;
        $1425 = ($1424|0)==(6);
        if ($1425) {
         break L10;
        } else {
         label = 223;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 63) {
      label = 0;
      $375 = $5;
      $376 = ((($375)) + 20|0);
      $377 = HEAP32[$376>>2]|0;
      $378 = $377 & 1024;
      $379 = ($378|0)!=(0);
      if ($379) {
       while(1) {
        $380 = $11;
        $381 = ($380>>>0)<(16);
        if (!($381)) {
         break;
        }
        $382 = $8;
        $383 = ($382|0)==(0);
        if ($383) {
         break L10;
        }
        $384 = $8;
        $385 = (($384) + -1)|0;
        $8 = $385;
        $386 = $6;
        $387 = ((($386)) + 1|0);
        $6 = $387;
        $388 = HEAP8[$386>>0]|0;
        $389 = $388&255;
        $390 = $11;
        $391 = $389 << $390;
        $392 = $10;
        $393 = (($392) + ($391))|0;
        $10 = $393;
        $394 = $11;
        $395 = (($394) + 8)|0;
        $11 = $395;
       }
       $396 = $10;
       $397 = $5;
       $398 = ((($397)) + 68|0);
       HEAP32[$398>>2] = $396;
       $399 = $5;
       $400 = ((($399)) + 36|0);
       $401 = HEAP32[$400>>2]|0;
       $402 = ($401|0)!=(0|0);
       if ($402) {
        $403 = $10;
        $404 = $5;
        $405 = ((($404)) + 36|0);
        $406 = HEAP32[$405>>2]|0;
        $407 = ((($406)) + 20|0);
        HEAP32[$407>>2] = $403;
       }
       $408 = $5;
       $409 = ((($408)) + 20|0);
       $410 = HEAP32[$409>>2]|0;
       $411 = $410 & 512;
       $412 = ($411|0)!=(0);
       if ($412) {
        $413 = $5;
        $414 = ((($413)) + 12|0);
        $415 = HEAP32[$414>>2]|0;
        $416 = $415 & 4;
        $417 = ($416|0)!=(0);
        if ($417) {
         $418 = $10;
         $419 = $418&255;
         HEAP8[$20>>0] = $419;
         $420 = $10;
         $421 = $420 >>> 8;
         $422 = $421&255;
         $423 = ((($20)) + 1|0);
         HEAP8[$423>>0] = $422;
         $424 = $5;
         $425 = ((($424)) + 28|0);
         $426 = HEAP32[$425>>2]|0;
         $427 = (_crc32($426,$20,2)|0);
         $428 = $5;
         $429 = ((($428)) + 28|0);
         HEAP32[$429>>2] = $427;
        }
       }
       $10 = 0;
       $11 = 0;
      } else {
       $430 = $5;
       $431 = ((($430)) + 36|0);
       $432 = HEAP32[$431>>2]|0;
       $433 = ($432|0)!=(0|0);
       if ($433) {
        $434 = $5;
        $435 = ((($434)) + 36|0);
        $436 = HEAP32[$435>>2]|0;
        $437 = ((($436)) + 16|0);
        HEAP32[$437>>2] = 0;
       }
      }
      $438 = $5;
      $439 = ((($438)) + 4|0);
      HEAP32[$439>>2] = 16185;
      label = 76;
     }
     else if ((label|0) == 143) {
      label = 0;
      $837 = $5;
      $838 = ((($837)) + 8|0);
      $839 = HEAP32[$838>>2]|0;
      $840 = ($839|0)!=(0);
      if ($840) {
       $841 = $11;
       $842 = $841 & 7;
       $843 = $10;
       $844 = $843 >>> $842;
       $10 = $844;
       $845 = $11;
       $846 = $845 & 7;
       $847 = $11;
       $848 = (($847) - ($846))|0;
       $11 = $848;
       $849 = $5;
       $850 = ((($849)) + 4|0);
       HEAP32[$850>>2] = 16206;
       continue;
      }
      while(1) {
       $851 = $11;
       $852 = ($851>>>0)<(3);
       if (!($852)) {
        break;
       }
       $853 = $8;
       $854 = ($853|0)==(0);
       if ($854) {
        break L10;
       }
       $855 = $8;
       $856 = (($855) + -1)|0;
       $8 = $856;
       $857 = $6;
       $858 = ((($857)) + 1|0);
       $6 = $858;
       $859 = HEAP8[$857>>0]|0;
       $860 = $859&255;
       $861 = $11;
       $862 = $860 << $861;
       $863 = $10;
       $864 = (($863) + ($862))|0;
       $10 = $864;
       $865 = $11;
       $866 = (($865) + 8)|0;
       $11 = $866;
      }
      $867 = $10;
      $868 = $867 & 1;
      $869 = $5;
      $870 = ((($869)) + 8|0);
      HEAP32[$870>>2] = $868;
      $871 = $10;
      $872 = $871 >>> 1;
      $10 = $872;
      $873 = $11;
      $874 = (($873) - 1)|0;
      $11 = $874;
      $875 = $10;
      $876 = $875 & 3;
      switch ($876|0) {
      case 0:  {
       $877 = $5;
       $878 = ((($877)) + 4|0);
       HEAP32[$878>>2] = 16193;
       break;
      }
      case 1:  {
       $879 = $5;
       _fixedtables_21($879);
       $880 = $5;
       $881 = ((($880)) + 4|0);
       HEAP32[$881>>2] = 16199;
       $882 = $4;
       $883 = ($882|0)==(6);
       if ($883) {
        label = 151;
        break L10;
       }
       break;
      }
      case 2:  {
       $888 = $5;
       $889 = ((($888)) + 4|0);
       HEAP32[$889>>2] = 16196;
       break;
      }
      case 3:  {
       $890 = $3;
       $891 = ((($890)) + 24|0);
       HEAP32[$891>>2] = 13877;
       $892 = $5;
       $893 = ((($892)) + 4|0);
       HEAP32[$893>>2] = 16209;
       break;
      }
      default: {
       label = 154;
       break L10;
      }
      }
      $894 = $10;
      $895 = $894 >>> 2;
      $10 = $895;
      $896 = $11;
      $897 = (($896) - 2)|0;
      $11 = $897;
      continue;
     }
     else if ((label|0) == 223) {
      label = 0;
      $1426 = $5;
      $1427 = ((($1426)) + 4|0);
      HEAP32[$1427>>2] = 16200;
      label = 224;
     }
     do {
      if ((label|0) == 76) {
       label = 0;
       $440 = $5;
       $441 = ((($440)) + 20|0);
       $442 = HEAP32[$441>>2]|0;
       $443 = $442 & 1024;
       $444 = ($443|0)!=(0);
       if ($444) {
        $445 = $5;
        $446 = ((($445)) + 68|0);
        $447 = HEAP32[$446>>2]|0;
        $14 = $447;
        $448 = $14;
        $449 = $8;
        $450 = ($448>>>0)>($449>>>0);
        if ($450) {
         $451 = $8;
         $14 = $451;
        }
        $452 = $14;
        $453 = ($452|0)!=(0);
        if ($453) {
         $454 = $5;
         $455 = ((($454)) + 36|0);
         $456 = HEAP32[$455>>2]|0;
         $457 = ($456|0)!=(0|0);
         if ($457) {
          $458 = $5;
          $459 = ((($458)) + 36|0);
          $460 = HEAP32[$459>>2]|0;
          $461 = ((($460)) + 16|0);
          $462 = HEAP32[$461>>2]|0;
          $463 = ($462|0)!=(0|0);
          if ($463) {
           $464 = $5;
           $465 = ((($464)) + 36|0);
           $466 = HEAP32[$465>>2]|0;
           $467 = ((($466)) + 20|0);
           $468 = HEAP32[$467>>2]|0;
           $469 = $5;
           $470 = ((($469)) + 68|0);
           $471 = HEAP32[$470>>2]|0;
           $472 = (($468) - ($471))|0;
           $18 = $472;
           $473 = $5;
           $474 = ((($473)) + 36|0);
           $475 = HEAP32[$474>>2]|0;
           $476 = ((($475)) + 16|0);
           $477 = HEAP32[$476>>2]|0;
           $478 = $18;
           $479 = (($477) + ($478)|0);
           $480 = $6;
           $481 = $18;
           $482 = $14;
           $483 = (($481) + ($482))|0;
           $484 = $5;
           $485 = ((($484)) + 36|0);
           $486 = HEAP32[$485>>2]|0;
           $487 = ((($486)) + 24|0);
           $488 = HEAP32[$487>>2]|0;
           $489 = ($483>>>0)>($488>>>0);
           if ($489) {
            $490 = $5;
            $491 = ((($490)) + 36|0);
            $492 = HEAP32[$491>>2]|0;
            $493 = ((($492)) + 24|0);
            $494 = HEAP32[$493>>2]|0;
            $495 = $18;
            $496 = (($494) - ($495))|0;
            $498 = $496;
           } else {
            $497 = $14;
            $498 = $497;
           }
           _memcpy(($479|0),($480|0),($498|0))|0;
          }
         }
         $499 = $5;
         $500 = ((($499)) + 20|0);
         $501 = HEAP32[$500>>2]|0;
         $502 = $501 & 512;
         $503 = ($502|0)!=(0);
         if ($503) {
          $504 = $5;
          $505 = ((($504)) + 12|0);
          $506 = HEAP32[$505>>2]|0;
          $507 = $506 & 4;
          $508 = ($507|0)!=(0);
          if ($508) {
           $509 = $5;
           $510 = ((($509)) + 28|0);
           $511 = HEAP32[$510>>2]|0;
           $512 = $6;
           $513 = $14;
           $514 = (_crc32($511,$512,$513)|0);
           $515 = $5;
           $516 = ((($515)) + 28|0);
           HEAP32[$516>>2] = $514;
          }
         }
         $517 = $14;
         $518 = $8;
         $519 = (($518) - ($517))|0;
         $8 = $519;
         $520 = $14;
         $521 = $6;
         $522 = (($521) + ($520)|0);
         $6 = $522;
         $523 = $14;
         $524 = $5;
         $525 = ((($524)) + 68|0);
         $526 = HEAP32[$525>>2]|0;
         $527 = (($526) - ($523))|0;
         HEAP32[$525>>2] = $527;
        }
        $528 = $5;
        $529 = ((($528)) + 68|0);
        $530 = HEAP32[$529>>2]|0;
        $531 = ($530|0)!=(0);
        if ($531) {
         break L10;
        }
       }
       $532 = $5;
       $533 = ((($532)) + 68|0);
       HEAP32[$533>>2] = 0;
       $534 = $5;
       $535 = ((($534)) + 4|0);
       HEAP32[$535>>2] = 16186;
       label = 92;
      }
      else if ((label|0) == 224) {
       label = 0;
       $1428 = $8;
       $1429 = ($1428>>>0)>=(6);
       $1430 = $9;
       $1431 = ($1430>>>0)>=(258);
       $or$cond6 = $1429 & $1431;
       if ($or$cond6) {
        $1432 = $7;
        $1433 = $3;
        $1434 = ((($1433)) + 12|0);
        HEAP32[$1434>>2] = $1432;
        $1435 = $9;
        $1436 = $3;
        $1437 = ((($1436)) + 16|0);
        HEAP32[$1437>>2] = $1435;
        $1438 = $6;
        $1439 = $3;
        HEAP32[$1439>>2] = $1438;
        $1440 = $8;
        $1441 = $3;
        $1442 = ((($1441)) + 4|0);
        HEAP32[$1442>>2] = $1440;
        $1443 = $10;
        $1444 = $5;
        $1445 = ((($1444)) + 60|0);
        HEAP32[$1445>>2] = $1443;
        $1446 = $11;
        $1447 = $5;
        $1448 = ((($1447)) + 64|0);
        HEAP32[$1448>>2] = $1446;
        $1449 = $3;
        $1450 = $13;
        _inflate_fast($1449,$1450);
        $1451 = $3;
        $1452 = ((($1451)) + 12|0);
        $1453 = HEAP32[$1452>>2]|0;
        $7 = $1453;
        $1454 = $3;
        $1455 = ((($1454)) + 16|0);
        $1456 = HEAP32[$1455>>2]|0;
        $9 = $1456;
        $1457 = $3;
        $1458 = HEAP32[$1457>>2]|0;
        $6 = $1458;
        $1459 = $3;
        $1460 = ((($1459)) + 4|0);
        $1461 = HEAP32[$1460>>2]|0;
        $8 = $1461;
        $1462 = $5;
        $1463 = ((($1462)) + 60|0);
        $1464 = HEAP32[$1463>>2]|0;
        $10 = $1464;
        $1465 = $5;
        $1466 = ((($1465)) + 64|0);
        $1467 = HEAP32[$1466>>2]|0;
        $11 = $1467;
        $1468 = $5;
        $1469 = ((($1468)) + 4|0);
        $1470 = HEAP32[$1469>>2]|0;
        $1471 = ($1470|0)==(16191);
        if (!($1471)) {
         continue L10;
        }
        $1472 = $5;
        $1473 = ((($1472)) + 7112|0);
        HEAP32[$1473>>2] = -1;
        continue L10;
       }
       $1474 = $5;
       $1475 = ((($1474)) + 7112|0);
       HEAP32[$1475>>2] = 0;
       while(1) {
        $1476 = $10;
        $1477 = $5;
        $1478 = ((($1477)) + 88|0);
        $1479 = HEAP32[$1478>>2]|0;
        $1480 = 1 << $1479;
        $1481 = (($1480) - 1)|0;
        $1482 = $1476 & $1481;
        $1483 = $5;
        $1484 = ((($1483)) + 80|0);
        $1485 = HEAP32[$1484>>2]|0;
        $1486 = (($1485) + ($1482<<2)|0);
        ;HEAP16[$16>>1]=HEAP16[$1486>>1]|0;HEAP16[$16+2>>1]=HEAP16[$1486+2>>1]|0;
        $1487 = ((($16)) + 1|0);
        $1488 = HEAP8[$1487>>0]|0;
        $1489 = $1488&255;
        $1490 = $11;
        $1491 = ($1489>>>0)<=($1490>>>0);
        if ($1491) {
         break;
        }
        $1492 = $8;
        $1493 = ($1492|0)==(0);
        if ($1493) {
         break L10;
        }
        $1494 = $8;
        $1495 = (($1494) + -1)|0;
        $8 = $1495;
        $1496 = $6;
        $1497 = ((($1496)) + 1|0);
        $6 = $1497;
        $1498 = HEAP8[$1496>>0]|0;
        $1499 = $1498&255;
        $1500 = $11;
        $1501 = $1499 << $1500;
        $1502 = $10;
        $1503 = (($1502) + ($1501))|0;
        $10 = $1503;
        $1504 = $11;
        $1505 = (($1504) + 8)|0;
        $11 = $1505;
       }
       $1506 = HEAP8[$16>>0]|0;
       $1507 = $1506&255;
       $1508 = ($1507|0)!=(0);
       if ($1508) {
        $1509 = HEAP8[$16>>0]|0;
        $1510 = $1509&255;
        $1511 = $1510 & 240;
        $1512 = ($1511|0)==(0);
        if ($1512) {
         ;HEAP16[$17>>1]=HEAP16[$16>>1]|0;HEAP16[$17+2>>1]=HEAP16[$16+2>>1]|0;
         while(1) {
          $1513 = ((($17)) + 2|0);
          $1514 = HEAP16[$1513>>1]|0;
          $1515 = $1514&65535;
          $1516 = $10;
          $1517 = ((($17)) + 1|0);
          $1518 = HEAP8[$1517>>0]|0;
          $1519 = $1518&255;
          $1520 = HEAP8[$17>>0]|0;
          $1521 = $1520&255;
          $1522 = (($1519) + ($1521))|0;
          $1523 = 1 << $1522;
          $1524 = (($1523) - 1)|0;
          $1525 = $1516 & $1524;
          $1526 = ((($17)) + 1|0);
          $1527 = HEAP8[$1526>>0]|0;
          $1528 = $1527&255;
          $1529 = $1525 >>> $1528;
          $1530 = (($1515) + ($1529))|0;
          $1531 = $5;
          $1532 = ((($1531)) + 80|0);
          $1533 = HEAP32[$1532>>2]|0;
          $1534 = (($1533) + ($1530<<2)|0);
          ;HEAP16[$16>>1]=HEAP16[$1534>>1]|0;HEAP16[$16+2>>1]=HEAP16[$1534+2>>1]|0;
          $1535 = ((($17)) + 1|0);
          $1536 = HEAP8[$1535>>0]|0;
          $1537 = $1536&255;
          $1538 = ((($16)) + 1|0);
          $1539 = HEAP8[$1538>>0]|0;
          $1540 = $1539&255;
          $1541 = (($1537) + ($1540))|0;
          $1542 = $11;
          $1543 = ($1541>>>0)<=($1542>>>0);
          if ($1543) {
           break;
          }
          $1544 = $8;
          $1545 = ($1544|0)==(0);
          if ($1545) {
           break L10;
          }
          $1546 = $8;
          $1547 = (($1546) + -1)|0;
          $8 = $1547;
          $1548 = $6;
          $1549 = ((($1548)) + 1|0);
          $6 = $1549;
          $1550 = HEAP8[$1548>>0]|0;
          $1551 = $1550&255;
          $1552 = $11;
          $1553 = $1551 << $1552;
          $1554 = $10;
          $1555 = (($1554) + ($1553))|0;
          $10 = $1555;
          $1556 = $11;
          $1557 = (($1556) + 8)|0;
          $11 = $1557;
         }
         $1558 = ((($17)) + 1|0);
         $1559 = HEAP8[$1558>>0]|0;
         $1560 = $1559&255;
         $1561 = $10;
         $1562 = $1561 >>> $1560;
         $10 = $1562;
         $1563 = ((($17)) + 1|0);
         $1564 = HEAP8[$1563>>0]|0;
         $1565 = $1564&255;
         $1566 = $11;
         $1567 = (($1566) - ($1565))|0;
         $11 = $1567;
         $1568 = ((($17)) + 1|0);
         $1569 = HEAP8[$1568>>0]|0;
         $1570 = $1569&255;
         $1571 = $5;
         $1572 = ((($1571)) + 7112|0);
         $1573 = HEAP32[$1572>>2]|0;
         $1574 = (($1573) + ($1570))|0;
         HEAP32[$1572>>2] = $1574;
        }
       }
       $1575 = ((($16)) + 1|0);
       $1576 = HEAP8[$1575>>0]|0;
       $1577 = $1576&255;
       $1578 = $10;
       $1579 = $1578 >>> $1577;
       $10 = $1579;
       $1580 = ((($16)) + 1|0);
       $1581 = HEAP8[$1580>>0]|0;
       $1582 = $1581&255;
       $1583 = $11;
       $1584 = (($1583) - ($1582))|0;
       $11 = $1584;
       $1585 = ((($16)) + 1|0);
       $1586 = HEAP8[$1585>>0]|0;
       $1587 = $1586&255;
       $1588 = $5;
       $1589 = ((($1588)) + 7112|0);
       $1590 = HEAP32[$1589>>2]|0;
       $1591 = (($1590) + ($1587))|0;
       HEAP32[$1589>>2] = $1591;
       $1592 = ((($16)) + 2|0);
       $1593 = HEAP16[$1592>>1]|0;
       $1594 = $1593&65535;
       $1595 = $5;
       $1596 = ((($1595)) + 68|0);
       HEAP32[$1596>>2] = $1594;
       $1597 = HEAP8[$16>>0]|0;
       $1598 = $1597&255;
       $1599 = ($1598|0)==(0);
       if ($1599) {
        $1600 = $5;
        $1601 = ((($1600)) + 4|0);
        HEAP32[$1601>>2] = 16205;
        continue L10;
       }
       $1602 = HEAP8[$16>>0]|0;
       $1603 = $1602&255;
       $1604 = $1603 & 32;
       $1605 = ($1604|0)!=(0);
       if ($1605) {
        $1606 = $5;
        $1607 = ((($1606)) + 7112|0);
        HEAP32[$1607>>2] = -1;
        $1608 = $5;
        $1609 = ((($1608)) + 4|0);
        HEAP32[$1609>>2] = 16191;
        continue L10;
       }
       $1610 = HEAP8[$16>>0]|0;
       $1611 = $1610&255;
       $1612 = $1611 & 64;
       $1613 = ($1612|0)!=(0);
       if ($1613) {
        $1614 = $3;
        $1615 = ((($1614)) + 24|0);
        HEAP32[$1615>>2] = 14099;
        $1616 = $5;
        $1617 = ((($1616)) + 4|0);
        HEAP32[$1617>>2] = 16209;
        continue L10;
       } else {
        $1618 = HEAP8[$16>>0]|0;
        $1619 = $1618&255;
        $1620 = $1619 & 15;
        $1621 = $5;
        $1622 = ((($1621)) + 76|0);
        HEAP32[$1622>>2] = $1620;
        $1623 = $5;
        $1624 = ((($1623)) + 4|0);
        HEAP32[$1624>>2] = 16201;
        label = 245;
        break;
       }
      }
     } while(0);
     if ((label|0) == 92) {
      label = 0;
      $536 = $5;
      $537 = ((($536)) + 20|0);
      $538 = HEAP32[$537>>2]|0;
      $539 = $538 & 2048;
      $540 = ($539|0)!=(0);
      if ($540) {
       $541 = $8;
       $542 = ($541|0)==(0);
       if ($542) {
        break;
       }
       $14 = 0;
       while(1) {
        $543 = $14;
        $544 = (($543) + 1)|0;
        $14 = $544;
        $545 = $6;
        $546 = (($545) + ($543)|0);
        $547 = HEAP8[$546>>0]|0;
        $548 = $547&255;
        $18 = $548;
        $549 = $5;
        $550 = ((($549)) + 36|0);
        $551 = HEAP32[$550>>2]|0;
        $552 = ($551|0)!=(0|0);
        if ($552) {
         $553 = $5;
         $554 = ((($553)) + 36|0);
         $555 = HEAP32[$554>>2]|0;
         $556 = ((($555)) + 28|0);
         $557 = HEAP32[$556>>2]|0;
         $558 = ($557|0)!=(0|0);
         if ($558) {
          $559 = $5;
          $560 = ((($559)) + 68|0);
          $561 = HEAP32[$560>>2]|0;
          $562 = $5;
          $563 = ((($562)) + 36|0);
          $564 = HEAP32[$563>>2]|0;
          $565 = ((($564)) + 32|0);
          $566 = HEAP32[$565>>2]|0;
          $567 = ($561>>>0)<($566>>>0);
          if ($567) {
           $568 = $18;
           $569 = $568&255;
           $570 = $5;
           $571 = ((($570)) + 68|0);
           $572 = HEAP32[$571>>2]|0;
           $573 = (($572) + 1)|0;
           HEAP32[$571>>2] = $573;
           $574 = $5;
           $575 = ((($574)) + 36|0);
           $576 = HEAP32[$575>>2]|0;
           $577 = ((($576)) + 28|0);
           $578 = HEAP32[$577>>2]|0;
           $579 = (($578) + ($572)|0);
           HEAP8[$579>>0] = $569;
          }
         }
        }
        $580 = $18;
        $581 = ($580|0)!=(0);
        if (!($581)) {
         break;
        }
        $582 = $14;
        $583 = $8;
        $584 = ($582>>>0)<($583>>>0);
        if (!($584)) {
         break;
        }
       }
       $585 = $5;
       $586 = ((($585)) + 20|0);
       $587 = HEAP32[$586>>2]|0;
       $588 = $587 & 512;
       $589 = ($588|0)!=(0);
       if ($589) {
        $590 = $5;
        $591 = ((($590)) + 12|0);
        $592 = HEAP32[$591>>2]|0;
        $593 = $592 & 4;
        $594 = ($593|0)!=(0);
        if ($594) {
         $595 = $5;
         $596 = ((($595)) + 28|0);
         $597 = HEAP32[$596>>2]|0;
         $598 = $6;
         $599 = $14;
         $600 = (_crc32($597,$598,$599)|0);
         $601 = $5;
         $602 = ((($601)) + 28|0);
         HEAP32[$602>>2] = $600;
        }
       }
       $603 = $14;
       $604 = $8;
       $605 = (($604) - ($603))|0;
       $8 = $605;
       $606 = $14;
       $607 = $6;
       $608 = (($607) + ($606)|0);
       $6 = $608;
       $609 = $18;
       $610 = ($609|0)!=(0);
       if ($610) {
        break;
       }
      } else {
       $611 = $5;
       $612 = ((($611)) + 36|0);
       $613 = HEAP32[$612>>2]|0;
       $614 = ($613|0)!=(0|0);
       if ($614) {
        $615 = $5;
        $616 = ((($615)) + 36|0);
        $617 = HEAP32[$616>>2]|0;
        $618 = ((($617)) + 28|0);
        HEAP32[$618>>2] = 0;
       }
      }
      $619 = $5;
      $620 = ((($619)) + 68|0);
      HEAP32[$620>>2] = 0;
      $621 = $5;
      $622 = ((($621)) + 4|0);
      HEAP32[$622>>2] = 16187;
      label = 108;
     }
     else if ((label|0) == 245) {
      label = 0;
      $1625 = $5;
      $1626 = ((($1625)) + 76|0);
      $1627 = HEAP32[$1626>>2]|0;
      $1628 = ($1627|0)!=(0);
      if ($1628) {
       while(1) {
        $1629 = $11;
        $1630 = $5;
        $1631 = ((($1630)) + 76|0);
        $1632 = HEAP32[$1631>>2]|0;
        $1633 = ($1629>>>0)<($1632>>>0);
        if (!($1633)) {
         break;
        }
        $1634 = $8;
        $1635 = ($1634|0)==(0);
        if ($1635) {
         break L10;
        }
        $1636 = $8;
        $1637 = (($1636) + -1)|0;
        $8 = $1637;
        $1638 = $6;
        $1639 = ((($1638)) + 1|0);
        $6 = $1639;
        $1640 = HEAP8[$1638>>0]|0;
        $1641 = $1640&255;
        $1642 = $11;
        $1643 = $1641 << $1642;
        $1644 = $10;
        $1645 = (($1644) + ($1643))|0;
        $10 = $1645;
        $1646 = $11;
        $1647 = (($1646) + 8)|0;
        $11 = $1647;
       }
       $1648 = $10;
       $1649 = $5;
       $1650 = ((($1649)) + 76|0);
       $1651 = HEAP32[$1650>>2]|0;
       $1652 = 1 << $1651;
       $1653 = (($1652) - 1)|0;
       $1654 = $1648 & $1653;
       $1655 = $5;
       $1656 = ((($1655)) + 68|0);
       $1657 = HEAP32[$1656>>2]|0;
       $1658 = (($1657) + ($1654))|0;
       HEAP32[$1656>>2] = $1658;
       $1659 = $5;
       $1660 = ((($1659)) + 76|0);
       $1661 = HEAP32[$1660>>2]|0;
       $1662 = $10;
       $1663 = $1662 >>> $1661;
       $10 = $1663;
       $1664 = $5;
       $1665 = ((($1664)) + 76|0);
       $1666 = HEAP32[$1665>>2]|0;
       $1667 = $11;
       $1668 = (($1667) - ($1666))|0;
       $11 = $1668;
       $1669 = $5;
       $1670 = ((($1669)) + 76|0);
       $1671 = HEAP32[$1670>>2]|0;
       $1672 = $5;
       $1673 = ((($1672)) + 7112|0);
       $1674 = HEAP32[$1673>>2]|0;
       $1675 = (($1674) + ($1671))|0;
       HEAP32[$1673>>2] = $1675;
      }
      $1676 = $5;
      $1677 = ((($1676)) + 68|0);
      $1678 = HEAP32[$1677>>2]|0;
      $1679 = $5;
      $1680 = ((($1679)) + 7116|0);
      HEAP32[$1680>>2] = $1678;
      $1681 = $5;
      $1682 = ((($1681)) + 4|0);
      HEAP32[$1682>>2] = 16202;
      label = 251;
     }
     do {
      if ((label|0) == 108) {
       label = 0;
       $623 = $5;
       $624 = ((($623)) + 20|0);
       $625 = HEAP32[$624>>2]|0;
       $626 = $625 & 4096;
       $627 = ($626|0)!=(0);
       if ($627) {
        $628 = $8;
        $629 = ($628|0)==(0);
        if ($629) {
         break L10;
        }
        $14 = 0;
        while(1) {
         $630 = $14;
         $631 = (($630) + 1)|0;
         $14 = $631;
         $632 = $6;
         $633 = (($632) + ($630)|0);
         $634 = HEAP8[$633>>0]|0;
         $635 = $634&255;
         $18 = $635;
         $636 = $5;
         $637 = ((($636)) + 36|0);
         $638 = HEAP32[$637>>2]|0;
         $639 = ($638|0)!=(0|0);
         if ($639) {
          $640 = $5;
          $641 = ((($640)) + 36|0);
          $642 = HEAP32[$641>>2]|0;
          $643 = ((($642)) + 36|0);
          $644 = HEAP32[$643>>2]|0;
          $645 = ($644|0)!=(0|0);
          if ($645) {
           $646 = $5;
           $647 = ((($646)) + 68|0);
           $648 = HEAP32[$647>>2]|0;
           $649 = $5;
           $650 = ((($649)) + 36|0);
           $651 = HEAP32[$650>>2]|0;
           $652 = ((($651)) + 40|0);
           $653 = HEAP32[$652>>2]|0;
           $654 = ($648>>>0)<($653>>>0);
           if ($654) {
            $655 = $18;
            $656 = $655&255;
            $657 = $5;
            $658 = ((($657)) + 68|0);
            $659 = HEAP32[$658>>2]|0;
            $660 = (($659) + 1)|0;
            HEAP32[$658>>2] = $660;
            $661 = $5;
            $662 = ((($661)) + 36|0);
            $663 = HEAP32[$662>>2]|0;
            $664 = ((($663)) + 36|0);
            $665 = HEAP32[$664>>2]|0;
            $666 = (($665) + ($659)|0);
            HEAP8[$666>>0] = $656;
           }
          }
         }
         $667 = $18;
         $668 = ($667|0)!=(0);
         if (!($668)) {
          break;
         }
         $669 = $14;
         $670 = $8;
         $671 = ($669>>>0)<($670>>>0);
         if (!($671)) {
          break;
         }
        }
        $672 = $5;
        $673 = ((($672)) + 20|0);
        $674 = HEAP32[$673>>2]|0;
        $675 = $674 & 512;
        $676 = ($675|0)!=(0);
        if ($676) {
         $677 = $5;
         $678 = ((($677)) + 12|0);
         $679 = HEAP32[$678>>2]|0;
         $680 = $679 & 4;
         $681 = ($680|0)!=(0);
         if ($681) {
          $682 = $5;
          $683 = ((($682)) + 28|0);
          $684 = HEAP32[$683>>2]|0;
          $685 = $6;
          $686 = $14;
          $687 = (_crc32($684,$685,$686)|0);
          $688 = $5;
          $689 = ((($688)) + 28|0);
          HEAP32[$689>>2] = $687;
         }
        }
        $690 = $14;
        $691 = $8;
        $692 = (($691) - ($690))|0;
        $8 = $692;
        $693 = $14;
        $694 = $6;
        $695 = (($694) + ($693)|0);
        $6 = $695;
        $696 = $18;
        $697 = ($696|0)!=(0);
        if ($697) {
         break L10;
        }
       } else {
        $698 = $5;
        $699 = ((($698)) + 36|0);
        $700 = HEAP32[$699>>2]|0;
        $701 = ($700|0)!=(0|0);
        if ($701) {
         $702 = $5;
         $703 = ((($702)) + 36|0);
         $704 = HEAP32[$703>>2]|0;
         $705 = ((($704)) + 36|0);
         HEAP32[$705>>2] = 0;
        }
       }
       $706 = $5;
       $707 = ((($706)) + 4|0);
       HEAP32[$707>>2] = 16188;
       label = 124;
      }
      else if ((label|0) == 251) {
       while(1) {
        label = 0;
        $1683 = $10;
        $1684 = $5;
        $1685 = ((($1684)) + 92|0);
        $1686 = HEAP32[$1685>>2]|0;
        $1687 = 1 << $1686;
        $1688 = (($1687) - 1)|0;
        $1689 = $1683 & $1688;
        $1690 = $5;
        $1691 = ((($1690)) + 84|0);
        $1692 = HEAP32[$1691>>2]|0;
        $1693 = (($1692) + ($1689<<2)|0);
        ;HEAP16[$16>>1]=HEAP16[$1693>>1]|0;HEAP16[$16+2>>1]=HEAP16[$1693+2>>1]|0;
        $1694 = ((($16)) + 1|0);
        $1695 = HEAP8[$1694>>0]|0;
        $1696 = $1695&255;
        $1697 = $11;
        $1698 = ($1696>>>0)<=($1697>>>0);
        if ($1698) {
         break;
        }
        $1699 = $8;
        $1700 = ($1699|0)==(0);
        if ($1700) {
         break L10;
        }
        $1701 = $8;
        $1702 = (($1701) + -1)|0;
        $8 = $1702;
        $1703 = $6;
        $1704 = ((($1703)) + 1|0);
        $6 = $1704;
        $1705 = HEAP8[$1703>>0]|0;
        $1706 = $1705&255;
        $1707 = $11;
        $1708 = $1706 << $1707;
        $1709 = $10;
        $1710 = (($1709) + ($1708))|0;
        $10 = $1710;
        $1711 = $11;
        $1712 = (($1711) + 8)|0;
        $11 = $1712;
        label = 251;
       }
       $1713 = HEAP8[$16>>0]|0;
       $1714 = $1713&255;
       $1715 = $1714 & 240;
       $1716 = ($1715|0)==(0);
       if ($1716) {
        ;HEAP16[$17>>1]=HEAP16[$16>>1]|0;HEAP16[$17+2>>1]=HEAP16[$16+2>>1]|0;
        while(1) {
         $1717 = ((($17)) + 2|0);
         $1718 = HEAP16[$1717>>1]|0;
         $1719 = $1718&65535;
         $1720 = $10;
         $1721 = ((($17)) + 1|0);
         $1722 = HEAP8[$1721>>0]|0;
         $1723 = $1722&255;
         $1724 = HEAP8[$17>>0]|0;
         $1725 = $1724&255;
         $1726 = (($1723) + ($1725))|0;
         $1727 = 1 << $1726;
         $1728 = (($1727) - 1)|0;
         $1729 = $1720 & $1728;
         $1730 = ((($17)) + 1|0);
         $1731 = HEAP8[$1730>>0]|0;
         $1732 = $1731&255;
         $1733 = $1729 >>> $1732;
         $1734 = (($1719) + ($1733))|0;
         $1735 = $5;
         $1736 = ((($1735)) + 84|0);
         $1737 = HEAP32[$1736>>2]|0;
         $1738 = (($1737) + ($1734<<2)|0);
         ;HEAP16[$16>>1]=HEAP16[$1738>>1]|0;HEAP16[$16+2>>1]=HEAP16[$1738+2>>1]|0;
         $1739 = ((($17)) + 1|0);
         $1740 = HEAP8[$1739>>0]|0;
         $1741 = $1740&255;
         $1742 = ((($16)) + 1|0);
         $1743 = HEAP8[$1742>>0]|0;
         $1744 = $1743&255;
         $1745 = (($1741) + ($1744))|0;
         $1746 = $11;
         $1747 = ($1745>>>0)<=($1746>>>0);
         if ($1747) {
          break;
         }
         $1748 = $8;
         $1749 = ($1748|0)==(0);
         if ($1749) {
          break L10;
         }
         $1750 = $8;
         $1751 = (($1750) + -1)|0;
         $8 = $1751;
         $1752 = $6;
         $1753 = ((($1752)) + 1|0);
         $6 = $1753;
         $1754 = HEAP8[$1752>>0]|0;
         $1755 = $1754&255;
         $1756 = $11;
         $1757 = $1755 << $1756;
         $1758 = $10;
         $1759 = (($1758) + ($1757))|0;
         $10 = $1759;
         $1760 = $11;
         $1761 = (($1760) + 8)|0;
         $11 = $1761;
        }
        $1762 = ((($17)) + 1|0);
        $1763 = HEAP8[$1762>>0]|0;
        $1764 = $1763&255;
        $1765 = $10;
        $1766 = $1765 >>> $1764;
        $10 = $1766;
        $1767 = ((($17)) + 1|0);
        $1768 = HEAP8[$1767>>0]|0;
        $1769 = $1768&255;
        $1770 = $11;
        $1771 = (($1770) - ($1769))|0;
        $11 = $1771;
        $1772 = ((($17)) + 1|0);
        $1773 = HEAP8[$1772>>0]|0;
        $1774 = $1773&255;
        $1775 = $5;
        $1776 = ((($1775)) + 7112|0);
        $1777 = HEAP32[$1776>>2]|0;
        $1778 = (($1777) + ($1774))|0;
        HEAP32[$1776>>2] = $1778;
       }
       $1779 = ((($16)) + 1|0);
       $1780 = HEAP8[$1779>>0]|0;
       $1781 = $1780&255;
       $1782 = $10;
       $1783 = $1782 >>> $1781;
       $10 = $1783;
       $1784 = ((($16)) + 1|0);
       $1785 = HEAP8[$1784>>0]|0;
       $1786 = $1785&255;
       $1787 = $11;
       $1788 = (($1787) - ($1786))|0;
       $11 = $1788;
       $1789 = ((($16)) + 1|0);
       $1790 = HEAP8[$1789>>0]|0;
       $1791 = $1790&255;
       $1792 = $5;
       $1793 = ((($1792)) + 7112|0);
       $1794 = HEAP32[$1793>>2]|0;
       $1795 = (($1794) + ($1791))|0;
       HEAP32[$1793>>2] = $1795;
       $1796 = HEAP8[$16>>0]|0;
       $1797 = $1796&255;
       $1798 = $1797 & 64;
       $1799 = ($1798|0)!=(0);
       if ($1799) {
        $1800 = $3;
        $1801 = ((($1800)) + 24|0);
        HEAP32[$1801>>2] = 14127;
        $1802 = $5;
        $1803 = ((($1802)) + 4|0);
        HEAP32[$1803>>2] = 16209;
        continue L10;
       } else {
        $1804 = ((($16)) + 2|0);
        $1805 = HEAP16[$1804>>1]|0;
        $1806 = $1805&65535;
        $1807 = $5;
        $1808 = ((($1807)) + 72|0);
        HEAP32[$1808>>2] = $1806;
        $1809 = HEAP8[$16>>0]|0;
        $1810 = $1809&255;
        $1811 = $1810 & 15;
        $1812 = $5;
        $1813 = ((($1812)) + 76|0);
        HEAP32[$1813>>2] = $1811;
        $1814 = $5;
        $1815 = ((($1814)) + 4|0);
        HEAP32[$1815>>2] = 16203;
        label = 263;
        break;
       }
      }
     } while(0);
     if ((label|0) == 124) {
      label = 0;
      $708 = $5;
      $709 = ((($708)) + 20|0);
      $710 = HEAP32[$709>>2]|0;
      $711 = $710 & 512;
      $712 = ($711|0)!=(0);
      if ($712) {
       while(1) {
        $713 = $11;
        $714 = ($713>>>0)<(16);
        if (!($714)) {
         break;
        }
        $715 = $8;
        $716 = ($715|0)==(0);
        if ($716) {
         break L10;
        }
        $717 = $8;
        $718 = (($717) + -1)|0;
        $8 = $718;
        $719 = $6;
        $720 = ((($719)) + 1|0);
        $6 = $720;
        $721 = HEAP8[$719>>0]|0;
        $722 = $721&255;
        $723 = $11;
        $724 = $722 << $723;
        $725 = $10;
        $726 = (($725) + ($724))|0;
        $10 = $726;
        $727 = $11;
        $728 = (($727) + 8)|0;
        $11 = $728;
       }
       $729 = $5;
       $730 = ((($729)) + 12|0);
       $731 = HEAP32[$730>>2]|0;
       $732 = $731 & 4;
       $733 = ($732|0)!=(0);
       if ($733) {
        $734 = $10;
        $735 = $5;
        $736 = ((($735)) + 28|0);
        $737 = HEAP32[$736>>2]|0;
        $738 = $737 & 65535;
        $739 = ($734|0)!=($738|0);
        if ($739) {
         $740 = $3;
         $741 = ((($740)) + 24|0);
         HEAP32[$741>>2] = 13857;
         $742 = $5;
         $743 = ((($742)) + 4|0);
         HEAP32[$743>>2] = 16209;
         continue;
        }
       }
       $10 = 0;
       $11 = 0;
      }
      $744 = $5;
      $745 = ((($744)) + 36|0);
      $746 = HEAP32[$745>>2]|0;
      $747 = ($746|0)!=(0|0);
      if ($747) {
       $748 = $5;
       $749 = ((($748)) + 20|0);
       $750 = HEAP32[$749>>2]|0;
       $751 = $750 >> 9;
       $752 = $751 & 1;
       $753 = $5;
       $754 = ((($753)) + 36|0);
       $755 = HEAP32[$754>>2]|0;
       $756 = ((($755)) + 44|0);
       HEAP32[$756>>2] = $752;
       $757 = $5;
       $758 = ((($757)) + 36|0);
       $759 = HEAP32[$758>>2]|0;
       $760 = ((($759)) + 48|0);
       HEAP32[$760>>2] = 1;
      }
      $761 = (_crc32(0,0,0)|0);
      $762 = $5;
      $763 = ((($762)) + 28|0);
      HEAP32[$763>>2] = $761;
      $764 = $3;
      $765 = ((($764)) + 48|0);
      HEAP32[$765>>2] = $761;
      $766 = $5;
      $767 = ((($766)) + 4|0);
      HEAP32[$767>>2] = 16191;
      continue;
     }
     else if ((label|0) == 263) {
      label = 0;
      $1816 = $5;
      $1817 = ((($1816)) + 76|0);
      $1818 = HEAP32[$1817>>2]|0;
      $1819 = ($1818|0)!=(0);
      if ($1819) {
       while(1) {
        $1820 = $11;
        $1821 = $5;
        $1822 = ((($1821)) + 76|0);
        $1823 = HEAP32[$1822>>2]|0;
        $1824 = ($1820>>>0)<($1823>>>0);
        if (!($1824)) {
         break;
        }
        $1825 = $8;
        $1826 = ($1825|0)==(0);
        if ($1826) {
         break L10;
        }
        $1827 = $8;
        $1828 = (($1827) + -1)|0;
        $8 = $1828;
        $1829 = $6;
        $1830 = ((($1829)) + 1|0);
        $6 = $1830;
        $1831 = HEAP8[$1829>>0]|0;
        $1832 = $1831&255;
        $1833 = $11;
        $1834 = $1832 << $1833;
        $1835 = $10;
        $1836 = (($1835) + ($1834))|0;
        $10 = $1836;
        $1837 = $11;
        $1838 = (($1837) + 8)|0;
        $11 = $1838;
       }
       $1839 = $10;
       $1840 = $5;
       $1841 = ((($1840)) + 76|0);
       $1842 = HEAP32[$1841>>2]|0;
       $1843 = 1 << $1842;
       $1844 = (($1843) - 1)|0;
       $1845 = $1839 & $1844;
       $1846 = $5;
       $1847 = ((($1846)) + 72|0);
       $1848 = HEAP32[$1847>>2]|0;
       $1849 = (($1848) + ($1845))|0;
       HEAP32[$1847>>2] = $1849;
       $1850 = $5;
       $1851 = ((($1850)) + 76|0);
       $1852 = HEAP32[$1851>>2]|0;
       $1853 = $10;
       $1854 = $1853 >>> $1852;
       $10 = $1854;
       $1855 = $5;
       $1856 = ((($1855)) + 76|0);
       $1857 = HEAP32[$1856>>2]|0;
       $1858 = $11;
       $1859 = (($1858) - ($1857))|0;
       $11 = $1859;
       $1860 = $5;
       $1861 = ((($1860)) + 76|0);
       $1862 = HEAP32[$1861>>2]|0;
       $1863 = $5;
       $1864 = ((($1863)) + 7112|0);
       $1865 = HEAP32[$1864>>2]|0;
       $1866 = (($1865) + ($1862))|0;
       HEAP32[$1864>>2] = $1866;
      }
      $1867 = $5;
      $1868 = ((($1867)) + 4|0);
      HEAP32[$1868>>2] = 16204;
     }
     $1869 = $9;
     $1870 = ($1869|0)==(0);
     if ($1870) {
      break;
     }
     $1871 = $13;
     $1872 = $9;
     $1873 = (($1871) - ($1872))|0;
     $14 = $1873;
     $1874 = $5;
     $1875 = ((($1874)) + 72|0);
     $1876 = HEAP32[$1875>>2]|0;
     $1877 = $14;
     $1878 = ($1876>>>0)>($1877>>>0);
     if ($1878) {
      $1879 = $5;
      $1880 = ((($1879)) + 72|0);
      $1881 = HEAP32[$1880>>2]|0;
      $1882 = $14;
      $1883 = (($1881) - ($1882))|0;
      $14 = $1883;
      $1884 = $14;
      $1885 = $5;
      $1886 = ((($1885)) + 48|0);
      $1887 = HEAP32[$1886>>2]|0;
      $1888 = ($1884>>>0)>($1887>>>0);
      if ($1888) {
       $1889 = $5;
       $1890 = ((($1889)) + 7108|0);
       $1891 = HEAP32[$1890>>2]|0;
       $1892 = ($1891|0)!=(0);
       if ($1892) {
        $1893 = $3;
        $1894 = ((($1893)) + 24|0);
        HEAP32[$1894>>2] = 14149;
        $1895 = $5;
        $1896 = ((($1895)) + 4|0);
        HEAP32[$1896>>2] = 16209;
        continue;
       }
      }
      $1897 = $14;
      $1898 = $5;
      $1899 = ((($1898)) + 52|0);
      $1900 = HEAP32[$1899>>2]|0;
      $1901 = ($1897>>>0)>($1900>>>0);
      $1902 = $5;
      if ($1901) {
       $1903 = ((($1902)) + 52|0);
       $1904 = HEAP32[$1903>>2]|0;
       $1905 = $14;
       $1906 = (($1905) - ($1904))|0;
       $14 = $1906;
       $1907 = $5;
       $1908 = ((($1907)) + 56|0);
       $1909 = HEAP32[$1908>>2]|0;
       $1910 = $5;
       $1911 = ((($1910)) + 44|0);
       $1912 = HEAP32[$1911>>2]|0;
       $1913 = $14;
       $1914 = (($1912) - ($1913))|0;
       $1915 = (($1909) + ($1914)|0);
       $15 = $1915;
      } else {
       $1916 = ((($1902)) + 56|0);
       $1917 = HEAP32[$1916>>2]|0;
       $1918 = $5;
       $1919 = ((($1918)) + 52|0);
       $1920 = HEAP32[$1919>>2]|0;
       $1921 = $14;
       $1922 = (($1920) - ($1921))|0;
       $1923 = (($1917) + ($1922)|0);
       $15 = $1923;
      }
      $1924 = $14;
      $1925 = $5;
      $1926 = ((($1925)) + 68|0);
      $1927 = HEAP32[$1926>>2]|0;
      $1928 = ($1924>>>0)>($1927>>>0);
      if ($1928) {
       $1929 = $5;
       $1930 = ((($1929)) + 68|0);
       $1931 = HEAP32[$1930>>2]|0;
       $14 = $1931;
      }
     } else {
      $1932 = $7;
      $1933 = $5;
      $1934 = ((($1933)) + 72|0);
      $1935 = HEAP32[$1934>>2]|0;
      $1936 = (0 - ($1935))|0;
      $1937 = (($1932) + ($1936)|0);
      $15 = $1937;
      $1938 = $5;
      $1939 = ((($1938)) + 68|0);
      $1940 = HEAP32[$1939>>2]|0;
      $14 = $1940;
     }
     $1941 = $14;
     $1942 = $9;
     $1943 = ($1941>>>0)>($1942>>>0);
     if ($1943) {
      $1944 = $9;
      $14 = $1944;
     }
     $1945 = $14;
     $1946 = $9;
     $1947 = (($1946) - ($1945))|0;
     $9 = $1947;
     $1948 = $14;
     $1949 = $5;
     $1950 = ((($1949)) + 68|0);
     $1951 = HEAP32[$1950>>2]|0;
     $1952 = (($1951) - ($1948))|0;
     HEAP32[$1950>>2] = $1952;
     while(1) {
      $1953 = $15;
      $1954 = ((($1953)) + 1|0);
      $15 = $1954;
      $1955 = HEAP8[$1953>>0]|0;
      $1956 = $7;
      $1957 = ((($1956)) + 1|0);
      $7 = $1957;
      HEAP8[$1956>>0] = $1955;
      $1958 = $14;
      $1959 = (($1958) + -1)|0;
      $14 = $1959;
      $1960 = ($1959|0)!=(0);
      if (!($1960)) {
       break;
      }
     }
     $1961 = $5;
     $1962 = ((($1961)) + 68|0);
     $1963 = HEAP32[$1962>>2]|0;
     $1964 = ($1963|0)==(0);
     if (!($1964)) {
      continue;
     }
     $1965 = $5;
     $1966 = ((($1965)) + 4|0);
     HEAP32[$1966>>2] = 16200;
    }
    if ((label|0) == 140) {
     $809 = $7;
     $810 = $3;
     $811 = ((($810)) + 12|0);
     HEAP32[$811>>2] = $809;
     $812 = $9;
     $813 = $3;
     $814 = ((($813)) + 16|0);
     HEAP32[$814>>2] = $812;
     $815 = $6;
     $816 = $3;
     HEAP32[$816>>2] = $815;
     $817 = $8;
     $818 = $3;
     $819 = ((($818)) + 4|0);
     HEAP32[$819>>2] = $817;
     $820 = $10;
     $821 = $5;
     $822 = ((($821)) + 60|0);
     HEAP32[$822>>2] = $820;
     $823 = $11;
     $824 = $5;
     $825 = ((($824)) + 64|0);
     HEAP32[$825>>2] = $823;
     $2 = 2;
     $2248 = $2;
     STACKTOP = sp;return ($2248|0);
    }
    else if ((label|0) == 151) {
     $884 = $10;
     $885 = $884 >>> 2;
     $10 = $885;
     $886 = $11;
     $887 = (($886) - 2)|0;
     $11 = $887;
    }
    else if ((label|0) == 154) {
     // unreachable;
    }
    else if ((label|0) == 311) {
     $10 = 0;
     $11 = 0;
     label = 312;
    }
    else if ((label|0) == 314) {
     $19 = -3;
    }
    else if ((label|0) == 315) {
     $2 = -4;
     $2248 = $2;
     STACKTOP = sp;return ($2248|0);
    }
    else if ((label|0) == 316) {
     $2 = -2;
     $2248 = $2;
     STACKTOP = sp;return ($2248|0);
    }
    if ((label|0) == 312) {
     $2107 = $5;
     $2108 = ((($2107)) + 4|0);
     HEAP32[$2108>>2] = 16208;
     label = 313;
    }
    if ((label|0) == 313) {
     $19 = 1;
    }
    $2109 = $7;
    $2110 = $3;
    $2111 = ((($2110)) + 12|0);
    HEAP32[$2111>>2] = $2109;
    $2112 = $9;
    $2113 = $3;
    $2114 = ((($2113)) + 16|0);
    HEAP32[$2114>>2] = $2112;
    $2115 = $6;
    $2116 = $3;
    HEAP32[$2116>>2] = $2115;
    $2117 = $8;
    $2118 = $3;
    $2119 = ((($2118)) + 4|0);
    HEAP32[$2119>>2] = $2117;
    $2120 = $10;
    $2121 = $5;
    $2122 = ((($2121)) + 60|0);
    HEAP32[$2122>>2] = $2120;
    $2123 = $11;
    $2124 = $5;
    $2125 = ((($2124)) + 64|0);
    HEAP32[$2125>>2] = $2123;
    $2126 = $5;
    $2127 = ((($2126)) + 44|0);
    $2128 = HEAP32[$2127>>2]|0;
    $2129 = ($2128|0)!=(0);
    if ($2129) {
     label = 321;
    } else {
     $2130 = $13;
     $2131 = $3;
     $2132 = ((($2131)) + 16|0);
     $2133 = HEAP32[$2132>>2]|0;
     $2134 = ($2130|0)!=($2133|0);
     if ($2134) {
      $2135 = $5;
      $2136 = ((($2135)) + 4|0);
      $2137 = HEAP32[$2136>>2]|0;
      $2138 = ($2137>>>0)<(16209);
      if ($2138) {
       $2139 = $5;
       $2140 = ((($2139)) + 4|0);
       $2141 = HEAP32[$2140>>2]|0;
       $2142 = ($2141>>>0)<(16206);
       $2143 = $4;
       $2144 = ($2143|0)!=(4);
       $or$cond10 = $2142 | $2144;
       if ($or$cond10) {
        label = 321;
       }
      }
     }
    }
    if ((label|0) == 321) {
     $2145 = $3;
     $2146 = $3;
     $2147 = ((($2146)) + 12|0);
     $2148 = HEAP32[$2147>>2]|0;
     $2149 = $13;
     $2150 = $3;
     $2151 = ((($2150)) + 16|0);
     $2152 = HEAP32[$2151>>2]|0;
     $2153 = (($2149) - ($2152))|0;
     $2154 = (_updatewindow($2145,$2148,$2153)|0);
     $2155 = ($2154|0)!=(0);
     if ($2155) {
      $2156 = $5;
      $2157 = ((($2156)) + 4|0);
      HEAP32[$2157>>2] = 16210;
      $2 = -4;
      $2248 = $2;
      STACKTOP = sp;return ($2248|0);
     }
    }
    $2158 = $3;
    $2159 = ((($2158)) + 4|0);
    $2160 = HEAP32[$2159>>2]|0;
    $2161 = $12;
    $2162 = (($2161) - ($2160))|0;
    $12 = $2162;
    $2163 = $3;
    $2164 = ((($2163)) + 16|0);
    $2165 = HEAP32[$2164>>2]|0;
    $2166 = $13;
    $2167 = (($2166) - ($2165))|0;
    $13 = $2167;
    $2168 = $12;
    $2169 = $3;
    $2170 = ((($2169)) + 8|0);
    $2171 = HEAP32[$2170>>2]|0;
    $2172 = (($2171) + ($2168))|0;
    HEAP32[$2170>>2] = $2172;
    $2173 = $13;
    $2174 = $3;
    $2175 = ((($2174)) + 20|0);
    $2176 = HEAP32[$2175>>2]|0;
    $2177 = (($2176) + ($2173))|0;
    HEAP32[$2175>>2] = $2177;
    $2178 = $13;
    $2179 = $5;
    $2180 = ((($2179)) + 32|0);
    $2181 = HEAP32[$2180>>2]|0;
    $2182 = (($2181) + ($2178))|0;
    HEAP32[$2180>>2] = $2182;
    $2183 = $5;
    $2184 = ((($2183)) + 12|0);
    $2185 = HEAP32[$2184>>2]|0;
    $2186 = $2185 & 4;
    $2187 = ($2186|0)!=(0);
    $2188 = $13;
    $2189 = ($2188|0)!=(0);
    $or$cond12 = $2187 & $2189;
    if ($or$cond12) {
     $2190 = $5;
     $2191 = ((($2190)) + 20|0);
     $2192 = HEAP32[$2191>>2]|0;
     $2193 = ($2192|0)!=(0);
     $2194 = $5;
     $2195 = ((($2194)) + 28|0);
     $2196 = HEAP32[$2195>>2]|0;
     $2197 = $3;
     $2198 = ((($2197)) + 12|0);
     $2199 = HEAP32[$2198>>2]|0;
     $2200 = $13;
     $2201 = (0 - ($2200))|0;
     $2202 = (($2199) + ($2201)|0);
     $2203 = $13;
     if ($2193) {
      $2204 = (_crc32($2196,$2202,$2203)|0);
      $2208 = $2204;
     } else {
      $2205 = (_adler32($2196,$2202,$2203)|0);
      $2208 = $2205;
     }
     $2206 = $5;
     $2207 = ((($2206)) + 28|0);
     HEAP32[$2207>>2] = $2208;
     $2209 = $3;
     $2210 = ((($2209)) + 48|0);
     HEAP32[$2210>>2] = $2208;
    }
    $2211 = $5;
    $2212 = ((($2211)) + 64|0);
    $2213 = HEAP32[$2212>>2]|0;
    $2214 = $5;
    $2215 = ((($2214)) + 8|0);
    $2216 = HEAP32[$2215>>2]|0;
    $2217 = ($2216|0)!=(0);
    $2218 = $2217 ? 64 : 0;
    $2219 = (($2213) + ($2218))|0;
    $2220 = $5;
    $2221 = ((($2220)) + 4|0);
    $2222 = HEAP32[$2221>>2]|0;
    $2223 = ($2222|0)==(16191);
    $2224 = $2223 ? 128 : 0;
    $2225 = (($2219) + ($2224))|0;
    $2226 = $5;
    $2227 = ((($2226)) + 4|0);
    $2228 = HEAP32[$2227>>2]|0;
    $2229 = ($2228|0)==(16199);
    if ($2229) {
     $2234 = 1;
    } else {
     $2230 = $5;
     $2231 = ((($2230)) + 4|0);
     $2232 = HEAP32[$2231>>2]|0;
     $2233 = ($2232|0)==(16194);
     $2234 = $2233;
    }
    $2235 = $2234 ? 256 : 0;
    $2236 = (($2225) + ($2235))|0;
    $2237 = $3;
    $2238 = ((($2237)) + 44|0);
    HEAP32[$2238>>2] = $2236;
    $2239 = $12;
    $2240 = ($2239|0)==(0);
    $2241 = $13;
    $2242 = ($2241|0)==(0);
    $or$cond14 = $2240 & $2242;
    $2243 = $4;
    $2244 = ($2243|0)==(4);
    $or$cond16 = $or$cond14 | $2244;
    $2245 = $19;
    $2246 = ($2245|0)==(0);
    $or$cond18 = $or$cond16 & $2246;
    if ($or$cond18) {
     $19 = -5;
    }
    $2247 = $19;
    $2 = $2247;
    $2248 = $2;
    STACKTOP = sp;return ($2248|0);
   }
  }
 } while(0);
 $2 = -2;
 $2248 = $2;
 STACKTOP = sp;return ($2248|0);
}
function _fixedtables_21($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 80|0);
 HEAP32[$3>>2] = 10062;
 $4 = $1;
 $5 = ((($4)) + 88|0);
 HEAP32[$5>>2] = 9;
 $6 = $1;
 $7 = ((($6)) + 84|0);
 HEAP32[$7>>2] = 12110;
 $8 = $1;
 $9 = ((($8)) + 92|0);
 HEAP32[$9>>2] = 5;
 STACKTOP = sp;return;
}
function _updatewindow($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $7 = $11;
 $12 = $7;
 $13 = ((($12)) + 56|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $16 = $4;
  $17 = ((($16)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $4;
  $20 = ((($19)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $7;
  $23 = ((($22)) + 40|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = 1 << $24;
  $26 = (FUNCTION_TABLE_iiii[$18 & 127]($21,$25,1)|0);
  $27 = $7;
  $28 = ((($27)) + 56|0);
  HEAP32[$28>>2] = $26;
  $29 = $7;
  $30 = ((($29)) + 56|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $3 = 1;
   $140 = $3;
   STACKTOP = sp;return ($140|0);
  }
 }
 $33 = $7;
 $34 = ((($33)) + 44|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0);
 if ($36) {
  $37 = $7;
  $38 = ((($37)) + 40|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = 1 << $39;
  $41 = $7;
  $42 = ((($41)) + 44|0);
  HEAP32[$42>>2] = $40;
  $43 = $7;
  $44 = ((($43)) + 52|0);
  HEAP32[$44>>2] = 0;
  $45 = $7;
  $46 = ((($45)) + 48|0);
  HEAP32[$46>>2] = 0;
 }
 $47 = $6;
 $48 = $7;
 $49 = ((($48)) + 44|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($47>>>0)>=($50>>>0);
 $52 = $7;
 do {
  if ($51) {
   $53 = ((($52)) + 56|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $5;
   $56 = $7;
   $57 = ((($56)) + 44|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (0 - ($58))|0;
   $60 = (($55) + ($59)|0);
   $61 = $7;
   $62 = ((($61)) + 44|0);
   $63 = HEAP32[$62>>2]|0;
   _memcpy(($54|0),($60|0),($63|0))|0;
   $64 = $7;
   $65 = ((($64)) + 52|0);
   HEAP32[$65>>2] = 0;
   $66 = $7;
   $67 = ((($66)) + 44|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $7;
   $70 = ((($69)) + 48|0);
   HEAP32[$70>>2] = $68;
  } else {
   $71 = ((($52)) + 44|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $7;
   $74 = ((($73)) + 52|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($72) - ($75))|0;
   $8 = $76;
   $77 = $8;
   $78 = $6;
   $79 = ($77>>>0)>($78>>>0);
   if ($79) {
    $80 = $6;
    $8 = $80;
   }
   $81 = $7;
   $82 = ((($81)) + 56|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $7;
   $85 = ((($84)) + 52|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($83) + ($86)|0);
   $88 = $5;
   $89 = $6;
   $90 = (0 - ($89))|0;
   $91 = (($88) + ($90)|0);
   $92 = $8;
   _memcpy(($87|0),($91|0),($92|0))|0;
   $93 = $8;
   $94 = $6;
   $95 = (($94) - ($93))|0;
   $6 = $95;
   $96 = $6;
   $97 = ($96|0)!=(0);
   if ($97) {
    $98 = $7;
    $99 = ((($98)) + 56|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $5;
    $102 = $6;
    $103 = (0 - ($102))|0;
    $104 = (($101) + ($103)|0);
    $105 = $6;
    _memcpy(($100|0),($104|0),($105|0))|0;
    $106 = $6;
    $107 = $7;
    $108 = ((($107)) + 52|0);
    HEAP32[$108>>2] = $106;
    $109 = $7;
    $110 = ((($109)) + 44|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = $7;
    $113 = ((($112)) + 48|0);
    HEAP32[$113>>2] = $111;
    break;
   }
   $114 = $8;
   $115 = $7;
   $116 = ((($115)) + 52|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (($117) + ($114))|0;
   HEAP32[$116>>2] = $118;
   $119 = $7;
   $120 = ((($119)) + 52|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $7;
   $123 = ((($122)) + 44|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($121|0)==($124|0);
   if ($125) {
    $126 = $7;
    $127 = ((($126)) + 52|0);
    HEAP32[$127>>2] = 0;
   }
   $128 = $7;
   $129 = ((($128)) + 48|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = $7;
   $132 = ((($131)) + 44|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = ($130>>>0)<($133>>>0);
   if ($134) {
    $135 = $8;
    $136 = $7;
    $137 = ((($136)) + 48|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (($138) + ($135))|0;
    HEAP32[$137>>2] = $139;
   }
  }
 } while(0);
 $3 = 0;
 $140 = $3;
 STACKTOP = sp;return ($140|0);
}
function _inflateEnd($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (_inflateStateCheck($4)|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $1 = -2;
  $34 = $1;
  STACKTOP = sp;return ($34|0);
 }
 $7 = $2;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $3 = $9;
 $10 = $3;
 $11 = ((($10)) + 56|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $2;
  $15 = ((($14)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $2;
  $18 = ((($17)) + 40|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $3;
  $21 = ((($20)) + 56|0);
  $22 = HEAP32[$21>>2]|0;
  FUNCTION_TABLE_vii[$16 & 63]($19,$22);
 }
 $23 = $2;
 $24 = ((($23)) + 36|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $2;
 $27 = ((($26)) + 40|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $2;
 $30 = ((($29)) + 28|0);
 $31 = HEAP32[$30>>2]|0;
 FUNCTION_TABLE_vii[$25 & 63]($28,$31);
 $32 = $2;
 $33 = ((($32)) + 28|0);
 HEAP32[$33>>2] = 0;
 $1 = 0;
 $34 = $1;
 STACKTOP = sp;return ($34|0);
}
function _inflate_table($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $27 = sp + 168|0;
 $32 = sp + 136|0;
 $33 = sp + 104|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = 0;
 while(1) {
  $34 = $13;
  $35 = ($34>>>0)<=(15);
  if (!($35)) {
   break;
  }
  $36 = $13;
  $37 = (($32) + ($36<<1)|0);
  HEAP16[$37>>1] = 0;
  $38 = $13;
  $39 = (($38) + 1)|0;
  $13 = $39;
 }
 $14 = 0;
 while(1) {
  $40 = $14;
  $41 = $9;
  $42 = ($40>>>0)<($41>>>0);
  if (!($42)) {
   break;
  }
  $43 = $14;
  $44 = $8;
  $45 = (($44) + ($43<<1)|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46&65535;
  $48 = (($32) + ($47<<1)|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = (($49) + 1)<<16>>16;
  HEAP16[$48>>1] = $50;
  $51 = $14;
  $52 = (($51) + 1)|0;
  $14 = $52;
 }
 $53 = $11;
 $54 = HEAP32[$53>>2]|0;
 $17 = $54;
 $16 = 15;
 while(1) {
  $55 = $16;
  $56 = ($55>>>0)>=(1);
  if (!($56)) {
   break;
  }
  $57 = $16;
  $58 = (($32) + ($57<<1)|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59&65535;
  $61 = ($60|0)!=(0);
  if ($61) {
   break;
  }
  $62 = $16;
  $63 = (($62) + -1)|0;
  $16 = $63;
 }
 $64 = $17;
 $65 = $16;
 $66 = ($64>>>0)>($65>>>0);
 if ($66) {
  $67 = $16;
  $17 = $67;
 }
 $68 = $16;
 $69 = ($68|0)==(0);
 if ($69) {
  HEAP8[$27>>0] = 64;
  $70 = ((($27)) + 1|0);
  HEAP8[$70>>0] = 1;
  $71 = ((($27)) + 2|0);
  HEAP16[$71>>1] = 0;
  $72 = $10;
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($73)) + 4|0);
  HEAP32[$72>>2] = $74;
  ;HEAP16[$73>>1]=HEAP16[$27>>1]|0;HEAP16[$73+2>>1]=HEAP16[$27+2>>1]|0;
  $75 = $10;
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($76)) + 4|0);
  HEAP32[$75>>2] = $77;
  ;HEAP16[$76>>1]=HEAP16[$27>>1]|0;HEAP16[$76+2>>1]=HEAP16[$27+2>>1]|0;
  $78 = $11;
  HEAP32[$78>>2] = 1;
  $6 = 0;
  $372 = $6;
  STACKTOP = sp;return ($372|0);
 }
 $15 = 1;
 while(1) {
  $79 = $15;
  $80 = $16;
  $81 = ($79>>>0)<($80>>>0);
  if (!($81)) {
   break;
  }
  $82 = $15;
  $83 = (($32) + ($82<<1)|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = $84&65535;
  $86 = ($85|0)!=(0);
  if ($86) {
   break;
  }
  $87 = $15;
  $88 = (($87) + 1)|0;
  $15 = $88;
 }
 $89 = $17;
 $90 = $15;
 $91 = ($89>>>0)<($90>>>0);
 if ($91) {
  $92 = $15;
  $17 = $92;
 }
 $20 = 1;
 $13 = 1;
 while(1) {
  $93 = $13;
  $94 = ($93>>>0)<=(15);
  $95 = $20;
  if (!($94)) {
   break;
  }
  $96 = $95 << 1;
  $20 = $96;
  $97 = $13;
  $98 = (($32) + ($97<<1)|0);
  $99 = HEAP16[$98>>1]|0;
  $100 = $99&65535;
  $101 = $20;
  $102 = (($101) - ($100))|0;
  $20 = $102;
  $103 = $20;
  $104 = ($103|0)<(0);
  if ($104) {
   label = 24;
   break;
  }
  $105 = $13;
  $106 = (($105) + 1)|0;
  $13 = $106;
 }
 if ((label|0) == 24) {
  $6 = -1;
  $372 = $6;
  STACKTOP = sp;return ($372|0);
 }
 $107 = ($95|0)>(0);
 if ($107) {
  $108 = $7;
  $109 = ($108|0)==(0);
  $110 = $16;
  $111 = ($110|0)!=(1);
  $or$cond = $109 | $111;
  if ($or$cond) {
   $6 = -1;
   $372 = $6;
   STACKTOP = sp;return ($372|0);
  }
 }
 $112 = ((($33)) + 2|0);
 HEAP16[$112>>1] = 0;
 $13 = 1;
 while(1) {
  $113 = $13;
  $114 = ($113>>>0)<(15);
  if (!($114)) {
   break;
  }
  $115 = $13;
  $116 = (($33) + ($115<<1)|0);
  $117 = HEAP16[$116>>1]|0;
  $118 = $117&65535;
  $119 = $13;
  $120 = (($32) + ($119<<1)|0);
  $121 = HEAP16[$120>>1]|0;
  $122 = $121&65535;
  $123 = (($118) + ($122))|0;
  $124 = $123&65535;
  $125 = $13;
  $126 = (($125) + 1)|0;
  $127 = (($33) + ($126<<1)|0);
  HEAP16[$127>>1] = $124;
  $128 = $13;
  $129 = (($128) + 1)|0;
  $13 = $129;
 }
 $14 = 0;
 while(1) {
  $130 = $14;
  $131 = $9;
  $132 = ($130>>>0)<($131>>>0);
  if (!($132)) {
   break;
  }
  $133 = $14;
  $134 = $8;
  $135 = (($134) + ($133<<1)|0);
  $136 = HEAP16[$135>>1]|0;
  $137 = $136&65535;
  $138 = ($137|0)!=(0);
  if ($138) {
   $139 = $14;
   $140 = $139&65535;
   $141 = $14;
   $142 = $8;
   $143 = (($142) + ($141<<1)|0);
   $144 = HEAP16[$143>>1]|0;
   $145 = $144&65535;
   $146 = (($33) + ($145<<1)|0);
   $147 = HEAP16[$146>>1]|0;
   $148 = (($147) + 1)<<16>>16;
   HEAP16[$146>>1] = $148;
   $149 = $147&65535;
   $150 = $12;
   $151 = (($150) + ($149<<1)|0);
   HEAP16[$151>>1] = $140;
  }
  $152 = $14;
  $153 = (($152) + 1)|0;
  $14 = $153;
 }
 $154 = $7;
 switch ($154|0) {
 case 0:  {
  $155 = $12;
  $30 = $155;
  $29 = $155;
  $31 = 20;
  break;
 }
 case 1:  {
  $29 = 12238;
  $30 = 12300;
  $31 = 257;
  break;
 }
 default: {
  $29 = 12362;
  $30 = 12426;
  $31 = 0;
 }
 }
 $22 = 0;
 $14 = 0;
 $156 = $15;
 $13 = $156;
 $157 = $10;
 $158 = HEAP32[$157>>2]|0;
 $28 = $158;
 $159 = $17;
 $18 = $159;
 $19 = 0;
 $25 = -1;
 $160 = $17;
 $161 = 1 << $160;
 $21 = $161;
 $162 = $21;
 $163 = (($162) - 1)|0;
 $26 = $163;
 $164 = $7;
 $165 = ($164|0)==(1);
 $166 = $21;
 $167 = ($166>>>0)>(852);
 $or$cond3 = $165 & $167;
 if (!($or$cond3)) {
  $168 = $7;
  $169 = ($168|0)==(2);
  $170 = $21;
  $171 = ($170>>>0)>(592);
  $or$cond5 = $169 & $171;
  if (!($or$cond5)) {
   while(1) {
    $172 = $13;
    $173 = $19;
    $174 = (($172) - ($173))|0;
    $175 = $174&255;
    $176 = ((($27)) + 1|0);
    HEAP8[$176>>0] = $175;
    $177 = $14;
    $178 = $12;
    $179 = (($178) + ($177<<1)|0);
    $180 = HEAP16[$179>>1]|0;
    $181 = $180&65535;
    $182 = (($181) + 1)|0;
    $183 = $31;
    $184 = ($182>>>0)<($183>>>0);
    do {
     if ($184) {
      HEAP8[$27>>0] = 0;
      $185 = $14;
      $186 = $12;
      $187 = (($186) + ($185<<1)|0);
      $188 = HEAP16[$187>>1]|0;
      $189 = ((($27)) + 2|0);
      HEAP16[$189>>1] = $188;
     } else {
      $190 = $14;
      $191 = $12;
      $192 = (($191) + ($190<<1)|0);
      $193 = HEAP16[$192>>1]|0;
      $194 = $193&65535;
      $195 = $31;
      $196 = ($194>>>0)>=($195>>>0);
      if ($196) {
       $197 = $14;
       $198 = $12;
       $199 = (($198) + ($197<<1)|0);
       $200 = HEAP16[$199>>1]|0;
       $201 = $200&65535;
       $202 = $31;
       $203 = (($201) - ($202))|0;
       $204 = $30;
       $205 = (($204) + ($203<<1)|0);
       $206 = HEAP16[$205>>1]|0;
       $207 = $206&255;
       HEAP8[$27>>0] = $207;
       $208 = $14;
       $209 = $12;
       $210 = (($209) + ($208<<1)|0);
       $211 = HEAP16[$210>>1]|0;
       $212 = $211&65535;
       $213 = $31;
       $214 = (($212) - ($213))|0;
       $215 = $29;
       $216 = (($215) + ($214<<1)|0);
       $217 = HEAP16[$216>>1]|0;
       $218 = ((($27)) + 2|0);
       HEAP16[$218>>1] = $217;
       break;
      } else {
       HEAP8[$27>>0] = 96;
       $219 = ((($27)) + 2|0);
       HEAP16[$219>>1] = 0;
       break;
      }
     }
    } while(0);
    $220 = $13;
    $221 = $19;
    $222 = (($220) - ($221))|0;
    $223 = 1 << $222;
    $23 = $223;
    $224 = $18;
    $225 = 1 << $224;
    $24 = $225;
    $226 = $24;
    $15 = $226;
    while(1) {
     $227 = $23;
     $228 = $24;
     $229 = (($228) - ($227))|0;
     $24 = $229;
     $230 = $22;
     $231 = $19;
     $232 = $230 >>> $231;
     $233 = $24;
     $234 = (($232) + ($233))|0;
     $235 = $28;
     $236 = (($235) + ($234<<2)|0);
     ;HEAP16[$236>>1]=HEAP16[$27>>1]|0;HEAP16[$236+2>>1]=HEAP16[$27+2>>1]|0;
     $237 = $24;
     $238 = ($237|0)!=(0);
     if (!($238)) {
      break;
     }
    }
    $239 = $13;
    $240 = (($239) - 1)|0;
    $241 = 1 << $240;
    $23 = $241;
    while(1) {
     $242 = $22;
     $243 = $23;
     $244 = $242 & $243;
     $245 = ($244|0)!=(0);
     $246 = $23;
     if (!($245)) {
      break;
     }
     $247 = $246 >>> 1;
     $23 = $247;
    }
    $248 = ($246|0)!=(0);
    if ($248) {
     $249 = $23;
     $250 = (($249) - 1)|0;
     $251 = $22;
     $252 = $251 & $250;
     $22 = $252;
     $253 = $23;
     $254 = $22;
     $255 = (($254) + ($253))|0;
     $22 = $255;
    } else {
     $22 = 0;
    }
    $256 = $14;
    $257 = (($256) + 1)|0;
    $14 = $257;
    $258 = $13;
    $259 = (($32) + ($258<<1)|0);
    $260 = HEAP16[$259>>1]|0;
    $261 = (($260) + -1)<<16>>16;
    HEAP16[$259>>1] = $261;
    $262 = $261&65535;
    $263 = ($262|0)==(0);
    if ($263) {
     $264 = $13;
     $265 = $16;
     $266 = ($264|0)==($265|0);
     if ($266) {
      break;
     }
     $267 = $14;
     $268 = $12;
     $269 = (($268) + ($267<<1)|0);
     $270 = HEAP16[$269>>1]|0;
     $271 = $270&65535;
     $272 = $8;
     $273 = (($272) + ($271<<1)|0);
     $274 = HEAP16[$273>>1]|0;
     $275 = $274&65535;
     $13 = $275;
    }
    $276 = $13;
    $277 = $17;
    $278 = ($276>>>0)>($277>>>0);
    if (!($278)) {
     continue;
    }
    $279 = $22;
    $280 = $26;
    $281 = $279 & $280;
    $282 = $25;
    $283 = ($281|0)!=($282|0);
    if (!($283)) {
     continue;
    }
    $284 = $19;
    $285 = ($284|0)==(0);
    if ($285) {
     $286 = $17;
     $19 = $286;
    }
    $287 = $15;
    $288 = $28;
    $289 = (($288) + ($287<<2)|0);
    $28 = $289;
    $290 = $13;
    $291 = $19;
    $292 = (($290) - ($291))|0;
    $18 = $292;
    $293 = $18;
    $294 = 1 << $293;
    $20 = $294;
    while(1) {
     $295 = $18;
     $296 = $19;
     $297 = (($295) + ($296))|0;
     $298 = $16;
     $299 = ($297>>>0)<($298>>>0);
     if (!($299)) {
      break;
     }
     $300 = $18;
     $301 = $19;
     $302 = (($300) + ($301))|0;
     $303 = (($32) + ($302<<1)|0);
     $304 = HEAP16[$303>>1]|0;
     $305 = $304&65535;
     $306 = $20;
     $307 = (($306) - ($305))|0;
     $20 = $307;
     $308 = $20;
     $309 = ($308|0)<=(0);
     if ($309) {
      break;
     }
     $310 = $18;
     $311 = (($310) + 1)|0;
     $18 = $311;
     $312 = $20;
     $313 = $312 << 1;
     $20 = $313;
    }
    $314 = $18;
    $315 = 1 << $314;
    $316 = $21;
    $317 = (($316) + ($315))|0;
    $21 = $317;
    $318 = $7;
    $319 = ($318|0)==(1);
    $320 = $21;
    $321 = ($320>>>0)>(852);
    $or$cond7 = $319 & $321;
    if ($or$cond7) {
     label = 70;
     break;
    }
    $322 = $7;
    $323 = ($322|0)==(2);
    $324 = $21;
    $325 = ($324>>>0)>(592);
    $or$cond9 = $323 & $325;
    if ($or$cond9) {
     label = 70;
     break;
    }
    $326 = $22;
    $327 = $26;
    $328 = $326 & $327;
    $25 = $328;
    $329 = $18;
    $330 = $329&255;
    $331 = $25;
    $332 = $10;
    $333 = HEAP32[$332>>2]|0;
    $334 = (($333) + ($331<<2)|0);
    HEAP8[$334>>0] = $330;
    $335 = $17;
    $336 = $335&255;
    $337 = $25;
    $338 = $10;
    $339 = HEAP32[$338>>2]|0;
    $340 = (($339) + ($337<<2)|0);
    $341 = ((($340)) + 1|0);
    HEAP8[$341>>0] = $336;
    $342 = $28;
    $343 = $10;
    $344 = HEAP32[$343>>2]|0;
    $345 = $342;
    $346 = $344;
    $347 = (($345) - ($346))|0;
    $348 = (($347|0) / 4)&-1;
    $349 = $348&65535;
    $350 = $25;
    $351 = $10;
    $352 = HEAP32[$351>>2]|0;
    $353 = (($352) + ($350<<2)|0);
    $354 = ((($353)) + 2|0);
    HEAP16[$354>>1] = $349;
   }
   if ((label|0) == 70) {
    $6 = 1;
    $372 = $6;
    STACKTOP = sp;return ($372|0);
   }
   $355 = $22;
   $356 = ($355|0)!=(0);
   if ($356) {
    HEAP8[$27>>0] = 64;
    $357 = $13;
    $358 = $19;
    $359 = (($357) - ($358))|0;
    $360 = $359&255;
    $361 = ((($27)) + 1|0);
    HEAP8[$361>>0] = $360;
    $362 = ((($27)) + 2|0);
    HEAP16[$362>>1] = 0;
    $363 = $22;
    $364 = $28;
    $365 = (($364) + ($363<<2)|0);
    ;HEAP16[$365>>1]=HEAP16[$27>>1]|0;HEAP16[$365+2>>1]=HEAP16[$27+2>>1]|0;
   }
   $366 = $21;
   $367 = $10;
   $368 = HEAP32[$367>>2]|0;
   $369 = (($368) + ($366<<2)|0);
   HEAP32[$367>>2] = $369;
   $370 = $17;
   $371 = $11;
   HEAP32[$371>>2] = $370;
   $6 = 0;
   $372 = $6;
   STACKTOP = sp;return ($372|0);
  }
 }
 $6 = 1;
 $372 = $6;
 STACKTOP = sp;return ($372|0);
}
function __tr_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 _tr_static_init();
 $2 = $1;
 $3 = ((($2)) + 148|0);
 $4 = $1;
 $5 = ((($4)) + 2840|0);
 HEAP32[$5>>2] = $3;
 $6 = $1;
 $7 = ((($6)) + 2840|0);
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 8320;
 $9 = $1;
 $10 = ((($9)) + 2440|0);
 $11 = $1;
 $12 = ((($11)) + 2852|0);
 HEAP32[$12>>2] = $10;
 $13 = $1;
 $14 = ((($13)) + 2852|0);
 $15 = ((($14)) + 8|0);
 HEAP32[$15>>2] = 8340;
 $16 = $1;
 $17 = ((($16)) + 2684|0);
 $18 = $1;
 $19 = ((($18)) + 2864|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = ((($20)) + 2864|0);
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = 8360;
 $23 = $1;
 $24 = ((($23)) + 5816|0);
 HEAP16[$24>>1] = 0;
 $25 = $1;
 $26 = ((($25)) + 5820|0);
 HEAP32[$26>>2] = 0;
 $27 = $1;
 _init_block($27);
 STACKTOP = sp;return;
}
function _tr_static_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _init_block($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = ($3|0)<(286);
  if (!($4)) {
   break;
  }
  $5 = $2;
  $6 = $1;
  $7 = ((($6)) + 148|0);
  $8 = (($7) + ($5<<2)|0);
  HEAP16[$8>>1] = 0;
  $9 = $2;
  $10 = (($9) + 1)|0;
  $2 = $10;
 }
 $2 = 0;
 while(1) {
  $11 = $2;
  $12 = ($11|0)<(30);
  if (!($12)) {
   break;
  }
  $13 = $2;
  $14 = $1;
  $15 = ((($14)) + 2440|0);
  $16 = (($15) + ($13<<2)|0);
  HEAP16[$16>>1] = 0;
  $17 = $2;
  $18 = (($17) + 1)|0;
  $2 = $18;
 }
 $2 = 0;
 while(1) {
  $19 = $2;
  $20 = ($19|0)<(19);
  if (!($20)) {
   break;
  }
  $21 = $2;
  $22 = $1;
  $23 = ((($22)) + 2684|0);
  $24 = (($23) + ($21<<2)|0);
  HEAP16[$24>>1] = 0;
  $25 = $2;
  $26 = (($25) + 1)|0;
  $2 = $26;
 }
 $27 = $1;
 $28 = ((($27)) + 148|0);
 $29 = ((($28)) + 1024|0);
 HEAP16[$29>>1] = 1;
 $30 = $1;
 $31 = ((($30)) + 5804|0);
 HEAP32[$31>>2] = 0;
 $32 = $1;
 $33 = ((($32)) + 5800|0);
 HEAP32[$33>>2] = 0;
 $34 = $1;
 $35 = ((($34)) + 5808|0);
 HEAP32[$35>>2] = 0;
 $36 = $1;
 $37 = ((($36)) + 5792|0);
 HEAP32[$37>>2] = 0;
 STACKTOP = sp;return;
}
function __tr_stored_block($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 3;
 $10 = $4;
 $11 = ((($10)) + 5820|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $8;
 $14 = (16 - ($13))|0;
 $15 = ($12|0)>($14|0);
 $16 = $7;
 $17 = (0 + ($16))|0;
 if ($15) {
  $9 = $17;
  $18 = $9;
  $19 = $18&65535;
  $20 = $19&65535;
  $21 = $4;
  $22 = ((($21)) + 5820|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $20 << $23;
  $25 = $4;
  $26 = ((($25)) + 5816|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $29 = $28 | $24;
  $30 = $29&65535;
  HEAP16[$26>>1] = $30;
  $31 = $4;
  $32 = ((($31)) + 5816|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33&65535;
  $35 = $34 & 255;
  $36 = $35&255;
  $37 = $4;
  $38 = ((($37)) + 20|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[$38>>2] = $40;
  $41 = $4;
  $42 = ((($41)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($39)|0);
  HEAP8[$44>>0] = $36;
  $45 = $4;
  $46 = ((($45)) + 5816|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47&65535;
  $49 = $48 >> 8;
  $50 = $49&255;
  $51 = $4;
  $52 = ((($51)) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + 1)|0;
  HEAP32[$52>>2] = $54;
  $55 = $4;
  $56 = ((($55)) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + ($53)|0);
  HEAP8[$58>>0] = $50;
  $59 = $9;
  $60 = $59&65535;
  $61 = $60&65535;
  $62 = $4;
  $63 = ((($62)) + 5820|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (16 - ($64))|0;
  $66 = $61 >> $65;
  $67 = $66&65535;
  $68 = $4;
  $69 = ((($68)) + 5816|0);
  HEAP16[$69>>1] = $67;
  $70 = $8;
  $71 = (($70) - 16)|0;
  $72 = $4;
  $73 = ((($72)) + 5820|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) + ($71))|0;
  HEAP32[$73>>2] = $75;
 } else {
  $76 = $17&65535;
  $77 = $76&65535;
  $78 = $4;
  $79 = ((($78)) + 5820|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $77 << $80;
  $82 = $4;
  $83 = ((($82)) + 5816|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = $84&65535;
  $86 = $85 | $81;
  $87 = $86&65535;
  HEAP16[$83>>1] = $87;
  $88 = $8;
  $89 = $4;
  $90 = ((($89)) + 5820|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($91) + ($88))|0;
  HEAP32[$90>>2] = $92;
 }
 $93 = $4;
 _bi_windup($93);
 $94 = $6;
 $95 = $94&65535;
 $96 = $95&65535;
 $97 = $96 & 255;
 $98 = $97&255;
 $99 = $4;
 $100 = ((($99)) + 20|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (($101) + 1)|0;
 HEAP32[$100>>2] = $102;
 $103 = $4;
 $104 = ((($103)) + 8|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = (($105) + ($101)|0);
 HEAP8[$106>>0] = $98;
 $107 = $6;
 $108 = $107&65535;
 $109 = $108&65535;
 $110 = $109 >> 8;
 $111 = $110&255;
 $112 = $4;
 $113 = ((($112)) + 20|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = (($114) + 1)|0;
 HEAP32[$113>>2] = $115;
 $116 = $4;
 $117 = ((($116)) + 8|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = (($118) + ($114)|0);
 HEAP8[$119>>0] = $111;
 $120 = $6;
 $121 = $120 ^ -1;
 $122 = $121&65535;
 $123 = $122&65535;
 $124 = $123 & 255;
 $125 = $124&255;
 $126 = $4;
 $127 = ((($126)) + 20|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = (($128) + 1)|0;
 HEAP32[$127>>2] = $129;
 $130 = $4;
 $131 = ((($130)) + 8|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (($132) + ($128)|0);
 HEAP8[$133>>0] = $125;
 $134 = $6;
 $135 = $134 ^ -1;
 $136 = $135&65535;
 $137 = $136&65535;
 $138 = $137 >> 8;
 $139 = $138&255;
 $140 = $4;
 $141 = ((($140)) + 20|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = (($142) + 1)|0;
 HEAP32[$141>>2] = $143;
 $144 = $4;
 $145 = ((($144)) + 8|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = (($146) + ($142)|0);
 HEAP8[$147>>0] = $139;
 $148 = $4;
 $149 = ((($148)) + 8|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = $4;
 $152 = ((($151)) + 20|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = (($150) + ($153)|0);
 $155 = $5;
 $156 = $6;
 _memcpy(($154|0),($155|0),($156|0))|0;
 $157 = $6;
 $158 = $4;
 $159 = ((($158)) + 20|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = (($160) + ($157))|0;
 HEAP32[$159>>2] = $161;
 STACKTOP = sp;return;
}
function _bi_windup($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 5820|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(8);
 $6 = $1;
 if ($5) {
  $7 = ((($6)) + 5816|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8&65535;
  $10 = $9 & 255;
  $11 = $10&255;
  $12 = $1;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$13>>2] = $15;
  $16 = $1;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($14)|0);
  HEAP8[$19>>0] = $11;
  $20 = $1;
  $21 = ((($20)) + 5816|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&65535;
  $24 = $23 >> 8;
  $25 = $24&255;
  $26 = $1;
  $27 = ((($26)) + 20|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 1)|0;
  HEAP32[$27>>2] = $29;
  $30 = $1;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($28)|0);
  HEAP8[$33>>0] = $25;
 } else {
  $34 = ((($6)) + 5820|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)>(0);
  if ($36) {
   $37 = $1;
   $38 = ((($37)) + 5816|0);
   $39 = HEAP16[$38>>1]|0;
   $40 = $39&255;
   $41 = $1;
   $42 = ((($41)) + 20|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + 1)|0;
   HEAP32[$42>>2] = $44;
   $45 = $1;
   $46 = ((($45)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + ($43)|0);
   HEAP8[$48>>0] = $40;
  }
 }
 $49 = $1;
 $50 = ((($49)) + 5816|0);
 HEAP16[$50>>1] = 0;
 $51 = $1;
 $52 = ((($51)) + 5820|0);
 HEAP32[$52>>2] = 0;
 STACKTOP = sp;return;
}
function __tr_flush_bits($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _bi_flush($2);
 STACKTOP = sp;return;
}
function _bi_flush($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 5820|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(16);
 $6 = $1;
 if ($5) {
  $7 = ((($6)) + 5816|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8&65535;
  $10 = $9 & 255;
  $11 = $10&255;
  $12 = $1;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$13>>2] = $15;
  $16 = $1;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($14)|0);
  HEAP8[$19>>0] = $11;
  $20 = $1;
  $21 = ((($20)) + 5816|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&65535;
  $24 = $23 >> 8;
  $25 = $24&255;
  $26 = $1;
  $27 = ((($26)) + 20|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 1)|0;
  HEAP32[$27>>2] = $29;
  $30 = $1;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($28)|0);
  HEAP8[$33>>0] = $25;
  $34 = $1;
  $35 = ((($34)) + 5816|0);
  HEAP16[$35>>1] = 0;
  $36 = $1;
  $37 = ((($36)) + 5820|0);
  HEAP32[$37>>2] = 0;
  STACKTOP = sp;return;
 }
 $38 = ((($6)) + 5820|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)>=(8);
 if (!($40)) {
  STACKTOP = sp;return;
 }
 $41 = $1;
 $42 = ((($41)) + 5816|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = $43&255;
 $45 = $1;
 $46 = ((($45)) + 20|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + 1)|0;
 HEAP32[$46>>2] = $48;
 $49 = $1;
 $50 = ((($49)) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + ($47)|0);
 HEAP8[$52>>0] = $44;
 $53 = $1;
 $54 = ((($53)) + 5816|0);
 $55 = HEAP16[$54>>1]|0;
 $56 = $55&65535;
 $57 = $56 >> 8;
 $58 = $57&65535;
 HEAP16[$54>>1] = $58;
 $59 = $1;
 $60 = ((($59)) + 5820|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) - 8)|0;
 HEAP32[$60>>2] = $62;
 STACKTOP = sp;return;
}
function __tr_align($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $2 = 3;
 $6 = $1;
 $7 = ((($6)) + 5820|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = (16 - ($9))|0;
 $11 = ($8|0)>($10|0);
 if ($11) {
  $3 = 2;
  $12 = $3;
  $13 = $12&65535;
  $14 = $13&65535;
  $15 = $1;
  $16 = ((($15)) + 5820|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $14 << $17;
  $19 = $1;
  $20 = ((($19)) + 5816|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = $22 | $18;
  $24 = $23&65535;
  HEAP16[$20>>1] = $24;
  $25 = $1;
  $26 = ((($25)) + 5816|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $29 = $28 & 255;
  $30 = $29&255;
  $31 = $1;
  $32 = ((($31)) + 20|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 1)|0;
  HEAP32[$32>>2] = $34;
  $35 = $1;
  $36 = ((($35)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($33)|0);
  HEAP8[$38>>0] = $30;
  $39 = $1;
  $40 = ((($39)) + 5816|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $43 = $42 >> 8;
  $44 = $43&255;
  $45 = $1;
  $46 = ((($45)) + 20|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + 1)|0;
  HEAP32[$46>>2] = $48;
  $49 = $1;
  $50 = ((($49)) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + ($47)|0);
  HEAP8[$52>>0] = $44;
  $53 = $3;
  $54 = $53&65535;
  $55 = $54&65535;
  $56 = $1;
  $57 = ((($56)) + 5820|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (16 - ($58))|0;
  $60 = $55 >> $59;
  $61 = $60&65535;
  $62 = $1;
  $63 = ((($62)) + 5816|0);
  HEAP16[$63>>1] = $61;
  $64 = $2;
  $65 = (($64) - 16)|0;
  $66 = $1;
  $67 = ((($66)) + 5820|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + ($65))|0;
  HEAP32[$67>>2] = $69;
 } else {
  $70 = $1;
  $71 = ((($70)) + 5820|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = 2 << $72;
  $74 = $1;
  $75 = ((($74)) + 5816|0);
  $76 = HEAP16[$75>>1]|0;
  $77 = $76&65535;
  $78 = $77 | $73;
  $79 = $78&65535;
  HEAP16[$75>>1] = $79;
  $80 = $2;
  $81 = $1;
  $82 = ((($81)) + 5820|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + ($80))|0;
  HEAP32[$82>>2] = $84;
 }
 $85 = HEAP16[(13636)>>1]|0;
 $86 = $85&65535;
 $4 = $86;
 $87 = $1;
 $88 = ((($87)) + 5820|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $4;
 $91 = (16 - ($90))|0;
 $92 = ($89|0)>($91|0);
 $93 = HEAP16[(13634)>>1]|0;
 $94 = $93&65535;
 if ($92) {
  $5 = $94;
  $95 = $5;
  $96 = $95&65535;
  $97 = $96&65535;
  $98 = $1;
  $99 = ((($98)) + 5820|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $97 << $100;
  $102 = $1;
  $103 = ((($102)) + 5816|0);
  $104 = HEAP16[$103>>1]|0;
  $105 = $104&65535;
  $106 = $105 | $101;
  $107 = $106&65535;
  HEAP16[$103>>1] = $107;
  $108 = $1;
  $109 = ((($108)) + 5816|0);
  $110 = HEAP16[$109>>1]|0;
  $111 = $110&65535;
  $112 = $111 & 255;
  $113 = $112&255;
  $114 = $1;
  $115 = ((($114)) + 20|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (($116) + 1)|0;
  HEAP32[$115>>2] = $117;
  $118 = $1;
  $119 = ((($118)) + 8|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($120) + ($116)|0);
  HEAP8[$121>>0] = $113;
  $122 = $1;
  $123 = ((($122)) + 5816|0);
  $124 = HEAP16[$123>>1]|0;
  $125 = $124&65535;
  $126 = $125 >> 8;
  $127 = $126&255;
  $128 = $1;
  $129 = ((($128)) + 20|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (($130) + 1)|0;
  HEAP32[$129>>2] = $131;
  $132 = $1;
  $133 = ((($132)) + 8|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (($134) + ($130)|0);
  HEAP8[$135>>0] = $127;
  $136 = $5;
  $137 = $136&65535;
  $138 = $137&65535;
  $139 = $1;
  $140 = ((($139)) + 5820|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = (16 - ($141))|0;
  $143 = $138 >> $142;
  $144 = $143&65535;
  $145 = $1;
  $146 = ((($145)) + 5816|0);
  HEAP16[$146>>1] = $144;
  $147 = $4;
  $148 = (($147) - 16)|0;
  $149 = $1;
  $150 = ((($149)) + 5820|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($151) + ($148))|0;
  HEAP32[$150>>2] = $152;
  $168 = $1;
  _bi_flush($168);
  STACKTOP = sp;return;
 } else {
  $153 = $1;
  $154 = ((($153)) + 5820|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = $94 << $155;
  $157 = $1;
  $158 = ((($157)) + 5816|0);
  $159 = HEAP16[$158>>1]|0;
  $160 = $159&65535;
  $161 = $160 | $156;
  $162 = $161&65535;
  HEAP16[$158>>1] = $162;
  $163 = $4;
  $164 = $1;
  $165 = ((($164)) + 5820|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = (($166) + ($163))|0;
  HEAP32[$165>>2] = $167;
  $168 = $1;
  _bi_flush($168);
  STACKTOP = sp;return;
 }
}
function __tr_flush_block($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = 0;
 $15 = $4;
 $16 = ((($15)) + 132|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)>(0);
 if ($18) {
  $19 = $4;
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 44|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(2);
  if ($23) {
   $24 = $4;
   $25 = (_detect_data_type($24)|0);
   $26 = $4;
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 44|0);
   HEAP32[$28>>2] = $25;
  }
  $29 = $4;
  $30 = $4;
  $31 = ((($30)) + 2840|0);
  _build_tree($29,$31);
  $32 = $4;
  $33 = $4;
  $34 = ((($33)) + 2852|0);
  _build_tree($32,$34);
  $35 = $4;
  $36 = (_build_bl_tree($35)|0);
  $10 = $36;
  $37 = $4;
  $38 = ((($37)) + 5800|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + 3)|0;
  $41 = (($40) + 7)|0;
  $42 = $41 >>> 3;
  $8 = $42;
  $43 = $4;
  $44 = ((($43)) + 5804|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 3)|0;
  $47 = (($46) + 7)|0;
  $48 = $47 >>> 3;
  $9 = $48;
  $49 = $9;
  $50 = $8;
  $51 = ($49>>>0)<=($50>>>0);
  if ($51) {
   $52 = $9;
   $8 = $52;
  }
 } else {
  $53 = $6;
  $54 = (($53) + 5)|0;
  $9 = $54;
  $8 = $54;
 }
 $55 = $6;
 $56 = (($55) + 4)|0;
 $57 = $8;
 $58 = ($56>>>0)<=($57>>>0);
 $59 = $5;
 $60 = ($59|0)!=(0|0);
 $or$cond = $58 & $60;
 $61 = $4;
 do {
  if ($or$cond) {
   $62 = $5;
   $63 = $6;
   $64 = $7;
   __tr_stored_block($61,$62,$63,$64);
  } else {
   $65 = ((($61)) + 136|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)==(4);
   if (!($67)) {
    $68 = $9;
    $69 = $8;
    $70 = ($68|0)==($69|0);
    if (!($70)) {
     $13 = 3;
     $155 = $4;
     $156 = ((($155)) + 5820|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = $13;
     $159 = (16 - ($158))|0;
     $160 = ($157|0)>($159|0);
     $161 = $7;
     $162 = (4 + ($161))|0;
     if ($160) {
      $14 = $162;
      $163 = $14;
      $164 = $163&65535;
      $165 = $164&65535;
      $166 = $4;
      $167 = ((($166)) + 5820|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = $165 << $168;
      $170 = $4;
      $171 = ((($170)) + 5816|0);
      $172 = HEAP16[$171>>1]|0;
      $173 = $172&65535;
      $174 = $173 | $169;
      $175 = $174&65535;
      HEAP16[$171>>1] = $175;
      $176 = $4;
      $177 = ((($176)) + 5816|0);
      $178 = HEAP16[$177>>1]|0;
      $179 = $178&65535;
      $180 = $179 & 255;
      $181 = $180&255;
      $182 = $4;
      $183 = ((($182)) + 20|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = (($184) + 1)|0;
      HEAP32[$183>>2] = $185;
      $186 = $4;
      $187 = ((($186)) + 8|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = (($188) + ($184)|0);
      HEAP8[$189>>0] = $181;
      $190 = $4;
      $191 = ((($190)) + 5816|0);
      $192 = HEAP16[$191>>1]|0;
      $193 = $192&65535;
      $194 = $193 >> 8;
      $195 = $194&255;
      $196 = $4;
      $197 = ((($196)) + 20|0);
      $198 = HEAP32[$197>>2]|0;
      $199 = (($198) + 1)|0;
      HEAP32[$197>>2] = $199;
      $200 = $4;
      $201 = ((($200)) + 8|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = (($202) + ($198)|0);
      HEAP8[$203>>0] = $195;
      $204 = $14;
      $205 = $204&65535;
      $206 = $205&65535;
      $207 = $4;
      $208 = ((($207)) + 5820|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = (16 - ($209))|0;
      $211 = $206 >> $210;
      $212 = $211&65535;
      $213 = $4;
      $214 = ((($213)) + 5816|0);
      HEAP16[$214>>1] = $212;
      $215 = $13;
      $216 = (($215) - 16)|0;
      $217 = $4;
      $218 = ((($217)) + 5820|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = (($219) + ($216))|0;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $162&65535;
      $222 = $221&65535;
      $223 = $4;
      $224 = ((($223)) + 5820|0);
      $225 = HEAP32[$224>>2]|0;
      $226 = $222 << $225;
      $227 = $4;
      $228 = ((($227)) + 5816|0);
      $229 = HEAP16[$228>>1]|0;
      $230 = $229&65535;
      $231 = $230 | $226;
      $232 = $231&65535;
      HEAP16[$228>>1] = $232;
      $233 = $13;
      $234 = $4;
      $235 = ((($234)) + 5820|0);
      $236 = HEAP32[$235>>2]|0;
      $237 = (($236) + ($233))|0;
      HEAP32[$235>>2] = $237;
     }
     $238 = $4;
     $239 = $4;
     $240 = ((($239)) + 2840|0);
     $241 = ((($240)) + 4|0);
     $242 = HEAP32[$241>>2]|0;
     $243 = (($242) + 1)|0;
     $244 = $4;
     $245 = ((($244)) + 2852|0);
     $246 = ((($245)) + 4|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = (($247) + 1)|0;
     $249 = $10;
     $250 = (($249) + 1)|0;
     _send_all_trees($238,$243,$248,$250);
     $251 = $4;
     $252 = $4;
     $253 = ((($252)) + 148|0);
     $254 = $4;
     $255 = ((($254)) + 2440|0);
     _compress_block($251,$253,$255);
     break;
    }
   }
   $11 = 3;
   $71 = $4;
   $72 = ((($71)) + 5820|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $11;
   $75 = (16 - ($74))|0;
   $76 = ($73|0)>($75|0);
   $77 = $7;
   $78 = (2 + ($77))|0;
   if ($76) {
    $12 = $78;
    $79 = $12;
    $80 = $79&65535;
    $81 = $80&65535;
    $82 = $4;
    $83 = ((($82)) + 5820|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = $81 << $84;
    $86 = $4;
    $87 = ((($86)) + 5816|0);
    $88 = HEAP16[$87>>1]|0;
    $89 = $88&65535;
    $90 = $89 | $85;
    $91 = $90&65535;
    HEAP16[$87>>1] = $91;
    $92 = $4;
    $93 = ((($92)) + 5816|0);
    $94 = HEAP16[$93>>1]|0;
    $95 = $94&65535;
    $96 = $95 & 255;
    $97 = $96&255;
    $98 = $4;
    $99 = ((($98)) + 20|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = (($100) + 1)|0;
    HEAP32[$99>>2] = $101;
    $102 = $4;
    $103 = ((($102)) + 8|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (($104) + ($100)|0);
    HEAP8[$105>>0] = $97;
    $106 = $4;
    $107 = ((($106)) + 5816|0);
    $108 = HEAP16[$107>>1]|0;
    $109 = $108&65535;
    $110 = $109 >> 8;
    $111 = $110&255;
    $112 = $4;
    $113 = ((($112)) + 20|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (($114) + 1)|0;
    HEAP32[$113>>2] = $115;
    $116 = $4;
    $117 = ((($116)) + 8|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (($118) + ($114)|0);
    HEAP8[$119>>0] = $111;
    $120 = $12;
    $121 = $120&65535;
    $122 = $121&65535;
    $123 = $4;
    $124 = ((($123)) + 5820|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = (16 - ($125))|0;
    $127 = $122 >> $126;
    $128 = $127&65535;
    $129 = $4;
    $130 = ((($129)) + 5816|0);
    HEAP16[$130>>1] = $128;
    $131 = $11;
    $132 = (($131) - 16)|0;
    $133 = $4;
    $134 = ((($133)) + 5820|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + ($132))|0;
    HEAP32[$134>>2] = $136;
   } else {
    $137 = $78&65535;
    $138 = $137&65535;
    $139 = $4;
    $140 = ((($139)) + 5820|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $138 << $141;
    $143 = $4;
    $144 = ((($143)) + 5816|0);
    $145 = HEAP16[$144>>1]|0;
    $146 = $145&65535;
    $147 = $146 | $142;
    $148 = $147&65535;
    HEAP16[$144>>1] = $148;
    $149 = $11;
    $150 = $4;
    $151 = ((($150)) + 5820|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = (($152) + ($149))|0;
    HEAP32[$151>>2] = $153;
   }
   $154 = $4;
   _compress_block($154,12610,12490);
  }
 } while(0);
 $256 = $4;
 _init_block($256);
 $257 = $7;
 $258 = ($257|0)!=(0);
 if (!($258)) {
  STACKTOP = sp;return;
 }
 $259 = $4;
 _bi_windup($259);
 STACKTOP = sp;return;
}
function _detect_data_type($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = -201342849;
 $4 = 0;
 while(1) {
  $5 = $4;
  $6 = ($5|0)<=(31);
  if (!($6)) {
   break;
  }
  $7 = $3;
  $8 = $7 & 1;
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = $4;
   $11 = $2;
   $12 = ((($11)) + 148|0);
   $13 = (($12) + ($10<<2)|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = $14&65535;
   $16 = ($15|0)!=(0);
   if ($16) {
    label = 5;
    break;
   }
  }
  $17 = $4;
  $18 = (($17) + 1)|0;
  $4 = $18;
  $19 = $3;
  $20 = $19 >>> 1;
  $3 = $20;
 }
 if ((label|0) == 5) {
  $1 = 0;
  $50 = $1;
  STACKTOP = sp;return ($50|0);
 }
 $21 = $2;
 $22 = ((($21)) + 148|0);
 $23 = ((($22)) + 36|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24&65535;
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $27 = $2;
  $28 = ((($27)) + 148|0);
  $29 = ((($28)) + 40|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30&65535;
  $32 = ($31|0)!=(0);
  if (!($32)) {
   $33 = $2;
   $34 = ((($33)) + 148|0);
   $35 = ((($34)) + 52|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = $36&65535;
   $38 = ($37|0)!=(0);
   if (!($38)) {
    $4 = 32;
    while(1) {
     $39 = $4;
     $40 = ($39|0)<(256);
     if (!($40)) {
      label = 16;
      break;
     }
     $41 = $4;
     $42 = $2;
     $43 = ((($42)) + 148|0);
     $44 = (($43) + ($41<<2)|0);
     $45 = HEAP16[$44>>1]|0;
     $46 = $45&65535;
     $47 = ($46|0)!=(0);
     if ($47) {
      label = 14;
      break;
     }
     $48 = $4;
     $49 = (($48) + 1)|0;
     $4 = $49;
    }
    if ((label|0) == 14) {
     $1 = 1;
     $50 = $1;
     STACKTOP = sp;return ($50|0);
    }
    else if ((label|0) == 16) {
     $1 = 0;
     $50 = $1;
     STACKTOP = sp;return ($50|0);
    }
   }
  }
 }
 $1 = 1;
 $50 = $1;
 STACKTOP = sp;return ($50|0);
}
function _build_tree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $11 = $3;
 $12 = HEAP32[$11>>2]|0;
 $4 = $12;
 $13 = $3;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $5 = $16;
 $17 = $3;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $6 = $21;
 $9 = -1;
 $22 = $2;
 $23 = ((($22)) + 5200|0);
 HEAP32[$23>>2] = 0;
 $24 = $2;
 $25 = ((($24)) + 5204|0);
 HEAP32[$25>>2] = 573;
 $7 = 0;
 while(1) {
  $26 = $7;
  $27 = $6;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = $7;
  $30 = $4;
  $31 = (($30) + ($29<<2)|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32&65535;
  $34 = ($33|0)!=(0);
  $35 = $7;
  if ($34) {
   $9 = $35;
   $36 = $2;
   $37 = ((($36)) + 5200|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + 1)|0;
   HEAP32[$37>>2] = $39;
   $40 = $2;
   $41 = ((($40)) + 2908|0);
   $42 = (($41) + ($39<<2)|0);
   HEAP32[$42>>2] = $35;
   $43 = $7;
   $44 = $2;
   $45 = ((($44)) + 5208|0);
   $46 = (($45) + ($43)|0);
   HEAP8[$46>>0] = 0;
  } else {
   $47 = $4;
   $48 = (($47) + ($35<<2)|0);
   $49 = ((($48)) + 2|0);
   HEAP16[$49>>1] = 0;
  }
  $50 = $7;
  $51 = (($50) + 1)|0;
  $7 = $51;
 }
 while(1) {
  $52 = $2;
  $53 = ((($52)) + 5200|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)<(2);
  $56 = $9;
  if (!($55)) {
   break;
  }
  $57 = ($56|0)<(2);
  if ($57) {
   $58 = $9;
   $59 = (($58) + 1)|0;
   $9 = $59;
   $67 = $59;
  } else {
   $67 = 0;
  }
  $60 = $2;
  $61 = ((($60)) + 5200|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + 1)|0;
  HEAP32[$61>>2] = $63;
  $64 = $2;
  $65 = ((($64)) + 2908|0);
  $66 = (($65) + ($63<<2)|0);
  HEAP32[$66>>2] = $67;
  $10 = $67;
  $68 = $10;
  $69 = $4;
  $70 = (($69) + ($68<<2)|0);
  HEAP16[$70>>1] = 1;
  $71 = $10;
  $72 = $2;
  $73 = ((($72)) + 5208|0);
  $74 = (($73) + ($71)|0);
  HEAP8[$74>>0] = 0;
  $75 = $2;
  $76 = ((($75)) + 5800|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + -1)|0;
  HEAP32[$76>>2] = $78;
  $79 = $5;
  $80 = ($79|0)!=(0|0);
  if (!($80)) {
   continue;
  }
  $81 = $10;
  $82 = $5;
  $83 = (($82) + ($81<<2)|0);
  $84 = ((($83)) + 2|0);
  $85 = HEAP16[$84>>1]|0;
  $86 = $85&65535;
  $87 = $2;
  $88 = ((($87)) + 5804|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (($89) - ($86))|0;
  HEAP32[$88>>2] = $90;
 }
 $91 = $3;
 $92 = ((($91)) + 4|0);
 HEAP32[$92>>2] = $56;
 $93 = $2;
 $94 = ((($93)) + 5200|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = (($95|0) / 2)&-1;
 $7 = $96;
 while(1) {
  $97 = $7;
  $98 = ($97|0)>=(1);
  if (!($98)) {
   break;
  }
  $99 = $2;
  $100 = $4;
  $101 = $7;
  _pqdownheap($99,$100,$101);
  $102 = $7;
  $103 = (($102) + -1)|0;
  $7 = $103;
 }
 $104 = $6;
 $10 = $104;
 while(1) {
  $105 = $2;
  $106 = ((($105)) + 2908|0);
  $107 = ((($106)) + 4|0);
  $108 = HEAP32[$107>>2]|0;
  $7 = $108;
  $109 = $2;
  $110 = ((($109)) + 5200|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) + -1)|0;
  HEAP32[$110>>2] = $112;
  $113 = $2;
  $114 = ((($113)) + 2908|0);
  $115 = (($114) + ($111<<2)|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $2;
  $118 = ((($117)) + 2908|0);
  $119 = ((($118)) + 4|0);
  HEAP32[$119>>2] = $116;
  $120 = $2;
  $121 = $4;
  _pqdownheap($120,$121,1);
  $122 = $2;
  $123 = ((($122)) + 2908|0);
  $124 = ((($123)) + 4|0);
  $125 = HEAP32[$124>>2]|0;
  $8 = $125;
  $126 = $7;
  $127 = $2;
  $128 = ((($127)) + 5204|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (($129) + -1)|0;
  HEAP32[$128>>2] = $130;
  $131 = $2;
  $132 = ((($131)) + 2908|0);
  $133 = (($132) + ($130<<2)|0);
  HEAP32[$133>>2] = $126;
  $134 = $8;
  $135 = $2;
  $136 = ((($135)) + 5204|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (($137) + -1)|0;
  HEAP32[$136>>2] = $138;
  $139 = $2;
  $140 = ((($139)) + 2908|0);
  $141 = (($140) + ($138<<2)|0);
  HEAP32[$141>>2] = $134;
  $142 = $7;
  $143 = $4;
  $144 = (($143) + ($142<<2)|0);
  $145 = HEAP16[$144>>1]|0;
  $146 = $145&65535;
  $147 = $8;
  $148 = $4;
  $149 = (($148) + ($147<<2)|0);
  $150 = HEAP16[$149>>1]|0;
  $151 = $150&65535;
  $152 = (($146) + ($151))|0;
  $153 = $152&65535;
  $154 = $10;
  $155 = $4;
  $156 = (($155) + ($154<<2)|0);
  HEAP16[$156>>1] = $153;
  $157 = $7;
  $158 = $2;
  $159 = ((($158)) + 5208|0);
  $160 = (($159) + ($157)|0);
  $161 = HEAP8[$160>>0]|0;
  $162 = $161&255;
  $163 = $8;
  $164 = $2;
  $165 = ((($164)) + 5208|0);
  $166 = (($165) + ($163)|0);
  $167 = HEAP8[$166>>0]|0;
  $168 = $167&255;
  $169 = ($162|0)>=($168|0);
  if ($169) {
   $170 = $7;
   $171 = $2;
   $172 = ((($171)) + 5208|0);
   $173 = (($172) + ($170)|0);
   $174 = HEAP8[$173>>0]|0;
   $$sink = $174;
  } else {
   $175 = $8;
   $176 = $2;
   $177 = ((($176)) + 5208|0);
   $178 = (($177) + ($175)|0);
   $179 = HEAP8[$178>>0]|0;
   $$sink = $179;
  }
  $180 = $$sink&255;
  $181 = (($180) + 1)|0;
  $182 = $181&255;
  $183 = $10;
  $184 = $2;
  $185 = ((($184)) + 5208|0);
  $186 = (($185) + ($183)|0);
  HEAP8[$186>>0] = $182;
  $187 = $10;
  $188 = $187&65535;
  $189 = $8;
  $190 = $4;
  $191 = (($190) + ($189<<2)|0);
  $192 = ((($191)) + 2|0);
  HEAP16[$192>>1] = $188;
  $193 = $7;
  $194 = $4;
  $195 = (($194) + ($193<<2)|0);
  $196 = ((($195)) + 2|0);
  HEAP16[$196>>1] = $188;
  $197 = $10;
  $198 = (($197) + 1)|0;
  $10 = $198;
  $199 = $2;
  $200 = ((($199)) + 2908|0);
  $201 = ((($200)) + 4|0);
  HEAP32[$201>>2] = $197;
  $202 = $2;
  $203 = $4;
  _pqdownheap($202,$203,1);
  $204 = $2;
  $205 = ((($204)) + 5200|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = ($206|0)>=(2);
  if (!($207)) {
   break;
  }
 }
 $208 = $2;
 $209 = ((($208)) + 2908|0);
 $210 = ((($209)) + 4|0);
 $211 = HEAP32[$210>>2]|0;
 $212 = $2;
 $213 = ((($212)) + 5204|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = (($214) + -1)|0;
 HEAP32[$213>>2] = $215;
 $216 = $2;
 $217 = ((($216)) + 2908|0);
 $218 = (($217) + ($215<<2)|0);
 HEAP32[$218>>2] = $211;
 $219 = $2;
 $220 = $3;
 _gen_bitlen($219,$220);
 $221 = $4;
 $222 = $9;
 $223 = $2;
 $224 = ((($223)) + 2876|0);
 _gen_codes($221,$222,$224);
 STACKTOP = sp;return;
}
function _build_bl_tree($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = $1;
 $5 = ((($4)) + 148|0);
 $6 = $1;
 $7 = ((($6)) + 2840|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 _scan_tree($3,$5,$9);
 $10 = $1;
 $11 = $1;
 $12 = ((($11)) + 2440|0);
 $13 = $1;
 $14 = ((($13)) + 2852|0);
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 _scan_tree($10,$12,$16);
 $17 = $1;
 $18 = $1;
 $19 = ((($18)) + 2864|0);
 _build_tree($17,$19);
 $2 = 18;
 while(1) {
  $20 = $2;
  $21 = ($20|0)>=(3);
  if (!($21)) {
   break;
  }
  $22 = $2;
  $23 = (14991 + ($22)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $1;
  $27 = ((($26)) + 2684|0);
  $28 = (($27) + ($25<<2)|0);
  $29 = ((($28)) + 2|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30&65535;
  $32 = ($31|0)!=(0);
  if ($32) {
   break;
  }
  $33 = $2;
  $34 = (($33) + -1)|0;
  $2 = $34;
 }
 $35 = $2;
 $36 = (($35) + 1)|0;
 $37 = ($36*3)|0;
 $38 = (($37) + 5)|0;
 $39 = (($38) + 5)|0;
 $40 = (($39) + 4)|0;
 $41 = $1;
 $42 = ((($41)) + 5800|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + ($40))|0;
 HEAP32[$42>>2] = $44;
 $45 = $2;
 STACKTOP = sp;return ($45|0);
}
function _compress_block($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = 0;
 $23 = $3;
 $24 = ((($23)) + 5792|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0);
 if ($26) {
  while(1) {
   $27 = $8;
   $28 = $3;
   $29 = ((($28)) + 5796|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + ($27<<1)|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = $32&65535;
   $6 = $33;
   $34 = $8;
   $35 = (($34) + 1)|0;
   $8 = $35;
   $36 = $3;
   $37 = ((($36)) + 5784|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + ($34)|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $7 = $41;
   $42 = $6;
   $43 = ($42|0)==(0);
   $44 = $7;
   do {
    if ($43) {
     $45 = $4;
     $46 = (($45) + ($44<<2)|0);
     $47 = ((($46)) + 2|0);
     $48 = HEAP16[$47>>1]|0;
     $49 = $48&65535;
     $11 = $49;
     $50 = $3;
     $51 = ((($50)) + 5820|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = $11;
     $54 = (16 - ($53))|0;
     $55 = ($52|0)>($54|0);
     $56 = $7;
     $57 = $4;
     $58 = (($57) + ($56<<2)|0);
     $59 = HEAP16[$58>>1]|0;
     $60 = $59&65535;
     if ($55) {
      $12 = $60;
      $61 = $12;
      $62 = $61&65535;
      $63 = $62&65535;
      $64 = $3;
      $65 = ((($64)) + 5820|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = $63 << $66;
      $68 = $3;
      $69 = ((($68)) + 5816|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = $70&65535;
      $72 = $71 | $67;
      $73 = $72&65535;
      HEAP16[$69>>1] = $73;
      $74 = $3;
      $75 = ((($74)) + 5816|0);
      $76 = HEAP16[$75>>1]|0;
      $77 = $76&65535;
      $78 = $77 & 255;
      $79 = $78&255;
      $80 = $3;
      $81 = ((($80)) + 20|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = (($82) + 1)|0;
      HEAP32[$81>>2] = $83;
      $84 = $3;
      $85 = ((($84)) + 8|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = (($86) + ($82)|0);
      HEAP8[$87>>0] = $79;
      $88 = $3;
      $89 = ((($88)) + 5816|0);
      $90 = HEAP16[$89>>1]|0;
      $91 = $90&65535;
      $92 = $91 >> 8;
      $93 = $92&255;
      $94 = $3;
      $95 = ((($94)) + 20|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = (($96) + 1)|0;
      HEAP32[$95>>2] = $97;
      $98 = $3;
      $99 = ((($98)) + 8|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = (($100) + ($96)|0);
      HEAP8[$101>>0] = $93;
      $102 = $12;
      $103 = $102&65535;
      $104 = $103&65535;
      $105 = $3;
      $106 = ((($105)) + 5820|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = (16 - ($107))|0;
      $109 = $104 >> $108;
      $110 = $109&65535;
      $111 = $3;
      $112 = ((($111)) + 5816|0);
      HEAP16[$112>>1] = $110;
      $113 = $11;
      $114 = (($113) - 16)|0;
      $115 = $3;
      $116 = ((($115)) + 5820|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = (($117) + ($114))|0;
      HEAP32[$116>>2] = $118;
      break;
     } else {
      $119 = $3;
      $120 = ((($119)) + 5820|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = $60 << $121;
      $123 = $3;
      $124 = ((($123)) + 5816|0);
      $125 = HEAP16[$124>>1]|0;
      $126 = $125&65535;
      $127 = $126 | $122;
      $128 = $127&65535;
      HEAP16[$124>>1] = $128;
      $129 = $11;
      $130 = $3;
      $131 = ((($130)) + 5820|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = (($132) + ($129))|0;
      HEAP32[$131>>2] = $133;
      break;
     }
    } else {
     $134 = (14735 + ($44)|0);
     $135 = HEAP8[$134>>0]|0;
     $136 = $135&255;
     $9 = $136;
     $137 = $9;
     $138 = (($137) + 256)|0;
     $139 = (($138) + 1)|0;
     $140 = $4;
     $141 = (($140) + ($139<<2)|0);
     $142 = ((($141)) + 2|0);
     $143 = HEAP16[$142>>1]|0;
     $144 = $143&65535;
     $13 = $144;
     $145 = $3;
     $146 = ((($145)) + 5820|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = $13;
     $149 = (16 - ($148))|0;
     $150 = ($147|0)>($149|0);
     $151 = $9;
     $152 = (($151) + 256)|0;
     $153 = (($152) + 1)|0;
     $154 = $4;
     $155 = (($154) + ($153<<2)|0);
     $156 = HEAP16[$155>>1]|0;
     $157 = $156&65535;
     if ($150) {
      $14 = $157;
      $158 = $14;
      $159 = $158&65535;
      $160 = $159&65535;
      $161 = $3;
      $162 = ((($161)) + 5820|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = $160 << $163;
      $165 = $3;
      $166 = ((($165)) + 5816|0);
      $167 = HEAP16[$166>>1]|0;
      $168 = $167&65535;
      $169 = $168 | $164;
      $170 = $169&65535;
      HEAP16[$166>>1] = $170;
      $171 = $3;
      $172 = ((($171)) + 5816|0);
      $173 = HEAP16[$172>>1]|0;
      $174 = $173&65535;
      $175 = $174 & 255;
      $176 = $175&255;
      $177 = $3;
      $178 = ((($177)) + 20|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = (($179) + 1)|0;
      HEAP32[$178>>2] = $180;
      $181 = $3;
      $182 = ((($181)) + 8|0);
      $183 = HEAP32[$182>>2]|0;
      $184 = (($183) + ($179)|0);
      HEAP8[$184>>0] = $176;
      $185 = $3;
      $186 = ((($185)) + 5816|0);
      $187 = HEAP16[$186>>1]|0;
      $188 = $187&65535;
      $189 = $188 >> 8;
      $190 = $189&255;
      $191 = $3;
      $192 = ((($191)) + 20|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = (($193) + 1)|0;
      HEAP32[$192>>2] = $194;
      $195 = $3;
      $196 = ((($195)) + 8|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = (($197) + ($193)|0);
      HEAP8[$198>>0] = $190;
      $199 = $14;
      $200 = $199&65535;
      $201 = $200&65535;
      $202 = $3;
      $203 = ((($202)) + 5820|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = (16 - ($204))|0;
      $206 = $201 >> $205;
      $207 = $206&65535;
      $208 = $3;
      $209 = ((($208)) + 5816|0);
      HEAP16[$209>>1] = $207;
      $210 = $13;
      $211 = (($210) - 16)|0;
      $212 = $3;
      $213 = ((($212)) + 5820|0);
      $214 = HEAP32[$213>>2]|0;
      $215 = (($214) + ($211))|0;
      HEAP32[$213>>2] = $215;
     } else {
      $216 = $3;
      $217 = ((($216)) + 5820|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $157 << $218;
      $220 = $3;
      $221 = ((($220)) + 5816|0);
      $222 = HEAP16[$221>>1]|0;
      $223 = $222&65535;
      $224 = $223 | $219;
      $225 = $224&65535;
      HEAP16[$221>>1] = $225;
      $226 = $13;
      $227 = $3;
      $228 = ((($227)) + 5820|0);
      $229 = HEAP32[$228>>2]|0;
      $230 = (($229) + ($226))|0;
      HEAP32[$228>>2] = $230;
     }
     $231 = $9;
     $232 = (8576 + ($231<<2)|0);
     $233 = HEAP32[$232>>2]|0;
     $10 = $233;
     $234 = $10;
     $235 = ($234|0)!=(0);
     do {
      if ($235) {
       $236 = $9;
       $237 = (8692 + ($236<<2)|0);
       $238 = HEAP32[$237>>2]|0;
       $239 = $7;
       $240 = (($239) - ($238))|0;
       $7 = $240;
       $241 = $10;
       $15 = $241;
       $242 = $3;
       $243 = ((($242)) + 5820|0);
       $244 = HEAP32[$243>>2]|0;
       $245 = $15;
       $246 = (16 - ($245))|0;
       $247 = ($244|0)>($246|0);
       $248 = $7;
       if ($247) {
        $16 = $248;
        $249 = $16;
        $250 = $249&65535;
        $251 = $250&65535;
        $252 = $3;
        $253 = ((($252)) + 5820|0);
        $254 = HEAP32[$253>>2]|0;
        $255 = $251 << $254;
        $256 = $3;
        $257 = ((($256)) + 5816|0);
        $258 = HEAP16[$257>>1]|0;
        $259 = $258&65535;
        $260 = $259 | $255;
        $261 = $260&65535;
        HEAP16[$257>>1] = $261;
        $262 = $3;
        $263 = ((($262)) + 5816|0);
        $264 = HEAP16[$263>>1]|0;
        $265 = $264&65535;
        $266 = $265 & 255;
        $267 = $266&255;
        $268 = $3;
        $269 = ((($268)) + 20|0);
        $270 = HEAP32[$269>>2]|0;
        $271 = (($270) + 1)|0;
        HEAP32[$269>>2] = $271;
        $272 = $3;
        $273 = ((($272)) + 8|0);
        $274 = HEAP32[$273>>2]|0;
        $275 = (($274) + ($270)|0);
        HEAP8[$275>>0] = $267;
        $276 = $3;
        $277 = ((($276)) + 5816|0);
        $278 = HEAP16[$277>>1]|0;
        $279 = $278&65535;
        $280 = $279 >> 8;
        $281 = $280&255;
        $282 = $3;
        $283 = ((($282)) + 20|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = (($284) + 1)|0;
        HEAP32[$283>>2] = $285;
        $286 = $3;
        $287 = ((($286)) + 8|0);
        $288 = HEAP32[$287>>2]|0;
        $289 = (($288) + ($284)|0);
        HEAP8[$289>>0] = $281;
        $290 = $16;
        $291 = $290&65535;
        $292 = $291&65535;
        $293 = $3;
        $294 = ((($293)) + 5820|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = (16 - ($295))|0;
        $297 = $292 >> $296;
        $298 = $297&65535;
        $299 = $3;
        $300 = ((($299)) + 5816|0);
        HEAP16[$300>>1] = $298;
        $301 = $15;
        $302 = (($301) - 16)|0;
        $303 = $3;
        $304 = ((($303)) + 5820|0);
        $305 = HEAP32[$304>>2]|0;
        $306 = (($305) + ($302))|0;
        HEAP32[$304>>2] = $306;
        break;
       } else {
        $307 = $248&65535;
        $308 = $307&65535;
        $309 = $3;
        $310 = ((($309)) + 5820|0);
        $311 = HEAP32[$310>>2]|0;
        $312 = $308 << $311;
        $313 = $3;
        $314 = ((($313)) + 5816|0);
        $315 = HEAP16[$314>>1]|0;
        $316 = $315&65535;
        $317 = $316 | $312;
        $318 = $317&65535;
        HEAP16[$314>>1] = $318;
        $319 = $15;
        $320 = $3;
        $321 = ((($320)) + 5820|0);
        $322 = HEAP32[$321>>2]|0;
        $323 = (($322) + ($319))|0;
        HEAP32[$321>>2] = $323;
        break;
       }
      }
     } while(0);
     $324 = $6;
     $325 = (($324) + -1)|0;
     $6 = $325;
     $326 = $6;
     $327 = ($326>>>0)<(256);
     $328 = $6;
     if ($327) {
      $329 = (14223 + ($328)|0);
      $330 = HEAP8[$329>>0]|0;
      $$sink = $330;
     } else {
      $331 = $328 >>> 7;
      $332 = (256 + ($331))|0;
      $333 = (14223 + ($332)|0);
      $334 = HEAP8[$333>>0]|0;
      $$sink = $334;
     }
     $335 = $$sink&255;
     $9 = $335;
     $336 = $9;
     $337 = $5;
     $338 = (($337) + ($336<<2)|0);
     $339 = ((($338)) + 2|0);
     $340 = HEAP16[$339>>1]|0;
     $341 = $340&65535;
     $17 = $341;
     $342 = $3;
     $343 = ((($342)) + 5820|0);
     $344 = HEAP32[$343>>2]|0;
     $345 = $17;
     $346 = (16 - ($345))|0;
     $347 = ($344|0)>($346|0);
     $348 = $9;
     $349 = $5;
     $350 = (($349) + ($348<<2)|0);
     $351 = HEAP16[$350>>1]|0;
     $352 = $351&65535;
     if ($347) {
      $18 = $352;
      $353 = $18;
      $354 = $353&65535;
      $355 = $354&65535;
      $356 = $3;
      $357 = ((($356)) + 5820|0);
      $358 = HEAP32[$357>>2]|0;
      $359 = $355 << $358;
      $360 = $3;
      $361 = ((($360)) + 5816|0);
      $362 = HEAP16[$361>>1]|0;
      $363 = $362&65535;
      $364 = $363 | $359;
      $365 = $364&65535;
      HEAP16[$361>>1] = $365;
      $366 = $3;
      $367 = ((($366)) + 5816|0);
      $368 = HEAP16[$367>>1]|0;
      $369 = $368&65535;
      $370 = $369 & 255;
      $371 = $370&255;
      $372 = $3;
      $373 = ((($372)) + 20|0);
      $374 = HEAP32[$373>>2]|0;
      $375 = (($374) + 1)|0;
      HEAP32[$373>>2] = $375;
      $376 = $3;
      $377 = ((($376)) + 8|0);
      $378 = HEAP32[$377>>2]|0;
      $379 = (($378) + ($374)|0);
      HEAP8[$379>>0] = $371;
      $380 = $3;
      $381 = ((($380)) + 5816|0);
      $382 = HEAP16[$381>>1]|0;
      $383 = $382&65535;
      $384 = $383 >> 8;
      $385 = $384&255;
      $386 = $3;
      $387 = ((($386)) + 20|0);
      $388 = HEAP32[$387>>2]|0;
      $389 = (($388) + 1)|0;
      HEAP32[$387>>2] = $389;
      $390 = $3;
      $391 = ((($390)) + 8|0);
      $392 = HEAP32[$391>>2]|0;
      $393 = (($392) + ($388)|0);
      HEAP8[$393>>0] = $385;
      $394 = $18;
      $395 = $394&65535;
      $396 = $395&65535;
      $397 = $3;
      $398 = ((($397)) + 5820|0);
      $399 = HEAP32[$398>>2]|0;
      $400 = (16 - ($399))|0;
      $401 = $396 >> $400;
      $402 = $401&65535;
      $403 = $3;
      $404 = ((($403)) + 5816|0);
      HEAP16[$404>>1] = $402;
      $405 = $17;
      $406 = (($405) - 16)|0;
      $407 = $3;
      $408 = ((($407)) + 5820|0);
      $409 = HEAP32[$408>>2]|0;
      $410 = (($409) + ($406))|0;
      HEAP32[$408>>2] = $410;
     } else {
      $411 = $3;
      $412 = ((($411)) + 5820|0);
      $413 = HEAP32[$412>>2]|0;
      $414 = $352 << $413;
      $415 = $3;
      $416 = ((($415)) + 5816|0);
      $417 = HEAP16[$416>>1]|0;
      $418 = $417&65535;
      $419 = $418 | $414;
      $420 = $419&65535;
      HEAP16[$416>>1] = $420;
      $421 = $17;
      $422 = $3;
      $423 = ((($422)) + 5820|0);
      $424 = HEAP32[$423>>2]|0;
      $425 = (($424) + ($421))|0;
      HEAP32[$423>>2] = $425;
     }
     $426 = $9;
     $427 = (8456 + ($426<<2)|0);
     $428 = HEAP32[$427>>2]|0;
     $10 = $428;
     $429 = $10;
     $430 = ($429|0)!=(0);
     if ($430) {
      $431 = $9;
      $432 = (8808 + ($431<<2)|0);
      $433 = HEAP32[$432>>2]|0;
      $434 = $6;
      $435 = (($434) - ($433))|0;
      $6 = $435;
      $436 = $10;
      $19 = $436;
      $437 = $3;
      $438 = ((($437)) + 5820|0);
      $439 = HEAP32[$438>>2]|0;
      $440 = $19;
      $441 = (16 - ($440))|0;
      $442 = ($439|0)>($441|0);
      $443 = $6;
      if ($442) {
       $20 = $443;
       $444 = $20;
       $445 = $444&65535;
       $446 = $445&65535;
       $447 = $3;
       $448 = ((($447)) + 5820|0);
       $449 = HEAP32[$448>>2]|0;
       $450 = $446 << $449;
       $451 = $3;
       $452 = ((($451)) + 5816|0);
       $453 = HEAP16[$452>>1]|0;
       $454 = $453&65535;
       $455 = $454 | $450;
       $456 = $455&65535;
       HEAP16[$452>>1] = $456;
       $457 = $3;
       $458 = ((($457)) + 5816|0);
       $459 = HEAP16[$458>>1]|0;
       $460 = $459&65535;
       $461 = $460 & 255;
       $462 = $461&255;
       $463 = $3;
       $464 = ((($463)) + 20|0);
       $465 = HEAP32[$464>>2]|0;
       $466 = (($465) + 1)|0;
       HEAP32[$464>>2] = $466;
       $467 = $3;
       $468 = ((($467)) + 8|0);
       $469 = HEAP32[$468>>2]|0;
       $470 = (($469) + ($465)|0);
       HEAP8[$470>>0] = $462;
       $471 = $3;
       $472 = ((($471)) + 5816|0);
       $473 = HEAP16[$472>>1]|0;
       $474 = $473&65535;
       $475 = $474 >> 8;
       $476 = $475&255;
       $477 = $3;
       $478 = ((($477)) + 20|0);
       $479 = HEAP32[$478>>2]|0;
       $480 = (($479) + 1)|0;
       HEAP32[$478>>2] = $480;
       $481 = $3;
       $482 = ((($481)) + 8|0);
       $483 = HEAP32[$482>>2]|0;
       $484 = (($483) + ($479)|0);
       HEAP8[$484>>0] = $476;
       $485 = $20;
       $486 = $485&65535;
       $487 = $486&65535;
       $488 = $3;
       $489 = ((($488)) + 5820|0);
       $490 = HEAP32[$489>>2]|0;
       $491 = (16 - ($490))|0;
       $492 = $487 >> $491;
       $493 = $492&65535;
       $494 = $3;
       $495 = ((($494)) + 5816|0);
       HEAP16[$495>>1] = $493;
       $496 = $19;
       $497 = (($496) - 16)|0;
       $498 = $3;
       $499 = ((($498)) + 5820|0);
       $500 = HEAP32[$499>>2]|0;
       $501 = (($500) + ($497))|0;
       HEAP32[$499>>2] = $501;
       break;
      } else {
       $502 = $443&65535;
       $503 = $502&65535;
       $504 = $3;
       $505 = ((($504)) + 5820|0);
       $506 = HEAP32[$505>>2]|0;
       $507 = $503 << $506;
       $508 = $3;
       $509 = ((($508)) + 5816|0);
       $510 = HEAP16[$509>>1]|0;
       $511 = $510&65535;
       $512 = $511 | $507;
       $513 = $512&65535;
       HEAP16[$509>>1] = $513;
       $514 = $19;
       $515 = $3;
       $516 = ((($515)) + 5820|0);
       $517 = HEAP32[$516>>2]|0;
       $518 = (($517) + ($514))|0;
       HEAP32[$516>>2] = $518;
       break;
      }
     }
    }
   } while(0);
   $519 = $8;
   $520 = $3;
   $521 = ((($520)) + 5792|0);
   $522 = HEAP32[$521>>2]|0;
   $523 = ($519>>>0)<($522>>>0);
   if (!($523)) {
    break;
   }
  }
 }
 $524 = $4;
 $525 = ((($524)) + 1024|0);
 $526 = ((($525)) + 2|0);
 $527 = HEAP16[$526>>1]|0;
 $528 = $527&65535;
 $21 = $528;
 $529 = $3;
 $530 = ((($529)) + 5820|0);
 $531 = HEAP32[$530>>2]|0;
 $532 = $21;
 $533 = (16 - ($532))|0;
 $534 = ($531|0)>($533|0);
 $535 = $4;
 $536 = ((($535)) + 1024|0);
 $537 = HEAP16[$536>>1]|0;
 $538 = $537&65535;
 if ($534) {
  $22 = $538;
  $539 = $22;
  $540 = $539&65535;
  $541 = $540&65535;
  $542 = $3;
  $543 = ((($542)) + 5820|0);
  $544 = HEAP32[$543>>2]|0;
  $545 = $541 << $544;
  $546 = $3;
  $547 = ((($546)) + 5816|0);
  $548 = HEAP16[$547>>1]|0;
  $549 = $548&65535;
  $550 = $549 | $545;
  $551 = $550&65535;
  HEAP16[$547>>1] = $551;
  $552 = $3;
  $553 = ((($552)) + 5816|0);
  $554 = HEAP16[$553>>1]|0;
  $555 = $554&65535;
  $556 = $555 & 255;
  $557 = $556&255;
  $558 = $3;
  $559 = ((($558)) + 20|0);
  $560 = HEAP32[$559>>2]|0;
  $561 = (($560) + 1)|0;
  HEAP32[$559>>2] = $561;
  $562 = $3;
  $563 = ((($562)) + 8|0);
  $564 = HEAP32[$563>>2]|0;
  $565 = (($564) + ($560)|0);
  HEAP8[$565>>0] = $557;
  $566 = $3;
  $567 = ((($566)) + 5816|0);
  $568 = HEAP16[$567>>1]|0;
  $569 = $568&65535;
  $570 = $569 >> 8;
  $571 = $570&255;
  $572 = $3;
  $573 = ((($572)) + 20|0);
  $574 = HEAP32[$573>>2]|0;
  $575 = (($574) + 1)|0;
  HEAP32[$573>>2] = $575;
  $576 = $3;
  $577 = ((($576)) + 8|0);
  $578 = HEAP32[$577>>2]|0;
  $579 = (($578) + ($574)|0);
  HEAP8[$579>>0] = $571;
  $580 = $22;
  $581 = $580&65535;
  $582 = $581&65535;
  $583 = $3;
  $584 = ((($583)) + 5820|0);
  $585 = HEAP32[$584>>2]|0;
  $586 = (16 - ($585))|0;
  $587 = $582 >> $586;
  $588 = $587&65535;
  $589 = $3;
  $590 = ((($589)) + 5816|0);
  HEAP16[$590>>1] = $588;
  $591 = $21;
  $592 = (($591) - 16)|0;
  $593 = $3;
  $594 = ((($593)) + 5820|0);
  $595 = HEAP32[$594>>2]|0;
  $596 = (($595) + ($592))|0;
  HEAP32[$594>>2] = $596;
  STACKTOP = sp;return;
 } else {
  $597 = $3;
  $598 = ((($597)) + 5820|0);
  $599 = HEAP32[$598>>2]|0;
  $600 = $538 << $599;
  $601 = $3;
  $602 = ((($601)) + 5816|0);
  $603 = HEAP16[$602>>1]|0;
  $604 = $603&65535;
  $605 = $604 | $600;
  $606 = $605&65535;
  HEAP16[$602>>1] = $606;
  $607 = $21;
  $608 = $3;
  $609 = ((($608)) + 5820|0);
  $610 = HEAP32[$609>>2]|0;
  $611 = (($610) + ($607))|0;
  HEAP32[$609>>2] = $611;
  STACKTOP = sp;return;
 }
}
function _send_all_trees($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = 5;
 $17 = $4;
 $18 = ((($17)) + 5820|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $9;
 $21 = (16 - ($20))|0;
 $22 = ($19|0)>($21|0);
 $23 = $5;
 $24 = (($23) - 257)|0;
 if ($22) {
  $10 = $24;
  $25 = $10;
  $26 = $25&65535;
  $27 = $26&65535;
  $28 = $4;
  $29 = ((($28)) + 5820|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $27 << $30;
  $32 = $4;
  $33 = ((($32)) + 5816|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34&65535;
  $36 = $35 | $31;
  $37 = $36&65535;
  HEAP16[$33>>1] = $37;
  $38 = $4;
  $39 = ((($38)) + 5816|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40&65535;
  $42 = $41 & 255;
  $43 = $42&255;
  $44 = $4;
  $45 = ((($44)) + 20|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + 1)|0;
  HEAP32[$45>>2] = $47;
  $48 = $4;
  $49 = ((($48)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + ($46)|0);
  HEAP8[$51>>0] = $43;
  $52 = $4;
  $53 = ((($52)) + 5816|0);
  $54 = HEAP16[$53>>1]|0;
  $55 = $54&65535;
  $56 = $55 >> 8;
  $57 = $56&255;
  $58 = $4;
  $59 = ((($58)) + 20|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) + 1)|0;
  HEAP32[$59>>2] = $61;
  $62 = $4;
  $63 = ((($62)) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + ($60)|0);
  HEAP8[$65>>0] = $57;
  $66 = $10;
  $67 = $66&65535;
  $68 = $67&65535;
  $69 = $4;
  $70 = ((($69)) + 5820|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (16 - ($71))|0;
  $73 = $68 >> $72;
  $74 = $73&65535;
  $75 = $4;
  $76 = ((($75)) + 5816|0);
  HEAP16[$76>>1] = $74;
  $77 = $9;
  $78 = (($77) - 16)|0;
  $79 = $4;
  $80 = ((($79)) + 5820|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + ($78))|0;
  HEAP32[$80>>2] = $82;
 } else {
  $83 = $24&65535;
  $84 = $83&65535;
  $85 = $4;
  $86 = ((($85)) + 5820|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $84 << $87;
  $89 = $4;
  $90 = ((($89)) + 5816|0);
  $91 = HEAP16[$90>>1]|0;
  $92 = $91&65535;
  $93 = $92 | $88;
  $94 = $93&65535;
  HEAP16[$90>>1] = $94;
  $95 = $9;
  $96 = $4;
  $97 = ((($96)) + 5820|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + ($95))|0;
  HEAP32[$97>>2] = $99;
 }
 $11 = 5;
 $100 = $4;
 $101 = ((($100)) + 5820|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = $11;
 $104 = (16 - ($103))|0;
 $105 = ($102|0)>($104|0);
 $106 = $6;
 $107 = (($106) - 1)|0;
 if ($105) {
  $12 = $107;
  $108 = $12;
  $109 = $108&65535;
  $110 = $109&65535;
  $111 = $4;
  $112 = ((($111)) + 5820|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $110 << $113;
  $115 = $4;
  $116 = ((($115)) + 5816|0);
  $117 = HEAP16[$116>>1]|0;
  $118 = $117&65535;
  $119 = $118 | $114;
  $120 = $119&65535;
  HEAP16[$116>>1] = $120;
  $121 = $4;
  $122 = ((($121)) + 5816|0);
  $123 = HEAP16[$122>>1]|0;
  $124 = $123&65535;
  $125 = $124 & 255;
  $126 = $125&255;
  $127 = $4;
  $128 = ((($127)) + 20|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (($129) + 1)|0;
  HEAP32[$128>>2] = $130;
  $131 = $4;
  $132 = ((($131)) + 8|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (($133) + ($129)|0);
  HEAP8[$134>>0] = $126;
  $135 = $4;
  $136 = ((($135)) + 5816|0);
  $137 = HEAP16[$136>>1]|0;
  $138 = $137&65535;
  $139 = $138 >> 8;
  $140 = $139&255;
  $141 = $4;
  $142 = ((($141)) + 20|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (($143) + 1)|0;
  HEAP32[$142>>2] = $144;
  $145 = $4;
  $146 = ((($145)) + 8|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($147) + ($143)|0);
  HEAP8[$148>>0] = $140;
  $149 = $12;
  $150 = $149&65535;
  $151 = $150&65535;
  $152 = $4;
  $153 = ((($152)) + 5820|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (16 - ($154))|0;
  $156 = $151 >> $155;
  $157 = $156&65535;
  $158 = $4;
  $159 = ((($158)) + 5816|0);
  HEAP16[$159>>1] = $157;
  $160 = $11;
  $161 = (($160) - 16)|0;
  $162 = $4;
  $163 = ((($162)) + 5820|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (($164) + ($161))|0;
  HEAP32[$163>>2] = $165;
 } else {
  $166 = $107&65535;
  $167 = $166&65535;
  $168 = $4;
  $169 = ((($168)) + 5820|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = $167 << $170;
  $172 = $4;
  $173 = ((($172)) + 5816|0);
  $174 = HEAP16[$173>>1]|0;
  $175 = $174&65535;
  $176 = $175 | $171;
  $177 = $176&65535;
  HEAP16[$173>>1] = $177;
  $178 = $11;
  $179 = $4;
  $180 = ((($179)) + 5820|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = (($181) + ($178))|0;
  HEAP32[$180>>2] = $182;
 }
 $13 = 4;
 $183 = $4;
 $184 = ((($183)) + 5820|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = $13;
 $187 = (16 - ($186))|0;
 $188 = ($185|0)>($187|0);
 $189 = $7;
 $190 = (($189) - 4)|0;
 if ($188) {
  $14 = $190;
  $191 = $14;
  $192 = $191&65535;
  $193 = $192&65535;
  $194 = $4;
  $195 = ((($194)) + 5820|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = $193 << $196;
  $198 = $4;
  $199 = ((($198)) + 5816|0);
  $200 = HEAP16[$199>>1]|0;
  $201 = $200&65535;
  $202 = $201 | $197;
  $203 = $202&65535;
  HEAP16[$199>>1] = $203;
  $204 = $4;
  $205 = ((($204)) + 5816|0);
  $206 = HEAP16[$205>>1]|0;
  $207 = $206&65535;
  $208 = $207 & 255;
  $209 = $208&255;
  $210 = $4;
  $211 = ((($210)) + 20|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = (($212) + 1)|0;
  HEAP32[$211>>2] = $213;
  $214 = $4;
  $215 = ((($214)) + 8|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = (($216) + ($212)|0);
  HEAP8[$217>>0] = $209;
  $218 = $4;
  $219 = ((($218)) + 5816|0);
  $220 = HEAP16[$219>>1]|0;
  $221 = $220&65535;
  $222 = $221 >> 8;
  $223 = $222&255;
  $224 = $4;
  $225 = ((($224)) + 20|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = (($226) + 1)|0;
  HEAP32[$225>>2] = $227;
  $228 = $4;
  $229 = ((($228)) + 8|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = (($230) + ($226)|0);
  HEAP8[$231>>0] = $223;
  $232 = $14;
  $233 = $232&65535;
  $234 = $233&65535;
  $235 = $4;
  $236 = ((($235)) + 5820|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = (16 - ($237))|0;
  $239 = $234 >> $238;
  $240 = $239&65535;
  $241 = $4;
  $242 = ((($241)) + 5816|0);
  HEAP16[$242>>1] = $240;
  $243 = $13;
  $244 = (($243) - 16)|0;
  $245 = $4;
  $246 = ((($245)) + 5820|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = (($247) + ($244))|0;
  HEAP32[$246>>2] = $248;
 } else {
  $249 = $190&65535;
  $250 = $249&65535;
  $251 = $4;
  $252 = ((($251)) + 5820|0);
  $253 = HEAP32[$252>>2]|0;
  $254 = $250 << $253;
  $255 = $4;
  $256 = ((($255)) + 5816|0);
  $257 = HEAP16[$256>>1]|0;
  $258 = $257&65535;
  $259 = $258 | $254;
  $260 = $259&65535;
  HEAP16[$256>>1] = $260;
  $261 = $13;
  $262 = $4;
  $263 = ((($262)) + 5820|0);
  $264 = HEAP32[$263>>2]|0;
  $265 = (($264) + ($261))|0;
  HEAP32[$263>>2] = $265;
 }
 $8 = 0;
 while(1) {
  $266 = $8;
  $267 = $7;
  $268 = ($266|0)<($267|0);
  if (!($268)) {
   break;
  }
  $15 = 3;
  $269 = $4;
  $270 = ((($269)) + 5820|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = $15;
  $273 = (16 - ($272))|0;
  $274 = ($271|0)>($273|0);
  $275 = $8;
  $276 = (14991 + ($275)|0);
  $277 = HEAP8[$276>>0]|0;
  $278 = $277&255;
  $279 = $4;
  $280 = ((($279)) + 2684|0);
  $281 = (($280) + ($278<<2)|0);
  $282 = ((($281)) + 2|0);
  $283 = HEAP16[$282>>1]|0;
  $284 = $283&65535;
  if ($274) {
   $16 = $284;
   $285 = $16;
   $286 = $285&65535;
   $287 = $286&65535;
   $288 = $4;
   $289 = ((($288)) + 5820|0);
   $290 = HEAP32[$289>>2]|0;
   $291 = $287 << $290;
   $292 = $4;
   $293 = ((($292)) + 5816|0);
   $294 = HEAP16[$293>>1]|0;
   $295 = $294&65535;
   $296 = $295 | $291;
   $297 = $296&65535;
   HEAP16[$293>>1] = $297;
   $298 = $4;
   $299 = ((($298)) + 5816|0);
   $300 = HEAP16[$299>>1]|0;
   $301 = $300&65535;
   $302 = $301 & 255;
   $303 = $302&255;
   $304 = $4;
   $305 = ((($304)) + 20|0);
   $306 = HEAP32[$305>>2]|0;
   $307 = (($306) + 1)|0;
   HEAP32[$305>>2] = $307;
   $308 = $4;
   $309 = ((($308)) + 8|0);
   $310 = HEAP32[$309>>2]|0;
   $311 = (($310) + ($306)|0);
   HEAP8[$311>>0] = $303;
   $312 = $4;
   $313 = ((($312)) + 5816|0);
   $314 = HEAP16[$313>>1]|0;
   $315 = $314&65535;
   $316 = $315 >> 8;
   $317 = $316&255;
   $318 = $4;
   $319 = ((($318)) + 20|0);
   $320 = HEAP32[$319>>2]|0;
   $321 = (($320) + 1)|0;
   HEAP32[$319>>2] = $321;
   $322 = $4;
   $323 = ((($322)) + 8|0);
   $324 = HEAP32[$323>>2]|0;
   $325 = (($324) + ($320)|0);
   HEAP8[$325>>0] = $317;
   $326 = $16;
   $327 = $326&65535;
   $328 = $327&65535;
   $329 = $4;
   $330 = ((($329)) + 5820|0);
   $331 = HEAP32[$330>>2]|0;
   $332 = (16 - ($331))|0;
   $333 = $328 >> $332;
   $334 = $333&65535;
   $335 = $4;
   $336 = ((($335)) + 5816|0);
   HEAP16[$336>>1] = $334;
   $337 = $15;
   $338 = (($337) - 16)|0;
   $339 = $4;
   $340 = ((($339)) + 5820|0);
   $341 = HEAP32[$340>>2]|0;
   $342 = (($341) + ($338))|0;
   HEAP32[$340>>2] = $342;
  } else {
   $343 = $4;
   $344 = ((($343)) + 5820|0);
   $345 = HEAP32[$344>>2]|0;
   $346 = $284 << $345;
   $347 = $4;
   $348 = ((($347)) + 5816|0);
   $349 = HEAP16[$348>>1]|0;
   $350 = $349&65535;
   $351 = $350 | $346;
   $352 = $351&65535;
   HEAP16[$348>>1] = $352;
   $353 = $15;
   $354 = $4;
   $355 = ((($354)) + 5820|0);
   $356 = HEAP32[$355>>2]|0;
   $357 = (($356) + ($353))|0;
   HEAP32[$355>>2] = $357;
  }
  $358 = $8;
  $359 = (($358) + 1)|0;
  $8 = $359;
 }
 $360 = $4;
 $361 = $4;
 $362 = ((($361)) + 148|0);
 $363 = $5;
 $364 = (($363) - 1)|0;
 _send_tree($360,$362,$364);
 $365 = $4;
 $366 = $4;
 $367 = ((($366)) + 2440|0);
 $368 = $6;
 $369 = (($368) - 1)|0;
 _send_tree($365,$367,$369);
 STACKTOP = sp;return;
}
function _send_tree($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = -1;
 $29 = $4;
 $30 = ((($29)) + 2|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $9 = $32;
 $10 = 0;
 $11 = 7;
 $12 = 4;
 $33 = $9;
 $34 = ($33|0)==(0);
 if ($34) {
  $11 = 138;
  $12 = 3;
 }
 $6 = 0;
 while(1) {
  $35 = $6;
  $36 = $5;
  $37 = ($35|0)<=($36|0);
  if (!($37)) {
   break;
  }
  $38 = $9;
  $8 = $38;
  $39 = $6;
  $40 = (($39) + 1)|0;
  $41 = $4;
  $42 = (($41) + ($40<<2)|0);
  $43 = ((($42)) + 2|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44&65535;
  $9 = $45;
  $46 = $10;
  $47 = (($46) + 1)|0;
  $10 = $47;
  $48 = $11;
  $49 = ($47|0)<($48|0);
  if ($49) {
   $50 = $8;
   $51 = $9;
   $52 = ($50|0)==($51|0);
   if (!($52)) {
    label = 7;
   }
  } else {
   label = 7;
  }
  do {
   if ((label|0) == 7) {
    label = 0;
    $53 = $10;
    $54 = $12;
    $55 = ($53|0)<($54|0);
    do {
     if ($55) {
      while(1) {
       $56 = $8;
       $57 = $3;
       $58 = ((($57)) + 2684|0);
       $59 = (($58) + ($56<<2)|0);
       $60 = ((($59)) + 2|0);
       $61 = HEAP16[$60>>1]|0;
       $62 = $61&65535;
       $13 = $62;
       $63 = $3;
       $64 = ((($63)) + 5820|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = $13;
       $67 = (16 - ($66))|0;
       $68 = ($65|0)>($67|0);
       $69 = $8;
       $70 = $3;
       $71 = ((($70)) + 2684|0);
       $72 = (($71) + ($69<<2)|0);
       $73 = HEAP16[$72>>1]|0;
       $74 = $73&65535;
       if ($68) {
        $14 = $74;
        $75 = $14;
        $76 = $75&65535;
        $77 = $76&65535;
        $78 = $3;
        $79 = ((($78)) + 5820|0);
        $80 = HEAP32[$79>>2]|0;
        $81 = $77 << $80;
        $82 = $3;
        $83 = ((($82)) + 5816|0);
        $84 = HEAP16[$83>>1]|0;
        $85 = $84&65535;
        $86 = $85 | $81;
        $87 = $86&65535;
        HEAP16[$83>>1] = $87;
        $88 = $3;
        $89 = ((($88)) + 5816|0);
        $90 = HEAP16[$89>>1]|0;
        $91 = $90&65535;
        $92 = $91 & 255;
        $93 = $92&255;
        $94 = $3;
        $95 = ((($94)) + 20|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = (($96) + 1)|0;
        HEAP32[$95>>2] = $97;
        $98 = $3;
        $99 = ((($98)) + 8|0);
        $100 = HEAP32[$99>>2]|0;
        $101 = (($100) + ($96)|0);
        HEAP8[$101>>0] = $93;
        $102 = $3;
        $103 = ((($102)) + 5816|0);
        $104 = HEAP16[$103>>1]|0;
        $105 = $104&65535;
        $106 = $105 >> 8;
        $107 = $106&255;
        $108 = $3;
        $109 = ((($108)) + 20|0);
        $110 = HEAP32[$109>>2]|0;
        $111 = (($110) + 1)|0;
        HEAP32[$109>>2] = $111;
        $112 = $3;
        $113 = ((($112)) + 8|0);
        $114 = HEAP32[$113>>2]|0;
        $115 = (($114) + ($110)|0);
        HEAP8[$115>>0] = $107;
        $116 = $14;
        $117 = $116&65535;
        $118 = $117&65535;
        $119 = $3;
        $120 = ((($119)) + 5820|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = (16 - ($121))|0;
        $123 = $118 >> $122;
        $124 = $123&65535;
        $125 = $3;
        $126 = ((($125)) + 5816|0);
        HEAP16[$126>>1] = $124;
        $127 = $13;
        $128 = (($127) - 16)|0;
        $129 = $3;
        $130 = ((($129)) + 5820|0);
        $131 = HEAP32[$130>>2]|0;
        $132 = (($131) + ($128))|0;
        HEAP32[$130>>2] = $132;
       } else {
        $133 = $3;
        $134 = ((($133)) + 5820|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = $74 << $135;
        $137 = $3;
        $138 = ((($137)) + 5816|0);
        $139 = HEAP16[$138>>1]|0;
        $140 = $139&65535;
        $141 = $140 | $136;
        $142 = $141&65535;
        HEAP16[$138>>1] = $142;
        $143 = $13;
        $144 = $3;
        $145 = ((($144)) + 5820|0);
        $146 = HEAP32[$145>>2]|0;
        $147 = (($146) + ($143))|0;
        HEAP32[$145>>2] = $147;
       }
       $148 = $10;
       $149 = (($148) + -1)|0;
       $10 = $149;
       $150 = ($149|0)!=(0);
       if (!($150)) {
        break;
       }
      }
     } else {
      $151 = $8;
      $152 = ($151|0)!=(0);
      if ($152) {
       $153 = $8;
       $154 = $7;
       $155 = ($153|0)!=($154|0);
       if ($155) {
        $156 = $8;
        $157 = $3;
        $158 = ((($157)) + 2684|0);
        $159 = (($158) + ($156<<2)|0);
        $160 = ((($159)) + 2|0);
        $161 = HEAP16[$160>>1]|0;
        $162 = $161&65535;
        $15 = $162;
        $163 = $3;
        $164 = ((($163)) + 5820|0);
        $165 = HEAP32[$164>>2]|0;
        $166 = $15;
        $167 = (16 - ($166))|0;
        $168 = ($165|0)>($167|0);
        $169 = $8;
        $170 = $3;
        $171 = ((($170)) + 2684|0);
        $172 = (($171) + ($169<<2)|0);
        $173 = HEAP16[$172>>1]|0;
        $174 = $173&65535;
        if ($168) {
         $16 = $174;
         $175 = $16;
         $176 = $175&65535;
         $177 = $176&65535;
         $178 = $3;
         $179 = ((($178)) + 5820|0);
         $180 = HEAP32[$179>>2]|0;
         $181 = $177 << $180;
         $182 = $3;
         $183 = ((($182)) + 5816|0);
         $184 = HEAP16[$183>>1]|0;
         $185 = $184&65535;
         $186 = $185 | $181;
         $187 = $186&65535;
         HEAP16[$183>>1] = $187;
         $188 = $3;
         $189 = ((($188)) + 5816|0);
         $190 = HEAP16[$189>>1]|0;
         $191 = $190&65535;
         $192 = $191 & 255;
         $193 = $192&255;
         $194 = $3;
         $195 = ((($194)) + 20|0);
         $196 = HEAP32[$195>>2]|0;
         $197 = (($196) + 1)|0;
         HEAP32[$195>>2] = $197;
         $198 = $3;
         $199 = ((($198)) + 8|0);
         $200 = HEAP32[$199>>2]|0;
         $201 = (($200) + ($196)|0);
         HEAP8[$201>>0] = $193;
         $202 = $3;
         $203 = ((($202)) + 5816|0);
         $204 = HEAP16[$203>>1]|0;
         $205 = $204&65535;
         $206 = $205 >> 8;
         $207 = $206&255;
         $208 = $3;
         $209 = ((($208)) + 20|0);
         $210 = HEAP32[$209>>2]|0;
         $211 = (($210) + 1)|0;
         HEAP32[$209>>2] = $211;
         $212 = $3;
         $213 = ((($212)) + 8|0);
         $214 = HEAP32[$213>>2]|0;
         $215 = (($214) + ($210)|0);
         HEAP8[$215>>0] = $207;
         $216 = $16;
         $217 = $216&65535;
         $218 = $217&65535;
         $219 = $3;
         $220 = ((($219)) + 5820|0);
         $221 = HEAP32[$220>>2]|0;
         $222 = (16 - ($221))|0;
         $223 = $218 >> $222;
         $224 = $223&65535;
         $225 = $3;
         $226 = ((($225)) + 5816|0);
         HEAP16[$226>>1] = $224;
         $227 = $15;
         $228 = (($227) - 16)|0;
         $229 = $3;
         $230 = ((($229)) + 5820|0);
         $231 = HEAP32[$230>>2]|0;
         $232 = (($231) + ($228))|0;
         HEAP32[$230>>2] = $232;
        } else {
         $233 = $3;
         $234 = ((($233)) + 5820|0);
         $235 = HEAP32[$234>>2]|0;
         $236 = $174 << $235;
         $237 = $3;
         $238 = ((($237)) + 5816|0);
         $239 = HEAP16[$238>>1]|0;
         $240 = $239&65535;
         $241 = $240 | $236;
         $242 = $241&65535;
         HEAP16[$238>>1] = $242;
         $243 = $15;
         $244 = $3;
         $245 = ((($244)) + 5820|0);
         $246 = HEAP32[$245>>2]|0;
         $247 = (($246) + ($243))|0;
         HEAP32[$245>>2] = $247;
        }
        $248 = $10;
        $249 = (($248) + -1)|0;
        $10 = $249;
       }
       $250 = $3;
       $251 = ((($250)) + 2684|0);
       $252 = ((($251)) + 64|0);
       $253 = ((($252)) + 2|0);
       $254 = HEAP16[$253>>1]|0;
       $255 = $254&65535;
       $17 = $255;
       $256 = $3;
       $257 = ((($256)) + 5820|0);
       $258 = HEAP32[$257>>2]|0;
       $259 = $17;
       $260 = (16 - ($259))|0;
       $261 = ($258|0)>($260|0);
       $262 = $3;
       $263 = ((($262)) + 2684|0);
       $264 = ((($263)) + 64|0);
       $265 = HEAP16[$264>>1]|0;
       $266 = $265&65535;
       if ($261) {
        $18 = $266;
        $267 = $18;
        $268 = $267&65535;
        $269 = $268&65535;
        $270 = $3;
        $271 = ((($270)) + 5820|0);
        $272 = HEAP32[$271>>2]|0;
        $273 = $269 << $272;
        $274 = $3;
        $275 = ((($274)) + 5816|0);
        $276 = HEAP16[$275>>1]|0;
        $277 = $276&65535;
        $278 = $277 | $273;
        $279 = $278&65535;
        HEAP16[$275>>1] = $279;
        $280 = $3;
        $281 = ((($280)) + 5816|0);
        $282 = HEAP16[$281>>1]|0;
        $283 = $282&65535;
        $284 = $283 & 255;
        $285 = $284&255;
        $286 = $3;
        $287 = ((($286)) + 20|0);
        $288 = HEAP32[$287>>2]|0;
        $289 = (($288) + 1)|0;
        HEAP32[$287>>2] = $289;
        $290 = $3;
        $291 = ((($290)) + 8|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = (($292) + ($288)|0);
        HEAP8[$293>>0] = $285;
        $294 = $3;
        $295 = ((($294)) + 5816|0);
        $296 = HEAP16[$295>>1]|0;
        $297 = $296&65535;
        $298 = $297 >> 8;
        $299 = $298&255;
        $300 = $3;
        $301 = ((($300)) + 20|0);
        $302 = HEAP32[$301>>2]|0;
        $303 = (($302) + 1)|0;
        HEAP32[$301>>2] = $303;
        $304 = $3;
        $305 = ((($304)) + 8|0);
        $306 = HEAP32[$305>>2]|0;
        $307 = (($306) + ($302)|0);
        HEAP8[$307>>0] = $299;
        $308 = $18;
        $309 = $308&65535;
        $310 = $309&65535;
        $311 = $3;
        $312 = ((($311)) + 5820|0);
        $313 = HEAP32[$312>>2]|0;
        $314 = (16 - ($313))|0;
        $315 = $310 >> $314;
        $316 = $315&65535;
        $317 = $3;
        $318 = ((($317)) + 5816|0);
        HEAP16[$318>>1] = $316;
        $319 = $17;
        $320 = (($319) - 16)|0;
        $321 = $3;
        $322 = ((($321)) + 5820|0);
        $323 = HEAP32[$322>>2]|0;
        $324 = (($323) + ($320))|0;
        HEAP32[$322>>2] = $324;
       } else {
        $325 = $3;
        $326 = ((($325)) + 5820|0);
        $327 = HEAP32[$326>>2]|0;
        $328 = $266 << $327;
        $329 = $3;
        $330 = ((($329)) + 5816|0);
        $331 = HEAP16[$330>>1]|0;
        $332 = $331&65535;
        $333 = $332 | $328;
        $334 = $333&65535;
        HEAP16[$330>>1] = $334;
        $335 = $17;
        $336 = $3;
        $337 = ((($336)) + 5820|0);
        $338 = HEAP32[$337>>2]|0;
        $339 = (($338) + ($335))|0;
        HEAP32[$337>>2] = $339;
       }
       $19 = 2;
       $340 = $3;
       $341 = ((($340)) + 5820|0);
       $342 = HEAP32[$341>>2]|0;
       $343 = $19;
       $344 = (16 - ($343))|0;
       $345 = ($342|0)>($344|0);
       $346 = $10;
       $347 = (($346) - 3)|0;
       if ($345) {
        $20 = $347;
        $348 = $20;
        $349 = $348&65535;
        $350 = $349&65535;
        $351 = $3;
        $352 = ((($351)) + 5820|0);
        $353 = HEAP32[$352>>2]|0;
        $354 = $350 << $353;
        $355 = $3;
        $356 = ((($355)) + 5816|0);
        $357 = HEAP16[$356>>1]|0;
        $358 = $357&65535;
        $359 = $358 | $354;
        $360 = $359&65535;
        HEAP16[$356>>1] = $360;
        $361 = $3;
        $362 = ((($361)) + 5816|0);
        $363 = HEAP16[$362>>1]|0;
        $364 = $363&65535;
        $365 = $364 & 255;
        $366 = $365&255;
        $367 = $3;
        $368 = ((($367)) + 20|0);
        $369 = HEAP32[$368>>2]|0;
        $370 = (($369) + 1)|0;
        HEAP32[$368>>2] = $370;
        $371 = $3;
        $372 = ((($371)) + 8|0);
        $373 = HEAP32[$372>>2]|0;
        $374 = (($373) + ($369)|0);
        HEAP8[$374>>0] = $366;
        $375 = $3;
        $376 = ((($375)) + 5816|0);
        $377 = HEAP16[$376>>1]|0;
        $378 = $377&65535;
        $379 = $378 >> 8;
        $380 = $379&255;
        $381 = $3;
        $382 = ((($381)) + 20|0);
        $383 = HEAP32[$382>>2]|0;
        $384 = (($383) + 1)|0;
        HEAP32[$382>>2] = $384;
        $385 = $3;
        $386 = ((($385)) + 8|0);
        $387 = HEAP32[$386>>2]|0;
        $388 = (($387) + ($383)|0);
        HEAP8[$388>>0] = $380;
        $389 = $20;
        $390 = $389&65535;
        $391 = $390&65535;
        $392 = $3;
        $393 = ((($392)) + 5820|0);
        $394 = HEAP32[$393>>2]|0;
        $395 = (16 - ($394))|0;
        $396 = $391 >> $395;
        $397 = $396&65535;
        $398 = $3;
        $399 = ((($398)) + 5816|0);
        HEAP16[$399>>1] = $397;
        $400 = $19;
        $401 = (($400) - 16)|0;
        $402 = $3;
        $403 = ((($402)) + 5820|0);
        $404 = HEAP32[$403>>2]|0;
        $405 = (($404) + ($401))|0;
        HEAP32[$403>>2] = $405;
        break;
       } else {
        $406 = $347&65535;
        $407 = $406&65535;
        $408 = $3;
        $409 = ((($408)) + 5820|0);
        $410 = HEAP32[$409>>2]|0;
        $411 = $407 << $410;
        $412 = $3;
        $413 = ((($412)) + 5816|0);
        $414 = HEAP16[$413>>1]|0;
        $415 = $414&65535;
        $416 = $415 | $411;
        $417 = $416&65535;
        HEAP16[$413>>1] = $417;
        $418 = $19;
        $419 = $3;
        $420 = ((($419)) + 5820|0);
        $421 = HEAP32[$420>>2]|0;
        $422 = (($421) + ($418))|0;
        HEAP32[$420>>2] = $422;
        break;
       }
      }
      $423 = $10;
      $424 = ($423|0)<=(10);
      $425 = $3;
      $426 = ((($425)) + 2684|0);
      if ($424) {
       $427 = ((($426)) + 68|0);
       $428 = ((($427)) + 2|0);
       $429 = HEAP16[$428>>1]|0;
       $430 = $429&65535;
       $21 = $430;
       $431 = $3;
       $432 = ((($431)) + 5820|0);
       $433 = HEAP32[$432>>2]|0;
       $434 = $21;
       $435 = (16 - ($434))|0;
       $436 = ($433|0)>($435|0);
       $437 = $3;
       $438 = ((($437)) + 2684|0);
       $439 = ((($438)) + 68|0);
       $440 = HEAP16[$439>>1]|0;
       $441 = $440&65535;
       if ($436) {
        $22 = $441;
        $442 = $22;
        $443 = $442&65535;
        $444 = $443&65535;
        $445 = $3;
        $446 = ((($445)) + 5820|0);
        $447 = HEAP32[$446>>2]|0;
        $448 = $444 << $447;
        $449 = $3;
        $450 = ((($449)) + 5816|0);
        $451 = HEAP16[$450>>1]|0;
        $452 = $451&65535;
        $453 = $452 | $448;
        $454 = $453&65535;
        HEAP16[$450>>1] = $454;
        $455 = $3;
        $456 = ((($455)) + 5816|0);
        $457 = HEAP16[$456>>1]|0;
        $458 = $457&65535;
        $459 = $458 & 255;
        $460 = $459&255;
        $461 = $3;
        $462 = ((($461)) + 20|0);
        $463 = HEAP32[$462>>2]|0;
        $464 = (($463) + 1)|0;
        HEAP32[$462>>2] = $464;
        $465 = $3;
        $466 = ((($465)) + 8|0);
        $467 = HEAP32[$466>>2]|0;
        $468 = (($467) + ($463)|0);
        HEAP8[$468>>0] = $460;
        $469 = $3;
        $470 = ((($469)) + 5816|0);
        $471 = HEAP16[$470>>1]|0;
        $472 = $471&65535;
        $473 = $472 >> 8;
        $474 = $473&255;
        $475 = $3;
        $476 = ((($475)) + 20|0);
        $477 = HEAP32[$476>>2]|0;
        $478 = (($477) + 1)|0;
        HEAP32[$476>>2] = $478;
        $479 = $3;
        $480 = ((($479)) + 8|0);
        $481 = HEAP32[$480>>2]|0;
        $482 = (($481) + ($477)|0);
        HEAP8[$482>>0] = $474;
        $483 = $22;
        $484 = $483&65535;
        $485 = $484&65535;
        $486 = $3;
        $487 = ((($486)) + 5820|0);
        $488 = HEAP32[$487>>2]|0;
        $489 = (16 - ($488))|0;
        $490 = $485 >> $489;
        $491 = $490&65535;
        $492 = $3;
        $493 = ((($492)) + 5816|0);
        HEAP16[$493>>1] = $491;
        $494 = $21;
        $495 = (($494) - 16)|0;
        $496 = $3;
        $497 = ((($496)) + 5820|0);
        $498 = HEAP32[$497>>2]|0;
        $499 = (($498) + ($495))|0;
        HEAP32[$497>>2] = $499;
       } else {
        $500 = $3;
        $501 = ((($500)) + 5820|0);
        $502 = HEAP32[$501>>2]|0;
        $503 = $441 << $502;
        $504 = $3;
        $505 = ((($504)) + 5816|0);
        $506 = HEAP16[$505>>1]|0;
        $507 = $506&65535;
        $508 = $507 | $503;
        $509 = $508&65535;
        HEAP16[$505>>1] = $509;
        $510 = $21;
        $511 = $3;
        $512 = ((($511)) + 5820|0);
        $513 = HEAP32[$512>>2]|0;
        $514 = (($513) + ($510))|0;
        HEAP32[$512>>2] = $514;
       }
       $23 = 3;
       $515 = $3;
       $516 = ((($515)) + 5820|0);
       $517 = HEAP32[$516>>2]|0;
       $518 = $23;
       $519 = (16 - ($518))|0;
       $520 = ($517|0)>($519|0);
       $521 = $10;
       $522 = (($521) - 3)|0;
       if ($520) {
        $24 = $522;
        $523 = $24;
        $524 = $523&65535;
        $525 = $524&65535;
        $526 = $3;
        $527 = ((($526)) + 5820|0);
        $528 = HEAP32[$527>>2]|0;
        $529 = $525 << $528;
        $530 = $3;
        $531 = ((($530)) + 5816|0);
        $532 = HEAP16[$531>>1]|0;
        $533 = $532&65535;
        $534 = $533 | $529;
        $535 = $534&65535;
        HEAP16[$531>>1] = $535;
        $536 = $3;
        $537 = ((($536)) + 5816|0);
        $538 = HEAP16[$537>>1]|0;
        $539 = $538&65535;
        $540 = $539 & 255;
        $541 = $540&255;
        $542 = $3;
        $543 = ((($542)) + 20|0);
        $544 = HEAP32[$543>>2]|0;
        $545 = (($544) + 1)|0;
        HEAP32[$543>>2] = $545;
        $546 = $3;
        $547 = ((($546)) + 8|0);
        $548 = HEAP32[$547>>2]|0;
        $549 = (($548) + ($544)|0);
        HEAP8[$549>>0] = $541;
        $550 = $3;
        $551 = ((($550)) + 5816|0);
        $552 = HEAP16[$551>>1]|0;
        $553 = $552&65535;
        $554 = $553 >> 8;
        $555 = $554&255;
        $556 = $3;
        $557 = ((($556)) + 20|0);
        $558 = HEAP32[$557>>2]|0;
        $559 = (($558) + 1)|0;
        HEAP32[$557>>2] = $559;
        $560 = $3;
        $561 = ((($560)) + 8|0);
        $562 = HEAP32[$561>>2]|0;
        $563 = (($562) + ($558)|0);
        HEAP8[$563>>0] = $555;
        $564 = $24;
        $565 = $564&65535;
        $566 = $565&65535;
        $567 = $3;
        $568 = ((($567)) + 5820|0);
        $569 = HEAP32[$568>>2]|0;
        $570 = (16 - ($569))|0;
        $571 = $566 >> $570;
        $572 = $571&65535;
        $573 = $3;
        $574 = ((($573)) + 5816|0);
        HEAP16[$574>>1] = $572;
        $575 = $23;
        $576 = (($575) - 16)|0;
        $577 = $3;
        $578 = ((($577)) + 5820|0);
        $579 = HEAP32[$578>>2]|0;
        $580 = (($579) + ($576))|0;
        HEAP32[$578>>2] = $580;
        break;
       } else {
        $581 = $522&65535;
        $582 = $581&65535;
        $583 = $3;
        $584 = ((($583)) + 5820|0);
        $585 = HEAP32[$584>>2]|0;
        $586 = $582 << $585;
        $587 = $3;
        $588 = ((($587)) + 5816|0);
        $589 = HEAP16[$588>>1]|0;
        $590 = $589&65535;
        $591 = $590 | $586;
        $592 = $591&65535;
        HEAP16[$588>>1] = $592;
        $593 = $23;
        $594 = $3;
        $595 = ((($594)) + 5820|0);
        $596 = HEAP32[$595>>2]|0;
        $597 = (($596) + ($593))|0;
        HEAP32[$595>>2] = $597;
        break;
       }
      } else {
       $598 = ((($426)) + 72|0);
       $599 = ((($598)) + 2|0);
       $600 = HEAP16[$599>>1]|0;
       $601 = $600&65535;
       $25 = $601;
       $602 = $3;
       $603 = ((($602)) + 5820|0);
       $604 = HEAP32[$603>>2]|0;
       $605 = $25;
       $606 = (16 - ($605))|0;
       $607 = ($604|0)>($606|0);
       $608 = $3;
       $609 = ((($608)) + 2684|0);
       $610 = ((($609)) + 72|0);
       $611 = HEAP16[$610>>1]|0;
       $612 = $611&65535;
       if ($607) {
        $26 = $612;
        $613 = $26;
        $614 = $613&65535;
        $615 = $614&65535;
        $616 = $3;
        $617 = ((($616)) + 5820|0);
        $618 = HEAP32[$617>>2]|0;
        $619 = $615 << $618;
        $620 = $3;
        $621 = ((($620)) + 5816|0);
        $622 = HEAP16[$621>>1]|0;
        $623 = $622&65535;
        $624 = $623 | $619;
        $625 = $624&65535;
        HEAP16[$621>>1] = $625;
        $626 = $3;
        $627 = ((($626)) + 5816|0);
        $628 = HEAP16[$627>>1]|0;
        $629 = $628&65535;
        $630 = $629 & 255;
        $631 = $630&255;
        $632 = $3;
        $633 = ((($632)) + 20|0);
        $634 = HEAP32[$633>>2]|0;
        $635 = (($634) + 1)|0;
        HEAP32[$633>>2] = $635;
        $636 = $3;
        $637 = ((($636)) + 8|0);
        $638 = HEAP32[$637>>2]|0;
        $639 = (($638) + ($634)|0);
        HEAP8[$639>>0] = $631;
        $640 = $3;
        $641 = ((($640)) + 5816|0);
        $642 = HEAP16[$641>>1]|0;
        $643 = $642&65535;
        $644 = $643 >> 8;
        $645 = $644&255;
        $646 = $3;
        $647 = ((($646)) + 20|0);
        $648 = HEAP32[$647>>2]|0;
        $649 = (($648) + 1)|0;
        HEAP32[$647>>2] = $649;
        $650 = $3;
        $651 = ((($650)) + 8|0);
        $652 = HEAP32[$651>>2]|0;
        $653 = (($652) + ($648)|0);
        HEAP8[$653>>0] = $645;
        $654 = $26;
        $655 = $654&65535;
        $656 = $655&65535;
        $657 = $3;
        $658 = ((($657)) + 5820|0);
        $659 = HEAP32[$658>>2]|0;
        $660 = (16 - ($659))|0;
        $661 = $656 >> $660;
        $662 = $661&65535;
        $663 = $3;
        $664 = ((($663)) + 5816|0);
        HEAP16[$664>>1] = $662;
        $665 = $25;
        $666 = (($665) - 16)|0;
        $667 = $3;
        $668 = ((($667)) + 5820|0);
        $669 = HEAP32[$668>>2]|0;
        $670 = (($669) + ($666))|0;
        HEAP32[$668>>2] = $670;
       } else {
        $671 = $3;
        $672 = ((($671)) + 5820|0);
        $673 = HEAP32[$672>>2]|0;
        $674 = $612 << $673;
        $675 = $3;
        $676 = ((($675)) + 5816|0);
        $677 = HEAP16[$676>>1]|0;
        $678 = $677&65535;
        $679 = $678 | $674;
        $680 = $679&65535;
        HEAP16[$676>>1] = $680;
        $681 = $25;
        $682 = $3;
        $683 = ((($682)) + 5820|0);
        $684 = HEAP32[$683>>2]|0;
        $685 = (($684) + ($681))|0;
        HEAP32[$683>>2] = $685;
       }
       $27 = 7;
       $686 = $3;
       $687 = ((($686)) + 5820|0);
       $688 = HEAP32[$687>>2]|0;
       $689 = $27;
       $690 = (16 - ($689))|0;
       $691 = ($688|0)>($690|0);
       $692 = $10;
       $693 = (($692) - 11)|0;
       if ($691) {
        $28 = $693;
        $694 = $28;
        $695 = $694&65535;
        $696 = $695&65535;
        $697 = $3;
        $698 = ((($697)) + 5820|0);
        $699 = HEAP32[$698>>2]|0;
        $700 = $696 << $699;
        $701 = $3;
        $702 = ((($701)) + 5816|0);
        $703 = HEAP16[$702>>1]|0;
        $704 = $703&65535;
        $705 = $704 | $700;
        $706 = $705&65535;
        HEAP16[$702>>1] = $706;
        $707 = $3;
        $708 = ((($707)) + 5816|0);
        $709 = HEAP16[$708>>1]|0;
        $710 = $709&65535;
        $711 = $710 & 255;
        $712 = $711&255;
        $713 = $3;
        $714 = ((($713)) + 20|0);
        $715 = HEAP32[$714>>2]|0;
        $716 = (($715) + 1)|0;
        HEAP32[$714>>2] = $716;
        $717 = $3;
        $718 = ((($717)) + 8|0);
        $719 = HEAP32[$718>>2]|0;
        $720 = (($719) + ($715)|0);
        HEAP8[$720>>0] = $712;
        $721 = $3;
        $722 = ((($721)) + 5816|0);
        $723 = HEAP16[$722>>1]|0;
        $724 = $723&65535;
        $725 = $724 >> 8;
        $726 = $725&255;
        $727 = $3;
        $728 = ((($727)) + 20|0);
        $729 = HEAP32[$728>>2]|0;
        $730 = (($729) + 1)|0;
        HEAP32[$728>>2] = $730;
        $731 = $3;
        $732 = ((($731)) + 8|0);
        $733 = HEAP32[$732>>2]|0;
        $734 = (($733) + ($729)|0);
        HEAP8[$734>>0] = $726;
        $735 = $28;
        $736 = $735&65535;
        $737 = $736&65535;
        $738 = $3;
        $739 = ((($738)) + 5820|0);
        $740 = HEAP32[$739>>2]|0;
        $741 = (16 - ($740))|0;
        $742 = $737 >> $741;
        $743 = $742&65535;
        $744 = $3;
        $745 = ((($744)) + 5816|0);
        HEAP16[$745>>1] = $743;
        $746 = $27;
        $747 = (($746) - 16)|0;
        $748 = $3;
        $749 = ((($748)) + 5820|0);
        $750 = HEAP32[$749>>2]|0;
        $751 = (($750) + ($747))|0;
        HEAP32[$749>>2] = $751;
        break;
       } else {
        $752 = $693&65535;
        $753 = $752&65535;
        $754 = $3;
        $755 = ((($754)) + 5820|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $753 << $756;
        $758 = $3;
        $759 = ((($758)) + 5816|0);
        $760 = HEAP16[$759>>1]|0;
        $761 = $760&65535;
        $762 = $761 | $757;
        $763 = $762&65535;
        HEAP16[$759>>1] = $763;
        $764 = $27;
        $765 = $3;
        $766 = ((($765)) + 5820|0);
        $767 = HEAP32[$766>>2]|0;
        $768 = (($767) + ($764))|0;
        HEAP32[$766>>2] = $768;
        break;
       }
      }
     }
    } while(0);
    $10 = 0;
    $769 = $8;
    $7 = $769;
    $770 = $9;
    $771 = ($770|0)==(0);
    if ($771) {
     $11 = 138;
     $12 = 3;
     break;
    }
    $772 = $8;
    $773 = $9;
    $774 = ($772|0)==($773|0);
    if ($774) {
     $11 = 6;
     $12 = 3;
     break;
    } else {
     $11 = 7;
     $12 = 4;
     break;
    }
   }
  } while(0);
  $775 = $6;
  $776 = (($775) + 1)|0;
  $6 = $776;
 }
 STACKTOP = sp;return;
}
function _scan_tree($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = -1;
 $13 = $4;
 $14 = ((($13)) + 2|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $9 = $16;
 $10 = 0;
 $11 = 7;
 $12 = 4;
 $17 = $9;
 $18 = ($17|0)==(0);
 if ($18) {
  $11 = 138;
  $12 = 3;
 }
 $19 = $5;
 $20 = (($19) + 1)|0;
 $21 = $4;
 $22 = (($21) + ($20<<2)|0);
 $23 = ((($22)) + 2|0);
 HEAP16[$23>>1] = -1;
 $6 = 0;
 while(1) {
  $24 = $6;
  $25 = $5;
  $26 = ($24|0)<=($25|0);
  if (!($26)) {
   break;
  }
  $27 = $9;
  $8 = $27;
  $28 = $6;
  $29 = (($28) + 1)|0;
  $30 = $4;
  $31 = (($30) + ($29<<2)|0);
  $32 = ((($31)) + 2|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33&65535;
  $9 = $34;
  $35 = $10;
  $36 = (($35) + 1)|0;
  $10 = $36;
  $37 = $11;
  $38 = ($36|0)<($37|0);
  if ($38) {
   $39 = $8;
   $40 = $9;
   $41 = ($39|0)==($40|0);
   if (!($41)) {
    label = 7;
   }
  } else {
   label = 7;
  }
  do {
   if ((label|0) == 7) {
    label = 0;
    $42 = $10;
    $43 = $12;
    $44 = ($42|0)<($43|0);
    do {
     if ($44) {
      $45 = $10;
      $46 = $8;
      $47 = $3;
      $48 = ((($47)) + 2684|0);
      $49 = (($48) + ($46<<2)|0);
      $50 = HEAP16[$49>>1]|0;
      $51 = $50&65535;
      $52 = (($51) + ($45))|0;
      $53 = $52&65535;
      HEAP16[$49>>1] = $53;
     } else {
      $54 = $8;
      $55 = ($54|0)!=(0);
      if ($55) {
       $56 = $8;
       $57 = $7;
       $58 = ($56|0)!=($57|0);
       if ($58) {
        $59 = $8;
        $60 = $3;
        $61 = ((($60)) + 2684|0);
        $62 = (($61) + ($59<<2)|0);
        $63 = HEAP16[$62>>1]|0;
        $64 = (($63) + 1)<<16>>16;
        HEAP16[$62>>1] = $64;
       }
       $65 = $3;
       $66 = ((($65)) + 2684|0);
       $67 = ((($66)) + 64|0);
       $68 = HEAP16[$67>>1]|0;
       $69 = (($68) + 1)<<16>>16;
       HEAP16[$67>>1] = $69;
       break;
      } else {
       $70 = $10;
       $71 = ($70|0)<=(10);
       $72 = $3;
       $73 = ((($72)) + 2684|0);
       if ($71) {
        $74 = ((($73)) + 68|0);
        $75 = HEAP16[$74>>1]|0;
        $76 = (($75) + 1)<<16>>16;
        HEAP16[$74>>1] = $76;
        break;
       } else {
        $77 = ((($73)) + 72|0);
        $78 = HEAP16[$77>>1]|0;
        $79 = (($78) + 1)<<16>>16;
        HEAP16[$77>>1] = $79;
        break;
       }
      }
     }
    } while(0);
    $10 = 0;
    $80 = $8;
    $7 = $80;
    $81 = $9;
    $82 = ($81|0)==(0);
    if ($82) {
     $11 = 138;
     $12 = 3;
     break;
    }
    $83 = $8;
    $84 = $9;
    $85 = ($83|0)==($84|0);
    if ($85) {
     $11 = 6;
     $12 = 3;
     break;
    } else {
     $11 = 7;
     $12 = 4;
     break;
    }
   }
  } while(0);
  $86 = $6;
  $87 = (($86) + 1)|0;
  $6 = $87;
 }
 STACKTOP = sp;return;
}
function _pqdownheap($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $5;
 $9 = $3;
 $10 = ((($9)) + 2908|0);
 $11 = (($10) + ($8<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $6 = $12;
 $13 = $5;
 $14 = $13 << 1;
 $7 = $14;
 while(1) {
  $15 = $7;
  $16 = $3;
  $17 = ((($16)) + 5200|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)<=($18|0);
  if (!($19)) {
   label = 12;
   break;
  }
  $20 = $7;
  $21 = $3;
  $22 = ((($21)) + 5200|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($20|0)<($23|0);
  do {
   if ($24) {
    $25 = $7;
    $26 = (($25) + 1)|0;
    $27 = $3;
    $28 = ((($27)) + 2908|0);
    $29 = (($28) + ($26<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $4;
    $32 = (($31) + ($30<<2)|0);
    $33 = HEAP16[$32>>1]|0;
    $34 = $33&65535;
    $35 = $7;
    $36 = $3;
    $37 = ((($36)) + 2908|0);
    $38 = (($37) + ($35<<2)|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $4;
    $41 = (($40) + ($39<<2)|0);
    $42 = HEAP16[$41>>1]|0;
    $43 = $42&65535;
    $44 = ($34|0)<($43|0);
    if (!($44)) {
     $45 = $7;
     $46 = (($45) + 1)|0;
     $47 = $3;
     $48 = ((($47)) + 2908|0);
     $49 = (($48) + ($46<<2)|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $4;
     $52 = (($51) + ($50<<2)|0);
     $53 = HEAP16[$52>>1]|0;
     $54 = $53&65535;
     $55 = $7;
     $56 = $3;
     $57 = ((($56)) + 2908|0);
     $58 = (($57) + ($55<<2)|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = $4;
     $61 = (($60) + ($59<<2)|0);
     $62 = HEAP16[$61>>1]|0;
     $63 = $62&65535;
     $64 = ($54|0)==($63|0);
     if (!($64)) {
      break;
     }
     $65 = $7;
     $66 = (($65) + 1)|0;
     $67 = $3;
     $68 = ((($67)) + 2908|0);
     $69 = (($68) + ($66<<2)|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = $3;
     $72 = ((($71)) + 5208|0);
     $73 = (($72) + ($70)|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74&255;
     $76 = $7;
     $77 = $3;
     $78 = ((($77)) + 2908|0);
     $79 = (($78) + ($76<<2)|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = $3;
     $82 = ((($81)) + 5208|0);
     $83 = (($82) + ($80)|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = $84&255;
     $86 = ($75|0)<=($85|0);
     if (!($86)) {
      break;
     }
    }
    $87 = $7;
    $88 = (($87) + 1)|0;
    $7 = $88;
   }
  } while(0);
  $89 = $6;
  $90 = $4;
  $91 = (($90) + ($89<<2)|0);
  $92 = HEAP16[$91>>1]|0;
  $93 = $92&65535;
  $94 = $7;
  $95 = $3;
  $96 = ((($95)) + 2908|0);
  $97 = (($96) + ($94<<2)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $4;
  $100 = (($99) + ($98<<2)|0);
  $101 = HEAP16[$100>>1]|0;
  $102 = $101&65535;
  $103 = ($93|0)<($102|0);
  if ($103) {
   label = 12;
   break;
  }
  $104 = $6;
  $105 = $4;
  $106 = (($105) + ($104<<2)|0);
  $107 = HEAP16[$106>>1]|0;
  $108 = $107&65535;
  $109 = $7;
  $110 = $3;
  $111 = ((($110)) + 2908|0);
  $112 = (($111) + ($109<<2)|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $4;
  $115 = (($114) + ($113<<2)|0);
  $116 = HEAP16[$115>>1]|0;
  $117 = $116&65535;
  $118 = ($108|0)==($117|0);
  if ($118) {
   $119 = $6;
   $120 = $3;
   $121 = ((($120)) + 5208|0);
   $122 = (($121) + ($119)|0);
   $123 = HEAP8[$122>>0]|0;
   $124 = $123&255;
   $125 = $7;
   $126 = $3;
   $127 = ((($126)) + 2908|0);
   $128 = (($127) + ($125<<2)|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = $3;
   $131 = ((($130)) + 5208|0);
   $132 = (($131) + ($129)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = ($124|0)<=($134|0);
   if ($135) {
    label = 12;
    break;
   }
  }
  $136 = $7;
  $137 = $3;
  $138 = ((($137)) + 2908|0);
  $139 = (($138) + ($136<<2)|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = $5;
  $142 = $3;
  $143 = ((($142)) + 2908|0);
  $144 = (($143) + ($141<<2)|0);
  HEAP32[$144>>2] = $140;
  $145 = $7;
  $5 = $145;
  $146 = $7;
  $147 = $146 << 1;
  $7 = $147;
 }
 if ((label|0) == 12) {
  $148 = $6;
  $149 = $5;
  $150 = $3;
  $151 = ((($150)) + 2908|0);
  $152 = (($151) + ($149<<2)|0);
  HEAP32[$152>>2] = $148;
  STACKTOP = sp;return;
 }
}
function _gen_bitlen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = $0;
 $3 = $1;
 $17 = $3;
 $18 = HEAP32[$17>>2]|0;
 $4 = $18;
 $19 = $3;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $5 = $21;
 $22 = $3;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$24>>2]|0;
 $6 = $25;
 $26 = $3;
 $27 = ((($26)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $7 = $30;
 $31 = $3;
 $32 = ((($31)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $8 = $35;
 $36 = $3;
 $37 = ((($36)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 16|0);
 $40 = HEAP32[$39>>2]|0;
 $9 = $40;
 $16 = 0;
 $13 = 0;
 while(1) {
  $41 = $13;
  $42 = ($41|0)<=(15);
  if (!($42)) {
   break;
  }
  $43 = $13;
  $44 = $2;
  $45 = ((($44)) + 2876|0);
  $46 = (($45) + ($43<<1)|0);
  HEAP16[$46>>1] = 0;
  $47 = $13;
  $48 = (($47) + 1)|0;
  $13 = $48;
 }
 $49 = $2;
 $50 = ((($49)) + 5204|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $2;
 $53 = ((($52)) + 2908|0);
 $54 = (($53) + ($51<<2)|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $4;
 $57 = (($56) + ($55<<2)|0);
 $58 = ((($57)) + 2|0);
 HEAP16[$58>>1] = 0;
 $59 = $2;
 $60 = ((($59)) + 5204|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) + 1)|0;
 $10 = $62;
 while(1) {
  $63 = $10;
  $64 = ($63|0)<(573);
  if (!($64)) {
   break;
  }
  $65 = $10;
  $66 = $2;
  $67 = ((($66)) + 2908|0);
  $68 = (($67) + ($65<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $11 = $69;
  $70 = $11;
  $71 = $4;
  $72 = (($71) + ($70<<2)|0);
  $73 = ((($72)) + 2|0);
  $74 = HEAP16[$73>>1]|0;
  $75 = $74&65535;
  $76 = $4;
  $77 = (($76) + ($75<<2)|0);
  $78 = ((($77)) + 2|0);
  $79 = HEAP16[$78>>1]|0;
  $80 = $79&65535;
  $81 = (($80) + 1)|0;
  $13 = $81;
  $82 = $13;
  $83 = $9;
  $84 = ($82|0)>($83|0);
  if ($84) {
   $85 = $9;
   $13 = $85;
   $86 = $16;
   $87 = (($86) + 1)|0;
   $16 = $87;
  }
  $88 = $13;
  $89 = $88&65535;
  $90 = $11;
  $91 = $4;
  $92 = (($91) + ($90<<2)|0);
  $93 = ((($92)) + 2|0);
  HEAP16[$93>>1] = $89;
  $94 = $11;
  $95 = $5;
  $96 = ($94|0)>($95|0);
  if (!($96)) {
   $97 = $13;
   $98 = $2;
   $99 = ((($98)) + 2876|0);
   $100 = (($99) + ($97<<1)|0);
   $101 = HEAP16[$100>>1]|0;
   $102 = (($101) + 1)<<16>>16;
   HEAP16[$100>>1] = $102;
   $14 = 0;
   $103 = $11;
   $104 = $8;
   $105 = ($103|0)>=($104|0);
   if ($105) {
    $106 = $11;
    $107 = $8;
    $108 = (($106) - ($107))|0;
    $109 = $7;
    $110 = (($109) + ($108<<2)|0);
    $111 = HEAP32[$110>>2]|0;
    $14 = $111;
   }
   $112 = $11;
   $113 = $4;
   $114 = (($113) + ($112<<2)|0);
   $115 = HEAP16[$114>>1]|0;
   $15 = $115;
   $116 = $15;
   $117 = $116&65535;
   $118 = $13;
   $119 = $14;
   $120 = (($118) + ($119))|0;
   $121 = Math_imul($117, $120)|0;
   $122 = $2;
   $123 = ((($122)) + 5800|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($124) + ($121))|0;
   HEAP32[$123>>2] = $125;
   $126 = $6;
   $127 = ($126|0)!=(0|0);
   if ($127) {
    $128 = $15;
    $129 = $128&65535;
    $130 = $11;
    $131 = $6;
    $132 = (($131) + ($130<<2)|0);
    $133 = ((($132)) + 2|0);
    $134 = HEAP16[$133>>1]|0;
    $135 = $134&65535;
    $136 = $14;
    $137 = (($135) + ($136))|0;
    $138 = Math_imul($129, $137)|0;
    $139 = $2;
    $140 = ((($139)) + 5804|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (($141) + ($138))|0;
    HEAP32[$140>>2] = $142;
   }
  }
  $143 = $10;
  $144 = (($143) + 1)|0;
  $10 = $144;
 }
 $145 = $16;
 $146 = ($145|0)==(0);
 if ($146) {
  STACKTOP = sp;return;
 }
 while(1) {
  $147 = $9;
  $148 = (($147) - 1)|0;
  $13 = $148;
  while(1) {
   $149 = $13;
   $150 = $2;
   $151 = ((($150)) + 2876|0);
   $152 = (($151) + ($149<<1)|0);
   $153 = HEAP16[$152>>1]|0;
   $154 = $153&65535;
   $155 = ($154|0)==(0);
   $156 = $13;
   if (!($155)) {
    break;
   }
   $157 = (($156) + -1)|0;
   $13 = $157;
  }
  $158 = $2;
  $159 = ((($158)) + 2876|0);
  $160 = (($159) + ($156<<1)|0);
  $161 = HEAP16[$160>>1]|0;
  $162 = (($161) + -1)<<16>>16;
  HEAP16[$160>>1] = $162;
  $163 = $13;
  $164 = (($163) + 1)|0;
  $165 = $2;
  $166 = ((($165)) + 2876|0);
  $167 = (($166) + ($164<<1)|0);
  $168 = HEAP16[$167>>1]|0;
  $169 = $168&65535;
  $170 = (($169) + 2)|0;
  $171 = $170&65535;
  HEAP16[$167>>1] = $171;
  $172 = $9;
  $173 = $2;
  $174 = ((($173)) + 2876|0);
  $175 = (($174) + ($172<<1)|0);
  $176 = HEAP16[$175>>1]|0;
  $177 = (($176) + -1)<<16>>16;
  HEAP16[$175>>1] = $177;
  $178 = $16;
  $179 = (($178) - 2)|0;
  $16 = $179;
  $180 = $16;
  $181 = ($180|0)>(0);
  if (!($181)) {
   break;
  }
 }
 $182 = $9;
 $13 = $182;
 while(1) {
  $183 = $13;
  $184 = ($183|0)!=(0);
  if (!($184)) {
   break;
  }
  $185 = $13;
  $186 = $2;
  $187 = ((($186)) + 2876|0);
  $188 = (($187) + ($185<<1)|0);
  $189 = HEAP16[$188>>1]|0;
  $190 = $189&65535;
  $11 = $190;
  while(1) {
   $191 = $11;
   $192 = ($191|0)!=(0);
   if (!($192)) {
    break;
   }
   $193 = $10;
   $194 = (($193) + -1)|0;
   $10 = $194;
   $195 = $2;
   $196 = ((($195)) + 2908|0);
   $197 = (($196) + ($194<<2)|0);
   $198 = HEAP32[$197>>2]|0;
   $12 = $198;
   $199 = $12;
   $200 = $5;
   $201 = ($199|0)>($200|0);
   if ($201) {
    continue;
   }
   $202 = $12;
   $203 = $4;
   $204 = (($203) + ($202<<2)|0);
   $205 = ((($204)) + 2|0);
   $206 = HEAP16[$205>>1]|0;
   $207 = $206&65535;
   $208 = $13;
   $209 = ($207|0)!=($208|0);
   if ($209) {
    $210 = $13;
    $211 = $12;
    $212 = $4;
    $213 = (($212) + ($211<<2)|0);
    $214 = ((($213)) + 2|0);
    $215 = HEAP16[$214>>1]|0;
    $216 = $215&65535;
    $217 = (($210) - ($216))|0;
    $218 = $12;
    $219 = $4;
    $220 = (($219) + ($218<<2)|0);
    $221 = HEAP16[$220>>1]|0;
    $222 = $221&65535;
    $223 = Math_imul($217, $222)|0;
    $224 = $2;
    $225 = ((($224)) + 5800|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = (($226) + ($223))|0;
    HEAP32[$225>>2] = $227;
    $228 = $13;
    $229 = $228&65535;
    $230 = $12;
    $231 = $4;
    $232 = (($231) + ($230<<2)|0);
    $233 = ((($232)) + 2|0);
    HEAP16[$233>>1] = $229;
   }
   $234 = $11;
   $235 = (($234) + -1)|0;
   $11 = $235;
  }
  $236 = $13;
  $237 = (($236) + -1)|0;
  $13 = $237;
 }
 STACKTOP = sp;return;
}
function _gen_codes($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 32|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0;
 $8 = 1;
 while(1) {
  $11 = $8;
  $12 = ($11|0)<=(15);
  if (!($12)) {
   break;
  }
  $13 = $7;
  $14 = $8;
  $15 = (($14) - 1)|0;
  $16 = $5;
  $17 = (($16) + ($15<<1)|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $20 = (($13) + ($19))|0;
  $21 = $20 << 1;
  $7 = $21;
  $22 = $7;
  $23 = $22&65535;
  $24 = $8;
  $25 = (($6) + ($24<<1)|0);
  HEAP16[$25>>1] = $23;
  $26 = $8;
  $27 = (($26) + 1)|0;
  $8 = $27;
 }
 $9 = 0;
 while(1) {
  $28 = $9;
  $29 = $4;
  $30 = ($28|0)<=($29|0);
  if (!($30)) {
   break;
  }
  $31 = $9;
  $32 = $3;
  $33 = (($32) + ($31<<2)|0);
  $34 = ((($33)) + 2|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35&65535;
  $10 = $36;
  $37 = $10;
  $38 = ($37|0)==(0);
  if (!($38)) {
   $39 = $10;
   $40 = (($6) + ($39<<1)|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = (($41) + 1)<<16>>16;
   HEAP16[$40>>1] = $42;
   $43 = $41&65535;
   $44 = $10;
   $45 = (_bi_reverse($43,$44)|0);
   $46 = $45&65535;
   $47 = $9;
   $48 = $3;
   $49 = (($48) + ($47<<2)|0);
   HEAP16[$49>>1] = $46;
  }
  $50 = $9;
  $51 = (($50) + 1)|0;
  $9 = $51;
 }
 STACKTOP = sp;return;
}
function _bi_reverse($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $5 = $2;
  $6 = $5 & 1;
  $7 = $4;
  $8 = $7 | $6;
  $4 = $8;
  $9 = $2;
  $10 = $9 >>> 1;
  $2 = $10;
  $11 = $4;
  $12 = $11 << 1;
  $4 = $12;
  $13 = $3;
  $14 = (($13) + -1)|0;
  $3 = $14;
  $15 = ($14|0)>(0);
  if (!($15)) {
   break;
  }
 }
 $16 = $4;
 $17 = $16 >>> 1;
 STACKTOP = sp;return ($17|0);
}
function _zcalloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = $5;
 $8 = Math_imul($6, $7)|0;
 $9 = (_malloc($8)|0);
 STACKTOP = sp;return ($9|0);
}
function _zcfree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 _free($4);
 STACKTOP = sp;return;
}
function _compressBound($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $1;
 $4 = $3 >>> 12;
 $5 = (($2) + ($4))|0;
 $6 = $1;
 $7 = $6 >>> 14;
 $8 = (($5) + ($7))|0;
 $9 = $1;
 $10 = $9 >>> 25;
 $11 = (($8) + ($10))|0;
 $12 = (($11) + 13)|0;
 STACKTOP = sp;return ($12|0);
}
function _hgetc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4>>>0)>($7>>>0);
 $9 = $1;
 if ($8) {
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 1|0);
  HEAP32[$10>>2] = $12;
  $13 = HEAP8[$11>>0]|0;
  $14 = $13&255;
  $16 = $14;
  STACKTOP = sp;return ($16|0);
 } else {
  $15 = (_hgetc2($9)|0);
  $16 = $15;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _itf8_decode_crc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 24|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = HEAP32[$10>>2]|0;
 $12 = (_hgetc($11)|0);
 $8 = $12;
 $13 = $8;
 $14 = ($13|0)==(-1);
 if ($14) {
  $3 = -1;
  $149 = $3;
  STACKTOP = sp;return ($149|0);
 }
 $15 = $8;
 $16 = $15&255;
 HEAP8[$7>>0] = $16;
 $17 = $8;
 $18 = $17 >> 4;
 $19 = (9032 + ($18<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $9 = $20;
 $21 = $8;
 $22 = $21 >> 4;
 $23 = (9096 + ($22<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $8;
 $26 = $25 & $24;
 $8 = $26;
 $27 = $9;
 switch ($27|0) {
 case 0:  {
  $28 = $8;
  $29 = $5;
  HEAP32[$29>>2] = $28;
  $30 = $6;
  $31 = HEAP32[$30>>2]|0;
  $32 = (_crc32($31,$7,1)|0);
  $33 = $6;
  HEAP32[$33>>2] = $32;
  $3 = 1;
  $149 = $3;
  STACKTOP = sp;return ($149|0);
  break;
 }
 case 1:  {
  $34 = $8;
  $35 = $34 << 8;
  $36 = $4;
  $37 = HEAP32[$36>>2]|0;
  $38 = (_hgetc($37)|0);
  $39 = $38&255;
  $40 = ((($7)) + 1|0);
  HEAP8[$40>>0] = $39;
  $41 = $39&255;
  $42 = $35 | $41;
  $8 = $42;
  $43 = $8;
  $44 = $5;
  HEAP32[$44>>2] = $43;
  $45 = $6;
  $46 = HEAP32[$45>>2]|0;
  $47 = (_crc32($46,$7,2)|0);
  $48 = $6;
  HEAP32[$48>>2] = $47;
  $3 = 2;
  $149 = $3;
  STACKTOP = sp;return ($149|0);
  break;
 }
 case 2:  {
  $49 = $8;
  $50 = $49 << 8;
  $51 = $4;
  $52 = HEAP32[$51>>2]|0;
  $53 = (_hgetc($52)|0);
  $54 = $53&255;
  $55 = ((($7)) + 1|0);
  HEAP8[$55>>0] = $54;
  $56 = $54&255;
  $57 = $50 | $56;
  $8 = $57;
  $58 = $8;
  $59 = $58 << 8;
  $60 = $4;
  $61 = HEAP32[$60>>2]|0;
  $62 = (_hgetc($61)|0);
  $63 = $62&255;
  $64 = ((($7)) + 2|0);
  HEAP8[$64>>0] = $63;
  $65 = $63&255;
  $66 = $59 | $65;
  $8 = $66;
  $67 = $8;
  $68 = $5;
  HEAP32[$68>>2] = $67;
  $69 = $6;
  $70 = HEAP32[$69>>2]|0;
  $71 = (_crc32($70,$7,3)|0);
  $72 = $6;
  HEAP32[$72>>2] = $71;
  $3 = 3;
  $149 = $3;
  STACKTOP = sp;return ($149|0);
  break;
 }
 case 3:  {
  $73 = $8;
  $74 = $73 << 8;
  $75 = $4;
  $76 = HEAP32[$75>>2]|0;
  $77 = (_hgetc($76)|0);
  $78 = $77&255;
  $79 = ((($7)) + 1|0);
  HEAP8[$79>>0] = $78;
  $80 = $78&255;
  $81 = $74 | $80;
  $8 = $81;
  $82 = $8;
  $83 = $82 << 8;
  $84 = $4;
  $85 = HEAP32[$84>>2]|0;
  $86 = (_hgetc($85)|0);
  $87 = $86&255;
  $88 = ((($7)) + 2|0);
  HEAP8[$88>>0] = $87;
  $89 = $87&255;
  $90 = $83 | $89;
  $8 = $90;
  $91 = $8;
  $92 = $91 << 8;
  $93 = $4;
  $94 = HEAP32[$93>>2]|0;
  $95 = (_hgetc($94)|0);
  $96 = $95&255;
  $97 = ((($7)) + 3|0);
  HEAP8[$97>>0] = $96;
  $98 = $96&255;
  $99 = $92 | $98;
  $8 = $99;
  $100 = $8;
  $101 = $5;
  HEAP32[$101>>2] = $100;
  $102 = $6;
  $103 = HEAP32[$102>>2]|0;
  $104 = (_crc32($103,$7,4)|0);
  $105 = $6;
  HEAP32[$105>>2] = $104;
  $3 = 4;
  $149 = $3;
  STACKTOP = sp;return ($149|0);
  break;
 }
 case 4:  {
  $106 = $8;
  $107 = $106 << 8;
  $108 = $4;
  $109 = HEAP32[$108>>2]|0;
  $110 = (_hgetc($109)|0);
  $111 = $110&255;
  $112 = ((($7)) + 1|0);
  HEAP8[$112>>0] = $111;
  $113 = $111&255;
  $114 = $107 | $113;
  $8 = $114;
  $115 = $8;
  $116 = $115 << 8;
  $117 = $4;
  $118 = HEAP32[$117>>2]|0;
  $119 = (_hgetc($118)|0);
  $120 = $119&255;
  $121 = ((($7)) + 2|0);
  HEAP8[$121>>0] = $120;
  $122 = $120&255;
  $123 = $116 | $122;
  $8 = $123;
  $124 = $8;
  $125 = $124 << 8;
  $126 = $4;
  $127 = HEAP32[$126>>2]|0;
  $128 = (_hgetc($127)|0);
  $129 = $128&255;
  $130 = ((($7)) + 3|0);
  HEAP8[$130>>0] = $129;
  $131 = $129&255;
  $132 = $125 | $131;
  $8 = $132;
  $133 = $8;
  $134 = $133 << 4;
  $135 = $4;
  $136 = HEAP32[$135>>2]|0;
  $137 = (_hgetc($136)|0);
  $138 = $137&255;
  $139 = ((($7)) + 4|0);
  HEAP8[$139>>0] = $138;
  $140 = $138&255;
  $141 = $140 & 15;
  $142 = $134 | $141;
  $8 = $142;
  $143 = $8;
  $144 = $5;
  HEAP32[$144>>2] = $143;
  $145 = $6;
  $146 = HEAP32[$145>>2]|0;
  $147 = (_crc32($146,$7,5)|0);
  $148 = $6;
  HEAP32[$148>>2] = $147;
  break;
 }
 default: {
 }
 }
 $3 = 5;
 $149 = $3;
 STACKTOP = sp;return ($149|0);
}
function _ltf8_get($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $5 = $6;
 $7 = $5;
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)<(128);
 $11 = $5;
 $12 = HEAP8[$11>>0]|0;
 if ($10) {
  $13 = $12&255;
  $14 = $4;
  $15 = $14;
  $16 = $15;
  HEAP32[$16>>2] = $13;
  $17 = (($15) + 4)|0;
  $18 = $17;
  HEAP32[$18>>2] = 0;
  $2 = 1;
  $349 = $2;
  STACKTOP = sp;return ($349|0);
 }
 $19 = $12&255;
 $20 = ($19|0)<(192);
 $21 = $5;
 $22 = HEAP8[$21>>0]|0;
 if ($20) {
  $23 = $22&255;
  $24 = (_bitshift64Shl(($23|0),0,8)|0);
  $25 = tempRet0;
  $26 = $5;
  $27 = ((($26)) + 1|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = $24 | $29;
  $31 = $30 & 16383;
  $32 = $4;
  $33 = $32;
  $34 = $33;
  HEAP32[$34>>2] = $31;
  $35 = (($33) + 4)|0;
  $36 = $35;
  HEAP32[$36>>2] = 0;
  $2 = 2;
  $349 = $2;
  STACKTOP = sp;return ($349|0);
 }
 $37 = $22&255;
 $38 = ($37|0)<(224);
 $39 = $5;
 $40 = HEAP8[$39>>0]|0;
 if ($38) {
  $41 = $40&255;
  $42 = (_bitshift64Shl(($41|0),0,16)|0);
  $43 = tempRet0;
  $44 = $5;
  $45 = ((($44)) + 1|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = (_bitshift64Shl(($47|0),0,8)|0);
  $49 = tempRet0;
  $50 = $42 | $48;
  $43 | $49;
  $51 = $5;
  $52 = ((($51)) + 2|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = $50 | $54;
  $56 = $55 & 2097151;
  $57 = $4;
  $58 = $57;
  $59 = $58;
  HEAP32[$59>>2] = $56;
  $60 = (($58) + 4)|0;
  $61 = $60;
  HEAP32[$61>>2] = 0;
  $2 = 3;
  $349 = $2;
  STACKTOP = sp;return ($349|0);
 }
 $62 = $40&255;
 $63 = ($62|0)<(240);
 $64 = $5;
 $65 = HEAP8[$64>>0]|0;
 if ($63) {
  $66 = $65&255;
  $67 = (_bitshift64Shl(($66|0),0,24)|0);
  $68 = tempRet0;
  $69 = $5;
  $70 = ((($69)) + 1|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = (_bitshift64Shl(($72|0),0,16)|0);
  $74 = tempRet0;
  $75 = $67 | $73;
  $76 = $68 | $74;
  $77 = $5;
  $78 = ((($77)) + 2|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = $79&255;
  $81 = (_bitshift64Shl(($80|0),0,8)|0);
  $82 = tempRet0;
  $83 = $75 | $81;
  $76 | $82;
  $84 = $5;
  $85 = ((($84)) + 3|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = $83 | $87;
  $89 = $88 & 268435455;
  $90 = $4;
  $91 = $90;
  $92 = $91;
  HEAP32[$92>>2] = $89;
  $93 = (($91) + 4)|0;
  $94 = $93;
  HEAP32[$94>>2] = 0;
  $2 = 4;
  $349 = $2;
  STACKTOP = sp;return ($349|0);
 }
 $95 = $65&255;
 $96 = ($95|0)<(248);
 $97 = $5;
 $98 = HEAP8[$97>>0]|0;
 if ($96) {
  $99 = $98&255;
  $100 = $5;
  $101 = ((($100)) + 1|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = $102&255;
  $104 = (_bitshift64Shl(($103|0),0,24)|0);
  $105 = tempRet0;
  $106 = $99 | $105;
  $107 = $5;
  $108 = ((($107)) + 2|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109&255;
  $111 = (_bitshift64Shl(($110|0),0,16)|0);
  $112 = tempRet0;
  $113 = $104 | $111;
  $114 = $106 | $112;
  $115 = $5;
  $116 = ((($115)) + 3|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = $117&255;
  $119 = (_bitshift64Shl(($118|0),0,8)|0);
  $120 = tempRet0;
  $121 = $113 | $119;
  $122 = $114 | $120;
  $123 = $5;
  $124 = ((($123)) + 4|0);
  $125 = HEAP8[$124>>0]|0;
  $126 = $125&255;
  $127 = $121 | $126;
  $128 = $122 & 7;
  $129 = $4;
  $130 = $129;
  $131 = $130;
  HEAP32[$131>>2] = $127;
  $132 = (($130) + 4)|0;
  $133 = $132;
  HEAP32[$133>>2] = $128;
  $2 = 5;
  $349 = $2;
  STACKTOP = sp;return ($349|0);
 }
 $134 = $98&255;
 $135 = ($134|0)<(252);
 $136 = $5;
 $137 = HEAP8[$136>>0]|0;
 if ($135) {
  $138 = $137&255;
  $139 = (_bitshift64Shl(($138|0),0,40)|0);
  $140 = tempRet0;
  $141 = $5;
  $142 = ((($141)) + 1|0);
  $143 = HEAP8[$142>>0]|0;
  $144 = $143&255;
  $145 = $140 | $144;
  $146 = $5;
  $147 = ((($146)) + 2|0);
  $148 = HEAP8[$147>>0]|0;
  $149 = $148&255;
  $150 = (_bitshift64Shl(($149|0),0,24)|0);
  $151 = tempRet0;
  $152 = $139 | $150;
  $153 = $145 | $151;
  $154 = $5;
  $155 = ((($154)) + 3|0);
  $156 = HEAP8[$155>>0]|0;
  $157 = $156&255;
  $158 = (_bitshift64Shl(($157|0),0,16)|0);
  $159 = tempRet0;
  $160 = $152 | $158;
  $161 = $153 | $159;
  $162 = $5;
  $163 = ((($162)) + 4|0);
  $164 = HEAP8[$163>>0]|0;
  $165 = $164&255;
  $166 = (_bitshift64Shl(($165|0),0,8)|0);
  $167 = tempRet0;
  $168 = $160 | $166;
  $169 = $161 | $167;
  $170 = $5;
  $171 = ((($170)) + 5|0);
  $172 = HEAP8[$171>>0]|0;
  $173 = $172&255;
  $174 = $168 | $173;
  $175 = $169 & 1023;
  $176 = $4;
  $177 = $176;
  $178 = $177;
  HEAP32[$178>>2] = $174;
  $179 = (($177) + 4)|0;
  $180 = $179;
  HEAP32[$180>>2] = $175;
  $2 = 6;
  $349 = $2;
  STACKTOP = sp;return ($349|0);
 }
 $181 = $137&255;
 $182 = ($181|0)<(254);
 $183 = $5;
 $184 = HEAP8[$183>>0]|0;
 if ($182) {
  $185 = $184&255;
  $186 = (_bitshift64Shl(($185|0),0,48)|0);
  $187 = tempRet0;
  $188 = $5;
  $189 = ((($188)) + 1|0);
  $190 = HEAP8[$189>>0]|0;
  $191 = $190&255;
  $192 = (_bitshift64Shl(($191|0),0,40)|0);
  $193 = tempRet0;
  $194 = $186 | $192;
  $195 = $187 | $193;
  $196 = $5;
  $197 = ((($196)) + 2|0);
  $198 = HEAP8[$197>>0]|0;
  $199 = $198&255;
  $200 = $195 | $199;
  $201 = $5;
  $202 = ((($201)) + 3|0);
  $203 = HEAP8[$202>>0]|0;
  $204 = $203&255;
  $205 = (_bitshift64Shl(($204|0),0,24)|0);
  $206 = tempRet0;
  $207 = $194 | $205;
  $208 = $200 | $206;
  $209 = $5;
  $210 = ((($209)) + 4|0);
  $211 = HEAP8[$210>>0]|0;
  $212 = $211&255;
  $213 = (_bitshift64Shl(($212|0),0,16)|0);
  $214 = tempRet0;
  $215 = $207 | $213;
  $216 = $208 | $214;
  $217 = $5;
  $218 = ((($217)) + 5|0);
  $219 = HEAP8[$218>>0]|0;
  $220 = $219&255;
  $221 = (_bitshift64Shl(($220|0),0,8)|0);
  $222 = tempRet0;
  $223 = $215 | $221;
  $224 = $216 | $222;
  $225 = $5;
  $226 = ((($225)) + 6|0);
  $227 = HEAP8[$226>>0]|0;
  $228 = $227&255;
  $229 = $223 | $228;
  $230 = $224 & 131071;
  $231 = $4;
  $232 = $231;
  $233 = $232;
  HEAP32[$233>>2] = $229;
  $234 = (($232) + 4)|0;
  $235 = $234;
  HEAP32[$235>>2] = $230;
  $2 = 7;
  $349 = $2;
  STACKTOP = sp;return ($349|0);
 }
 $236 = $184&255;
 $237 = ($236|0)<(255);
 $238 = $5;
 $239 = ((($238)) + 1|0);
 $240 = HEAP8[$239>>0]|0;
 $241 = $240&255;
 if ($237) {
  $242 = (_bitshift64Shl(($241|0),0,48)|0);
  $243 = tempRet0;
  $244 = $5;
  $245 = ((($244)) + 2|0);
  $246 = HEAP8[$245>>0]|0;
  $247 = $246&255;
  $248 = (_bitshift64Shl(($247|0),0,40)|0);
  $249 = tempRet0;
  $250 = $242 | $248;
  $251 = $243 | $249;
  $252 = $5;
  $253 = ((($252)) + 3|0);
  $254 = HEAP8[$253>>0]|0;
  $255 = $254&255;
  $256 = $251 | $255;
  $257 = $5;
  $258 = ((($257)) + 4|0);
  $259 = HEAP8[$258>>0]|0;
  $260 = $259&255;
  $261 = (_bitshift64Shl(($260|0),0,24)|0);
  $262 = tempRet0;
  $263 = $250 | $261;
  $264 = $256 | $262;
  $265 = $5;
  $266 = ((($265)) + 5|0);
  $267 = HEAP8[$266>>0]|0;
  $268 = $267&255;
  $269 = (_bitshift64Shl(($268|0),0,16)|0);
  $270 = tempRet0;
  $271 = $263 | $269;
  $272 = $264 | $270;
  $273 = $5;
  $274 = ((($273)) + 6|0);
  $275 = HEAP8[$274>>0]|0;
  $276 = $275&255;
  $277 = (_bitshift64Shl(($276|0),0,8)|0);
  $278 = tempRet0;
  $279 = $271 | $277;
  $280 = $272 | $278;
  $281 = $5;
  $282 = ((($281)) + 7|0);
  $283 = HEAP8[$282>>0]|0;
  $284 = $283&255;
  $285 = $279 | $284;
  $286 = $280 & 16777215;
  $287 = $4;
  $288 = $287;
  $289 = $288;
  HEAP32[$289>>2] = $285;
  $290 = (($288) + 4)|0;
  $291 = $290;
  HEAP32[$291>>2] = $286;
  $2 = 8;
  $349 = $2;
  STACKTOP = sp;return ($349|0);
 } else {
  $292 = (_bitshift64Shl(($241|0),0,56)|0);
  $293 = tempRet0;
  $294 = $5;
  $295 = ((($294)) + 2|0);
  $296 = HEAP8[$295>>0]|0;
  $297 = $296&255;
  $298 = (_bitshift64Shl(($297|0),0,48)|0);
  $299 = tempRet0;
  $300 = $292 | $298;
  $301 = $293 | $299;
  $302 = $5;
  $303 = ((($302)) + 3|0);
  $304 = HEAP8[$303>>0]|0;
  $305 = $304&255;
  $306 = (_bitshift64Shl(($305|0),0,40)|0);
  $307 = tempRet0;
  $308 = $300 | $306;
  $309 = $301 | $307;
  $310 = $5;
  $311 = ((($310)) + 4|0);
  $312 = HEAP8[$311>>0]|0;
  $313 = $312&255;
  $314 = $309 | $313;
  $315 = $5;
  $316 = ((($315)) + 5|0);
  $317 = HEAP8[$316>>0]|0;
  $318 = $317&255;
  $319 = (_bitshift64Shl(($318|0),0,24)|0);
  $320 = tempRet0;
  $321 = $308 | $319;
  $322 = $314 | $320;
  $323 = $5;
  $324 = ((($323)) + 6|0);
  $325 = HEAP8[$324>>0]|0;
  $326 = $325&255;
  $327 = (_bitshift64Shl(($326|0),0,16)|0);
  $328 = tempRet0;
  $329 = $321 | $327;
  $330 = $322 | $328;
  $331 = $5;
  $332 = ((($331)) + 7|0);
  $333 = HEAP8[$332>>0]|0;
  $334 = $333&255;
  $335 = (_bitshift64Shl(($334|0),0,8)|0);
  $336 = tempRet0;
  $337 = $329 | $335;
  $338 = $330 | $336;
  $339 = $5;
  $340 = ((($339)) + 8|0);
  $341 = HEAP8[$340>>0]|0;
  $342 = $341&255;
  $343 = $337 | $342;
  $344 = $4;
  $345 = $344;
  $346 = $345;
  HEAP32[$346>>2] = $343;
  $347 = (($345) + 4)|0;
  $348 = $347;
  HEAP32[$348>>2] = $338;
  $2 = 9;
  $349 = $2;
  STACKTOP = sp;return ($349|0);
 }
 return (0)|0;
}
function _ltf8_decode_crc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp + 24|0;
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = HEAP32[$9>>2]|0;
 $11 = (_hgetc($10)|0);
 $12 = $11&255;
 $13 = $12&255;
 $14 = $8;
 $15 = $14;
 HEAP32[$15>>2] = $13;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = $8;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20|0)==(-1);
 $25 = ($23|0)==(-1);
 $26 = $24 & $25;
 if ($26) {
  $3 = -1;
  $767 = $3;
  STACKTOP = sp;return ($767|0);
 }
 $27 = $8;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = $29&255;
 HEAP8[$7>>0] = $33;
 $34 = $8;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)<(0);
 $41 = ($36>>>0)<(128);
 $42 = ($39|0)==(0);
 $43 = $42 & $41;
 $44 = $40 | $43;
 $45 = $8;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (($45) + 4)|0;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 if ($44) {
  $51 = $5;
  $52 = $51;
  $53 = $52;
  HEAP32[$53>>2] = $47;
  $54 = (($52) + 4)|0;
  $55 = $54;
  HEAP32[$55>>2] = $50;
  $56 = $6;
  $57 = HEAP32[$56>>2]|0;
  $58 = (_crc32($57,$7,1)|0);
  $59 = $6;
  HEAP32[$59>>2] = $58;
  $3 = 1;
  $767 = $3;
  STACKTOP = sp;return ($767|0);
 }
 $60 = ($50|0)<(0);
 $61 = ($47>>>0)<(192);
 $62 = ($50|0)==(0);
 $63 = $62 & $61;
 $64 = $60 | $63;
 $65 = $8;
 $66 = $65;
 $67 = HEAP32[$66>>2]|0;
 $68 = (($65) + 4)|0;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 if ($64) {
  $71 = (_bitshift64Shl(($67|0),($70|0),8)|0);
  $72 = tempRet0;
  $73 = $4;
  $74 = HEAP32[$73>>2]|0;
  $75 = (_hgetc($74)|0);
  $76 = $75&255;
  $77 = ((($7)) + 1|0);
  HEAP8[$77>>0] = $76;
  $78 = $76&255;
  $79 = $71 | $78;
  $80 = $8;
  $81 = $80;
  HEAP32[$81>>2] = $79;
  $82 = (($80) + 4)|0;
  $83 = $82;
  HEAP32[$83>>2] = $72;
  $84 = $8;
  $85 = $84;
  $86 = HEAP32[$85>>2]|0;
  $87 = (($84) + 4)|0;
  $88 = $87;
  $89 = HEAP32[$88>>2]|0;
  $90 = $86 & 16383;
  $91 = $5;
  $92 = $91;
  $93 = $92;
  HEAP32[$93>>2] = $90;
  $94 = (($92) + 4)|0;
  $95 = $94;
  HEAP32[$95>>2] = 0;
  $96 = $6;
  $97 = HEAP32[$96>>2]|0;
  $98 = (_crc32($97,$7,2)|0);
  $99 = $6;
  HEAP32[$99>>2] = $98;
  $3 = 2;
  $767 = $3;
  STACKTOP = sp;return ($767|0);
 }
 $100 = ($70|0)<(0);
 $101 = ($67>>>0)<(224);
 $102 = ($70|0)==(0);
 $103 = $102 & $101;
 $104 = $100 | $103;
 $105 = $8;
 $106 = $105;
 $107 = HEAP32[$106>>2]|0;
 $108 = (($105) + 4)|0;
 $109 = $108;
 $110 = HEAP32[$109>>2]|0;
 if ($104) {
  $111 = (_bitshift64Shl(($107|0),($110|0),8)|0);
  $112 = tempRet0;
  $113 = $4;
  $114 = HEAP32[$113>>2]|0;
  $115 = (_hgetc($114)|0);
  $116 = $115&255;
  $117 = ((($7)) + 1|0);
  HEAP8[$117>>0] = $116;
  $118 = $116&255;
  $119 = $111 | $118;
  $120 = $8;
  $121 = $120;
  HEAP32[$121>>2] = $119;
  $122 = (($120) + 4)|0;
  $123 = $122;
  HEAP32[$123>>2] = $112;
  $124 = $8;
  $125 = $124;
  $126 = HEAP32[$125>>2]|0;
  $127 = (($124) + 4)|0;
  $128 = $127;
  $129 = HEAP32[$128>>2]|0;
  $130 = (_bitshift64Shl(($126|0),($129|0),8)|0);
  $131 = tempRet0;
  $132 = $4;
  $133 = HEAP32[$132>>2]|0;
  $134 = (_hgetc($133)|0);
  $135 = $134&255;
  $136 = ((($7)) + 2|0);
  HEAP8[$136>>0] = $135;
  $137 = $135&255;
  $138 = $130 | $137;
  $139 = $8;
  $140 = $139;
  HEAP32[$140>>2] = $138;
  $141 = (($139) + 4)|0;
  $142 = $141;
  HEAP32[$142>>2] = $131;
  $143 = $8;
  $144 = $143;
  $145 = HEAP32[$144>>2]|0;
  $146 = (($143) + 4)|0;
  $147 = $146;
  $148 = HEAP32[$147>>2]|0;
  $149 = $145 & 2097151;
  $150 = $5;
  $151 = $150;
  $152 = $151;
  HEAP32[$152>>2] = $149;
  $153 = (($151) + 4)|0;
  $154 = $153;
  HEAP32[$154>>2] = 0;
  $155 = $6;
  $156 = HEAP32[$155>>2]|0;
  $157 = (_crc32($156,$7,3)|0);
  $158 = $6;
  HEAP32[$158>>2] = $157;
  $3 = 3;
  $767 = $3;
  STACKTOP = sp;return ($767|0);
 }
 $159 = ($110|0)<(0);
 $160 = ($107>>>0)<(240);
 $161 = ($110|0)==(0);
 $162 = $161 & $160;
 $163 = $159 | $162;
 $164 = $8;
 $165 = $164;
 $166 = HEAP32[$165>>2]|0;
 $167 = (($164) + 4)|0;
 $168 = $167;
 $169 = HEAP32[$168>>2]|0;
 if ($163) {
  $170 = (_bitshift64Shl(($166|0),($169|0),8)|0);
  $171 = tempRet0;
  $172 = $4;
  $173 = HEAP32[$172>>2]|0;
  $174 = (_hgetc($173)|0);
  $175 = $174&255;
  $176 = ((($7)) + 1|0);
  HEAP8[$176>>0] = $175;
  $177 = $175&255;
  $178 = $170 | $177;
  $179 = $8;
  $180 = $179;
  HEAP32[$180>>2] = $178;
  $181 = (($179) + 4)|0;
  $182 = $181;
  HEAP32[$182>>2] = $171;
  $183 = $8;
  $184 = $183;
  $185 = HEAP32[$184>>2]|0;
  $186 = (($183) + 4)|0;
  $187 = $186;
  $188 = HEAP32[$187>>2]|0;
  $189 = (_bitshift64Shl(($185|0),($188|0),8)|0);
  $190 = tempRet0;
  $191 = $4;
  $192 = HEAP32[$191>>2]|0;
  $193 = (_hgetc($192)|0);
  $194 = $193&255;
  $195 = ((($7)) + 2|0);
  HEAP8[$195>>0] = $194;
  $196 = $194&255;
  $197 = $189 | $196;
  $198 = $8;
  $199 = $198;
  HEAP32[$199>>2] = $197;
  $200 = (($198) + 4)|0;
  $201 = $200;
  HEAP32[$201>>2] = $190;
  $202 = $8;
  $203 = $202;
  $204 = HEAP32[$203>>2]|0;
  $205 = (($202) + 4)|0;
  $206 = $205;
  $207 = HEAP32[$206>>2]|0;
  $208 = (_bitshift64Shl(($204|0),($207|0),8)|0);
  $209 = tempRet0;
  $210 = $4;
  $211 = HEAP32[$210>>2]|0;
  $212 = (_hgetc($211)|0);
  $213 = $212&255;
  $214 = ((($7)) + 3|0);
  HEAP8[$214>>0] = $213;
  $215 = $213&255;
  $216 = $208 | $215;
  $217 = $8;
  $218 = $217;
  HEAP32[$218>>2] = $216;
  $219 = (($217) + 4)|0;
  $220 = $219;
  HEAP32[$220>>2] = $209;
  $221 = $8;
  $222 = $221;
  $223 = HEAP32[$222>>2]|0;
  $224 = (($221) + 4)|0;
  $225 = $224;
  $226 = HEAP32[$225>>2]|0;
  $227 = $223 & 268435455;
  $228 = $5;
  $229 = $228;
  $230 = $229;
  HEAP32[$230>>2] = $227;
  $231 = (($229) + 4)|0;
  $232 = $231;
  HEAP32[$232>>2] = 0;
  $233 = $6;
  $234 = HEAP32[$233>>2]|0;
  $235 = (_crc32($234,$7,4)|0);
  $236 = $6;
  HEAP32[$236>>2] = $235;
  $3 = 4;
  $767 = $3;
  STACKTOP = sp;return ($767|0);
 }
 $237 = ($169|0)<(0);
 $238 = ($166>>>0)<(248);
 $239 = ($169|0)==(0);
 $240 = $239 & $238;
 $241 = $237 | $240;
 $242 = $8;
 $243 = $242;
 $244 = HEAP32[$243>>2]|0;
 $245 = (($242) + 4)|0;
 $246 = $245;
 $247 = HEAP32[$246>>2]|0;
 if ($241) {
  $248 = (_bitshift64Shl(($244|0),($247|0),8)|0);
  $249 = tempRet0;
  $250 = $4;
  $251 = HEAP32[$250>>2]|0;
  $252 = (_hgetc($251)|0);
  $253 = $252&255;
  $254 = ((($7)) + 1|0);
  HEAP8[$254>>0] = $253;
  $255 = $253&255;
  $256 = $248 | $255;
  $257 = $8;
  $258 = $257;
  HEAP32[$258>>2] = $256;
  $259 = (($257) + 4)|0;
  $260 = $259;
  HEAP32[$260>>2] = $249;
  $261 = $8;
  $262 = $261;
  $263 = HEAP32[$262>>2]|0;
  $264 = (($261) + 4)|0;
  $265 = $264;
  $266 = HEAP32[$265>>2]|0;
  $267 = (_bitshift64Shl(($263|0),($266|0),8)|0);
  $268 = tempRet0;
  $269 = $4;
  $270 = HEAP32[$269>>2]|0;
  $271 = (_hgetc($270)|0);
  $272 = $271&255;
  $273 = ((($7)) + 2|0);
  HEAP8[$273>>0] = $272;
  $274 = $272&255;
  $275 = $267 | $274;
  $276 = $8;
  $277 = $276;
  HEAP32[$277>>2] = $275;
  $278 = (($276) + 4)|0;
  $279 = $278;
  HEAP32[$279>>2] = $268;
  $280 = $8;
  $281 = $280;
  $282 = HEAP32[$281>>2]|0;
  $283 = (($280) + 4)|0;
  $284 = $283;
  $285 = HEAP32[$284>>2]|0;
  $286 = (_bitshift64Shl(($282|0),($285|0),8)|0);
  $287 = tempRet0;
  $288 = $4;
  $289 = HEAP32[$288>>2]|0;
  $290 = (_hgetc($289)|0);
  $291 = $290&255;
  $292 = ((($7)) + 3|0);
  HEAP8[$292>>0] = $291;
  $293 = $291&255;
  $294 = $286 | $293;
  $295 = $8;
  $296 = $295;
  HEAP32[$296>>2] = $294;
  $297 = (($295) + 4)|0;
  $298 = $297;
  HEAP32[$298>>2] = $287;
  $299 = $8;
  $300 = $299;
  $301 = HEAP32[$300>>2]|0;
  $302 = (($299) + 4)|0;
  $303 = $302;
  $304 = HEAP32[$303>>2]|0;
  $305 = (_bitshift64Shl(($301|0),($304|0),8)|0);
  $306 = tempRet0;
  $307 = $4;
  $308 = HEAP32[$307>>2]|0;
  $309 = (_hgetc($308)|0);
  $310 = $309&255;
  $311 = ((($7)) + 4|0);
  HEAP8[$311>>0] = $310;
  $312 = $310&255;
  $313 = $305 | $312;
  $314 = $8;
  $315 = $314;
  HEAP32[$315>>2] = $313;
  $316 = (($314) + 4)|0;
  $317 = $316;
  HEAP32[$317>>2] = $306;
  $318 = $8;
  $319 = $318;
  $320 = HEAP32[$319>>2]|0;
  $321 = (($318) + 4)|0;
  $322 = $321;
  $323 = HEAP32[$322>>2]|0;
  $324 = $323 & 7;
  $325 = $5;
  $326 = $325;
  $327 = $326;
  HEAP32[$327>>2] = $320;
  $328 = (($326) + 4)|0;
  $329 = $328;
  HEAP32[$329>>2] = $324;
  $330 = $6;
  $331 = HEAP32[$330>>2]|0;
  $332 = (_crc32($331,$7,5)|0);
  $333 = $6;
  HEAP32[$333>>2] = $332;
  $3 = 5;
  $767 = $3;
  STACKTOP = sp;return ($767|0);
 }
 $334 = ($247|0)<(0);
 $335 = ($244>>>0)<(252);
 $336 = ($247|0)==(0);
 $337 = $336 & $335;
 $338 = $334 | $337;
 $339 = $8;
 $340 = $339;
 $341 = HEAP32[$340>>2]|0;
 $342 = (($339) + 4)|0;
 $343 = $342;
 $344 = HEAP32[$343>>2]|0;
 if ($338) {
  $345 = (_bitshift64Shl(($341|0),($344|0),8)|0);
  $346 = tempRet0;
  $347 = $4;
  $348 = HEAP32[$347>>2]|0;
  $349 = (_hgetc($348)|0);
  $350 = $349&255;
  $351 = ((($7)) + 1|0);
  HEAP8[$351>>0] = $350;
  $352 = $350&255;
  $353 = $345 | $352;
  $354 = $8;
  $355 = $354;
  HEAP32[$355>>2] = $353;
  $356 = (($354) + 4)|0;
  $357 = $356;
  HEAP32[$357>>2] = $346;
  $358 = $8;
  $359 = $358;
  $360 = HEAP32[$359>>2]|0;
  $361 = (($358) + 4)|0;
  $362 = $361;
  $363 = HEAP32[$362>>2]|0;
  $364 = (_bitshift64Shl(($360|0),($363|0),8)|0);
  $365 = tempRet0;
  $366 = $4;
  $367 = HEAP32[$366>>2]|0;
  $368 = (_hgetc($367)|0);
  $369 = $368&255;
  $370 = ((($7)) + 2|0);
  HEAP8[$370>>0] = $369;
  $371 = $369&255;
  $372 = $364 | $371;
  $373 = $8;
  $374 = $373;
  HEAP32[$374>>2] = $372;
  $375 = (($373) + 4)|0;
  $376 = $375;
  HEAP32[$376>>2] = $365;
  $377 = $8;
  $378 = $377;
  $379 = HEAP32[$378>>2]|0;
  $380 = (($377) + 4)|0;
  $381 = $380;
  $382 = HEAP32[$381>>2]|0;
  $383 = (_bitshift64Shl(($379|0),($382|0),8)|0);
  $384 = tempRet0;
  $385 = $4;
  $386 = HEAP32[$385>>2]|0;
  $387 = (_hgetc($386)|0);
  $388 = $387&255;
  $389 = ((($7)) + 3|0);
  HEAP8[$389>>0] = $388;
  $390 = $388&255;
  $391 = $383 | $390;
  $392 = $8;
  $393 = $392;
  HEAP32[$393>>2] = $391;
  $394 = (($392) + 4)|0;
  $395 = $394;
  HEAP32[$395>>2] = $384;
  $396 = $8;
  $397 = $396;
  $398 = HEAP32[$397>>2]|0;
  $399 = (($396) + 4)|0;
  $400 = $399;
  $401 = HEAP32[$400>>2]|0;
  $402 = (_bitshift64Shl(($398|0),($401|0),8)|0);
  $403 = tempRet0;
  $404 = $4;
  $405 = HEAP32[$404>>2]|0;
  $406 = (_hgetc($405)|0);
  $407 = $406&255;
  $408 = ((($7)) + 4|0);
  HEAP8[$408>>0] = $407;
  $409 = $407&255;
  $410 = $402 | $409;
  $411 = $8;
  $412 = $411;
  HEAP32[$412>>2] = $410;
  $413 = (($411) + 4)|0;
  $414 = $413;
  HEAP32[$414>>2] = $403;
  $415 = $8;
  $416 = $415;
  $417 = HEAP32[$416>>2]|0;
  $418 = (($415) + 4)|0;
  $419 = $418;
  $420 = HEAP32[$419>>2]|0;
  $421 = (_bitshift64Shl(($417|0),($420|0),8)|0);
  $422 = tempRet0;
  $423 = $4;
  $424 = HEAP32[$423>>2]|0;
  $425 = (_hgetc($424)|0);
  $426 = $425&255;
  $427 = ((($7)) + 5|0);
  HEAP8[$427>>0] = $426;
  $428 = $426&255;
  $429 = $421 | $428;
  $430 = $8;
  $431 = $430;
  HEAP32[$431>>2] = $429;
  $432 = (($430) + 4)|0;
  $433 = $432;
  HEAP32[$433>>2] = $422;
  $434 = $8;
  $435 = $434;
  $436 = HEAP32[$435>>2]|0;
  $437 = (($434) + 4)|0;
  $438 = $437;
  $439 = HEAP32[$438>>2]|0;
  $440 = $439 & 1023;
  $441 = $5;
  $442 = $441;
  $443 = $442;
  HEAP32[$443>>2] = $436;
  $444 = (($442) + 4)|0;
  $445 = $444;
  HEAP32[$445>>2] = $440;
  $446 = $6;
  $447 = HEAP32[$446>>2]|0;
  $448 = (_crc32($447,$7,6)|0);
  $449 = $6;
  HEAP32[$449>>2] = $448;
  $3 = 6;
  $767 = $3;
  STACKTOP = sp;return ($767|0);
 }
 $450 = ($344|0)<(0);
 $451 = ($341>>>0)<(254);
 $452 = ($344|0)==(0);
 $453 = $452 & $451;
 $454 = $450 | $453;
 $455 = $8;
 $456 = $455;
 $457 = HEAP32[$456>>2]|0;
 $458 = (($455) + 4)|0;
 $459 = $458;
 $460 = HEAP32[$459>>2]|0;
 if ($454) {
  $461 = (_bitshift64Shl(($457|0),($460|0),8)|0);
  $462 = tempRet0;
  $463 = $4;
  $464 = HEAP32[$463>>2]|0;
  $465 = (_hgetc($464)|0);
  $466 = $465&255;
  $467 = ((($7)) + 1|0);
  HEAP8[$467>>0] = $466;
  $468 = $466&255;
  $469 = $461 | $468;
  $470 = $8;
  $471 = $470;
  HEAP32[$471>>2] = $469;
  $472 = (($470) + 4)|0;
  $473 = $472;
  HEAP32[$473>>2] = $462;
  $474 = $8;
  $475 = $474;
  $476 = HEAP32[$475>>2]|0;
  $477 = (($474) + 4)|0;
  $478 = $477;
  $479 = HEAP32[$478>>2]|0;
  $480 = (_bitshift64Shl(($476|0),($479|0),8)|0);
  $481 = tempRet0;
  $482 = $4;
  $483 = HEAP32[$482>>2]|0;
  $484 = (_hgetc($483)|0);
  $485 = $484&255;
  $486 = ((($7)) + 2|0);
  HEAP8[$486>>0] = $485;
  $487 = $485&255;
  $488 = $480 | $487;
  $489 = $8;
  $490 = $489;
  HEAP32[$490>>2] = $488;
  $491 = (($489) + 4)|0;
  $492 = $491;
  HEAP32[$492>>2] = $481;
  $493 = $8;
  $494 = $493;
  $495 = HEAP32[$494>>2]|0;
  $496 = (($493) + 4)|0;
  $497 = $496;
  $498 = HEAP32[$497>>2]|0;
  $499 = (_bitshift64Shl(($495|0),($498|0),8)|0);
  $500 = tempRet0;
  $501 = $4;
  $502 = HEAP32[$501>>2]|0;
  $503 = (_hgetc($502)|0);
  $504 = $503&255;
  $505 = ((($7)) + 3|0);
  HEAP8[$505>>0] = $504;
  $506 = $504&255;
  $507 = $499 | $506;
  $508 = $8;
  $509 = $508;
  HEAP32[$509>>2] = $507;
  $510 = (($508) + 4)|0;
  $511 = $510;
  HEAP32[$511>>2] = $500;
  $512 = $8;
  $513 = $512;
  $514 = HEAP32[$513>>2]|0;
  $515 = (($512) + 4)|0;
  $516 = $515;
  $517 = HEAP32[$516>>2]|0;
  $518 = (_bitshift64Shl(($514|0),($517|0),8)|0);
  $519 = tempRet0;
  $520 = $4;
  $521 = HEAP32[$520>>2]|0;
  $522 = (_hgetc($521)|0);
  $523 = $522&255;
  $524 = ((($7)) + 4|0);
  HEAP8[$524>>0] = $523;
  $525 = $523&255;
  $526 = $518 | $525;
  $527 = $8;
  $528 = $527;
  HEAP32[$528>>2] = $526;
  $529 = (($527) + 4)|0;
  $530 = $529;
  HEAP32[$530>>2] = $519;
  $531 = $8;
  $532 = $531;
  $533 = HEAP32[$532>>2]|0;
  $534 = (($531) + 4)|0;
  $535 = $534;
  $536 = HEAP32[$535>>2]|0;
  $537 = (_bitshift64Shl(($533|0),($536|0),8)|0);
  $538 = tempRet0;
  $539 = $4;
  $540 = HEAP32[$539>>2]|0;
  $541 = (_hgetc($540)|0);
  $542 = $541&255;
  $543 = ((($7)) + 5|0);
  HEAP8[$543>>0] = $542;
  $544 = $542&255;
  $545 = $537 | $544;
  $546 = $8;
  $547 = $546;
  HEAP32[$547>>2] = $545;
  $548 = (($546) + 4)|0;
  $549 = $548;
  HEAP32[$549>>2] = $538;
  $550 = $8;
  $551 = $550;
  $552 = HEAP32[$551>>2]|0;
  $553 = (($550) + 4)|0;
  $554 = $553;
  $555 = HEAP32[$554>>2]|0;
  $556 = (_bitshift64Shl(($552|0),($555|0),8)|0);
  $557 = tempRet0;
  $558 = $4;
  $559 = HEAP32[$558>>2]|0;
  $560 = (_hgetc($559)|0);
  $561 = $560&255;
  $562 = ((($7)) + 6|0);
  HEAP8[$562>>0] = $561;
  $563 = $561&255;
  $564 = $556 | $563;
  $565 = $8;
  $566 = $565;
  HEAP32[$566>>2] = $564;
  $567 = (($565) + 4)|0;
  $568 = $567;
  HEAP32[$568>>2] = $557;
  $569 = $8;
  $570 = $569;
  $571 = HEAP32[$570>>2]|0;
  $572 = (($569) + 4)|0;
  $573 = $572;
  $574 = HEAP32[$573>>2]|0;
  $575 = $574 & 131071;
  $576 = $5;
  $577 = $576;
  $578 = $577;
  HEAP32[$578>>2] = $571;
  $579 = (($577) + 4)|0;
  $580 = $579;
  HEAP32[$580>>2] = $575;
  $581 = $6;
  $582 = HEAP32[$581>>2]|0;
  $583 = (_crc32($582,$7,7)|0);
  $584 = $6;
  HEAP32[$584>>2] = $583;
  $3 = 7;
  $767 = $3;
  STACKTOP = sp;return ($767|0);
 }
 $585 = ($460|0)<(0);
 $586 = ($457>>>0)<(255);
 $587 = ($460|0)==(0);
 $588 = $587 & $586;
 $589 = $585 | $588;
 $590 = $8;
 $591 = $590;
 $592 = HEAP32[$591>>2]|0;
 $593 = (($590) + 4)|0;
 $594 = $593;
 $595 = HEAP32[$594>>2]|0;
 $596 = (_bitshift64Shl(($592|0),($595|0),8)|0);
 $597 = tempRet0;
 $598 = $4;
 $599 = HEAP32[$598>>2]|0;
 $600 = (_hgetc($599)|0);
 $601 = $600&255;
 $602 = ((($7)) + 1|0);
 HEAP8[$602>>0] = $601;
 $603 = $601&255;
 $604 = $596 | $603;
 $605 = $8;
 $606 = $605;
 HEAP32[$606>>2] = $604;
 $607 = (($605) + 4)|0;
 $608 = $607;
 HEAP32[$608>>2] = $597;
 $609 = $8;
 $610 = $609;
 $611 = HEAP32[$610>>2]|0;
 $612 = (($609) + 4)|0;
 $613 = $612;
 $614 = HEAP32[$613>>2]|0;
 $615 = (_bitshift64Shl(($611|0),($614|0),8)|0);
 $616 = tempRet0;
 $617 = $4;
 $618 = HEAP32[$617>>2]|0;
 $619 = (_hgetc($618)|0);
 $620 = $619&255;
 $621 = ((($7)) + 2|0);
 HEAP8[$621>>0] = $620;
 $622 = $620&255;
 $623 = $615 | $622;
 $624 = $8;
 $625 = $624;
 HEAP32[$625>>2] = $623;
 $626 = (($624) + 4)|0;
 $627 = $626;
 HEAP32[$627>>2] = $616;
 $628 = $8;
 $629 = $628;
 $630 = HEAP32[$629>>2]|0;
 $631 = (($628) + 4)|0;
 $632 = $631;
 $633 = HEAP32[$632>>2]|0;
 $634 = (_bitshift64Shl(($630|0),($633|0),8)|0);
 $635 = tempRet0;
 $636 = $4;
 $637 = HEAP32[$636>>2]|0;
 $638 = (_hgetc($637)|0);
 $639 = $638&255;
 $640 = ((($7)) + 3|0);
 HEAP8[$640>>0] = $639;
 $641 = $639&255;
 $642 = $634 | $641;
 $643 = $8;
 $644 = $643;
 HEAP32[$644>>2] = $642;
 $645 = (($643) + 4)|0;
 $646 = $645;
 HEAP32[$646>>2] = $635;
 $647 = $8;
 $648 = $647;
 $649 = HEAP32[$648>>2]|0;
 $650 = (($647) + 4)|0;
 $651 = $650;
 $652 = HEAP32[$651>>2]|0;
 $653 = (_bitshift64Shl(($649|0),($652|0),8)|0);
 $654 = tempRet0;
 $655 = $4;
 $656 = HEAP32[$655>>2]|0;
 $657 = (_hgetc($656)|0);
 $658 = $657&255;
 $659 = ((($7)) + 4|0);
 HEAP8[$659>>0] = $658;
 $660 = $658&255;
 $661 = $653 | $660;
 $662 = $8;
 $663 = $662;
 HEAP32[$663>>2] = $661;
 $664 = (($662) + 4)|0;
 $665 = $664;
 HEAP32[$665>>2] = $654;
 $666 = $8;
 $667 = $666;
 $668 = HEAP32[$667>>2]|0;
 $669 = (($666) + 4)|0;
 $670 = $669;
 $671 = HEAP32[$670>>2]|0;
 $672 = (_bitshift64Shl(($668|0),($671|0),8)|0);
 $673 = tempRet0;
 $674 = $4;
 $675 = HEAP32[$674>>2]|0;
 $676 = (_hgetc($675)|0);
 $677 = $676&255;
 $678 = ((($7)) + 5|0);
 HEAP8[$678>>0] = $677;
 $679 = $677&255;
 $680 = $672 | $679;
 $681 = $8;
 $682 = $681;
 HEAP32[$682>>2] = $680;
 $683 = (($681) + 4)|0;
 $684 = $683;
 HEAP32[$684>>2] = $673;
 $685 = $8;
 $686 = $685;
 $687 = HEAP32[$686>>2]|0;
 $688 = (($685) + 4)|0;
 $689 = $688;
 $690 = HEAP32[$689>>2]|0;
 $691 = (_bitshift64Shl(($687|0),($690|0),8)|0);
 $692 = tempRet0;
 $693 = $4;
 $694 = HEAP32[$693>>2]|0;
 $695 = (_hgetc($694)|0);
 $696 = $695&255;
 $697 = ((($7)) + 6|0);
 HEAP8[$697>>0] = $696;
 $698 = $696&255;
 $699 = $691 | $698;
 $700 = $8;
 $701 = $700;
 HEAP32[$701>>2] = $699;
 $702 = (($700) + 4)|0;
 $703 = $702;
 HEAP32[$703>>2] = $692;
 $704 = $8;
 $705 = $704;
 $706 = HEAP32[$705>>2]|0;
 $707 = (($704) + 4)|0;
 $708 = $707;
 $709 = HEAP32[$708>>2]|0;
 $710 = (_bitshift64Shl(($706|0),($709|0),8)|0);
 $711 = tempRet0;
 $712 = $4;
 $713 = HEAP32[$712>>2]|0;
 $714 = (_hgetc($713)|0);
 $715 = $714&255;
 $716 = ((($7)) + 7|0);
 HEAP8[$716>>0] = $715;
 $717 = $715&255;
 $718 = $710 | $717;
 $719 = $8;
 $720 = $719;
 HEAP32[$720>>2] = $718;
 $721 = (($719) + 4)|0;
 $722 = $721;
 HEAP32[$722>>2] = $711;
 $723 = $8;
 $724 = $723;
 $725 = HEAP32[$724>>2]|0;
 $726 = (($723) + 4)|0;
 $727 = $726;
 $728 = HEAP32[$727>>2]|0;
 if ($589) {
  $729 = $728 & 16777215;
  $730 = $5;
  $731 = $730;
  $732 = $731;
  HEAP32[$732>>2] = $725;
  $733 = (($731) + 4)|0;
  $734 = $733;
  HEAP32[$734>>2] = $729;
  $735 = $6;
  $736 = HEAP32[$735>>2]|0;
  $737 = (_crc32($736,$7,8)|0);
  $738 = $6;
  HEAP32[$738>>2] = $737;
  $3 = 8;
  $767 = $3;
  STACKTOP = sp;return ($767|0);
 } else {
  $739 = (_bitshift64Shl(($725|0),($728|0),8)|0);
  $740 = tempRet0;
  $741 = $4;
  $742 = HEAP32[$741>>2]|0;
  $743 = (_hgetc($742)|0);
  $744 = $743&255;
  $745 = ((($7)) + 8|0);
  HEAP8[$745>>0] = $744;
  $746 = $744&255;
  $747 = $739 | $746;
  $748 = $8;
  $749 = $748;
  HEAP32[$749>>2] = $747;
  $750 = (($748) + 4)|0;
  $751 = $750;
  HEAP32[$751>>2] = $740;
  $752 = $6;
  $753 = HEAP32[$752>>2]|0;
  $754 = (_crc32($753,$7,9)|0);
  $755 = $6;
  HEAP32[$755>>2] = $754;
  $756 = $8;
  $757 = $756;
  $758 = HEAP32[$757>>2]|0;
  $759 = (($756) + 4)|0;
  $760 = $759;
  $761 = HEAP32[$760>>2]|0;
  $762 = $5;
  $763 = $762;
  $764 = $763;
  HEAP32[$764>>2] = $758;
  $765 = (($763) + 4)|0;
  $766 = $765;
  HEAP32[$766>>2] = $761;
  $3 = 9;
  $767 = $3;
  STACKTOP = sp;return ($767|0);
 }
 return (0)|0;
}
function _int32_decode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = (_hread($7,$5,4)|0);
 $9 = (4)!=($8|0);
 if ($9) {
  $2 = -1;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 } else {
  $10 = HEAP32[$5>>2]|0;
  $11 = $4;
  HEAP32[$11>>2] = $10;
  $2 = 4;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _hread($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $9;
 $14 = $12;
 $15 = (($13) - ($14))|0;
 $6 = $15;
 $16 = $6;
 $17 = $5;
 $18 = ($16>>>0)>($17>>>0);
 if ($18) {
  $19 = $5;
  $6 = $19;
 }
 $20 = $4;
 $21 = $3;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $6;
 _memcpy(($20|0),($23|0),($24|0))|0;
 $25 = $6;
 $26 = $3;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($25)|0);
 HEAP32[$27>>2] = $29;
 $30 = $6;
 $31 = $5;
 $32 = ($30|0)==($31|0);
 if ($32) {
  $33 = $6;
  $39 = $33;
  STACKTOP = sp;return ($39|0);
 } else {
  $34 = $3;
  $35 = $4;
  $36 = $5;
  $37 = $6;
  $38 = (_hread2($34,$35,$36,$37)|0);
  $39 = $38;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _int32_get_blk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = ((($8)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) - ($10))|0;
 $12 = ($11>>>0)<(4);
 if ($12) {
  $2 = -1;
  $63 = $2;
  STACKTOP = sp;return ($63|0);
 } else {
  $13 = $3;
  $14 = ((($13)) + 40|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $3;
  $17 = ((($16)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($15)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $3;
  $23 = ((($22)) + 40|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 1)|0;
  $26 = $3;
  $27 = ((($26)) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + ($25)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = $31 << 8;
  $33 = $21 | $32;
  $34 = $3;
  $35 = ((($34)) + 40|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 2)|0;
  $38 = $3;
  $39 = ((($38)) + 32|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + ($37)|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = $43 << 16;
  $45 = $33 | $44;
  $46 = $3;
  $47 = ((($46)) + 40|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + 3)|0;
  $50 = $3;
  $51 = ((($50)) + 32|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + ($49)|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = $55 << 24;
  $57 = $45 | $56;
  $58 = $4;
  HEAP32[$58>>2] = $57;
  $59 = $3;
  $60 = ((($59)) + 40|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + 4)|0;
  HEAP32[$60>>2] = $62;
  $2 = 4;
  $63 = $2;
  STACKTOP = sp;return ($63|0);
 }
 return (0)|0;
}
function _zlib_mem_inflate($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0;
 var $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $7 = sp + 32|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 $9 = 0;
 $13 = $5;
 $14 = (+($13>>>0));
 $15 = $14 * 1.2;
 $16 = $15 + 100.0;
 $17 = (~~(($16)));
 $9 = $17;
 $18 = (_malloc($17)|0);
 $8 = $18;
 $19 = $8;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  $3 = 0;
  $88 = $3;
  STACKTOP = sp;return ($88|0);
 }
 $21 = ((($7)) + 32|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($7)) + 36|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($7)) + 40|0);
 HEAP32[$23>>2] = 0;
 $24 = $4;
 HEAP32[$7>>2] = $24;
 $25 = $5;
 $26 = ((($7)) + 4|0);
 HEAP32[$26>>2] = $25;
 $27 = ((($7)) + 8|0);
 HEAP32[$27>>2] = 0;
 $28 = $8;
 $29 = ((($7)) + 12|0);
 HEAP32[$29>>2] = $28;
 $30 = $9;
 $31 = ((($7)) + 16|0);
 HEAP32[$31>>2] = $30;
 $32 = ((($7)) + 20|0);
 HEAP32[$32>>2] = 0;
 $33 = (_inflateInit2_($7,47,18804,56)|0);
 $10 = $33;
 $34 = $10;
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = HEAP32[2410]|0;
  $37 = ((($7)) + 24|0);
  $38 = HEAP32[$37>>2]|0;
  HEAP32[$vararg_buffer>>2] = $38;
  (_fprintf($36,15126,$vararg_buffer)|0);
  $39 = $8;
  _free($39);
  $3 = 0;
  $88 = $3;
  STACKTOP = sp;return ($88|0);
 }
 while(1) {
  $40 = ((($7)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0);
  if (!($42)) {
   label = 14;
   break;
  }
  $43 = ((($7)) + 20|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $8;
  $46 = (($45) + ($44)|0);
  $47 = ((($7)) + 12|0);
  HEAP32[$47>>2] = $46;
  $48 = (_inflate($7,0)|0);
  $10 = $48;
  $49 = $10;
  $50 = ($49|0)==(1);
  if ($50) {
   label = 14;
   break;
  }
  $51 = $10;
  $52 = ($51|0)!=(0);
  if ($52) {
   label = 8;
   break;
  }
  $59 = ((($7)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (+($60>>>0));
  $62 = ((($7)) + 8|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (+($63>>>0));
  $65 = $61 / $64;
  $66 = ((($7)) + 20|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (+($67>>>0));
  $69 = $65 * $68;
  $70 = $69 + 100.0;
  $71 = (~~(($70)));
  $12 = $71;
  $72 = $8;
  $11 = $72;
  $73 = $12;
  $74 = $9;
  $75 = (($74) + ($73))|0;
  $9 = $75;
  $76 = (_realloc($72,$75)|0);
  $8 = $76;
  $77 = $8;
  $78 = ($77|0)!=(0|0);
  if (!($78)) {
   label = 12;
   break;
  }
  $80 = $12;
  $81 = ((($7)) + 16|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($82) + ($80))|0;
  HEAP32[$81>>2] = $83;
 }
 if ((label|0) == 8) {
  $53 = HEAP32[2410]|0;
  $54 = ((($7)) + 24|0);
  $55 = HEAP32[$54>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $55;
  (_fprintf($53,15154,$vararg_buffer1)|0);
  $56 = $8;
  $57 = ($56|0)!=(0|0);
  if ($57) {
   $58 = $8;
   _free($58);
  }
  $3 = 0;
  $88 = $3;
  STACKTOP = sp;return ($88|0);
 }
 else if ((label|0) == 12) {
  $79 = $11;
  _free($79);
  $3 = 0;
  $88 = $3;
  STACKTOP = sp;return ($88|0);
 }
 else if ((label|0) == 14) {
  (_inflateEnd($7)|0);
  $84 = ((($7)) + 20|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $6;
  HEAP32[$86>>2] = $85;
  $87 = $8;
  $3 = $87;
  $88 = $3;
  STACKTOP = sp;return ($88|0);
 }
 return (0)|0;
}
function _cram_new_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = (_malloc(48)|0);
 $5 = $6;
 $7 = $5;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $5;
  $10 = ((($9)) + 4|0);
  HEAP32[$10>>2] = 0;
  $11 = $5;
  HEAP32[$11>>2] = 0;
  $12 = $3;
  $13 = $5;
  $14 = ((($13)) + 8|0);
  HEAP32[$14>>2] = $12;
  $15 = $4;
  $16 = $5;
  $17 = ((($16)) + 12|0);
  HEAP32[$17>>2] = $15;
  $18 = $5;
  $19 = ((($18)) + 16|0);
  HEAP32[$19>>2] = 0;
  $20 = $5;
  $21 = ((($20)) + 20|0);
  HEAP32[$21>>2] = 0;
  $22 = $5;
  $23 = ((($22)) + 32|0);
  HEAP32[$23>>2] = 0;
  $24 = $5;
  $25 = ((($24)) + 36|0);
  HEAP32[$25>>2] = 0;
  $26 = $5;
  $27 = ((($26)) + 40|0);
  HEAP32[$27>>2] = 0;
  $28 = $5;
  $29 = ((($28)) + 44|0);
  HEAP32[$29>>2] = 7;
  $30 = $5;
  $2 = $30;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 } else {
  $2 = 0;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _cram_read_block($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 20|0;
 $5 = sp + 4|0;
 $2 = $0;
 $6 = (_malloc(48)|0);
 $3 = $6;
 HEAP32[$5>>2] = 0;
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $1 = 0;
  $153 = $1;
  STACKTOP = sp;return ($153|0);
 }
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $11 = (_hgetc($10)|0);
 $12 = $3;
 HEAP32[$12>>2] = $11;
 $13 = (-1)==($11|0);
 $14 = $3;
 if ($13) {
  _free($14);
  $1 = 0;
  $153 = $1;
  STACKTOP = sp;return ($153|0);
 }
 $15 = HEAP32[$14>>2]|0;
 $16 = $15&255;
 HEAP8[$4>>0] = $16;
 $17 = HEAP32[$5>>2]|0;
 $18 = (_crc32($17,$4,1)|0);
 HEAP32[$5>>2] = $18;
 $19 = $2;
 $20 = HEAP32[$19>>2]|0;
 $21 = (_hgetc($20)|0);
 $22 = $3;
 $23 = ((($22)) + 8|0);
 HEAP32[$23>>2] = $21;
 $24 = (-1)==($21|0);
 $25 = $3;
 if ($24) {
  _free($25);
  $1 = 0;
  $153 = $1;
  STACKTOP = sp;return ($153|0);
 }
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27&255;
 HEAP8[$4>>0] = $28;
 $29 = HEAP32[$5>>2]|0;
 $30 = (_crc32($29,$4,1)|0);
 HEAP32[$5>>2] = $30;
 $31 = $2;
 $32 = $3;
 $33 = ((($32)) + 12|0);
 $34 = (_itf8_decode_crc($31,$33,$5)|0);
 $35 = (-1)==($34|0);
 if ($35) {
  $36 = $3;
  _free($36);
  $1 = 0;
  $153 = $1;
  STACKTOP = sp;return ($153|0);
 }
 $37 = $2;
 $38 = $3;
 $39 = ((($38)) + 16|0);
 $40 = (_itf8_decode_crc($37,$39,$5)|0);
 $41 = (-1)==($40|0);
 if ($41) {
  $42 = $3;
  _free($42);
  $1 = 0;
  $153 = $1;
  STACKTOP = sp;return ($153|0);
 }
 $43 = $2;
 $44 = $3;
 $45 = ((($44)) + 20|0);
 $46 = (_itf8_decode_crc($43,$45,$5)|0);
 $47 = (-1)==($46|0);
 $48 = $3;
 if ($47) {
  _free($48);
  $1 = 0;
  $153 = $1;
  STACKTOP = sp;return ($153|0);
 }
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(0);
 $51 = $3;
 if ($50) {
  $52 = ((($51)) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $3;
  $55 = ((($54)) + 36|0);
  HEAP32[$55>>2] = $53;
  $56 = $3;
  $57 = ((($56)) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (_malloc($58)|0);
  $60 = $3;
  $61 = ((($60)) + 32|0);
  HEAP32[$61>>2] = $59;
  $62 = ($59|0)!=(0|0);
  $63 = $3;
  if (!($62)) {
   _free($63);
   $1 = 0;
   $153 = $1;
   STACKTOP = sp;return ($153|0);
  }
  $64 = ((($63)) + 20|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $2;
  $67 = HEAP32[$66>>2]|0;
  $68 = $3;
  $69 = ((($68)) + 32|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $3;
  $72 = ((($71)) + 20|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (_hread($67,$70,$73)|0);
  $75 = ($65|0)!=($74|0);
  if ($75) {
   $76 = $3;
   $77 = ((($76)) + 32|0);
   $78 = HEAP32[$77>>2]|0;
   _free($78);
   $79 = $3;
   _free($79);
   $1 = 0;
   $153 = $1;
   STACKTOP = sp;return ($153|0);
  }
 } else {
  $80 = ((($51)) + 16|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $3;
  $83 = ((($82)) + 36|0);
  HEAP32[$83>>2] = $81;
  $84 = $3;
  $85 = ((($84)) + 16|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (_malloc($86)|0);
  $88 = $3;
  $89 = ((($88)) + 32|0);
  HEAP32[$89>>2] = $87;
  $90 = ($87|0)!=(0|0);
  $91 = $3;
  if (!($90)) {
   _free($91);
   $1 = 0;
   $153 = $1;
   STACKTOP = sp;return ($153|0);
  }
  $92 = ((($91)) + 16|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $2;
  $95 = HEAP32[$94>>2]|0;
  $96 = $3;
  $97 = ((($96)) + 32|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $3;
  $100 = ((($99)) + 16|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (_hread($95,$98,$101)|0);
  $103 = ($93|0)!=($102|0);
  if ($103) {
   $104 = $3;
   $105 = ((($104)) + 32|0);
   $106 = HEAP32[$105>>2]|0;
   _free($106);
   $107 = $3;
   _free($107);
   $1 = 0;
   $153 = $1;
   STACKTOP = sp;return ($153|0);
  }
 }
 $108 = $2;
 $109 = ((($108)) + 8|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 >> 8;
 $112 = ($111|0)>=(3);
 if ($112) {
  $113 = $2;
  $114 = $3;
  $115 = ((($114)) + 24|0);
  $116 = (_int32_decode($113,$115)|0);
  $117 = (-1)==($116|0);
  if ($117) {
   $118 = $3;
   _free($118);
   $1 = 0;
   $153 = $1;
   STACKTOP = sp;return ($153|0);
  }
  $119 = HEAP32[$5>>2]|0;
  $120 = $3;
  $121 = ((($120)) + 32|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ($122|0)!=(0|0);
  if ($123) {
   $124 = $3;
   $125 = ((($124)) + 32|0);
   $126 = HEAP32[$125>>2]|0;
   $130 = $126;
  } else {
   $130 = 26441;
  }
  $127 = $3;
  $128 = ((($127)) + 36|0);
  $129 = HEAP32[$128>>2]|0;
  $131 = (_crc32($119,$130,$129)|0);
  HEAP32[$5>>2] = $131;
  $132 = HEAP32[$5>>2]|0;
  $133 = $3;
  $134 = ((($133)) + 24|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = ($132|0)!=($135|0);
  if ($136) {
   $137 = HEAP32[2410]|0;
   (_fprintf($137,15178,$vararg_buffer)|0);
   $138 = $3;
   $139 = ((($138)) + 32|0);
   $140 = HEAP32[$139>>2]|0;
   _free($140);
   $141 = $3;
   _free($141);
   $1 = 0;
   $153 = $1;
   STACKTOP = sp;return ($153|0);
  }
 }
 $142 = $3;
 $143 = HEAP32[$142>>2]|0;
 $144 = $3;
 $145 = ((($144)) + 4|0);
 HEAP32[$145>>2] = $143;
 $146 = $3;
 $147 = ((($146)) + 28|0);
 HEAP32[$147>>2] = 0;
 $148 = $3;
 $149 = ((($148)) + 40|0);
 HEAP32[$149>>2] = 0;
 $150 = $3;
 $151 = ((($150)) + 44|0);
 HEAP32[$151>>2] = 7;
 $152 = $3;
 $1 = $152;
 $153 = $1;
 STACKTOP = sp;return ($153|0);
}
function _cram_free_block($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
 }
 $11 = $1;
 _free($11);
 STACKTOP = sp;return;
}
function _cram_uncompress_block($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 20|0;
 $6 = sp + 12|0;
 $2 = $0;
 HEAP32[$4>>2] = 0;
 $7 = $2;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 $11 = $2;
 if ($10) {
  HEAP32[$11>>2] = 0;
  $1 = 0;
  $68 = $1;
  STACKTOP = sp;return ($68|0);
 }
 $12 = HEAP32[$11>>2]|0;
 L5: do {
  switch ($12|0) {
  case 0:  {
   $1 = 0;
   $68 = $1;
   STACKTOP = sp;return ($68|0);
   break;
  }
  case 1:  {
   $13 = $2;
   $14 = ((($13)) + 32|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $2;
   $17 = ((($16)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (_zlib_mem_inflate($15,$18,$4)|0);
   $3 = $19;
   $20 = $3;
   $21 = ($20|0)!=(0|0);
   if (!($21)) {
    $1 = -1;
    $68 = $1;
    STACKTOP = sp;return ($68|0);
   }
   $22 = HEAP32[$4>>2]|0;
   $23 = $2;
   $24 = ((($23)) + 20|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($22|0)!=($25|0);
   if (!($26)) {
    $28 = $2;
    $29 = ((($28)) + 32|0);
    $30 = HEAP32[$29>>2]|0;
    _free($30);
    $31 = $3;
    $32 = $2;
    $33 = ((($32)) + 32|0);
    HEAP32[$33>>2] = $31;
    $34 = HEAP32[$4>>2]|0;
    $35 = $2;
    $36 = ((($35)) + 36|0);
    HEAP32[$36>>2] = $34;
    $37 = $2;
    HEAP32[$37>>2] = 0;
    break L5;
   }
   $27 = $3;
   _free($27);
   $1 = -1;
   $68 = $1;
   STACKTOP = sp;return ($68|0);
   break;
  }
  case 2:  {
   $38 = HEAP32[2410]|0;
   (_fprintf($38,15214,$vararg_buffer)|0);
   $1 = -1;
   $68 = $1;
   STACKTOP = sp;return ($68|0);
   break;
  }
  case 3:  {
   $39 = HEAP32[2410]|0;
   (_fprintf($39,15298,$vararg_buffer1)|0);
   $1 = -1;
   $68 = $1;
   STACKTOP = sp;return ($68|0);
   break;
  }
  case 4:  {
   $40 = $2;
   $41 = ((($40)) + 20|0);
   $42 = HEAP32[$41>>2]|0;
   $5 = $42;
   $43 = $2;
   $44 = ((($43)) + 32|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $2;
   $47 = ((($46)) + 16|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (_rans_uncompress($45,$48,$6)|0);
   $3 = $49;
   $50 = $3;
   $51 = ($50|0)!=(0|0);
   if ($51) {
    $52 = $5;
    $53 = HEAP32[$6>>2]|0;
    $54 = ($52|0)!=($53|0);
    if (!($54)) {
     $55 = $2;
     $56 = ((($55)) + 32|0);
     $57 = HEAP32[$56>>2]|0;
     _free($57);
     $58 = $3;
     $59 = $2;
     $60 = ((($59)) + 32|0);
     HEAP32[$60>>2] = $58;
     $61 = HEAP32[$6>>2]|0;
     $62 = $2;
     $63 = ((($62)) + 36|0);
     HEAP32[$63>>2] = $61;
     $64 = $2;
     HEAP32[$64>>2] = 0;
     $65 = HEAP32[$6>>2]|0;
     $66 = $2;
     $67 = ((($66)) + 20|0);
     HEAP32[$67>>2] = $65;
     break L5;
    }
   }
   $1 = -1;
   $68 = $1;
   STACKTOP = sp;return ($68|0);
   break;
  }
  default: {
   $1 = -1;
   $68 = $1;
   STACKTOP = sp;return ($68|0);
  }
  }
 } while(0);
 $1 = 0;
 $68 = $1;
 STACKTOP = sp;return ($68|0);
}
function _cram_new_metrics() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = (_calloc(1,120)|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  HEAP32[$5>>2] = 2;
  $6 = $1;
  $7 = ((($6)) + 4|0);
  HEAP32[$7>>2] = 50;
  $8 = $1;
  $9 = ((($8)) + 32|0);
  HEAP32[$9>>2] = 0;
  $10 = $1;
  $11 = ((($10)) + 36|0);
  HEAP32[$11>>2] = 0;
  $12 = $1;
  $13 = ((($12)) + 64|0);
  HEAP32[$13>>2] = 0;
  $14 = $1;
  $0 = $14;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 } else {
  $0 = 0;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _cram_content_type2str($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 switch ($3|0) {
 case 0:  {
  $1 = 15381;
  break;
 }
 case 1:  {
  $1 = 15393;
  break;
 }
 case 2:  {
  $1 = 15412;
  break;
 }
 case 3:  {
  $1 = 15425;
  break;
 }
 case 4:  {
  $1 = 20555;
  break;
 }
 case 5:  {
  $1 = 15440;
  break;
 }
 default: {
  $1 = 21466;
 }
 }
 $4 = $1;
 STACKTOP = sp;return ($4|0);
}
function _paranoid_fclose($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (_fflush($3)|0);
 $5 = (-1)==($4|0);
 if ($5) {
  $6 = (___errno_location()|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(9);
  if ($8) {
   $9 = $2;
   (_fclose($9)|0);
   $1 = -1;
   $21 = $1;
   STACKTOP = sp;return ($21|0);
  }
 }
 $10 = (___errno_location()|0);
 HEAP32[$10>>2] = 0;
 $11 = $2;
 $12 = (_fileno($11)|0);
 $13 = (_fsync($12)|0);
 $14 = (-1)==($13|0);
 if ($14) {
  $15 = (___errno_location()|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(22);
  if ($17) {
   $18 = $2;
   (_fclose($18)|0);
   $1 = -1;
   $21 = $1;
   STACKTOP = sp;return ($21|0);
  }
 }
 $19 = $2;
 $20 = (_fclose($19)|0);
 $1 = $20;
 $21 = $1;
 STACKTOP = sp;return ($21|0);
}
function _refs_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -1)|0;
 HEAP32[$5>>2] = $7;
 $8 = ($7|0)<=(0);
 $9 = $1;
 $10 = ($9|0)!=(0|0);
 $or$cond = $8 & $10;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $1;
  $15 = HEAP32[$14>>2]|0;
  _string_pool_destroy($15);
 }
 $16 = $1;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $2 = 0;
  while(1) {
   $20 = $2;
   $21 = $1;
   $22 = ((($21)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$23>>2]|0;
   $25 = ($20|0)!=($24|0);
   if (!($25)) {
    break;
   }
   $26 = $2;
   $27 = $26 >>> 4;
   $28 = $1;
   $29 = ((($28)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($30)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + ($27<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $2;
   $36 = $35 & 15;
   $37 = $36 << 1;
   $38 = $34 >>> $37;
   $39 = $38 & 3;
   $40 = ($39|0)!=(0);
   if (!($40)) {
    $41 = $2;
    $42 = $1;
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($44)) + 24|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($46) + ($41<<2)|0);
    $48 = HEAP32[$47>>2]|0;
    $3 = $48;
    $49 = ($48|0)!=(0|0);
    if ($49) {
     $50 = $3;
     _ref_entry_free_seq($50);
     $51 = $3;
     _free($51);
    }
   }
   $52 = $2;
   $53 = (($52) + 1)|0;
   $2 = $53;
  }
  $54 = $1;
  $55 = ((($54)) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  _kh_destroy_refs($56);
 }
 $57 = $1;
 $58 = ((($57)) + 8|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)!=(0|0);
 if ($60) {
  $61 = $1;
  $62 = ((($61)) + 8|0);
  $63 = HEAP32[$62>>2]|0;
  _free($63);
 }
 $64 = $1;
 $65 = ((($64)) + 20|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)!=(0|0);
 if ($67) {
  $68 = $1;
  $69 = ((($68)) + 20|0);
  $70 = HEAP32[$69>>2]|0;
  (_bgzf_close($70)|0);
 }
 $71 = $1;
 $72 = ((($71)) + 28|0);
 (_pthread_mutex_destroy(($72|0))|0);
 $73 = $1;
 _free($73);
 STACKTOP = sp;return;
}
function _ref_entry_free_seq($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  (_mfclose($8)|0);
 }
 $9 = $1;
 $10 = ((($9)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $1;
  $14 = ((($13)) + 44|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0|0);
  if (!($16)) {
   $17 = $1;
   $18 = ((($17)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   _free($19);
  }
 }
 $20 = $1;
 $21 = ((($20)) + 40|0);
 HEAP32[$21>>2] = 0;
 $22 = $1;
 $23 = ((($22)) + 44|0);
 HEAP32[$23>>2] = 0;
 STACKTOP = sp;return;
}
function _kh_destroy_refs($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _refs2id($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $3;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  _free($13);
 }
 $14 = $3;
 $15 = ((($14)) + 56|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $3;
  $19 = ((($18)) + 56|0);
  HEAP32[$19>>2] = 0;
 }
 $20 = $4;
 $21 = ((($20)) + 28|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (_calloc($22,4)|0);
 $24 = $3;
 $25 = ((($24)) + 8|0);
 HEAP32[$25>>2] = $23;
 $26 = $3;
 $27 = ((($26)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if (!($29)) {
  $2 = -1;
  $78 = $2;
  STACKTOP = sp;return ($78|0);
 }
 $30 = $4;
 $31 = ((($30)) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $3;
 $34 = ((($33)) + 12|0);
 HEAP32[$34>>2] = $32;
 $5 = 0;
 while(1) {
  $35 = $5;
  $36 = $4;
  $37 = ((($36)) + 28|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($35|0)<($38|0);
  if (!($39)) {
   break;
  }
  $40 = $3;
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = $4;
  $45 = ((($44)) + 32|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + ($43<<4)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (_kh_get_refs($42,$48)|0);
  $6 = $49;
  $50 = $6;
  $51 = $3;
  $52 = ((($51)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = HEAP32[$53>>2]|0;
  $55 = ($50|0)!=($54|0);
  if ($55) {
   $56 = $6;
   $57 = $3;
   $58 = ((($57)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($59)) + 24|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + ($56<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $5;
   $65 = $3;
   $66 = ((($65)) + 8|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($67) + ($64<<2)|0);
   HEAP32[$68>>2] = $63;
  } else {
   $69 = HEAP32[2410]|0;
   $70 = $5;
   $71 = $4;
   $72 = ((($71)) + 32|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($73) + ($70<<4)|0);
   $75 = HEAP32[$74>>2]|0;
   HEAP32[$vararg_buffer>>2] = $75;
   (_fprintf($69,15445,$vararg_buffer)|0);
  }
  $76 = $5;
  $77 = (($76) + 1)|0;
  $5 = $77;
 }
 $2 = 0;
 $78 = $2;
 STACKTOP = sp;return ($78|0);
}
function _kh_get_refs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $2 = 0;
  $85 = $2;
  STACKTOP = sp;return ($85|0);
 }
 $9 = 0;
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - 1)|0;
 $8 = $15;
 $16 = $4;
 $17 = (___ac_X31_hash_string($16)|0);
 $5 = $17;
 $18 = $5;
 $19 = $8;
 $20 = $18 & $19;
 $6 = $20;
 $21 = $6;
 $7 = $21;
 while(1) {
  $22 = $6;
  $23 = $22 >>> 4;
  $24 = $3;
  $25 = ((($24)) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + ($23<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $6;
  $30 = $29 & 15;
  $31 = $30 << 1;
  $32 = $28 >>> $31;
  $33 = $32 & 2;
  $34 = ($33|0)!=(0);
  if ($34) {
   $86 = 0;
  } else {
   $35 = $6;
   $36 = $35 >>> 4;
   $37 = $3;
   $38 = ((($37)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + ($36<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $6;
   $43 = $42 & 15;
   $44 = $43 << 1;
   $45 = $41 >>> $44;
   $46 = $45 & 1;
   $47 = ($46|0)!=(0);
   if ($47) {
    $86 = 1;
   } else {
    $48 = $6;
    $49 = $3;
    $50 = ((($49)) + 20|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($51) + ($48<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $4;
    $55 = (_strcmp($53,$54)|0);
    $56 = ($55|0)==(0);
    $57 = $56 ^ 1;
    $86 = $57;
   }
  }
  $58 = $6;
  if (!($86)) {
   break;
  }
  $59 = $9;
  $60 = (($59) + 1)|0;
  $9 = $60;
  $61 = (($58) + ($60))|0;
  $62 = $8;
  $63 = $61 & $62;
  $6 = $63;
  $64 = $6;
  $65 = $7;
  $66 = ($64|0)==($65|0);
  if ($66) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  $67 = $3;
  $68 = HEAP32[$67>>2]|0;
  $2 = $68;
  $85 = $2;
  STACKTOP = sp;return ($85|0);
 }
 $69 = $58 >>> 4;
 $70 = $3;
 $71 = ((($70)) + 16|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($72) + ($69<<2)|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $6;
 $76 = $75 & 15;
 $77 = $76 << 1;
 $78 = $74 >>> $77;
 $79 = $78 & 3;
 $80 = ($79|0)!=(0);
 if ($80) {
  $81 = $3;
  $82 = HEAP32[$81>>2]|0;
  $84 = $82;
 } else {
  $83 = $6;
  $84 = $83;
 }
 $2 = $84;
 $85 = $2;
 STACKTOP = sp;return ($85|0);
}
function ___ac_X31_hash_string($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 << 24 >> 24;
 $2 = $5;
 $6 = $2;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 $8 = $1;
 $9 = ((($8)) + 1|0);
 $1 = $9;
 while(1) {
  $10 = $1;
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)!=(0);
  if (!($12)) {
   break;
  }
  $13 = $2;
  $14 = $13 << 5;
  $15 = $2;
  $16 = (($14) - ($15))|0;
  $17 = $1;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = (($16) + ($19))|0;
  $2 = $20;
  $21 = $1;
  $22 = ((($21)) + 1|0);
  $1 = $22;
 }
 $23 = $2;
 STACKTOP = sp;return ($23|0);
}
function _refs_from_header($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $12 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $13 = $4;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $3 = -1;
  $160 = $3;
  STACKTOP = sp;return ($160|0);
 }
 $15 = $6;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $6;
  $18 = ((($17)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0);
  if (!($20)) {
   $21 = $4;
   $22 = ((($21)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $4;
   $25 = ((($24)) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $6;
   $28 = ((($27)) + 28|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($26) + ($29))|0;
   $31 = $30<<2;
   $32 = (_realloc($23,$31)|0);
   $33 = $4;
   $34 = ((($33)) + 8|0);
   HEAP32[$34>>2] = $32;
   $35 = ($32|0)!=(0|0);
   if (!($35)) {
    $3 = -1;
    $160 = $3;
    STACKTOP = sp;return ($160|0);
   }
   $7 = 0;
   $36 = $4;
   $37 = ((($36)) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   $8 = $38;
   while(1) {
    $39 = $7;
    $40 = $6;
    $41 = ((($40)) + 28|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($39|0)<($42|0);
    if (!($43)) {
     label = 22;
     break;
    }
    $44 = $4;
    $45 = ((($44)) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $7;
    $48 = $6;
    $49 = ((($48)) + 32|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($50) + ($47<<4)|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (_kh_get_refs($46,$52)|0);
    $11 = $53;
    $54 = $11;
    $55 = $4;
    $56 = ((($55)) + 4|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = HEAP32[$57>>2]|0;
    $59 = ($54|0)!=($58|0);
    if (!($59)) {
     $60 = (_calloc(1,56)|0);
     $61 = $8;
     $62 = $4;
     $63 = ((($62)) + 8|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = (($64) + ($61<<2)|0);
     HEAP32[$65>>2] = $60;
     $66 = ($60|0)!=(0|0);
     if (!($66)) {
      label = 12;
      break;
     }
     $67 = $7;
     $68 = $6;
     $69 = ((($68)) + 32|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (($70) + ($67<<4)|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ($72|0)!=(0|0);
     if (!($73)) {
      label = 14;
      break;
     }
     $74 = $4;
     $75 = HEAP32[$74>>2]|0;
     $76 = $7;
     $77 = $6;
     $78 = ((($77)) + 32|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (($79) + ($76<<4)|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (_string_dup($75,$81)|0);
     $83 = $8;
     $84 = $4;
     $85 = ((($84)) + 8|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (($86) + ($83<<2)|0);
     $88 = HEAP32[$87>>2]|0;
     HEAP32[$88>>2] = $82;
     $89 = $8;
     $90 = $4;
     $91 = ((($90)) + 8|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = (($92) + ($89<<2)|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = ((($94)) + 8|0);
     $96 = $95;
     $97 = $96;
     HEAP32[$97>>2] = 0;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     $100 = $6;
     $101 = $7;
     $102 = $6;
     $103 = ((($102)) + 32|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = (($104) + ($101<<4)|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = (_sam_hdr_find($100,15475,15478,$106)|0);
     $9 = $107;
     $108 = ($107|0)!=(0|0);
     if ($108) {
      $109 = $6;
      $110 = $9;
      $111 = (_sam_hdr_find_key($109,$110,15481,0)|0);
      $10 = $111;
      $112 = ($111|0)!=(0|0);
      if ($112) {
       $113 = $4;
       $114 = HEAP32[$113>>2]|0;
       $115 = $10;
       $116 = ((($115)) + 4|0);
       $117 = HEAP32[$116>>2]|0;
       $118 = ((($117)) + 3|0);
       $119 = (_string_dup($114,$118)|0);
       $120 = $8;
       $121 = $4;
       $122 = ((($121)) + 8|0);
       $123 = HEAP32[$122>>2]|0;
       $124 = (($123) + ($120<<2)|0);
       $125 = HEAP32[$124>>2]|0;
       $126 = ((($125)) + 4|0);
       HEAP32[$126>>2] = $119;
      }
     }
     $127 = $4;
     $128 = ((($127)) + 4|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = $8;
     $131 = $4;
     $132 = ((($131)) + 8|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = (($133) + ($130<<2)|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = HEAP32[$135>>2]|0;
     $137 = (_kh_put_refs($129,$136,$12)|0);
     $11 = $137;
     $138 = HEAP32[$12>>2]|0;
     $139 = ($138|0)<=(0);
     if ($139) {
      label = 19;
      break;
     }
     $140 = $8;
     $141 = $4;
     $142 = ((($141)) + 8|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = (($143) + ($140<<2)|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = $11;
     $147 = $4;
     $148 = ((($147)) + 4|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ((($149)) + 24|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = (($151) + ($146<<2)|0);
     HEAP32[$152>>2] = $145;
     $153 = $8;
     $154 = (($153) + 1)|0;
     $8 = $154;
    }
    $155 = $7;
    $156 = (($155) + 1)|0;
    $7 = $156;
   }
   if ((label|0) == 12) {
    $3 = -1;
    $160 = $3;
    STACKTOP = sp;return ($160|0);
   }
   else if ((label|0) == 14) {
    $3 = -1;
    $160 = $3;
    STACKTOP = sp;return ($160|0);
   }
   else if ((label|0) == 19) {
    $3 = -1;
    $160 = $3;
    STACKTOP = sp;return ($160|0);
   }
   else if ((label|0) == 22) {
    $157 = $8;
    $158 = $4;
    $159 = ((($158)) + 12|0);
    HEAP32[$159>>2] = $157;
    $3 = 0;
    $160 = $3;
    STACKTOP = sp;return ($160|0);
   }
  }
 }
 $3 = 0;
 $160 = $3;
 STACKTOP = sp;return ($160|0);
}
function _kh_put_refs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $4;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16>>>0)>=($19>>>0);
 do {
  if ($20) {
   $21 = $4;
   $22 = HEAP32[$21>>2]|0;
   $23 = $4;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 << 1;
   $27 = ($22>>>0)>($26>>>0);
   $28 = $4;
   $29 = $4;
   $30 = HEAP32[$29>>2]|0;
   if ($27) {
    $31 = (($30) - 1)|0;
    $32 = (_kh_resize_refs($28,$31)|0);
    $33 = ($32|0)<(0);
    if (!($33)) {
     break;
    }
    $34 = $6;
    HEAP32[$34>>2] = -1;
    $35 = $4;
    $36 = HEAP32[$35>>2]|0;
    $3 = $36;
    $230 = $3;
    STACKTOP = sp;return ($230|0);
   } else {
    $37 = (($30) + 1)|0;
    $38 = (_kh_resize_refs($28,$37)|0);
    $39 = ($38|0)<(0);
    if (!($39)) {
     break;
    }
    $40 = $6;
    HEAP32[$40>>2] = -1;
    $41 = $4;
    $42 = HEAP32[$41>>2]|0;
    $3 = $42;
    $230 = $3;
    STACKTOP = sp;return ($230|0);
   }
  }
 } while(0);
 $43 = $4;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) - 1)|0;
 $12 = $45;
 $13 = 0;
 $46 = $4;
 $47 = HEAP32[$46>>2]|0;
 $10 = $47;
 $7 = $47;
 $48 = $5;
 $49 = (___ac_X31_hash_string($48)|0);
 $8 = $49;
 $50 = $8;
 $51 = $12;
 $52 = $50 & $51;
 $9 = $52;
 $53 = $9;
 $54 = $53 >>> 4;
 $55 = $4;
 $56 = ((($55)) + 16|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) + ($54<<2)|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $9;
 $61 = $60 & 15;
 $62 = $61 << 1;
 $63 = $59 >>> $62;
 $64 = $63 & 2;
 $65 = ($64|0)!=(0);
 $66 = $9;
 do {
  if ($65) {
   $7 = $66;
  } else {
   $11 = $66;
   while(1) {
    $67 = $9;
    $68 = $67 >>> 4;
    $69 = $4;
    $70 = ((($69)) + 16|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($71) + ($68<<2)|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $9;
    $75 = $74 & 15;
    $76 = $75 << 1;
    $77 = $73 >>> $76;
    $78 = $77 & 2;
    $79 = ($78|0)!=(0);
    if ($79) {
     break;
    }
    $80 = $9;
    $81 = $80 >>> 4;
    $82 = $4;
    $83 = ((($82)) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($84) + ($81<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $9;
    $88 = $87 & 15;
    $89 = $88 << 1;
    $90 = $86 >>> $89;
    $91 = $90 & 1;
    $92 = ($91|0)!=(0);
    if (!($92)) {
     $93 = $9;
     $94 = $4;
     $95 = ((($94)) + 20|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = (($96) + ($93<<2)|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $5;
     $100 = (_strcmp($98,$99)|0);
     $101 = ($100|0)==(0);
     $102 = $101 ^ 1;
     if (!($102)) {
      break;
     }
    }
    $103 = $9;
    $104 = $103 >>> 4;
    $105 = $4;
    $106 = ((($105)) + 16|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (($107) + ($104<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $9;
    $111 = $110 & 15;
    $112 = $111 << 1;
    $113 = $109 >>> $112;
    $114 = $113 & 1;
    $115 = ($114|0)!=(0);
    if ($115) {
     $116 = $9;
     $10 = $116;
    }
    $117 = $9;
    $118 = $13;
    $119 = (($118) + 1)|0;
    $13 = $119;
    $120 = (($117) + ($119))|0;
    $121 = $12;
    $122 = $120 & $121;
    $9 = $122;
    $123 = $9;
    $124 = $11;
    $125 = ($123|0)==($124|0);
    if ($125) {
     label = 16;
     break;
    }
   }
   if ((label|0) == 16) {
    $126 = $10;
    $7 = $126;
   }
   $127 = $7;
   $128 = $4;
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = $9;
    $132 = $131 >>> 4;
    $133 = $4;
    $134 = ((($133)) + 16|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + ($132<<2)|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $9;
    $139 = $138 & 15;
    $140 = $139 << 1;
    $141 = $137 >>> $140;
    $142 = $141 & 2;
    $143 = ($142|0)!=(0);
    if ($143) {
     $144 = $10;
     $145 = $4;
     $146 = HEAP32[$145>>2]|0;
     $147 = ($144|0)!=($146|0);
     if ($147) {
      $148 = $10;
      $7 = $148;
      break;
     }
    }
    $149 = $9;
    $7 = $149;
   }
  }
 } while(0);
 $150 = $7;
 $151 = $150 >>> 4;
 $152 = $4;
 $153 = ((($152)) + 16|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = (($154) + ($151<<2)|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $7;
 $158 = $157 & 15;
 $159 = $158 << 1;
 $160 = $156 >>> $159;
 $161 = $160 & 2;
 $162 = ($161|0)!=(0);
 do {
  if ($162) {
   $163 = $5;
   $164 = $7;
   $165 = $4;
   $166 = ((($165)) + 20|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = (($167) + ($164<<2)|0);
   HEAP32[$168>>2] = $163;
   $169 = $7;
   $170 = $169 & 15;
   $171 = $170 << 1;
   $172 = 3 << $171;
   $173 = $172 ^ -1;
   $174 = $7;
   $175 = $174 >>> 4;
   $176 = $4;
   $177 = ((($176)) + 16|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = (($178) + ($175<<2)|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $180 & $173;
   HEAP32[$179>>2] = $181;
   $182 = $4;
   $183 = ((($182)) + 4|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (($184) + 1)|0;
   HEAP32[$183>>2] = $185;
   $186 = $4;
   $187 = ((($186)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = (($188) + 1)|0;
   HEAP32[$187>>2] = $189;
   $190 = $6;
   HEAP32[$190>>2] = 1;
  } else {
   $191 = $7;
   $192 = $191 >>> 4;
   $193 = $4;
   $194 = ((($193)) + 16|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = (($195) + ($192<<2)|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $7;
   $199 = $198 & 15;
   $200 = $199 << 1;
   $201 = $197 >>> $200;
   $202 = $201 & 1;
   $203 = ($202|0)!=(0);
   if ($203) {
    $204 = $5;
    $205 = $7;
    $206 = $4;
    $207 = ((($206)) + 20|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = (($208) + ($205<<2)|0);
    HEAP32[$209>>2] = $204;
    $210 = $7;
    $211 = $210 & 15;
    $212 = $211 << 1;
    $213 = 3 << $212;
    $214 = $213 ^ -1;
    $215 = $7;
    $216 = $215 >>> 4;
    $217 = $4;
    $218 = ((($217)) + 16|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = (($219) + ($216<<2)|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = $221 & $214;
    HEAP32[$220>>2] = $222;
    $223 = $4;
    $224 = ((($223)) + 4|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = (($225) + 1)|0;
    HEAP32[$224>>2] = $226;
    $227 = $6;
    HEAP32[$227>>2] = 2;
    break;
   } else {
    $228 = $6;
    HEAP32[$228>>2] = 0;
    break;
   }
  }
 } while(0);
 $229 = $7;
 $3 = $229;
 $230 = $3;
 STACKTOP = sp;return ($230|0);
}
function _kh_resize_refs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0.0, $279 = 0.0;
 var $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = 1;
 $17 = $4;
 $18 = (($17) + -1)|0;
 $4 = $18;
 $19 = $4;
 $20 = $19 >>> 1;
 $21 = $4;
 $22 = $21 | $20;
 $4 = $22;
 $23 = $4;
 $24 = $23 >>> 2;
 $25 = $4;
 $26 = $25 | $24;
 $4 = $26;
 $27 = $4;
 $28 = $27 >>> 4;
 $29 = $4;
 $30 = $29 | $28;
 $4 = $30;
 $31 = $4;
 $32 = $31 >>> 8;
 $33 = $4;
 $34 = $33 | $32;
 $4 = $34;
 $35 = $4;
 $36 = $35 >>> 16;
 $37 = $4;
 $38 = $37 | $36;
 $4 = $38;
 $39 = $4;
 $40 = (($39) + 1)|0;
 $4 = $40;
 $41 = $4;
 $42 = ($41>>>0)<(4);
 $$ = $42 ? 4 : $40;
 $4 = $$;
 $43 = $3;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $4;
 $47 = (+($46>>>0));
 $48 = $47 * 0.77000000000000001;
 $49 = $48 + 0.5;
 $50 = (~~(($49))>>>0);
 $51 = ($45>>>0)>=($50>>>0);
 do {
  if ($51) {
   $6 = 0;
  } else {
   $52 = $4;
   $53 = ($52>>>0)<(16);
   $54 = $4;
   $55 = $54 >>> 4;
   $56 = $53 ? 1 : $55;
   $57 = $56<<2;
   $58 = (_malloc($57)|0);
   $5 = $58;
   $59 = $5;
   $60 = ($59|0)!=(0|0);
   if (!($60)) {
    $2 = -1;
    $284 = $2;
    STACKTOP = sp;return ($284|0);
   }
   $61 = $5;
   $62 = $4;
   $63 = ($62>>>0)<(16);
   $64 = $4;
   $65 = $64 >>> 4;
   $66 = $63 ? 1 : $65;
   $67 = $66<<2;
   _memset(($61|0),-86,($67|0))|0;
   $68 = $3;
   $69 = HEAP32[$68>>2]|0;
   $70 = $4;
   $71 = ($69>>>0)<($70>>>0);
   if ($71) {
    $72 = $3;
    $73 = ((($72)) + 20|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $4;
    $76 = $75<<2;
    $77 = (_realloc($74,$76)|0);
    $7 = $77;
    $78 = $7;
    $79 = ($78|0)!=(0|0);
    if (!($79)) {
     $80 = $5;
     _free($80);
     $2 = -1;
     $284 = $2;
     STACKTOP = sp;return ($284|0);
    }
    $81 = $7;
    $82 = $3;
    $83 = ((($82)) + 20|0);
    HEAP32[$83>>2] = $81;
    $84 = $3;
    $85 = ((($84)) + 24|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $4;
    $88 = $87<<2;
    $89 = (_realloc($86,$88)|0);
    $8 = $89;
    $90 = $8;
    $91 = ($90|0)!=(0|0);
    if ($91) {
     $93 = $8;
     $94 = $3;
     $95 = ((($94)) + 24|0);
     HEAP32[$95>>2] = $93;
     break;
    }
    $92 = $5;
    _free($92);
    $2 = -1;
    $284 = $2;
    STACKTOP = sp;return ($284|0);
   }
  }
 } while(0);
 $96 = $6;
 $97 = ($96|0)!=(0);
 if ($97) {
  $6 = 0;
  while(1) {
   $98 = $6;
   $99 = $3;
   $100 = HEAP32[$99>>2]|0;
   $101 = ($98|0)!=($100|0);
   if (!($101)) {
    break;
   }
   $102 = $6;
   $103 = $102 >>> 4;
   $104 = $3;
   $105 = ((($104)) + 16|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + ($103<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $6;
   $110 = $109 & 15;
   $111 = $110 << 1;
   $112 = $108 >>> $111;
   $113 = $112 & 3;
   $114 = ($113|0)==(0);
   if ($114) {
    $115 = $6;
    $116 = $3;
    $117 = ((($116)) + 20|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (($118) + ($115<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $9 = $120;
    $121 = $4;
    $122 = (($121) - 1)|0;
    $11 = $122;
    $123 = $6;
    $124 = $3;
    $125 = ((($124)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = (($126) + ($123<<2)|0);
    $128 = HEAP32[$127>>2]|0;
    $10 = $128;
    $129 = $6;
    $130 = $129 & 15;
    $131 = $130 << 1;
    $132 = 1 << $131;
    $133 = $6;
    $134 = $133 >>> 4;
    $135 = $3;
    $136 = ((($135)) + 16|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = (($137) + ($134<<2)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $139 | $132;
    HEAP32[$138>>2] = $140;
    while(1) {
     $14 = 0;
     $141 = $9;
     $142 = (___ac_X31_hash_string($141)|0);
     $12 = $142;
     $143 = $12;
     $144 = $11;
     $145 = $143 & $144;
     $13 = $145;
     while(1) {
      $146 = $13;
      $147 = $146 >>> 4;
      $148 = $5;
      $149 = (($148) + ($147<<2)|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = $13;
      $152 = $151 & 15;
      $153 = $152 << 1;
      $154 = $150 >>> $153;
      $155 = $154 & 2;
      $156 = ($155|0)!=(0);
      $157 = $156 ^ 1;
      $158 = $13;
      if (!($157)) {
       break;
      }
      $159 = $14;
      $160 = (($159) + 1)|0;
      $14 = $160;
      $161 = (($158) + ($160))|0;
      $162 = $11;
      $163 = $161 & $162;
      $13 = $163;
     }
     $164 = $158 & 15;
     $165 = $164 << 1;
     $166 = 2 << $165;
     $167 = $166 ^ -1;
     $168 = $13;
     $169 = $168 >>> 4;
     $170 = $5;
     $171 = (($170) + ($169<<2)|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = $172 & $167;
     HEAP32[$171>>2] = $173;
     $174 = $13;
     $175 = $3;
     $176 = HEAP32[$175>>2]|0;
     $177 = ($174>>>0)<($176>>>0);
     if (!($177)) {
      break;
     }
     $178 = $13;
     $179 = $178 >>> 4;
     $180 = $3;
     $181 = ((($180)) + 16|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (($182) + ($179<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = $13;
     $186 = $185 & 15;
     $187 = $186 << 1;
     $188 = $184 >>> $187;
     $189 = $188 & 3;
     $190 = ($189|0)==(0);
     if (!($190)) {
      break;
     }
     $191 = $13;
     $192 = $3;
     $193 = ((($192)) + 20|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (($194) + ($191<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $15 = $196;
     $197 = $9;
     $198 = $13;
     $199 = $3;
     $200 = ((($199)) + 20|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = (($201) + ($198<<2)|0);
     HEAP32[$202>>2] = $197;
     $203 = $15;
     $9 = $203;
     $204 = $13;
     $205 = $3;
     $206 = ((($205)) + 24|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = (($207) + ($204<<2)|0);
     $209 = HEAP32[$208>>2]|0;
     $16 = $209;
     $210 = $10;
     $211 = $13;
     $212 = $3;
     $213 = ((($212)) + 24|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = (($214) + ($211<<2)|0);
     HEAP32[$215>>2] = $210;
     $216 = $16;
     $10 = $216;
     $217 = $13;
     $218 = $217 & 15;
     $219 = $218 << 1;
     $220 = 1 << $219;
     $221 = $13;
     $222 = $221 >>> 4;
     $223 = $3;
     $224 = ((($223)) + 16|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = (($225) + ($222<<2)|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = $227 | $220;
     HEAP32[$226>>2] = $228;
    }
    $229 = $9;
    $230 = $13;
    $231 = $3;
    $232 = ((($231)) + 20|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = (($233) + ($230<<2)|0);
    HEAP32[$234>>2] = $229;
    $235 = $10;
    $236 = $13;
    $237 = $3;
    $238 = ((($237)) + 24|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = (($239) + ($236<<2)|0);
    HEAP32[$240>>2] = $235;
   }
   $241 = $6;
   $242 = (($241) + 1)|0;
   $6 = $242;
  }
  $243 = $3;
  $244 = HEAP32[$243>>2]|0;
  $245 = $4;
  $246 = ($244>>>0)>($245>>>0);
  if ($246) {
   $247 = $3;
   $248 = ((($247)) + 20|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = $4;
   $251 = $250<<2;
   $252 = (_realloc($249,$251)|0);
   $253 = $3;
   $254 = ((($253)) + 20|0);
   HEAP32[$254>>2] = $252;
   $255 = $3;
   $256 = ((($255)) + 24|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = $4;
   $259 = $258<<2;
   $260 = (_realloc($257,$259)|0);
   $261 = $3;
   $262 = ((($261)) + 24|0);
   HEAP32[$262>>2] = $260;
  }
  $263 = $3;
  $264 = ((($263)) + 16|0);
  $265 = HEAP32[$264>>2]|0;
  _free($265);
  $266 = $5;
  $267 = $3;
  $268 = ((($267)) + 16|0);
  HEAP32[$268>>2] = $266;
  $269 = $4;
  $270 = $3;
  HEAP32[$270>>2] = $269;
  $271 = $3;
  $272 = ((($271)) + 4|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = $3;
  $275 = ((($274)) + 8|0);
  HEAP32[$275>>2] = $273;
  $276 = $3;
  $277 = HEAP32[$276>>2]|0;
  $278 = (+($277>>>0));
  $279 = $278 * 0.77000000000000001;
  $280 = $279 + 0.5;
  $281 = (~~(($280))>>>0);
  $282 = $3;
  $283 = ((($282)) + 12|0);
  HEAP32[$283>>2] = $281;
 }
 $2 = 0;
 $284 = $2;
 STACKTOP = sp;return ($284|0);
}
function _expand_cache_path($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 4|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 while(1) {
  $9 = $4;
  $10 = (_strchr($9,37)|0);
  $6 = $10;
  $11 = ($10|0)!=(0|0);
  $12 = $3;
  $13 = $4;
  if (!($11)) {
   break;
  }
  $14 = $6;
  $15 = $4;
  $16 = $14;
  $17 = $15;
  $18 = (($16) - ($17))|0;
  (_strncpy($12,$13,$18)|0);
  $19 = $6;
  $20 = $4;
  $21 = $19;
  $22 = $20;
  $23 = (($21) - ($22))|0;
  $24 = $3;
  $25 = (($24) + ($23)|0);
  $3 = $25;
  $26 = $6;
  $27 = ((($26)) + 1|0);
  $6 = $27;
  $28 = HEAP8[$27>>0]|0;
  $29 = $28 << 24 >> 24;
  $30 = ($29|0)==(115);
  do {
   if ($30) {
    $31 = $3;
    $32 = $5;
    (_strcpy($31,$32)|0);
    $33 = $5;
    $34 = (_strlen($33)|0);
    $35 = $3;
    $36 = (($35) + ($34)|0);
    $3 = $36;
    $37 = $5;
    $38 = (_strlen($37)|0);
    $39 = $5;
    $40 = (($39) + ($38)|0);
    $5 = $40;
    $41 = $6;
    $42 = ((($41)) + 1|0);
    $6 = $42;
   } else {
    $43 = $6;
    $44 = HEAP8[$43>>0]|0;
    $45 = $44 << 24 >> 24;
    $46 = ($45|0)>=(48);
    if ($46) {
     $47 = $6;
     $48 = HEAP8[$47>>0]|0;
     $49 = $48 << 24 >> 24;
     $50 = ($49|0)<=(57);
     if ($50) {
      $51 = $6;
      $52 = (_strtol($51,$7,10)|0);
      $8 = $52;
      $53 = $8;
      $54 = $5;
      $55 = (_strlen($54)|0);
      $56 = ($53>>>0)<($55>>>0);
      if ($56) {
       $57 = $8;
       $60 = $57;
      } else {
       $58 = $5;
       $59 = (_strlen($58)|0);
       $60 = $59;
      }
      $8 = $60;
      $61 = HEAP32[$7>>2]|0;
      $62 = HEAP8[$61>>0]|0;
      $63 = $62 << 24 >> 24;
      $64 = ($63|0)==(115);
      $65 = $3;
      if ($64) {
       $66 = $5;
       $67 = $8;
       (_strncpy($65,$66,$67)|0);
       $68 = $8;
       $69 = $3;
       $70 = (($69) + ($68)|0);
       $3 = $70;
       $71 = $8;
       $72 = $5;
       $73 = (($72) + ($71)|0);
       $5 = $73;
       $74 = $3;
       HEAP8[$74>>0] = 0;
       $75 = HEAP32[$7>>2]|0;
       $76 = ((($75)) + 1|0);
       $6 = $76;
       break;
      } else {
       $77 = ((($65)) + 1|0);
       $3 = $77;
       HEAP8[$65>>0] = 37;
       $78 = $6;
       $79 = ((($78)) + 1|0);
       $6 = $79;
       $80 = HEAP8[$78>>0]|0;
       $81 = $3;
       $82 = ((($81)) + 1|0);
       $3 = $82;
       HEAP8[$81>>0] = $80;
       break;
      }
     }
    }
    $83 = $3;
    $84 = ((($83)) + 1|0);
    $3 = $84;
    HEAP8[$83>>0] = 37;
    $85 = $6;
    $86 = ((($85)) + 1|0);
    $6 = $86;
    $87 = HEAP8[$85>>0]|0;
    $88 = $3;
    $89 = ((($88)) + 1|0);
    $3 = $89;
    HEAP8[$88>>0] = $87;
   }
  } while(0);
  $90 = $6;
  $4 = $90;
 }
 (_strcpy($12,$13)|0);
 $91 = $4;
 $92 = (_strlen($91)|0);
 $93 = $3;
 $94 = (($93) + ($92)|0);
 $3 = $94;
 $95 = $5;
 $96 = HEAP8[$95>>0]|0;
 $97 = $96 << 24 >> 24;
 $98 = ($97|0)!=(0);
 if (!($98)) {
  $106 = $3;
  $107 = $5;
  (_strcpy($106,$107)|0);
  STACKTOP = sp;return;
 }
 $99 = $3;
 $100 = ((($99)) + -1|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $101 << 24 >> 24;
 $103 = ($102|0)!=(47);
 if (!($103)) {
  $106 = $3;
  $107 = $5;
  (_strcpy($106,$107)|0);
  STACKTOP = sp;return;
 }
 $104 = $3;
 $105 = ((($104)) + 1|0);
 $3 = $105;
 HEAP8[$104>>0] = 47;
 $106 = $3;
 $107 = $5;
 (_strcpy($106,$107)|0);
 STACKTOP = sp;return;
}
function _mkdir_prefix($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_strrchr($5,47)|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $4;
 HEAP8[$9>>0] = 0;
 $10 = $2;
 $11 = (_is_directory($10)|0);
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $4;
  HEAP8[$13>>0] = 47;
  STACKTOP = sp;return;
 }
 $14 = $2;
 $15 = $3;
 $16 = (_mkdir($14,$15)|0);
 $17 = ($16|0)==(0);
 $18 = $2;
 $19 = $3;
 if ($17) {
  (_chmod($18,$19)|0);
  $20 = $4;
  HEAP8[$20>>0] = 47;
  STACKTOP = sp;return;
 } else {
  _mkdir_prefix($18,$19);
  $21 = $2;
  $22 = $3;
  (_mkdir($21,$22)|0);
  $23 = $2;
  $24 = $3;
  (_chmod($23,$24)|0);
  $25 = $4;
  HEAP8[$25>>0] = 47;
  STACKTOP = sp;return;
 }
}
function _cram_ref_incr_locked($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ($4|0)<(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $3;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($6<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $2;
 $16 = ((($15)) + 60|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $3;
 $19 = ($17|0)==($18|0);
 if ($19) {
  $20 = $2;
  $21 = ((($20)) + 60|0);
  HEAP32[$21>>2] = -1;
 }
 $22 = $3;
 $23 = $2;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($22<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 32|0);
 $29 = $28;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($29) + 4)|0;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = (_i64Add(($31|0),($34|0),1,0)|0);
 $36 = tempRet0;
 $37 = $28;
 $38 = $37;
 HEAP32[$38>>2] = $35;
 $39 = (($37) + 4)|0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 STACKTOP = sp;return;
}
function _cram_ref_decr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 28|0);
 (_pthread_mutex_lock(($5|0))|0);
 $6 = $2;
 $7 = $3;
 _cram_ref_decr_locked($6,$7);
 $8 = $2;
 $9 = ((($8)) + 28|0);
 (_pthread_mutex_unlock(($9|0))|0);
 STACKTOP = sp;return;
}
function _cram_ref_decr_locked($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ($4|0)<(0);
 if (!($5)) {
  $6 = $3;
  $7 = $2;
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + ($6<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 40|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $33 = $3;
   $34 = $2;
   $35 = ((($34)) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($36) + ($33<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($38)) + 32|0);
   $40 = $39;
   $41 = $40;
   $42 = HEAP32[$41>>2]|0;
   $43 = (($40) + 4)|0;
   $44 = $43;
   $45 = HEAP32[$44>>2]|0;
   $46 = (_i64Add(($42|0),($45|0),-1,-1)|0);
   $47 = tempRet0;
   $48 = $39;
   $49 = $48;
   HEAP32[$49>>2] = $46;
   $50 = (($48) + 4)|0;
   $51 = $50;
   HEAP32[$51>>2] = $47;
   $52 = ($47|0)<(0);
   $53 = ($46>>>0)<=(0);
   $54 = ($47|0)==(0);
   $55 = $54 & $53;
   $56 = $52 | $55;
   if (!($56)) {
    STACKTOP = sp;return;
   }
   $57 = $3;
   $58 = $2;
   $59 = ((($58)) + 8|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + ($57<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ((($62)) + 32|0);
   $64 = $63;
   $65 = $64;
   $66 = HEAP32[$65>>2]|0;
   $67 = (($64) + 4)|0;
   $68 = $67;
   $69 = HEAP32[$68>>2]|0;
   $70 = ($66|0)==(0);
   $71 = ($69|0)==(0);
   $72 = $70 & $71;
   if (!($72)) {
    ___assert_fail((15531|0),(15199|0),2439,(15510|0));
    // unreachable;
   }
   $73 = $2;
   $74 = ((($73)) + 60|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($75|0)>=(0);
   if ($76) {
    $77 = $2;
    $78 = ((($77)) + 60|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $2;
    $81 = ((($80)) + 8|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (($82) + ($79<<2)|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ((($84)) + 32|0);
    $86 = $85;
    $87 = $86;
    $88 = HEAP32[$87>>2]|0;
    $89 = (($86) + 4)|0;
    $90 = $89;
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)<(0);
    $93 = ($88>>>0)<=(0);
    $94 = ($91|0)==(0);
    $95 = $94 & $93;
    $96 = $92 | $95;
    if ($96) {
     $97 = $2;
     $98 = ((($97)) + 60|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = $2;
     $101 = ((($100)) + 8|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (($102) + ($99<<2)|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ((($104)) + 40|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)!=(0|0);
     if ($107) {
      $108 = $2;
      $109 = ((($108)) + 60|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = $2;
      $112 = ((($111)) + 8|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = (($113) + ($110<<2)|0);
      $115 = HEAP32[$114>>2]|0;
      _ref_entry_free_seq($115);
      $116 = $2;
      $117 = ((($116)) + 60|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = $2;
      $120 = ((($119)) + 8|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = (($121) + ($118<<2)|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = ((($123)) + 8|0);
      $125 = $124;
      $126 = $125;
      HEAP32[$126>>2] = 0;
      $127 = (($125) + 4)|0;
      $128 = $127;
      HEAP32[$128>>2] = 0;
     }
    }
   }
   $129 = $3;
   $130 = $2;
   $131 = ((($130)) + 60|0);
   HEAP32[$131>>2] = $129;
   STACKTOP = sp;return;
  }
 }
 $15 = $3;
 $16 = $2;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + ($15<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 32|0);
 $22 = $21;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($22) + 4)|0;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)>(0);
 $29 = ($24>>>0)>=(0);
 $30 = ($27|0)==(0);
 $31 = $30 & $29;
 $32 = $28 | $31;
 if (!($32)) {
  ___assert_fail((15484|0),(15199|0),2434,(15510|0));
  // unreachable;
 }
 STACKTOP = sp;return;
}
function _cram_ref_load($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $5;
 $12 = $4;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($11<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $7 = $16;
 $8 = 1;
 $17 = $7;
 $18 = ((($17)) + 8|0);
 $19 = $18;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $9 = $21;
 $25 = $7;
 $26 = ((($25)) + 40|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 $29 = $7;
 if ($28) {
  $3 = $29;
  $168 = $3;
  STACKTOP = sp;return ($168|0);
 }
 $30 = ((($29)) + 32|0);
 $31 = $30;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = (($31) + 4)|0;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = ($33|0)==(0);
 $38 = ($36|0)==(0);
 $39 = $37 & $38;
 if (!($39)) {
  ___assert_fail((15557|0),(15199|0),2547,(15571|0));
  // unreachable;
 }
 $40 = $4;
 $41 = ((($40)) + 56|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)!=(0|0);
 if ($43) {
  $44 = $4;
  $45 = ((($44)) + 56|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 32|0);
  $48 = $47;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $51 = (($48) + 4)|0;
  $52 = $51;
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)>(0);
  $55 = ($50>>>0)>(0);
  $56 = ($53|0)==(0);
  $57 = $56 & $55;
  $58 = $54 | $57;
  if (!($58)) {
   ___assert_fail((15585|0),(15199|0),2557,(15571|0));
   // unreachable;
  }
  $59 = $4;
  $60 = ((($59)) + 56|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + 32|0);
  $63 = $62;
  $64 = $63;
  $65 = HEAP32[$64>>2]|0;
  $66 = (($63) + 4)|0;
  $67 = $66;
  $68 = HEAP32[$67>>2]|0;
  $69 = (_i64Add(($65|0),($68|0),-1,-1)|0);
  $70 = tempRet0;
  $71 = $62;
  $72 = $71;
  HEAP32[$72>>2] = $69;
  $73 = (($71) + 4)|0;
  $74 = $73;
  HEAP32[$74>>2] = $70;
  $75 = ($70|0)<(0);
  $76 = ($69>>>0)<=(0);
  $77 = ($70|0)==(0);
  $78 = $77 & $76;
  $79 = $75 | $78;
  if ($79) {
   $80 = $4;
   $81 = ((($80)) + 56|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ((($82)) + 40|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ($84|0)!=(0|0);
   if ($85) {
    $86 = $4;
    $87 = ((($86)) + 56|0);
    $88 = HEAP32[$87>>2]|0;
    _ref_entry_free_seq($88);
   }
  }
 }
 $89 = $4;
 $90 = ((($89)) + 16|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $7;
 $93 = ((($92)) + 4|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (_strcmp($91,$94)|0);
 $96 = ($95|0)!=(0);
 if ($96) {
  label = 13;
 } else {
  $97 = $4;
  $98 = ((($97)) + 20|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ($99|0)==(0|0);
  if ($100) {
   label = 13;
  }
 }
 if ((label|0) == 13) {
  $101 = $4;
  $102 = ((($101)) + 20|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103|0)!=(0|0);
  if ($104) {
   $105 = $4;
   $106 = ((($105)) + 20|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (_bgzf_close($107)|0);
   $109 = ($108|0)!=(0);
   if ($109) {
    $3 = 0;
    $168 = $3;
    STACKTOP = sp;return ($168|0);
   }
  }
  $110 = $7;
  $111 = ((($110)) + 4|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = $4;
  $114 = ((($113)) + 16|0);
  HEAP32[$114>>2] = $112;
  $115 = $4;
  $116 = ((($115)) + 16|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $6;
  $119 = (_bgzf_open_ref($117,23049,$118)|0);
  $120 = $4;
  $121 = ((($120)) + 20|0);
  HEAP32[$121>>2] = $119;
  $122 = ($119|0)!=(0|0);
  if (!($122)) {
   $3 = 0;
   $168 = $3;
   STACKTOP = sp;return ($168|0);
  }
 }
 $123 = $4;
 $124 = ((($123)) + 20|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = $7;
 $127 = $8;
 $128 = $9;
 $129 = (_load_ref_portion($125,$126,$127,$128)|0);
 $10 = $129;
 $130 = ($129|0)!=(0|0);
 if ($130) {
  $131 = $10;
  $132 = $7;
  $133 = ((($132)) + 40|0);
  HEAP32[$133>>2] = $131;
  $134 = $7;
  $135 = ((($134)) + 44|0);
  HEAP32[$135>>2] = 0;
  $136 = $7;
  $137 = ((($136)) + 32|0);
  $138 = $137;
  $139 = $138;
  $140 = HEAP32[$139>>2]|0;
  $141 = (($138) + 4)|0;
  $142 = $141;
  $143 = HEAP32[$142>>2]|0;
  $144 = (_i64Add(($140|0),($143|0),1,0)|0);
  $145 = tempRet0;
  $146 = $137;
  $147 = $146;
  HEAP32[$147>>2] = $144;
  $148 = (($146) + 4)|0;
  $149 = $148;
  HEAP32[$149>>2] = $145;
  $150 = $7;
  $151 = $4;
  $152 = ((($151)) + 56|0);
  HEAP32[$152>>2] = $150;
  $153 = $7;
  $154 = ((($153)) + 32|0);
  $155 = $154;
  $156 = $155;
  $157 = HEAP32[$156>>2]|0;
  $158 = (($155) + 4)|0;
  $159 = $158;
  $160 = HEAP32[$159>>2]|0;
  $161 = (_i64Add(($157|0),($160|0),1,0)|0);
  $162 = tempRet0;
  $163 = $154;
  $164 = $163;
  HEAP32[$164>>2] = $161;
  $165 = (($163) + 4)|0;
  $166 = $165;
  HEAP32[$166>>2] = $162;
  $167 = $7;
  $3 = $167;
  $168 = $3;
  STACKTOP = sp;return ($168|0);
 } else {
  $3 = 0;
  $168 = $3;
  STACKTOP = sp;return ($168|0);
 }
 return (0)|0;
}
function _bgzf_open_ref($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4128|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $8 = sp + 32|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $6;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $11 = $4;
  HEAP32[$vararg_buffer>>2] = $11;
  (_snprintf($8,4096,22769,$vararg_buffer)|0);
  $12 = (_access($8,4)|0);
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = $4;
   $15 = (_fai_build($14)|0);
   $16 = ($15|0)!=(0);
   if ($16) {
    $3 = 0;
    $35 = $3;
    STACKTOP = sp;return ($35|0);
   }
  }
 }
 $17 = $4;
 $18 = $5;
 $19 = (_bgzf_open($17,$18)|0);
 $7 = $19;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  $21 = $4;
  _perror($21);
  $3 = 0;
  $35 = $3;
  STACKTOP = sp;return ($35|0);
 }
 $22 = $7;
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 >>> 29;
 $25 = $24 & 3;
 $26 = ($25|0)==(1);
 if ($26) {
  $27 = $7;
  $28 = $4;
  $29 = (_bgzf_index_load($27,$28,22879)|0);
  $30 = ($29|0)<(0);
  if ($30) {
   $31 = HEAP32[2410]|0;
   $32 = $4;
   HEAP32[$vararg_buffer1>>2] = $32;
   (_fprintf($31,15692,$vararg_buffer1)|0);
   $33 = $7;
   (_bgzf_close($33)|0);
   $3 = 0;
   $35 = $3;
   STACKTOP = sp;return ($35|0);
  }
 }
 $34 = $7;
 $3 = $34;
 $35 = $3;
 STACKTOP = sp;return ($35|0);
}
function _load_ref_portion($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $17 = $8;
 $18 = $7;
 $19 = ($17|0)<($18|0);
 if ($19) {
  $20 = $7;
  $8 = $20;
 }
 $21 = $6;
 $22 = ((($21)) + 28|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $6;
  $26 = ((($25)) + 16|0);
  $27 = $26;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 4)|0;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = $7;
  $34 = (($33) - 1)|0;
  $35 = $6;
  $36 = ((($35)) + 24|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($34|0) / ($37|0))&-1;
  $39 = $6;
  $40 = ((($39)) + 28|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = Math_imul($38, $41)|0;
  $43 = ($42|0)<(0);
  $44 = $43 << 31 >> 31;
  $45 = (_i64Add(($29|0),($32|0),($42|0),($44|0))|0);
  $46 = tempRet0;
  $47 = $7;
  $48 = (($47) - 1)|0;
  $49 = $6;
  $50 = ((($49)) + 24|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($48|0) % ($51|0))&-1;
  $53 = ($52|0)<(0);
  $54 = $53 << 31 >> 31;
  $55 = (_i64Add(($45|0),($46|0),($52|0),($54|0))|0);
  $56 = tempRet0;
  $194 = $56;$61 = $55;
 } else {
  $57 = $7;
  $58 = (($57) - 1)|0;
  $59 = ($58|0)<(0);
  $60 = $59 << 31 >> 31;
  $194 = $60;$61 = $58;
 }
 $9 = $61;
 $62 = $6;
 $63 = ((($62)) + 28|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)!=(0);
 if ($65) {
  $66 = $6;
  $67 = ((($66)) + 16|0);
  $68 = $67;
  $69 = $68;
  $70 = HEAP32[$69>>2]|0;
  $71 = (($68) + 4)|0;
  $72 = $71;
  $73 = HEAP32[$72>>2]|0;
  $74 = $8;
  $75 = (($74) - 1)|0;
  $76 = $6;
  $77 = ((($76)) + 24|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($75|0) / ($78|0))&-1;
  $80 = $6;
  $81 = ((($80)) + 28|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = Math_imul($79, $82)|0;
  $84 = ($83|0)<(0);
  $85 = $84 << 31 >> 31;
  $86 = (_i64Add(($70|0),($73|0),($83|0),($85|0))|0);
  $87 = tempRet0;
  $88 = $8;
  $89 = (($88) - 1)|0;
  $90 = $6;
  $91 = ((($90)) + 24|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (($89|0) % ($92|0))&-1;
  $94 = ($93|0)<(0);
  $95 = $94 << 31 >> 31;
  $96 = (_i64Add(($86|0),($87|0),($93|0),($95|0))|0);
  $97 = tempRet0;
  $105 = $96;$106 = $97;
 } else {
  $98 = $8;
  $99 = (($98) - 1)|0;
  $100 = ($99|0)<(0);
  $101 = $100 << 31 >> 31;
  $105 = $99;$106 = $101;
 }
 $102 = $9;
 $103 = ($102|0)<(0);
 $104 = $103 << 31 >> 31;
 $107 = (_i64Subtract(($105|0),($106|0),($102|0),($104|0))|0);
 $108 = tempRet0;
 $109 = (_i64Add(($107|0),($108|0),1,0)|0);
 $110 = tempRet0;
 $10 = $109;
 $111 = $5;
 $112 = $9;
 $113 = (_bgzf_useek($111,$112,0)|0);
 $114 = ($113|0)<(0);
 if ($114) {
  _perror(15604);
  $4 = 0;
  $193 = $4;
  STACKTOP = sp;return ($193|0);
 }
 $115 = $10;
 $116 = ($115|0)==(0);
 if (!($116)) {
  $117 = $10;
  $118 = (_malloc($117)|0);
  $11 = $118;
  $119 = ($118|0)!=(0|0);
  if ($119) {
   $120 = $10;
   $121 = $5;
   $122 = $11;
   $123 = $10;
   $124 = (_bgzf_read($121,$122,$123)|0);
   $125 = ($120|0)!=($124|0);
   if ($125) {
    _perror(15635);
    $126 = $11;
    _free($126);
    $4 = 0;
    $193 = $4;
    STACKTOP = sp;return ($193|0);
   }
   $127 = $10;
   $128 = $8;
   $129 = $7;
   $130 = (($128) - ($129))|0;
   $131 = (($130) + 1)|0;
   $132 = ($127|0)!=($131|0);
   L23: do {
    if ($132) {
     $133 = $11;
     $14 = $133;
     $13 = 0;
     $12 = 0;
     while(1) {
      $134 = $12;
      $135 = $10;
      $136 = ($134|0)<($135|0);
      if (!($136)) {
       break;
      }
      $137 = $12;
      $138 = $14;
      $139 = (($138) + ($137)|0);
      $140 = HEAP8[$139>>0]|0;
      $141 = $140 << 24 >> 24;
      $142 = ($141|0)>=(33);
      if ($142) {
       $143 = $12;
       $144 = $14;
       $145 = (($144) + ($143)|0);
       $146 = HEAP8[$145>>0]|0;
       $147 = $146 << 24 >> 24;
       $148 = ($147|0)<=(126);
       if ($148) {
        $149 = $12;
        $150 = $14;
        $151 = (($150) + ($149)|0);
        $152 = HEAP8[$151>>0]|0;
        $153 = $152 << 24 >> 24;
        $154 = (_toupper($153)|0);
        $155 = $154&255;
        $156 = $13;
        $157 = (($156) + 1)|0;
        $13 = $157;
        $158 = $14;
        $159 = (($158) + ($156)|0);
        HEAP8[$159>>0] = $155;
       }
      }
      $160 = $12;
      $161 = (($160) + 1)|0;
      $12 = $161;
     }
     $162 = $14;
     $163 = $13;
     $164 = (($162) + ($163)|0);
     $15 = $164;
     $165 = $15;
     $166 = $11;
     $167 = $165;
     $168 = $166;
     $169 = (($167) - ($168))|0;
     $170 = $8;
     $171 = $7;
     $172 = (($170) - ($171))|0;
     $173 = (($172) + 1)|0;
     $174 = ($169|0)!=($173|0);
     if ($174) {
      $175 = HEAP32[2410]|0;
      (_fprintf($175,15665,$vararg_buffer)|0);
      $176 = $11;
      _free($176);
      $4 = 0;
      $193 = $4;
      STACKTOP = sp;return ($193|0);
     }
    } else {
     $16 = 0;
     while(1) {
      $177 = $16;
      $178 = $10;
      $179 = ($177|0)<($178|0);
      if (!($179)) {
       break L23;
      }
      $180 = $16;
      $181 = $11;
      $182 = (($181) + ($180)|0);
      $183 = HEAP8[$182>>0]|0;
      $184 = $183 << 24 >> 24;
      $185 = (_toupper($184)|0);
      $186 = $185&255;
      $187 = $16;
      $188 = $11;
      $189 = (($188) + ($187)|0);
      HEAP8[$189>>0] = $186;
      $190 = $16;
      $191 = (($190) + 1)|0;
      $16 = $191;
     }
    }
   } while(0);
   $192 = $11;
   $4 = $192;
   $193 = $4;
   STACKTOP = sp;return ($193|0);
  }
 }
 $4 = 0;
 $193 = $4;
 STACKTOP = sp;return ($193|0);
}
function _cram_get_ref($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $7;
 $11 = $14;
 $15 = $6;
 $16 = ($15|0)==(-1);
 if ($16) {
  $4 = 0;
  $394 = $4;
  STACKTOP = sp;return ($394|0);
 }
 $17 = $5;
 $18 = ((($17)) + 34704|0);
 (_pthread_mutex_lock(($18|0))|0);
 $19 = $5;
 $20 = ((($19)) + 34656|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $5;
  $24 = ((($23)) + 308|0);
  HEAP32[$24>>2] = 1;
 }
 $25 = $6;
 $26 = $5;
 $27 = ((($26)) + 48|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($25|0)>=($30|0);
 if ($31) {
  $32 = HEAP32[2410]|0;
  $33 = $6;
  HEAP32[$vararg_buffer>>2] = $33;
  (_fprintf($32,15728,$vararg_buffer)|0);
  $34 = $5;
  $35 = ((($34)) + 34704|0);
  (_pthread_mutex_unlock(($35|0))|0);
  $4 = 0;
  $394 = $4;
  STACKTOP = sp;return ($394|0);
 }
 $36 = $5;
 $37 = ((($36)) + 48|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $40 = $6;
  $41 = $5;
  $42 = ((($41)) + 48|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($43)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + ($40<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)!=(0|0);
  if ($48) {
   $53 = $6;
   $54 = $5;
   $55 = ((($54)) + 48|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ((($56)) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($58) + ($53<<2)|0);
   $60 = HEAP32[$59>>2]|0;
   $9 = $60;
   $61 = ($60|0)!=(0|0);
   if (!($61)) {
    $62 = HEAP32[2410]|0;
    $63 = $6;
    HEAP32[$vararg_buffer4>>2] = $63;
    (_fprintf($62,15728,$vararg_buffer4)|0);
    $64 = $5;
    $65 = ((($64)) + 34704|0);
    (_pthread_mutex_unlock(($65|0))|0);
    $4 = 0;
    $394 = $4;
    STACKTOP = sp;return ($394|0);
   }
   $66 = $5;
   $67 = ((($66)) + 48|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ((($68)) + 28|0);
   (_pthread_mutex_lock(($69|0))|0);
   $70 = $9;
   $71 = ((($70)) + 8|0);
   $72 = $71;
   $73 = $72;
   $74 = HEAP32[$73>>2]|0;
   $75 = (($72) + 4)|0;
   $76 = $75;
   $77 = HEAP32[$76>>2]|0;
   $78 = ($74|0)==(0);
   $79 = ($77|0)==(0);
   $80 = $78 & $79;
   do {
    if ($80) {
     $81 = $5;
     $82 = $6;
     $83 = $9;
     $84 = (_cram_populate_ref($81,$82,$83)|0);
     $85 = ($84|0)==(-1);
     if ($85) {
      $86 = HEAP32[2410]|0;
      $87 = $6;
      HEAP32[$vararg_buffer7>>2] = $87;
      (_fprintf($86,15758,$vararg_buffer7)|0);
      $88 = $5;
      $89 = ((($88)) + 48|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = ((($90)) + 28|0);
      (_pthread_mutex_unlock(($91|0))|0);
      $92 = $5;
      $93 = ((($92)) + 34704|0);
      (_pthread_mutex_unlock(($93|0))|0);
      $4 = 0;
      $394 = $4;
      STACKTOP = sp;return ($394|0);
     } else {
      $94 = $6;
      $95 = $5;
      $96 = ((($95)) + 48|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ((($97)) + 8|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = (($99) + ($94<<2)|0);
      $101 = HEAP32[$100>>2]|0;
      $9 = $101;
      $102 = $5;
      $103 = ((($102)) + 34656|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = ($104|0)!=(0);
      if (!($105)) {
       break;
      }
      $106 = $5;
      $107 = ((($106)) + 48|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = $6;
      _cram_ref_incr_locked($108,$109);
      break;
     }
    }
   } while(0);
   $110 = $8;
   $111 = ($110|0)<(1);
   if ($111) {
    $112 = $9;
    $113 = ((($112)) + 8|0);
    $114 = $113;
    $115 = $114;
    $116 = HEAP32[$115>>2]|0;
    $117 = (($114) + 4)|0;
    $118 = $117;
    $119 = HEAP32[$118>>2]|0;
    $8 = $116;
   }
   $120 = $8;
   $121 = ($120|0)<(0);
   $122 = $121 << 31 >> 31;
   $123 = $9;
   $124 = ((($123)) + 8|0);
   $125 = $124;
   $126 = $125;
   $127 = HEAP32[$126>>2]|0;
   $128 = (($125) + 4)|0;
   $129 = $128;
   $130 = HEAP32[$129>>2]|0;
   $131 = ($122|0)>($130|0);
   $132 = ($120>>>0)>=($127>>>0);
   $133 = ($122|0)==($130|0);
   $134 = $133 & $132;
   $135 = $131 | $134;
   if ($135) {
    $136 = $9;
    $137 = ((($136)) + 8|0);
    $138 = $137;
    $139 = $138;
    $140 = HEAP32[$139>>2]|0;
    $141 = (($138) + 4)|0;
    $142 = $141;
    $143 = HEAP32[$142>>2]|0;
    $8 = $140;
   }
   $144 = $7;
   $145 = ($144|0)>=(1);
   if (!($145)) {
    ___assert_fail((15798|0),(15199|0),2702,(15809|0));
    // unreachable;
   }
   $146 = $8;
   $147 = $7;
   $148 = (($146) - ($147))|0;
   $149 = (+($148|0));
   $150 = $9;
   $151 = ((($150)) + 8|0);
   $152 = $151;
   $153 = $152;
   $154 = HEAP32[$153>>2]|0;
   $155 = (($152) + 4)|0;
   $156 = $155;
   $157 = HEAP32[$156>>2]|0;
   $158 = (+($154>>>0)) + (4294967296.0*(+($157|0)));
   $159 = 0.5 * $158;
   $160 = $149 >= $159;
   if ($160) {
    label = 25;
   } else {
    $161 = $5;
    $162 = ((($161)) + 308|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)!=(0);
    if ($164) {
     label = 25;
    }
   }
   if ((label|0) == 25) {
    $7 = 1;
    $165 = $9;
    $166 = ((($165)) + 8|0);
    $167 = $166;
    $168 = $167;
    $169 = HEAP32[$168>>2]|0;
    $170 = (($167) + 4)|0;
    $171 = $170;
    $172 = HEAP32[$171>>2]|0;
    $8 = $169;
   }
   $173 = $5;
   $174 = ((($173)) + 308|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = ($175|0)!=(0);
   do {
    if (!($176)) {
     $177 = $9;
     $178 = ((($177)) + 40|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = ($179|0)!=(0|0);
     if (!($180)) {
      $181 = $7;
      $182 = ($181|0)==(1);
      if ($182) {
       $183 = $8;
       $184 = ($183|0)<(0);
       $185 = $184 << 31 >> 31;
       $186 = $9;
       $187 = ((($186)) + 8|0);
       $188 = $187;
       $189 = $188;
       $190 = HEAP32[$189>>2]|0;
       $191 = (($188) + 4)|0;
       $192 = $191;
       $193 = HEAP32[$192>>2]|0;
       $194 = ($183|0)==($190|0);
       $195 = ($185|0)==($193|0);
       $196 = $194 & $195;
       if ($196) {
        break;
       }
      }
      $264 = $6;
      $265 = ($264|0)<(0);
      $266 = $5;
      if ($265) {
       $267 = ((($266)) + 56|0);
       $268 = HEAP32[$267>>2]|0;
       $269 = ($268|0)!=(0|0);
       if ($269) {
        $270 = $5;
        $271 = ((($270)) + 56|0);
        $272 = HEAP32[$271>>2]|0;
        _free($272);
        $273 = $5;
        $274 = ((($273)) + 56|0);
        HEAP32[$274>>2] = 0;
       }
       $275 = $5;
       $276 = ((($275)) + 52|0);
       HEAP32[$276>>2] = 0;
       $277 = $6;
       $278 = $5;
       $279 = ((($278)) + 60|0);
       HEAP32[$279>>2] = $277;
       $280 = $5;
       $281 = ((($280)) + 48|0);
       $282 = HEAP32[$281>>2]|0;
       $283 = ((($282)) + 28|0);
       (_pthread_mutex_unlock(($283|0))|0);
       $284 = $5;
       $285 = ((($284)) + 34704|0);
       (_pthread_mutex_unlock(($285|0))|0);
       $4 = 0;
       $394 = $4;
       STACKTOP = sp;return ($394|0);
      }
      $286 = ((($266)) + 48|0);
      $287 = HEAP32[$286>>2]|0;
      $288 = ((($287)) + 16|0);
      $289 = HEAP32[$288>>2]|0;
      $290 = $9;
      $291 = ((($290)) + 4|0);
      $292 = HEAP32[$291>>2]|0;
      $293 = (_strcmp($289,$292)|0);
      $294 = ($293|0)!=(0);
      if ($294) {
       label = 46;
      } else {
       $295 = $5;
       $296 = ((($295)) + 48|0);
       $297 = HEAP32[$296>>2]|0;
       $298 = ((($297)) + 20|0);
       $299 = HEAP32[$298>>2]|0;
       $300 = ($299|0)==(0|0);
       if ($300) {
        label = 46;
       }
      }
      do {
       if ((label|0) == 46) {
        $301 = $5;
        $302 = ((($301)) + 48|0);
        $303 = HEAP32[$302>>2]|0;
        $304 = ((($303)) + 20|0);
        $305 = HEAP32[$304>>2]|0;
        $306 = ($305|0)!=(0|0);
        do {
         if ($306) {
          $307 = $5;
          $308 = ((($307)) + 48|0);
          $309 = HEAP32[$308>>2]|0;
          $310 = ((($309)) + 20|0);
          $311 = HEAP32[$310>>2]|0;
          $312 = (_bgzf_close($311)|0);
          $313 = ($312|0)!=(0);
          if (!($313)) {
           break;
          }
          $4 = 0;
          $394 = $4;
          STACKTOP = sp;return ($394|0);
         }
        } while(0);
        $314 = $9;
        $315 = ((($314)) + 4|0);
        $316 = HEAP32[$315>>2]|0;
        $317 = $5;
        $318 = ((($317)) + 48|0);
        $319 = HEAP32[$318>>2]|0;
        $320 = ((($319)) + 16|0);
        HEAP32[$320>>2] = $316;
        $321 = $5;
        $322 = ((($321)) + 48|0);
        $323 = HEAP32[$322>>2]|0;
        $324 = ((($323)) + 16|0);
        $325 = HEAP32[$324>>2]|0;
        $326 = $9;
        $327 = ((($326)) + 48|0);
        $328 = HEAP32[$327>>2]|0;
        $329 = (_bgzf_open_ref($325,23049,$328)|0);
        $330 = $5;
        $331 = ((($330)) + 48|0);
        $332 = HEAP32[$331>>2]|0;
        $333 = ((($332)) + 20|0);
        HEAP32[$333>>2] = $329;
        $334 = ($329|0)!=(0|0);
        if ($334) {
         break;
        }
        $335 = $5;
        $336 = ((($335)) + 48|0);
        $337 = HEAP32[$336>>2]|0;
        $338 = ((($337)) + 28|0);
        (_pthread_mutex_unlock(($338|0))|0);
        $339 = $5;
        $340 = ((($339)) + 34704|0);
        (_pthread_mutex_unlock(($340|0))|0);
        $4 = 0;
        $394 = $4;
        STACKTOP = sp;return ($394|0);
       }
      } while(0);
      $341 = $5;
      $342 = ((($341)) + 48|0);
      $343 = HEAP32[$342>>2]|0;
      $344 = ((($343)) + 20|0);
      $345 = HEAP32[$344>>2]|0;
      $346 = $9;
      $347 = $7;
      $348 = $8;
      $349 = (_load_ref_portion($345,$346,$347,$348)|0);
      $350 = $5;
      $351 = ((($350)) + 52|0);
      HEAP32[$351>>2] = $349;
      $352 = ($349|0)!=(0|0);
      $353 = $5;
      if (!($352)) {
       $354 = ((($353)) + 48|0);
       $355 = HEAP32[$354>>2]|0;
       $356 = ((($355)) + 28|0);
       (_pthread_mutex_unlock(($356|0))|0);
       $357 = $5;
       $358 = ((($357)) + 34704|0);
       (_pthread_mutex_unlock(($358|0))|0);
       $4 = 0;
       $394 = $4;
       STACKTOP = sp;return ($394|0);
      }
      $359 = ((($353)) + 56|0);
      $360 = HEAP32[$359>>2]|0;
      $361 = ($360|0)!=(0|0);
      if ($361) {
       $362 = $5;
       $363 = ((($362)) + 56|0);
       $364 = HEAP32[$363>>2]|0;
       _free($364);
      }
      $365 = $6;
      $366 = $5;
      $367 = ((($366)) + 60|0);
      HEAP32[$367>>2] = $365;
      $368 = $7;
      $369 = $5;
      $370 = ((($369)) + 64|0);
      HEAP32[$370>>2] = $368;
      $371 = $8;
      $372 = $5;
      $373 = ((($372)) + 68|0);
      HEAP32[$373>>2] = $371;
      $374 = $5;
      $375 = ((($374)) + 52|0);
      $376 = HEAP32[$375>>2]|0;
      $377 = $5;
      $378 = ((($377)) + 56|0);
      HEAP32[$378>>2] = $376;
      $379 = $5;
      $380 = ((($379)) + 52|0);
      $381 = HEAP32[$380>>2]|0;
      $10 = $381;
      $382 = $5;
      $383 = ((($382)) + 48|0);
      $384 = HEAP32[$383>>2]|0;
      $385 = ((($384)) + 28|0);
      (_pthread_mutex_unlock(($385|0))|0);
      $386 = $5;
      $387 = ((($386)) + 34704|0);
      (_pthread_mutex_unlock(($387|0))|0);
      $388 = $10;
      $389 = $11;
      $390 = (($388) + ($389)|0);
      $391 = $7;
      $392 = (0 - ($391))|0;
      $393 = (($390) + ($392)|0);
      $4 = $393;
      $394 = $4;
      STACKTOP = sp;return ($394|0);
     }
    }
   } while(0);
   $197 = $6;
   $198 = ($197|0)>=(0);
   if ($198) {
    $199 = $9;
    $200 = ((($199)) + 40|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = ($201|0)!=(0|0);
    $203 = $5;
    $204 = ((($203)) + 48|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = $6;
    do {
     if ($202) {
      _cram_ref_incr_locked($205,$206);
     } else {
      $207 = $9;
      $208 = ((($207)) + 48|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = (_cram_ref_load($205,$206,$209)|0);
      $13 = $210;
      $211 = ($210|0)!=(0|0);
      $212 = $5;
      if ($211) {
       $218 = ((($212)) + 34656|0);
       $219 = HEAP32[$218>>2]|0;
       $220 = ($219|0)!=(0);
       if (!($220)) {
        break;
       }
       $221 = $5;
       $222 = ((($221)) + 48|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = $6;
       _cram_ref_incr_locked($223,$224);
       break;
      } else {
       $213 = ((($212)) + 48|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = ((($214)) + 28|0);
       (_pthread_mutex_unlock(($215|0))|0);
       $216 = $5;
       $217 = ((($216)) + 34704|0);
       (_pthread_mutex_unlock(($217|0))|0);
       $4 = 0;
       $394 = $4;
       STACKTOP = sp;return ($394|0);
      }
     }
    } while(0);
    $225 = $5;
    $226 = ((($225)) + 52|0);
    HEAP32[$226>>2] = 0;
    $227 = $5;
    $228 = ((($227)) + 64|0);
    HEAP32[$228>>2] = 1;
    $229 = $9;
    $230 = ((($229)) + 8|0);
    $231 = $230;
    $232 = $231;
    $233 = HEAP32[$232>>2]|0;
    $234 = (($231) + 4)|0;
    $235 = $234;
    $236 = HEAP32[$235>>2]|0;
    $237 = $5;
    $238 = ((($237)) + 68|0);
    HEAP32[$238>>2] = $233;
    $239 = $6;
    $240 = $5;
    $241 = ((($240)) + 60|0);
    HEAP32[$241>>2] = $239;
    $242 = $6;
    $243 = $5;
    $244 = ((($243)) + 48|0);
    $245 = HEAP32[$244>>2]|0;
    $246 = ((($245)) + 8|0);
    $247 = HEAP32[$246>>2]|0;
    $248 = (($247) + ($242<<2)|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = ((($249)) + 40|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = $11;
    $253 = (($251) + ($252)|0);
    $254 = ((($253)) + -1|0);
    $12 = $254;
   } else {
    $255 = $5;
    $256 = ((($255)) + 52|0);
    HEAP32[$256>>2] = 0;
    $12 = 0;
   }
   $257 = $5;
   $258 = ((($257)) + 48|0);
   $259 = HEAP32[$258>>2]|0;
   $260 = ((($259)) + 28|0);
   (_pthread_mutex_unlock(($260|0))|0);
   $261 = $5;
   $262 = ((($261)) + 34704|0);
   (_pthread_mutex_unlock(($262|0))|0);
   $263 = $12;
   $4 = $263;
   $394 = $4;
   STACKTOP = sp;return ($394|0);
  }
 }
 $49 = HEAP32[2410]|0;
 $50 = $6;
 HEAP32[$vararg_buffer1>>2] = $50;
 (_fprintf($49,15728,$vararg_buffer1)|0);
 $51 = $5;
 $52 = ((($51)) + 34704|0);
 (_pthread_mutex_unlock(($52|0))|0);
 $4 = 0;
 $394 = $4;
 STACKTOP = sp;return ($394|0);
}
function _cram_populate_ref($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer22 = 0, $vararg_buffer28 = 0;
 var $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16688|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16688|0);
 $vararg_buffer28 = sp + 72|0;
 $vararg_buffer22 = sp + 56|0;
 $vararg_buffer19 = sp + 48|0;
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $10 = sp + 12584|0;
 $11 = sp + 8488|0;
 $12 = sp + 4392|0;
 $13 = sp + 296|0;
 $17 = sp + 196|0;
 $20 = sp + 112|0;
 $22 = sp + 104|0;
 $30 = sp + 280|0;
 $31 = sp + 240|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $32 = (_getenv((15822|0))|0);
 $7 = $32;
 $33 = (_getenv((15831|0))|0);
 $14 = $33;
 $16 = 0;
 $34 = $4;
 $35 = ((($34)) + 272|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = HEAP32[2410]|0;
  $39 = $4;
  $40 = $5;
  HEAP32[$vararg_buffer>>2] = $39;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $40;
  (_fprintf($38,15841,$vararg_buffer)|0);
 }
 HEAP8[$13>>0] = 0;
 $41 = $7;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = $7;
  $44 = HEAP8[$43>>0]|0;
  $45 = $44 << 24 >> 24;
  $46 = ($45|0)==(0);
  if ($46) {
   label = 5;
  }
 } else {
  label = 5;
 }
 do {
  if ((label|0) == 5) {
   $7 = 15876;
   $47 = $14;
   $48 = ($47|0)!=(0|0);
   if ($48) {
    $49 = $14;
    $50 = HEAP8[$49>>0]|0;
    $51 = $50 << 24 >> 24;
    $52 = ($51|0)==(0);
    if (!($52)) {
     break;
    }
   }
   $53 = (_get_cache_basedir($17)|0);
   $18 = $53;
   $54 = $18;
   $55 = HEAP32[$17>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $54;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $55;
   (_snprintf($13,4096,15916,$vararg_buffer2)|0);
   $56 = $18;
   $57 = HEAP32[$17>>2]|0;
   HEAP32[$vararg_buffer6>>2] = $56;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $57;
   (_snprintf($12,4096,15929,$vararg_buffer6)|0);
   $14 = $12;
   $58 = $4;
   $59 = ((($58)) + 272|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)!=(0);
   if ($61) {
    $62 = HEAP32[2410]|0;
    $63 = $14;
    HEAP32[$vararg_buffer10>>2] = $63;
    (_fprintf($62,15956,$vararg_buffer10)|0);
   }
  }
 } while(0);
 $64 = $6;
 $65 = HEAP32[$64>>2]|0;
 $66 = ($65|0)!=(0|0);
 if (!($66)) {
  $3 = -1;
  $393 = $3;
  STACKTOP = sp;return ($393|0);
 }
 $67 = $4;
 $68 = ((($67)) + 16|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $6;
 $71 = HEAP32[$70>>2]|0;
 $72 = (_sam_hdr_find($69,15475,15478,$71)|0);
 $8 = $72;
 $73 = ($72|0)!=(0|0);
 if (!($73)) {
  $3 = -1;
  $393 = $3;
  STACKTOP = sp;return ($393|0);
 }
 $74 = $4;
 $75 = ((($74)) + 16|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = $8;
 $78 = (_sam_hdr_find_key($76,$77,15481,0)|0);
 $9 = $78;
 $79 = ($78|0)!=(0|0);
 if ($79) {
  $80 = $4;
  $81 = ((($80)) + 272|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($82|0)!=(0);
  if ($83) {
   $84 = HEAP32[2410]|0;
   $85 = $9;
   $86 = ((($85)) + 4|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ((($87)) + 3|0);
   HEAP32[$vararg_buffer13>>2] = $88;
   (_fprintf($84,15984,$vararg_buffer13)|0);
  }
  $89 = $14;
  $90 = ($89|0)!=(0|0);
  if ($90) {
   $91 = $14;
   $92 = HEAP8[$91>>0]|0;
   $93 = $92 << 24 >> 24;
   $94 = ($93|0)!=(0);
   if ($94) {
    $95 = $14;
    $96 = $9;
    $97 = ((($96)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ((($98)) + 3|0);
    _expand_cache_path($10,$95,$99);
    $16 = 1;
   }
  }
  $100 = $16;
  $101 = ($100|0)!=(0);
  if (!($101)) {
   $102 = $9;
   $103 = ((($102)) + 4|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ((($104)) + 3|0);
   $106 = $7;
   $107 = (_find_path($105,$106)|0);
   $19 = $107;
   $108 = ($107|0)!=(0|0);
   if ($108) {
    $109 = $19;
    (_strncpy($10,$109,4096)|0);
    $110 = $19;
    _free($110);
    $111 = (_is_file($10)|0);
    $112 = ($111|0)!=(0);
    if ($112) {
     $16 = 1;
    }
   }
  }
  $113 = $16;
  $114 = ($113|0)!=(0);
  if ($114) {
   $115 = (_stat($10,$20)|0);
   $116 = (0)==($115|0);
   if ($116) {
    $117 = (_bgzf_open($10,23049)|0);
    $21 = $117;
    $118 = ($117|0)!=(0|0);
    if ($118) {
     $119 = ((($20)) + 36|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = ($120|0)<(0);
     $122 = $121 << 31 >> 31;
     $123 = $6;
     $124 = ((($123)) + 8|0);
     $125 = $124;
     $126 = $125;
     HEAP32[$126>>2] = $120;
     $127 = (($125) + 4)|0;
     $128 = $127;
     HEAP32[$128>>2] = $122;
     $129 = $6;
     $130 = ((($129)) + 24|0);
     HEAP32[$130>>2] = 0;
     $131 = $6;
     $132 = ((($131)) + 28|0);
     HEAP32[$132>>2] = 0;
     $133 = $6;
     $134 = ((($133)) + 16|0);
     $135 = $134;
     $136 = $135;
     HEAP32[$136>>2] = 0;
     $137 = (($135) + 4)|0;
     $138 = $137;
     HEAP32[$138>>2] = 0;
     $139 = $4;
     $140 = ((($139)) + 48|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = HEAP32[$141>>2]|0;
     $143 = (_string_dup($142,$10)|0);
     $144 = $6;
     $145 = ((($144)) + 4|0);
     HEAP32[$145>>2] = $143;
     $146 = $4;
     $147 = ((($146)) + 48|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ((($148)) + 20|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)!=(0|0);
     if ($151) {
      $152 = $4;
      $153 = ((($152)) + 48|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = ((($154)) + 20|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = (_bgzf_close($156)|0);
      $158 = ($157|0)!=(0);
      if ($158) {
       $3 = -1;
       $393 = $3;
       STACKTOP = sp;return ($393|0);
      }
     }
     $159 = $21;
     $160 = $4;
     $161 = ((($160)) + 48|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = ((($162)) + 20|0);
     HEAP32[$163>>2] = $159;
     $164 = $6;
     $165 = ((($164)) + 4|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = $4;
     $168 = ((($167)) + 48|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = ((($169)) + 16|0);
     HEAP32[$170>>2] = $166;
     $171 = $6;
     $172 = ((($171)) + 48|0);
     HEAP32[$172>>2] = 1;
     $3 = 0;
     $393 = $3;
     STACKTOP = sp;return ($393|0);
    }
   }
  }
  $173 = $9;
  $174 = ((($173)) + 4|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = ((($175)) + 3|0);
  $177 = $7;
  $178 = (_open_path_mfile($176,$177,0)|0);
  $15 = $178;
  $179 = ($178|0)!=(0|0);
  if ($179) {
   $180 = $15;
   $181 = (_mfsteal($180,$22)|0);
   $182 = $6;
   $183 = ((($182)) + 40|0);
   HEAP32[$183>>2] = $181;
   $184 = $6;
   $185 = ((($184)) + 40|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = ($186|0)!=(0|0);
   if ($187) {
    $188 = $6;
    $189 = ((($188)) + 44|0);
    HEAP32[$189>>2] = 0;
   } else {
    $190 = $15;
    $191 = ((($190)) + 4|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = $6;
    $194 = ((($193)) + 40|0);
    HEAP32[$194>>2] = $192;
    $195 = $15;
    $196 = $6;
    $197 = ((($196)) + 44|0);
    HEAP32[$197>>2] = $195;
   }
   $198 = HEAP32[$22>>2]|0;
   $199 = $6;
   $200 = ((($199)) + 8|0);
   $201 = $200;
   $202 = $201;
   HEAP32[$202>>2] = $198;
   $203 = (($201) + 4)|0;
   $204 = $203;
   HEAP32[$204>>2] = 0;
   $205 = $6;
   $206 = ((($205)) + 48|0);
   HEAP32[$206>>2] = 1;
   $207 = $14;
   $208 = ($207|0)!=(0|0);
   do {
    if ($208) {
     $300 = $14;
     $301 = HEAP8[$300>>0]|0;
     $302 = $301 << 24 >> 24;
     $303 = ($302|0)!=(0);
     if ($303) {
      $304 = (_getpid()|0);
      $25 = $304;
      $305 = (_get_int_threadid()|0);
      $26 = $305;
      $306 = HEAP8[$13>>0]|0;
      $307 = $306 << 24 >> 24;
      $308 = ($307|0)!=(0);
      if ($308) {
       $309 = (_is_directory($13)|0);
       $310 = ($309|0)==(0);
       $311 = (3)>=(1);
       $or$cond = $310 & $311;
       if ($or$cond) {
        $312 = HEAP32[2410]|0;
        HEAP32[$vararg_buffer16>>2] = $13;
        (_fprintf($312,16010,$vararg_buffer16)|0);
       }
      }
      $313 = $14;
      $314 = $9;
      $315 = ((($314)) + 4|0);
      $316 = HEAP32[$315>>2]|0;
      $317 = ((($316)) + 3|0);
      _expand_cache_path($10,$313,$317);
      $318 = $4;
      $319 = ((($318)) + 272|0);
      $320 = HEAP32[$319>>2]|0;
      $321 = ($320|0)!=(0);
      if ($321) {
       $322 = HEAP32[2410]|0;
       HEAP32[$vararg_buffer19>>2] = $10;
       (_fprintf($322,16125,$vararg_buffer19)|0);
      }
      _mkdir_prefix($10,1023);
      while(1) {
       $323 = (_time((0|0))|0);
       $324 = (_clock()|0);
       $325 = $323 ^ $324;
       $28 = $325;
       $326 = $26;
       $327 = (($326) + 1)|0;
       $26 = $327;
       $328 = $25;
       $329 = $26;
       $330 = $28;
       HEAP32[$vararg_buffer22>>2] = $10;
       $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
       HEAP32[$vararg_ptr25>>2] = $328;
       $vararg_ptr26 = ((($vararg_buffer22)) + 8|0);
       HEAP32[$vararg_ptr26>>2] = $329;
       $vararg_ptr27 = ((($vararg_buffer22)) + 12|0);
       HEAP32[$vararg_ptr27>>2] = $330;
       (_sprintf($11,16150,$vararg_buffer22)|0);
       $331 = (_fopen($11,16166)|0);
       $27 = $331;
       $332 = $27;
       $333 = ($332|0)==(0|0);
       if (!($333)) {
        break;
       }
       $334 = (___errno_location()|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = ($335|0)==(17);
       if (!($336)) {
        break;
       }
      }
      $337 = $27;
      $338 = ($337|0)!=(0|0);
      if (!($338)) {
       _perror($11);
       $3 = 0;
       $393 = $3;
       STACKTOP = sp;return ($393|0);
      }
      $339 = (_hts_md5_init()|0);
      $29 = $339;
      $340 = ($339|0)!=(0|0);
      if (!($340)) {
       (_unlink($11)|0);
       $341 = $27;
       (_fclose($341)|0);
       $3 = -1;
       $393 = $3;
       STACKTOP = sp;return ($393|0);
      }
      $342 = $29;
      $343 = $6;
      $344 = ((($343)) + 40|0);
      $345 = HEAP32[$344>>2]|0;
      $346 = $6;
      $347 = ((($346)) + 8|0);
      $348 = $347;
      $349 = $348;
      $350 = HEAP32[$349>>2]|0;
      $351 = (($348) + 4)|0;
      $352 = $351;
      $353 = HEAP32[$352>>2]|0;
      _hts_md5_update($342,$345,$350);
      $354 = $29;
      _hts_md5_final($30,$354);
      $355 = $29;
      _hts_md5_destroy($355);
      _hts_md5_hex($31,$30);
      $356 = $9;
      $357 = ((($356)) + 4|0);
      $358 = HEAP32[$357>>2]|0;
      $359 = ((($358)) + 3|0);
      $360 = (_strncmp($359,$31,32)|0);
      $361 = ($360|0)!=(0);
      if ($361) {
       $362 = HEAP32[2410]|0;
       HEAP32[$vararg_buffer28>>2] = 16223;
       (_fprintf($362,16169,$vararg_buffer28)|0);
       (_unlink($11)|0);
       $363 = $27;
       (_fclose($363)|0);
       $3 = -1;
       $393 = $3;
       STACKTOP = sp;return ($393|0);
      }
      $364 = $6;
      $365 = ((($364)) + 8|0);
      $366 = $365;
      $367 = $366;
      $368 = HEAP32[$367>>2]|0;
      $369 = (($366) + 4)|0;
      $370 = $369;
      $371 = HEAP32[$370>>2]|0;
      $372 = $6;
      $373 = ((($372)) + 40|0);
      $374 = HEAP32[$373>>2]|0;
      $375 = $6;
      $376 = ((($375)) + 8|0);
      $377 = $376;
      $378 = $377;
      $379 = HEAP32[$378>>2]|0;
      $380 = (($377) + 4)|0;
      $381 = $380;
      $382 = HEAP32[$381>>2]|0;
      $383 = $27;
      $384 = (_fwrite($374,1,$379,$383)|0);
      $385 = ($368|0)!=($384|0);
      $386 = ($371|0)!=(0);
      $387 = $385 | $386;
      if ($387) {
       _perror($10);
      }
      $388 = $27;
      $389 = (_paranoid_fclose($388)|0);
      $390 = (-1)==($389|0);
      if ($390) {
       (_unlink($11)|0);
       break;
      }
      $391 = (_chmod($11,292)|0);
      $392 = (0)==($391|0);
      if ($392) {
       (_rename($11,$10)|0);
       break;
      } else {
       (_unlink($11)|0);
       break;
      }
     }
    }
   } while(0);
   $3 = 0;
   $393 = $3;
   STACKTOP = sp;return ($393|0);
  }
 }
 $209 = $4;
 $210 = ((($209)) + 16|0);
 $211 = HEAP32[$210>>2]|0;
 $212 = $8;
 $213 = (_sam_hdr_find_key($211,$212,16001,0)|0);
 $9 = $213;
 $214 = ($213|0)!=(0|0);
 if (!($214)) {
  $3 = -1;
  $393 = $3;
  STACKTOP = sp;return ($393|0);
 }
 $215 = $9;
 $216 = ((($215)) + 4|0);
 $217 = HEAP32[$216>>2]|0;
 $218 = ((($217)) + 3|0);
 $219 = (_strncmp($218,16004,5)|0);
 $220 = ($219|0)==(0);
 $221 = $9;
 $222 = ((($221)) + 4|0);
 $223 = HEAP32[$222>>2]|0;
 $224 = ((($223)) + 8|0);
 $225 = ((($223)) + 3|0);
 $226 = $220 ? $224 : $225;
 $24 = $226;
 $227 = $4;
 $228 = ((($227)) + 48|0);
 $229 = HEAP32[$228>>2]|0;
 $230 = ((($229)) + 20|0);
 $231 = HEAP32[$230>>2]|0;
 $232 = ($231|0)!=(0|0);
 do {
  if ($232) {
   $233 = $4;
   $234 = ((($233)) + 48|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = ((($235)) + 20|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = (_bgzf_close($237)|0);
   $239 = ($238|0)!=(0);
   if (!($239)) {
    $240 = $4;
    $241 = ((($240)) + 48|0);
    $242 = HEAP32[$241>>2]|0;
    $243 = ((($242)) + 20|0);
    HEAP32[$243>>2] = 0;
    break;
   }
   $3 = -1;
   $393 = $3;
   STACKTOP = sp;return ($393|0);
  }
 } while(0);
 $244 = $4;
 $245 = ((($244)) + 48|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = $24;
 $248 = (_refs_load_fai($246,$247,0)|0);
 $23 = $248;
 $249 = ($248|0)!=(0|0);
 if (!($249)) {
  $3 = -1;
  $393 = $3;
  STACKTOP = sp;return ($393|0);
 }
 $250 = $4;
 _sanitise_SQ_lines($250);
 $251 = $23;
 $252 = $4;
 $253 = ((($252)) + 48|0);
 HEAP32[$253>>2] = $251;
 $254 = $4;
 $255 = ((($254)) + 48|0);
 $256 = HEAP32[$255>>2]|0;
 $257 = ((($256)) + 20|0);
 $258 = HEAP32[$257>>2]|0;
 $259 = ($258|0)!=(0|0);
 do {
  if ($259) {
   $260 = $4;
   $261 = ((($260)) + 48|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = ((($262)) + 20|0);
   $264 = HEAP32[$263>>2]|0;
   $265 = (_bgzf_close($264)|0);
   $266 = ($265|0)!=(0);
   if (!($266)) {
    $267 = $4;
    $268 = ((($267)) + 48|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = ((($269)) + 20|0);
    HEAP32[$270>>2] = 0;
    break;
   }
   $3 = -1;
   $393 = $3;
   STACKTOP = sp;return ($393|0);
  }
 } while(0);
 $271 = $4;
 $272 = ((($271)) + 48|0);
 $273 = HEAP32[$272>>2]|0;
 $274 = ((($273)) + 16|0);
 $275 = HEAP32[$274>>2]|0;
 $276 = ($275|0)!=(0|0);
 if (!($276)) {
  $3 = -1;
  $393 = $3;
  STACKTOP = sp;return ($393|0);
 }
 $277 = $4;
 $278 = ((($277)) + 48|0);
 $279 = HEAP32[$278>>2]|0;
 $280 = $4;
 $281 = ((($280)) + 16|0);
 $282 = HEAP32[$281>>2]|0;
 $283 = (_refs2id($279,$282)|0);
 $284 = (-1)==($283|0);
 if ($284) {
  $3 = -1;
  $393 = $3;
  STACKTOP = sp;return ($393|0);
 }
 $285 = $4;
 $286 = ((($285)) + 48|0);
 $287 = HEAP32[$286>>2]|0;
 $288 = ((($287)) + 8|0);
 $289 = HEAP32[$288>>2]|0;
 $290 = ($289|0)!=(0|0);
 if ($290) {
  $291 = $5;
  $292 = $4;
  $293 = ((($292)) + 48|0);
  $294 = HEAP32[$293>>2]|0;
  $295 = ((($294)) + 8|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = (($296) + ($291<<2)|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = ($298|0)!=(0|0);
  if ($299) {
   $3 = 0;
   $393 = $3;
   STACKTOP = sp;return ($393|0);
  }
 }
 $3 = -1;
 $393 = $3;
 STACKTOP = sp;return ($393|0);
}
function _get_cache_basedir($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 HEAP32[$4>>2] = 26441;
 $5 = (_getenv((16377|0))|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 << 24 >> 24;
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = $3;
   $1 = $12;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $13 = (_getenv((16392|0))|0);
   $3 = $13;
   $14 = $3;
   $15 = ($14|0)!=(0|0);
   if ($15) {
    $16 = $3;
    $17 = HEAP8[$16>>0]|0;
    $18 = $17 << 24 >> 24;
    $19 = ($18|0)!=(0);
    if ($19) {
     $20 = $2;
     HEAP32[$20>>2] = 16397;
     $21 = $3;
     $1 = $21;
     break;
    }
   }
   $22 = (_getenv((16405|0))|0);
   $3 = $22;
   $23 = $3;
   $24 = ($23|0)!=(0|0);
   if ($24) {
    $25 = $3;
    $26 = HEAP8[$25>>0]|0;
    $27 = $26 << 24 >> 24;
    $28 = ($27|0)!=(0);
    if ($28) {
     $29 = $3;
     $1 = $29;
     break;
    }
   }
   $30 = (_getenv((16412|0))|0);
   $3 = $30;
   $31 = $3;
   $32 = ($31|0)!=(0|0);
   if ($32) {
    $33 = $3;
    $34 = HEAP8[$33>>0]|0;
    $35 = $34 << 24 >> 24;
    $36 = ($35|0)!=(0);
    if ($36) {
     $37 = $3;
     $1 = $37;
     break;
    }
   }
   $1 = 16417;
  }
 } while(0);
 $38 = $1;
 STACKTOP = sp;return ($38|0);
}
function _refs_load_fai($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 12432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(12432|0);
 $vararg_buffer = sp;
 $7 = sp + 52|0;
 $9 = sp + 8336|0;
 $10 = sp + 144|0;
 $16 = sp + 24|0;
 $17 = sp + 20|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 $21 = $4;
 $11 = $21;
 $22 = $5;
 $23 = (_strlen($22)|0);
 $12 = $23;
 $13 = 0;
 $14 = 0;
 $24 = $11;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  label = 3;
 } else {
  $26 = (_refs_create()|0);
  $11 = $26;
  $27 = ($26|0)!=(0|0);
  if ($27) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $28 = $5;
   $29 = (_stat($28,$7)|0);
   $30 = ($29|0)!=(0);
   if ($30) {
    $31 = $6;
    $32 = ($31|0)!=(0);
    if (!($32)) {
     break;
    }
    $33 = $5;
    _perror($33);
    break;
   }
   $34 = $11;
   $35 = ((($34)) + 20|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)!=(0|0);
   if ($37) {
    $38 = $11;
    $39 = ((($38)) + 20|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (_bgzf_close($40)|0);
    $42 = ($41|0)!=(0);
    if ($42) {
     break;
    }
   }
   $43 = $11;
   $44 = ((($43)) + 20|0);
   HEAP32[$44>>2] = 0;
   $45 = $11;
   $46 = HEAP32[$45>>2]|0;
   $47 = $5;
   $48 = (_string_dup($46,$47)|0);
   $49 = $11;
   $50 = ((($49)) + 16|0);
   HEAP32[$50>>2] = $48;
   $51 = ($48|0)!=(0|0);
   if ($51) {
    $52 = $12;
    $53 = ($52>>>0)>(4);
    if ($53) {
     $54 = $12;
     $55 = (($54) - 4)|0;
     $56 = $5;
     $57 = (($56) + ($55)|0);
     $58 = (_strcmp($57,16363)|0);
     $59 = ($58|0)==(0);
     if ($59) {
      $60 = $12;
      $61 = (($60) - 4)|0;
      $62 = $11;
      $63 = ((($62)) + 16|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = (($64) + ($61)|0);
      HEAP8[$65>>0] = 0;
     }
    }
    $66 = $11;
    $67 = ((($66)) + 16|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (_bgzf_open_ref($68,23049,0)|0);
    $70 = $11;
    $71 = ((($70)) + 20|0);
    HEAP32[$71>>2] = $69;
    $72 = ($69|0)!=(0|0);
    if ($72) {
     $73 = $11;
     $74 = ((($73)) + 16|0);
     $75 = HEAP32[$74>>2]|0;
     HEAP32[$vararg_buffer>>2] = 4091;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $75;
     (_sprintf($9,16368,$vararg_buffer)|0);
     $76 = (_stat($9,$7)|0);
     $77 = ($76|0)!=(0);
     if ($77) {
      $78 = $6;
      $79 = ($78|0)!=(0);
      if (!($79)) {
       break;
      }
      _perror($9);
      break;
     }
     $80 = (_fopen($9,23049)|0);
     $8 = $80;
     $81 = ($80|0)!=(0|0);
     if (!($81)) {
      $82 = $6;
      $83 = ($82|0)!=(0);
      if (!($83)) {
       break;
      }
      _perror($9);
      break;
     }
     while(1) {
      $84 = $8;
      $85 = (_fgets($10,8192,$84)|0);
      $86 = ($85|0)!=(0|0);
      if (!($86)) {
       label = 62;
       break;
      }
      $87 = (_malloc(56)|0);
      $15 = $87;
      $88 = $15;
      $89 = ($88|0)!=(0|0);
      if (!($89)) {
       label = 21;
       break;
      }
      HEAP32[$16>>2] = $10;
      while(1) {
       $90 = HEAP32[$16>>2]|0;
       $91 = HEAP8[$90>>0]|0;
       $92 = $91 << 24 >> 24;
       $93 = ($92|0)!=(0);
       if (!($93)) {
        break;
       }
       $94 = HEAP32[$16>>2]|0;
       $95 = HEAP8[$94>>0]|0;
       $96 = $95 << 24 >> 24;
       $97 = (_isspace($96)|0);
       $98 = ($97|0)!=(0);
       $99 = $98 ^ 1;
       if (!($99)) {
        break;
       }
       $100 = HEAP32[$16>>2]|0;
       $101 = ((($100)) + 1|0);
       HEAP32[$16>>2] = $101;
      }
      $102 = HEAP32[$16>>2]|0;
      $103 = ((($102)) + 1|0);
      HEAP32[$16>>2] = $103;
      HEAP8[$102>>0] = 0;
      $104 = $11;
      $105 = HEAP32[$104>>2]|0;
      $106 = (_string_dup($105,$10)|0);
      $107 = $15;
      HEAP32[$107>>2] = $106;
      while(1) {
       $108 = HEAP32[$16>>2]|0;
       $109 = HEAP8[$108>>0]|0;
       $110 = $109 << 24 >> 24;
       $111 = ($110|0)!=(0);
       if ($111) {
        $112 = HEAP32[$16>>2]|0;
        $113 = HEAP8[$112>>0]|0;
        $114 = $113 << 24 >> 24;
        $115 = (_isspace($114)|0);
        $116 = ($115|0)!=(0);
        $299 = $116;
       } else {
        $299 = 0;
       }
       $117 = HEAP32[$16>>2]|0;
       if (!($299)) {
        break;
       }
       $118 = ((($117)) + 1|0);
       HEAP32[$16>>2] = $118;
      }
      $119 = (_strtoll($117,$16,10)|0);
      $120 = tempRet0;
      $121 = $15;
      $122 = ((($121)) + 8|0);
      $123 = $122;
      $124 = $123;
      HEAP32[$124>>2] = $119;
      $125 = (($123) + 4)|0;
      $126 = $125;
      HEAP32[$126>>2] = $120;
      while(1) {
       $127 = HEAP32[$16>>2]|0;
       $128 = HEAP8[$127>>0]|0;
       $129 = $128 << 24 >> 24;
       $130 = ($129|0)!=(0);
       if ($130) {
        $131 = HEAP32[$16>>2]|0;
        $132 = HEAP8[$131>>0]|0;
        $133 = $132 << 24 >> 24;
        $134 = (_isspace($133)|0);
        $135 = ($134|0)!=(0);
        $300 = $135;
       } else {
        $300 = 0;
       }
       $136 = HEAP32[$16>>2]|0;
       if (!($300)) {
        break;
       }
       $137 = ((($136)) + 1|0);
       HEAP32[$16>>2] = $137;
      }
      $138 = (_strtoll($136,$16,10)|0);
      $139 = tempRet0;
      $140 = $15;
      $141 = ((($140)) + 16|0);
      $142 = $141;
      $143 = $142;
      HEAP32[$143>>2] = $138;
      $144 = (($142) + 4)|0;
      $145 = $144;
      HEAP32[$145>>2] = $139;
      while(1) {
       $146 = HEAP32[$16>>2]|0;
       $147 = HEAP8[$146>>0]|0;
       $148 = $147 << 24 >> 24;
       $149 = ($148|0)!=(0);
       if ($149) {
        $150 = HEAP32[$16>>2]|0;
        $151 = HEAP8[$150>>0]|0;
        $152 = $151 << 24 >> 24;
        $153 = (_isspace($152)|0);
        $154 = ($153|0)!=(0);
        $301 = $154;
       } else {
        $301 = 0;
       }
       $155 = HEAP32[$16>>2]|0;
       if (!($301)) {
        break;
       }
       $156 = ((($155)) + 1|0);
       HEAP32[$16>>2] = $156;
      }
      $157 = (_strtol($155,$16,10)|0);
      $158 = $15;
      $159 = ((($158)) + 24|0);
      HEAP32[$159>>2] = $157;
      while(1) {
       $160 = HEAP32[$16>>2]|0;
       $161 = HEAP8[$160>>0]|0;
       $162 = $161 << 24 >> 24;
       $163 = ($162|0)!=(0);
       if ($163) {
        $164 = HEAP32[$16>>2]|0;
        $165 = HEAP8[$164>>0]|0;
        $166 = $165 << 24 >> 24;
        $167 = (_isspace($166)|0);
        $168 = ($167|0)!=(0);
        $302 = $168;
       } else {
        $302 = 0;
       }
       $169 = HEAP32[$16>>2]|0;
       if (!($302)) {
        break;
       }
       $170 = ((($169)) + 1|0);
       HEAP32[$16>>2] = $170;
      }
      $171 = (_strtol($169,$16,10)|0);
      $172 = $15;
      $173 = ((($172)) + 28|0);
      HEAP32[$173>>2] = $171;
      $174 = $11;
      $175 = ((($174)) + 16|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = $15;
      $178 = ((($177)) + 4|0);
      HEAP32[$178>>2] = $176;
      $179 = $15;
      $180 = ((($179)) + 32|0);
      $181 = $180;
      $182 = $181;
      HEAP32[$182>>2] = 0;
      $183 = (($181) + 4)|0;
      $184 = $183;
      HEAP32[$184>>2] = 0;
      $185 = $15;
      $186 = ((($185)) + 40|0);
      HEAP32[$186>>2] = 0;
      $187 = $15;
      $188 = ((($187)) + 44|0);
      HEAP32[$188>>2] = 0;
      $189 = $15;
      $190 = ((($189)) + 48|0);
      HEAP32[$190>>2] = 0;
      $191 = $11;
      $192 = ((($191)) + 4|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = $15;
      $195 = HEAP32[$194>>2]|0;
      $196 = (_kh_put_refs($193,$195,$17)|0);
      $18 = $196;
      $197 = HEAP32[$17>>2]|0;
      $198 = (-1)==($197|0);
      if ($198) {
       label = 47;
       break;
      }
      $200 = HEAP32[$17>>2]|0;
      $201 = ($200|0)!=(0);
      L63: do {
       if ($201) {
        $202 = $15;
        $203 = $18;
        $204 = $11;
        $205 = ((($204)) + 4|0);
        $206 = HEAP32[$205>>2]|0;
        $207 = ((($206)) + 24|0);
        $208 = HEAP32[$207>>2]|0;
        $209 = (($208) + ($203<<2)|0);
        HEAP32[$209>>2] = $202;
       } else {
        $210 = $18;
        $211 = $11;
        $212 = ((($211)) + 4|0);
        $213 = HEAP32[$212>>2]|0;
        $214 = ((($213)) + 24|0);
        $215 = HEAP32[$214>>2]|0;
        $216 = (($215) + ($210<<2)|0);
        $217 = HEAP32[$216>>2]|0;
        $19 = $217;
        $218 = $19;
        $219 = ($218|0)!=(0|0);
        do {
         if ($219) {
          $220 = $19;
          $221 = ((($220)) + 32|0);
          $222 = $221;
          $223 = $222;
          $224 = HEAP32[$223>>2]|0;
          $225 = (($222) + 4)|0;
          $226 = $225;
          $227 = HEAP32[$226>>2]|0;
          $228 = ($224|0)!=(0);
          $229 = ($227|0)!=(0);
          $230 = $228 | $229;
          if (!($230)) {
           $231 = $19;
           $232 = ((($231)) + 8|0);
           $233 = $232;
           $234 = $233;
           $235 = HEAP32[$234>>2]|0;
           $236 = (($233) + 4)|0;
           $237 = $236;
           $238 = HEAP32[$237>>2]|0;
           $239 = ($235|0)!=(0);
           $240 = ($238|0)!=(0);
           $241 = $239 | $240;
           if (!($241)) {
            break;
           }
          }
          $242 = $15;
          _free($242);
          break L63;
         }
        } while(0);
        $243 = $19;
        $244 = ($243|0)!=(0|0);
        if ($244) {
         $245 = $19;
         _free($245);
        }
        $246 = $15;
        $247 = $18;
        $248 = $11;
        $249 = ((($248)) + 4|0);
        $250 = HEAP32[$249>>2]|0;
        $251 = ((($250)) + 24|0);
        $252 = HEAP32[$251>>2]|0;
        $253 = (($252) + ($247<<2)|0);
        HEAP32[$253>>2] = $246;
       }
      } while(0);
      $254 = $13;
      $255 = $14;
      $256 = ($254|0)>=($255|0);
      L76: do {
       if ($256) {
        $257 = $14;
        $258 = ($257|0)!=(0);
        $259 = $14;
        $260 = $259<<1;
        $261 = $258 ? $260 : 16;
        $14 = $261;
        $262 = $11;
        $263 = ((($262)) + 8|0);
        $264 = HEAP32[$263>>2]|0;
        $265 = $14;
        $266 = $265<<2;
        $267 = (_realloc($264,$266)|0);
        $268 = $11;
        $269 = ((($268)) + 8|0);
        HEAP32[$269>>2] = $267;
        $270 = $13;
        $20 = $270;
        while(1) {
         $271 = $20;
         $272 = $14;
         $273 = ($271|0)<($272|0);
         if (!($273)) {
          break L76;
         }
         $274 = $20;
         $275 = $11;
         $276 = ((($275)) + 8|0);
         $277 = HEAP32[$276>>2]|0;
         $278 = (($277) + ($274<<2)|0);
         HEAP32[$278>>2] = 0;
         $279 = $20;
         $280 = (($279) + 1)|0;
         $20 = $280;
        }
       }
      } while(0);
      $281 = $15;
      $282 = $13;
      $283 = $11;
      $284 = ((($283)) + 8|0);
      $285 = HEAP32[$284>>2]|0;
      $286 = (($285) + ($282<<2)|0);
      HEAP32[$286>>2] = $281;
      $287 = $13;
      $288 = (($287) + 1)|0;
      $13 = $288;
      $289 = $11;
      $290 = ((($289)) + 12|0);
      HEAP32[$290>>2] = $288;
     }
     if ((label|0) == 21) {
      $3 = 0;
      $298 = $3;
      STACKTOP = sp;return ($298|0);
     }
     else if ((label|0) == 47) {
      $199 = $15;
      _free($199);
      $3 = 0;
      $298 = $3;
      STACKTOP = sp;return ($298|0);
     }
     else if ((label|0) == 62) {
      $291 = $11;
      $3 = $291;
      $298 = $3;
      STACKTOP = sp;return ($298|0);
     }
    }
   }
  }
 } while(0);
 $292 = $8;
 $293 = ($292|0)!=(0|0);
 if ($293) {
  $294 = $8;
  (_fclose($294)|0);
 }
 $295 = $4;
 $296 = ($295|0)!=(0|0);
 if (!($296)) {
  $297 = $11;
  _refs_free($297);
 }
 $3 = 0;
 $298 = $3;
 STACKTOP = sp;return ($298|0);
}
function _sanitise_SQ_lines($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $1 = $0;
 $6 = $1;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $1;
 $11 = ((($10)) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = $1;
 $15 = ((($14)) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $2 = 0;
 while(1) {
  $20 = $2;
  $21 = $1;
  $22 = ((($21)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 28|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($20|0)<($25|0);
  if (!($26)) {
   label = 14;
   break;
  }
  $27 = $2;
  $28 = $1;
  $29 = ((($28)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($30)) + 32|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($27<<4)|0);
  $34 = HEAP32[$33>>2]|0;
  $3 = $34;
  $35 = $1;
  $36 = ((($35)) + 48|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $3;
  $41 = (_kh_get_refs($39,$40)|0);
  $4 = $41;
  $42 = $4;
  $43 = $1;
  $44 = ((($43)) + 48|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = HEAP32[$47>>2]|0;
  $49 = ($42|0)==($48|0);
  if (!($49)) {
   $50 = $4;
   $51 = $1;
   $52 = ((($51)) + 48|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ((($53)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($55)) + 24|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + ($50<<2)|0);
   $59 = HEAP32[$58>>2]|0;
   $5 = $59;
   $60 = ($59|0)!=(0|0);
   if ($60) {
    $61 = $5;
    $62 = ((($61)) + 8|0);
    $63 = $62;
    $64 = $63;
    $65 = HEAP32[$64>>2]|0;
    $66 = (($63) + 4)|0;
    $67 = $66;
    $68 = HEAP32[$67>>2]|0;
    $69 = ($65|0)!=(0);
    $70 = ($68|0)!=(0);
    $71 = $69 | $70;
    if ($71) {
     $72 = $5;
     $73 = ((($72)) + 8|0);
     $74 = $73;
     $75 = $74;
     $76 = HEAP32[$75>>2]|0;
     $77 = (($74) + 4)|0;
     $78 = $77;
     $79 = HEAP32[$78>>2]|0;
     $80 = $2;
     $81 = $1;
     $82 = ((($81)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ((($83)) + 32|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (($85) + ($80<<4)|0);
     $87 = ((($86)) + 4|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = ($76|0)!=($88|0);
     $90 = ($79|0)!=(0);
     $91 = $89 | $90;
     if ($91) {
      $92 = $5;
      $93 = HEAP32[$92>>2]|0;
      $94 = $2;
      $95 = $1;
      $96 = ((($95)) + 16|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ((($97)) + 32|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = (($99) + ($94<<4)|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = (_strcmp($93,$101)|0);
      $103 = ($102|0)==(0);
      if (!($103)) {
       label = 11;
       break;
      }
      $104 = HEAP32[2410]|0;
      $105 = $5;
      $106 = HEAP32[$105>>2]|0;
      $107 = $2;
      $108 = $1;
      $109 = ((($108)) + 16|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = ((($110)) + 32|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = (($112) + ($107<<4)|0);
      $114 = ((($113)) + 4|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = $5;
      $117 = ((($116)) + 8|0);
      $118 = $117;
      $119 = $118;
      $120 = HEAP32[$119>>2]|0;
      $121 = (($118) + 4)|0;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      HEAP32[$vararg_buffer>>2] = $106;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $115;
      $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
      HEAP32[$vararg_ptr2>>2] = $120;
      (_fprintf($104,16305,$vararg_buffer)|0);
      $124 = $5;
      $125 = ((($124)) + 8|0);
      $126 = $125;
      $127 = $126;
      $128 = HEAP32[$127>>2]|0;
      $129 = (($126) + 4)|0;
      $130 = $129;
      $131 = HEAP32[$130>>2]|0;
      $132 = $2;
      $133 = $1;
      $134 = ((($133)) + 16|0);
      $135 = HEAP32[$134>>2]|0;
      $136 = ((($135)) + 32|0);
      $137 = HEAP32[$136>>2]|0;
      $138 = (($137) + ($132<<4)|0);
      $139 = ((($138)) + 4|0);
      HEAP32[$139>>2] = $128;
     }
    }
   }
  }
  $140 = $2;
  $141 = (($140) + 1)|0;
  $2 = $141;
 }
 if ((label|0) == 11) {
  ___assert_fail((16241|0),(15199|0),1963,(16287|0));
  // unreachable;
 }
 else if ((label|0) == 14) {
  STACKTOP = sp;return;
 }
}
function _get_int_threadid() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp + 12|0;
 $4 = (_pthread_self()|0);
 HEAP32[$0>>2] = $4;
 $1 = $0;
 $3 = 0;
 $2 = 0;
 while(1) {
  $5 = $2;
  $6 = ($5>>>0)<(4);
  $7 = $3;
  if (!($6)) {
   break;
  }
  $8 = $7 << 5;
  $9 = $3;
  $10 = (($8) - ($9))|0;
  $11 = $2;
  $12 = $1;
  $13 = (($12) + ($11)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = (($10) + ($15))|0;
  $3 = $16;
  $17 = $2;
  $18 = (($17) + 1)|0;
  $2 = $18;
 }
 STACKTOP = sp;return ($7|0);
}
function _refs_create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = (_calloc(1,64)|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $5 = (_string_pool_create(8192)|0);
 $6 = $1;
 HEAP32[$6>>2] = $5;
 $7 = ($5|0)!=(0|0);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 8|0);
  HEAP32[$9>>2] = 0;
  $10 = $1;
  $11 = ((($10)) + 24|0);
  HEAP32[$11>>2] = 1;
  $12 = $1;
  $13 = ((($12)) + 56|0);
  HEAP32[$13>>2] = 0;
  $14 = $1;
  $15 = ((($14)) + 60|0);
  HEAP32[$15>>2] = -1;
  $16 = (_kh_init_refs()|0);
  $17 = $1;
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = $16;
  $19 = ($16|0)!=(0|0);
  if ($19) {
   $20 = $1;
   $21 = ((($20)) + 28|0);
   (_pthread_mutex_init(($21|0),(0|0))|0);
   $22 = $1;
   $0 = $22;
   $24 = $0;
   STACKTOP = sp;return ($24|0);
  }
 }
 $23 = $1;
 _refs_free($23);
 $0 = 0;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _kh_init_refs() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,28)|0);
 return ($0|0);
}
function _cram_load_reference($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = $4;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $9 = ((($8)) + 48|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $4;
  $12 = $3;
  $13 = ((($12)) + 284|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $3;
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(114);
   $21 = $19;
  } else {
   $21 = 0;
  }
  $20 = $21 ^ 1;
  $22 = $20&1;
  $23 = (_refs_load_fai($10,$11,$22)|0);
  $24 = $3;
  $25 = ((($24)) + 48|0);
  HEAP32[$25>>2] = $23;
  $26 = $3;
  $27 = ((($26)) + 48|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0|0);
  if ($29) {
   $30 = $3;
   $31 = ((($30)) + 48|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 16|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $34;
  } else {
   $35 = 0;
  }
  $4 = $35;
  $36 = $4;
  $37 = ($36|0)!=(0|0);
  if (!($37)) {
   $5 = -1;
  }
  $38 = $3;
  _sanitise_SQ_lines($38);
 }
 $39 = $4;
 $40 = $3;
 $41 = ((($40)) + 72|0);
 HEAP32[$41>>2] = $39;
 $42 = $3;
 $43 = ((($42)) + 48|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)!=(0|0);
 if ($45) {
  $46 = $3;
  $47 = ((($46)) + 48|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($48)) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)!=(0);
  $52 = $4;
  $53 = ($52|0)!=(0|0);
  $or$cond = $51 | $53;
  if (!($or$cond)) {
   label = 11;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $54 = $3;
  $55 = ((($54)) + 16|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)!=(0|0);
  if ($57) {
   $58 = $3;
   $59 = ((($58)) + 48|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)!=(0|0);
   if ($61) {
    $62 = $3;
    $63 = ((($62)) + 48|0);
    $64 = HEAP32[$63>>2]|0;
    _refs_free($64);
   }
   $65 = (_refs_create()|0);
   $66 = $3;
   $67 = ((($66)) + 48|0);
   HEAP32[$67>>2] = $65;
   $68 = ($65|0)!=(0|0);
   if (!($68)) {
    $2 = -1;
    $91 = $2;
    STACKTOP = sp;return ($91|0);
   }
   $69 = $3;
   $70 = ((($69)) + 48|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $3;
   $73 = $3;
   $74 = ((($73)) + 16|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (_refs_from_header($71,$72,$75)|0);
   $77 = (-1)==($76|0);
   if ($77) {
    $2 = -1;
    $91 = $2;
    STACKTOP = sp;return ($91|0);
   }
  }
 }
 $78 = $3;
 $79 = ((($78)) + 16|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($80|0)!=(0|0);
 if ($81) {
  $82 = $3;
  $83 = ((($82)) + 48|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $3;
  $86 = ((($85)) + 16|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (_refs2id($84,$87)|0);
  $89 = (-1)==($88|0);
  if ($89) {
   $2 = -1;
   $91 = $2;
   STACKTOP = sp;return ($91|0);
  }
 }
 $90 = $5;
 $2 = $90;
 $91 = $2;
 STACKTOP = sp;return ($91|0);
}
function _kh_destroy_m_s2i($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _cram_free_container($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 344|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $1;
  $11 = ((($10)) + 344|0);
  $12 = HEAP32[$11>>2]|0;
  _free($12);
 }
 $13 = $1;
 $14 = ((($13)) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $1;
  $18 = ((($17)) + 44|0);
  $19 = HEAP32[$18>>2]|0;
  _free($19);
 }
 $20 = $1;
 $21 = ((($20)) + 52|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $1;
  $25 = ((($24)) + 52|0);
  $26 = HEAP32[$25>>2]|0;
  _cram_free_compression_header($26);
 }
 $27 = $1;
 $28 = ((($27)) + 56|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  $31 = $1;
  $32 = ((($31)) + 56|0);
  $33 = HEAP32[$32>>2]|0;
  _cram_free_block($33);
 }
 $34 = $1;
 $35 = ((($34)) + 96|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0|0);
 if ($37) {
  $3 = 0;
  while(1) {
   $38 = $3;
   $39 = $1;
   $40 = ((($39)) + 60|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($38|0)<($41|0);
   if (!($42)) {
    break;
   }
   $43 = $3;
   $44 = $1;
   $45 = ((($44)) + 96|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + ($43<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)!=(0|0);
   if ($49) {
    $50 = $3;
    $51 = $1;
    $52 = ((($51)) + 96|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (($53) + ($50<<2)|0);
    $55 = HEAP32[$54>>2]|0;
    _cram_free_slice($55);
   }
   $56 = $3;
   $57 = (($56) + 1)|0;
   $3 = $57;
  }
  $58 = $1;
  $59 = ((($58)) + 96|0);
  $60 = HEAP32[$59>>2]|0;
  _free($60);
 }
 $2 = 11;
 while(1) {
  $61 = $2;
  $62 = ($61>>>0)<(39);
  if (!($62)) {
   break;
  }
  $63 = $2;
  $64 = $1;
  $65 = ((($64)) + 152|0);
  $66 = (($65) + ($63<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($67|0)!=(0|0);
  if ($68) {
   $69 = $2;
   $70 = $1;
   $71 = ((($70)) + 152|0);
   $72 = (($71) + ($69<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   _cram_stats_free($73);
  }
  $74 = $2;
  $75 = (($74) + 1)|0;
  $2 = $75;
 }
 $76 = $1;
 $77 = ((($76)) + 340|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($78|0)!=(0|0);
 if ($79) {
  $80 = $1;
  $81 = ((($80)) + 340|0);
  $82 = HEAP32[$81>>2]|0;
  _kh_destroy_s_i2i($82);
 }
 $83 = $1;
 _free($83);
 STACKTOP = sp;return;
}
function _cram_free_compression_header($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $7 = $1;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  _free($13);
 }
 $14 = $1;
 $15 = ((($14)) + 88|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $1;
  $19 = ((($18)) + 88|0);
  $20 = HEAP32[$19>>2]|0;
  _kh_destroy_map($20);
 }
 $2 = 0;
 while(1) {
  $21 = $2;
  $22 = ($21|0)<(32);
  if (!($22)) {
   break;
  }
  $23 = $2;
  $24 = $1;
  $25 = ((($24)) + 92|0);
  $26 = (($25) + ($23<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $3 = $27;
  while(1) {
   $28 = $3;
   $29 = ($28|0)!=(0|0);
   if (!($29)) {
    break;
   }
   $30 = $3;
   $31 = ((($30)) + 20|0);
   $32 = HEAP32[$31>>2]|0;
   $4 = $32;
   $33 = $3;
   $34 = ((($33)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)!=(0|0);
   if ($36) {
    $37 = $3;
    $38 = ((($37)) + 16|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ((($39)) + 8|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $3;
    $43 = ((($42)) + 16|0);
    $44 = HEAP32[$43>>2]|0;
    FUNCTION_TABLE_vi[$41 & 127]($44);
   }
   $45 = $3;
   _free($45);
   $46 = $4;
   $3 = $46;
  }
  $47 = $2;
  $48 = (($47) + 1)|0;
  $2 = $48;
 }
 $2 = 0;
 while(1) {
  $49 = $2;
  $50 = ($49|0)<(32);
  if (!($50)) {
   break;
  }
  $51 = $2;
  $52 = $1;
  $53 = ((($52)) + 220|0);
  $54 = (($53) + ($51<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $5 = $55;
  while(1) {
   $56 = $5;
   $57 = ($56|0)!=(0|0);
   if (!($57)) {
    break;
   }
   $58 = $5;
   $59 = ((($58)) + 20|0);
   $60 = HEAP32[$59>>2]|0;
   $6 = $60;
   $61 = $5;
   $62 = ((($61)) + 16|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)!=(0|0);
   if ($64) {
    $65 = $5;
    $66 = ((($65)) + 16|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ((($67)) + 8|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $5;
    $71 = ((($70)) + 16|0);
    $72 = HEAP32[$71>>2]|0;
    FUNCTION_TABLE_vi[$69 & 127]($72);
   }
   $73 = $5;
   _free($73);
   $74 = $6;
   $5 = $74;
  }
  $75 = $2;
  $76 = (($75) + 1)|0;
  $2 = $76;
 }
 $2 = 0;
 while(1) {
  $77 = $2;
  $78 = ($77|0)<(47);
  if (!($78)) {
   break;
  }
  $79 = $2;
  $80 = $1;
  $81 = ((($80)) + 348|0);
  $82 = (($81) + ($79<<2)|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83|0)!=(0|0);
  if ($84) {
   $85 = $2;
   $86 = $1;
   $87 = ((($86)) + 348|0);
   $88 = (($87) + ($85<<2)|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ((($89)) + 8|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $2;
   $93 = $1;
   $94 = ((($93)) + 348|0);
   $95 = (($94) + ($92<<2)|0);
   $96 = HEAP32[$95>>2]|0;
   FUNCTION_TABLE_vi[$91 & 127]($96);
  }
  $97 = $2;
  $98 = (($97) + 1)|0;
  $2 = $98;
 }
 $99 = $1;
 $100 = ((($99)) + 76|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = ($101|0)!=(0|0);
 if ($102) {
  $103 = $1;
  $104 = ((($103)) + 76|0);
  $105 = HEAP32[$104>>2]|0;
  _free($105);
 }
 $106 = $1;
 $107 = ((($106)) + 68|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ($108|0)!=(0|0);
 if ($109) {
  $110 = $1;
  $111 = ((($110)) + 68|0);
  $112 = HEAP32[$111>>2]|0;
  _cram_free_block($112);
 }
 $113 = $1;
 $114 = ((($113)) + 80|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = ($115|0)!=(0|0);
 if ($116) {
  $117 = $1;
  $118 = ((($117)) + 80|0);
  $119 = HEAP32[$118>>2]|0;
  _kh_destroy_m_s2i($119);
 }
 $120 = $1;
 $121 = ((($120)) + 84|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ($122|0)!=(0|0);
 if (!($123)) {
  $127 = $1;
  _free($127);
  STACKTOP = sp;return;
 }
 $124 = $1;
 $125 = ((($124)) + 84|0);
 $126 = HEAP32[$125>>2]|0;
 _string_pool_destroy($126);
 $127 = $1;
 _free($127);
 STACKTOP = sp;return;
}
function _cram_free_slice($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $1;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  _cram_free_block($11);
 }
 $12 = $1;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $1;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  L9: do {
   if ($18) {
    $2 = 0;
    while(1) {
     $19 = $2;
     $20 = $1;
     $21 = HEAP32[$20>>2]|0;
     $22 = ((($21)) + 32|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($19|0)<($23|0);
     if (!($24)) {
      break L9;
     }
     $25 = $2;
     $26 = $1;
     $27 = ((($26)) + 8|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (($28) + ($25<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     _cram_free_block($30);
     $31 = $2;
     $32 = (($31) + 1)|0;
     $2 = $32;
    }
   }
  } while(0);
  $33 = $1;
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  _free($35);
 }
 $36 = $1;
 $37 = ((($36)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $40 = $1;
  $41 = ((($40)) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  _free($42);
 }
 $43 = $1;
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)!=(0|0);
 if ($45) {
  $46 = $1;
  $47 = HEAP32[$46>>2]|0;
  _cram_free_slice_header($47);
 }
 $48 = $1;
 $49 = ((($48)) + 68|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)!=(0|0);
 if ($51) {
  $52 = $1;
  $53 = ((($52)) + 68|0);
  $54 = HEAP32[$53>>2]|0;
  _cram_free_block($54);
 }
 $55 = $1;
 $56 = ((($55)) + 72|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)!=(0|0);
 if ($58) {
  $59 = $1;
  $60 = ((($59)) + 72|0);
  $61 = HEAP32[$60>>2]|0;
  _cram_free_block($61);
 }
 $62 = $1;
 $63 = ((($62)) + 64|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)!=(0|0);
 if ($65) {
  $66 = $1;
  $67 = ((($66)) + 64|0);
  $68 = HEAP32[$67>>2]|0;
  _cram_free_block($68);
 }
 $69 = $1;
 $70 = ((($69)) + 84|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)!=(0|0);
 if ($72) {
  $73 = $1;
  $74 = ((($73)) + 84|0);
  $75 = HEAP32[$74>>2]|0;
  _cram_free_block($75);
 }
 $76 = $1;
 $77 = ((($76)) + 88|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($78|0)!=(0|0);
 if ($79) {
  $80 = $1;
  $81 = ((($80)) + 88|0);
  $82 = HEAP32[$81>>2]|0;
  _cram_free_block($82);
 }
 $83 = $1;
 $84 = ((($83)) + 92|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($85|0)!=(0|0);
 if ($86) {
  $87 = $1;
  $88 = ((($87)) + 92|0);
  $89 = HEAP32[$88>>2]|0;
  _cram_free_block($89);
 }
 $90 = $1;
 $91 = ((($90)) + 104|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($92|0)!=(0|0);
 if ($93) {
  $94 = $1;
  $95 = ((($94)) + 104|0);
  $96 = HEAP32[$95>>2]|0;
  _cram_free_block($96);
 }
 $97 = $1;
 $98 = ((($97)) + 108|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ($99|0)!=(0|0);
 if ($100) {
  $101 = $1;
  $102 = ((($101)) + 108|0);
  $103 = HEAP32[$102>>2]|0;
  _cram_free_block($103);
 }
 $104 = $1;
 $105 = ((($104)) + 112|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ($106|0)!=(0|0);
 if ($107) {
  $108 = $1;
  $109 = ((($108)) + 112|0);
  $110 = HEAP32[$109>>2]|0;
  _cram_free_block($110);
 }
 $111 = $1;
 $112 = ((($111)) + 116|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = ($113|0)!=(0|0);
 if ($114) {
  $115 = $1;
  $116 = ((($115)) + 116|0);
  $117 = HEAP32[$116>>2]|0;
  _cram_free_block($117);
 }
 $118 = $1;
 $119 = ((($118)) + 76|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = ($120|0)!=(0|0);
 if ($121) {
  $122 = $1;
  $123 = ((($122)) + 76|0);
  $124 = HEAP32[$123>>2]|0;
  _cram_free_block($124);
 }
 $125 = $1;
 $126 = ((($125)) + 80|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($127|0)!=(0|0);
 if ($128) {
  $129 = $1;
  $130 = ((($129)) + 80|0);
  $131 = HEAP32[$130>>2]|0;
  _cram_free_block($131);
 }
 $132 = $1;
 $133 = ((($132)) + 28|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = ($134|0)!=(0|0);
 if ($135) {
  $136 = $1;
  $137 = ((($136)) + 28|0);
  $138 = HEAP32[$137>>2]|0;
  _free($138);
 }
 $139 = $1;
 $140 = ((($139)) + 24|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = ($141|0)!=(0|0);
 if ($142) {
  $143 = $1;
  $144 = ((($143)) + 24|0);
  $145 = HEAP32[$144>>2]|0;
  _free($145);
 }
 $146 = $1;
 $147 = ((($146)) + 40|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = ($148|0)!=(0|0);
 if ($149) {
  $150 = $1;
  $151 = ((($150)) + 40|0);
  $152 = HEAP32[$151>>2]|0;
  _free($152);
 }
 $153 = $1;
 $154 = ((($153)) + 52|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = ($155|0)!=(0|0);
 if ($156) {
  $157 = $1;
  $158 = ((($157)) + 52|0);
  $159 = HEAP32[$158>>2]|0;
  _free($159);
 }
 $160 = $1;
 $161 = ((($160)) + 120|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = ($162|0)!=(0|0);
 if ($163) {
  $164 = $1;
  $165 = ((($164)) + 120|0);
  $166 = HEAP32[$165>>2]|0;
  _string_pool_destroy($166);
 }
 $167 = $1;
 $168 = ((($167)) + 124|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = ($169|0)!=(0|0);
 if ($170) {
  $171 = $1;
  $172 = ((($171)) + 124|0);
  $173 = HEAP32[$172>>2]|0;
  _kh_destroy_m_s2i($173);
 }
 $174 = $1;
 $175 = ((($174)) + 124|0);
 $176 = ((($175)) + 4|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = ($177|0)!=(0|0);
 if ($178) {
  $179 = $1;
  $180 = ((($179)) + 124|0);
  $181 = ((($180)) + 4|0);
  $182 = HEAP32[$181>>2]|0;
  _kh_destroy_m_s2i($182);
 }
 $183 = $1;
 _free($183);
 STACKTOP = sp;return;
}
function _kh_destroy_s_i2i($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _cram_free_slice_header($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 40|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
 }
 $11 = $1;
 _free($11);
 STACKTOP = sp;return;
}
function _kh_destroy_map($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _cram_read_container($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $vararg_buffer = sp + 352|0;
 $3 = sp;
 $8 = sp + 364|0;
 $9 = sp + 360|0;
 $10 = sp + 356|0;
 $2 = $0;
 $7 = 0;
 HEAP32[$8>>2] = 0;
 $11 = $2;
 $12 = ((($11)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = $2;
 $14 = ((($13)) + 34644|0);
 HEAP32[$14>>2] = 0;
 _memset(($3|0),0,352)|0;
 $15 = $2;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 >> 8;
 $19 = ($18|0)==(1);
 $20 = $2;
 do {
  if ($19) {
   $21 = (_itf8_decode_crc($20,$3,$8)|0);
   $6 = $21;
   $22 = ($21|0)==(-1);
   if (!($22)) {
    $30 = $6;
    $31 = $7;
    $32 = (($31) + ($30))|0;
    $7 = $32;
    break;
   }
   $23 = $2;
   $24 = ((($23)) + 34660|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)!=(0);
   $27 = $26 ? 1 : 2;
   $28 = $2;
   $29 = ((($28)) + 34644|0);
   HEAP32[$29>>2] = $27;
   $1 = 0;
   $248 = $1;
   STACKTOP = sp;return ($248|0);
  } else {
   $33 = (_int32_decode($20,$3)|0);
   $6 = $33;
   $34 = ($33|0)==(-1);
   if (!($34)) {
    $54 = $6;
    $55 = $7;
    $56 = (($55) + ($54))|0;
    $7 = $56;
    $57 = HEAP32[$3>>2]|0;
    HEAP32[$9>>2] = $57;
    $58 = (_crc32(0,$9,4)|0);
    HEAP32[$8>>2] = $58;
    break;
   }
   $35 = $2;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $37 >> 8;
   $39 = ($38|0)==(2);
   if ($39) {
    $40 = $2;
    $41 = ((($40)) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $42 & 255;
    $44 = ($43|0)==(0);
    if ($44) {
     $45 = $2;
     $46 = ((($45)) + 34644|0);
     HEAP32[$46>>2] = 1;
    } else {
     label = 9;
    }
   } else {
    label = 9;
   }
   if ((label|0) == 9) {
    $47 = $2;
    $48 = ((($47)) + 34660|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)!=(0);
    $51 = $50 ? 1 : 2;
    $52 = $2;
    $53 = ((($52)) + 34644|0);
    HEAP32[$53>>2] = $51;
   }
   $1 = 0;
   $248 = $1;
   STACKTOP = sp;return ($248|0);
  }
 } while(0);
 $59 = $2;
 $60 = ((($3)) + 4|0);
 $61 = (_itf8_decode_crc($59,$60,$8)|0);
 $6 = $61;
 $62 = ($61|0)==(-1);
 if ($62) {
  $1 = 0;
  $248 = $1;
  STACKTOP = sp;return ($248|0);
 }
 $63 = $6;
 $64 = $7;
 $65 = (($64) + ($63))|0;
 $7 = $65;
 $66 = $2;
 $67 = ((($3)) + 8|0);
 $68 = (_itf8_decode_crc($66,$67,$8)|0);
 $6 = $68;
 $69 = ($68|0)==(-1);
 if ($69) {
  $1 = 0;
  $248 = $1;
  STACKTOP = sp;return ($248|0);
 }
 $70 = $6;
 $71 = $7;
 $72 = (($71) + ($70))|0;
 $7 = $72;
 $73 = $2;
 $74 = ((($3)) + 12|0);
 $75 = (_itf8_decode_crc($73,$74,$8)|0);
 $6 = $75;
 $76 = ($75|0)==(-1);
 if ($76) {
  $1 = 0;
  $248 = $1;
  STACKTOP = sp;return ($248|0);
 }
 $77 = $6;
 $78 = $7;
 $79 = (($78) + ($77))|0;
 $7 = $79;
 $80 = $2;
 $81 = ((($3)) + 32|0);
 $82 = (_itf8_decode_crc($80,$81,$8)|0);
 $6 = $82;
 $83 = ($82|0)==(-1);
 if ($83) {
  $1 = 0;
  $248 = $1;
  STACKTOP = sp;return ($248|0);
 }
 $84 = $6;
 $85 = $7;
 $86 = (($85) + ($84))|0;
 $7 = $86;
 $87 = $2;
 $88 = ((($87)) + 8|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $89 >> 8;
 $91 = ($90|0)==(1);
 do {
  if ($91) {
   $92 = ((($3)) + 16|0);
   $93 = $92;
   $94 = $93;
   HEAP32[$94>>2] = 0;
   $95 = (($93) + 4)|0;
   $96 = $95;
   HEAP32[$96>>2] = 0;
   $97 = ((($3)) + 24|0);
   $98 = $97;
   $99 = $98;
   HEAP32[$99>>2] = 0;
   $100 = (($98) + 4)|0;
   $101 = $100;
   HEAP32[$101>>2] = 0;
  } else {
   $102 = $2;
   $103 = ((($102)) + 8|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $104 >> 8;
   $106 = ($105|0)>=(3);
   $107 = $2;
   do {
    if ($106) {
     $108 = ((($3)) + 16|0);
     $109 = (_ltf8_decode_crc($107,$108,$8)|0);
     $6 = $109;
     $110 = ($109|0)==(-1);
     if (!($110)) {
      $111 = $6;
      $112 = $7;
      $113 = (($112) + ($111))|0;
      $7 = $113;
      break;
     }
     $1 = 0;
     $248 = $1;
     STACKTOP = sp;return ($248|0);
    } else {
     $114 = (_itf8_decode_crc($107,$10,$8)|0);
     $6 = $114;
     $115 = ($114|0)==(-1);
     if (!($115)) {
      $116 = $6;
      $117 = $7;
      $118 = (($117) + ($116))|0;
      $7 = $118;
      $119 = HEAP32[$10>>2]|0;
      $120 = ($119|0)<(0);
      $121 = $120 << 31 >> 31;
      $122 = ((($3)) + 16|0);
      $123 = $122;
      $124 = $123;
      HEAP32[$124>>2] = $119;
      $125 = (($123) + 4)|0;
      $126 = $125;
      HEAP32[$126>>2] = $121;
      break;
     }
     $1 = 0;
     $248 = $1;
     STACKTOP = sp;return ($248|0);
    }
   } while(0);
   $127 = $2;
   $128 = ((($3)) + 24|0);
   $129 = (_ltf8_decode_crc($127,$128,$8)|0);
   $6 = $129;
   $130 = ($129|0)==(-1);
   if (!($130)) {
    $131 = $6;
    $132 = $7;
    $133 = (($132) + ($131))|0;
    $7 = $133;
    break;
   }
   $1 = 0;
   $248 = $1;
   STACKTOP = sp;return ($248|0);
  }
 } while(0);
 $134 = $2;
 $135 = ((($3)) + 36|0);
 $136 = (_itf8_decode_crc($134,$135,$8)|0);
 $6 = $136;
 $137 = ($136|0)==(-1);
 if ($137) {
  $1 = 0;
  $248 = $1;
  STACKTOP = sp;return ($248|0);
 }
 $138 = $6;
 $139 = $7;
 $140 = (($139) + ($138))|0;
 $7 = $140;
 $141 = $2;
 $142 = ((($3)) + 40|0);
 $143 = (_itf8_decode_crc($141,$142,$8)|0);
 $6 = $143;
 $144 = ($143|0)==(-1);
 if ($144) {
  $1 = 0;
  $248 = $1;
  STACKTOP = sp;return ($248|0);
 }
 $145 = $6;
 $146 = $7;
 $147 = (($146) + ($145))|0;
 $7 = $147;
 $148 = (_calloc(1,352)|0);
 $4 = $148;
 $149 = ($148|0)!=(0|0);
 if (!($149)) {
  $1 = 0;
  $248 = $1;
  STACKTOP = sp;return ($248|0);
 }
 $150 = $4;
 _memcpy(($150|0),($3|0),352)|0;
 $151 = $4;
 $152 = ((($151)) + 40|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = $153<<2;
 $155 = (_malloc($154)|0);
 $156 = $4;
 $157 = ((($156)) + 44|0);
 HEAP32[$157>>2] = $155;
 $158 = ($155|0)!=(0|0);
 if (!($158)) {
  $159 = $4;
  $160 = ((($159)) + 40|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = ($161|0)!=(0);
  if ($162) {
   $163 = (___errno_location()|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = $2;
   $166 = ((($165)) + 32|0);
   HEAP32[$166>>2] = $164;
   $167 = $4;
   _cram_free_container($167);
   $1 = 0;
   $248 = $1;
   STACKTOP = sp;return ($248|0);
  }
 }
 $5 = 0;
 while(1) {
  $168 = $5;
  $169 = $4;
  $170 = ((($169)) + 40|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = ($168|0)<($171|0);
  $173 = $2;
  if (!($172)) {
   break;
  }
  $174 = $5;
  $175 = $4;
  $176 = ((($175)) + 44|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = (($177) + ($174<<2)|0);
  $179 = (_itf8_decode_crc($173,$178,$8)|0);
  $6 = $179;
  $180 = ($179|0)==(-1);
  if ($180) {
   label = 44;
   break;
  }
  $182 = $6;
  $183 = $7;
  $184 = (($183) + ($182))|0;
  $7 = $184;
  $185 = $5;
  $186 = (($185) + 1)|0;
  $5 = $186;
 }
 if ((label|0) == 44) {
  $181 = $4;
  _cram_free_container($181);
  $1 = 0;
  $248 = $1;
  STACKTOP = sp;return ($248|0);
 }
 $187 = ((($173)) + 8|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = $188 >> 8;
 $190 = ($189|0)>=(3);
 if ($190) {
  $191 = $2;
  $192 = $4;
  $193 = ((($192)) + 348|0);
  $194 = (_int32_decode($191,$193)|0);
  $195 = (-1)==($194|0);
  if ($195) {
   $1 = 0;
   $248 = $1;
   STACKTOP = sp;return ($248|0);
  }
  $196 = $7;
  $197 = (($196) + 4)|0;
  $7 = $197;
  $198 = HEAP32[$8>>2]|0;
  $199 = $4;
  $200 = ((($199)) + 348|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = ($198|0)!=($201|0);
  if ($202) {
   $203 = HEAP32[2410]|0;
   (_fprintf($203,16422,$vararg_buffer)|0);
   $204 = $4;
   _cram_free_container($204);
   $1 = 0;
   $248 = $1;
   STACKTOP = sp;return ($248|0);
  }
 }
 $205 = $7;
 $206 = $4;
 $207 = ((($206)) + 48|0);
 HEAP32[$207>>2] = $205;
 $208 = $4;
 $209 = ((($208)) + 96|0);
 HEAP32[$209>>2] = 0;
 $210 = $4;
 $211 = ((($210)) + 64|0);
 HEAP32[$211>>2] = 0;
 $212 = $4;
 $213 = ((($212)) + 40|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = $4;
 $216 = ((($215)) + 60|0);
 HEAP32[$216>>2] = $214;
 $217 = $4;
 $218 = ((($217)) + 84|0);
 HEAP32[$218>>2] = 0;
 $219 = $4;
 $220 = ((($219)) + 72|0);
 HEAP32[$220>>2] = 0;
 $221 = $4;
 $222 = ((($221)) + 68|0);
 HEAP32[$222>>2] = 0;
 $223 = $4;
 $224 = ((($223)) + 4|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = ($225|0)==(-2);
 if ($226) {
  $227 = $4;
  $228 = ((($227)) + 116|0);
  HEAP32[$228>>2] = 1;
  $229 = $2;
  $230 = ((($229)) + 34652|0);
  HEAP32[$230>>2] = 1;
 }
 $231 = $4;
 $232 = ((($231)) + 32|0);
 $233 = HEAP32[$232>>2]|0;
 $234 = ($233|0)==(0);
 if ($234) {
  $235 = $4;
  $236 = ((($235)) + 4|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = ($237|0)==(-1);
  if ($238) {
   $239 = $4;
   $240 = ((($239)) + 8|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = ($241|0)==(4542278);
   $243 = $242;
  } else {
   $243 = 0;
  }
 } else {
  $243 = 0;
 }
 $244 = $243 ? 1 : 0;
 $245 = $2;
 $246 = ((($245)) + 34660|0);
 HEAP32[$246>>2] = $244;
 $247 = $4;
 $1 = $247;
 $248 = $1;
 STACKTOP = sp;return ($248|0);
}
function _cram_read_slice($0) {
 $0 = $0|0;
 var $$off = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $9 = $2;
 $10 = (_cram_read_block($9)|0);
 $3 = $10;
 $11 = (_calloc(1,148)|0);
 $4 = $11;
 $12 = $3;
 $13 = ($12|0)!=(0|0);
 $14 = $4;
 $15 = ($14|0)!=(0|0);
 $or$cond = $13 & $15;
 L1: do {
  if ($or$cond) {
   $16 = $3;
   $17 = $4;
   $18 = ((($17)) + 4|0);
   HEAP32[$18>>2] = $16;
   $19 = $3;
   $20 = ((($19)) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $$off = (($21) + -2)|0;
   $switch = ($$off>>>0)<(2);
   if (!($switch)) {
    $27 = HEAP32[2410]|0;
    $28 = $3;
    $29 = ((($28)) + 8|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (_cram_content_type2str($30)|0);
    HEAP32[$vararg_buffer>>2] = $31;
    (_fprintf($27,16454,$vararg_buffer)|0);
    break;
   }
   $22 = $2;
   $23 = $3;
   $24 = (_cram_decode_slice_header($22,$23)|0);
   $25 = $4;
   HEAP32[$25>>2] = $24;
   $26 = ($24|0)!=(0|0);
   if ($26) {
    $32 = $4;
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($33)) + 32|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)<(1);
    if ($36) {
     $37 = HEAP32[2410]|0;
     (_fprintf($37,16483,$vararg_buffer4)|0);
     break;
    }
    $38 = $4;
    $39 = HEAP32[$38>>2]|0;
    $40 = ((($39)) + 32|0);
    $41 = HEAP32[$40>>2]|0;
    $6 = $41;
    $42 = (_calloc($41,4)|0);
    $43 = $4;
    $44 = ((($43)) + 8|0);
    HEAP32[$44>>2] = $42;
    $45 = $4;
    $46 = ((($45)) + 8|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)!=(0|0);
    if ($48) {
     $5 = 0;
     $7 = 0;
     $8 = 2147483647;
     while(1) {
      $49 = $5;
      $50 = $6;
      $51 = ($49|0)<($50|0);
      if (!($51)) {
       break;
      }
      $52 = $2;
      $53 = (_cram_read_block($52)|0);
      $54 = $5;
      $55 = $4;
      $56 = ((($55)) + 8|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = (($57) + ($54<<2)|0);
      HEAP32[$58>>2] = $53;
      $59 = ($53|0)!=(0|0);
      if (!($59)) {
       break L1;
      }
      $60 = $5;
      $61 = $4;
      $62 = ((($61)) + 8|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = (($63) + ($60<<2)|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ((($65)) + 8|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(4);
      if ($68) {
       $69 = $7;
       $70 = $5;
       $71 = $4;
       $72 = ((($71)) + 8|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = (($73) + ($70<<2)|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = ((($75)) + 12|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = ($69|0)<($77|0);
       if ($78) {
        $79 = $5;
        $80 = $4;
        $81 = ((($80)) + 8|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = (($82) + ($79<<2)|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = ((($84)) + 12|0);
        $86 = HEAP32[$85>>2]|0;
        $7 = $86;
       }
       $87 = $8;
       $88 = $5;
       $89 = $4;
       $90 = ((($89)) + 8|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = (($91) + ($88<<2)|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = ((($93)) + 12|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = ($87|0)>($95|0);
       if ($96) {
        $97 = $5;
        $98 = $4;
        $99 = ((($98)) + 8|0);
        $100 = HEAP32[$99>>2]|0;
        $101 = (($100) + ($97<<2)|0);
        $102 = HEAP32[$101>>2]|0;
        $103 = ((($102)) + 12|0);
        $104 = HEAP32[$103>>2]|0;
        $8 = $104;
       }
      }
      $105 = $5;
      $106 = (($105) + 1)|0;
      $5 = $106;
     }
     $107 = $8;
     $108 = ($107|0)>=(0);
     $109 = $7;
     $110 = ($109|0)<(1024);
     $or$cond3 = $108 & $110;
     L23: do {
      if ($or$cond3) {
       $111 = (_calloc(1024,4)|0);
       $112 = $4;
       $113 = ((($112)) + 12|0);
       HEAP32[$113>>2] = $111;
       $114 = ($111|0)!=(0|0);
       if (!($114)) {
        break L1;
       }
       $5 = 0;
       while(1) {
        $115 = $5;
        $116 = $6;
        $117 = ($115|0)<($116|0);
        if (!($117)) {
         break L23;
        }
        $118 = $5;
        $119 = $4;
        $120 = ((($119)) + 8|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = (($121) + ($118<<2)|0);
        $123 = HEAP32[$122>>2]|0;
        $124 = ((($123)) + 8|0);
        $125 = HEAP32[$124>>2]|0;
        $126 = ($125|0)!=(4);
        if (!($126)) {
         $127 = $5;
         $128 = $4;
         $129 = ((($128)) + 8|0);
         $130 = HEAP32[$129>>2]|0;
         $131 = (($130) + ($127<<2)|0);
         $132 = HEAP32[$131>>2]|0;
         $133 = $5;
         $134 = $4;
         $135 = ((($134)) + 8|0);
         $136 = HEAP32[$135>>2]|0;
         $137 = (($136) + ($133<<2)|0);
         $138 = HEAP32[$137>>2]|0;
         $139 = ((($138)) + 12|0);
         $140 = HEAP32[$139>>2]|0;
         $141 = $4;
         $142 = ((($141)) + 12|0);
         $143 = HEAP32[$142>>2]|0;
         $144 = (($143) + ($140<<2)|0);
         HEAP32[$144>>2] = $132;
        }
        $145 = $5;
        $146 = (($145) + 1)|0;
        $5 = $146;
       }
      }
     } while(0);
     $147 = $4;
     $148 = ((($147)) + 28|0);
     HEAP32[$148>>2] = 0;
     $149 = $4;
     $150 = ((($149)) + 32|0);
     HEAP32[$150>>2] = 0;
     $151 = $4;
     $152 = ((($151)) + 36|0);
     HEAP32[$152>>2] = 0;
     $153 = (_cram_new_block(4,0)|0);
     $154 = $4;
     $155 = ((($154)) + 68|0);
     HEAP32[$155>>2] = $153;
     $156 = ($153|0)!=(0|0);
     if ($156) {
      $157 = (_cram_new_block(4,12)|0);
      $158 = $4;
      $159 = ((($158)) + 72|0);
      HEAP32[$159>>2] = $157;
      $160 = ($157|0)!=(0|0);
      if ($160) {
       $161 = (_cram_new_block(4,11)|0);
       $162 = $4;
       $163 = ((($162)) + 64|0);
       HEAP32[$163>>2] = $161;
       $164 = ($161|0)!=(0|0);
       if ($164) {
        $165 = (_cram_new_block(4,1)|0);
        $166 = $4;
        $167 = ((($166)) + 84|0);
        HEAP32[$167>>2] = $165;
        $168 = ($165|0)!=(0|0);
        if ($168) {
         $169 = (_cram_new_block(4,13)|0);
         $170 = $4;
         $171 = ((($170)) + 76|0);
         HEAP32[$171>>2] = $169;
         $172 = ($169|0)!=(0|0);
         if ($172) {
          $173 = (_cram_new_block(4,14)|0);
          $174 = $4;
          $175 = ((($174)) + 80|0);
          HEAP32[$175>>2] = $173;
          $176 = ($173|0)!=(0|0);
          if ($176) {
           $177 = $4;
           $178 = ((($177)) + 24|0);
           HEAP32[$178>>2] = 0;
           $179 = $4;
           $180 = HEAP32[$179>>2]|0;
           $181 = ((($180)) + 8|0);
           $182 = HEAP32[$181>>2]|0;
           $183 = $4;
           $184 = ((($183)) + 16|0);
           HEAP32[$184>>2] = $182;
           $185 = $4;
           $1 = $185;
           $194 = $1;
           STACKTOP = sp;return ($194|0);
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $186 = $3;
 $187 = ($186|0)!=(0|0);
 if ($187) {
  $188 = $3;
  _cram_free_block($188);
 }
 $189 = $4;
 $190 = ($189|0)!=(0|0);
 if ($190) {
  $191 = $4;
  $192 = ((($191)) + 4|0);
  HEAP32[$192>>2] = 0;
  $193 = $4;
  _cram_free_slice($193);
 }
 $1 = 0;
 $194 = $1;
 STACKTOP = sp;return ($194|0);
}
function _cram_read_file_def($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $4 = (_malloc(26)|0);
 $3 = $4;
 $5 = $3;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $1 = 0;
  $37 = $1;
  STACKTOP = sp;return ($37|0);
 }
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $10 = (_hread($8,$9,26)|0);
 $11 = (26)!=($10|0);
 $12 = $3;
 if ($11) {
  _free($12);
  $1 = 0;
  $37 = $1;
  STACKTOP = sp;return ($37|0);
 }
 $13 = (_memcmp($12,16966,4)|0);
 $14 = ($13|0)!=(0);
 $15 = $3;
 if ($14) {
  _free($15);
  $1 = 0;
  $37 = $1;
  STACKTOP = sp;return ($37|0);
 }
 $16 = ((($15)) + 4|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)>(3);
 if ($19) {
  $20 = HEAP32[2410]|0;
  $21 = $3;
  $22 = ((($21)) + 4|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $3;
  $26 = ((($25)) + 5|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  HEAP32[$vararg_buffer>>2] = $24;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $28;
  (_fprintf($20,16524,$vararg_buffer)|0);
  $29 = $3;
  _free($29);
  $1 = 0;
  $37 = $1;
  STACKTOP = sp;return ($37|0);
 } else {
  $30 = $2;
  $31 = ((($30)) + 34640|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 26)|0;
  HEAP32[$31>>2] = $33;
  $34 = $2;
  $35 = ((($34)) + 34648|0);
  HEAP32[$35>>2] = 0;
  $36 = $3;
  $1 = $36;
  $37 = $1;
  STACKTOP = sp;return ($37|0);
 }
 return (0)|0;
}
function _cram_read_SAM_hdr($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 28|0;
 $2 = $0;
 $11 = $2;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 >> 8;
 $15 = ($14|0)==(1);
 $16 = $2;
 do {
  if ($15) {
   $17 = (_int32_decode($16,$3)|0);
   $18 = (-1)==($17|0);
   if ($18) {
    $1 = 0;
    $308 = $1;
    STACKTOP = sp;return ($308|0);
   }
   $19 = HEAP32[$3>>2]|0;
   $20 = ($19|0)<(0);
   if (!($20)) {
    $21 = HEAP32[$3>>2]|0;
    $22 = (($21) + 1)|0;
    $23 = (_malloc($22)|0);
    $4 = $23;
    $24 = (0|0)==($23|0);
    if (!($24)) {
     $25 = HEAP32[$3>>2]|0;
     $26 = $2;
     $27 = HEAP32[$26>>2]|0;
     $28 = $4;
     $29 = HEAP32[$3>>2]|0;
     $30 = (_hread($27,$28,$29)|0);
     $31 = ($25|0)!=($30|0);
     if (!($31)) {
      $32 = HEAP32[$3>>2]|0;
      $33 = $4;
      $34 = (($33) + ($32)|0);
      HEAP8[$34>>0] = 0;
      $35 = HEAP32[$3>>2]|0;
      $36 = (4 + ($35))|0;
      $37 = $2;
      $38 = ((($37)) + 34640|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = (($39) + ($36))|0;
      HEAP32[$38>>2] = $40;
      break;
     }
     $1 = 0;
     $308 = $1;
     STACKTOP = sp;return ($308|0);
    }
   }
   $1 = 0;
   $308 = $1;
   STACKTOP = sp;return ($308|0);
  } else {
   $41 = (_cram_read_container($16)|0);
   $6 = $41;
   $42 = $6;
   $43 = ($42|0)!=(0|0);
   if (!($43)) {
    $1 = 0;
    $308 = $1;
    STACKTOP = sp;return ($308|0);
   }
   $44 = $6;
   $45 = ((($44)) + 36|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)<(1);
   if ($47) {
    $48 = $6;
    _cram_free_container($48);
    $1 = 0;
    $308 = $1;
    STACKTOP = sp;return ($308|0);
   }
   $49 = $2;
   $50 = (_cram_read_block($49)|0);
   $7 = $50;
   $51 = ($50|0)!=(0|0);
   if (!($51)) {
    $52 = $6;
    _cram_free_container($52);
    $1 = 0;
    $308 = $1;
    STACKTOP = sp;return ($308|0);
   }
   $53 = $7;
   $54 = (_cram_uncompress_block($53)|0);
   $55 = ($54|0)!=(0);
   if ($55) {
    $56 = $6;
    _cram_free_container($56);
    $1 = 0;
    $308 = $1;
    STACKTOP = sp;return ($308|0);
   }
   $57 = $7;
   $58 = ((($57)) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59) + 2)|0;
   $61 = $2;
   $62 = ((($61)) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 >> 8;
   $65 = ($64|0)>=(3);
   $66 = $65&1;
   $67 = $66<<2;
   $68 = (($60) + ($67))|0;
   $69 = $7;
   $70 = ((($69)) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $71 & -128;
   $73 = ($72|0)!=(0);
   if ($73) {
    $74 = $7;
    $75 = ((($74)) + 12|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & -16384;
    $78 = ($77|0)!=(0);
    if ($78) {
     $79 = $7;
     $80 = ((($79)) + 12|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = $81 & -2097152;
     $83 = ($82|0)!=(0);
     if ($83) {
      $84 = $7;
      $85 = ((($84)) + 12|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = $86 & -268435456;
      $88 = ($87|0)!=(0);
      $89 = $88 ^ 1;
      $90 = $89 ? 4 : 5;
      $92 = $90;
     } else {
      $92 = 3;
     }
    } else {
     $92 = 2;
    }
   } else {
    $92 = 1;
   }
   $91 = (($68) + ($92))|0;
   $93 = $7;
   $94 = ((($93)) + 20|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $95 & -128;
   $97 = ($96|0)!=(0);
   if ($97) {
    $98 = $7;
    $99 = ((($98)) + 20|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & -16384;
    $102 = ($101|0)!=(0);
    if ($102) {
     $103 = $7;
     $104 = ((($103)) + 20|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = $105 & -2097152;
     $107 = ($106|0)!=(0);
     if ($107) {
      $108 = $7;
      $109 = ((($108)) + 20|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = $110 & -268435456;
      $112 = ($111|0)!=(0);
      $113 = $112 ^ 1;
      $114 = $113 ? 4 : 5;
      $116 = $114;
     } else {
      $116 = 3;
     }
    } else {
     $116 = 2;
    }
   } else {
    $116 = 1;
   }
   $115 = (($91) + ($116))|0;
   $117 = $7;
   $118 = ((($117)) + 16|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $119 & -128;
   $121 = ($120|0)!=(0);
   if ($121) {
    $122 = $7;
    $123 = ((($122)) + 16|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = $124 & -16384;
    $126 = ($125|0)!=(0);
    if ($126) {
     $127 = $7;
     $128 = ((($127)) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = $129 & -2097152;
     $131 = ($130|0)!=(0);
     if ($131) {
      $132 = $7;
      $133 = ((($132)) + 16|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = $134 & -268435456;
      $136 = ($135|0)!=(0);
      $137 = $136 ^ 1;
      $138 = $137 ? 4 : 5;
      $140 = $138;
     } else {
      $140 = 3;
     }
    } else {
     $140 = 2;
    }
   } else {
    $140 = 1;
   }
   $139 = (($115) + ($140))|0;
   $9 = $139;
   $141 = $7;
   $142 = (_int32_get_blk($141,$3)|0);
   $143 = (-1)==($142|0);
   $144 = HEAP32[$3>>2]|0;
   $145 = ($144|0)<(0);
   $or$cond = $143 | $145;
   if (!($or$cond)) {
    $146 = $7;
    $147 = ((($146)) + 20|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = (($148) - 4)|0;
    $150 = HEAP32[$3>>2]|0;
    $151 = ($149|0)<($150|0);
    if (!($151)) {
     $154 = HEAP32[$3>>2]|0;
     $155 = (($154) + 1)|0;
     $156 = (_malloc($155)|0);
     $4 = $156;
     $157 = (0|0)==($156|0);
     if ($157) {
      $158 = $6;
      _cram_free_container($158);
      $159 = $7;
      _cram_free_block($159);
      $1 = 0;
      $308 = $1;
      STACKTOP = sp;return ($308|0);
     }
     $160 = $4;
     $161 = $7;
     $162 = ((($161)) + 40|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = $7;
     $165 = ((($164)) + 32|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = (($166) + ($163)|0);
     $168 = HEAP32[$3>>2]|0;
     _memcpy(($160|0),($167|0),($168|0))|0;
     $169 = HEAP32[$3>>2]|0;
     $170 = $4;
     $171 = (($170) + ($169)|0);
     HEAP8[$171>>0] = 0;
     $172 = $7;
     _cram_free_block($172);
     $8 = 1;
     while(1) {
      $173 = $8;
      $174 = $6;
      $175 = ((($174)) + 36|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($173|0)<($176|0);
      if (!($177)) {
       break;
      }
      $178 = $2;
      $179 = (_cram_read_block($178)|0);
      $7 = $179;
      $180 = ($179|0)!=(0|0);
      if (!($180)) {
       label = 38;
       break;
      }
      $182 = $7;
      $183 = ((($182)) + 16|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = (($184) + 2)|0;
      $186 = $2;
      $187 = ((($186)) + 8|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = $188 >> 8;
      $190 = ($189|0)>=(3);
      $191 = $190&1;
      $192 = $191<<2;
      $193 = (($185) + ($192))|0;
      $194 = $7;
      $195 = ((($194)) + 12|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = $196 & -128;
      $198 = ($197|0)!=(0);
      if ($198) {
       $199 = $7;
       $200 = ((($199)) + 12|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = $201 & -16384;
       $203 = ($202|0)!=(0);
       if ($203) {
        $204 = $7;
        $205 = ((($204)) + 12|0);
        $206 = HEAP32[$205>>2]|0;
        $207 = $206 & -2097152;
        $208 = ($207|0)!=(0);
        if ($208) {
         $209 = $7;
         $210 = ((($209)) + 12|0);
         $211 = HEAP32[$210>>2]|0;
         $212 = $211 & -268435456;
         $213 = ($212|0)!=(0);
         $214 = $213 ^ 1;
         $215 = $214 ? 4 : 5;
         $217 = $215;
        } else {
         $217 = 3;
        }
       } else {
        $217 = 2;
       }
      } else {
       $217 = 1;
      }
      $216 = (($193) + ($217))|0;
      $218 = $7;
      $219 = ((($218)) + 20|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 & -128;
      $222 = ($221|0)!=(0);
      do {
       if ($222) {
        $223 = $7;
        $224 = ((($223)) + 20|0);
        $225 = HEAP32[$224>>2]|0;
        $226 = $225 & -16384;
        $227 = ($226|0)!=(0);
        if ($227) {
         $228 = $7;
         $229 = ((($228)) + 20|0);
         $230 = HEAP32[$229>>2]|0;
         $231 = $230 & -2097152;
         $232 = ($231|0)!=(0);
         if (!($232)) {
          $241 = 3;
          break;
         }
         $233 = $7;
         $234 = ((($233)) + 20|0);
         $235 = HEAP32[$234>>2]|0;
         $236 = $235 & -268435456;
         $237 = ($236|0)!=(0);
         $238 = $237 ^ 1;
         $239 = $238 ? 4 : 5;
         $241 = $239;
        } else {
         $241 = 2;
        }
       } else {
        $241 = 1;
       }
      } while(0);
      $240 = (($216) + ($241))|0;
      $242 = $7;
      $243 = ((($242)) + 16|0);
      $244 = HEAP32[$243>>2]|0;
      $245 = $244 & -128;
      $246 = ($245|0)!=(0);
      do {
       if ($246) {
        $247 = $7;
        $248 = ((($247)) + 16|0);
        $249 = HEAP32[$248>>2]|0;
        $250 = $249 & -16384;
        $251 = ($250|0)!=(0);
        if (!($251)) {
         $265 = 2;
         break;
        }
        $252 = $7;
        $253 = ((($252)) + 16|0);
        $254 = HEAP32[$253>>2]|0;
        $255 = $254 & -2097152;
        $256 = ($255|0)!=(0);
        if (!($256)) {
         $265 = 3;
         break;
        }
        $257 = $7;
        $258 = ((($257)) + 16|0);
        $259 = HEAP32[$258>>2]|0;
        $260 = $259 & -268435456;
        $261 = ($260|0)!=(0);
        $262 = $261 ^ 1;
        $263 = $262 ? 4 : 5;
        $265 = $263;
       } else {
        $265 = 1;
       }
      } while(0);
      $264 = (($240) + ($265))|0;
      $266 = $9;
      $267 = (($266) + ($264))|0;
      $9 = $267;
      $268 = $7;
      _cram_free_block($268);
      $269 = $8;
      $270 = (($269) + 1)|0;
      $8 = $270;
     }
     if ((label|0) == 38) {
      $181 = $6;
      _cram_free_container($181);
      $1 = 0;
      $308 = $1;
      STACKTOP = sp;return ($308|0);
     }
     $271 = $6;
     $272 = HEAP32[$271>>2]|0;
     $273 = ($272|0)>(0);
     $274 = $9;
     $275 = ($274|0)>(0);
     $or$cond3 = $273 & $275;
     do {
      if ($or$cond3) {
       $276 = $6;
       $277 = HEAP32[$276>>2]|0;
       $278 = $9;
       $279 = ($277|0)>($278|0);
       if ($279) {
        $280 = $6;
        $281 = HEAP32[$280>>2]|0;
        $282 = $9;
        $283 = (($281) - ($282))|0;
        $284 = (_malloc($283)|0);
        $10 = $284;
        $285 = $10;
        $286 = ($285|0)!=(0|0);
        $287 = $6;
        if (!($286)) {
         _cram_free_container($287);
         $1 = 0;
         $308 = $1;
         STACKTOP = sp;return ($308|0);
        }
        $288 = HEAP32[$287>>2]|0;
        $289 = $9;
        $290 = (($288) - ($289))|0;
        $291 = $2;
        $292 = HEAP32[$291>>2]|0;
        $293 = $10;
        $294 = $6;
        $295 = HEAP32[$294>>2]|0;
        $296 = $9;
        $297 = (($295) - ($296))|0;
        $298 = (_hread($292,$293,$297)|0);
        $299 = ($290|0)!=($298|0);
        if (!($299)) {
         $301 = $10;
         _free($301);
         break;
        }
        $300 = $6;
        _cram_free_container($300);
        $1 = 0;
        $308 = $1;
        STACKTOP = sp;return ($308|0);
       }
      }
     } while(0);
     $302 = $6;
     _cram_free_container($302);
     break;
    }
   }
   $152 = $6;
   _cram_free_container($152);
   $153 = $7;
   _cram_free_block($153);
   $1 = 0;
   $308 = $1;
   STACKTOP = sp;return ($308|0);
  }
 } while(0);
 $303 = $4;
 $304 = HEAP32[$3>>2]|0;
 $305 = (_sam_hdr_parse_($303,$304)|0);
 $5 = $305;
 $306 = $4;
 _free($306);
 $307 = $5;
 $1 = $307;
 $308 = $1;
 STACKTOP = sp;return ($308|0);
}
function _cram_dopen($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = (_calloc(1,34776)|0);
 $9 = $11;
 $12 = $9;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $3 = 0;
  $222 = $3;
  STACKTOP = sp;return ($222|0);
 }
 $14 = $9;
 $15 = ((($14)) + 76|0);
 HEAP32[$15>>2] = 5;
 $7 = 0;
 while(1) {
  $16 = $7;
  $17 = $6;
  $18 = (($17) + ($16)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = ($19<<24>>24)!=(0);
  if (!($20)) {
   break;
  }
  $21 = $7;
  $22 = $6;
  $23 = (($22) + ($21)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 << 24 >> 24;
  $26 = ($25|0)>=(48);
  if ($26) {
   $27 = $7;
   $28 = $6;
   $29 = (($28) + ($27)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30 << 24 >> 24;
   $32 = ($31|0)<=(57);
   if ($32) {
    label = 7;
    break;
   }
  }
  $41 = $7;
  $42 = (($41) + 1)|0;
  $7 = $42;
 }
 if ((label|0) == 7) {
  $33 = $7;
  $34 = $6;
  $35 = (($34) + ($33)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36 << 24 >> 24;
  $38 = (($37) - 48)|0;
  $39 = $9;
  $40 = ((($39)) + 76|0);
  HEAP32[$40>>2] = $38;
 }
 $43 = $4;
 $44 = $9;
 HEAP32[$44>>2] = $43;
 $45 = $6;
 $46 = HEAP8[$45>>0]|0;
 $47 = $46 << 24 >> 24;
 $48 = $9;
 $49 = ((($48)) + 4|0);
 HEAP32[$49>>2] = $47;
 $50 = $9;
 $51 = ((($50)) + 34640|0);
 HEAP32[$51>>2] = 0;
 $52 = $9;
 $53 = ((($52)) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)==(114);
 do {
  if ($55) {
   $56 = $9;
   $57 = (_cram_read_file_def($56)|0);
   $58 = $9;
   $59 = ((($58)) + 12|0);
   HEAP32[$59>>2] = $57;
   $60 = ($57|0)!=(0|0);
   if ($60) {
    $61 = $9;
    $62 = ((($61)) + 12|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ((($63)) + 4|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65&255;
    $67 = $66<<8;
    $68 = $9;
    $69 = ((($68)) + 12|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ((($70)) + 5|0);
    $72 = HEAP8[$71>>0]|0;
    $73 = $72&255;
    $74 = (($67) + ($73))|0;
    $75 = $9;
    $76 = ((($75)) + 8|0);
    HEAP32[$76>>2] = $74;
    $77 = $9;
    $78 = (_cram_read_SAM_hdr($77)|0);
    $79 = $9;
    $80 = ((($79)) + 16|0);
    HEAP32[$80>>2] = $78;
    $81 = ($78|0)!=(0|0);
    if ($81) {
     label = 15;
    }
   }
  } else {
   $82 = (_calloc(1,26)|0);
   $10 = $82;
   $83 = $10;
   $84 = ($83|0)!=(0|0);
   if ($84) {
    $85 = $10;
    $86 = $9;
    $87 = ((($86)) + 12|0);
    HEAP32[$87>>2] = $85;
    $88 = $10;
    HEAP8[$88>>0] = 67;
    $89 = $10;
    $90 = ((($89)) + 1|0);
    HEAP8[$90>>0] = 82;
    $91 = $10;
    $92 = ((($91)) + 2|0);
    HEAP8[$92>>0] = 65;
    $93 = $10;
    $94 = ((($93)) + 3|0);
    HEAP8[$94>>0] = 77;
    $95 = $10;
    $96 = ((($95)) + 4|0);
    HEAP8[$96>>0] = 0;
    $97 = $10;
    $98 = ((($97)) + 5|0);
    HEAP8[$98>>0] = 0;
    $99 = $10;
    $100 = ((($99)) + 6|0);
    dest=$100; stop=dest+20|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    $101 = $10;
    $102 = ((($101)) + 6|0);
    $103 = $5;
    (_strncpy($102,$103,20)|0);
    $104 = (256*3)|0;
    $105 = (($104) + 0)|0;
    $106 = $9;
    $107 = ((($106)) + 8|0);
    HEAP32[$107>>2] = $105;
    label = 15;
    break;
   }
   $3 = 0;
   $222 = $3;
   STACKTOP = sp;return ($222|0);
  }
 } while(0);
 if ((label|0) == 15) {
  $108 = $9;
  _cram_init_tables($108);
  $109 = $5;
  $110 = (_strrchr($109,47)|0);
  $8 = $110;
  $111 = ($110|0)!=(0|0);
  $112 = $8;
  $113 = ((($112)) + 1|0);
  $114 = $5;
  $115 = $111 ? $113 : $114;
  $116 = (___strdup($115)|0);
  $117 = $9;
  $118 = ((($117)) + 20|0);
  HEAP32[$118>>2] = $116;
  $119 = $9;
  $120 = ((($119)) + 20|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($121|0)!=(0|0);
  if ($122) {
   $123 = $9;
   $124 = ((($123)) + 44|0);
   HEAP32[$124>>2] = -1;
   $125 = $9;
   $126 = ((($125)) + 40|0);
   HEAP32[$126>>2] = -1;
   $127 = $9;
   $128 = ((($127)) + 24|0);
   $129 = $128;
   $130 = $129;
   HEAP32[$130>>2] = 0;
   $131 = (($129) + 4)|0;
   $132 = $131;
   HEAP32[$132>>2] = 0;
   $133 = $9;
   $134 = ((($133)) + 36|0);
   HEAP32[$134>>2] = 0;
   $135 = (_refs_create()|0);
   $136 = $9;
   $137 = ((($136)) + 48|0);
   HEAP32[$137>>2] = $135;
   $138 = $9;
   $139 = ((($138)) + 48|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ($140|0)!=(0|0);
   if ($141) {
    $142 = $9;
    $143 = ((($142)) + 60|0);
    HEAP32[$143>>2] = -2;
    $144 = $9;
    $145 = ((($144)) + 52|0);
    HEAP32[$145>>2] = 0;
    $146 = $9;
    $147 = ((($146)) + 268|0);
    HEAP32[$147>>2] = 0;
    $148 = $9;
    $149 = ((($148)) + 272|0);
    HEAP32[$149>>2] = 0;
    $150 = $9;
    $151 = ((($150)) + 276|0);
    HEAP32[$151>>2] = 10000;
    $152 = $9;
    $153 = ((($152)) + 280|0);
    HEAP32[$153>>2] = 1;
    $154 = $9;
    $155 = ((($154)) + 284|0);
    HEAP32[$155>>2] = 0;
    $156 = $9;
    $157 = ((($156)) + 288|0);
    HEAP32[$157>>2] = 0;
    $158 = $9;
    $159 = ((($158)) + 292|0);
    HEAP32[$159>>2] = 0;
    $160 = $9;
    $161 = ((($160)) + 296|0);
    HEAP32[$161>>2] = 0;
    $162 = $9;
    $163 = ((($162)) + 8|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = $164 >> 8;
    $166 = ($165|0)>=(3);
    $167 = $166&1;
    $168 = $9;
    $169 = ((($168)) + 300|0);
    HEAP32[$169>>2] = $167;
    $170 = $9;
    $171 = ((($170)) + 304|0);
    HEAP32[$171>>2] = 0;
    $172 = $9;
    $173 = ((($172)) + 34652|0);
    HEAP32[$173>>2] = -1;
    $174 = $9;
    $175 = ((($174)) + 34656|0);
    HEAP32[$175>>2] = 0;
    $176 = $9;
    $177 = ((($176)) + 308|0);
    HEAP32[$177>>2] = 0;
    $178 = $9;
    $179 = ((($178)) + 34636|0);
    HEAP32[$179>>2] = 0;
    $180 = $9;
    $181 = ((($180)) + 34664|0);
    HEAP32[$181>>2] = 0;
    $182 = $9;
    $183 = ((($182)) + 34668|0);
    HEAP32[$183>>2] = 0;
    $184 = $9;
    $185 = ((($184)) + 34672|0);
    HEAP32[$185>>2] = 0;
    $186 = $9;
    $187 = ((($186)) + 34764|0);
    HEAP32[$187>>2] = 0;
    $188 = $9;
    $189 = ((($188)) + 34768|0);
    HEAP32[$189>>2] = 0;
    $190 = $9;
    $191 = ((($190)) + 312|0);
    HEAP32[$191>>2] = 2147483647;
    $7 = 0;
    while(1) {
     $192 = $7;
     $193 = ($192|0)<(47);
     if (!($193)) {
      break;
     }
     $194 = (_cram_new_metrics()|0);
     $195 = $7;
     $196 = $9;
     $197 = ((($196)) + 80|0);
     $198 = (($197) + ($195<<2)|0);
     HEAP32[$198>>2] = $194;
     $199 = $7;
     $200 = (($199) + 1)|0;
     $7 = $200;
    }
    $201 = $9;
    $202 = ((($201)) + 316|0);
    HEAP32[$202>>2] = -2;
    $203 = $9;
    $204 = ((($203)) + 34644|0);
    HEAP32[$204>>2] = 1;
    $205 = $9;
    $206 = ((($205)) + 72|0);
    HEAP32[$206>>2] = 0;
    $207 = $9;
    $208 = ((($207)) + 34732|0);
    HEAP32[$208>>2] = 0;
    $209 = $9;
    $210 = ((($209)) + 48|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = $9;
    $213 = $9;
    $214 = ((($213)) + 16|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = (_refs_from_header($211,$212,$215)|0);
    $217 = (-1)==($216|0);
    if (!($217)) {
     $218 = $9;
     $3 = $218;
     $222 = $3;
     STACKTOP = sp;return ($222|0);
    }
   }
  }
 }
 $219 = $9;
 $220 = ($219|0)!=(0|0);
 if ($220) {
  $221 = $9;
  _free($221);
 }
 $3 = 0;
 $222 = $3;
 STACKTOP = sp;return ($222|0);
}
function _cram_init_tables($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $6 = $1;
 $7 = ((($6)) + 33096|0);
 _memset(($7|0),4,256)|0;
 $8 = $1;
 $9 = ((($8)) + 33096|0);
 $10 = ((($9)) + 65|0);
 HEAP8[$10>>0] = 0;
 $11 = $1;
 $12 = ((($11)) + 33096|0);
 $13 = ((($12)) + 97|0);
 HEAP8[$13>>0] = 0;
 $14 = $1;
 $15 = ((($14)) + 33096|0);
 $16 = ((($15)) + 67|0);
 HEAP8[$16>>0] = 1;
 $17 = $1;
 $18 = ((($17)) + 33096|0);
 $19 = ((($18)) + 99|0);
 HEAP8[$19>>0] = 1;
 $20 = $1;
 $21 = ((($20)) + 33096|0);
 $22 = ((($21)) + 71|0);
 HEAP8[$22>>0] = 2;
 $23 = $1;
 $24 = ((($23)) + 33096|0);
 $25 = ((($24)) + 103|0);
 HEAP8[$25>>0] = 2;
 $26 = $1;
 $27 = ((($26)) + 33096|0);
 $28 = ((($27)) + 84|0);
 HEAP8[$28>>0] = 3;
 $29 = $1;
 $30 = ((($29)) + 33096|0);
 $31 = ((($30)) + 116|0);
 HEAP8[$31>>0] = 3;
 $32 = $1;
 $33 = ((($32)) + 33352|0);
 _memset(($33|0),5,256)|0;
 $34 = $1;
 $35 = ((($34)) + 33352|0);
 $36 = ((($35)) + 65|0);
 HEAP8[$36>>0] = 0;
 $37 = $1;
 $38 = ((($37)) + 33352|0);
 $39 = ((($38)) + 97|0);
 HEAP8[$39>>0] = 0;
 $40 = $1;
 $41 = ((($40)) + 33352|0);
 $42 = ((($41)) + 67|0);
 HEAP8[$42>>0] = 1;
 $43 = $1;
 $44 = ((($43)) + 33352|0);
 $45 = ((($44)) + 99|0);
 HEAP8[$45>>0] = 1;
 $46 = $1;
 $47 = ((($46)) + 33352|0);
 $48 = ((($47)) + 71|0);
 HEAP8[$48>>0] = 2;
 $49 = $1;
 $50 = ((($49)) + 33352|0);
 $51 = ((($50)) + 103|0);
 HEAP8[$51>>0] = 2;
 $52 = $1;
 $53 = ((($52)) + 33352|0);
 $54 = ((($53)) + 84|0);
 HEAP8[$54>>0] = 3;
 $55 = $1;
 $56 = ((($55)) + 33352|0);
 $57 = ((($56)) + 116|0);
 HEAP8[$57>>0] = 3;
 $58 = $1;
 $59 = ((($58)) + 33352|0);
 $60 = ((($59)) + 78|0);
 HEAP8[$60>>0] = 4;
 $61 = $1;
 $62 = ((($61)) + 33352|0);
 $63 = ((($62)) + 110|0);
 HEAP8[$63>>0] = 4;
 $64 = $1;
 $65 = ((($64)) + 8|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $66 >> 8;
 $68 = ($67|0)==(1);
 $2 = 0;
 L1: do {
  if ($68) {
   while(1) {
    $69 = $2;
    $70 = ($69|0)<(512);
    if (!($70)) {
     break;
    }
    $3 = 0;
    $71 = $2;
    $72 = $71 & 256;
    $73 = ($72|0)!=(0);
    if ($73) {
     $74 = $3;
     $75 = $74 | 1;
     $3 = $75;
    }
    $76 = $2;
    $77 = $76 & 128;
    $78 = ($77|0)!=(0);
    if ($78) {
     $79 = $3;
     $80 = $79 | 2;
     $3 = $80;
    }
    $81 = $2;
    $82 = $81 & 64;
    $83 = ($82|0)!=(0);
    if ($83) {
     $84 = $3;
     $85 = $84 | 4;
     $3 = $85;
    }
    $86 = $2;
    $87 = $86 & 32;
    $88 = ($87|0)!=(0);
    if ($88) {
     $89 = $3;
     $90 = $89 | 16;
     $3 = $90;
    }
    $91 = $2;
    $92 = $91 & 16;
    $93 = ($92|0)!=(0);
    if ($93) {
     $94 = $3;
     $95 = $94 | 64;
     $3 = $95;
    }
    $96 = $2;
    $97 = $96 & 8;
    $98 = ($97|0)!=(0);
    if ($98) {
     $99 = $3;
     $100 = $99 | 128;
     $3 = $100;
    }
    $101 = $2;
    $102 = $101 & 4;
    $103 = ($102|0)!=(0);
    if ($103) {
     $104 = $3;
     $105 = $104 | 256;
     $3 = $105;
    }
    $106 = $2;
    $107 = $106 & 2;
    $108 = ($107|0)!=(0);
    if ($108) {
     $109 = $3;
     $110 = $109 | 512;
     $3 = $110;
    }
    $111 = $2;
    $112 = $111 & 1;
    $113 = ($112|0)!=(0);
    if ($113) {
     $114 = $3;
     $115 = $114 | 1024;
     $3 = $115;
    }
    $116 = $3;
    $117 = $2;
    $118 = $1;
    $119 = ((($118)) + 328|0);
    $120 = (($119) + ($117<<2)|0);
    HEAP32[$120>>2] = $116;
    $121 = $2;
    $122 = (($121) + 1)|0;
    $2 = $122;
   }
   $2 = 0;
   while(1) {
    $123 = $2;
    $124 = ($123|0)<(4096);
    if (!($124)) {
     break L1;
    }
    $4 = 0;
    $125 = $2;
    $126 = $125 & 1;
    $127 = ($126|0)!=(0);
    if ($127) {
     $128 = $4;
     $129 = $128 | 256;
     $4 = $129;
    }
    $130 = $2;
    $131 = $130 & 2;
    $132 = ($131|0)!=(0);
    if ($132) {
     $133 = $4;
     $134 = $133 | 128;
     $4 = $134;
    }
    $135 = $2;
    $136 = $135 & 4;
    $137 = ($136|0)!=(0);
    if ($137) {
     $138 = $4;
     $139 = $138 | 64;
     $4 = $139;
    }
    $140 = $2;
    $141 = $140 & 16;
    $142 = ($141|0)!=(0);
    if ($142) {
     $143 = $4;
     $144 = $143 | 32;
     $4 = $144;
    }
    $145 = $2;
    $146 = $145 & 64;
    $147 = ($146|0)!=(0);
    if ($147) {
     $148 = $4;
     $149 = $148 | 16;
     $4 = $149;
    }
    $150 = $2;
    $151 = $150 & 128;
    $152 = ($151|0)!=(0);
    if ($152) {
     $153 = $4;
     $154 = $153 | 8;
     $4 = $154;
    }
    $155 = $2;
    $156 = $155 & 256;
    $157 = ($156|0)!=(0);
    if ($157) {
     $158 = $4;
     $159 = $158 | 4;
     $4 = $159;
    }
    $160 = $2;
    $161 = $160 & 512;
    $162 = ($161|0)!=(0);
    if ($162) {
     $163 = $4;
     $164 = $163 | 2;
     $4 = $164;
    }
    $165 = $2;
    $166 = $165 & 1024;
    $167 = ($166|0)!=(0);
    if ($167) {
     $168 = $4;
     $169 = $168 | 1;
     $4 = $169;
    }
    $170 = $4;
    $171 = $2;
    $172 = $1;
    $173 = ((($172)) + 16712|0);
    $174 = (($173) + ($171<<2)|0);
    HEAP32[$174>>2] = $170;
    $175 = $2;
    $176 = (($175) + 1)|0;
    $2 = $176;
   }
  } else {
   while(1) {
    $177 = $2;
    $178 = ($177|0)<(4096);
    if (!($178)) {
     break;
    }
    $179 = $2;
    $180 = $2;
    $181 = $1;
    $182 = ((($181)) + 328|0);
    $183 = (($182) + ($180<<2)|0);
    HEAP32[$183>>2] = $179;
    $184 = $2;
    $185 = (($184) + 1)|0;
    $2 = $185;
   }
   $2 = 0;
   while(1) {
    $186 = $2;
    $187 = ($186|0)<(4096);
    if (!($187)) {
     break L1;
    }
    $188 = $2;
    $189 = $2;
    $190 = $1;
    $191 = ((($190)) + 16712|0);
    $192 = (($191) + ($189<<2)|0);
    HEAP32[$192>>2] = $188;
    $193 = $2;
    $194 = (($193) + 1)|0;
    $2 = $194;
   }
  }
 } while(0);
 $195 = $1;
 $196 = ((($195)) + 33608|0);
 _memset(($196|0),4,1024)|0;
 $2 = 0;
 while(1) {
  $197 = $2;
  $198 = ($197|0)<(32);
  if (!($198)) {
   break;
  }
  $199 = $2;
  $200 = $1;
  $201 = ((($200)) + 33608|0);
  $202 = (($201) + ($199<<5)|0);
  $203 = ((($202)) + 1|0);
  HEAP8[$203>>0] = 0;
  $204 = $2;
  $205 = $1;
  $206 = ((($205)) + 33608|0);
  $207 = (($206) + ($204<<5)|0);
  $208 = ((($207)) + 3|0);
  HEAP8[$208>>0] = 1;
  $209 = $2;
  $210 = $1;
  $211 = ((($210)) + 33608|0);
  $212 = (($211) + ($209<<5)|0);
  $213 = ((($212)) + 7|0);
  HEAP8[$213>>0] = 2;
  $214 = $2;
  $215 = $1;
  $216 = ((($215)) + 33608|0);
  $217 = (($216) + ($214<<5)|0);
  $218 = ((($217)) + 20|0);
  HEAP8[$218>>0] = 3;
  $219 = $2;
  $220 = $1;
  $221 = ((($220)) + 33608|0);
  $222 = (($221) + ($219<<5)|0);
  $223 = ((($222)) + 14|0);
  HEAP8[$223>>0] = 4;
  $224 = $2;
  $225 = (($224) + 1)|0;
  $2 = $225;
 }
 $2 = 0;
 while(1) {
  $226 = $2;
  $227 = ($226|0)<(20);
  if (!($227)) {
   break;
  }
  $5 = 0;
  while(1) {
   $228 = $5;
   $229 = ($228|0)<(20);
   if (!($229)) {
    break;
   }
   $230 = $5;
   $231 = $2;
   $232 = $231 >> 2;
   $233 = (16590 + ($232)|0);
   $234 = HEAP8[$233>>0]|0;
   $235 = $234 << 24 >> 24;
   $236 = $235 & 31;
   $237 = $1;
   $238 = ((($237)) + 33608|0);
   $239 = (($238) + ($236<<5)|0);
   $240 = (($239) + ($230)|0);
   HEAP8[$240>>0] = 3;
   $241 = $5;
   $242 = $2;
   $243 = $242 >> 2;
   $244 = (16590 + ($243)|0);
   $245 = HEAP8[$244>>0]|0;
   $246 = $245 << 24 >> 24;
   $247 = $246 & 31;
   $248 = $1;
   $249 = ((($248)) + 33608|0);
   $250 = (($249) + ($247<<5)|0);
   $251 = (($250) + ($241)|0);
   HEAP8[$251>>0] = 3;
   $252 = $5;
   $253 = $2;
   $254 = $253 >> 2;
   $255 = (16590 + ($254)|0);
   $256 = HEAP8[$255>>0]|0;
   $257 = $256 << 24 >> 24;
   $258 = $257 & 31;
   $259 = $1;
   $260 = ((($259)) + 33608|0);
   $261 = (($260) + ($258<<5)|0);
   $262 = (($261) + ($252)|0);
   HEAP8[$262>>0] = 3;
   $263 = $5;
   $264 = $2;
   $265 = $264 >> 2;
   $266 = (16590 + ($265)|0);
   $267 = HEAP8[$266>>0]|0;
   $268 = $267 << 24 >> 24;
   $269 = $268 & 31;
   $270 = $1;
   $271 = ((($270)) + 33608|0);
   $272 = (($271) + ($269<<5)|0);
   $273 = (($272) + ($263)|0);
   HEAP8[$273>>0] = 3;
   $274 = $5;
   $275 = (($274) + 1)|0;
   $5 = $275;
  }
  $276 = $2;
  $277 = (($276) + 0)|0;
  $278 = (20754 + ($277)|0);
  $279 = HEAP8[$278>>0]|0;
  $280 = $279 << 24 >> 24;
  $281 = $280 & 31;
  $282 = $2;
  $283 = $282 >> 2;
  $284 = (16590 + ($283)|0);
  $285 = HEAP8[$284>>0]|0;
  $286 = $285 << 24 >> 24;
  $287 = $286 & 31;
  $288 = $1;
  $289 = ((($288)) + 33608|0);
  $290 = (($289) + ($287<<5)|0);
  $291 = (($290) + ($281)|0);
  HEAP8[$291>>0] = 0;
  $292 = $2;
  $293 = (($292) + 1)|0;
  $294 = (20754 + ($293)|0);
  $295 = HEAP8[$294>>0]|0;
  $296 = $295 << 24 >> 24;
  $297 = $296 & 31;
  $298 = $2;
  $299 = $298 >> 2;
  $300 = (16590 + ($299)|0);
  $301 = HEAP8[$300>>0]|0;
  $302 = $301 << 24 >> 24;
  $303 = $302 & 31;
  $304 = $1;
  $305 = ((($304)) + 33608|0);
  $306 = (($305) + ($303<<5)|0);
  $307 = (($306) + ($297)|0);
  HEAP8[$307>>0] = 1;
  $308 = $2;
  $309 = (($308) + 2)|0;
  $310 = (20754 + ($309)|0);
  $311 = HEAP8[$310>>0]|0;
  $312 = $311 << 24 >> 24;
  $313 = $312 & 31;
  $314 = $2;
  $315 = $314 >> 2;
  $316 = (16590 + ($315)|0);
  $317 = HEAP8[$316>>0]|0;
  $318 = $317 << 24 >> 24;
  $319 = $318 & 31;
  $320 = $1;
  $321 = ((($320)) + 33608|0);
  $322 = (($321) + ($319<<5)|0);
  $323 = (($322) + ($313)|0);
  HEAP8[$323>>0] = 2;
  $324 = $2;
  $325 = (($324) + 3)|0;
  $326 = (20754 + ($325)|0);
  $327 = HEAP8[$326>>0]|0;
  $328 = $327 << 24 >> 24;
  $329 = $328 & 31;
  $330 = $2;
  $331 = $330 >> 2;
  $332 = (16590 + ($331)|0);
  $333 = HEAP8[$332>>0]|0;
  $334 = $333 << 24 >> 24;
  $335 = $334 & 31;
  $336 = $1;
  $337 = ((($336)) + 33608|0);
  $338 = (($337) + ($335<<5)|0);
  $339 = (($338) + ($329)|0);
  HEAP8[$339>>0] = 3;
  $340 = $2;
  $341 = (($340) + 4)|0;
  $2 = $341;
 }
 STACKTOP = sp;return;
}
function _cram_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 65568|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(65568|0);
 $7 = sp + 24|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = ((($9)) + 34768|0);
 HEAP32[$10>>2] = 0;
 $11 = $4;
 $12 = HEAP32[$11>>2]|0;
 $13 = $5;
 $14 = $6;
 $15 = (_hseek($12,$13,$14)|0);
 $16 = ($15|0)>=(0);
 if ($16) {
  $3 = 0;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 }
 $17 = $6;
 $18 = ($17|0)==(1);
 $19 = $5;
 $20 = ($19|0)>=(0);
 $or$cond = $18 & $20;
 if (!($or$cond)) {
  $3 = -1;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 }
 while(1) {
  $21 = $5;
  $22 = ($21|0)>(0);
  if (!($22)) {
   label = 9;
   break;
  }
  $23 = $5;
  $24 = (65536)<($23|0);
  $25 = $5;
  $26 = $24 ? 65536 : $25;
  $8 = $26;
  $27 = $8;
  $28 = $4;
  $29 = HEAP32[$28>>2]|0;
  $30 = $8;
  $31 = (_hread($29,$7,$30)|0);
  $32 = ($27|0)!=($31|0);
  if ($32) {
   label = 7;
   break;
  }
  $33 = $8;
  $34 = $5;
  $35 = (($34) - ($33))|0;
  $5 = $35;
 }
 if ((label|0) == 7) {
  $3 = -1;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 }
 else if ((label|0) == 9) {
  $3 = 0;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _cram_eof($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 34644|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _cram_set_option($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$5>>2] = $varargs;
 $6 = $2;
 $7 = $3;
 $8 = (_cram_set_voption($6,$7,$5)|0);
 $4 = $8;
 $9 = $4;
 STACKTOP = sp;return ($9|0);
}
function _cram_set_voption($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $arglist_current = 0, $arglist_current10 = 0, $arglist_current13 = 0, $arglist_current16 = 0, $arglist_current19 = 0, $arglist_current22 = 0, $arglist_current25 = 0, $arglist_current28 = 0, $arglist_current31 = 0, $arglist_current34 = 0, $arglist_current37 = 0, $arglist_current40 = 0, $arglist_current43 = 0, $arglist_current46 = 0, $arglist_current55 = 0, $arglist_current58 = 0, $arglist_current61 = 0, $arglist_current64 = 0, $arglist_current67 = 0, $arglist_current7 = 0;
 var $arglist_next = 0, $arglist_next11 = 0, $arglist_next14 = 0, $arglist_next17 = 0, $arglist_next20 = 0, $arglist_next23 = 0, $arglist_next26 = 0, $arglist_next29 = 0, $arglist_next32 = 0, $arglist_next35 = 0, $arglist_next38 = 0, $arglist_next41 = 0, $arglist_next44 = 0, $arglist_next47 = 0, $arglist_next56 = 0, $arglist_next59 = 0, $arglist_next62 = 0, $arglist_next65 = 0, $arglist_next68 = 0, $arglist_next8 = 0;
 var $expanded = 0, $expanded100 = 0, $expanded102 = 0, $expanded103 = 0, $expanded104 = 0, $expanded106 = 0, $expanded107 = 0, $expanded109 = 0, $expanded110 = 0, $expanded111 = 0, $expanded113 = 0, $expanded114 = 0, $expanded116 = 0, $expanded117 = 0, $expanded118 = 0, $expanded120 = 0, $expanded121 = 0, $expanded123 = 0, $expanded124 = 0, $expanded125 = 0;
 var $expanded127 = 0, $expanded128 = 0, $expanded130 = 0, $expanded131 = 0, $expanded132 = 0, $expanded134 = 0, $expanded135 = 0, $expanded137 = 0, $expanded138 = 0, $expanded139 = 0, $expanded141 = 0, $expanded142 = 0, $expanded144 = 0, $expanded145 = 0, $expanded146 = 0, $expanded148 = 0, $expanded149 = 0, $expanded151 = 0, $expanded152 = 0, $expanded153 = 0;
 var $expanded155 = 0, $expanded156 = 0, $expanded158 = 0, $expanded159 = 0, $expanded160 = 0, $expanded162 = 0, $expanded163 = 0, $expanded165 = 0, $expanded166 = 0, $expanded167 = 0, $expanded169 = 0, $expanded170 = 0, $expanded172 = 0, $expanded173 = 0, $expanded174 = 0, $expanded176 = 0, $expanded177 = 0, $expanded179 = 0, $expanded180 = 0, $expanded181 = 0;
 var $expanded183 = 0, $expanded184 = 0, $expanded186 = 0, $expanded187 = 0, $expanded188 = 0, $expanded190 = 0, $expanded191 = 0, $expanded193 = 0, $expanded194 = 0, $expanded195 = 0, $expanded197 = 0, $expanded198 = 0, $expanded200 = 0, $expanded201 = 0, $expanded202 = 0, $expanded204 = 0, $expanded205 = 0, $expanded207 = 0, $expanded208 = 0, $expanded209 = 0;
 var $expanded72 = 0, $expanded74 = 0, $expanded75 = 0, $expanded76 = 0, $expanded78 = 0, $expanded79 = 0, $expanded81 = 0, $expanded82 = 0, $expanded83 = 0, $expanded85 = 0, $expanded86 = 0, $expanded88 = 0, $expanded89 = 0, $expanded90 = 0, $expanded92 = 0, $expanded93 = 0, $expanded95 = 0, $expanded96 = 0, $expanded97 = 0, $expanded99 = 0;
 var $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $vararg_buffer = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer69 = 0, $vararg_ptr48 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer69 = sp + 24|0;
 $vararg_buffer52 = sp + 16|0;
 $vararg_buffer49 = sp + 8|0;
 $vararg_buffer = sp;
 $22 = sp + 64|0;
 $23 = sp + 60|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $32 = $4;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  $34 = (___errno_location()|0);
  HEAP32[$34>>2] = 9;
  $3 = -1;
  $362 = $3;
  STACKTOP = sp;return ($362|0);
 }
 $35 = $5;
 L5: do {
  switch ($35|0) {
  case 0:  {
   $36 = $6;
   $arglist_current = HEAP32[$36>>2]|0;
   $37 = $arglist_current;
   $38 = ((0) + 4|0);
   $expanded72 = $38;
   $expanded = (($expanded72) - 1)|0;
   $39 = (($37) + ($expanded))|0;
   $40 = ((0) + 4|0);
   $expanded76 = $40;
   $expanded75 = (($expanded76) - 1)|0;
   $expanded74 = $expanded75 ^ -1;
   $41 = $39 & $expanded74;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $arglist_next = ((($42)) + 4|0);
   HEAP32[$36>>2] = $arglist_next;
   $8 = $43;
   $44 = $8;
   $45 = $4;
   $46 = ((($45)) + 268|0);
   HEAP32[$46>>2] = $44;
   break;
  }
  case 1:  {
   $47 = $4;
   $48 = ((($47)) + 20|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)!=(0|0);
   if ($50) {
    $51 = $4;
    $52 = ((($51)) + 20|0);
    $53 = HEAP32[$52>>2]|0;
    _free($53);
   }
   $54 = $6;
   $arglist_current7 = HEAP32[$54>>2]|0;
   $55 = $arglist_current7;
   $56 = ((0) + 4|0);
   $expanded79 = $56;
   $expanded78 = (($expanded79) - 1)|0;
   $57 = (($55) + ($expanded78))|0;
   $58 = ((0) + 4|0);
   $expanded83 = $58;
   $expanded82 = (($expanded83) - 1)|0;
   $expanded81 = $expanded82 ^ -1;
   $59 = $57 & $expanded81;
   $60 = $59;
   $61 = HEAP32[$60>>2]|0;
   $arglist_next8 = ((($60)) + 4|0);
   HEAP32[$54>>2] = $arglist_next8;
   $9 = $61;
   $62 = $9;
   $63 = (___strdup($62)|0);
   $64 = $4;
   $65 = ((($64)) + 20|0);
   HEAP32[$65>>2] = $63;
   $66 = ($63|0)!=(0|0);
   if (!($66)) {
    $3 = -1;
    $362 = $3;
    STACKTOP = sp;return ($362|0);
   }
   break;
  }
  case 2:  {
   $67 = $6;
   $arglist_current10 = HEAP32[$67>>2]|0;
   $68 = $arglist_current10;
   $69 = ((0) + 4|0);
   $expanded86 = $69;
   $expanded85 = (($expanded86) - 1)|0;
   $70 = (($68) + ($expanded85))|0;
   $71 = ((0) + 4|0);
   $expanded90 = $71;
   $expanded89 = (($expanded90) - 1)|0;
   $expanded88 = $expanded89 ^ -1;
   $72 = $70 & $expanded88;
   $73 = $72;
   $74 = HEAP32[$73>>2]|0;
   $arglist_next11 = ((($73)) + 4|0);
   HEAP32[$67>>2] = $arglist_next11;
   $10 = $74;
   $75 = $10;
   $76 = $4;
   $77 = ((($76)) + 272|0);
   HEAP32[$77>>2] = $75;
   break;
  }
  case 3:  {
   $78 = $6;
   $arglist_current13 = HEAP32[$78>>2]|0;
   $79 = $arglist_current13;
   $80 = ((0) + 4|0);
   $expanded93 = $80;
   $expanded92 = (($expanded93) - 1)|0;
   $81 = (($79) + ($expanded92))|0;
   $82 = ((0) + 4|0);
   $expanded97 = $82;
   $expanded96 = (($expanded97) - 1)|0;
   $expanded95 = $expanded96 ^ -1;
   $83 = $81 & $expanded95;
   $84 = $83;
   $85 = HEAP32[$84>>2]|0;
   $arglist_next14 = ((($84)) + 4|0);
   HEAP32[$78>>2] = $arglist_next14;
   $11 = $85;
   $86 = $11;
   $87 = $4;
   $88 = ((($87)) + 276|0);
   HEAP32[$88>>2] = $86;
   break;
  }
  case 4:  {
   $89 = $6;
   $arglist_current16 = HEAP32[$89>>2]|0;
   $90 = $arglist_current16;
   $91 = ((0) + 4|0);
   $expanded100 = $91;
   $expanded99 = (($expanded100) - 1)|0;
   $92 = (($90) + ($expanded99))|0;
   $93 = ((0) + 4|0);
   $expanded104 = $93;
   $expanded103 = (($expanded104) - 1)|0;
   $expanded102 = $expanded103 ^ -1;
   $94 = $92 & $expanded102;
   $95 = $94;
   $96 = HEAP32[$95>>2]|0;
   $arglist_next17 = ((($95)) + 4|0);
   HEAP32[$89>>2] = $arglist_next17;
   $12 = $96;
   $97 = $12;
   $98 = $4;
   $99 = ((($98)) + 280|0);
   HEAP32[$99>>2] = $97;
   break;
  }
  case 7:  {
   $100 = $6;
   $arglist_current19 = HEAP32[$100>>2]|0;
   $101 = $arglist_current19;
   $102 = ((0) + 4|0);
   $expanded107 = $102;
   $expanded106 = (($expanded107) - 1)|0;
   $103 = (($101) + ($expanded106))|0;
   $104 = ((0) + 4|0);
   $expanded111 = $104;
   $expanded110 = (($expanded111) - 1)|0;
   $expanded109 = $expanded110 ^ -1;
   $105 = $103 & $expanded109;
   $106 = $105;
   $107 = HEAP32[$106>>2]|0;
   $arglist_next20 = ((($106)) + 4|0);
   HEAP32[$100>>2] = $arglist_next20;
   $13 = $107;
   $108 = $13;
   $109 = $4;
   $110 = ((($109)) + 284|0);
   HEAP32[$110>>2] = $108;
   break;
  }
  case 11:  {
   $111 = $6;
   $arglist_current22 = HEAP32[$111>>2]|0;
   $112 = $arglist_current22;
   $113 = ((0) + 4|0);
   $expanded114 = $113;
   $expanded113 = (($expanded114) - 1)|0;
   $114 = (($112) + ($expanded113))|0;
   $115 = ((0) + 4|0);
   $expanded118 = $115;
   $expanded117 = (($expanded118) - 1)|0;
   $expanded116 = $expanded117 ^ -1;
   $116 = $114 & $expanded116;
   $117 = $116;
   $118 = HEAP32[$117>>2]|0;
   $arglist_next23 = ((($117)) + 4|0);
   HEAP32[$111>>2] = $arglist_next23;
   $14 = $118;
   $119 = $14;
   $120 = $4;
   $121 = ((($120)) + 288|0);
   HEAP32[$121>>2] = $119;
   break;
  }
  case 8:  {
   $122 = $6;
   $arglist_current25 = HEAP32[$122>>2]|0;
   $123 = $arglist_current25;
   $124 = ((0) + 4|0);
   $expanded121 = $124;
   $expanded120 = (($expanded121) - 1)|0;
   $125 = (($123) + ($expanded120))|0;
   $126 = ((0) + 4|0);
   $expanded125 = $126;
   $expanded124 = (($expanded125) - 1)|0;
   $expanded123 = $expanded124 ^ -1;
   $127 = $125 & $expanded123;
   $128 = $127;
   $129 = HEAP32[$128>>2]|0;
   $arglist_next26 = ((($128)) + 4|0);
   HEAP32[$122>>2] = $arglist_next26;
   $15 = $129;
   $130 = $15;
   $131 = $4;
   $132 = ((($131)) + 292|0);
   HEAP32[$132>>2] = $130;
   break;
  }
  case 12:  {
   $133 = $6;
   $arglist_current28 = HEAP32[$133>>2]|0;
   $134 = $arglist_current28;
   $135 = ((0) + 4|0);
   $expanded128 = $135;
   $expanded127 = (($expanded128) - 1)|0;
   $136 = (($134) + ($expanded127))|0;
   $137 = ((0) + 4|0);
   $expanded132 = $137;
   $expanded131 = (($expanded132) - 1)|0;
   $expanded130 = $expanded131 ^ -1;
   $138 = $136 & $expanded130;
   $139 = $138;
   $140 = HEAP32[$139>>2]|0;
   $arglist_next29 = ((($139)) + 4|0);
   HEAP32[$133>>2] = $arglist_next29;
   $16 = $140;
   $141 = $16;
   $142 = $4;
   $143 = ((($142)) + 296|0);
   HEAP32[$143>>2] = $141;
   break;
  }
  case 17:  {
   $144 = $6;
   $arglist_current31 = HEAP32[$144>>2]|0;
   $145 = $arglist_current31;
   $146 = ((0) + 4|0);
   $expanded135 = $146;
   $expanded134 = (($expanded135) - 1)|0;
   $147 = (($145) + ($expanded134))|0;
   $148 = ((0) + 4|0);
   $expanded139 = $148;
   $expanded138 = (($expanded139) - 1)|0;
   $expanded137 = $expanded138 ^ -1;
   $149 = $147 & $expanded137;
   $150 = $149;
   $151 = HEAP32[$150>>2]|0;
   $arglist_next32 = ((($150)) + 4|0);
   HEAP32[$144>>2] = $arglist_next32;
   $17 = $151;
   $152 = $17;
   $153 = $4;
   $154 = ((($153)) + 300|0);
   HEAP32[$154>>2] = $152;
   break;
  }
  case 16:  {
   $155 = $6;
   $arglist_current34 = HEAP32[$155>>2]|0;
   $156 = $arglist_current34;
   $157 = ((0) + 4|0);
   $expanded142 = $157;
   $expanded141 = (($expanded142) - 1)|0;
   $158 = (($156) + ($expanded141))|0;
   $159 = ((0) + 4|0);
   $expanded146 = $159;
   $expanded145 = (($expanded146) - 1)|0;
   $expanded144 = $expanded145 ^ -1;
   $160 = $158 & $expanded144;
   $161 = $160;
   $162 = HEAP32[$161>>2]|0;
   $arglist_next35 = ((($161)) + 4|0);
   HEAP32[$155>>2] = $arglist_next35;
   $18 = $162;
   $163 = $18;
   $164 = $4;
   $165 = ((($164)) + 304|0);
   HEAP32[$165>>2] = $163;
   break;
  }
  case 13:  {
   $166 = $4;
   $167 = ((($166)) + 308|0);
   HEAP32[$167>>2] = 1;
   $168 = $6;
   $arglist_current37 = HEAP32[$168>>2]|0;
   $169 = $arglist_current37;
   $170 = ((0) + 4|0);
   $expanded149 = $170;
   $expanded148 = (($expanded149) - 1)|0;
   $171 = (($169) + ($expanded148))|0;
   $172 = ((0) + 4|0);
   $expanded153 = $172;
   $expanded152 = (($expanded153) - 1)|0;
   $expanded151 = $expanded152 ^ -1;
   $173 = $171 & $expanded151;
   $174 = $173;
   $175 = HEAP32[$174>>2]|0;
   $arglist_next38 = ((($174)) + 4|0);
   HEAP32[$168>>2] = $arglist_next38;
   $19 = $175;
   $176 = $19;
   $7 = $176;
   $177 = $7;
   $178 = $4;
   $179 = ((($178)) + 48|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = ($177|0)!=($180|0);
   if ($181) {
    $182 = $4;
    $183 = ((($182)) + 48|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = ($184|0)!=(0|0);
    if ($185) {
     $186 = $4;
     $187 = ((($186)) + 48|0);
     $188 = HEAP32[$187>>2]|0;
     _refs_free($188);
    }
    $189 = $7;
    $190 = $4;
    $191 = ((($190)) + 48|0);
    HEAP32[$191>>2] = $189;
    $192 = $4;
    $193 = ((($192)) + 48|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = ((($194)) + 24|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = (($196) + 1)|0;
    HEAP32[$195>>2] = $197;
   }
   break;
  }
  case 5:  {
   $198 = $4;
   $199 = ((($198)) + 316|0);
   $200 = $6;
   $arglist_current40 = HEAP32[$200>>2]|0;
   $201 = $arglist_current40;
   $202 = ((0) + 4|0);
   $expanded156 = $202;
   $expanded155 = (($expanded156) - 1)|0;
   $203 = (($201) + ($expanded155))|0;
   $204 = ((0) + 4|0);
   $expanded160 = $204;
   $expanded159 = (($expanded160) - 1)|0;
   $expanded158 = $expanded159 ^ -1;
   $205 = $203 & $expanded158;
   $206 = $205;
   $207 = HEAP32[$206>>2]|0;
   $arglist_next41 = ((($206)) + 4|0);
   HEAP32[$200>>2] = $arglist_next41;
   $20 = $207;
   $208 = $20;
   ;HEAP32[$199>>2]=HEAP32[$208>>2]|0;HEAP32[$199+4>>2]=HEAP32[$208+4>>2]|0;HEAP32[$199+8>>2]=HEAP32[$208+8>>2]|0;
   $209 = $4;
   $210 = $4;
   $211 = ((($210)) + 316|0);
   $212 = (_cram_seek_to_refpos($209,$211)|0);
   $3 = $212;
   $362 = $3;
   STACKTOP = sp;return ($362|0);
   break;
  }
  case 9:  {
   $213 = $4;
   $214 = $6;
   $arglist_current43 = HEAP32[$214>>2]|0;
   $215 = $arglist_current43;
   $216 = ((0) + 4|0);
   $expanded163 = $216;
   $expanded162 = (($expanded163) - 1)|0;
   $217 = (($215) + ($expanded162))|0;
   $218 = ((0) + 4|0);
   $expanded167 = $218;
   $expanded166 = (($expanded167) - 1)|0;
   $expanded165 = $expanded166 ^ -1;
   $219 = $217 & $expanded165;
   $220 = $219;
   $221 = HEAP32[$220>>2]|0;
   $arglist_next44 = ((($220)) + 4|0);
   HEAP32[$214>>2] = $arglist_next44;
   $21 = $221;
   $222 = $21;
   $223 = (_cram_load_reference($213,$222)|0);
   $3 = $223;
   $362 = $3;
   STACKTOP = sp;return ($362|0);
   break;
  }
  case 6:  {
   $224 = $6;
   $arglist_current46 = HEAP32[$224>>2]|0;
   $225 = $arglist_current46;
   $226 = ((0) + 4|0);
   $expanded170 = $226;
   $expanded169 = (($expanded170) - 1)|0;
   $227 = (($225) + ($expanded169))|0;
   $228 = ((0) + 4|0);
   $expanded174 = $228;
   $expanded173 = (($expanded174) - 1)|0;
   $expanded172 = $expanded173 ^ -1;
   $229 = $227 & $expanded172;
   $230 = $229;
   $231 = HEAP32[$230>>2]|0;
   $arglist_next47 = ((($230)) + 4|0);
   HEAP32[$224>>2] = $arglist_next47;
   $25 = $231;
   $232 = $25;
   $24 = $232;
   $233 = $24;
   HEAP32[$vararg_buffer>>2] = $22;
   $vararg_ptr48 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr48>>2] = $23;
   $234 = (_sscanf($233,16596,$vararg_buffer)|0);
   $235 = (2)!=($234|0);
   if ($235) {
    $236 = HEAP32[2410]|0;
    $237 = $24;
    HEAP32[$vararg_buffer49>>2] = $237;
    (_fprintf($236,16602,$vararg_buffer49)|0);
    $3 = -1;
    $362 = $3;
    STACKTOP = sp;return ($362|0);
   }
   $238 = HEAP32[$22>>2]|0;
   $239 = ($238|0)==(1);
   $240 = HEAP32[$23>>2]|0;
   $241 = ($240|0)==(0);
   $or$cond = $239 & $241;
   do {
    if (!($or$cond)) {
     $242 = HEAP32[$22>>2]|0;
     $243 = ($242|0)==(2);
     if ($243) {
      $244 = HEAP32[$23>>2]|0;
      $245 = ($244|0)==(0);
      $246 = HEAP32[$23>>2]|0;
      $247 = ($246|0)==(1);
      $or$cond3 = $245 | $247;
      if ($or$cond3) {
       break;
      }
     }
     $248 = HEAP32[$22>>2]|0;
     $249 = ($248|0)==(3);
     $250 = HEAP32[$23>>2]|0;
     $251 = ($250|0)==(0);
     $or$cond5 = $249 & $251;
     if (!($or$cond5)) {
      $252 = HEAP32[2410]|0;
      (_fprintf($252,16631,$vararg_buffer52)|0);
      $253 = (___errno_location()|0);
      HEAP32[$253>>2] = 22;
      $3 = -1;
      $362 = $3;
      STACKTOP = sp;return ($362|0);
     }
    }
   } while(0);
   $254 = HEAP32[$22>>2]|0;
   $255 = $254<<8;
   $256 = HEAP32[$23>>2]|0;
   $257 = (($255) + ($256))|0;
   $258 = $4;
   $259 = ((($258)) + 8|0);
   HEAP32[$259>>2] = $257;
   $260 = $4;
   $261 = ((($260)) + 8|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = $262 >> 8;
   $264 = ($263|0)>=(3);
   if ($264) {
    $265 = $4;
    $266 = ((($265)) + 300|0);
    HEAP32[$266>>2] = 1;
   }
   break;
  }
  case 10:  {
   $267 = $6;
   $arglist_current55 = HEAP32[$267>>2]|0;
   $268 = $arglist_current55;
   $269 = ((0) + 4|0);
   $expanded177 = $269;
   $expanded176 = (($expanded177) - 1)|0;
   $270 = (($268) + ($expanded176))|0;
   $271 = ((0) + 4|0);
   $expanded181 = $271;
   $expanded180 = (($expanded181) - 1)|0;
   $expanded179 = $expanded180 ^ -1;
   $272 = $270 & $expanded179;
   $273 = $272;
   $274 = HEAP32[$273>>2]|0;
   $arglist_next56 = ((($273)) + 4|0);
   HEAP32[$267>>2] = $arglist_next56;
   $26 = $274;
   $275 = $26;
   $276 = $4;
   $277 = ((($276)) + 34652|0);
   HEAP32[$277>>2] = $275;
   break;
  }
  case 14:  {
   $278 = $6;
   $arglist_current58 = HEAP32[$278>>2]|0;
   $279 = $arglist_current58;
   $280 = ((0) + 4|0);
   $expanded184 = $280;
   $expanded183 = (($expanded184) - 1)|0;
   $281 = (($279) + ($expanded183))|0;
   $282 = ((0) + 4|0);
   $expanded188 = $282;
   $expanded187 = (($expanded188) - 1)|0;
   $expanded186 = $expanded187 ^ -1;
   $283 = $281 & $expanded186;
   $284 = $283;
   $285 = HEAP32[$284>>2]|0;
   $arglist_next59 = ((($284)) + 4|0);
   HEAP32[$278>>2] = $arglist_next59;
   $28 = $285;
   $286 = $28;
   $27 = $286;
   $287 = $27;
   $288 = ($287|0)>(1);
   if ($288) {
    $289 = $27;
    $290 = $289<<1;
    $291 = $27;
    $292 = (_t_pool_init($290,$291)|0);
    $293 = $4;
    $294 = ((($293)) + 34668|0);
    HEAP32[$294>>2] = $292;
    $295 = ($292|0)!=(0|0);
    if ($295) {
     $296 = (_t_results_queue_init()|0);
     $297 = $4;
     $298 = ((($297)) + 34672|0);
     HEAP32[$298>>2] = $296;
     $299 = $4;
     $300 = ((($299)) + 34676|0);
     (_pthread_mutex_init(($300|0),(0|0))|0);
     $301 = $4;
     $302 = ((($301)) + 34704|0);
     (_pthread_mutex_init(($302|0),(0|0))|0);
     $303 = $4;
     $304 = ((($303)) + 34736|0);
     (_pthread_mutex_init(($304|0),(0|0))|0);
     $305 = $4;
     $306 = ((($305)) + 308|0);
     HEAP32[$306>>2] = 1;
     $307 = $4;
     $308 = ((($307)) + 34664|0);
     HEAP32[$308>>2] = 1;
     break L5;
    }
    $3 = -1;
    $362 = $3;
    STACKTOP = sp;return ($362|0);
   }
   break;
  }
  case 15:  {
   $309 = $6;
   $arglist_current61 = HEAP32[$309>>2]|0;
   $310 = $arglist_current61;
   $311 = ((0) + 4|0);
   $expanded191 = $311;
   $expanded190 = (($expanded191) - 1)|0;
   $312 = (($310) + ($expanded190))|0;
   $313 = ((0) + 4|0);
   $expanded195 = $313;
   $expanded194 = (($expanded195) - 1)|0;
   $expanded193 = $expanded194 ^ -1;
   $314 = $312 & $expanded193;
   $315 = $314;
   $316 = HEAP32[$315>>2]|0;
   $arglist_next62 = ((($315)) + 4|0);
   HEAP32[$309>>2] = $arglist_next62;
   $29 = $316;
   $317 = $29;
   $318 = $4;
   $319 = ((($318)) + 34668|0);
   HEAP32[$319>>2] = $317;
   $320 = $4;
   $321 = ((($320)) + 34668|0);
   $322 = HEAP32[$321>>2]|0;
   $323 = ($322|0)!=(0|0);
   if ($323) {
    $324 = (_t_results_queue_init()|0);
    $325 = $4;
    $326 = ((($325)) + 34672|0);
    HEAP32[$326>>2] = $324;
    $327 = $4;
    $328 = ((($327)) + 34676|0);
    (_pthread_mutex_init(($328|0),(0|0))|0);
    $329 = $4;
    $330 = ((($329)) + 34704|0);
    (_pthread_mutex_init(($330|0),(0|0))|0);
    $331 = $4;
    $332 = ((($331)) + 34736|0);
    (_pthread_mutex_init(($332|0),(0|0))|0);
   }
   $333 = $4;
   $334 = ((($333)) + 308|0);
   HEAP32[$334>>2] = 1;
   $335 = $4;
   $336 = ((($335)) + 34664|0);
   HEAP32[$336>>2] = 0;
   break;
  }
  case 18:  {
   $337 = $6;
   $arglist_current64 = HEAP32[$337>>2]|0;
   $338 = $arglist_current64;
   $339 = ((0) + 4|0);
   $expanded198 = $339;
   $expanded197 = (($expanded198) - 1)|0;
   $340 = (($338) + ($expanded197))|0;
   $341 = ((0) + 4|0);
   $expanded202 = $341;
   $expanded201 = (($expanded202) - 1)|0;
   $expanded200 = $expanded201 ^ -1;
   $342 = $340 & $expanded200;
   $343 = $342;
   $344 = HEAP32[$343>>2]|0;
   $arglist_next65 = ((($343)) + 4|0);
   HEAP32[$337>>2] = $arglist_next65;
   $30 = $344;
   $345 = $30;
   $346 = $4;
   $347 = ((($346)) + 312|0);
   HEAP32[$347>>2] = $345;
   break;
  }
  case 100:  {
   $348 = $6;
   $arglist_current67 = HEAP32[$348>>2]|0;
   $349 = $arglist_current67;
   $350 = ((0) + 4|0);
   $expanded205 = $350;
   $expanded204 = (($expanded205) - 1)|0;
   $351 = (($349) + ($expanded204))|0;
   $352 = ((0) + 4|0);
   $expanded209 = $352;
   $expanded208 = (($expanded209) - 1)|0;
   $expanded207 = $expanded208 ^ -1;
   $353 = $351 & $expanded207;
   $354 = $353;
   $355 = HEAP32[$354>>2]|0;
   $arglist_next68 = ((($354)) + 4|0);
   HEAP32[$348>>2] = $arglist_next68;
   $31 = $355;
   $356 = $31;
   $357 = $4;
   $358 = ((($357)) + 76|0);
   HEAP32[$358>>2] = $356;
   break;
  }
  default: {
   $359 = HEAP32[2410]|0;
   $360 = $5;
   HEAP32[$vararg_buffer69>>2] = $360;
   (_fprintf($359,16681,$vararg_buffer69)|0);
   $361 = (___errno_location()|0);
   HEAP32[$361>>2] = 22;
   $3 = -1;
   $362 = $3;
   STACKTOP = sp;return ($362|0);
  }
  }
 } while(0);
 $3 = 0;
 $362 = $3;
 STACKTOP = sp;return ($362|0);
}
function _ks_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = (_calloc(1,32)|0);
 $2 = $3;
 $4 = $1;
 $5 = $2;
 $6 = ((($5)) + 24|0);
 HEAP32[$6>>2] = $4;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = $10 | 262144;
 HEAP32[$8>>2] = $11;
 $12 = (_malloc(65536)|0);
 $13 = $2;
 $14 = ((($13)) + 28|0);
 HEAP32[$14>>2] = $12;
 $15 = $2;
 STACKTOP = sp;return ($15|0);
}
function _ks_getuntil2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $12 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = 0;
 $14 = $9;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $9;
  HEAP32[$16>>2] = 0;
 }
 $17 = $10;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $8;
  $20 = HEAP32[$19>>2]|0;
  $22 = $20;
 } else {
  $22 = 0;
 }
 $21 = $8;
 HEAP32[$21>>2] = $22;
 $23 = $8;
 $24 = HEAP32[$23>>2]|0;
 $25 = $12;
 $26 = $25;
 HEAP32[$26>>2] = $24;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = 0;
 while(1) {
  $29 = $6;
  $30 = HEAP32[$29>>2]|0;
  $31 = $6;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($30|0)>=($33|0);
  if ($34) {
   $35 = $6;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $37 << 30;
   $39 = $38 >> 30;
   $40 = ($39|0)!=(0);
   if ($40) {
    break;
   }
   $41 = $6;
   HEAP32[$41>>2] = 0;
   $42 = $6;
   $43 = ((($42)) + 24|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $6;
   $46 = ((($45)) + 28|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $6;
   $49 = ((($48)) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $50 >> 2;
   $52 = (_bgzf_read($44,$47,$51)|0);
   $53 = $6;
   $54 = ((($53)) + 4|0);
   HEAP32[$54>>2] = $52;
   $55 = $6;
   $56 = ((($55)) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)==(0);
   if ($58) {
    label = 9;
    break;
   }
  }
  $64 = $7;
  $65 = ($64|0)==(2);
  L13: do {
   if ($65) {
    $66 = $6;
    $67 = HEAP32[$66>>2]|0;
    $13 = $67;
    while(1) {
     $68 = $13;
     $69 = $6;
     $70 = ((($69)) + 4|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($68|0)<($71|0);
     if (!($72)) {
      break L13;
     }
     $73 = $13;
     $74 = $6;
     $75 = ((($74)) + 28|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = (($76) + ($73)|0);
     $78 = HEAP8[$77>>0]|0;
     $79 = $78&255;
     $80 = ($79|0)==(10);
     if ($80) {
      break L13;
     }
     $81 = $13;
     $82 = (($81) + 1)|0;
     $13 = $82;
    }
   } else {
    $83 = $7;
    $84 = ($83|0)>(2);
    if ($84) {
     $85 = $6;
     $86 = HEAP32[$85>>2]|0;
     $13 = $86;
     while(1) {
      $87 = $13;
      $88 = $6;
      $89 = ((($88)) + 4|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = ($87|0)<($90|0);
      if (!($91)) {
       break L13;
      }
      $92 = $13;
      $93 = $6;
      $94 = ((($93)) + 28|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = (($95) + ($92)|0);
      $97 = HEAP8[$96>>0]|0;
      $98 = $97&255;
      $99 = $7;
      $100 = ($98|0)==($99|0);
      if ($100) {
       break L13;
      }
      $101 = $13;
      $102 = (($101) + 1)|0;
      $13 = $102;
     }
    }
    $103 = $7;
    $104 = ($103|0)==(0);
    if ($104) {
     $105 = $6;
     $106 = HEAP32[$105>>2]|0;
     $13 = $106;
     while(1) {
      $107 = $13;
      $108 = $6;
      $109 = ((($108)) + 4|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = ($107|0)<($110|0);
      if (!($111)) {
       break L13;
      }
      $112 = $13;
      $113 = $6;
      $114 = ((($113)) + 28|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = (($115) + ($112)|0);
      $117 = HEAP8[$116>>0]|0;
      $118 = $117&255;
      $119 = (_isspace($118)|0);
      $120 = ($119|0)!=(0);
      if ($120) {
       break L13;
      }
      $121 = $13;
      $122 = (($121) + 1)|0;
      $13 = $122;
     }
    }
    $123 = $7;
    $124 = ($123|0)==(1);
    if (!($124)) {
     $13 = 0;
     break;
    }
    $125 = $6;
    $126 = HEAP32[$125>>2]|0;
    $13 = $126;
    while(1) {
     $127 = $13;
     $128 = $6;
     $129 = ((($128)) + 4|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($127|0)<($130|0);
     if (!($131)) {
      break L13;
     }
     $132 = $13;
     $133 = $6;
     $134 = ((($133)) + 28|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = (($135) + ($132)|0);
     $137 = HEAP8[$136>>0]|0;
     $138 = $137&255;
     $139 = (_isspace($138)|0);
     $140 = ($139|0)!=(0);
     if ($140) {
      $141 = $13;
      $142 = $6;
      $143 = ((($142)) + 28|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($144) + ($141)|0);
      $146 = HEAP8[$145>>0]|0;
      $147 = $146&255;
      $148 = ($147|0)!=(32);
      if ($148) {
       break L13;
      }
     }
     $149 = $13;
     $150 = (($149) + 1)|0;
     $13 = $150;
    }
   }
  } while(0);
  $151 = $8;
  $152 = ((($151)) + 4|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = $8;
  $155 = HEAP32[$154>>2]|0;
  $156 = (($153) - ($155))|0;
  $157 = $13;
  $158 = $6;
  $159 = HEAP32[$158>>2]|0;
  $160 = (($157) - ($159))|0;
  $161 = (($160) + 1)|0;
  $162 = ($156>>>0)<($161>>>0);
  if ($162) {
   $163 = $8;
   $164 = HEAP32[$163>>2]|0;
   $165 = $13;
   $166 = $6;
   $167 = HEAP32[$166>>2]|0;
   $168 = (($165) - ($167))|0;
   $169 = (($164) + ($168))|0;
   $170 = (($169) + 1)|0;
   $171 = $8;
   $172 = ((($171)) + 4|0);
   HEAP32[$172>>2] = $170;
   $173 = $8;
   $174 = ((($173)) + 4|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = (($175) + -1)|0;
   HEAP32[$174>>2] = $176;
   $177 = $8;
   $178 = ((($177)) + 4|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = $179 >>> 1;
   $181 = $8;
   $182 = ((($181)) + 4|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = $183 | $180;
   HEAP32[$182>>2] = $184;
   $185 = $8;
   $186 = ((($185)) + 4|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = $187 >>> 2;
   $189 = $8;
   $190 = ((($189)) + 4|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = $191 | $188;
   HEAP32[$190>>2] = $192;
   $193 = $8;
   $194 = ((($193)) + 4|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = $195 >>> 4;
   $197 = $8;
   $198 = ((($197)) + 4|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = $199 | $196;
   HEAP32[$198>>2] = $200;
   $201 = $8;
   $202 = ((($201)) + 4|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = $203 >>> 8;
   $205 = $8;
   $206 = ((($205)) + 4|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = $207 | $204;
   HEAP32[$206>>2] = $208;
   $209 = $8;
   $210 = ((($209)) + 4|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = $211 >>> 16;
   $213 = $8;
   $214 = ((($213)) + 4|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = $215 | $212;
   HEAP32[$214>>2] = $216;
   $217 = $8;
   $218 = ((($217)) + 4|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = (($219) + 1)|0;
   HEAP32[$218>>2] = $220;
   $221 = $8;
   $222 = ((($221)) + 8|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = $8;
   $225 = ((($224)) + 4|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = (_realloc($223,$226)|0);
   $228 = $8;
   $229 = ((($228)) + 8|0);
   HEAP32[$229>>2] = $227;
  }
  $230 = $13;
  $231 = $6;
  $232 = HEAP32[$231>>2]|0;
  $233 = (($230) - ($232))|0;
  $234 = ($233|0)<(0);
  $235 = $234 << 31 >> 31;
  $236 = $12;
  $237 = $236;
  $238 = HEAP32[$237>>2]|0;
  $239 = (($236) + 4)|0;
  $240 = $239;
  $241 = HEAP32[$240>>2]|0;
  $242 = (_i64Add(($238|0),($241|0),($233|0),($235|0))|0);
  $243 = tempRet0;
  $244 = $12;
  $245 = $244;
  HEAP32[$245>>2] = $242;
  $246 = (($244) + 4)|0;
  $247 = $246;
  HEAP32[$247>>2] = $243;
  $248 = $13;
  $249 = $6;
  $250 = ((($249)) + 4|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = ($248|0)<($251|0);
  if ($252) {
   $253 = $12;
   $254 = $253;
   $255 = HEAP32[$254>>2]|0;
   $256 = (($253) + 4)|0;
   $257 = $256;
   $258 = HEAP32[$257>>2]|0;
   $259 = (_i64Add(($255|0),($258|0),1,0)|0);
   $260 = tempRet0;
   $261 = $12;
   $262 = $261;
   HEAP32[$262>>2] = $259;
   $263 = (($261) + 4)|0;
   $264 = $263;
   HEAP32[$264>>2] = $260;
  }
  $11 = 1;
  $265 = $8;
  $266 = ((($265)) + 8|0);
  $267 = HEAP32[$266>>2]|0;
  $268 = $8;
  $269 = HEAP32[$268>>2]|0;
  $270 = (($267) + ($269)|0);
  $271 = $6;
  $272 = ((($271)) + 28|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = $6;
  $275 = HEAP32[$274>>2]|0;
  $276 = (($273) + ($275)|0);
  $277 = $13;
  $278 = $6;
  $279 = HEAP32[$278>>2]|0;
  $280 = (($277) - ($279))|0;
  _memcpy(($270|0),($276|0),($280|0))|0;
  $281 = $8;
  $282 = HEAP32[$281>>2]|0;
  $283 = $13;
  $284 = $6;
  $285 = HEAP32[$284>>2]|0;
  $286 = (($283) - ($285))|0;
  $287 = (($282) + ($286))|0;
  $288 = $8;
  HEAP32[$288>>2] = $287;
  $289 = $13;
  $290 = (($289) + 1)|0;
  $291 = $6;
  HEAP32[$291>>2] = $290;
  $292 = $13;
  $293 = $6;
  $294 = ((($293)) + 4|0);
  $295 = HEAP32[$294>>2]|0;
  $296 = ($292|0)<($295|0);
  if ($296) {
   label = 37;
   break;
  }
 }
 if ((label|0) == 9) {
  $59 = $6;
  $60 = ((($59)) + 8|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $61 & -4;
  $63 = $62 | 1;
  HEAP32[$60>>2] = $63;
 }
 else if ((label|0) == 37) {
  $297 = $9;
  $298 = ($297|0)!=(0|0);
  if ($298) {
   $299 = $13;
   $300 = $6;
   $301 = ((($300)) + 28|0);
   $302 = HEAP32[$301>>2]|0;
   $303 = (($302) + ($299)|0);
   $304 = HEAP8[$303>>0]|0;
   $305 = $304&255;
   $306 = $9;
   HEAP32[$306>>2] = $305;
  }
 }
 $307 = $11;
 $308 = ($307|0)!=(0);
 if (!($308)) {
  $309 = $6;
  $310 = ((($309)) + 8|0);
  $311 = HEAP32[$310>>2]|0;
  $312 = $311 << 30;
  $313 = $312 >> 30;
  $314 = ($313|0)!=(0);
  if ($314) {
   $315 = $6;
   $316 = HEAP32[$315>>2]|0;
   $317 = $6;
   $318 = ((($317)) + 4|0);
   $319 = HEAP32[$318>>2]|0;
   $320 = ($316|0)>=($319|0);
   if ($320) {
    $5 = -1;
    $376 = $5;
    STACKTOP = sp;return ($376|0);
   }
  }
 }
 $321 = $12;
 $322 = $321;
 $323 = HEAP32[$322>>2]|0;
 $324 = (($321) + 4)|0;
 $325 = $324;
 $326 = HEAP32[$325>>2]|0;
 $327 = $6;
 $328 = ((($327)) + 16|0);
 $329 = $328;
 $330 = $329;
 $331 = HEAP32[$330>>2]|0;
 $332 = (($329) + 4)|0;
 $333 = $332;
 $334 = HEAP32[$333>>2]|0;
 $335 = (_i64Add(($331|0),($334|0),($323|0),($326|0))|0);
 $336 = tempRet0;
 $337 = $328;
 $338 = $337;
 HEAP32[$338>>2] = $335;
 $339 = (($337) + 4)|0;
 $340 = $339;
 HEAP32[$340>>2] = $336;
 $341 = $8;
 $342 = ((($341)) + 8|0);
 $343 = HEAP32[$342>>2]|0;
 $344 = ($343|0)==(0|0);
 if ($344) {
  $345 = $8;
  $346 = ((($345)) + 4|0);
  HEAP32[$346>>2] = 1;
  $347 = (_calloc(1,1)|0);
  $348 = $8;
  $349 = ((($348)) + 8|0);
  HEAP32[$349>>2] = $347;
 } else {
  $350 = $7;
  $351 = ($350|0)==(2);
  if ($351) {
   $352 = $8;
   $353 = HEAP32[$352>>2]|0;
   $354 = ($353>>>0)>(1);
   if ($354) {
    $355 = $8;
    $356 = HEAP32[$355>>2]|0;
    $357 = (($356) - 1)|0;
    $358 = $8;
    $359 = ((($358)) + 8|0);
    $360 = HEAP32[$359>>2]|0;
    $361 = (($360) + ($357)|0);
    $362 = HEAP8[$361>>0]|0;
    $363 = $362 << 24 >> 24;
    $364 = ($363|0)==(13);
    if ($364) {
     $365 = $8;
     $366 = HEAP32[$365>>2]|0;
     $367 = (($366) + -1)|0;
     HEAP32[$365>>2] = $367;
    }
   }
  }
 }
 $368 = $8;
 $369 = HEAP32[$368>>2]|0;
 $370 = $8;
 $371 = ((($370)) + 8|0);
 $372 = HEAP32[$371>>2]|0;
 $373 = (($372) + ($369)|0);
 HEAP8[$373>>0] = 0;
 $374 = $8;
 $375 = HEAP32[$374>>2]|0;
 $5 = $375;
 $376 = $5;
 STACKTOP = sp;return ($376|0);
}
function _kh_init_s2i() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,28)|0);
 return ($0|0);
}
function _kh_destroy_s2i($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _kh_get_s2i($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $2 = 0;
  $85 = $2;
  STACKTOP = sp;return ($85|0);
 }
 $9 = 0;
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - 1)|0;
 $8 = $15;
 $16 = $4;
 $17 = (___ac_X31_hash_string_47($16)|0);
 $5 = $17;
 $18 = $5;
 $19 = $8;
 $20 = $18 & $19;
 $6 = $20;
 $21 = $6;
 $7 = $21;
 while(1) {
  $22 = $6;
  $23 = $22 >>> 4;
  $24 = $3;
  $25 = ((($24)) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + ($23<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $6;
  $30 = $29 & 15;
  $31 = $30 << 1;
  $32 = $28 >>> $31;
  $33 = $32 & 2;
  $34 = ($33|0)!=(0);
  if ($34) {
   $86 = 0;
  } else {
   $35 = $6;
   $36 = $35 >>> 4;
   $37 = $3;
   $38 = ((($37)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + ($36<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $6;
   $43 = $42 & 15;
   $44 = $43 << 1;
   $45 = $41 >>> $44;
   $46 = $45 & 1;
   $47 = ($46|0)!=(0);
   if ($47) {
    $86 = 1;
   } else {
    $48 = $6;
    $49 = $3;
    $50 = ((($49)) + 20|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($51) + ($48<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $4;
    $55 = (_strcmp($53,$54)|0);
    $56 = ($55|0)==(0);
    $57 = $56 ^ 1;
    $86 = $57;
   }
  }
  $58 = $6;
  if (!($86)) {
   break;
  }
  $59 = $9;
  $60 = (($59) + 1)|0;
  $9 = $60;
  $61 = (($58) + ($60))|0;
  $62 = $8;
  $63 = $61 & $62;
  $6 = $63;
  $64 = $6;
  $65 = $7;
  $66 = ($64|0)==($65|0);
  if ($66) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  $67 = $3;
  $68 = HEAP32[$67>>2]|0;
  $2 = $68;
  $85 = $2;
  STACKTOP = sp;return ($85|0);
 }
 $69 = $58 >>> 4;
 $70 = $3;
 $71 = ((($70)) + 16|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($72) + ($69<<2)|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $6;
 $76 = $75 & 15;
 $77 = $76 << 1;
 $78 = $74 >>> $77;
 $79 = $78 & 3;
 $80 = ($79|0)!=(0);
 if ($80) {
  $81 = $3;
  $82 = HEAP32[$81>>2]|0;
  $84 = $82;
 } else {
  $83 = $6;
  $84 = $83;
 }
 $2 = $84;
 $85 = $2;
 STACKTOP = sp;return ($85|0);
}
function ___ac_X31_hash_string_47($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 << 24 >> 24;
 $2 = $5;
 $6 = $2;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 $8 = $1;
 $9 = ((($8)) + 1|0);
 $1 = $9;
 while(1) {
  $10 = $1;
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)!=(0);
  if (!($12)) {
   break;
  }
  $13 = $2;
  $14 = $13 << 5;
  $15 = $2;
  $16 = (($14) - ($15))|0;
  $17 = $1;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = (($16) + ($19))|0;
  $2 = $20;
  $21 = $1;
  $22 = ((($21)) + 1|0);
  $1 = $22;
 }
 $23 = $2;
 STACKTOP = sp;return ($23|0);
}
function _kh_resize_s2i($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $10 = sp + 8|0;
 $16 = sp;
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = 1;
 $17 = $4;
 $18 = (($17) + -1)|0;
 $4 = $18;
 $19 = $4;
 $20 = $19 >>> 1;
 $21 = $4;
 $22 = $21 | $20;
 $4 = $22;
 $23 = $4;
 $24 = $23 >>> 2;
 $25 = $4;
 $26 = $25 | $24;
 $4 = $26;
 $27 = $4;
 $28 = $27 >>> 4;
 $29 = $4;
 $30 = $29 | $28;
 $4 = $30;
 $31 = $4;
 $32 = $31 >>> 8;
 $33 = $4;
 $34 = $33 | $32;
 $4 = $34;
 $35 = $4;
 $36 = $35 >>> 16;
 $37 = $4;
 $38 = $37 | $36;
 $4 = $38;
 $39 = $4;
 $40 = (($39) + 1)|0;
 $4 = $40;
 $41 = $4;
 $42 = ($41>>>0)<(4);
 $$ = $42 ? 4 : $40;
 $4 = $$;
 $43 = $3;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $4;
 $47 = (+($46>>>0));
 $48 = $47 * 0.77000000000000001;
 $49 = $48 + 0.5;
 $50 = (~~(($49))>>>0);
 $51 = ($45>>>0)>=($50>>>0);
 do {
  if ($51) {
   $6 = 0;
  } else {
   $52 = $4;
   $53 = ($52>>>0)<(16);
   $54 = $4;
   $55 = $54 >>> 4;
   $56 = $53 ? 1 : $55;
   $57 = $56<<2;
   $58 = (_malloc($57)|0);
   $5 = $58;
   $59 = $5;
   $60 = ($59|0)!=(0|0);
   if (!($60)) {
    $2 = -1;
    $329 = $2;
    STACKTOP = sp;return ($329|0);
   }
   $61 = $5;
   $62 = $4;
   $63 = ($62>>>0)<(16);
   $64 = $4;
   $65 = $64 >>> 4;
   $66 = $63 ? 1 : $65;
   $67 = $66<<2;
   _memset(($61|0),-86,($67|0))|0;
   $68 = $3;
   $69 = HEAP32[$68>>2]|0;
   $70 = $4;
   $71 = ($69>>>0)<($70>>>0);
   if ($71) {
    $72 = $3;
    $73 = ((($72)) + 20|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $4;
    $76 = $75<<2;
    $77 = (_realloc($74,$76)|0);
    $7 = $77;
    $78 = $7;
    $79 = ($78|0)!=(0|0);
    if (!($79)) {
     $80 = $5;
     _free($80);
     $2 = -1;
     $329 = $2;
     STACKTOP = sp;return ($329|0);
    }
    $81 = $7;
    $82 = $3;
    $83 = ((($82)) + 20|0);
    HEAP32[$83>>2] = $81;
    $84 = $3;
    $85 = ((($84)) + 24|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $4;
    $88 = $87<<3;
    $89 = (_realloc($86,$88)|0);
    $8 = $89;
    $90 = $8;
    $91 = ($90|0)!=(0|0);
    if ($91) {
     $93 = $8;
     $94 = $3;
     $95 = ((($94)) + 24|0);
     HEAP32[$95>>2] = $93;
     break;
    }
    $92 = $5;
    _free($92);
    $2 = -1;
    $329 = $2;
    STACKTOP = sp;return ($329|0);
   }
  }
 } while(0);
 $96 = $6;
 $97 = ($96|0)!=(0);
 if ($97) {
  $6 = 0;
  while(1) {
   $98 = $6;
   $99 = $3;
   $100 = HEAP32[$99>>2]|0;
   $101 = ($98|0)!=($100|0);
   if (!($101)) {
    break;
   }
   $102 = $6;
   $103 = $102 >>> 4;
   $104 = $3;
   $105 = ((($104)) + 16|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + ($103<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $6;
   $110 = $109 & 15;
   $111 = $110 << 1;
   $112 = $108 >>> $111;
   $113 = $112 & 3;
   $114 = ($113|0)==(0);
   if ($114) {
    $115 = $6;
    $116 = $3;
    $117 = ((($116)) + 20|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (($118) + ($115<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $9 = $120;
    $121 = $4;
    $122 = (($121) - 1)|0;
    $11 = $122;
    $123 = $6;
    $124 = $3;
    $125 = ((($124)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = (($126) + ($123<<3)|0);
    $128 = $127;
    $129 = $128;
    $130 = HEAP32[$129>>2]|0;
    $131 = (($128) + 4)|0;
    $132 = $131;
    $133 = HEAP32[$132>>2]|0;
    $134 = $10;
    $135 = $134;
    HEAP32[$135>>2] = $130;
    $136 = (($134) + 4)|0;
    $137 = $136;
    HEAP32[$137>>2] = $133;
    $138 = $6;
    $139 = $138 & 15;
    $140 = $139 << 1;
    $141 = 1 << $140;
    $142 = $6;
    $143 = $142 >>> 4;
    $144 = $3;
    $145 = ((($144)) + 16|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = (($146) + ($143<<2)|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = $148 | $141;
    HEAP32[$147>>2] = $149;
    while(1) {
     $14 = 0;
     $150 = $9;
     $151 = (___ac_X31_hash_string_47($150)|0);
     $12 = $151;
     $152 = $12;
     $153 = $11;
     $154 = $152 & $153;
     $13 = $154;
     while(1) {
      $155 = $13;
      $156 = $155 >>> 4;
      $157 = $5;
      $158 = (($157) + ($156<<2)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = $13;
      $161 = $160 & 15;
      $162 = $161 << 1;
      $163 = $159 >>> $162;
      $164 = $163 & 2;
      $165 = ($164|0)!=(0);
      $166 = $165 ^ 1;
      $167 = $13;
      if (!($166)) {
       break;
      }
      $168 = $14;
      $169 = (($168) + 1)|0;
      $14 = $169;
      $170 = (($167) + ($169))|0;
      $171 = $11;
      $172 = $170 & $171;
      $13 = $172;
     }
     $173 = $167 & 15;
     $174 = $173 << 1;
     $175 = 2 << $174;
     $176 = $175 ^ -1;
     $177 = $13;
     $178 = $177 >>> 4;
     $179 = $5;
     $180 = (($179) + ($178<<2)|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = $181 & $176;
     HEAP32[$180>>2] = $182;
     $183 = $13;
     $184 = $3;
     $185 = HEAP32[$184>>2]|0;
     $186 = ($183>>>0)<($185>>>0);
     if (!($186)) {
      break;
     }
     $187 = $13;
     $188 = $187 >>> 4;
     $189 = $3;
     $190 = ((($189)) + 16|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (($191) + ($188<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = $13;
     $195 = $194 & 15;
     $196 = $195 << 1;
     $197 = $193 >>> $196;
     $198 = $197 & 3;
     $199 = ($198|0)==(0);
     if (!($199)) {
      break;
     }
     $200 = $13;
     $201 = $3;
     $202 = ((($201)) + 20|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = (($203) + ($200<<2)|0);
     $205 = HEAP32[$204>>2]|0;
     $15 = $205;
     $206 = $9;
     $207 = $13;
     $208 = $3;
     $209 = ((($208)) + 20|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = (($210) + ($207<<2)|0);
     HEAP32[$211>>2] = $206;
     $212 = $15;
     $9 = $212;
     $213 = $13;
     $214 = $3;
     $215 = ((($214)) + 24|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = (($216) + ($213<<3)|0);
     $218 = $217;
     $219 = $218;
     $220 = HEAP32[$219>>2]|0;
     $221 = (($218) + 4)|0;
     $222 = $221;
     $223 = HEAP32[$222>>2]|0;
     $224 = $16;
     $225 = $224;
     HEAP32[$225>>2] = $220;
     $226 = (($224) + 4)|0;
     $227 = $226;
     HEAP32[$227>>2] = $223;
     $228 = $10;
     $229 = $228;
     $230 = HEAP32[$229>>2]|0;
     $231 = (($228) + 4)|0;
     $232 = $231;
     $233 = HEAP32[$232>>2]|0;
     $234 = $13;
     $235 = $3;
     $236 = ((($235)) + 24|0);
     $237 = HEAP32[$236>>2]|0;
     $238 = (($237) + ($234<<3)|0);
     $239 = $238;
     $240 = $239;
     HEAP32[$240>>2] = $230;
     $241 = (($239) + 4)|0;
     $242 = $241;
     HEAP32[$242>>2] = $233;
     $243 = $16;
     $244 = $243;
     $245 = HEAP32[$244>>2]|0;
     $246 = (($243) + 4)|0;
     $247 = $246;
     $248 = HEAP32[$247>>2]|0;
     $249 = $10;
     $250 = $249;
     HEAP32[$250>>2] = $245;
     $251 = (($249) + 4)|0;
     $252 = $251;
     HEAP32[$252>>2] = $248;
     $253 = $13;
     $254 = $253 & 15;
     $255 = $254 << 1;
     $256 = 1 << $255;
     $257 = $13;
     $258 = $257 >>> 4;
     $259 = $3;
     $260 = ((($259)) + 16|0);
     $261 = HEAP32[$260>>2]|0;
     $262 = (($261) + ($258<<2)|0);
     $263 = HEAP32[$262>>2]|0;
     $264 = $263 | $256;
     HEAP32[$262>>2] = $264;
    }
    $265 = $9;
    $266 = $13;
    $267 = $3;
    $268 = ((($267)) + 20|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = (($269) + ($266<<2)|0);
    HEAP32[$270>>2] = $265;
    $271 = $10;
    $272 = $271;
    $273 = HEAP32[$272>>2]|0;
    $274 = (($271) + 4)|0;
    $275 = $274;
    $276 = HEAP32[$275>>2]|0;
    $277 = $13;
    $278 = $3;
    $279 = ((($278)) + 24|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = (($280) + ($277<<3)|0);
    $282 = $281;
    $283 = $282;
    HEAP32[$283>>2] = $273;
    $284 = (($282) + 4)|0;
    $285 = $284;
    HEAP32[$285>>2] = $276;
   }
   $286 = $6;
   $287 = (($286) + 1)|0;
   $6 = $287;
  }
  $288 = $3;
  $289 = HEAP32[$288>>2]|0;
  $290 = $4;
  $291 = ($289>>>0)>($290>>>0);
  if ($291) {
   $292 = $3;
   $293 = ((($292)) + 20|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = $4;
   $296 = $295<<2;
   $297 = (_realloc($294,$296)|0);
   $298 = $3;
   $299 = ((($298)) + 20|0);
   HEAP32[$299>>2] = $297;
   $300 = $3;
   $301 = ((($300)) + 24|0);
   $302 = HEAP32[$301>>2]|0;
   $303 = $4;
   $304 = $303<<3;
   $305 = (_realloc($302,$304)|0);
   $306 = $3;
   $307 = ((($306)) + 24|0);
   HEAP32[$307>>2] = $305;
  }
  $308 = $3;
  $309 = ((($308)) + 16|0);
  $310 = HEAP32[$309>>2]|0;
  _free($310);
  $311 = $5;
  $312 = $3;
  $313 = ((($312)) + 16|0);
  HEAP32[$313>>2] = $311;
  $314 = $4;
  $315 = $3;
  HEAP32[$315>>2] = $314;
  $316 = $3;
  $317 = ((($316)) + 4|0);
  $318 = HEAP32[$317>>2]|0;
  $319 = $3;
  $320 = ((($319)) + 8|0);
  HEAP32[$320>>2] = $318;
  $321 = $3;
  $322 = HEAP32[$321>>2]|0;
  $323 = (+($322>>>0));
  $324 = $323 * 0.77000000000000001;
  $325 = $324 + 0.5;
  $326 = (~~(($325))>>>0);
  $327 = $3;
  $328 = ((($327)) + 12|0);
  HEAP32[$328>>2] = $326;
 }
 $2 = 0;
 $329 = $2;
 STACKTOP = sp;return ($329|0);
}
function _kh_put_s2i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $4;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16>>>0)>=($19>>>0);
 do {
  if ($20) {
   $21 = $4;
   $22 = HEAP32[$21>>2]|0;
   $23 = $4;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 << 1;
   $27 = ($22>>>0)>($26>>>0);
   $28 = $4;
   $29 = $4;
   $30 = HEAP32[$29>>2]|0;
   if ($27) {
    $31 = (($30) - 1)|0;
    $32 = (_kh_resize_s2i($28,$31)|0);
    $33 = ($32|0)<(0);
    if (!($33)) {
     break;
    }
    $34 = $6;
    HEAP32[$34>>2] = -1;
    $35 = $4;
    $36 = HEAP32[$35>>2]|0;
    $3 = $36;
    $230 = $3;
    STACKTOP = sp;return ($230|0);
   } else {
    $37 = (($30) + 1)|0;
    $38 = (_kh_resize_s2i($28,$37)|0);
    $39 = ($38|0)<(0);
    if (!($39)) {
     break;
    }
    $40 = $6;
    HEAP32[$40>>2] = -1;
    $41 = $4;
    $42 = HEAP32[$41>>2]|0;
    $3 = $42;
    $230 = $3;
    STACKTOP = sp;return ($230|0);
   }
  }
 } while(0);
 $43 = $4;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) - 1)|0;
 $12 = $45;
 $13 = 0;
 $46 = $4;
 $47 = HEAP32[$46>>2]|0;
 $10 = $47;
 $7 = $47;
 $48 = $5;
 $49 = (___ac_X31_hash_string_47($48)|0);
 $8 = $49;
 $50 = $8;
 $51 = $12;
 $52 = $50 & $51;
 $9 = $52;
 $53 = $9;
 $54 = $53 >>> 4;
 $55 = $4;
 $56 = ((($55)) + 16|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) + ($54<<2)|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $9;
 $61 = $60 & 15;
 $62 = $61 << 1;
 $63 = $59 >>> $62;
 $64 = $63 & 2;
 $65 = ($64|0)!=(0);
 $66 = $9;
 do {
  if ($65) {
   $7 = $66;
  } else {
   $11 = $66;
   while(1) {
    $67 = $9;
    $68 = $67 >>> 4;
    $69 = $4;
    $70 = ((($69)) + 16|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($71) + ($68<<2)|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $9;
    $75 = $74 & 15;
    $76 = $75 << 1;
    $77 = $73 >>> $76;
    $78 = $77 & 2;
    $79 = ($78|0)!=(0);
    if ($79) {
     break;
    }
    $80 = $9;
    $81 = $80 >>> 4;
    $82 = $4;
    $83 = ((($82)) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($84) + ($81<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $9;
    $88 = $87 & 15;
    $89 = $88 << 1;
    $90 = $86 >>> $89;
    $91 = $90 & 1;
    $92 = ($91|0)!=(0);
    if (!($92)) {
     $93 = $9;
     $94 = $4;
     $95 = ((($94)) + 20|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = (($96) + ($93<<2)|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $5;
     $100 = (_strcmp($98,$99)|0);
     $101 = ($100|0)==(0);
     $102 = $101 ^ 1;
     if (!($102)) {
      break;
     }
    }
    $103 = $9;
    $104 = $103 >>> 4;
    $105 = $4;
    $106 = ((($105)) + 16|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (($107) + ($104<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $9;
    $111 = $110 & 15;
    $112 = $111 << 1;
    $113 = $109 >>> $112;
    $114 = $113 & 1;
    $115 = ($114|0)!=(0);
    if ($115) {
     $116 = $9;
     $10 = $116;
    }
    $117 = $9;
    $118 = $13;
    $119 = (($118) + 1)|0;
    $13 = $119;
    $120 = (($117) + ($119))|0;
    $121 = $12;
    $122 = $120 & $121;
    $9 = $122;
    $123 = $9;
    $124 = $11;
    $125 = ($123|0)==($124|0);
    if ($125) {
     label = 16;
     break;
    }
   }
   if ((label|0) == 16) {
    $126 = $10;
    $7 = $126;
   }
   $127 = $7;
   $128 = $4;
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = $9;
    $132 = $131 >>> 4;
    $133 = $4;
    $134 = ((($133)) + 16|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + ($132<<2)|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $9;
    $139 = $138 & 15;
    $140 = $139 << 1;
    $141 = $137 >>> $140;
    $142 = $141 & 2;
    $143 = ($142|0)!=(0);
    if ($143) {
     $144 = $10;
     $145 = $4;
     $146 = HEAP32[$145>>2]|0;
     $147 = ($144|0)!=($146|0);
     if ($147) {
      $148 = $10;
      $7 = $148;
      break;
     }
    }
    $149 = $9;
    $7 = $149;
   }
  }
 } while(0);
 $150 = $7;
 $151 = $150 >>> 4;
 $152 = $4;
 $153 = ((($152)) + 16|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = (($154) + ($151<<2)|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $7;
 $158 = $157 & 15;
 $159 = $158 << 1;
 $160 = $156 >>> $159;
 $161 = $160 & 2;
 $162 = ($161|0)!=(0);
 do {
  if ($162) {
   $163 = $5;
   $164 = $7;
   $165 = $4;
   $166 = ((($165)) + 20|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = (($167) + ($164<<2)|0);
   HEAP32[$168>>2] = $163;
   $169 = $7;
   $170 = $169 & 15;
   $171 = $170 << 1;
   $172 = 3 << $171;
   $173 = $172 ^ -1;
   $174 = $7;
   $175 = $174 >>> 4;
   $176 = $4;
   $177 = ((($176)) + 16|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = (($178) + ($175<<2)|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $180 & $173;
   HEAP32[$179>>2] = $181;
   $182 = $4;
   $183 = ((($182)) + 4|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (($184) + 1)|0;
   HEAP32[$183>>2] = $185;
   $186 = $4;
   $187 = ((($186)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = (($188) + 1)|0;
   HEAP32[$187>>2] = $189;
   $190 = $6;
   HEAP32[$190>>2] = 1;
  } else {
   $191 = $7;
   $192 = $191 >>> 4;
   $193 = $4;
   $194 = ((($193)) + 16|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = (($195) + ($192<<2)|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $7;
   $199 = $198 & 15;
   $200 = $199 << 1;
   $201 = $197 >>> $200;
   $202 = $201 & 1;
   $203 = ($202|0)!=(0);
   if ($203) {
    $204 = $5;
    $205 = $7;
    $206 = $4;
    $207 = ((($206)) + 20|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = (($208) + ($205<<2)|0);
    HEAP32[$209>>2] = $204;
    $210 = $7;
    $211 = $210 & 15;
    $212 = $211 << 1;
    $213 = 3 << $212;
    $214 = $213 ^ -1;
    $215 = $7;
    $216 = $215 >>> 4;
    $217 = $4;
    $218 = ((($217)) + 16|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = (($219) + ($216<<2)|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = $221 & $214;
    HEAP32[$220>>2] = $222;
    $223 = $4;
    $224 = ((($223)) + 4|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = (($225) + 1)|0;
    HEAP32[$224>>2] = $226;
    $227 = $6;
    HEAP32[$227>>2] = 2;
    break;
   } else {
    $228 = $6;
    HEAP32[$228>>2] = 0;
    break;
   }
  }
 } while(0);
 $229 = $7;
 $3 = $229;
 $230 = $3;
 STACKTOP = sp;return ($230|0);
}
function _hts_detect_format($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = (_hpeek($7,$5,18)|0);
 $6 = $8;
 $9 = $6;
 $10 = ($9|0)<(0);
 if ($10) {
  $2 = -1;
  $226 = $2;
  STACKTOP = sp;return ($226|0);
 }
 $11 = $6;
 $12 = ($11|0)>=(2);
 if ($12) {
  $13 = HEAP8[$5>>0]|0;
  $14 = $13&255;
  $15 = ($14|0)==(31);
  if ($15) {
   $16 = ((($5)) + 1|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = ($18|0)==(139);
   if ($19) {
    $20 = $6;
    $21 = ($20|0)>=(18);
    if ($21) {
     $22 = ((($5)) + 3|0);
     $23 = HEAP8[$22>>0]|0;
     $24 = $23&255;
     $25 = $24 & 4;
     $26 = ($25|0)!=(0);
     if ($26) {
      $27 = ((($5)) + 12|0);
      $28 = (_memcmp($27,19081,4)|0);
      $29 = ($28|0)==(0);
      $30 = $29;
     } else {
      $30 = 0;
     }
    } else {
     $30 = 0;
    }
    $31 = $30 ? 2 : 1;
    $32 = $4;
    $33 = ((($32)) + 12|0);
    HEAP32[$33>>2] = $31;
    $34 = $3;
    $35 = (_decompress_peek($34,$5,21)|0);
    $6 = $35;
   } else {
    label = 10;
   }
  } else {
   label = 10;
  }
 } else {
  label = 10;
 }
 if ((label|0) == 10) {
  $36 = $4;
  $37 = ((($36)) + 12|0);
  HEAP32[$37>>2] = 0;
  $38 = $3;
  $39 = (_hpeek($38,$5,21)|0);
  $6 = $39;
 }
 $40 = $6;
 $41 = ($40|0)<(0);
 if ($41) {
  $2 = -1;
  $226 = $2;
  STACKTOP = sp;return ($226|0);
 }
 $42 = $4;
 $43 = ((($42)) + 16|0);
 HEAP16[$43>>1] = -1;
 $44 = $4;
 $45 = ((($44)) + 20|0);
 HEAP32[$45>>2] = 0;
 $46 = $6;
 $47 = ($46|0)>=(6);
 if ($47) {
  $48 = (_memcmp($5,16966,4)|0);
  $49 = ($48|0)==(0);
  if ($49) {
   $50 = ((($5)) + 4|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $53 = ($52|0)>=(1);
   if ($53) {
    $54 = ((($5)) + 4|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $57 = ($56|0)<=(3);
    if ($57) {
     $58 = ((($5)) + 5|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = $59&255;
     $61 = ($60|0)<=(1);
     if ($61) {
      $62 = $4;
      HEAP32[$62>>2] = 1;
      $63 = $4;
      $64 = ((($63)) + 4|0);
      HEAP32[$64>>2] = 6;
      $65 = ((($5)) + 4|0);
      $66 = HEAP8[$65>>0]|0;
      $67 = $66&255;
      $68 = $4;
      $69 = ((($68)) + 8|0);
      HEAP16[$69>>1] = $67;
      $70 = ((($5)) + 5|0);
      $71 = HEAP8[$70>>0]|0;
      $72 = $71&255;
      $73 = $4;
      $74 = ((($73)) + 8|0);
      $75 = ((($74)) + 2|0);
      HEAP16[$75>>1] = $72;
      $76 = $4;
      $77 = ((($76)) + 12|0);
      HEAP32[$77>>2] = 3;
      $2 = 0;
      $226 = $2;
      STACKTOP = sp;return ($226|0);
     }
    }
   }
  }
 }
 $78 = $6;
 $79 = ($78|0)>=(4);
 if ($79) {
  $80 = ((($5)) + 3|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = ($82|0)<=(4);
  if ($83) {
   $84 = (_memcmp($5,17750,4)|0);
   $85 = ($84|0)==(0);
   if ($85) {
    $86 = $4;
    HEAP32[$86>>2] = 1;
    $87 = $4;
    $88 = ((($87)) + 4|0);
    HEAP32[$88>>2] = 4;
    $89 = $4;
    $90 = ((($89)) + 8|0);
    HEAP16[$90>>1] = 1;
    $91 = $4;
    $92 = ((($91)) + 8|0);
    $93 = ((($92)) + 2|0);
    HEAP16[$93>>1] = -1;
    $2 = 0;
    $226 = $2;
    STACKTOP = sp;return ($226|0);
   }
   $94 = (_memcmp($5,16971,4)|0);
   $95 = ($94|0)==(0);
   if ($95) {
    $96 = $4;
    HEAP32[$96>>2] = 3;
    $97 = $4;
    $98 = ((($97)) + 4|0);
    HEAP32[$98>>2] = 5;
    $99 = $4;
    $100 = ((($99)) + 8|0);
    HEAP16[$100>>1] = -1;
    $101 = $4;
    $102 = ((($101)) + 8|0);
    $103 = ((($102)) + 2|0);
    HEAP16[$103>>1] = -1;
    $2 = 0;
    $226 = $2;
    STACKTOP = sp;return ($226|0);
   }
   $104 = (_memcmp($5,16976,4)|0);
   $105 = ($104|0)==(0);
   if ($105) {
    $106 = $4;
    HEAP32[$106>>2] = 2;
    $107 = $4;
    $108 = ((($107)) + 4|0);
    HEAP32[$108>>2] = 9;
    $109 = $4;
    $110 = ((($109)) + 8|0);
    HEAP16[$110>>1] = 1;
    $111 = $4;
    $112 = ((($111)) + 8|0);
    $113 = ((($112)) + 2|0);
    HEAP16[$113>>1] = -1;
    $2 = 0;
    $226 = $2;
    STACKTOP = sp;return ($226|0);
   }
   $114 = (_memcmp($5,16981,4)|0);
   $115 = ($114|0)==(0);
   if ($115) {
    $116 = $4;
    HEAP32[$116>>2] = 2;
    $117 = $4;
    $118 = ((($117)) + 4|0);
    HEAP32[$118>>2] = 9;
    $119 = ((($5)) + 3|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = $120&255;
    $122 = $4;
    $123 = ((($122)) + 8|0);
    HEAP16[$123>>1] = $121;
    $124 = $6;
    $125 = ($124|0)>=(5);
    if ($125) {
     $126 = ((($5)) + 4|0);
     $127 = HEAP8[$126>>0]|0;
     $128 = $127&255;
     $129 = ($128|0)<=(2);
     if ($129) {
      $130 = ((($5)) + 4|0);
      $131 = HEAP8[$130>>0]|0;
      $132 = $131&255;
      $134 = $132;
     } else {
      $134 = 0;
     }
    } else {
     $134 = 0;
    }
    $133 = $134&65535;
    $135 = $4;
    $136 = ((($135)) + 8|0);
    $137 = ((($136)) + 2|0);
    HEAP16[$137>>1] = $133;
    $2 = 0;
    $226 = $2;
    STACKTOP = sp;return ($226|0);
   }
   $138 = (_memcmp($5,16986,4)|0);
   $139 = ($138|0)==(0);
   if ($139) {
    $140 = $4;
    HEAP32[$140>>2] = 3;
    $141 = $4;
    $142 = ((($141)) + 4|0);
    HEAP32[$142>>2] = 10;
    $143 = $4;
    $144 = ((($143)) + 8|0);
    HEAP16[$144>>1] = 1;
    $145 = $4;
    $146 = ((($145)) + 8|0);
    $147 = ((($146)) + 2|0);
    HEAP16[$147>>1] = -1;
    $2 = 0;
    $226 = $2;
    STACKTOP = sp;return ($226|0);
   }
   $148 = (_memcmp($5,16991,4)|0);
   $149 = ($148|0)==(0);
   $150 = $4;
   if ($149) {
    HEAP32[$150>>2] = 3;
    $151 = $4;
    $152 = ((($151)) + 4|0);
    HEAP32[$152>>2] = 12;
    $153 = $4;
    $154 = ((($153)) + 8|0);
    HEAP16[$154>>1] = -1;
    $155 = $4;
    $156 = ((($155)) + 8|0);
    $157 = ((($156)) + 2|0);
    HEAP16[$157>>1] = -1;
    $2 = 0;
    $226 = $2;
    STACKTOP = sp;return ($226|0);
   } else {
    HEAP32[$150>>2] = 0;
    $217 = $4;
    $218 = ((($217)) + 4|0);
    HEAP32[$218>>2] = 0;
    $219 = $4;
    $220 = ((($219)) + 8|0);
    $221 = ((($220)) + 2|0);
    HEAP16[$221>>1] = -1;
    $222 = $4;
    $223 = ((($222)) + 8|0);
    HEAP16[$223>>1] = -1;
    $224 = $4;
    $225 = ((($224)) + 12|0);
    HEAP32[$225>>2] = 0;
    $2 = 0;
    $226 = $2;
    STACKTOP = sp;return ($226|0);
   }
  }
 }
 $158 = $6;
 $159 = ($158|0)>=(16);
 if ($159) {
  $160 = (_memcmp($5,16996,16)|0);
  $161 = ($160|0)==(0);
  if ($161) {
   $162 = $4;
   HEAP32[$162>>2] = 2;
   $163 = $4;
   $164 = ((($163)) + 4|0);
   HEAP32[$164>>2] = 8;
   $165 = $6;
   $166 = ($165|0)>=(21);
   if ($166) {
    $167 = ((($5)) + 16|0);
    $168 = HEAP8[$167>>0]|0;
    $169 = $168&255;
    $170 = ($169|0)==(118);
    if ($170) {
     $171 = $4;
     $172 = ((($5)) + 17|0);
     $173 = $6;
     $174 = (($5) + ($173)|0);
     _parse_version($171,$172,$174);
    } else {
     label = 41;
    }
   } else {
    label = 41;
   }
   if ((label|0) == 41) {
    $175 = $4;
    $176 = ((($175)) + 8|0);
    $177 = ((($176)) + 2|0);
    HEAP16[$177>>1] = -1;
    $178 = $4;
    $179 = ((($178)) + 8|0);
    HEAP16[$179>>1] = -1;
   }
   $2 = 0;
   $226 = $2;
   STACKTOP = sp;return ($226|0);
  }
 }
 $180 = $6;
 $181 = ($180|0)>=(4);
 do {
  if ($181) {
   $182 = HEAP8[$5>>0]|0;
   $183 = $182&255;
   $184 = ($183|0)==(64);
   if ($184) {
    $185 = (_memcmp($5,17013,4)|0);
    $186 = ($185|0)==(0);
    if (!($186)) {
     $187 = (_memcmp($5,17878,4)|0);
     $188 = ($187|0)==(0);
     if (!($188)) {
      $189 = (_memcmp($5,17018,4)|0);
      $190 = ($189|0)==(0);
      if (!($190)) {
       $191 = (_memcmp($5,17023,4)|0);
       $192 = ($191|0)==(0);
       if (!($192)) {
        break;
       }
      }
     }
    }
    $193 = $4;
    HEAP32[$193>>2] = 1;
    $194 = $4;
    $195 = ((($194)) + 4|0);
    HEAP32[$195>>2] = 3;
    $196 = $6;
    $197 = ($196|0)>=(9);
    if ($197) {
     $198 = (_memcmp($5,17028,7)|0);
     $199 = ($198|0)==(0);
     if ($199) {
      $200 = $4;
      $201 = ((($5)) + 7|0);
      $202 = $6;
      $203 = (($5) + ($202)|0);
      _parse_version($200,$201,$203);
     } else {
      label = 52;
     }
    } else {
     label = 52;
    }
    if ((label|0) == 52) {
     $204 = $4;
     $205 = ((($204)) + 8|0);
     HEAP16[$205>>1] = 1;
     $206 = $4;
     $207 = ((($206)) + 8|0);
     $208 = ((($207)) + 2|0);
     HEAP16[$208>>1] = -1;
    }
    $2 = 0;
    $226 = $2;
    STACKTOP = sp;return ($226|0);
   }
  }
 } while(0);
 $209 = $4;
 HEAP32[$209>>2] = 1;
 $210 = $4;
 $211 = ((($210)) + 4|0);
 HEAP32[$211>>2] = 3;
 $212 = $4;
 $213 = ((($212)) + 8|0);
 HEAP16[$213>>1] = 1;
 $214 = $4;
 $215 = ((($214)) + 8|0);
 $216 = ((($215)) + 2|0);
 HEAP16[$216>>1] = -1;
 $2 = 0;
 $226 = $2;
 STACKTOP = sp;return ($226|0);
}
function _decompress_peek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(592|0);
 $7 = sp + 80|0;
 $8 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = (_hpeek($10,$7,512)|0);
 $9 = $11;
 $12 = $9;
 $13 = ($12|0)<(0);
 if ($13) {
  $3 = 0;
  $33 = $3;
  STACKTOP = sp;return ($33|0);
 }
 $14 = ((($8)) + 32|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($8)) + 36|0);
 HEAP32[$15>>2] = 0;
 HEAP32[$8>>2] = $7;
 $16 = $9;
 $17 = ((($8)) + 4|0);
 HEAP32[$17>>2] = $16;
 $18 = $5;
 $19 = ((($8)) + 12|0);
 HEAP32[$19>>2] = $18;
 $20 = $6;
 $21 = ((($8)) + 16|0);
 HEAP32[$21>>2] = $20;
 $22 = (_inflateInit2_($8,31,18804,56)|0);
 $23 = ($22|0)!=(0);
 if ($23) {
  $3 = 0;
  $33 = $3;
  STACKTOP = sp;return ($33|0);
 }
 while(1) {
  $24 = ((($8)) + 20|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $6;
  $27 = ($25>>>0)<($26>>>0);
  if (!($27)) {
   break;
  }
  $28 = (_inflate($8,2)|0);
  $29 = ($28|0)!=(0);
  if ($29) {
   break;
  }
 }
 $30 = ((($8)) + 20|0);
 $31 = HEAP32[$30>>2]|0;
 $6 = $31;
 (_inflateEnd($8)|0);
 $32 = $6;
 $3 = $32;
 $33 = $3;
 STACKTOP = sp;return ($33|0);
}
function _parse_version($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $4;
 $6 = $9;
 $10 = $5;
 $7 = $10;
 $11 = $3;
 $12 = ((($11)) + 8|0);
 $13 = ((($12)) + 2|0);
 HEAP16[$13>>1] = -1;
 $14 = $3;
 $15 = ((($14)) + 8|0);
 HEAP16[$15>>1] = -1;
 $8 = 0;
 while(1) {
  $16 = $6;
  $17 = $7;
  $18 = ($16>>>0)<($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = $6;
  $20 = HEAP8[$19>>0]|0;
  $21 = (_isdigit_c($20)|0);
  $22 = ($21|0)!=(0);
  if (!($22)) {
   break;
  }
  $23 = $8;
  $24 = $23 << 16 >> 16;
  $25 = ($24*10)|0;
  $26 = $6;
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = (($25) + ($28))|0;
  $30 = (($29) - 48)|0;
  $31 = $30&65535;
  $8 = $31;
  $32 = $6;
  $33 = ((($32)) + 1|0);
  $6 = $33;
 }
 $34 = $6;
 $35 = $7;
 $36 = ($34>>>0)<($35>>>0);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = $8;
 $38 = $3;
 $39 = ((($38)) + 8|0);
 HEAP16[$39>>1] = $37;
 $40 = $6;
 $41 = HEAP8[$40>>0]|0;
 $42 = $41 << 24 >> 24;
 $43 = ($42|0)==(46);
 if (!($43)) {
  $71 = $3;
  $72 = ((($71)) + 8|0);
  $73 = ((($72)) + 2|0);
  HEAP16[$73>>1] = 0;
  STACKTOP = sp;return;
 }
 $44 = $6;
 $45 = ((($44)) + 1|0);
 $6 = $45;
 $8 = 0;
 while(1) {
  $46 = $6;
  $47 = $7;
  $48 = ($46>>>0)<($47>>>0);
  if (!($48)) {
   break;
  }
  $49 = $6;
  $50 = HEAP8[$49>>0]|0;
  $51 = (_isdigit_c($50)|0);
  $52 = ($51|0)!=(0);
  if (!($52)) {
   break;
  }
  $53 = $8;
  $54 = $53 << 16 >> 16;
  $55 = ($54*10)|0;
  $56 = $6;
  $57 = HEAP8[$56>>0]|0;
  $58 = $57 << 24 >> 24;
  $59 = (($55) + ($58))|0;
  $60 = (($59) - 48)|0;
  $61 = $60&65535;
  $8 = $61;
  $62 = $6;
  $63 = ((($62)) + 1|0);
  $6 = $63;
 }
 $64 = $6;
 $65 = $7;
 $66 = ($64>>>0)<($65>>>0);
 if (!($66)) {
  STACKTOP = sp;return;
 }
 $67 = $8;
 $68 = $3;
 $69 = ((($68)) + 8|0);
 $70 = ((($69)) + 2|0);
 HEAP16[$70>>1] = $67;
 STACKTOP = sp;return;
}
function _isdigit_c($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2&255;
 $4 = (_isdigit($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _hts_open_format($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer = sp;
 $7 = sp + 46|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = 0;
 $13 = 0;
 $14 = $5;
 (_strncpy($7,$14,100)|0);
 $15 = ((($7)) + 100|0);
 HEAP8[$15>>0] = 0;
 $16 = (_strchr($7,44)|0);
 $8 = $16;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $8;
  HEAP8[$18>>0] = 0;
 }
 $8 = $7;
 $9 = $7;
 while(1) {
  $19 = $8;
  $20 = HEAP8[$19>>0]|0;
  $21 = ($20<<24>>24)!=(0);
  if (!($21)) {
   break;
  }
  $22 = $8;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $25 = ($24|0)==(98);
  do {
   if ($25) {
    $13 = 98;
   } else {
    $26 = $8;
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 << 24 >> 24;
    $29 = ($28|0)==(99);
    if ($29) {
     $13 = 99;
     break;
    } else {
     $30 = $8;
     $31 = HEAP8[$30>>0]|0;
     $32 = $9;
     $33 = ((($32)) + 1|0);
     $9 = $33;
     HEAP8[$32>>0] = $31;
     break;
    }
   }
  } while(0);
  $34 = $8;
  $35 = ((($34)) + 1|0);
  $8 = $35;
 }
 $36 = $9;
 $10 = $36;
 $37 = $13;
 $38 = $9;
 $39 = ((($38)) + 1|0);
 $9 = $39;
 HEAP8[$38>>0] = $37;
 $40 = $9;
 $41 = ((($40)) + 1|0);
 $9 = $41;
 HEAP8[$40>>0] = 0;
 $42 = $9;
 $43 = ((($42)) + 1|0);
 $9 = $43;
 HEAP8[$42>>0] = 0;
 $44 = $6;
 $45 = ($44|0)!=(0|0);
 if ($45) {
  $46 = $6;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)!=(0);
  if ($49) {
   $50 = $6;
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (17036 + ($52)|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $10;
   HEAP8[$55>>0] = $54;
  }
 }
 $56 = $4;
 $57 = (_hopen($56,$7)|0);
 $12 = $57;
 $58 = $12;
 $59 = ($58|0)==(0|0);
 do {
  if (!($59)) {
   $60 = $12;
   $61 = $4;
   $62 = (_hts_hopen($60,$61,$7)|0);
   $11 = $62;
   $63 = $11;
   $64 = ($63|0)==(0|0);
   if (!($64)) {
    $65 = $6;
    $66 = ($65|0)!=(0|0);
    if ($66) {
     $67 = $6;
     $68 = ((($67)) + 20|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)!=(0|0);
     if ($70) {
      $71 = $11;
      $72 = $6;
      $73 = ((($72)) + 20|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = (_hts_opt_apply($71,$74)|0);
      $76 = ($75|0)!=(0);
      if ($76) {
       break;
      }
     }
    }
    $77 = $11;
    $3 = $77;
    $84 = $3;
    STACKTOP = sp;return ($84|0);
   }
  }
 } while(0);
 $78 = (3)>=(2);
 if ($78) {
  $79 = HEAP32[2410]|0;
  $80 = $4;
  HEAP32[$vararg_buffer>>2] = 17083;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $80;
  (_fprintf($79,17051,$vararg_buffer)|0);
 }
 $81 = $12;
 $82 = ($81|0)!=(0|0);
 if ($82) {
  $83 = $12;
  _hclose_abruptly($83);
 }
 $3 = 0;
 $84 = $3;
 STACKTOP = sp;return ($84|0);
}
function _hts_hopen($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $8 = sp + 52|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $13 = (_calloc(1,64)|0);
 $7 = $13;
 $14 = ((($8)) + 100|0);
 HEAP8[$14>>0] = 0;
 $15 = $7;
 $16 = ($15|0)==(0|0);
 L1: do {
  if (!($16)) {
   $17 = $5;
   $18 = (___strdup($17)|0);
   $19 = $7;
   $20 = ((($19)) + 28|0);
   HEAP32[$20>>2] = $18;
   $21 = (_ed_is_big()|0);
   $22 = $7;
   $23 = HEAP32[$22>>2]|0;
   $24 = $21 & 1;
   $25 = $24 << 2;
   $26 = $23 & -5;
   $27 = $26 | $25;
   HEAP32[$22>>2] = $27;
   $28 = $6;
   $29 = (_strchr($28,44)|0);
   $9 = $29;
   $30 = ($29|0)!=(0|0);
   $31 = $6;
   if ($30) {
    $32 = $9;
    $33 = $6;
    $34 = $32;
    $35 = $33;
    $36 = (($34) - ($35))|0;
    $37 = ($36|0)<=(100);
    if ($37) {
     $38 = $9;
     $39 = $6;
     $40 = $38;
     $41 = $39;
     $42 = (($40) - ($41))|0;
     $43 = $42;
    } else {
     $43 = 100;
    }
    (_strncpy($8,$31,$43)|0);
    $44 = $9;
    $45 = $6;
    $46 = $44;
    $47 = $45;
    $48 = (($46) - ($47))|0;
    $49 = (($8) + ($48)|0);
    HEAP8[$49>>0] = 0;
    $50 = $9;
    $51 = ((($50)) + 1|0);
    $10 = $51;
   } else {
    (_strncpy($8,$31,100)|0);
    $10 = 0;
   }
   $52 = (_strchr($8,114)|0);
   $53 = ($52|0)!=(0|0);
   if ($53) {
    $54 = $4;
    $55 = $7;
    $56 = ((($55)) + 40|0);
    $57 = (_hts_detect_format($54,$56)|0);
    $58 = ($57|0)<(0);
    if ($58) {
     break;
    }
   } else {
    $59 = (_strchr($8,119)|0);
    $60 = ($59|0)!=(0|0);
    if (!($60)) {
     $61 = (_strchr($8,97)|0);
     $62 = ($61|0)!=(0|0);
     if (!($62)) {
      break;
     }
    }
    $63 = $7;
    $64 = ((($63)) + 40|0);
    $11 = $64;
    $65 = $7;
    $66 = HEAP32[$65>>2]|0;
    $67 = $66 & -3;
    $68 = $67 | 2;
    HEAP32[$65>>2] = $68;
    $69 = (_strchr($8,98)|0);
    $70 = ($69|0)!=(0|0);
    do {
     if ($70) {
      $71 = $11;
      $72 = ((($71)) + 4|0);
      HEAP32[$72>>2] = 1;
     } else {
      $73 = (_strchr($8,99)|0);
      $74 = ($73|0)!=(0|0);
      $75 = $11;
      $76 = ((($75)) + 4|0);
      if ($74) {
       HEAP32[$76>>2] = 6;
       break;
      } else {
       HEAP32[$76>>2] = 2;
       break;
      }
     }
    } while(0);
    $77 = (_strchr($8,122)|0);
    $78 = ($77|0)!=(0|0);
    L23: do {
     if ($78) {
      $79 = $11;
      $80 = ((($79)) + 12|0);
      HEAP32[$80>>2] = 2;
     } else {
      $81 = (_strchr($8,103)|0);
      $82 = ($81|0)!=(0|0);
      if ($82) {
       $83 = $11;
       $84 = ((($83)) + 12|0);
       HEAP32[$84>>2] = 1;
       break;
      }
      $85 = (_strchr($8,117)|0);
      $86 = ($85|0)!=(0|0);
      $87 = $11;
      if ($86) {
       $88 = ((($87)) + 12|0);
       HEAP32[$88>>2] = 0;
       break;
      }
      $89 = ((($87)) + 4|0);
      $90 = HEAP32[$89>>2]|0;
      switch ($90|0) {
      case 1:  {
       $91 = $11;
       $92 = ((($91)) + 12|0);
       HEAP32[$92>>2] = 2;
       break L23;
       break;
      }
      case 6:  {
       $93 = $11;
       $94 = ((($93)) + 12|0);
       HEAP32[$94>>2] = 3;
       break L23;
       break;
      }
      case 2:  {
       $95 = $11;
       $96 = ((($95)) + 12|0);
       HEAP32[$96>>2] = 0;
       break L23;
       break;
      }
      default: {
       _abort();
       // unreachable;
      }
      }
     }
    } while(0);
    $97 = $11;
    $98 = ((($97)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = (_format_category($99)|0);
    $101 = $11;
    HEAP32[$101>>2] = $100;
    $102 = $11;
    $103 = ((($102)) + 8|0);
    $104 = ((($103)) + 2|0);
    HEAP16[$104>>1] = -1;
    $105 = $11;
    $106 = ((($105)) + 8|0);
    HEAP16[$106>>1] = -1;
    $107 = $11;
    $108 = ((($107)) + 16|0);
    HEAP16[$108>>1] = -1;
    $109 = $11;
    $110 = ((($109)) + 20|0);
    HEAP32[$110>>2] = 0;
   }
   $111 = $7;
   $112 = ((($111)) + 40|0);
   $113 = ((($112)) + 4|0);
   $114 = HEAP32[$113>>2]|0;
   L39: do {
    switch ($114|0) {
    case 9: case 4: case 1:  {
     $115 = $4;
     $116 = (_bgzf_hopen($115,$8)|0);
     $117 = $7;
     $118 = ((($117)) + 36|0);
     HEAP32[$118>>2] = $116;
     $119 = $7;
     $120 = ((($119)) + 36|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = ($121|0)==(0|0);
     if ($122) {
      break L1;
     }
     $123 = $7;
     $124 = HEAP32[$123>>2]|0;
     $125 = $124 & -2;
     $126 = $125 | 1;
     HEAP32[$123>>2] = $126;
     break;
    }
    case 6:  {
     $127 = $4;
     $128 = $5;
     $129 = (_cram_dopen($127,$128,$8)|0);
     $130 = $7;
     $131 = ((($130)) + 36|0);
     HEAP32[$131>>2] = $129;
     $132 = $7;
     $133 = ((($132)) + 36|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($134|0)==(0|0);
     if ($135) {
      break L1;
     }
     $136 = $7;
     $137 = HEAP32[$136>>2]|0;
     $138 = $137 >>> 1;
     $139 = $138 & 1;
     $140 = ($139|0)!=(0);
     if (!($140)) {
      $141 = $7;
      $142 = ((($141)) + 36|0);
      $143 = HEAP32[$142>>2]|0;
      HEAP32[$vararg_buffer>>2] = 1;
      (_cram_set_option($143,0,$vararg_buffer)|0);
     }
     $144 = $7;
     $145 = HEAP32[$144>>2]|0;
     $146 = $145 & -9;
     $147 = $146 | 8;
     HEAP32[$144>>2] = $147;
     break;
    }
    case 8: case 3: case 2:  {
     $148 = $7;
     $149 = HEAP32[$148>>2]|0;
     $150 = $149 >>> 1;
     $151 = $150 & 1;
     $152 = ($151|0)!=(0);
     if (!($152)) {
      $153 = $4;
      $154 = (_bgzf_hopen($153,$8)|0);
      $12 = $154;
      $155 = $12;
      $156 = ($155|0)!=(0|0);
      if (!($156)) {
       break L1;
      }
      $157 = $12;
      $158 = (_ks_init($157)|0);
      $159 = $7;
      $160 = ((($159)) + 36|0);
      HEAP32[$160>>2] = $158;
      break L39;
     }
     $161 = $7;
     $162 = ((($161)) + 40|0);
     $163 = ((($162)) + 12|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = ($164|0)!=(0);
     $166 = $4;
     if ($165) {
      $167 = (_bgzf_hopen($166,$8)|0);
      $168 = $7;
      $169 = ((($168)) + 36|0);
      HEAP32[$169>>2] = $167;
      $170 = $7;
      $171 = ((($170)) + 36|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==(0|0);
      if ($173) {
       break L1;
      } else {
       break L39;
      }
     } else {
      $174 = $7;
      $175 = ((($174)) + 36|0);
      HEAP32[$175>>2] = $166;
      break L39;
     }
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
   $176 = $10;
   $177 = ($176|0)!=(0|0);
   if ($177) {
    $178 = $7;
    $179 = $10;
    (_hts_process_opts($178,$179)|0);
   }
   $180 = $7;
   $3 = $180;
   $193 = $3;
   STACKTOP = sp;return ($193|0);
  }
 } while(0);
 $181 = (3)>=(2);
 if ($181) {
  $182 = HEAP32[2410]|0;
  $183 = $5;
  HEAP32[$vararg_buffer1>>2] = 17099;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $183;
  (_fprintf($182,17051,$vararg_buffer1)|0);
 }
 $184 = $7;
 $185 = ($184|0)!=(0|0);
 if ($185) {
  $186 = $7;
  $187 = ((($186)) + 28|0);
  $188 = HEAP32[$187>>2]|0;
  _free($188);
  $189 = $7;
  $190 = ((($189)) + 32|0);
  $191 = HEAP32[$190>>2]|0;
  _free($191);
  $192 = $7;
  _free($192);
 }
 $3 = 0;
 $193 = $3;
 STACKTOP = sp;return ($193|0);
}
function _hts_opt_apply($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = 0;
 while(1) {
  $6 = $4;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $3;
  $9 = $4;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $4;
  $13 = ((($12)) + 8|0);
  ;HEAP8[$vararg_buffer>>0]=HEAP8[$13>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$13+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$13+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$13+3>>0]|0;
  $14 = (_hts_set_opt($8,$11,$vararg_buffer)|0);
  $15 = ($14|0)!=(0);
  if ($15) {
   label = 4;
   break;
  }
  $16 = $4;
  $5 = $16;
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $4 = $18;
 }
 if ((label|0) == 4) {
  $2 = -1;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 }
 else if ((label|0) == 6) {
  $2 = 0;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _hts_set_opt($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded3 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $9 = $4;
 $10 = ($9|0)==(101);
 if ($10) {
  HEAP32[$6>>2] = $varargs;
  $arglist_current = HEAP32[$6>>2]|0;
  $11 = $arglist_current;
  $12 = ((0) + 4|0);
  $expanded3 = $12;
  $expanded = (($expanded3) - 1)|0;
  $13 = (($11) + ($expanded))|0;
  $14 = ((0) + 4|0);
  $expanded7 = $14;
  $expanded6 = (($expanded7) - 1)|0;
  $expanded5 = $expanded6 ^ -1;
  $15 = $13 & $expanded5;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $arglist_next = ((($16)) + 4|0);
  HEAP32[$6>>2] = $arglist_next;
  $8 = $17;
  $18 = $8;
  $7 = $18;
  $19 = $3;
  $20 = $7;
  $21 = (_hts_set_threads($19,$20)|0);
  $2 = $21;
  $33 = $2;
  STACKTOP = sp;return ($33|0);
 }
 $22 = $3;
 $23 = ((($22)) + 40|0);
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(6);
 if ($26) {
  $2 = 0;
  $33 = $2;
  STACKTOP = sp;return ($33|0);
 } else {
  HEAP32[$6>>2] = $varargs;
  $27 = $3;
  $28 = ((($27)) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $4;
  $31 = (_cram_set_voption($29,$30,$6)|0);
  $5 = $31;
  $32 = $5;
  $2 = $32;
  $33 = $2;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _hts_set_threads($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ((($5)) + 40|0);
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(2);
 $10 = $3;
 if ($9) {
  $11 = ((($10)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $4;
  $14 = (_bgzf_mt($12,$13,256)|0);
  $2 = $14;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 }
 $15 = ((($10)) + 40|0);
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(6);
 if ($18) {
  $19 = $3;
  $20 = $4;
  HEAP32[$vararg_buffer>>2] = $20;
  $21 = (_hts_set_opt($19,14,$vararg_buffer)|0);
  $2 = $21;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 } else {
  $2 = 0;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _ed_is_big() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 HEAP32[$0>>2] = 1;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)!=(0);
 $3 = $2 ^ 1;
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function _format_category($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 switch ($3|0) {
 case 6: case 3: case 4:  {
  $1 = 1;
  break;
 }
 case 9: case 8:  {
  $1 = 2;
  break;
 }
 case 12: case 11: case 10: case 7: case 5:  {
  $1 = 3;
  break;
 }
 case 13:  {
  $1 = 4;
  break;
 }
 default: {
  $1 = 0;
 }
 }
 $4 = $1;
 STACKTOP = sp;return ($4|0);
}
function _hts_process_opts($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = ((($5)) + 20|0);
 HEAP32[$6>>2] = 0;
 $7 = $4;
 $8 = (_hts_parse_opt_list($5,$7)|0);
 $9 = ($8|0)!=(0);
 do {
  if ($9) {
   $2 = -1;
  } else {
   $10 = $3;
   $11 = ((($5)) + 20|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (_hts_opt_apply($10,$12)|0);
   $14 = ($13|0)!=(0);
   $15 = ((($5)) + 20|0);
   $16 = HEAP32[$15>>2]|0;
   _hts_opt_free($16);
   if ($14) {
    $2 = -1;
    break;
   } else {
    $2 = 0;
    break;
   }
  }
 } while(0);
 $17 = $2;
 STACKTOP = sp;return ($17|0);
}
function _hts_parse_opt_list($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8032|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8032|0);
 $7 = sp + 20|0;
 $3 = $0;
 $4 = $1;
 while(1) {
  $8 = $4;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   label = 16;
   break;
  }
  $10 = $4;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)!=(0);
  if (!($13)) {
   label = 16;
   break;
  }
  while(1) {
   $14 = $4;
   $15 = HEAP8[$14>>0]|0;
   $16 = $15 << 24 >> 24;
   $17 = ($16|0)!=(0);
   if ($17) {
    $18 = $4;
    $19 = HEAP8[$18>>0]|0;
    $20 = $19 << 24 >> 24;
    $21 = ($20|0)==(44);
    $59 = $21;
   } else {
    $59 = 0;
   }
   $22 = $4;
   if (!($59)) {
    break;
   }
   $23 = ((($22)) + 1|0);
   $4 = $23;
  }
  $5 = $22;
  while(1) {
   $24 = $4;
   $25 = HEAP8[$24>>0]|0;
   $26 = $25 << 24 >> 24;
   $27 = ($26|0)!=(0);
   if (!($27)) {
    break;
   }
   $28 = $4;
   $29 = HEAP8[$28>>0]|0;
   $30 = $29 << 24 >> 24;
   $31 = ($30|0)!=(44);
   if (!($31)) {
    break;
   }
   $32 = $4;
   $33 = ((($32)) + 1|0);
   $4 = $33;
  }
  $34 = $4;
  $35 = $5;
  $36 = $34;
  $37 = $35;
  $38 = (($36) - ($37))|0;
  $6 = $38;
  $39 = $5;
  $40 = $6;
  $41 = ($40|0)<(8000);
  $42 = $6;
  $43 = $41 ? $42 : 8000;
  (_strncpy($7,$39,$43)|0);
  $44 = $6;
  $45 = ($44|0)<(8000);
  $46 = $6;
  $47 = $45 ? $46 : 8000;
  $48 = (($7) + ($47)|0);
  HEAP8[$48>>0] = 0;
  $49 = $3;
  $50 = ((($49)) + 20|0);
  $51 = (_hts_opt_add($50,$7)|0);
  $52 = ($51|0)!=(0);
  if ($52) {
   label = 13;
   break;
  }
  $53 = $4;
  $54 = HEAP8[$53>>0]|0;
  $55 = ($54<<24>>24)!=(0);
  if (!($55)) {
   continue;
  }
  $56 = $4;
  $57 = ((($56)) + 1|0);
  $4 = $57;
 }
 if ((label|0) == 13) {
  $2 = -1;
  $58 = $2;
  STACKTOP = sp;return ($58|0);
 }
 else if ((label|0) == 16) {
  $2 = 0;
  $58 = $2;
  STACKTOP = sp;return ($58|0);
 }
 return (0)|0;
}
function _hts_opt_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $1;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $1;
  $2 = $5;
  $6 = ((($5)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $1 = $7;
  $8 = $2;
  $9 = HEAP32[$8>>2]|0;
  _free($9);
  $10 = $2;
  _free($10);
 }
 STACKTOP = sp;return;
}
function _hts_opt_add($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $2 = -1;
  $255 = $2;
  STACKTOP = sp;return ($255|0);
 }
 $10 = (_malloc(16)|0);
 $5 = $10;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  $2 = -1;
  $255 = $2;
  STACKTOP = sp;return ($255|0);
 }
 $12 = $4;
 $13 = (___strdup($12)|0);
 $14 = $5;
 HEAP32[$14>>2] = $13;
 $15 = ($13|0)!=(0|0);
 $16 = $5;
 if (!($15)) {
  _free($16);
  $2 = -1;
  $255 = $2;
  STACKTOP = sp;return ($255|0);
 }
 $17 = HEAP32[$16>>2]|0;
 $18 = (_strchr($17,61)|0);
 $7 = $18;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = $7;
  $21 = ((($20)) + 1|0);
  $7 = $21;
  HEAP8[$20>>0] = 0;
 } else {
  $7 = 17109;
 }
 $22 = $5;
 $23 = HEAP32[$22>>2]|0;
 $24 = (_strcmp($23,17111)|0);
 $25 = ($24|0)==(0);
 L17: do {
  if ($25) {
   label = 12;
  } else {
   $26 = $5;
   $27 = HEAP32[$26>>2]|0;
   $28 = (_strcmp($27,17121)|0);
   $29 = ($28|0)==(0);
   if ($29) {
    label = 12;
   } else {
    $36 = $5;
    $37 = HEAP32[$36>>2]|0;
    $38 = (_strcmp($37,17131)|0);
    $39 = ($38|0)==(0);
    if (!($39)) {
     $40 = $5;
     $41 = HEAP32[$40>>2]|0;
     $42 = (_strcmp($41,17141)|0);
     $43 = ($42|0)==(0);
     if (!($43)) {
      $50 = $5;
      $51 = HEAP32[$50>>2]|0;
      $52 = (_strcmp($51,17151)|0);
      $53 = ($52|0)==(0);
      if (!($53)) {
       $54 = $5;
       $55 = HEAP32[$54>>2]|0;
       $56 = (_strcmp($55,17166)|0);
       $57 = ($56|0)==(0);
       if (!($57)) {
        $64 = $5;
        $65 = HEAP32[$64>>2]|0;
        $66 = (_strcmp($65,17181)|0);
        $67 = ($66|0)==(0);
        if (!($67)) {
         $68 = $5;
         $69 = HEAP32[$68>>2]|0;
         $70 = (_strcmp($69,17202)|0);
         $71 = ($70|0)==(0);
         if (!($71)) {
          $78 = $5;
          $79 = HEAP32[$78>>2]|0;
          $80 = (_strcmp($79,17223)|0);
          $81 = ($80|0)==(0);
          if (!($81)) {
           $82 = $5;
           $83 = HEAP32[$82>>2]|0;
           $84 = (_strcmp($83,17233)|0);
           $85 = ($84|0)==(0);
           if (!($85)) {
            $92 = $5;
            $93 = HEAP32[$92>>2]|0;
            $94 = (_strcmp($93,17243)|0);
            $95 = ($94|0)==(0);
            do {
             if (!($95)) {
              $96 = $5;
              $97 = HEAP32[$96>>2]|0;
              $98 = (_strcmp($97,17250)|0);
              $99 = ($98|0)==(0);
              if ($99) {
               break;
              }
              $106 = $5;
              $107 = HEAP32[$106>>2]|0;
              $108 = (_strcmp($107,17257)|0);
              $109 = ($108|0)==(0);
              do {
               if (!($109)) {
                $110 = $5;
                $111 = HEAP32[$110>>2]|0;
                $112 = (_strcmp($111,17268)|0);
                $113 = ($112|0)==(0);
                if ($113) {
                 break;
                }
                $120 = $5;
                $121 = HEAP32[$120>>2]|0;
                $122 = (_strcmp($121,17279)|0);
                $123 = ($122|0)==(0);
                do {
                 if (!($123)) {
                  $124 = $5;
                  $125 = HEAP32[$124>>2]|0;
                  $126 = (_strcmp($125,17289)|0);
                  $127 = ($126|0)==(0);
                  if ($127) {
                   break;
                  }
                  $134 = $5;
                  $135 = HEAP32[$134>>2]|0;
                  $136 = (_strcmp($135,17299)|0);
                  $137 = ($136|0)==(0);
                  do {
                   if (!($137)) {
                    $138 = $5;
                    $139 = HEAP32[$138>>2]|0;
                    $140 = (_strcmp($139,17308)|0);
                    $141 = ($140|0)==(0);
                    if ($141) {
                     break;
                    }
                    $148 = $5;
                    $149 = HEAP32[$148>>2]|0;
                    $150 = (_strcmp($149,17317)|0);
                    $151 = ($150|0)==(0);
                    do {
                     if (!($151)) {
                      $152 = $5;
                      $153 = HEAP32[$152>>2]|0;
                      $154 = (_strcmp($153,17326)|0);
                      $155 = ($154|0)==(0);
                      if ($155) {
                       break;
                      }
                      $162 = $5;
                      $163 = HEAP32[$162>>2]|0;
                      $164 = (_strcmp($163,17335)|0);
                      $165 = ($164|0)==(0);
                      do {
                       if (!($165)) {
                        $166 = $5;
                        $167 = HEAP32[$166>>2]|0;
                        $168 = (_strcmp($167,17345)|0);
                        $169 = ($168|0)==(0);
                        if ($169) {
                         break;
                        }
                        $175 = $5;
                        $176 = HEAP32[$175>>2]|0;
                        $177 = (_strcmp($176,17355)|0);
                        $178 = ($177|0)==(0);
                        do {
                         if (!($178)) {
                          $179 = $5;
                          $180 = HEAP32[$179>>2]|0;
                          $181 = (_strcmp($180,17363)|0);
                          $182 = ($181|0)==(0);
                          if ($182) {
                           break;
                          }
                          $188 = $5;
                          $189 = HEAP32[$188>>2]|0;
                          $190 = (_strcmp($189,17371)|0);
                          $191 = ($190|0)==(0);
                          do {
                           if (!($191)) {
                            $192 = $5;
                            $193 = HEAP32[$192>>2]|0;
                            $194 = (_strcmp($193,17391)|0);
                            $195 = ($194|0)==(0);
                            if ($195) {
                             break;
                            }
                            $202 = $5;
                            $203 = HEAP32[$202>>2]|0;
                            $204 = (_strcmp($203,17411)|0);
                            $205 = ($204|0)==(0);
                            do {
                             if (!($205)) {
                              $206 = $5;
                              $207 = HEAP32[$206>>2]|0;
                              $208 = (_strcmp($207,17420)|0);
                              $209 = ($208|0)==(0);
                              if ($209) {
                               break;
                              }
                              $216 = $5;
                              $217 = HEAP32[$216>>2]|0;
                              $218 = (_strcmp($217,17429)|0);
                              $219 = ($218|0)==(0);
                              do {
                               if (!($219)) {
                                $220 = $5;
                                $221 = HEAP32[$220>>2]|0;
                                $222 = (_strcmp($221,17445)|0);
                                $223 = ($222|0)==(0);
                                if ($223) {
                                 break;
                                }
                                $230 = HEAP32[2410]|0;
                                $231 = $5;
                                $232 = HEAP32[$231>>2]|0;
                                HEAP32[$vararg_buffer>>2] = $232;
                                (_fprintf($230,17461,$vararg_buffer)|0);
                                $233 = $5;
                                $234 = HEAP32[$233>>2]|0;
                                _free($234);
                                $235 = $5;
                                _free($235);
                                $2 = -1;
                                $255 = $2;
                                STACKTOP = sp;return ($255|0);
                               }
                              } while(0);
                              $224 = $5;
                              $225 = ((($224)) + 4|0);
                              HEAP32[$225>>2] = 18;
                              $226 = $7;
                              $227 = (_strtol($226,0,0)|0);
                              $228 = $5;
                              $229 = ((($228)) + 8|0);
                              HEAP32[$229>>2] = $227;
                              break L17;
                             }
                            } while(0);
                            $210 = $5;
                            $211 = ((($210)) + 4|0);
                            HEAP32[$211>>2] = 101;
                            $212 = $7;
                            $213 = (_atoi($212)|0);
                            $214 = $5;
                            $215 = ((($214)) + 8|0);
                            HEAP32[$215>>2] = $213;
                            break L17;
                           }
                          } while(0);
                          $196 = $5;
                          $197 = ((($196)) + 4|0);
                          HEAP32[$197>>2] = 10;
                          $198 = $7;
                          $199 = (_atoi($198)|0);
                          $200 = $5;
                          $201 = ((($200)) + 8|0);
                          HEAP32[$201>>2] = $199;
                          break L17;
                         }
                        } while(0);
                        $183 = $5;
                        $184 = ((($183)) + 4|0);
                        HEAP32[$184>>2] = 6;
                        $185 = $7;
                        $186 = $5;
                        $187 = ((($186)) + 8|0);
                        HEAP32[$187>>2] = $185;
                        break L17;
                       }
                      } while(0);
                      $170 = $5;
                      $171 = ((($170)) + 4|0);
                      HEAP32[$171>>2] = 9;
                      $172 = $7;
                      $173 = $5;
                      $174 = ((($173)) + 8|0);
                      HEAP32[$174>>2] = $172;
                      break L17;
                     }
                    } while(0);
                    $156 = $5;
                    $157 = ((($156)) + 4|0);
                    HEAP32[$157>>2] = 16;
                    $158 = $7;
                    $159 = (_atoi($158)|0);
                    $160 = $5;
                    $161 = ((($160)) + 8|0);
                    HEAP32[$161>>2] = $159;
                    break L17;
                   }
                  } while(0);
                  $142 = $5;
                  $143 = ((($142)) + 4|0);
                  HEAP32[$143>>2] = 17;
                  $144 = $7;
                  $145 = (_atoi($144)|0);
                  $146 = $5;
                  $147 = ((($146)) + 8|0);
                  HEAP32[$147>>2] = $145;
                  break L17;
                 }
                } while(0);
                $128 = $5;
                $129 = ((($128)) + 4|0);
                HEAP32[$129>>2] = 12;
                $130 = $7;
                $131 = (_atoi($130)|0);
                $132 = $5;
                $133 = ((($132)) + 8|0);
                HEAP32[$133>>2] = $131;
                break L17;
               }
              } while(0);
              $114 = $5;
              $115 = ((($114)) + 4|0);
              HEAP32[$115>>2] = 8;
              $116 = $7;
              $117 = (_atoi($116)|0);
              $118 = $5;
              $119 = ((($118)) + 8|0);
              HEAP32[$119>>2] = $117;
              break L17;
             }
            } while(0);
            $100 = $5;
            $101 = ((($100)) + 4|0);
            HEAP32[$101>>2] = 11;
            $102 = $7;
            $103 = (_atoi($102)|0);
            $104 = $5;
            $105 = ((($104)) + 8|0);
            HEAP32[$105>>2] = $103;
            break;
           }
          }
          $86 = $5;
          $87 = ((($86)) + 4|0);
          HEAP32[$87>>2] = 7;
          $88 = $7;
          $89 = (_atoi($88)|0);
          $90 = $5;
          $91 = ((($90)) + 8|0);
          HEAP32[$91>>2] = $89;
          break;
         }
        }
        $72 = $5;
        $73 = ((($72)) + 4|0);
        HEAP32[$73>>2] = 4;
        $74 = $7;
        $75 = (_atoi($74)|0);
        $76 = $5;
        $77 = ((($76)) + 8|0);
        HEAP32[$77>>2] = $75;
        break;
       }
      }
      $58 = $5;
      $59 = ((($58)) + 4|0);
      HEAP32[$59>>2] = 3;
      $60 = $7;
      $61 = (_atoi($60)|0);
      $62 = $5;
      $63 = ((($62)) + 8|0);
      HEAP32[$63>>2] = $61;
      break;
     }
    }
    $44 = $5;
    $45 = ((($44)) + 4|0);
    HEAP32[$45>>2] = 2;
    $46 = $7;
    $47 = (_atoi($46)|0);
    $48 = $5;
    $49 = ((($48)) + 8|0);
    HEAP32[$49>>2] = $47;
   }
  }
 } while(0);
 if ((label|0) == 12) {
  $30 = $5;
  $31 = ((($30)) + 4|0);
  HEAP32[$31>>2] = 0;
  $32 = $7;
  $33 = (_atoi($32)|0);
  $34 = $5;
  $35 = ((($34)) + 8|0);
  HEAP32[$35>>2] = $33;
 }
 $236 = $5;
 $237 = ((($236)) + 12|0);
 HEAP32[$237>>2] = 0;
 $238 = $3;
 $239 = HEAP32[$238>>2]|0;
 $240 = ($239|0)!=(0|0);
 if ($240) {
  $241 = $3;
  $242 = HEAP32[$241>>2]|0;
  $6 = $242;
  while(1) {
   $243 = $6;
   $244 = ((($243)) + 12|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = ($245|0)!=(0|0);
   if (!($246)) {
    break;
   }
   $247 = $6;
   $248 = ((($247)) + 12|0);
   $249 = HEAP32[$248>>2]|0;
   $6 = $249;
  }
  $250 = $5;
  $251 = $6;
  $252 = ((($251)) + 12|0);
  HEAP32[$252>>2] = $250;
 } else {
  $253 = $5;
  $254 = $3;
  HEAP32[$254>>2] = $253;
 }
 $2 = 0;
 $255 = $2;
 STACKTOP = sp;return ($255|0);
}
function _hts_open($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (_hts_open_format($4,$5,0)|0);
 STACKTOP = sp;return ($6|0);
}
function _hts_getline($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = ((($8)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $4;
 $12 = $5;
 $13 = (_ks_getuntil($10,$11,$12,$7)|0);
 $6 = $13;
 $14 = $3;
 $15 = ((($14)) + 8|0);
 $16 = $15;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (_i64Add(($18|0),($21|0),1,0)|0);
 $23 = tempRet0;
 $24 = $15;
 $25 = $24;
 HEAP32[$25>>2] = $22;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 $28 = $6;
 STACKTOP = sp;return ($28|0);
}
function _ks_getuntil($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 $12 = (_ks_getuntil2($8,$9,$10,$11,0)|0);
 STACKTOP = sp;return ($12|0);
}
function _hfile_init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = (_malloc($8)|0);
 $7 = $9;
 $10 = $7;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $12 = $6;
  $13 = ($12|0)==(0);
  if ($13) {
   $6 = 32768;
  }
  $14 = $5;
  $15 = (_strchr($14,114)|0);
  $16 = ($15|0)!=(0|0);
  $17 = $6;
  $18 = ($17>>>0)>(32768);
  $or$cond = $16 & $18;
  if ($or$cond) {
   $6 = 32768;
  }
  $19 = $6;
  $20 = (_malloc($19)|0);
  $21 = $7;
  HEAP32[$21>>2] = $20;
  $22 = $7;
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   $25 = $7;
   $26 = HEAP32[$25>>2]|0;
   $27 = $7;
   $28 = ((($27)) + 8|0);
   HEAP32[$28>>2] = $26;
   $29 = $7;
   $30 = ((($29)) + 4|0);
   HEAP32[$30>>2] = $26;
   $31 = $6;
   $32 = $7;
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + ($31)|0);
   $35 = $7;
   $36 = ((($35)) + 12|0);
   HEAP32[$36>>2] = $34;
   $37 = $7;
   $38 = ((($37)) + 20|0);
   HEAP32[$38>>2] = 0;
   $39 = $7;
   $40 = ((($39)) + 24|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41 & -2;
   HEAP8[$40>>0] = $42;
   $43 = $7;
   $44 = ((($43)) + 28|0);
   HEAP32[$44>>2] = 0;
   $45 = $7;
   $3 = $45;
   $47 = $3;
   STACKTOP = sp;return ($47|0);
  }
 }
 $46 = $7;
 _hfile_destroy($46);
 $3 = 0;
 $47 = $3;
 STACKTOP = sp;return ($47|0);
}
function _hfile_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 $2 = $4;
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $1;
  $8 = HEAP32[$7>>2]|0;
  _free($8);
 }
 $9 = $1;
 _free($9);
 $10 = $2;
 $11 = (___errno_location()|0);
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function _hgetc2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_refill_buffer($2)|0);
 $4 = ($3|0)>(0);
 if (!($4)) {
  $11 = -1;
  STACKTOP = sp;return ($11|0);
 }
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 1|0);
 HEAP32[$6>>2] = $8;
 $9 = HEAP8[$7>>0]|0;
 $10 = $9&255;
 $11 = $10;
 STACKTOP = sp;return ($11|0);
}
function _refill_buffer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)>($8>>>0);
 if ($9) {
  $10 = $2;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $2;
  $14 = HEAP32[$13>>2]|0;
  $15 = $12;
  $16 = $14;
  $17 = (($15) - ($16))|0;
  $18 = $2;
  $19 = ((($18)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($17))|0;
  HEAP32[$19>>2] = $21;
  $22 = $2;
  $23 = HEAP32[$22>>2]|0;
  $24 = $2;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $2;
  $28 = ((($27)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $2;
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $29;
  $34 = $32;
  $35 = (($33) - ($34))|0;
  _memmove(($23|0),($26|0),($35|0))|0;
  $36 = $2;
  $37 = ((($36)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $2;
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $38;
  $43 = $41;
  $44 = (($42) - ($43))|0;
  $45 = $2;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + ($44)|0);
  $48 = $2;
  $49 = ((($48)) + 8|0);
  HEAP32[$49>>2] = $47;
  $50 = $2;
  $51 = HEAP32[$50>>2]|0;
  $52 = $2;
  $53 = ((($52)) + 4|0);
  HEAP32[$53>>2] = $51;
 }
 $54 = $2;
 $55 = ((($54)) + 24|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56 & 1;
 $58 = $57&255;
 $59 = ($58|0)!=(0);
 do {
  if ($59) {
   label = 5;
  } else {
   $60 = $2;
   $61 = ((($60)) + 8|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $2;
   $64 = ((($63)) + 12|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($62|0)==($65|0);
   if ($66) {
    label = 5;
   } else {
    $67 = $2;
    $68 = ((($67)) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = HEAP32[$69>>2]|0;
    $71 = $2;
    $72 = $2;
    $73 = ((($72)) + 8|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $2;
    $76 = ((($75)) + 12|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = $2;
    $79 = ((($78)) + 8|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $77;
    $82 = $80;
    $83 = (($81) - ($82))|0;
    $84 = (FUNCTION_TABLE_iiii[$70 & 127]($71,$74,$83)|0);
    $3 = $84;
    $85 = $3;
    $86 = ($85|0)<(0);
    if ($86) {
     $87 = (___errno_location()|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = $2;
     $90 = ((($89)) + 28|0);
     HEAP32[$90>>2] = $88;
     $91 = $3;
     $1 = $91;
     $105 = $1;
     STACKTOP = sp;return ($105|0);
    } else {
     $92 = $3;
     $93 = ($92|0)==(0);
     if (!($93)) {
      break;
     }
     $94 = $2;
     $95 = ((($94)) + 24|0);
     $96 = HEAP8[$95>>0]|0;
     $97 = $96 & -2;
     $98 = $97 | 1;
     HEAP8[$95>>0] = $98;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $3 = 0;
 }
 $99 = $3;
 $100 = $2;
 $101 = ((($100)) + 8|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($102) + ($99)|0);
 HEAP32[$101>>2] = $103;
 $104 = $3;
 $1 = $104;
 $105 = $1;
 STACKTOP = sp;return ($105|0);
}
function _hpeek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $4;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $11;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $7 = $17;
 while(1) {
  $18 = $7;
  $19 = $6;
  $20 = ($18>>>0)<($19>>>0);
  if (!($20)) {
   break;
  }
  $21 = $4;
  $22 = (_refill_buffer($21)|0);
  $8 = $22;
  $23 = $8;
  $24 = ($23|0)<(0);
  $25 = $8;
  if ($24) {
   label = 4;
   break;
  }
  $26 = ($25|0)==(0);
  if ($26) {
   break;
  }
  $27 = $8;
  $28 = $7;
  $29 = (($28) + ($27))|0;
  $7 = $29;
 }
 if ((label|0) == 4) {
  $3 = $25;
  $40 = $3;
  STACKTOP = sp;return ($40|0);
 }
 $30 = $7;
 $31 = $6;
 $32 = ($30>>>0)>($31>>>0);
 if ($32) {
  $33 = $6;
  $7 = $33;
 }
 $34 = $5;
 $35 = $4;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $7;
 _memcpy(($34|0),($37|0),($38|0))|0;
 $39 = $7;
 $3 = $39;
 $40 = $3;
 STACKTOP = sp;return ($40|0);
}
function _hread2($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $5;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $5;
 $18 = HEAP32[$17>>2]|0;
 $19 = $16;
 $20 = $18;
 $21 = (($19) - ($20))|0;
 $9 = $21;
 $22 = $6;
 $10 = $22;
 $23 = $8;
 $24 = $10;
 $25 = (($24) + ($23)|0);
 $10 = $25;
 $26 = $8;
 $27 = $7;
 $28 = (($27) - ($26))|0;
 $7 = $28;
 while(1) {
  $29 = $7;
  $30 = $29<<1;
  $31 = $9;
  $32 = ($30>>>0)>=($31>>>0);
  if (!($32)) {
   break;
  }
  $33 = $5;
  $34 = ((($33)) + 24|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35 & 1;
  $37 = $36&255;
  $38 = ($37|0)!=(0);
  $39 = $38 ^ 1;
  if (!($39)) {
   break;
  }
  $40 = $5;
  $41 = ((($40)) + 16|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = HEAP32[$42>>2]|0;
  $44 = $5;
  $45 = $10;
  $46 = $7;
  $47 = (FUNCTION_TABLE_iiii[$43 & 127]($44,$45,$46)|0);
  $11 = $47;
  $48 = $11;
  $49 = ($48|0)<(0);
  if ($49) {
   label = 5;
   break;
  }
  $55 = $11;
  $56 = ($55|0)==(0);
  if ($56) {
   $57 = $5;
   $58 = ((($57)) + 24|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = $59 & -2;
   $61 = $60 | 1;
   HEAP8[$58>>0] = $61;
  }
  $62 = $11;
  $63 = $5;
  $64 = ((($63)) + 20|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + ($62))|0;
  HEAP32[$64>>2] = $66;
  $67 = $11;
  $68 = $10;
  $69 = (($68) + ($67)|0);
  $10 = $69;
  $70 = $11;
  $71 = $7;
  $72 = (($71) - ($70))|0;
  $7 = $72;
  $73 = $11;
  $74 = $8;
  $75 = (($74) + ($73))|0;
  $8 = $75;
 }
 if ((label|0) == 5) {
  $50 = (___errno_location()|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $5;
  $53 = ((($52)) + 28|0);
  HEAP32[$53>>2] = $51;
  $54 = $11;
  $4 = $54;
  $123 = $4;
  STACKTOP = sp;return ($123|0);
 }
 while(1) {
  $76 = $7;
  $77 = ($76>>>0)>(0);
  if (!($77)) {
   label = 16;
   break;
  }
  $78 = $5;
  $79 = ((($78)) + 24|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $80 & 1;
  $82 = $81&255;
  $83 = ($82|0)!=(0);
  $84 = $83 ^ 1;
  if (!($84)) {
   label = 16;
   break;
  }
  $85 = $5;
  $86 = (_refill_buffer($85)|0);
  $13 = $86;
  $87 = $13;
  $88 = ($87|0)<(0);
  if ($88) {
   label = 12;
   break;
  }
  $90 = $5;
  $91 = ((($90)) + 8|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $5;
  $94 = ((($93)) + 4|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $92;
  $97 = $95;
  $98 = (($96) - ($97))|0;
  $12 = $98;
  $99 = $12;
  $100 = $7;
  $101 = ($99>>>0)>($100>>>0);
  if ($101) {
   $102 = $7;
   $12 = $102;
  }
  $103 = $10;
  $104 = $5;
  $105 = ((($104)) + 4|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = $12;
  _memcpy(($103|0),($106|0),($107|0))|0;
  $108 = $12;
  $109 = $5;
  $110 = ((($109)) + 4|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) + ($108)|0);
  HEAP32[$110>>2] = $112;
  $113 = $12;
  $114 = $10;
  $115 = (($114) + ($113)|0);
  $10 = $115;
  $116 = $12;
  $117 = $7;
  $118 = (($117) - ($116))|0;
  $7 = $118;
  $119 = $12;
  $120 = $8;
  $121 = (($120) + ($119))|0;
  $8 = $121;
 }
 if ((label|0) == 12) {
  $89 = $13;
  $4 = $89;
  $123 = $4;
  STACKTOP = sp;return ($123|0);
 }
 else if ((label|0) == 16) {
  $122 = $8;
  $4 = $122;
  $123 = $4;
  STACKTOP = sp;return ($123|0);
 }
 return (0)|0;
}
function _hflush($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (_flush_buffer($3)|0);
 $5 = ($4|0)<(0);
 if ($5) {
  $1 = -1;
  $24 = $1;
  STACKTOP = sp;return ($24|0);
 }
 $6 = $2;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $2;
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $2;
  $18 = (FUNCTION_TABLE_ii[$16 & 63]($17)|0);
  $19 = ($18|0)<(0);
  if ($19) {
   $20 = (___errno_location()|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $2;
   $23 = ((($22)) + 28|0);
   HEAP32[$23>>2] = $21;
   $1 = -1;
   $24 = $1;
   STACKTOP = sp;return ($24|0);
  }
 }
 $1 = 0;
 $24 = $1;
 STACKTOP = sp;return ($24|0);
}
function _flush_buffer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 while(1) {
  $7 = $3;
  $8 = $2;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7>>>0)<($10>>>0);
  $12 = $2;
  if (!($11)) {
   label = 6;
   break;
  }
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $2;
  $18 = $3;
  $19 = $2;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $3;
  $23 = $21;
  $24 = $22;
  $25 = (($23) - ($24))|0;
  $26 = (FUNCTION_TABLE_iiii[$16 & 127]($17,$18,$25)|0);
  $4 = $26;
  $27 = $4;
  $28 = ($27|0)<(0);
  if ($28) {
   label = 4;
   break;
  }
  $34 = $4;
  $35 = $3;
  $36 = (($35) + ($34)|0);
  $3 = $36;
  $37 = $4;
  $38 = $2;
  $39 = ((($38)) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + ($37))|0;
  HEAP32[$39>>2] = $41;
 }
 if ((label|0) == 4) {
  $29 = (___errno_location()|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $2;
  $32 = ((($31)) + 28|0);
  HEAP32[$32>>2] = $30;
  $33 = $4;
  $1 = $33;
  $45 = $1;
  STACKTOP = sp;return ($45|0);
 }
 else if ((label|0) == 6) {
  $42 = HEAP32[$12>>2]|0;
  $43 = $2;
  $44 = ((($43)) + 4|0);
  HEAP32[$44>>2] = $42;
  $1 = 0;
  $45 = $1;
  STACKTOP = sp;return ($45|0);
 }
 return (0)|0;
}
function _hwrite2($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $6;
 $9 = $14;
 $15 = $5;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = HEAP32[$18>>2]|0;
 $20 = $17;
 $21 = $19;
 $22 = (($20) - ($21))|0;
 $11 = $22;
 $23 = $7;
 $24 = $8;
 $25 = (($23) - ($24))|0;
 $12 = $25;
 $26 = $8;
 $27 = $9;
 $28 = (($27) + ($26)|0);
 $9 = $28;
 $29 = $5;
 $30 = (_flush_buffer($29)|0);
 $10 = $30;
 $31 = $10;
 $32 = ($31|0)<(0);
 if ($32) {
  $33 = $10;
  $4 = $33;
  $75 = $4;
  STACKTOP = sp;return ($75|0);
 }
 while(1) {
  $34 = $12;
  $35 = $34<<1;
  $36 = $11;
  $37 = ($35>>>0)>=($36>>>0);
  $38 = $5;
  if (!($37)) {
   label = 7;
   break;
  }
  $39 = ((($38)) + 16|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = $9;
  $45 = $12;
  $46 = (FUNCTION_TABLE_iiii[$42 & 127]($43,$44,$45)|0);
  $13 = $46;
  $47 = $13;
  $48 = ($47|0)<(0);
  if ($48) {
   label = 5;
   break;
  }
  $54 = $13;
  $55 = $5;
  $56 = ((($55)) + 20|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + ($54))|0;
  HEAP32[$56>>2] = $58;
  $59 = $13;
  $60 = $9;
  $61 = (($60) + ($59)|0);
  $9 = $61;
  $62 = $13;
  $63 = $12;
  $64 = (($63) - ($62))|0;
  $12 = $64;
 }
 if ((label|0) == 5) {
  $49 = (___errno_location()|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $5;
  $52 = ((($51)) + 28|0);
  HEAP32[$52>>2] = $50;
  $53 = $13;
  $4 = $53;
  $75 = $4;
  STACKTOP = sp;return ($75|0);
 }
 else if ((label|0) == 7) {
  $65 = ((($38)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $9;
  $68 = $12;
  _memcpy(($66|0),($67|0),($68|0))|0;
  $69 = $12;
  $70 = $5;
  $71 = ((($70)) + 4|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($72) + ($69)|0);
  HEAP32[$71>>2] = $73;
  $74 = $7;
  $4 = $74;
  $75 = $4;
  STACKTOP = sp;return ($75|0);
 }
 return (0)|0;
}
function _hseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = (_writebuffer_is_nonempty($10)|0);
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $4;
  $14 = (_flush_buffer($13)|0);
  $9 = $14;
  $15 = $9;
  $16 = ($15|0)<(0);
  if ($16) {
   $17 = $9;
   $3 = $17;
   $65 = $3;
   STACKTOP = sp;return ($65|0);
  }
 }
 $18 = $4;
 $19 = (_htell($18)|0);
 $7 = $19;
 $20 = $6;
 $21 = ($20|0)==(1);
 do {
  if ($21) {
   $22 = $7;
   $23 = $5;
   $24 = (($22) + ($23))|0;
   $25 = ($24|0)<(0);
   if (!($25)) {
    $6 = 0;
    $32 = $7;
    $33 = $5;
    $34 = (($32) + ($33))|0;
    $5 = $34;
    break;
   }
   $26 = $5;
   $27 = ($26|0)<(0);
   $28 = $27 ? 22 : 75;
   $29 = (___errno_location()|0);
   HEAP32[$29>>2] = $28;
   $30 = $4;
   $31 = ((($30)) + 28|0);
   HEAP32[$31>>2] = $28;
   $3 = -1;
   $65 = $3;
   STACKTOP = sp;return ($65|0);
  }
 } while(0);
 $35 = $4;
 $36 = ((($35)) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $4;
 $41 = $5;
 $42 = $6;
 $43 = (FUNCTION_TABLE_iiii[$39 & 127]($40,$41,$42)|0);
 $8 = $43;
 $44 = $8;
 $45 = ($44|0)<(0);
 if ($45) {
  $46 = (___errno_location()|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $4;
  $49 = ((($48)) + 28|0);
  HEAP32[$49>>2] = $47;
  $50 = $8;
  $3 = $50;
  $65 = $3;
  STACKTOP = sp;return ($65|0);
 } else {
  $51 = $4;
  $52 = HEAP32[$51>>2]|0;
  $53 = $4;
  $54 = ((($53)) + 8|0);
  HEAP32[$54>>2] = $52;
  $55 = $4;
  $56 = ((($55)) + 4|0);
  HEAP32[$56>>2] = $52;
  $57 = $4;
  $58 = ((($57)) + 24|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59 & -2;
  HEAP8[$58>>0] = $60;
  $61 = $8;
  $62 = $4;
  $63 = ((($62)) + 20|0);
  HEAP32[$63>>2] = $61;
  $64 = $8;
  $3 = $64;
  $65 = $3;
  STACKTOP = sp;return ($65|0);
 }
 return (0)|0;
}
function _writebuffer_is_nonempty($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4>>>0)>($7>>>0);
 $9 = $8&1;
 STACKTOP = sp;return ($9|0);
}
function _htell($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = $7;
 $11 = $9;
 $12 = (($10) - ($11))|0;
 $13 = (($4) + ($12))|0;
 STACKTOP = sp;return ($13|0);
}
function _hclose($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 $7 = $2;
 $8 = (_writebuffer_is_nonempty($7)|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $2;
  $11 = (_hflush($10)|0);
  $12 = ($11|0)<(0);
  if ($12) {
   $13 = $2;
   $14 = ((($13)) + 28|0);
   $15 = HEAP32[$14>>2]|0;
   $3 = $15;
  }
 }
 $16 = $2;
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $2;
 $22 = (FUNCTION_TABLE_ii[$20 & 63]($21)|0);
 $23 = ($22|0)<(0);
 if ($23) {
  $24 = (___errno_location()|0);
  $25 = HEAP32[$24>>2]|0;
  $3 = $25;
 }
 $26 = $2;
 _hfile_destroy($26);
 $27 = $3;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = $3;
  $30 = (___errno_location()|0);
  HEAP32[$30>>2] = $29;
  $1 = -1;
  $31 = $1;
  STACKTOP = sp;return ($31|0);
 } else {
  $1 = 0;
  $31 = $1;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _hclose_abruptly($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 $2 = $4;
 $5 = $1;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 (FUNCTION_TABLE_ii[$9 & 63]($10)|0);
 $11 = $1;
 _hfile_destroy($11);
 $12 = $2;
 $13 = (___errno_location()|0);
 HEAP32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function _hdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = $3;
 $8 = (_blksize($7)|0);
 $9 = (_hfile_init(40,$6,$8)|0);
 $5 = $9;
 $10 = $5;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $2 = 0;
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 } else {
  $12 = $3;
  $13 = $5;
  $14 = ((($13)) + 32|0);
  HEAP32[$14>>2] = $12;
  $15 = $4;
  $16 = (_strchr($15,115)|0);
  $17 = ($16|0)!=(0|0);
  $18 = $17&1;
  $19 = $5;
  $20 = ((($19)) + 36|0);
  $21 = $18&255;
  $22 = HEAP8[$20>>0]|0;
  $23 = $21 & 1;
  $24 = $22 & -2;
  $25 = $24 | $23;
  HEAP8[$20>>0] = $25;
  $26 = $5;
  $27 = ((($26)) + 16|0);
  HEAP32[$27>>2] = 9160;
  $28 = $5;
  $2 = $28;
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _blksize($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp;
 $2 = $0;
 $4 = $2;
 $5 = (_fstat($4,$3)|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $1 = 0;
 } else {
  $7 = ((($3)) + 40|0);
  $8 = HEAP32[$7>>2]|0;
  $1 = $8;
 }
 $9 = $1;
 STACKTOP = sp;return ($9|0);
}
function _fd_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $6 = $8;
 while(1) {
  $9 = $6;
  $10 = ((($9)) + 36|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 & 1;
  $13 = $12&255;
  $14 = ($13|0)!=(0);
  $15 = $6;
  $16 = ((($15)) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $4;
  $19 = $5;
  if ($14) {
   $20 = (_recv($17,$18,$19,0)|0);
   $22 = $20;
  } else {
   $21 = (_read($17,$18,$19)|0);
   $22 = $21;
  }
  $7 = $22;
  $23 = $7;
  $24 = ($23|0)<(0);
  if (!($24)) {
   label = 7;
   break;
  }
  $25 = (___errno_location()|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(4);
  if (!($27)) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  $28 = $7;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _fd_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $6 = $8;
 while(1) {
  $9 = $6;
  $10 = ((($9)) + 36|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 & 1;
  $13 = $12&255;
  $14 = ($13|0)!=(0);
  $15 = $6;
  $16 = ((($15)) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $4;
  $19 = $5;
  if ($14) {
   $20 = (_send($17,$18,$19,0)|0);
   $22 = $20;
  } else {
   $21 = (_write($17,$18,$19)|0);
   $22 = $21;
  }
  $7 = $22;
  $23 = $7;
  $24 = ($23|0)<(0);
  if (!($24)) {
   label = 7;
   break;
  }
  $25 = (___errno_location()|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(4);
  if (!($27)) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  $28 = $7;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _fd_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $6 = $7;
 $8 = $6;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $4;
 $12 = $5;
 $13 = (_lseek($10,$11,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function _fd_flush($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $2 = $4;
 while(1) {
  $5 = $2;
  $6 = ((($5)) + 32|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_fsync($7)|0);
  $3 = $8;
  $9 = $3;
  $10 = ($9|0)<(0);
  do {
   if ($10) {
    $11 = (___errno_location()|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(22);
    if (!($13)) {
     $14 = (___errno_location()|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(95);
     if (!($16)) {
      break;
     }
    }
    $3 = 0;
   }
  } while(0);
  $17 = $3;
  $18 = ($17|0)<(0);
  if (!($18)) {
   label = 8;
   break;
  }
  $19 = (___errno_location()|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(4);
  if (!($21)) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  $22 = $3;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _fd_close($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $2 = $4;
 while(1) {
  $5 = $2;
  $6 = ((($5)) + 32|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_close($7)|0);
  $3 = $8;
  $9 = $3;
  $10 = ($9|0)<(0);
  if (!($10)) {
   label = 4;
   break;
  }
  $11 = (___errno_location()|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(4);
  if (!($13)) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $14 = $3;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _hfile_oflags($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = 0;
 $5 = $1;
 $4 = $5;
 while(1) {
  $6 = $4;
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)!=(0);
  if (!($8)) {
   break;
  }
  $9 = $4;
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  switch ($11|0) {
  case 114:  {
   $2 = 0;
   break;
  }
  case 119:  {
   $2 = 1;
   $12 = $3;
   $13 = $12 | 576;
   $3 = $13;
   break;
  }
  case 97:  {
   $2 = 1;
   $14 = $3;
   $15 = $14 | 1088;
   $3 = $15;
   break;
  }
  case 43:  {
   $2 = 2;
   break;
  }
  case 101:  {
   $16 = $3;
   $17 = $16 | 524288;
   $3 = $17;
   break;
  }
  case 120:  {
   $18 = $3;
   $19 = $18 | 128;
   $3 = $19;
   break;
  }
  default: {
  }
  }
  $20 = $4;
  $21 = ((($20)) + 1|0);
  $4 = $21;
 }
 $22 = $2;
 $23 = $3;
 $24 = $22 | $23;
 STACKTOP = sp;return ($24|0);
}
function _hfile_add_scheme_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 4|0;
 $2 = $0;
 $3 = $1;
 $6 = HEAP32[6448]|0;
 $7 = $2;
 $8 = (_kh_put_scheme_string($6,$7,$4)|0);
 $5 = $8;
 $9 = HEAP32[$4>>2]|0;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $11 = $3;
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $5;
  $15 = HEAP32[6448]|0;
  $16 = ((($15)) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($14<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($13|0)>($21|0);
  if (!($22)) {
   STACKTOP = sp;return;
  }
 }
 $23 = $3;
 $24 = $5;
 $25 = HEAP32[6448]|0;
 $26 = ((($25)) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + ($24<<2)|0);
 HEAP32[$28>>2] = $23;
 STACKTOP = sp;return;
}
function _kh_put_scheme_string($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $4;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16>>>0)>=($19>>>0);
 do {
  if ($20) {
   $21 = $4;
   $22 = HEAP32[$21>>2]|0;
   $23 = $4;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 << 1;
   $27 = ($22>>>0)>($26>>>0);
   $28 = $4;
   $29 = $4;
   $30 = HEAP32[$29>>2]|0;
   if ($27) {
    $31 = (($30) - 1)|0;
    $32 = (_kh_resize_scheme_string($28,$31)|0);
    $33 = ($32|0)<(0);
    if (!($33)) {
     break;
    }
    $34 = $6;
    HEAP32[$34>>2] = -1;
    $35 = $4;
    $36 = HEAP32[$35>>2]|0;
    $3 = $36;
    $230 = $3;
    STACKTOP = sp;return ($230|0);
   } else {
    $37 = (($30) + 1)|0;
    $38 = (_kh_resize_scheme_string($28,$37)|0);
    $39 = ($38|0)<(0);
    if (!($39)) {
     break;
    }
    $40 = $6;
    HEAP32[$40>>2] = -1;
    $41 = $4;
    $42 = HEAP32[$41>>2]|0;
    $3 = $42;
    $230 = $3;
    STACKTOP = sp;return ($230|0);
   }
  }
 } while(0);
 $43 = $4;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) - 1)|0;
 $12 = $45;
 $13 = 0;
 $46 = $4;
 $47 = HEAP32[$46>>2]|0;
 $10 = $47;
 $7 = $47;
 $48 = $5;
 $49 = (___ac_X31_hash_string_200($48)|0);
 $8 = $49;
 $50 = $8;
 $51 = $12;
 $52 = $50 & $51;
 $9 = $52;
 $53 = $9;
 $54 = $53 >>> 4;
 $55 = $4;
 $56 = ((($55)) + 16|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) + ($54<<2)|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $9;
 $61 = $60 & 15;
 $62 = $61 << 1;
 $63 = $59 >>> $62;
 $64 = $63 & 2;
 $65 = ($64|0)!=(0);
 $66 = $9;
 do {
  if ($65) {
   $7 = $66;
  } else {
   $11 = $66;
   while(1) {
    $67 = $9;
    $68 = $67 >>> 4;
    $69 = $4;
    $70 = ((($69)) + 16|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($71) + ($68<<2)|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $9;
    $75 = $74 & 15;
    $76 = $75 << 1;
    $77 = $73 >>> $76;
    $78 = $77 & 2;
    $79 = ($78|0)!=(0);
    if ($79) {
     break;
    }
    $80 = $9;
    $81 = $80 >>> 4;
    $82 = $4;
    $83 = ((($82)) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($84) + ($81<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $9;
    $88 = $87 & 15;
    $89 = $88 << 1;
    $90 = $86 >>> $89;
    $91 = $90 & 1;
    $92 = ($91|0)!=(0);
    if (!($92)) {
     $93 = $9;
     $94 = $4;
     $95 = ((($94)) + 20|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = (($96) + ($93<<2)|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $5;
     $100 = (_strcmp($98,$99)|0);
     $101 = ($100|0)==(0);
     $102 = $101 ^ 1;
     if (!($102)) {
      break;
     }
    }
    $103 = $9;
    $104 = $103 >>> 4;
    $105 = $4;
    $106 = ((($105)) + 16|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (($107) + ($104<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $9;
    $111 = $110 & 15;
    $112 = $111 << 1;
    $113 = $109 >>> $112;
    $114 = $113 & 1;
    $115 = ($114|0)!=(0);
    if ($115) {
     $116 = $9;
     $10 = $116;
    }
    $117 = $9;
    $118 = $13;
    $119 = (($118) + 1)|0;
    $13 = $119;
    $120 = (($117) + ($119))|0;
    $121 = $12;
    $122 = $120 & $121;
    $9 = $122;
    $123 = $9;
    $124 = $11;
    $125 = ($123|0)==($124|0);
    if ($125) {
     label = 16;
     break;
    }
   }
   if ((label|0) == 16) {
    $126 = $10;
    $7 = $126;
   }
   $127 = $7;
   $128 = $4;
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = $9;
    $132 = $131 >>> 4;
    $133 = $4;
    $134 = ((($133)) + 16|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + ($132<<2)|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $9;
    $139 = $138 & 15;
    $140 = $139 << 1;
    $141 = $137 >>> $140;
    $142 = $141 & 2;
    $143 = ($142|0)!=(0);
    if ($143) {
     $144 = $10;
     $145 = $4;
     $146 = HEAP32[$145>>2]|0;
     $147 = ($144|0)!=($146|0);
     if ($147) {
      $148 = $10;
      $7 = $148;
      break;
     }
    }
    $149 = $9;
    $7 = $149;
   }
  }
 } while(0);
 $150 = $7;
 $151 = $150 >>> 4;
 $152 = $4;
 $153 = ((($152)) + 16|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = (($154) + ($151<<2)|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $7;
 $158 = $157 & 15;
 $159 = $158 << 1;
 $160 = $156 >>> $159;
 $161 = $160 & 2;
 $162 = ($161|0)!=(0);
 do {
  if ($162) {
   $163 = $5;
   $164 = $7;
   $165 = $4;
   $166 = ((($165)) + 20|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = (($167) + ($164<<2)|0);
   HEAP32[$168>>2] = $163;
   $169 = $7;
   $170 = $169 & 15;
   $171 = $170 << 1;
   $172 = 3 << $171;
   $173 = $172 ^ -1;
   $174 = $7;
   $175 = $174 >>> 4;
   $176 = $4;
   $177 = ((($176)) + 16|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = (($178) + ($175<<2)|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $180 & $173;
   HEAP32[$179>>2] = $181;
   $182 = $4;
   $183 = ((($182)) + 4|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (($184) + 1)|0;
   HEAP32[$183>>2] = $185;
   $186 = $4;
   $187 = ((($186)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = (($188) + 1)|0;
   HEAP32[$187>>2] = $189;
   $190 = $6;
   HEAP32[$190>>2] = 1;
  } else {
   $191 = $7;
   $192 = $191 >>> 4;
   $193 = $4;
   $194 = ((($193)) + 16|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = (($195) + ($192<<2)|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $7;
   $199 = $198 & 15;
   $200 = $199 << 1;
   $201 = $197 >>> $200;
   $202 = $201 & 1;
   $203 = ($202|0)!=(0);
   if ($203) {
    $204 = $5;
    $205 = $7;
    $206 = $4;
    $207 = ((($206)) + 20|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = (($208) + ($205<<2)|0);
    HEAP32[$209>>2] = $204;
    $210 = $7;
    $211 = $210 & 15;
    $212 = $211 << 1;
    $213 = 3 << $212;
    $214 = $213 ^ -1;
    $215 = $7;
    $216 = $215 >>> 4;
    $217 = $4;
    $218 = ((($217)) + 16|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = (($219) + ($216<<2)|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = $221 & $214;
    HEAP32[$220>>2] = $222;
    $223 = $4;
    $224 = ((($223)) + 4|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = (($225) + 1)|0;
    HEAP32[$224>>2] = $226;
    $227 = $6;
    HEAP32[$227>>2] = 2;
    break;
   } else {
    $228 = $6;
    HEAP32[$228>>2] = 0;
    break;
   }
  }
 } while(0);
 $229 = $7;
 $3 = $229;
 $230 = $3;
 STACKTOP = sp;return ($230|0);
}
function _kh_resize_scheme_string($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0.0, $279 = 0.0;
 var $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = 1;
 $17 = $4;
 $18 = (($17) + -1)|0;
 $4 = $18;
 $19 = $4;
 $20 = $19 >>> 1;
 $21 = $4;
 $22 = $21 | $20;
 $4 = $22;
 $23 = $4;
 $24 = $23 >>> 2;
 $25 = $4;
 $26 = $25 | $24;
 $4 = $26;
 $27 = $4;
 $28 = $27 >>> 4;
 $29 = $4;
 $30 = $29 | $28;
 $4 = $30;
 $31 = $4;
 $32 = $31 >>> 8;
 $33 = $4;
 $34 = $33 | $32;
 $4 = $34;
 $35 = $4;
 $36 = $35 >>> 16;
 $37 = $4;
 $38 = $37 | $36;
 $4 = $38;
 $39 = $4;
 $40 = (($39) + 1)|0;
 $4 = $40;
 $41 = $4;
 $42 = ($41>>>0)<(4);
 $$ = $42 ? 4 : $40;
 $4 = $$;
 $43 = $3;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $4;
 $47 = (+($46>>>0));
 $48 = $47 * 0.77000000000000001;
 $49 = $48 + 0.5;
 $50 = (~~(($49))>>>0);
 $51 = ($45>>>0)>=($50>>>0);
 do {
  if ($51) {
   $6 = 0;
  } else {
   $52 = $4;
   $53 = ($52>>>0)<(16);
   $54 = $4;
   $55 = $54 >>> 4;
   $56 = $53 ? 1 : $55;
   $57 = $56<<2;
   $58 = (_malloc($57)|0);
   $5 = $58;
   $59 = $5;
   $60 = ($59|0)!=(0|0);
   if (!($60)) {
    $2 = -1;
    $284 = $2;
    STACKTOP = sp;return ($284|0);
   }
   $61 = $5;
   $62 = $4;
   $63 = ($62>>>0)<(16);
   $64 = $4;
   $65 = $64 >>> 4;
   $66 = $63 ? 1 : $65;
   $67 = $66<<2;
   _memset(($61|0),-86,($67|0))|0;
   $68 = $3;
   $69 = HEAP32[$68>>2]|0;
   $70 = $4;
   $71 = ($69>>>0)<($70>>>0);
   if ($71) {
    $72 = $3;
    $73 = ((($72)) + 20|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $4;
    $76 = $75<<2;
    $77 = (_realloc($74,$76)|0);
    $7 = $77;
    $78 = $7;
    $79 = ($78|0)!=(0|0);
    if (!($79)) {
     $80 = $5;
     _free($80);
     $2 = -1;
     $284 = $2;
     STACKTOP = sp;return ($284|0);
    }
    $81 = $7;
    $82 = $3;
    $83 = ((($82)) + 20|0);
    HEAP32[$83>>2] = $81;
    $84 = $3;
    $85 = ((($84)) + 24|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $4;
    $88 = $87<<2;
    $89 = (_realloc($86,$88)|0);
    $8 = $89;
    $90 = $8;
    $91 = ($90|0)!=(0|0);
    if ($91) {
     $93 = $8;
     $94 = $3;
     $95 = ((($94)) + 24|0);
     HEAP32[$95>>2] = $93;
     break;
    }
    $92 = $5;
    _free($92);
    $2 = -1;
    $284 = $2;
    STACKTOP = sp;return ($284|0);
   }
  }
 } while(0);
 $96 = $6;
 $97 = ($96|0)!=(0);
 if ($97) {
  $6 = 0;
  while(1) {
   $98 = $6;
   $99 = $3;
   $100 = HEAP32[$99>>2]|0;
   $101 = ($98|0)!=($100|0);
   if (!($101)) {
    break;
   }
   $102 = $6;
   $103 = $102 >>> 4;
   $104 = $3;
   $105 = ((($104)) + 16|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + ($103<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $6;
   $110 = $109 & 15;
   $111 = $110 << 1;
   $112 = $108 >>> $111;
   $113 = $112 & 3;
   $114 = ($113|0)==(0);
   if ($114) {
    $115 = $6;
    $116 = $3;
    $117 = ((($116)) + 20|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (($118) + ($115<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $9 = $120;
    $121 = $4;
    $122 = (($121) - 1)|0;
    $11 = $122;
    $123 = $6;
    $124 = $3;
    $125 = ((($124)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = (($126) + ($123<<2)|0);
    $128 = HEAP32[$127>>2]|0;
    $10 = $128;
    $129 = $6;
    $130 = $129 & 15;
    $131 = $130 << 1;
    $132 = 1 << $131;
    $133 = $6;
    $134 = $133 >>> 4;
    $135 = $3;
    $136 = ((($135)) + 16|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = (($137) + ($134<<2)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $139 | $132;
    HEAP32[$138>>2] = $140;
    while(1) {
     $14 = 0;
     $141 = $9;
     $142 = (___ac_X31_hash_string_200($141)|0);
     $12 = $142;
     $143 = $12;
     $144 = $11;
     $145 = $143 & $144;
     $13 = $145;
     while(1) {
      $146 = $13;
      $147 = $146 >>> 4;
      $148 = $5;
      $149 = (($148) + ($147<<2)|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = $13;
      $152 = $151 & 15;
      $153 = $152 << 1;
      $154 = $150 >>> $153;
      $155 = $154 & 2;
      $156 = ($155|0)!=(0);
      $157 = $156 ^ 1;
      $158 = $13;
      if (!($157)) {
       break;
      }
      $159 = $14;
      $160 = (($159) + 1)|0;
      $14 = $160;
      $161 = (($158) + ($160))|0;
      $162 = $11;
      $163 = $161 & $162;
      $13 = $163;
     }
     $164 = $158 & 15;
     $165 = $164 << 1;
     $166 = 2 << $165;
     $167 = $166 ^ -1;
     $168 = $13;
     $169 = $168 >>> 4;
     $170 = $5;
     $171 = (($170) + ($169<<2)|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = $172 & $167;
     HEAP32[$171>>2] = $173;
     $174 = $13;
     $175 = $3;
     $176 = HEAP32[$175>>2]|0;
     $177 = ($174>>>0)<($176>>>0);
     if (!($177)) {
      break;
     }
     $178 = $13;
     $179 = $178 >>> 4;
     $180 = $3;
     $181 = ((($180)) + 16|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (($182) + ($179<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = $13;
     $186 = $185 & 15;
     $187 = $186 << 1;
     $188 = $184 >>> $187;
     $189 = $188 & 3;
     $190 = ($189|0)==(0);
     if (!($190)) {
      break;
     }
     $191 = $13;
     $192 = $3;
     $193 = ((($192)) + 20|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (($194) + ($191<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $15 = $196;
     $197 = $9;
     $198 = $13;
     $199 = $3;
     $200 = ((($199)) + 20|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = (($201) + ($198<<2)|0);
     HEAP32[$202>>2] = $197;
     $203 = $15;
     $9 = $203;
     $204 = $13;
     $205 = $3;
     $206 = ((($205)) + 24|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = (($207) + ($204<<2)|0);
     $209 = HEAP32[$208>>2]|0;
     $16 = $209;
     $210 = $10;
     $211 = $13;
     $212 = $3;
     $213 = ((($212)) + 24|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = (($214) + ($211<<2)|0);
     HEAP32[$215>>2] = $210;
     $216 = $16;
     $10 = $216;
     $217 = $13;
     $218 = $217 & 15;
     $219 = $218 << 1;
     $220 = 1 << $219;
     $221 = $13;
     $222 = $221 >>> 4;
     $223 = $3;
     $224 = ((($223)) + 16|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = (($225) + ($222<<2)|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = $227 | $220;
     HEAP32[$226>>2] = $228;
    }
    $229 = $9;
    $230 = $13;
    $231 = $3;
    $232 = ((($231)) + 20|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = (($233) + ($230<<2)|0);
    HEAP32[$234>>2] = $229;
    $235 = $10;
    $236 = $13;
    $237 = $3;
    $238 = ((($237)) + 24|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = (($239) + ($236<<2)|0);
    HEAP32[$240>>2] = $235;
   }
   $241 = $6;
   $242 = (($241) + 1)|0;
   $6 = $242;
  }
  $243 = $3;
  $244 = HEAP32[$243>>2]|0;
  $245 = $4;
  $246 = ($244>>>0)>($245>>>0);
  if ($246) {
   $247 = $3;
   $248 = ((($247)) + 20|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = $4;
   $251 = $250<<2;
   $252 = (_realloc($249,$251)|0);
   $253 = $3;
   $254 = ((($253)) + 20|0);
   HEAP32[$254>>2] = $252;
   $255 = $3;
   $256 = ((($255)) + 24|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = $4;
   $259 = $258<<2;
   $260 = (_realloc($257,$259)|0);
   $261 = $3;
   $262 = ((($261)) + 24|0);
   HEAP32[$262>>2] = $260;
  }
  $263 = $3;
  $264 = ((($263)) + 16|0);
  $265 = HEAP32[$264>>2]|0;
  _free($265);
  $266 = $5;
  $267 = $3;
  $268 = ((($267)) + 16|0);
  HEAP32[$268>>2] = $266;
  $269 = $4;
  $270 = $3;
  HEAP32[$270>>2] = $269;
  $271 = $3;
  $272 = ((($271)) + 4|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = $3;
  $275 = ((($274)) + 8|0);
  HEAP32[$275>>2] = $273;
  $276 = $3;
  $277 = HEAP32[$276>>2]|0;
  $278 = (+($277>>>0));
  $279 = $278 * 0.77000000000000001;
  $280 = $279 + 0.5;
  $281 = (~~(($280))>>>0);
  $282 = $3;
  $283 = ((($282)) + 12|0);
  HEAP32[$283>>2] = $281;
 }
 $2 = 0;
 $284 = $2;
 STACKTOP = sp;return ($284|0);
}
function ___ac_X31_hash_string_200($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 << 24 >> 24;
 $2 = $5;
 $6 = $2;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 $8 = $1;
 $9 = ((($8)) + 1|0);
 $1 = $9;
 while(1) {
  $10 = $1;
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)!=(0);
  if (!($12)) {
   break;
  }
  $13 = $2;
  $14 = $13 << 5;
  $15 = $2;
  $16 = (($14) - ($15))|0;
  $17 = $1;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = (($16) + ($19))|0;
  $2 = $20;
  $21 = $1;
  $22 = ((($21)) + 1|0);
  $1 = $22;
 }
 $23 = $2;
 STACKTOP = sp;return ($23|0);
}
function _hopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = (_find_scheme_handler($6)|0);
 $5 = $7;
 $8 = $5;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $5;
  $11 = HEAP32[$10>>2]|0;
  $12 = $3;
  $13 = $4;
  $14 = (FUNCTION_TABLE_iii[$11 & 63]($12,$13)|0);
  $2 = $14;
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 $15 = $3;
 $16 = (_strcmp($15,17482)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = $4;
  $19 = (_hopen_fd_stdinout($18)|0);
  $2 = $19;
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 } else {
  $20 = $3;
  $21 = $4;
  $22 = (_hopen_fd($20,$21)|0);
  $2 = $22;
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _find_scheme_handler($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $2 = $0;
 $4 = 0;
 while(1) {
  $6 = $4;
  $7 = ($6>>>0)<(12);
  if (!($7)) {
   break;
  }
  $8 = $4;
  $9 = $2;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = (_isalnum_c($11)|0);
  $13 = ($12|0)!=(0);
  if (!($13)) {
   $14 = $4;
   $15 = $2;
   $16 = (($15) + ($14)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17 << 24 >> 24;
   $19 = ($18|0)==(43);
   if (!($19)) {
    $20 = $4;
    $21 = $2;
    $22 = (($21) + ($20)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23 << 24 >> 24;
    $25 = ($24|0)==(45);
    if (!($25)) {
     $26 = $4;
     $27 = $2;
     $28 = (($27) + ($26)|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = $29 << 24 >> 24;
     $31 = ($30|0)==(46);
     if (!($31)) {
      label = 8;
      break;
     }
    }
   }
  }
  $32 = $4;
  $33 = $2;
  $34 = (($33) + ($32)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = (_tolower_c_204($35)|0);
  $37 = $4;
  $38 = (($3) + ($37)|0);
  HEAP8[$38>>0] = $36;
  $39 = $4;
  $40 = (($39) + 1)|0;
  $4 = $40;
 }
 if ((label|0) == 8) {
  $41 = $4;
  $42 = $2;
  $43 = (($42) + ($41)|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44 << 24 >> 24;
  $46 = ($45|0)==(58);
  if (!($46)) {
   $1 = 0;
   $68 = $1;
   STACKTOP = sp;return ($68|0);
  }
 }
 $47 = $4;
 $48 = ($47|0)==(0);
 $49 = $4;
 $50 = ($49>>>0)>=(12);
 $or$cond = $48 | $50;
 if ($or$cond) {
  $1 = 0;
  $68 = $1;
  STACKTOP = sp;return ($68|0);
 }
 $51 = $4;
 $52 = (($3) + ($51)|0);
 HEAP8[$52>>0] = 0;
 (_pthread_mutex_lock((25796|0))|0);
 $53 = HEAP32[6448]|0;
 $54 = ($53|0)!=(0|0);
 if (!($54)) {
  _load_hfile_plugins();
 }
 (_pthread_mutex_unlock((25796|0))|0);
 $55 = HEAP32[6448]|0;
 $56 = (_kh_get_scheme_string($55,$3)|0);
 $5 = $56;
 $57 = $5;
 $58 = HEAP32[6448]|0;
 $59 = HEAP32[$58>>2]|0;
 $60 = ($57|0)!=($59|0);
 if ($60) {
  $61 = $5;
  $62 = HEAP32[6448]|0;
  $63 = ((($62)) + 24|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + ($61<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $66;
 } else {
  $67 = 9180;
 }
 $1 = $67;
 $68 = $1;
 STACKTOP = sp;return ($68|0);
}
function _hopen_fd_stdinout($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_strchr($3,114)|0);
 $5 = ($4|0)!=(0|0);
 $6 = $5 ? 0 : 1;
 $2 = $6;
 $7 = $2;
 $8 = $1;
 $9 = (_hdopen($7,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _hopen_fd($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $8 = $3;
 $9 = $4;
 $10 = (_hfile_oflags($9)|0);
 HEAP32[$vararg_buffer>>2] = 438;
 $11 = (_open($8,$10,$vararg_buffer)|0);
 $6 = $11;
 $12 = $6;
 $13 = ($12|0)<(0);
 if (!($13)) {
  $14 = $4;
  $15 = $6;
  $16 = (_blksize($15)|0);
  $17 = (_hfile_init(40,$14,$16)|0);
  $5 = $17;
  $18 = $5;
  $19 = ($18|0)==(0|0);
  if (!($19)) {
   $20 = $6;
   $21 = $5;
   $22 = ((($21)) + 32|0);
   HEAP32[$22>>2] = $20;
   $23 = $5;
   $24 = ((($23)) + 36|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25 & -2;
   HEAP8[$24>>0] = $26;
   $27 = $5;
   $28 = ((($27)) + 16|0);
   HEAP32[$28>>2] = 9160;
   $29 = $5;
   $2 = $29;
   $38 = $2;
   STACKTOP = sp;return ($38|0);
  }
 }
 $30 = $6;
 $31 = ($30|0)>=(0);
 if ($31) {
  $32 = (___errno_location()|0);
  $33 = HEAP32[$32>>2]|0;
  $7 = $33;
  $34 = $6;
  (_close($34)|0);
  $35 = $7;
  $36 = (___errno_location()|0);
  HEAP32[$36>>2] = $35;
 }
 $37 = $5;
 _hfile_destroy($37);
 $2 = 0;
 $38 = $2;
 STACKTOP = sp;return ($38|0);
}
function _isalnum_c($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2&255;
 $4 = (_isalnum($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _tolower_c_204($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2&255;
 $4 = (_tolower($3)|0);
 $5 = $4&255;
 STACKTOP = sp;return ($5|0);
}
function _load_hfile_plugins() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_kh_init_scheme_string()|0);
 HEAP32[6448] = $0;
 $1 = HEAP32[6448]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  _abort();
  // unreachable;
 } else {
  _hfile_add_scheme_handler(17493,9196);
  _hfile_add_scheme_handler(17498,9212);
  (_init_add_plugin(0,35,21930)|0);
  (_atexit((36|0))|0);
  return;
 }
}
function _kh_get_scheme_string($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $2 = 0;
  $85 = $2;
  STACKTOP = sp;return ($85|0);
 }
 $9 = 0;
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - 1)|0;
 $8 = $15;
 $16 = $4;
 $17 = (___ac_X31_hash_string_200($16)|0);
 $5 = $17;
 $18 = $5;
 $19 = $8;
 $20 = $18 & $19;
 $6 = $20;
 $21 = $6;
 $7 = $21;
 while(1) {
  $22 = $6;
  $23 = $22 >>> 4;
  $24 = $3;
  $25 = ((($24)) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + ($23<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $6;
  $30 = $29 & 15;
  $31 = $30 << 1;
  $32 = $28 >>> $31;
  $33 = $32 & 2;
  $34 = ($33|0)!=(0);
  if ($34) {
   $86 = 0;
  } else {
   $35 = $6;
   $36 = $35 >>> 4;
   $37 = $3;
   $38 = ((($37)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + ($36<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $6;
   $43 = $42 & 15;
   $44 = $43 << 1;
   $45 = $41 >>> $44;
   $46 = $45 & 1;
   $47 = ($46|0)!=(0);
   if ($47) {
    $86 = 1;
   } else {
    $48 = $6;
    $49 = $3;
    $50 = ((($49)) + 20|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($51) + ($48<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $4;
    $55 = (_strcmp($53,$54)|0);
    $56 = ($55|0)==(0);
    $57 = $56 ^ 1;
    $86 = $57;
   }
  }
  $58 = $6;
  if (!($86)) {
   break;
  }
  $59 = $9;
  $60 = (($59) + 1)|0;
  $9 = $60;
  $61 = (($58) + ($60))|0;
  $62 = $8;
  $63 = $61 & $62;
  $6 = $63;
  $64 = $6;
  $65 = $7;
  $66 = ($64|0)==($65|0);
  if ($66) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  $67 = $3;
  $68 = HEAP32[$67>>2]|0;
  $2 = $68;
  $85 = $2;
  STACKTOP = sp;return ($85|0);
 }
 $69 = $58 >>> 4;
 $70 = $3;
 $71 = ((($70)) + 16|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($72) + ($69<<2)|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $6;
 $76 = $75 & 15;
 $77 = $76 << 1;
 $78 = $74 >>> $77;
 $79 = $78 & 3;
 $80 = ($79|0)!=(0);
 if ($80) {
  $81 = $3;
  $82 = HEAP32[$81>>2]|0;
  $84 = $82;
 } else {
  $83 = $6;
  $84 = $83;
 }
 $2 = $84;
 $85 = $2;
 STACKTOP = sp;return ($85|0);
}
function _hopen_unknown_scheme($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_hopen_fd($5,$6)|0);
 $4 = $7;
 $8 = $4;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = (___errno_location()|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(2);
  if ($12) {
   $13 = (___errno_location()|0);
   HEAP32[$13>>2] = 93;
  }
 }
 $14 = $4;
 STACKTOP = sp;return ($14|0);
}
function _hfile_always_local($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 0;
}
function _kh_init_scheme_string() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,28)|0);
 return ($0|0);
}
function _init_add_plugin($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = (_malloc(20)|0);
 $7 = $9;
 $10 = $7;
 $11 = ($10|0)==(0|0);
 if ($11) {
  _abort();
  // unreachable;
 }
 $12 = $7;
 HEAP32[$12>>2] = 1;
 $13 = $4;
 $14 = $7;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = $13;
 $16 = $7;
 $17 = ((($16)) + 8|0);
 HEAP32[$17>>2] = 0;
 $18 = $7;
 $19 = ((($18)) + 12|0);
 HEAP32[$19>>2] = 0;
 $20 = $5;
 $21 = $7;
 $22 = (FUNCTION_TABLE_ii[$20 & 63]($21)|0);
 $8 = $22;
 $23 = $8;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = (3)>=(4);
  if ($25) {
   $26 = HEAP32[2410]|0;
   $27 = $6;
   $28 = $8;
   HEAP32[$vararg_buffer>>2] = $27;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $28;
   (_fprintf($26,17503,$vararg_buffer)|0);
  }
  $29 = $7;
  _free($29);
  $30 = $8;
  $3 = $30;
  $38 = $3;
  STACKTOP = sp;return ($38|0);
 } else {
  $31 = (3)>=(5);
  if ($31) {
   $32 = HEAP32[2410]|0;
   $33 = $6;
   HEAP32[$vararg_buffer2>>2] = $33;
   (_fprintf($32,17570,$vararg_buffer2)|0);
  }
  $34 = HEAP32[6456]|0;
  $35 = $7;
  $36 = ((($35)) + 16|0);
  HEAP32[$36>>2] = $34;
  $37 = $7;
  HEAP32[6456] = $37;
  $3 = 0;
  $38 = $3;
  STACKTOP = sp;return ($38|0);
 }
 return (0)|0;
}
function _hfile_exit() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 (_pthread_mutex_lock((25796|0))|0);
 $1 = HEAP32[6448]|0;
 _kh_destroy_scheme_string($1);
 while(1) {
  $2 = HEAP32[6456]|0;
  $3 = ($2|0)!=(0|0);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[6456]|0;
  $0 = $4;
  $5 = $0;
  $6 = ((($5)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if ($8) {
   $9 = $0;
   $10 = ((($9)) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   FUNCTION_TABLE_v[$11 & 63]();
  }
  $12 = $0;
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[6456] = $14;
  $15 = $0;
  _free($15);
 }
 (_pthread_mutex_unlock((25796|0))|0);
 (_pthread_mutex_destroy((25796|0))|0);
 STACKTOP = sp;return;
}
function _kh_destroy_scheme_string($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _hopen_fd_fileuri($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = (_strncmp($5,17607,17)|0);
 $7 = ($6|0)==(0);
 $8 = $3;
 do {
  if ($7) {
   $9 = ((($8)) + 16|0);
   $3 = $9;
  } else {
   $10 = (_strncmp($8,17625,8)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = $3;
    $13 = ((($12)) + 7|0);
    $3 = $13;
    break;
   }
   $14 = (___errno_location()|0);
   HEAP32[$14>>2] = 93;
   $2 = 0;
   $18 = $2;
   STACKTOP = sp;return ($18|0);
  }
 } while(0);
 $15 = $3;
 $16 = $4;
 $17 = (_hopen_fd($15,$16)|0);
 $2 = $17;
 $18 = $2;
 STACKTOP = sp;return ($18|0);
}
function _hopen_mem($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = (_strncmp($6,17634,5)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $3;
  $10 = ((($9)) + 5|0);
  $3 = $10;
 }
 $11 = $4;
 $12 = (_strchr($11,114)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = (___errno_location()|0);
  HEAP32[$14>>2] = 22;
  $2 = 0;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 }
 $15 = $4;
 $16 = (_hfile_init(44,$15,0)|0);
 $5 = $16;
 $17 = $5;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $2 = 0;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 } else {
  $19 = $3;
  $20 = $5;
  $21 = ((($20)) + 32|0);
  HEAP32[$21>>2] = $19;
  $22 = $3;
  $23 = (_strlen($22)|0);
  $24 = $5;
  $25 = ((($24)) + 36|0);
  HEAP32[$25>>2] = $23;
  $26 = $5;
  $27 = ((($26)) + 40|0);
  HEAP32[$27>>2] = 0;
  $28 = $5;
  $29 = ((($28)) + 16|0);
  HEAP32[$29>>2] = 9228;
  $30 = $5;
  $2 = $30;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _mem_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $6 = $8;
 $9 = $6;
 $10 = ((($9)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $6;
 $13 = ((($12)) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($11) - ($14))|0;
 $7 = $15;
 $16 = $5;
 $17 = $7;
 $18 = ($16>>>0)>($17>>>0);
 if ($18) {
  $19 = $7;
  $5 = $19;
 }
 $20 = $4;
 $21 = $6;
 $22 = ((($21)) + 32|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $6;
 $25 = ((($24)) + 40|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($23) + ($26)|0);
 $28 = $5;
 _memcpy(($20|0),($27|0),($28|0))|0;
 $29 = $5;
 $30 = $6;
 $31 = ((($30)) + 40|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + ($29))|0;
 HEAP32[$31>>2] = $33;
 $34 = $5;
 STACKTOP = sp;return ($34|0);
}
function _mem_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $7 = $10;
 $11 = $5;
 $12 = ($11|0)>=(0);
 $13 = $5;
 $14 = (0 - ($13))|0;
 $15 = $12 ? $13 : $14;
 $8 = $15;
 $16 = $6;
 switch ($16|0) {
 case 0:  {
  $9 = 0;
  break;
 }
 case 1:  {
  $17 = $7;
  $18 = ((($17)) + 40|0);
  $19 = HEAP32[$18>>2]|0;
  $9 = $19;
  break;
 }
 case 2:  {
  $20 = $7;
  $21 = ((($20)) + 36|0);
  $22 = HEAP32[$21>>2]|0;
  $9 = $22;
  break;
 }
 default: {
  $23 = (___errno_location()|0);
  HEAP32[$23>>2] = 22;
  $3 = -1;
  $47 = $3;
  STACKTOP = sp;return ($47|0);
 }
 }
 $24 = $5;
 $25 = ($24|0)<(0);
 if ($25) {
  $26 = $8;
  $27 = $9;
  $28 = ($26>>>0)>($27>>>0);
  if (!($28)) {
   label = 8;
  }
 } else {
  label = 8;
 }
 do {
  if ((label|0) == 8) {
   $29 = $5;
   $30 = ($29|0)>=(0);
   if ($30) {
    $31 = $8;
    $32 = $7;
    $33 = ((($32)) + 36|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $9;
    $36 = (($34) - ($35))|0;
    $37 = ($31>>>0)>($36>>>0);
    if ($37) {
     break;
    }
   }
   $39 = $9;
   $40 = $5;
   $41 = (($39) + ($40))|0;
   $42 = $7;
   $43 = ((($42)) + 40|0);
   HEAP32[$43>>2] = $41;
   $44 = $7;
   $45 = ((($44)) + 40|0);
   $46 = HEAP32[$45>>2]|0;
   $3 = $46;
   $47 = $3;
   STACKTOP = sp;return ($47|0);
  }
 } while(0);
 $38 = (___errno_location()|0);
 HEAP32[$38>>2] = 22;
 $3 = -1;
 $47 = $3;
 STACKTOP = sp;return ($47|0);
}
function _mem_close($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 0;
}
function _hfile_always_remote($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 1;
}
function _bam_hdr_init() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,32)|0);
 return ($0|0);
}
function _bam_hdr_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $2 = 0;
  while(1) {
   $9 = $2;
   $10 = $1;
   $11 = HEAP32[$10>>2]|0;
   $12 = ($9|0)<($11|0);
   if (!($12)) {
    break;
   }
   $13 = $2;
   $14 = $1;
   $15 = ((($14)) + 20|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + ($13<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   _free($18);
   $19 = $2;
   $20 = (($19) + 1)|0;
   $2 = $20;
  }
  $21 = $1;
  $22 = ((($21)) + 20|0);
  $23 = HEAP32[$22>>2]|0;
  _free($23);
  $24 = $1;
  $25 = ((($24)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  _free($26);
 }
 $27 = $1;
 $28 = ((($27)) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 _free($29);
 $30 = $1;
 $31 = ((($30)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 _free($32);
 $33 = $1;
 $34 = ((($33)) + 28|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0|0);
 if ($36) {
  $37 = $1;
  $38 = ((($37)) + 28|0);
  $39 = HEAP32[$38>>2]|0;
  _kh_destroy_s2i($39);
 }
 $40 = $1;
 _free($40);
 STACKTOP = sp;return;
}
function _bam_hdr_read($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 88|0;
 $8 = sp + 60|0;
 $2 = $0;
 $9 = 0;
 $13 = $2;
 $14 = (_bgzf_check_EOF($13)|0);
 $6 = $14;
 $15 = $6;
 $16 = ($15|0)<(0);
 if ($16) {
  _perror(17640);
 } else {
  $17 = $6;
  $18 = ($17|0)==(0);
  $19 = (3)>=(2);
  $or$cond = $18 & $19;
  if ($or$cond) {
   $20 = HEAP32[2410]|0;
   HEAP32[$vararg_buffer>>2] = 17737;
   (_fprintf($20,17673,$vararg_buffer)|0);
  }
 }
 $21 = $2;
 $22 = (_bgzf_read($21,$4,4)|0);
 $5 = $22;
 $23 = $5;
 $24 = ($23|0)!=(4);
 if (!($24)) {
  $25 = (_strncmp($4,17750,4)|0);
  $26 = ($25|0)!=(0);
  if (!($26)) {
   $29 = (_bam_hdr_init()|0);
   $3 = $29;
   $30 = $3;
   $31 = ($30|0)!=(0|0);
   L9: do {
    if ($31) {
     $32 = $2;
     $33 = $3;
     $34 = ((($33)) + 8|0);
     $35 = (_bgzf_read($32,$34,4)|0);
     $11 = $35;
     $36 = $11;
     $37 = ($36|0)!=(4);
     L11: do {
      if (!($37)) {
       $38 = $2;
       $39 = HEAP32[$38>>2]|0;
       $40 = $39 >>> 18;
       $41 = $40 & 3;
       $42 = ($41|0)!=(0);
       if ($42) {
        $43 = $3;
        $44 = ((($43)) + 8|0);
        (_ed_swap_4p_364($44)|0);
       }
       $45 = $3;
       $46 = ((($45)) + 8|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = (($47) + 1)|0;
       $10 = $48;
       $49 = $10;
       $50 = $3;
       $51 = ((($50)) + 8|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = ($49>>>0)<($52>>>0);
       if ($53) {
        label = 42;
        break L9;
       }
       $54 = $10;
       $55 = (_malloc($54)|0);
       $56 = $3;
       $57 = ((($56)) + 24|0);
       HEAP32[$57>>2] = $55;
       $58 = $3;
       $59 = ((($58)) + 24|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ($60|0)!=(0|0);
       if (!($61)) {
        label = 42;
        break L9;
       }
       $62 = $3;
       $63 = ((($62)) + 8|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = $3;
       $66 = ((($65)) + 24|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = (($67) + ($64)|0);
       HEAP8[$68>>0] = 0;
       $69 = $2;
       $70 = $3;
       $71 = ((($70)) + 24|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = $3;
       $74 = ((($73)) + 8|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = (_bgzf_read($69,$72,$75)|0);
       $11 = $76;
       $77 = $11;
       $78 = $3;
       $79 = ((($78)) + 8|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = ($77|0)!=($80|0);
       if (!($81)) {
        $82 = $2;
        $83 = $3;
        $84 = (_bgzf_read($82,$83,4)|0);
        $11 = $84;
        $85 = $11;
        $86 = ($85|0)!=(4);
        if (!($86)) {
         $87 = $2;
         $88 = HEAP32[$87>>2]|0;
         $89 = $88 >>> 18;
         $90 = $89 & 3;
         $91 = ($90|0)!=(0);
         if ($91) {
          $92 = $3;
          (_ed_swap_4p_364($92)|0);
         }
         $93 = $3;
         $94 = HEAP32[$93>>2]|0;
         $95 = ($94|0)<(0);
         L23: do {
          if (!($95)) {
           $96 = $3;
           $97 = HEAP32[$96>>2]|0;
           $98 = ($97|0)>(0);
           $99 = $3;
           if ($98) {
            $100 = HEAP32[$99>>2]|0;
            $101 = (_calloc($100,4)|0);
            $102 = $3;
            $103 = ((($102)) + 20|0);
            HEAP32[$103>>2] = $101;
            $104 = $3;
            $105 = ((($104)) + 20|0);
            $106 = HEAP32[$105>>2]|0;
            $107 = ($106|0)!=(0|0);
            if (!($107)) {
             label = 42;
             break L9;
            }
            $108 = $3;
            $109 = HEAP32[$108>>2]|0;
            $110 = (_calloc($109,4)|0);
            $111 = $3;
            $112 = ((($111)) + 12|0);
            HEAP32[$112>>2] = $110;
            $113 = $3;
            $114 = ((($113)) + 12|0);
            $115 = HEAP32[$114>>2]|0;
            $116 = ($115|0)!=(0|0);
            if (!($116)) {
             label = 42;
             break L9;
            }
           } else {
            $117 = ((($99)) + 20|0);
            HEAP32[$117>>2] = 0;
            $118 = $3;
            $119 = ((($118)) + 12|0);
            HEAP32[$119>>2] = 0;
           }
           $7 = 0;
           while(1) {
            $120 = $7;
            $121 = $3;
            $122 = HEAP32[$121>>2]|0;
            $123 = ($120|0)!=($122|0);
            if (!($123)) {
             break;
            }
            $124 = $2;
            $125 = (_bgzf_read($124,$8,4)|0);
            $11 = $125;
            $126 = $11;
            $127 = ($126|0)!=(4);
            if ($127) {
             break L11;
            }
            $128 = $2;
            $129 = HEAP32[$128>>2]|0;
            $130 = $129 >>> 18;
            $131 = $130 & 3;
            $132 = ($131|0)!=(0);
            if ($132) {
             (_ed_swap_4p_364($8)|0);
            }
            $133 = HEAP32[$8>>2]|0;
            $134 = ($133|0)<=(0);
            if ($134) {
             break L23;
            }
            $135 = HEAP32[$8>>2]|0;
            $136 = (_malloc($135)|0);
            $137 = $7;
            $138 = $3;
            $139 = ((($138)) + 20|0);
            $140 = HEAP32[$139>>2]|0;
            $141 = (($140) + ($137<<2)|0);
            HEAP32[$141>>2] = $136;
            $142 = $7;
            $143 = $3;
            $144 = ((($143)) + 20|0);
            $145 = HEAP32[$144>>2]|0;
            $146 = (($145) + ($142<<2)|0);
            $147 = HEAP32[$146>>2]|0;
            $148 = ($147|0)!=(0|0);
            if (!($148)) {
             label = 42;
             break L9;
            }
            $149 = $9;
            $150 = (($149) + 1)|0;
            $9 = $150;
            $151 = $2;
            $152 = $7;
            $153 = $3;
            $154 = ((($153)) + 20|0);
            $155 = HEAP32[$154>>2]|0;
            $156 = (($155) + ($152<<2)|0);
            $157 = HEAP32[$156>>2]|0;
            $158 = HEAP32[$8>>2]|0;
            $159 = (_bgzf_read($151,$157,$158)|0);
            $11 = $159;
            $160 = $11;
            $161 = HEAP32[$8>>2]|0;
            $162 = ($160|0)!=($161|0);
            if ($162) {
             break L11;
            }
            $163 = HEAP32[$8>>2]|0;
            $164 = (($163) - 1)|0;
            $165 = $7;
            $166 = $3;
            $167 = ((($166)) + 20|0);
            $168 = HEAP32[$167>>2]|0;
            $169 = (($168) + ($165<<2)|0);
            $170 = HEAP32[$169>>2]|0;
            $171 = (($170) + ($164)|0);
            $172 = HEAP8[$171>>0]|0;
            $173 = $172 << 24 >> 24;
            $174 = ($173|0)!=(0);
            if ($174) {
             $175 = HEAP32[$8>>2]|0;
             $176 = ($175|0)==(2147483647);
             if ($176) {
              break L23;
             }
             $177 = $7;
             $178 = $3;
             $179 = ((($178)) + 20|0);
             $180 = HEAP32[$179>>2]|0;
             $181 = (($180) + ($177<<2)|0);
             $182 = HEAP32[$181>>2]|0;
             $183 = HEAP32[$8>>2]|0;
             $184 = (($183) + 1)|0;
             $185 = (_realloc($182,$184)|0);
             $12 = $185;
             $186 = $12;
             $187 = ($186|0)==(0|0);
             if ($187) {
              label = 42;
              break L9;
             }
             $188 = $12;
             $189 = $7;
             $190 = $3;
             $191 = ((($190)) + 20|0);
             $192 = HEAP32[$191>>2]|0;
             $193 = (($192) + ($189<<2)|0);
             HEAP32[$193>>2] = $188;
             $194 = HEAP32[$8>>2]|0;
             $195 = $7;
             $196 = $3;
             $197 = ((($196)) + 20|0);
             $198 = HEAP32[$197>>2]|0;
             $199 = (($198) + ($195<<2)|0);
             $200 = HEAP32[$199>>2]|0;
             $201 = (($200) + ($194)|0);
             HEAP8[$201>>0] = 0;
            }
            $202 = $2;
            $203 = $7;
            $204 = $3;
            $205 = ((($204)) + 12|0);
            $206 = HEAP32[$205>>2]|0;
            $207 = (($206) + ($203<<2)|0);
            $208 = (_bgzf_read($202,$207,4)|0);
            $11 = $208;
            $209 = $11;
            $210 = ($209|0)!=(4);
            if ($210) {
             break L11;
            }
            $211 = $2;
            $212 = HEAP32[$211>>2]|0;
            $213 = $212 >>> 18;
            $214 = $213 & 3;
            $215 = ($214|0)!=(0);
            if ($215) {
             $216 = $7;
             $217 = $3;
             $218 = ((($217)) + 12|0);
             $219 = HEAP32[$218>>2]|0;
             $220 = (($219) + ($216<<2)|0);
             (_ed_swap_4p_364($220)|0);
            }
            $221 = $7;
            $222 = (($221) + 1)|0;
            $7 = $222;
           }
           $223 = $3;
           $1 = $223;
           $237 = $1;
           STACKTOP = sp;return ($237|0);
          }
         } while(0);
         $230 = (3)>=(1);
         if (!($230)) {
          break L9;
         }
         $231 = HEAP32[2410]|0;
         HEAP32[$vararg_buffer13>>2] = 17737;
         (_fprintf($231,17755,$vararg_buffer13)|0);
         break L9;
        }
       }
      }
     } while(0);
     $226 = (3)>=(1);
     if ($226) {
      $227 = $11;
      $228 = ($227|0)<(0);
      $229 = HEAP32[2410]|0;
      if ($228) {
       HEAP32[$vararg_buffer7>>2] = 17737;
       (_fprintf($229,17813,$vararg_buffer7)|0);
       break;
      } else {
       HEAP32[$vararg_buffer10>>2] = 17737;
       (_fprintf($229,17848,$vararg_buffer10)|0);
       break;
      }
     }
    } else {
     label = 42;
    }
   } while(0);
   if ((label|0) == 42) {
    $224 = (3)>=(1);
    if ($224) {
     $225 = HEAP32[2410]|0;
     HEAP32[$vararg_buffer4>>2] = 17737;
     (_fprintf($225,17790,$vararg_buffer4)|0);
    }
   }
   $232 = $3;
   $233 = ($232|0)!=(0|0);
   if ($233) {
    $234 = $9;
    $235 = $3;
    HEAP32[$235>>2] = $234;
    $236 = $3;
    _bam_hdr_destroy($236);
   }
   $1 = 0;
   $237 = $1;
   STACKTOP = sp;return ($237|0);
  }
 }
 $27 = (3)>=(1);
 if ($27) {
  $28 = HEAP32[2410]|0;
  HEAP32[$vararg_buffer1>>2] = 17737;
  (_fprintf($28,17755,$vararg_buffer1)|0);
 }
 $1 = 0;
 $237 = $1;
 STACKTOP = sp;return ($237|0);
}
function _ed_swap_4p_364($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (_ed_swap_4_368($3)|0);
 $5 = $1;
 HEAP32[$5>>2] = $4;
 $6 = $1;
 STACKTOP = sp;return ($6|0);
}
function _ed_swap_4_368($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 & 65535;
 $4 = $3 << 16;
 $5 = $1;
 $6 = $5 >>> 16;
 $7 = $4 | $6;
 $1 = $7;
 $8 = $1;
 $9 = $8 & 16711935;
 $10 = $9 << 8;
 $11 = $1;
 $12 = $11 & -16711936;
 $13 = $12 >>> 8;
 $14 = $10 | $13;
 STACKTOP = sp;return ($14|0);
}
function _bam_name2id($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $4 = $10;
 $11 = $2;
 $12 = ((($11)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $15 = (_kh_init_s2i()|0);
  $4 = $15;
  $6 = 0;
  while(1) {
   $16 = $6;
   $17 = $2;
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)<($18|0);
   $20 = $4;
   if (!($19)) {
    break;
   }
   $21 = $6;
   $22 = $2;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + ($21<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (_kh_put_s2i($20,$26,$7)|0);
   $5 = $27;
   $28 = $6;
   $29 = ($28|0)<(0);
   $30 = $29 << 31 >> 31;
   $31 = $5;
   $32 = $4;
   $33 = ((($32)) + 24|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + ($31<<3)|0);
   $36 = $35;
   $37 = $36;
   HEAP32[$37>>2] = $28;
   $38 = (($36) + 4)|0;
   $39 = $38;
   HEAP32[$39>>2] = $30;
   $40 = $6;
   $41 = (($40) + 1)|0;
   $6 = $41;
  }
  $42 = $2;
  $43 = ((($42)) + 28|0);
  HEAP32[$43>>2] = $20;
 }
 $44 = $4;
 $45 = $3;
 $46 = (_kh_get_s2i($44,$45)|0);
 $5 = $46;
 $47 = $5;
 $48 = $4;
 $49 = HEAP32[$48>>2]|0;
 $50 = ($47|0)==($49|0);
 if ($50) {
  $62 = -1;$63 = -1;
  STACKTOP = sp;return ($62|0);
 }
 $51 = $5;
 $52 = $4;
 $53 = ((($52)) + 24|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + ($51<<3)|0);
 $56 = $55;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = (($56) + 4)|0;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = $58;$63 = $61;
 STACKTOP = sp;return ($62|0);
}
function _bam_init1() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,56)|0);
 return ($0|0);
}
function _bam_cigar2qlen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = 0;
 $4 = 0;
 while(1) {
  $6 = $4;
  $7 = $2;
  $8 = ($6|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $4;
  $10 = $3;
  $11 = (($10) + ($9<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 & 15;
  $14 = $13 << 1;
  $15 = 246183 >> $14;
  $16 = $15 & 3;
  $17 = $16 & 1;
  $18 = ($17|0)!=(0);
  if ($18) {
   $19 = $4;
   $20 = $3;
   $21 = (($20) + ($19<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $22 >>> 4;
   $24 = $5;
   $25 = (($24) + ($23))|0;
   $5 = $25;
  }
  $26 = $4;
  $27 = (($26) + 1)|0;
  $4 = $27;
 }
 $28 = $5;
 STACKTOP = sp;return ($28|0);
}
function _bam_cigar2rlen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = 0;
 $4 = 0;
 while(1) {
  $6 = $4;
  $7 = $2;
  $8 = ($6|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $4;
  $10 = $3;
  $11 = (($10) + ($9<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 & 15;
  $14 = $13 << 1;
  $15 = 246183 >> $14;
  $16 = $15 & 3;
  $17 = $16 & 2;
  $18 = ($17|0)!=(0);
  if ($18) {
   $19 = $4;
   $20 = $3;
   $21 = (($20) + ($19<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $22 >>> 4;
   $24 = $5;
   $25 = (($24) + ($23))|0;
   $5 = $25;
  }
  $26 = $4;
  $27 = (($26) + 1)|0;
  $4 = $27;
 }
 $28 = $5;
 STACKTOP = sp;return ($28|0);
}
function _bam_read1($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 40|0;
 $9 = sp;
 $3 = $0;
 $4 = $1;
 $10 = $4;
 $5 = $10;
 $11 = $3;
 $12 = (_bgzf_read($11,$6,4)|0);
 $7 = $12;
 $13 = ($12|0)!=(4);
 if ($13) {
  $14 = $7;
  $15 = ($14|0)==(0);
  if ($15) {
   $2 = -1;
   $319 = $2;
   STACKTOP = sp;return ($319|0);
  } else {
   $2 = -2;
   $319 = $2;
   STACKTOP = sp;return ($319|0);
  }
 }
 $16 = $3;
 $17 = (_bgzf_read($16,$9,32)|0);
 $18 = ($17|0)!=(32);
 if ($18) {
  $2 = -3;
  $319 = $2;
  STACKTOP = sp;return ($319|0);
 }
 $19 = $3;
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 >>> 18;
 $22 = $21 & 3;
 $23 = ($22|0)!=(0);
 L13: do {
  if ($23) {
   (_ed_swap_4p_364($6)|0);
   $8 = 0;
   while(1) {
    $24 = $8;
    $25 = ($24|0)<(8);
    if (!($25)) {
     break L13;
    }
    $26 = $8;
    $27 = (($9) + ($26<<2)|0);
    (_ed_swap_4p_364($27)|0);
    $28 = $8;
    $29 = (($28) + 1)|0;
    $8 = $29;
   }
  }
 } while(0);
 $30 = HEAP32[$9>>2]|0;
 $31 = $5;
 HEAP32[$31>>2] = $30;
 $32 = ((($9)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $5;
 $35 = ((($34)) + 4|0);
 HEAP32[$35>>2] = $33;
 $36 = ((($9)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37 >>> 16;
 $39 = $5;
 $40 = ((($39)) + 8|0);
 $41 = $40;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = (($41) + 4)|0;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = $38 & 65535;
 $48 = $43 & -65536;
 $49 = $48 | $47;
 $50 = $40;
 $51 = $50;
 HEAP32[$51>>2] = $49;
 $52 = (($50) + 4)|0;
 $53 = $52;
 HEAP32[$53>>2] = $46;
 $54 = ((($9)) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $55 >>> 8;
 $57 = $56 & 255;
 $58 = $5;
 $59 = ((($58)) + 8|0);
 $60 = $59;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = (($60) + 4)|0;
 $64 = $63;
 $65 = HEAP32[$64>>2]|0;
 $66 = (_bitshift64Shl(($57|0),0,16)|0);
 $67 = tempRet0;
 $68 = $62 & -16711681;
 $69 = $68 | $66;
 $70 = $65 | $67;
 $71 = $59;
 $72 = $71;
 HEAP32[$72>>2] = $69;
 $73 = (($71) + 4)|0;
 $74 = $73;
 HEAP32[$74>>2] = $70;
 $75 = ((($9)) + 8|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = $76 & 255;
 $78 = $5;
 $79 = ((($78)) + 8|0);
 $80 = $79;
 $81 = $80;
 $82 = HEAP32[$81>>2]|0;
 $83 = (($80) + 4)|0;
 $84 = $83;
 $85 = HEAP32[$84>>2]|0;
 $86 = (_bitshift64Shl(($77|0),0,24)|0);
 $87 = tempRet0;
 $88 = $82 & 16777215;
 $89 = $88 | $86;
 $90 = $85 | $87;
 $91 = $79;
 $92 = $91;
 HEAP32[$92>>2] = $89;
 $93 = (($91) + 4)|0;
 $94 = $93;
 HEAP32[$94>>2] = $90;
 $95 = ((($9)) + 12|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = $96 >>> 16;
 $98 = $5;
 $99 = ((($98)) + 8|0);
 $100 = $99;
 $101 = $100;
 $102 = HEAP32[$101>>2]|0;
 $103 = (($100) + 4)|0;
 $104 = $103;
 $105 = HEAP32[$104>>2]|0;
 $106 = $97 & 65535;
 $107 = $105 & -65536;
 $108 = $107 | $106;
 $109 = $99;
 $110 = $109;
 HEAP32[$110>>2] = $102;
 $111 = (($109) + 4)|0;
 $112 = $111;
 HEAP32[$112>>2] = $108;
 $113 = ((($9)) + 12|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 65535;
 $116 = $5;
 $117 = ((($116)) + 8|0);
 $118 = $117;
 $119 = $118;
 $120 = HEAP32[$119>>2]|0;
 $121 = (($118) + 4)|0;
 $122 = $121;
 $123 = HEAP32[$122>>2]|0;
 $124 = (_bitshift64Shl(($115|0),0,48)|0);
 $125 = tempRet0;
 $126 = $123 & 65535;
 $127 = $120 | $124;
 $128 = $126 | $125;
 $129 = $117;
 $130 = $129;
 HEAP32[$130>>2] = $127;
 $131 = (($129) + 4)|0;
 $132 = $131;
 HEAP32[$132>>2] = $128;
 $133 = ((($9)) + 16|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = $5;
 $136 = ((($135)) + 16|0);
 HEAP32[$136>>2] = $134;
 $137 = ((($9)) + 20|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = $5;
 $140 = ((($139)) + 20|0);
 HEAP32[$140>>2] = $138;
 $141 = ((($9)) + 24|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = $5;
 $144 = ((($143)) + 24|0);
 HEAP32[$144>>2] = $142;
 $145 = ((($9)) + 28|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = $5;
 $148 = ((($147)) + 28|0);
 HEAP32[$148>>2] = $146;
 $149 = HEAP32[$6>>2]|0;
 $150 = (($149) - 32)|0;
 $151 = $4;
 $152 = ((($151)) + 32|0);
 HEAP32[$152>>2] = $150;
 $153 = $4;
 $154 = ((($153)) + 32|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = ($155|0)<(0);
 if (!($156)) {
  $157 = $5;
  $158 = ((($157)) + 16|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = ($159|0)<(0);
  if (!($160)) {
   $161 = $5;
   $162 = ((($161)) + 8|0);
   $163 = $162;
   $164 = $163;
   $165 = HEAP32[$164>>2]|0;
   $166 = (($163) + 4)|0;
   $167 = $166;
   $168 = HEAP32[$167>>2]|0;
   $169 = (_bitshift64Lshr(($165|0),($168|0),24)|0);
   $170 = tempRet0;
   $171 = $169 & 255;
   $172 = ($171|0)<(1);
   if (!($172)) {
    $173 = $4;
    $174 = ((($173)) + 40|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = $4;
    $177 = ((($176)) + 8|0);
    $178 = $177;
    $179 = $178;
    $180 = HEAP32[$179>>2]|0;
    $181 = (($178) + 4)|0;
    $182 = $181;
    $183 = HEAP32[$182>>2]|0;
    $184 = (_bitshift64Lshr(($180|0),($183|0),48)|0);
    $185 = tempRet0;
    $186 = $184 << 2;
    $187 = (($175) + ($186)|0);
    $188 = $4;
    $189 = ((($188)) + 8|0);
    $190 = $189;
    $191 = $190;
    $192 = HEAP32[$191>>2]|0;
    $193 = (($190) + 4)|0;
    $194 = $193;
    $195 = HEAP32[$194>>2]|0;
    $196 = (_bitshift64Lshr(($192|0),($195|0),24)|0);
    $197 = tempRet0;
    $198 = $196 & 255;
    $199 = (($187) + ($198)|0);
    $200 = $4;
    $201 = ((($200)) + 16|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = (($202) + 1)|0;
    $204 = $203 >> 1;
    $205 = (($199) + ($204)|0);
    $206 = $4;
    $207 = ((($206)) + 16|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = (($205) + ($208)|0);
    $210 = $4;
    $211 = ((($210)) + 40|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = $209;
    $214 = $212;
    $215 = (($213) - ($214))|0;
    $216 = $4;
    $217 = ((($216)) + 32|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = ($215|0)>($218|0);
    if ($219) {
     $2 = -4;
     $319 = $2;
     STACKTOP = sp;return ($319|0);
    }
    $220 = $4;
    $221 = ((($220)) + 36|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = $4;
    $224 = ((($223)) + 32|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = ($222|0)<($225|0);
    if ($226) {
     $227 = $4;
     $228 = ((($227)) + 32|0);
     $229 = HEAP32[$228>>2]|0;
     $230 = $4;
     $231 = ((($230)) + 36|0);
     HEAP32[$231>>2] = $229;
     $232 = $4;
     $233 = ((($232)) + 36|0);
     $234 = HEAP32[$233>>2]|0;
     $235 = (($234) + -1)|0;
     HEAP32[$233>>2] = $235;
     $236 = $4;
     $237 = ((($236)) + 36|0);
     $238 = HEAP32[$237>>2]|0;
     $239 = $238 >> 1;
     $240 = $4;
     $241 = ((($240)) + 36|0);
     $242 = HEAP32[$241>>2]|0;
     $243 = $242 | $239;
     HEAP32[$241>>2] = $243;
     $244 = $4;
     $245 = ((($244)) + 36|0);
     $246 = HEAP32[$245>>2]|0;
     $247 = $246 >> 2;
     $248 = $4;
     $249 = ((($248)) + 36|0);
     $250 = HEAP32[$249>>2]|0;
     $251 = $250 | $247;
     HEAP32[$249>>2] = $251;
     $252 = $4;
     $253 = ((($252)) + 36|0);
     $254 = HEAP32[$253>>2]|0;
     $255 = $254 >> 4;
     $256 = $4;
     $257 = ((($256)) + 36|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = $258 | $255;
     HEAP32[$257>>2] = $259;
     $260 = $4;
     $261 = ((($260)) + 36|0);
     $262 = HEAP32[$261>>2]|0;
     $263 = $262 >> 8;
     $264 = $4;
     $265 = ((($264)) + 36|0);
     $266 = HEAP32[$265>>2]|0;
     $267 = $266 | $263;
     HEAP32[$265>>2] = $267;
     $268 = $4;
     $269 = ((($268)) + 36|0);
     $270 = HEAP32[$269>>2]|0;
     $271 = $270 >> 16;
     $272 = $4;
     $273 = ((($272)) + 36|0);
     $274 = HEAP32[$273>>2]|0;
     $275 = $274 | $271;
     HEAP32[$273>>2] = $275;
     $276 = $4;
     $277 = ((($276)) + 36|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = (($278) + 1)|0;
     HEAP32[$277>>2] = $279;
     $280 = $4;
     $281 = ((($280)) + 40|0);
     $282 = HEAP32[$281>>2]|0;
     $283 = $4;
     $284 = ((($283)) + 36|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = (_realloc($282,$285)|0);
     $287 = $4;
     $288 = ((($287)) + 40|0);
     HEAP32[$288>>2] = $286;
     $289 = $4;
     $290 = ((($289)) + 40|0);
     $291 = HEAP32[$290>>2]|0;
     $292 = ($291|0)!=(0|0);
     if (!($292)) {
      $2 = -4;
      $319 = $2;
      STACKTOP = sp;return ($319|0);
     }
    }
    $293 = $3;
    $294 = $4;
    $295 = ((($294)) + 40|0);
    $296 = HEAP32[$295>>2]|0;
    $297 = $4;
    $298 = ((($297)) + 32|0);
    $299 = HEAP32[$298>>2]|0;
    $300 = (_bgzf_read($293,$296,$299)|0);
    $301 = $4;
    $302 = ((($301)) + 32|0);
    $303 = HEAP32[$302>>2]|0;
    $304 = ($300|0)!=($303|0);
    if ($304) {
     $2 = -4;
     $319 = $2;
     STACKTOP = sp;return ($319|0);
    }
    $305 = $3;
    $306 = HEAP32[$305>>2]|0;
    $307 = $306 >>> 18;
    $308 = $307 & 3;
    $309 = ($308|0)!=(0);
    if ($309) {
     $310 = $5;
     $311 = $4;
     $312 = ((($311)) + 32|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = $4;
     $315 = ((($314)) + 40|0);
     $316 = HEAP32[$315>>2]|0;
     _swap_data($310,$313,$316,0);
    }
    $317 = HEAP32[$6>>2]|0;
    $318 = (4 + ($317))|0;
    $2 = $318;
    $319 = $2;
    STACKTOP = sp;return ($319|0);
   }
  }
 }
 $2 = -4;
 $319 = $2;
 STACKTOP = sp;return ($319|0);
}
function _swap_data($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = sp + 4|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $6;
 $14 = $4;
 $15 = ((($14)) + 8|0);
 $16 = $15;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (_bitshift64Lshr(($18|0),($21|0),24)|0);
 $23 = tempRet0;
 $24 = $22 & 255;
 $25 = (($13) + ($24)|0);
 $9 = $25;
 $26 = $6;
 $27 = $4;
 $28 = ((($27)) + 8|0);
 $29 = $28;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($29) + 4)|0;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = (_bitshift64Lshr(($31|0),($34|0),48)|0);
 $36 = tempRet0;
 $37 = $35<<2;
 $38 = (($26) + ($37)|0);
 $39 = $4;
 $40 = ((($39)) + 8|0);
 $41 = $40;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = (($41) + 4)|0;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = (_bitshift64Lshr(($43|0),($46|0),24)|0);
 $48 = tempRet0;
 $49 = $47 & 255;
 $50 = (($38) + ($49)|0);
 $51 = $4;
 $52 = ((($51)) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($50) + ($53)|0);
 $55 = $4;
 $56 = ((($55)) + 16|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) + 1)|0;
 $59 = (($58|0) / 2)&-1;
 $60 = (($54) + ($59)|0);
 $8 = $60;
 $10 = 0;
 while(1) {
  $61 = $10;
  $62 = $4;
  $63 = ((($62)) + 8|0);
  $64 = $63;
  $65 = $64;
  $66 = HEAP32[$65>>2]|0;
  $67 = (($64) + 4)|0;
  $68 = $67;
  $69 = HEAP32[$68>>2]|0;
  $70 = (_bitshift64Lshr(($66|0),($69|0),48)|0);
  $71 = tempRet0;
  $72 = ($61>>>0)<($70>>>0);
  if (!($72)) {
   break;
  }
  $73 = $10;
  $74 = $9;
  $75 = (($74) + ($73<<2)|0);
  (_ed_swap_4p_364($75)|0);
  $76 = $10;
  $77 = (($76) + 1)|0;
  $10 = $77;
 }
 L4: while(1) {
  $78 = $8;
  $79 = $6;
  $80 = $5;
  $81 = (($79) + ($80)|0);
  $82 = ($78>>>0)<($81>>>0);
  if (!($82)) {
   break;
  }
  $83 = $8;
  $84 = ((($83)) + 2|0);
  $8 = $84;
  $85 = $8;
  $86 = HEAP8[$85>>0]|0;
  $87 = (_aux_type2size($86)|0);
  $12 = $87;
  $88 = $8;
  $89 = ((($88)) + 1|0);
  $8 = $89;
  $90 = $12;
  switch ($90|0) {
  case 1:  {
   $91 = $8;
   $92 = ((($91)) + 1|0);
   $8 = $92;
   continue L4;
   break;
  }
  case 2:  {
   $93 = $8;
   (_ed_swap_2p($93)|0);
   $94 = $8;
   $95 = ((($94)) + 2|0);
   $8 = $95;
   continue L4;
   break;
  }
  case 4:  {
   $96 = $8;
   (_ed_swap_4p_364($96)|0);
   $97 = $8;
   $98 = ((($97)) + 4|0);
   $8 = $98;
   continue L4;
   break;
  }
  case 8:  {
   $99 = $8;
   (_ed_swap_8p_371($99)|0);
   $100 = $8;
   $101 = ((($100)) + 8|0);
   $8 = $101;
   continue L4;
   break;
  }
  case 72: case 90:  {
   while(1) {
    $102 = $8;
    $103 = HEAP8[$102>>0]|0;
    $104 = ($103<<24>>24)!=(0);
    $105 = $8;
    $106 = ((($105)) + 1|0);
    $8 = $106;
    if (!($104)) {
     continue L4;
    }
   }
   break;
  }
  case 66:  {
   $107 = $8;
   $108 = HEAP8[$107>>0]|0;
   $109 = (_aux_type2size($108)|0);
   $12 = $109;
   $110 = $8;
   $111 = ((($110)) + 1|0);
   $8 = $111;
   $112 = $7;
   $113 = ($112|0)!=(0);
   if ($113) {
    $114 = $8;
    ;HEAP8[$11>>0]=HEAP8[$114>>0]|0;HEAP8[$11+1>>0]=HEAP8[$114+1>>0]|0;HEAP8[$11+2>>0]=HEAP8[$114+2>>0]|0;HEAP8[$11+3>>0]=HEAP8[$114+3>>0]|0;
    $115 = $8;
    (_ed_swap_4p_364($115)|0);
   } else {
    $116 = $8;
    (_ed_swap_4p_364($116)|0);
    $117 = $8;
    ;HEAP8[$11>>0]=HEAP8[$117>>0]|0;HEAP8[$11+1>>0]=HEAP8[$117+1>>0]|0;HEAP8[$11+2>>0]=HEAP8[$117+2>>0]|0;HEAP8[$11+3>>0]=HEAP8[$117+3>>0]|0;
   }
   $118 = $8;
   $119 = ((($118)) + 4|0);
   $8 = $119;
   $120 = $12;
   switch ($120|0) {
   case 1:  {
    $121 = HEAP32[$11>>2]|0;
    $122 = $8;
    $123 = (($122) + ($121)|0);
    $8 = $123;
    continue L4;
    break;
   }
   case 2:  {
    $10 = 0;
    while(1) {
     $124 = $10;
     $125 = HEAP32[$11>>2]|0;
     $126 = ($124>>>0)<($125>>>0);
     if (!($126)) {
      continue L4;
     }
     $127 = $8;
     (_ed_swap_2p($127)|0);
     $128 = $10;
     $129 = (($128) + 1)|0;
     $10 = $129;
     $130 = $8;
     $131 = ((($130)) + 2|0);
     $8 = $131;
    }
    break;
   }
   case 4:  {
    $10 = 0;
    while(1) {
     $132 = $10;
     $133 = HEAP32[$11>>2]|0;
     $134 = ($132>>>0)<($133>>>0);
     if (!($134)) {
      continue L4;
     }
     $135 = $8;
     (_ed_swap_4p_364($135)|0);
     $136 = $10;
     $137 = (($136) + 1)|0;
     $10 = $137;
     $138 = $8;
     $139 = ((($138)) + 4|0);
     $8 = $139;
    }
    break;
   }
   case 8:  {
    $10 = 0;
    while(1) {
     $140 = $10;
     $141 = HEAP32[$11>>2]|0;
     $142 = ($140>>>0)<($141>>>0);
     if (!($142)) {
      continue L4;
     }
     $143 = $8;
     (_ed_swap_8p_371($143)|0);
     $144 = $10;
     $145 = (($144) + 1)|0;
     $10 = $145;
     $146 = $8;
     $147 = ((($146)) + 8|0);
     $8 = $147;
    }
    break;
   }
   default: {
    continue L4;
   }
   }
   break;
  }
  default: {
   continue L4;
  }
  }
 }
 STACKTOP = sp;return;
}
function _aux_type2size($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = $3&255;
 switch ($4|0) {
 case 67: case 99: case 65:  {
  $1 = 1;
  break;
 }
 case 83: case 115:  {
  $1 = 2;
  break;
 }
 case 102: case 73: case 105:  {
  $1 = 4;
  break;
 }
 case 100:  {
  $1 = 8;
  break;
 }
 case 66: case 72: case 90:  {
  $5 = $2;
  $6 = $5&255;
  $1 = $6;
  break;
 }
 default: {
  $1 = 0;
 }
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _ed_swap_2p($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP16[$2>>1]|0;
 $4 = (_ed_swap_2($3)|0);
 $5 = $1;
 HEAP16[$5>>1] = $4;
 $6 = $1;
 STACKTOP = sp;return ($6|0);
}
function _ed_swap_8p_371($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_ed_swap_8_372($5,$8)|0);
 $10 = tempRet0;
 $11 = $1;
 $12 = $11;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $10;
 $16 = $1;
 STACKTOP = sp;return ($16|0);
}
function _ed_swap_8_372($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = $0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $7 = $2;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $2;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = $2;
 $20 = $19;
 HEAP32[$20>>2] = $18;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $9;
 $23 = $2;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = $25 & 65535;
 $30 = $28 & 65535;
 $31 = (_bitshift64Shl(($29|0),($30|0),16)|0);
 $32 = tempRet0;
 $33 = $2;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = $35 & -65536;
 $40 = $38 & -65536;
 $41 = (_bitshift64Lshr(($39|0),($40|0),16)|0);
 $42 = tempRet0;
 $43 = $31 | $41;
 $44 = $32 | $42;
 $45 = $2;
 $46 = $45;
 HEAP32[$46>>2] = $43;
 $47 = (($45) + 4)|0;
 $48 = $47;
 HEAP32[$48>>2] = $44;
 $49 = $2;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 $52 = (($49) + 4)|0;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = $51 & 16711935;
 $56 = $54 & 16711935;
 $57 = (_bitshift64Shl(($55|0),($56|0),8)|0);
 $58 = tempRet0;
 $59 = $2;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = (($59) + 4)|0;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = $61 & -16711936;
 $66 = $64 & -16711936;
 $67 = (_bitshift64Lshr(($65|0),($66|0),8)|0);
 $68 = tempRet0;
 $69 = $57 | $67;
 $70 = $58 | $68;
 tempRet0 = ($70);
 STACKTOP = sp;return ($69|0);
}
function _ed_swap_2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2&65535;
 $4 = $3 & 16711935;
 $5 = $4 << 8;
 $6 = $1;
 $7 = $6&65535;
 $8 = $7 & -16711936;
 $9 = $8 >>> 8;
 $10 = $5 | $9;
 $11 = $10&65535;
 STACKTOP = sp;return ($11|0);
}
function _sam_hdr_parse($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $4 = sp + 36|0;
 $11 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $12 = (_kh_init_s2i()|0);
 $7 = $12;
 $13 = $3;
 $6 = $13;
 while(1) {
  $14 = $6;
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)!=(0);
  if (!($16)) {
   break;
  }
  $17 = $6;
  $18 = (_strncmp($17,17878,4)|0);
  $19 = ($18|0)==(0);
  do {
   if ($19) {
    $8 = 0;
    $9 = -1;
    $20 = $6;
    $21 = ((($20)) + 4|0);
    HEAP32[$4>>2] = $21;
    while(1) {
     $22 = HEAP32[$4>>2]|0;
     $23 = (_strncmp($22,17883,3)|0);
     $24 = ($23|0)==(0);
     $25 = HEAP32[$4>>2]|0;
     if ($24) {
      $26 = ((($25)) + 3|0);
      HEAP32[$4>>2] = $26;
      $27 = HEAP32[$4>>2]|0;
      $5 = $27;
      while(1) {
       $28 = $5;
       $29 = HEAP8[$28>>0]|0;
       $30 = $29 << 24 >> 24;
       $31 = ($30|0)!=(9);
       if (!($31)) {
        break;
       }
       $32 = $5;
       $33 = HEAP8[$32>>0]|0;
       $34 = $33 << 24 >> 24;
       $35 = ($34|0)!=(10);
       if (!($35)) {
        break;
       }
       $36 = $5;
       $37 = HEAP8[$36>>0]|0;
       $38 = $37 << 24 >> 24;
       $39 = ($38|0)!=(0);
       if (!($39)) {
        break;
       }
       $40 = $5;
       $41 = ((($40)) + 1|0);
       $5 = $41;
      }
      $42 = $5;
      $43 = HEAP32[$4>>2]|0;
      $44 = $42;
      $45 = $43;
      $46 = (($44) - ($45))|0;
      $47 = (($46) + 1)|0;
      $48 = (_calloc($47,1)|0);
      $8 = $48;
      $49 = $8;
      $50 = HEAP32[$4>>2]|0;
      $51 = $5;
      $52 = HEAP32[$4>>2]|0;
      $53 = $51;
      $54 = $52;
      $55 = (($53) - ($54))|0;
      (_strncpy($49,$50,$55)|0);
      $56 = $5;
      HEAP32[$4>>2] = $56;
     } else {
      $57 = (_strncmp($25,17887,3)|0);
      $58 = ($57|0)==(0);
      if ($58) {
       $59 = HEAP32[$4>>2]|0;
       $60 = ((($59)) + 3|0);
       $61 = (_strtol($60,$4,10)|0);
       $9 = $61;
      }
     }
     while(1) {
      $62 = HEAP32[$4>>2]|0;
      $63 = HEAP8[$62>>0]|0;
      $64 = $63 << 24 >> 24;
      $65 = ($64|0)!=(9);
      if ($65) {
       $66 = HEAP32[$4>>2]|0;
       $67 = HEAP8[$66>>0]|0;
       $68 = $67 << 24 >> 24;
       $69 = ($68|0)!=(10);
       if ($69) {
        $70 = HEAP32[$4>>2]|0;
        $71 = HEAP8[$70>>0]|0;
        $72 = $71 << 24 >> 24;
        $73 = ($72|0)!=(0);
        $130 = $73;
       } else {
        $130 = 0;
       }
      } else {
       $130 = 0;
      }
      $74 = HEAP32[$4>>2]|0;
      if (!($130)) {
       break;
      }
      $75 = ((($74)) + 1|0);
      HEAP32[$4>>2] = $75;
     }
     $76 = HEAP8[$74>>0]|0;
     $77 = $76 << 24 >> 24;
     $78 = ($77|0)==(0);
     if ($78) {
      break;
     }
     $79 = HEAP32[$4>>2]|0;
     $80 = HEAP8[$79>>0]|0;
     $81 = $80 << 24 >> 24;
     $82 = ($81|0)==(10);
     if ($82) {
      break;
     }
     $83 = HEAP32[$4>>2]|0;
     $84 = ((($83)) + 1|0);
     HEAP32[$4>>2] = $84;
    }
    $85 = HEAP32[$4>>2]|0;
    $6 = $85;
    $86 = $8;
    $87 = ($86|0)!=(0|0);
    $88 = $9;
    $89 = ($88|0)>=(0);
    $or$cond = $87 & $89;
    if ($or$cond) {
     $90 = $7;
     $91 = $8;
     $92 = (_kh_put_s2i($90,$91,$11)|0);
     $10 = $92;
     $93 = HEAP32[$11>>2]|0;
     $94 = ($93|0)!=(0);
     if ($94) {
      $99 = $7;
      $100 = ((($99)) + 4|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = (($101) - 1)|0;
      $103 = $9;
      $104 = ($103|0)<(0);
      $105 = $104 << 31 >> 31;
      $106 = $102 | $105;
      $107 = $10;
      $108 = $7;
      $109 = ((($108)) + 24|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = (($110) + ($107<<3)|0);
      $112 = $111;
      $113 = $112;
      HEAP32[$113>>2] = $103;
      $114 = (($112) + 4)|0;
      $115 = $114;
      HEAP32[$115>>2] = $106;
      break;
     }
     $95 = (3)>=(2);
     if ($95) {
      $96 = HEAP32[2410]|0;
      $97 = $8;
      HEAP32[$vararg_buffer>>2] = 17925;
      $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr4>>2] = $97;
      (_fprintf($96,17891,$vararg_buffer)|0);
     }
     $98 = $8;
     _free($98);
    }
   }
  } while(0);
  while(1) {
   $116 = $6;
   $117 = HEAP8[$116>>0]|0;
   $118 = $117 << 24 >> 24;
   $119 = ($118|0)!=(0);
   if (!($119)) {
    break;
   }
   $120 = $6;
   $121 = HEAP8[$120>>0]|0;
   $122 = $121 << 24 >> 24;
   $123 = ($122|0)!=(10);
   if (!($123)) {
    break;
   }
   $124 = $6;
   $125 = ((($124)) + 1|0);
   $6 = $125;
  }
  $126 = $6;
  $127 = ((($126)) + 1|0);
  $6 = $127;
 }
 $128 = $7;
 $129 = (_hdr_from_dict($128)|0);
 STACKTOP = sp;return ($129|0);
}
function _hdr_from_dict($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = (_bam_hdr_init()|0);
 $2 = $4;
 $5 = $1;
 $6 = $2;
 $7 = ((($6)) + 28|0);
 HEAP32[$7>>2] = $5;
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 HEAP32[$11>>2] = $10;
 $12 = $2;
 $13 = HEAP32[$12>>2]|0;
 $14 = $13<<2;
 $15 = (_malloc($14)|0);
 $16 = $2;
 $17 = ((($16)) + 12|0);
 HEAP32[$17>>2] = $15;
 $18 = $2;
 $19 = HEAP32[$18>>2]|0;
 $20 = $19<<2;
 $21 = (_malloc($20)|0);
 $22 = $2;
 $23 = ((($22)) + 20|0);
 HEAP32[$23>>2] = $21;
 $3 = 0;
 while(1) {
  $24 = $3;
  $25 = $1;
  $26 = HEAP32[$25>>2]|0;
  $27 = ($24|0)!=($26|0);
  if (!($27)) {
   break;
  }
  $28 = $3;
  $29 = $28 >>> 4;
  $30 = $1;
  $31 = ((($30)) + 16|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($29<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $3;
  $36 = $35 & 15;
  $37 = $36 << 1;
  $38 = $34 >>> $37;
  $39 = $38 & 3;
  $40 = ($39|0)!=(0);
  if (!($40)) {
   $41 = $3;
   $42 = $1;
   $43 = ((($42)) + 20|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + ($41<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $3;
   $48 = $1;
   $49 = ((($48)) + 24|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + ($47<<3)|0);
   $52 = $51;
   $53 = $52;
   $54 = HEAP32[$53>>2]|0;
   $55 = (($52) + 4)|0;
   $56 = $55;
   $57 = HEAP32[$56>>2]|0;
   $58 = (_bitshift64Ashr(($54|0),($57|0),32)|0);
   $59 = tempRet0;
   $60 = $2;
   $61 = ((($60)) + 20|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (($62) + ($58<<2)|0);
   HEAP32[$63>>2] = $46;
   $64 = $3;
   $65 = $1;
   $66 = ((($65)) + 24|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($67) + ($64<<3)|0);
   $69 = $68;
   $70 = $69;
   $71 = HEAP32[$70>>2]|0;
   $72 = (($69) + 4)|0;
   $73 = $72;
   $74 = HEAP32[$73>>2]|0;
   $75 = (_bitshift64Ashr(0,($71|0),32)|0);
   $76 = tempRet0;
   $77 = $3;
   $78 = $1;
   $79 = ((($78)) + 24|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (($80) + ($77<<3)|0);
   $82 = $81;
   $83 = $82;
   $84 = HEAP32[$83>>2]|0;
   $85 = (($82) + 4)|0;
   $86 = $85;
   $87 = HEAP32[$86>>2]|0;
   $88 = (_bitshift64Ashr(($84|0),($87|0),32)|0);
   $89 = tempRet0;
   $90 = $2;
   $91 = ((($90)) + 12|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = (($92) + ($88<<2)|0);
   HEAP32[$93>>2] = $75;
   $94 = $3;
   $95 = $1;
   $96 = ((($95)) + 24|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (($97) + ($94<<3)|0);
   $99 = $98;
   $100 = $99;
   $101 = HEAP32[$100>>2]|0;
   $102 = (($99) + 4)|0;
   $103 = $102;
   $104 = HEAP32[$103>>2]|0;
   $105 = (_bitshift64Ashr(($101|0),($104|0),32)|0);
   $106 = tempRet0;
   $107 = $98;
   $108 = $107;
   HEAP32[$108>>2] = $105;
   $109 = (($107) + 4)|0;
   $110 = $109;
   HEAP32[$110>>2] = $106;
  }
  $111 = $3;
  $112 = (($111) + 1)|0;
  $3 = $112;
 }
 $113 = $2;
 STACKTOP = sp;return ($113|0);
}
function _sam_hdr_read($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2096|0);
 $vararg_buffer = sp;
 $3 = sp + 28|0;
 $6 = sp + 48|0;
 $2 = $0;
 $10 = $2;
 $11 = ((($10)) + 40|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 switch ($13|0) {
 case 4:  {
  $14 = $2;
  $15 = ((($14)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_bam_hdr_read($16)|0);
  $1 = $17;
  $89 = $1;
  STACKTOP = sp;return ($89|0);
  break;
 }
 case 6:  {
  $18 = $2;
  $19 = ((($18)) + 36|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_cram_header_to_bam($22)|0);
  $1 = $23;
  $89 = $1;
  STACKTOP = sp;return ($89|0);
  break;
 }
 case 3:  {
  $5 = 0;
  $24 = ((($3)) + 4|0);
  HEAP32[$24>>2] = 0;
  HEAP32[$3>>2] = 0;
  $25 = ((($3)) + 8|0);
  HEAP32[$25>>2] = 0;
  while(1) {
   $26 = $2;
   $27 = $2;
   $28 = ((($27)) + 16|0);
   $29 = (_hts_getline($26,2,$28)|0);
   $30 = ($29|0)>=(0);
   if (!($30)) {
    break;
   }
   $31 = $2;
   $32 = ((($31)) + 16|0);
   $33 = ((($32)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP8[$34>>0]|0;
   $36 = $35 << 24 >> 24;
   $37 = ($36|0)!=(64);
   if ($37) {
    break;
   }
   $38 = $2;
   $39 = ((($38)) + 16|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40>>>0)>(3);
   if ($41) {
    $42 = $2;
    $43 = ((($42)) + 16|0);
    $44 = ((($43)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (_strncmp($45,17939,3)|0);
    $47 = ($46|0)==(0);
    if ($47) {
     $5 = 1;
    }
   }
   $48 = $2;
   $49 = ((($48)) + 16|0);
   $50 = ((($49)) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $2;
   $53 = ((($52)) + 16|0);
   $54 = HEAP32[$53>>2]|0;
   (_kputsn_381($51,$54,$3)|0);
   (_kputc_382(10,$3)|0);
  }
  $55 = $5;
  $56 = ($55|0)!=(0);
  if (!($56)) {
   $57 = $2;
   $58 = ((($57)) + 32|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($59|0)!=(0|0);
   if ($60) {
    $61 = $2;
    $62 = ((($61)) + 32|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (_fopen($63,23049)|0);
    $7 = $64;
    $65 = $7;
    $66 = ($65|0)==(0|0);
    if ($66) {
     $1 = 0;
     $89 = $1;
     STACKTOP = sp;return ($89|0);
    }
    while(1) {
     $67 = $7;
     $68 = (_fgets($6,2048,$67)|0);
     $69 = ($68|0)!=(0|0);
     if (!($69)) {
      break;
     }
     $70 = (_strtok($6,17943)|0);
     $8 = $70;
     $71 = (_strtok(0,17943)|0);
     $9 = $71;
     $72 = $8;
     $73 = $9;
     HEAP32[$vararg_buffer>>2] = $72;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $73;
     (_ksprintf($3,17945,$vararg_buffer)|0);
    }
    $74 = $7;
    (_fclose($74)|0);
   }
  }
  $75 = HEAP32[$3>>2]|0;
  $76 = ($75|0)==(0);
  if ($76) {
   (_kputsn_381(26441,0,$3)|0);
  }
  $77 = HEAP32[$3>>2]|0;
  $78 = ((($3)) + 8|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (_sam_hdr_parse($77,$79)|0);
  $4 = $80;
  $81 = HEAP32[$3>>2]|0;
  $82 = $4;
  $83 = ((($82)) + 8|0);
  HEAP32[$83>>2] = $81;
  $84 = ((($3)) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $4;
  $87 = ((($86)) + 24|0);
  HEAP32[$87>>2] = $85;
  $88 = $4;
  $1 = $88;
  $89 = $1;
  STACKTOP = sp;return ($89|0);
  break;
 }
 default: {
  _abort();
  // unreachable;
 }
 }
 return (0)|0;
}
function _kputsn_381($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6;
 $9 = HEAP32[$8>>2]|0;
 $10 = $5;
 $11 = (($9) + ($10))|0;
 $12 = (($11) + 1)|0;
 $13 = $6;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12>>>0)>=($15>>>0);
 do {
  if ($16) {
   $17 = $6;
   $18 = HEAP32[$17>>2]|0;
   $19 = $5;
   $20 = (($18) + ($19))|0;
   $21 = (($20) + 2)|0;
   $22 = $6;
   $23 = ((($22)) + 4|0);
   HEAP32[$23>>2] = $21;
   $24 = $6;
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + -1)|0;
   HEAP32[$25>>2] = $27;
   $28 = $6;
   $29 = ((($28)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $30 >>> 1;
   $32 = $6;
   $33 = ((($32)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $34 | $31;
   HEAP32[$33>>2] = $35;
   $36 = $6;
   $37 = ((($36)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $38 >>> 2;
   $40 = $6;
   $41 = ((($40)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $42 | $39;
   HEAP32[$41>>2] = $43;
   $44 = $6;
   $45 = ((($44)) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $46 >>> 4;
   $48 = $6;
   $49 = ((($48)) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $50 | $47;
   HEAP32[$49>>2] = $51;
   $52 = $6;
   $53 = ((($52)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 >>> 8;
   $56 = $6;
   $57 = ((($56)) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $58 | $55;
   HEAP32[$57>>2] = $59;
   $60 = $6;
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $62 >>> 16;
   $64 = $6;
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $66 | $63;
   HEAP32[$65>>2] = $67;
   $68 = $6;
   $69 = ((($68)) + 4|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($70) + 1)|0;
   HEAP32[$69>>2] = $71;
   $72 = $6;
   $73 = ((($72)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $6;
   $76 = ((($75)) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (_realloc($74,$77)|0);
   $7 = $78;
   $79 = ($78|0)!=(0|0);
   if ($79) {
    $80 = $7;
    $81 = $6;
    $82 = ((($81)) + 8|0);
    HEAP32[$82>>2] = $80;
    break;
   }
   $3 = -1;
   $102 = $3;
   STACKTOP = sp;return ($102|0);
  }
 } while(0);
 $83 = $6;
 $84 = ((($83)) + 8|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $6;
 $87 = HEAP32[$86>>2]|0;
 $88 = (($85) + ($87)|0);
 $89 = $4;
 $90 = $5;
 _memcpy(($88|0),($89|0),($90|0))|0;
 $91 = $5;
 $92 = $6;
 $93 = HEAP32[$92>>2]|0;
 $94 = (($93) + ($91))|0;
 HEAP32[$92>>2] = $94;
 $95 = $6;
 $96 = HEAP32[$95>>2]|0;
 $97 = $6;
 $98 = ((($97)) + 8|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = (($99) + ($96)|0);
 HEAP8[$100>>0] = 0;
 $101 = $5;
 $3 = $101;
 $102 = $3;
 STACKTOP = sp;return ($102|0);
}
function _kputc_382($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = $4;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8>>>0)>=($11>>>0);
 do {
  if ($12) {
   $13 = $4;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 2)|0;
   $16 = $4;
   $17 = ((($16)) + 4|0);
   HEAP32[$17>>2] = $15;
   $18 = $4;
   $19 = ((($18)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + -1)|0;
   HEAP32[$19>>2] = $21;
   $22 = $4;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24 >>> 1;
   $26 = $4;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 | $25;
   HEAP32[$27>>2] = $29;
   $30 = $4;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $32 >>> 2;
   $34 = $4;
   $35 = ((($34)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $36 | $33;
   HEAP32[$35>>2] = $37;
   $38 = $4;
   $39 = ((($38)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 >>> 4;
   $42 = $4;
   $43 = ((($42)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 | $41;
   HEAP32[$43>>2] = $45;
   $46 = $4;
   $47 = ((($46)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $48 >>> 8;
   $50 = $4;
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $52 | $49;
   HEAP32[$51>>2] = $53;
   $54 = $4;
   $55 = ((($54)) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $56 >>> 16;
   $58 = $4;
   $59 = ((($58)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $60 | $57;
   HEAP32[$59>>2] = $61;
   $62 = $4;
   $63 = ((($62)) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) + 1)|0;
   HEAP32[$63>>2] = $65;
   $66 = $4;
   $67 = ((($66)) + 8|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $4;
   $70 = ((($69)) + 4|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (_realloc($68,$71)|0);
   $5 = $72;
   $73 = ($72|0)!=(0|0);
   if ($73) {
    $74 = $5;
    $75 = $4;
    $76 = ((($75)) + 8|0);
    HEAP32[$76>>2] = $74;
    break;
   }
   $2 = -1;
   $93 = $2;
   STACKTOP = sp;return ($93|0);
  }
 } while(0);
 $77 = $3;
 $78 = $77&255;
 $79 = $4;
 $80 = HEAP32[$79>>2]|0;
 $81 = (($80) + 1)|0;
 HEAP32[$79>>2] = $81;
 $82 = $4;
 $83 = ((($82)) + 8|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($84) + ($80)|0);
 HEAP8[$85>>0] = $78;
 $86 = $4;
 $87 = HEAP32[$86>>2]|0;
 $88 = $4;
 $89 = ((($88)) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($90) + ($87)|0);
 HEAP8[$91>>0] = 0;
 $92 = $3;
 $2 = $92;
 $93 = $2;
 STACKTOP = sp;return ($93|0);
}
function _sam_parse1($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0.0, $839 = 0.0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0.0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0.0;
 var $966 = 0.0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond18 = 0, $or$cond3 = 0;
 var $or$cond4 = 0, $or$cond5 = 0, $or$cond6 = 0, $or$cond7 = 0, $or$cond8 = 0, $vararg_buffer = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0;
 var $vararg_buffer61 = 0, $vararg_buffer64 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $vararg_buffer64 = sp + 136|0;
 $vararg_buffer61 = sp + 128|0;
 $vararg_buffer58 = sp + 120|0;
 $vararg_buffer55 = sp + 112|0;
 $vararg_buffer52 = sp + 104|0;
 $vararg_buffer49 = sp + 96|0;
 $vararg_buffer46 = sp + 88|0;
 $vararg_buffer43 = sp + 80|0;
 $vararg_buffer40 = sp + 72|0;
 $vararg_buffer37 = sp + 64|0;
 $vararg_buffer34 = sp + 56|0;
 $vararg_buffer31 = sp + 48|0;
 $vararg_buffer28 = sp + 40|0;
 $vararg_buffer25 = sp + 32|0;
 $vararg_buffer22 = sp + 24|0;
 $vararg_buffer19 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $8 = sp + 216|0;
 $9 = sp + 212|0;
 $11 = sp + 196|0;
 $18 = sp + 246|0;
 $19 = sp + 172|0;
 $21 = sp + 244|0;
 $22 = sp + 164|0;
 $23 = sp + 160|0;
 $24 = sp;
 $25 = sp + 156|0;
 $29 = sp + 242|0;
 $30 = sp + 240|0;
 $31 = sp + 148|0;
 $32 = sp + 144|0;
 $33 = sp + 140|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $34 = $4;
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$8>>2] = $36;
 $37 = $6;
 $12 = $37;
 $38 = $6;
 $39 = ((($38)) + 32|0);
 HEAP32[$39>>2] = 0;
 HEAP32[$11>>2] = 0;
 $40 = $6;
 $41 = ((($40)) + 40|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($11)) + 8|0);
 HEAP32[$43>>2] = $42;
 $44 = $6;
 $45 = ((($44)) + 36|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($11)) + 4|0);
 HEAP32[$47>>2] = $46;
 $48 = $12;
 ;HEAP32[$48>>2]=0|0;HEAP32[$48+4>>2]=0|0;HEAP32[$48+8>>2]=0|0;HEAP32[$48+12>>2]=0|0;HEAP32[$48+16>>2]=0|0;HEAP32[$48+20>>2]=0|0;HEAP32[$48+24>>2]=0|0;HEAP32[$48+28>>2]=0|0;
 $49 = $5;
 $50 = ((($49)) + 16|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)==(0|0);
 L1: do {
  if ($52) {
   $53 = (_malloc(128)|0);
   $54 = $5;
   $55 = ((($54)) + 16|0);
   HEAP32[$55>>2] = $53;
   $10 = 0;
   while(1) {
    $56 = $10;
    $57 = ($56|0)<(128);
    if (!($57)) {
     break;
    }
    $58 = $10;
    $59 = $5;
    $60 = ((($59)) + 16|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61) + ($58)|0);
    HEAP8[$62>>0] = -1;
    $63 = $10;
    $64 = (($63) + 1)|0;
    $10 = $64;
   }
   $10 = 0;
   while(1) {
    $65 = $10;
    $66 = (17962 + ($65)|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = ($67<<24>>24)!=(0);
    if (!($68)) {
     break L1;
    }
    $69 = $10;
    $70 = $69&255;
    $71 = $10;
    $72 = (17962 + ($71)|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = $73 << 24 >> 24;
    $75 = $5;
    $76 = ((($75)) + 16|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (($77) + ($74)|0);
    HEAP8[$78>>0] = $70;
    $79 = $10;
    $80 = (($79) + 1)|0;
    $10 = $80;
   }
  }
 } while(0);
 $81 = HEAP32[$8>>2]|0;
 HEAP32[$9>>2] = $81;
 while(1) {
  $82 = HEAP32[$8>>2]|0;
  $83 = HEAP8[$82>>0]|0;
  $84 = $83 << 24 >> 24;
  $85 = ($84|0)!=(0);
  if (!($85)) {
   break;
  }
  $86 = HEAP32[$8>>2]|0;
  $87 = HEAP8[$86>>0]|0;
  $88 = $87 << 24 >> 24;
  $89 = ($88|0)!=(9);
  if (!($89)) {
   break;
  }
  $90 = HEAP32[$8>>2]|0;
  $91 = ((($90)) + 1|0);
  HEAP32[$8>>2] = $91;
 }
 $92 = HEAP32[$8>>2]|0;
 $93 = HEAP8[$92>>0]|0;
 $94 = $93 << 24 >> 24;
 $95 = ($94|0)!=(9);
 L16: do {
  if (!($95)) {
   $96 = HEAP32[$8>>2]|0;
   $97 = ((($96)) + 1|0);
   HEAP32[$8>>2] = $97;
   HEAP8[$96>>0] = 0;
   $98 = HEAP32[$8>>2]|0;
   $99 = HEAP32[$9>>2]|0;
   $100 = $98;
   $101 = $99;
   $102 = (($100) - ($101))|0;
   $103 = ($102|0)<=(1);
   $104 = (3)>=(2);
   $or$cond = $103 & $104;
   if ($or$cond) {
    $105 = HEAP32[2410]|0;
    HEAP32[$vararg_buffer>>2] = 17999;
    (_fprintf($105,17973,$vararg_buffer)|0);
   }
   $106 = HEAP32[$8>>2]|0;
   $107 = HEAP32[$9>>2]|0;
   $108 = $106;
   $109 = $107;
   $110 = (($108) - ($109))|0;
   $111 = ($110|0)>(255);
   $112 = (3)>=(1);
   $or$cond1 = $111 & $112;
   if ($or$cond1) {
    $113 = HEAP32[2410]|0;
    HEAP32[$vararg_buffer19>>2] = 17999;
    (_fprintf($113,18010,$vararg_buffer19)|0);
    break;
   }
   $114 = HEAP32[$9>>2]|0;
   $115 = HEAP32[$8>>2]|0;
   $116 = HEAP32[$9>>2]|0;
   $117 = $115;
   $118 = $116;
   $119 = (($117) - ($118))|0;
   (_kputsn__394($114,$119,$11)|0);
   $120 = HEAP32[$8>>2]|0;
   $121 = HEAP32[$9>>2]|0;
   $122 = $120;
   $123 = $121;
   $124 = (($122) - ($123))|0;
   $125 = $12;
   $126 = ((($125)) + 8|0);
   $127 = $126;
   $128 = $127;
   $129 = HEAP32[$128>>2]|0;
   $130 = (($127) + 4)|0;
   $131 = $130;
   $132 = HEAP32[$131>>2]|0;
   $133 = $124 & 255;
   $134 = (_bitshift64Shl(($133|0),0,24)|0);
   $135 = tempRet0;
   $136 = $129 & 16777215;
   $137 = $136 | $134;
   $138 = $132 | $135;
   $139 = $126;
   $140 = $139;
   HEAP32[$140>>2] = $137;
   $141 = (($139) + 4)|0;
   $142 = $141;
   HEAP32[$142>>2] = $138;
   $143 = HEAP32[$8>>2]|0;
   $144 = (_strtol($143,$8,0)|0);
   $145 = $12;
   $146 = ((($145)) + 8|0);
   $147 = $146;
   $148 = $147;
   $149 = HEAP32[$148>>2]|0;
   $150 = (($147) + 4)|0;
   $151 = $150;
   $152 = HEAP32[$151>>2]|0;
   $153 = $144 & 65535;
   $154 = $152 & -65536;
   $155 = $154 | $153;
   $156 = $146;
   $157 = $156;
   HEAP32[$157>>2] = $149;
   $158 = (($156) + 4)|0;
   $159 = $158;
   HEAP32[$159>>2] = $155;
   $160 = HEAP32[$8>>2]|0;
   $161 = ((($160)) + 1|0);
   HEAP32[$8>>2] = $161;
   $162 = HEAP8[$160>>0]|0;
   $163 = $162 << 24 >> 24;
   $164 = ($163|0)!=(9);
   if (!($164)) {
    $165 = HEAP32[$8>>2]|0;
    HEAP32[$9>>2] = $165;
    while(1) {
     $166 = HEAP32[$8>>2]|0;
     $167 = HEAP8[$166>>0]|0;
     $168 = $167 << 24 >> 24;
     $169 = ($168|0)!=(0);
     if (!($169)) {
      break;
     }
     $170 = HEAP32[$8>>2]|0;
     $171 = HEAP8[$170>>0]|0;
     $172 = $171 << 24 >> 24;
     $173 = ($172|0)!=(9);
     if (!($173)) {
      break;
     }
     $174 = HEAP32[$8>>2]|0;
     $175 = ((($174)) + 1|0);
     HEAP32[$8>>2] = $175;
    }
    $176 = HEAP32[$8>>2]|0;
    $177 = HEAP8[$176>>0]|0;
    $178 = $177 << 24 >> 24;
    $179 = ($178|0)!=(9);
    if (!($179)) {
     $180 = HEAP32[$8>>2]|0;
     $181 = ((($180)) + 1|0);
     HEAP32[$8>>2] = $181;
     HEAP8[$180>>0] = 0;
     $182 = HEAP32[$9>>2]|0;
     $183 = (_strcmp($182,21468)|0);
     $184 = ($183|0)!=(0);
     if ($184) {
      $185 = $5;
      $186 = HEAP32[$185>>2]|0;
      $187 = ($186|0)==(0);
      $188 = (3)>=(1);
      $or$cond3 = $187 & $188;
      if ($or$cond3) {
       $189 = HEAP32[2410]|0;
       HEAP32[$vararg_buffer22>>2] = 17999;
       (_fprintf($189,18039,$vararg_buffer22)|0);
       break;
      }
      $190 = $5;
      $191 = HEAP32[$9>>2]|0;
      $192 = (_bam_name2id($190,$191)|0);
      $193 = $12;
      HEAP32[$193>>2] = $192;
      $194 = $12;
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)<(0);
      $197 = (3)>=(2);
      $or$cond4 = $196 & $197;
      if ($or$cond4) {
       $198 = HEAP32[2410]|0;
       HEAP32[$vararg_buffer25>>2] = 17999;
       (_fprintf($198,18067,$vararg_buffer25)|0);
      }
     } else {
      $199 = $12;
      HEAP32[$199>>2] = -1;
     }
     $200 = HEAP32[$8>>2]|0;
     $201 = (_strtol($200,$8,10)|0);
     $202 = (($201) - 1)|0;
     $203 = $12;
     $204 = ((($203)) + 4|0);
     HEAP32[$204>>2] = $202;
     $205 = HEAP32[$8>>2]|0;
     $206 = ((($205)) + 1|0);
     HEAP32[$8>>2] = $206;
     $207 = HEAP8[$205>>0]|0;
     $208 = $207 << 24 >> 24;
     $209 = ($208|0)!=(9);
     if (!($209)) {
      $210 = $12;
      $211 = ((($210)) + 4|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = ($212|0)<(0);
      if ($213) {
       $214 = $12;
       $215 = HEAP32[$214>>2]|0;
       $216 = ($215|0)>=(0);
       if ($216) {
        $217 = (3)>=(2);
        if ($217) {
         $218 = HEAP32[2410]|0;
         HEAP32[$vararg_buffer28>>2] = 17999;
         (_fprintf($218,18124,$vararg_buffer28)|0);
        }
        $219 = $12;
        HEAP32[$219>>2] = -1;
       }
      }
      $220 = $12;
      $221 = HEAP32[$220>>2]|0;
      $222 = ($221|0)<(0);
      if ($222) {
       $223 = $12;
       $224 = ((($223)) + 8|0);
       $225 = $224;
       $226 = $225;
       $227 = HEAP32[$226>>2]|0;
       $228 = (($225) + 4)|0;
       $229 = $228;
       $230 = HEAP32[$229>>2]|0;
       $231 = $230 & 65535;
       $232 = $231 | 4;
       $233 = $224;
       $234 = $233;
       $235 = HEAP32[$234>>2]|0;
       $236 = (($233) + 4)|0;
       $237 = $236;
       $238 = HEAP32[$237>>2]|0;
       $239 = $238 & -65536;
       $240 = $239 | $232;
       $241 = $224;
       $242 = $241;
       HEAP32[$242>>2] = $235;
       $243 = (($241) + 4)|0;
       $244 = $243;
       HEAP32[$244>>2] = $240;
      }
      $245 = HEAP32[$8>>2]|0;
      $246 = (_strtol($245,$8,10)|0);
      $247 = $12;
      $248 = ((($247)) + 8|0);
      $249 = $248;
      $250 = $249;
      $251 = HEAP32[$250>>2]|0;
      $252 = (($249) + 4)|0;
      $253 = $252;
      $254 = HEAP32[$253>>2]|0;
      $255 = $246 & 255;
      $256 = (_bitshift64Shl(($255|0),0,16)|0);
      $257 = tempRet0;
      $258 = $251 & -16711681;
      $259 = $258 | $256;
      $260 = $254 | $257;
      $261 = $248;
      $262 = $261;
      HEAP32[$262>>2] = $259;
      $263 = (($261) + 4)|0;
      $264 = $263;
      HEAP32[$264>>2] = $260;
      $265 = HEAP32[$8>>2]|0;
      $266 = ((($265)) + 1|0);
      HEAP32[$8>>2] = $266;
      $267 = HEAP8[$265>>0]|0;
      $268 = $267 << 24 >> 24;
      $269 = ($268|0)!=(9);
      if (!($269)) {
       $270 = HEAP32[$8>>2]|0;
       $271 = HEAP8[$270>>0]|0;
       $272 = $271 << 24 >> 24;
       $273 = ($272|0)!=(42);
       if ($273) {
        $14 = 0;
        $274 = HEAP32[$8>>2]|0;
        HEAP32[$9>>2] = $274;
        while(1) {
         $275 = HEAP32[$8>>2]|0;
         $276 = HEAP8[$275>>0]|0;
         $277 = $276 << 24 >> 24;
         $278 = ($277|0)!=(0);
         if ($278) {
          $279 = HEAP32[$8>>2]|0;
          $280 = HEAP8[$279>>0]|0;
          $281 = $280 << 24 >> 24;
          $282 = ($281|0)!=(9);
          $994 = $282;
         } else {
          $994 = 0;
         }
         $283 = HEAP32[$8>>2]|0;
         if (!($994)) {
          break;
         }
         $284 = HEAP8[$283>>0]|0;
         $285 = (_isdigit_c_399($284)|0);
         $286 = ($285|0)!=(0);
         if (!($286)) {
          $287 = $14;
          $288 = (($287) + 1)|0;
          $14 = $288;
         }
         $289 = HEAP32[$8>>2]|0;
         $290 = ((($289)) + 1|0);
         HEAP32[$8>>2] = $290;
        }
        $291 = ((($283)) + 1|0);
        HEAP32[$8>>2] = $291;
        $292 = HEAP8[$283>>0]|0;
        $293 = $292 << 24 >> 24;
        $294 = ($293|0)!=(9);
        if ($294) {
         break;
        }
        $295 = $14;
        $296 = ($295|0)==(0);
        $297 = (3)>=(1);
        $or$cond5 = $296 & $297;
        if ($or$cond5) {
         $298 = HEAP32[2410]|0;
         HEAP32[$vararg_buffer31>>2] = 17999;
         (_fprintf($298,18195,$vararg_buffer31)|0);
         break;
        }
        $299 = $14;
        $300 = ($299>>>0)>=(65536);
        $301 = (3)>=(1);
        $or$cond6 = $300 & $301;
        if ($or$cond6) {
         $302 = HEAP32[2410]|0;
         HEAP32[$vararg_buffer34>>2] = 17999;
         (_fprintf($302,18224,$vararg_buffer34)|0);
         break;
        }
        $303 = $14;
        $304 = $12;
        $305 = ((($304)) + 8|0);
        $306 = $305;
        $307 = $306;
        $308 = HEAP32[$307>>2]|0;
        $309 = (($306) + 4)|0;
        $310 = $309;
        $311 = HEAP32[$310>>2]|0;
        $312 = $303 & 65535;
        $313 = (_bitshift64Shl(($312|0),0,48)|0);
        $314 = tempRet0;
        $315 = $311 & 65535;
        $316 = $308 | $313;
        $317 = $315 | $314;
        $318 = $305;
        $319 = $318;
        HEAP32[$319>>2] = $316;
        $320 = (($318) + 4)|0;
        $321 = $320;
        HEAP32[$321>>2] = $317;
        $322 = HEAP32[$11>>2]|0;
        $323 = $12;
        $324 = ((($323)) + 8|0);
        $325 = $324;
        $326 = $325;
        $327 = HEAP32[$326>>2]|0;
        $328 = (($325) + 4)|0;
        $329 = $328;
        $330 = HEAP32[$329>>2]|0;
        $331 = (_bitshift64Lshr(($327|0),($330|0),48)|0);
        $332 = tempRet0;
        $333 = $331<<2;
        $334 = (($322) + ($333))|0;
        (_ks_resize_402($11,$334)|0);
        $335 = ((($11)) + 8|0);
        $336 = HEAP32[$335>>2]|0;
        $337 = HEAP32[$11>>2]|0;
        $338 = (($336) + ($337)|0);
        $13 = $338;
        $339 = $12;
        $340 = ((($339)) + 8|0);
        $341 = $340;
        $342 = $341;
        $343 = HEAP32[$342>>2]|0;
        $344 = (($341) + 4)|0;
        $345 = $344;
        $346 = HEAP32[$345>>2]|0;
        $347 = (_bitshift64Lshr(($343|0),($346|0),48)|0);
        $348 = tempRet0;
        $349 = $347<<2;
        $350 = HEAP32[$11>>2]|0;
        $351 = (($350) + ($349))|0;
        HEAP32[$11>>2] = $351;
        $10 = 0;
        while(1) {
         $352 = $10;
         $353 = $12;
         $354 = ((($353)) + 8|0);
         $355 = $354;
         $356 = $355;
         $357 = HEAP32[$356>>2]|0;
         $358 = (($355) + 4)|0;
         $359 = $358;
         $360 = HEAP32[$359>>2]|0;
         $361 = (_bitshift64Lshr(($357|0),($360|0),48)|0);
         $362 = tempRet0;
         $363 = ($352|0)<($361|0);
         if (!($363)) {
          break;
         }
         $364 = HEAP32[$9>>2]|0;
         $365 = (_strtol($364,$9,10)|0);
         $366 = $365 << 4;
         $367 = $10;
         $368 = $13;
         $369 = (($368) + ($367<<2)|0);
         HEAP32[$369>>2] = $366;
         $370 = HEAP32[$9>>2]|0;
         $371 = HEAP8[$370>>0]|0;
         $372 = $371&255;
         $373 = ($372|0)>=(128);
         if ($373) {
          $383 = -1;
         } else {
          $374 = HEAP32[$9>>2]|0;
          $375 = HEAP8[$374>>0]|0;
          $376 = $375 << 24 >> 24;
          $377 = $5;
          $378 = ((($377)) + 16|0);
          $379 = HEAP32[$378>>2]|0;
          $380 = (($379) + ($376)|0);
          $381 = HEAP8[$380>>0]|0;
          $382 = $381 << 24 >> 24;
          $383 = $382;
         }
         $15 = $383;
         $384 = $15;
         $385 = ($384|0)<(0);
         $386 = (3)>=(1);
         $or$cond7 = $385 & $386;
         if ($or$cond7) {
          label = 56;
          break;
         }
         $388 = $15;
         $389 = $10;
         $390 = $13;
         $391 = (($390) + ($389<<2)|0);
         $392 = HEAP32[$391>>2]|0;
         $393 = $392 | $388;
         HEAP32[$391>>2] = $393;
         $394 = $10;
         $395 = (($394) + 1)|0;
         $10 = $395;
         $396 = HEAP32[$9>>2]|0;
         $397 = ((($396)) + 1|0);
         HEAP32[$9>>2] = $397;
        }
        if ((label|0) == 56) {
         $387 = HEAP32[2410]|0;
         HEAP32[$vararg_buffer37>>2] = 17999;
         (_fprintf($387,18259,$vararg_buffer37)|0);
         break;
        }
        $398 = $12;
        $399 = ((($398)) + 8|0);
        $400 = $399;
        $401 = $400;
        $402 = HEAP32[$401>>2]|0;
        $403 = (($400) + 4)|0;
        $404 = $403;
        $405 = HEAP32[$404>>2]|0;
        $406 = $405 & 65535;
        $407 = $406 & 4;
        $408 = ($407|0)!=(0);
        if ($408) {
         $421 = 1;
        } else {
         $409 = $12;
         $410 = ((($409)) + 8|0);
         $411 = $410;
         $412 = $411;
         $413 = HEAP32[$412>>2]|0;
         $414 = (($411) + 4)|0;
         $415 = $414;
         $416 = HEAP32[$415>>2]|0;
         $417 = (_bitshift64Lshr(($413|0),($416|0),48)|0);
         $418 = tempRet0;
         $419 = $13;
         $420 = (_bam_cigar2rlen($417,$419)|0);
         $421 = $420;
        }
        $10 = $421;
       } else {
        $422 = $12;
        $423 = ((($422)) + 8|0);
        $424 = $423;
        $425 = $424;
        $426 = HEAP32[$425>>2]|0;
        $427 = (($424) + 4)|0;
        $428 = $427;
        $429 = HEAP32[$428>>2]|0;
        $430 = $429 & 65535;
        $431 = $430 & 4;
        $432 = ($431|0)==(0);
        $433 = (3)>=(2);
        $or$cond8 = $432 & $433;
        if ($or$cond8) {
         $434 = HEAP32[2410]|0;
         HEAP32[$vararg_buffer40>>2] = 17999;
         (_fprintf($434,18296,$vararg_buffer40)|0);
        }
        $435 = $12;
        $436 = ((($435)) + 8|0);
        $437 = $436;
        $438 = $437;
        $439 = HEAP32[$438>>2]|0;
        $440 = (($437) + 4)|0;
        $441 = $440;
        $442 = HEAP32[$441>>2]|0;
        $443 = $442 & 65535;
        $444 = $443 | 4;
        $445 = $436;
        $446 = $445;
        $447 = HEAP32[$446>>2]|0;
        $448 = (($445) + 4)|0;
        $449 = $448;
        $450 = HEAP32[$449>>2]|0;
        $451 = $450 & -65536;
        $452 = $451 | $444;
        $453 = $436;
        $454 = $453;
        HEAP32[$454>>2] = $447;
        $455 = (($453) + 4)|0;
        $456 = $455;
        HEAP32[$456>>2] = $452;
        $457 = HEAP32[$8>>2]|0;
        HEAP32[$9>>2] = $457;
        while(1) {
         $458 = HEAP32[$8>>2]|0;
         $459 = HEAP8[$458>>0]|0;
         $460 = $459 << 24 >> 24;
         $461 = ($460|0)!=(0);
         if (!($461)) {
          break;
         }
         $462 = HEAP32[$8>>2]|0;
         $463 = HEAP8[$462>>0]|0;
         $464 = $463 << 24 >> 24;
         $465 = ($464|0)!=(9);
         if (!($465)) {
          break;
         }
         $466 = HEAP32[$8>>2]|0;
         $467 = ((($466)) + 1|0);
         HEAP32[$8>>2] = $467;
        }
        $468 = HEAP32[$8>>2]|0;
        $469 = HEAP8[$468>>0]|0;
        $470 = $469 << 24 >> 24;
        $471 = ($470|0)!=(9);
        if ($471) {
         break;
        }
        $472 = HEAP32[$8>>2]|0;
        $473 = ((($472)) + 1|0);
        HEAP32[$8>>2] = $473;
        HEAP8[$472>>0] = 0;
        $10 = 1;
       }
       $474 = $12;
       $475 = ((($474)) + 4|0);
       $476 = HEAP32[$475>>2]|0;
       $477 = ($476|0)<(0);
       $478 = $477 << 31 >> 31;
       $479 = $12;
       $480 = ((($479)) + 4|0);
       $481 = HEAP32[$480>>2]|0;
       $482 = $10;
       $483 = (($481) + ($482))|0;
       $484 = ($483|0)<(0);
       $485 = $484 << 31 >> 31;
       $486 = (_hts_reg2bin_405($476,$478,$483,$485,14,5)|0);
       $487 = $12;
       $488 = ((($487)) + 8|0);
       $489 = $488;
       $490 = $489;
       $491 = HEAP32[$490>>2]|0;
       $492 = (($489) + 4)|0;
       $493 = $492;
       $494 = HEAP32[$493>>2]|0;
       $495 = $486 & 65535;
       $496 = $491 & -65536;
       $497 = $496 | $495;
       $498 = $488;
       $499 = $498;
       HEAP32[$499>>2] = $497;
       $500 = (($498) + 4)|0;
       $501 = $500;
       HEAP32[$501>>2] = $494;
       $502 = HEAP32[$8>>2]|0;
       HEAP32[$9>>2] = $502;
       while(1) {
        $503 = HEAP32[$8>>2]|0;
        $504 = HEAP8[$503>>0]|0;
        $505 = $504 << 24 >> 24;
        $506 = ($505|0)!=(0);
        if (!($506)) {
         break;
        }
        $507 = HEAP32[$8>>2]|0;
        $508 = HEAP8[$507>>0]|0;
        $509 = $508 << 24 >> 24;
        $510 = ($509|0)!=(9);
        if (!($510)) {
         break;
        }
        $511 = HEAP32[$8>>2]|0;
        $512 = ((($511)) + 1|0);
        HEAP32[$8>>2] = $512;
       }
       $513 = HEAP32[$8>>2]|0;
       $514 = HEAP8[$513>>0]|0;
       $515 = $514 << 24 >> 24;
       $516 = ($515|0)!=(9);
       if (!($516)) {
        $517 = HEAP32[$8>>2]|0;
        $518 = ((($517)) + 1|0);
        HEAP32[$8>>2] = $518;
        HEAP8[$517>>0] = 0;
        $519 = HEAP32[$9>>2]|0;
        $520 = (_strcmp($519,18357)|0);
        $521 = ($520|0)==(0);
        do {
         if ($521) {
          $522 = $12;
          $523 = HEAP32[$522>>2]|0;
          $524 = $12;
          $525 = ((($524)) + 20|0);
          HEAP32[$525>>2] = $523;
         } else {
          $526 = HEAP32[$9>>2]|0;
          $527 = (_strcmp($526,21468)|0);
          $528 = ($527|0)==(0);
          if ($528) {
           $529 = $12;
           $530 = ((($529)) + 20|0);
           HEAP32[$530>>2] = -1;
           break;
          }
          $531 = $5;
          $532 = HEAP32[$9>>2]|0;
          $533 = (_bam_name2id($531,$532)|0);
          $534 = $12;
          $535 = ((($534)) + 20|0);
          HEAP32[$535>>2] = $533;
          $536 = $12;
          $537 = ((($536)) + 20|0);
          $538 = HEAP32[$537>>2]|0;
          $539 = ($538|0)<(0);
          $540 = (3)>=(2);
          $or$cond11 = $539 & $540;
          if ($or$cond11) {
           $541 = HEAP32[2410]|0;
           HEAP32[$vararg_buffer43>>2] = 17999;
           (_fprintf($541,18359,$vararg_buffer43)|0);
          }
         }
        } while(0);
        $542 = HEAP32[$8>>2]|0;
        $543 = (_strtol($542,$8,10)|0);
        $544 = (($543) - 1)|0;
        $545 = $12;
        $546 = ((($545)) + 24|0);
        HEAP32[$546>>2] = $544;
        $547 = HEAP32[$8>>2]|0;
        $548 = ((($547)) + 1|0);
        HEAP32[$8>>2] = $548;
        $549 = HEAP8[$547>>0]|0;
        $550 = $549 << 24 >> 24;
        $551 = ($550|0)!=(9);
        if (!($551)) {
         $552 = $12;
         $553 = ((($552)) + 24|0);
         $554 = HEAP32[$553>>2]|0;
         $555 = ($554|0)<(0);
         if ($555) {
          $556 = $12;
          $557 = ((($556)) + 20|0);
          $558 = HEAP32[$557>>2]|0;
          $559 = ($558|0)>=(0);
          if ($559) {
           $560 = (3)>=(2);
           if ($560) {
            $561 = HEAP32[2410]|0;
            HEAP32[$vararg_buffer46>>2] = 17999;
            (_fprintf($561,18421,$vararg_buffer46)|0);
           }
           $562 = $12;
           $563 = ((($562)) + 20|0);
           HEAP32[$563>>2] = -1;
          }
         }
         $564 = HEAP32[$8>>2]|0;
         $565 = (_strtol($564,$8,10)|0);
         $566 = $12;
         $567 = ((($566)) + 28|0);
         HEAP32[$567>>2] = $565;
         $568 = HEAP32[$8>>2]|0;
         $569 = ((($568)) + 1|0);
         HEAP32[$8>>2] = $569;
         $570 = HEAP8[$568>>0]|0;
         $571 = $570 << 24 >> 24;
         $572 = ($571|0)!=(9);
         if (!($572)) {
          $573 = HEAP32[$8>>2]|0;
          HEAP32[$9>>2] = $573;
          while(1) {
           $574 = HEAP32[$8>>2]|0;
           $575 = HEAP8[$574>>0]|0;
           $576 = $575 << 24 >> 24;
           $577 = ($576|0)!=(0);
           if (!($577)) {
            break;
           }
           $578 = HEAP32[$8>>2]|0;
           $579 = HEAP8[$578>>0]|0;
           $580 = $579 << 24 >> 24;
           $581 = ($580|0)!=(9);
           if (!($581)) {
            break;
           }
           $582 = HEAP32[$8>>2]|0;
           $583 = ((($582)) + 1|0);
           HEAP32[$8>>2] = $583;
          }
          $584 = HEAP32[$8>>2]|0;
          $585 = HEAP8[$584>>0]|0;
          $586 = $585 << 24 >> 24;
          $587 = ($586|0)!=(9);
          if (!($587)) {
           $588 = HEAP32[$8>>2]|0;
           $589 = ((($588)) + 1|0);
           HEAP32[$8>>2] = $589;
           HEAP8[$588>>0] = 0;
           $590 = HEAP32[$9>>2]|0;
           $591 = (_strcmp($590,21468)|0);
           $592 = ($591|0)!=(0);
           L123: do {
            if ($592) {
             $593 = HEAP32[$8>>2]|0;
             $594 = HEAP32[$9>>2]|0;
             $595 = $593;
             $596 = $594;
             $597 = (($595) - ($596))|0;
             $598 = (($597) - 1)|0;
             $599 = $12;
             $600 = ((($599)) + 16|0);
             HEAP32[$600>>2] = $598;
             $601 = $12;
             $602 = ((($601)) + 8|0);
             $603 = $602;
             $604 = $603;
             $605 = HEAP32[$604>>2]|0;
             $606 = (($603) + 4)|0;
             $607 = $606;
             $608 = HEAP32[$607>>2]|0;
             $609 = (_bitshift64Lshr(($605|0),($608|0),48)|0);
             $610 = tempRet0;
             $611 = ((($11)) + 8|0);
             $612 = HEAP32[$611>>2]|0;
             $613 = $12;
             $614 = ((($613)) + 8|0);
             $615 = $614;
             $616 = $615;
             $617 = HEAP32[$616>>2]|0;
             $618 = (($615) + 4)|0;
             $619 = $618;
             $620 = HEAP32[$619>>2]|0;
             $621 = (_bitshift64Lshr(($617|0),($620|0),24)|0);
             $622 = tempRet0;
             $623 = $621 & 255;
             $624 = (($612) + ($623)|0);
             $625 = (_bam_cigar2qlen($609,$624)|0);
             $10 = $625;
             $626 = $12;
             $627 = ((($626)) + 8|0);
             $628 = $627;
             $629 = $628;
             $630 = HEAP32[$629>>2]|0;
             $631 = (($628) + 4)|0;
             $632 = $631;
             $633 = HEAP32[$632>>2]|0;
             $634 = (_bitshift64Lshr(($630|0),($633|0),48)|0);
             $635 = tempRet0;
             $636 = ($634|0)!=(0);
             do {
              if ($636) {
               $637 = $10;
               $638 = $12;
               $639 = ((($638)) + 16|0);
               $640 = HEAP32[$639>>2]|0;
               $641 = ($637|0)!=($640|0);
               $642 = (3)>=(1);
               $or$cond13 = $641 & $642;
               if (!($or$cond13)) {
                break;
               }
               $643 = HEAP32[2410]|0;
               HEAP32[$vararg_buffer49>>2] = 17999;
               (_fprintf($643,18491,$vararg_buffer49)|0);
               break L16;
              }
             } while(0);
             $644 = $12;
             $645 = ((($644)) + 16|0);
             $646 = HEAP32[$645>>2]|0;
             $647 = (($646) + 1)|0;
             $648 = $647 >> 1;
             $10 = $648;
             $649 = HEAP32[$11>>2]|0;
             $650 = $10;
             $651 = (($649) + ($650))|0;
             (_ks_resize_402($11,$651)|0);
             $652 = ((($11)) + 8|0);
             $653 = HEAP32[$652>>2]|0;
             $654 = HEAP32[$11>>2]|0;
             $655 = (($653) + ($654)|0);
             $7 = $655;
             $656 = $10;
             $657 = HEAP32[$11>>2]|0;
             $658 = (($657) + ($656))|0;
             HEAP32[$11>>2] = $658;
             $659 = $7;
             $660 = $10;
             _memset(($659|0),0,($660|0))|0;
             $10 = 0;
             while(1) {
              $661 = $10;
              $662 = $12;
              $663 = ((($662)) + 16|0);
              $664 = HEAP32[$663>>2]|0;
              $665 = ($661|0)<($664|0);
              if (!($665)) {
               break L123;
              }
              $666 = $10;
              $667 = HEAP32[$9>>2]|0;
              $668 = (($667) + ($666)|0);
              $669 = HEAP8[$668>>0]|0;
              $670 = $669 << 24 >> 24;
              $671 = (16710 + ($670)|0);
              $672 = HEAP8[$671>>0]|0;
              $673 = $672&255;
              $674 = $10;
              $675 = $674 ^ -1;
              $676 = $675 & 1;
              $677 = $676 << 2;
              $678 = $673 << $677;
              $679 = $10;
              $680 = $679 >> 1;
              $681 = $7;
              $682 = (($681) + ($680)|0);
              $683 = HEAP8[$682>>0]|0;
              $684 = $683&255;
              $685 = $684 | $678;
              $686 = $685&255;
              HEAP8[$682>>0] = $686;
              $687 = $10;
              $688 = (($687) + 1)|0;
              $10 = $688;
             }
            } else {
             $689 = $12;
             $690 = ((($689)) + 16|0);
             HEAP32[$690>>2] = 0;
            }
           } while(0);
           $691 = HEAP32[$8>>2]|0;
           HEAP32[$9>>2] = $691;
           while(1) {
            $692 = HEAP32[$8>>2]|0;
            $693 = HEAP8[$692>>0]|0;
            $694 = $693 << 24 >> 24;
            $695 = ($694|0)!=(0);
            if (!($695)) {
             break;
            }
            $696 = HEAP32[$8>>2]|0;
            $697 = HEAP8[$696>>0]|0;
            $698 = $697 << 24 >> 24;
            $699 = ($698|0)!=(9);
            if (!($699)) {
             break;
            }
            $700 = HEAP32[$8>>2]|0;
            $701 = ((($700)) + 1|0);
            HEAP32[$8>>2] = $701;
           }
           $702 = HEAP32[$8>>2]|0;
           $703 = ((($702)) + 1|0);
           HEAP32[$8>>2] = $703;
           HEAP8[$702>>0] = 0;
           $704 = HEAP32[$11>>2]|0;
           $705 = $12;
           $706 = ((($705)) + 16|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = (($704) + ($707))|0;
           (_ks_resize_402($11,$708)|0);
           $709 = ((($11)) + 8|0);
           $710 = HEAP32[$709>>2]|0;
           $711 = HEAP32[$11>>2]|0;
           $712 = (($710) + ($711)|0);
           $7 = $712;
           $713 = $12;
           $714 = ((($713)) + 16|0);
           $715 = HEAP32[$714>>2]|0;
           $716 = HEAP32[$11>>2]|0;
           $717 = (($716) + ($715))|0;
           HEAP32[$11>>2] = $717;
           $718 = HEAP32[$9>>2]|0;
           $719 = (_strcmp($718,21468)|0);
           $720 = ($719|0)!=(0);
           L139: do {
            if ($720) {
             $721 = HEAP32[$8>>2]|0;
             $722 = HEAP32[$9>>2]|0;
             $723 = $721;
             $724 = $722;
             $725 = (($723) - ($724))|0;
             $726 = (($725) - 1)|0;
             $727 = $12;
             $728 = ((($727)) + 16|0);
             $729 = HEAP32[$728>>2]|0;
             $730 = ($726|0)!=($729|0);
             $731 = (3)>=(1);
             $or$cond15 = $730 & $731;
             if ($or$cond15) {
              $732 = HEAP32[2410]|0;
              HEAP32[$vararg_buffer52>>2] = 17999;
              (_fprintf($732,18549,$vararg_buffer52)|0);
              break L16;
             }
             $10 = 0;
             while(1) {
              $733 = $10;
              $734 = $12;
              $735 = ((($734)) + 16|0);
              $736 = HEAP32[$735>>2]|0;
              $737 = ($733|0)<($736|0);
              if (!($737)) {
               break L139;
              }
              $738 = $10;
              $739 = HEAP32[$9>>2]|0;
              $740 = (($739) + ($738)|0);
              $741 = HEAP8[$740>>0]|0;
              $742 = $741 << 24 >> 24;
              $743 = (($742) - 33)|0;
              $744 = $743&255;
              $745 = $10;
              $746 = $7;
              $747 = (($746) + ($745)|0);
              HEAP8[$747>>0] = $744;
              $748 = $10;
              $749 = (($748) + 1)|0;
              $10 = $749;
             }
            } else {
             $750 = $7;
             $751 = $12;
             $752 = ((($751)) + 16|0);
             $753 = HEAP32[$752>>2]|0;
             _memset(($750|0),-1,($753|0))|0;
            }
           } while(0);
           L148: while(1) {
            $754 = HEAP32[$8>>2]|0;
            $755 = $4;
            $756 = ((($755)) + 8|0);
            $757 = HEAP32[$756>>2]|0;
            $758 = $4;
            $759 = HEAP32[$758>>2]|0;
            $760 = (($757) + ($759)|0);
            $761 = ($754>>>0)<($760>>>0);
            if (!($761)) {
             label = 176;
             break;
            }
            $762 = HEAP32[$8>>2]|0;
            HEAP32[$9>>2] = $762;
            while(1) {
             $763 = HEAP32[$8>>2]|0;
             $764 = HEAP8[$763>>0]|0;
             $765 = $764 << 24 >> 24;
             $766 = ($765|0)!=(0);
             if (!($766)) {
              break;
             }
             $767 = HEAP32[$8>>2]|0;
             $768 = HEAP8[$767>>0]|0;
             $769 = $768 << 24 >> 24;
             $770 = ($769|0)!=(9);
             if (!($770)) {
              break;
             }
             $771 = HEAP32[$8>>2]|0;
             $772 = ((($771)) + 1|0);
             HEAP32[$8>>2] = $772;
            }
            $773 = HEAP32[$8>>2]|0;
            $774 = ((($773)) + 1|0);
            HEAP32[$8>>2] = $774;
            HEAP8[$773>>0] = 0;
            $775 = HEAP32[$8>>2]|0;
            $776 = HEAP32[$9>>2]|0;
            $777 = $775;
            $778 = $776;
            $779 = (($777) - ($778))|0;
            $780 = (($779) - 1)|0;
            $781 = ($780|0)<(6);
            $782 = (3)>=(1);
            $or$cond17 = $781 & $782;
            if ($or$cond17) {
             label = 117;
             break;
            }
            $784 = HEAP32[$9>>2]|0;
            (_kputsn__394($784,2,$11)|0);
            $785 = HEAP32[$9>>2]|0;
            $786 = ((($785)) + 3|0);
            HEAP32[$9>>2] = $786;
            $787 = HEAP32[$9>>2]|0;
            $788 = ((($787)) + 1|0);
            HEAP32[$9>>2] = $788;
            $789 = HEAP8[$787>>0]|0;
            $16 = $789;
            $790 = HEAP32[$9>>2]|0;
            $791 = ((($790)) + 1|0);
            HEAP32[$9>>2] = $791;
            $792 = $16;
            $793 = $792&255;
            $794 = ($793|0)==(65);
            do {
             if (!($794)) {
              $795 = $16;
              $796 = $795&255;
              $797 = ($796|0)==(97);
              if ($797) {
               break;
              }
              $798 = $16;
              $799 = $798&255;
              $800 = ($799|0)==(99);
              if ($800) {
               break;
              }
              $801 = $16;
              $802 = $801&255;
              $803 = ($802|0)==(67);
              if ($803) {
               break;
              }
              $807 = $16;
              $808 = $807&255;
              $809 = ($808|0)==(105);
              do {
               if (!($809)) {
                $810 = $16;
                $811 = $810&255;
                $812 = ($811|0)==(73);
                if ($812) {
                 break;
                }
                $834 = $16;
                $835 = $834&255;
                $836 = ($835|0)==(102);
                if ($836) {
                 $837 = HEAP32[$9>>2]|0;
                 $838 = (+_strtod($837,$9));
                 $839 = $838;
                 HEAPF32[$23>>2] = $839;
                 (_kputc_(102,$11)|0);
                 (_kputsn__394($23,4,$11)|0);
                 continue L148;
                }
                $840 = $16;
                $841 = $840&255;
                $842 = ($841|0)==(100);
                if ($842) {
                 $843 = HEAP32[$9>>2]|0;
                 $844 = (+_strtod($843,$9));
                 HEAPF64[$24>>3] = $844;
                 (_kputc_(100,$11)|0);
                 (_kputsn__394($24,8,$11)|0);
                 continue L148;
                }
                $845 = $16;
                $846 = $845&255;
                $847 = ($846|0)==(90);
                do {
                 if (!($847)) {
                  $848 = $16;
                  $849 = $848&255;
                  $850 = ($849|0)==(72);
                  if ($850) {
                   break;
                  }
                  $859 = $16;
                  $860 = $859&255;
                  $861 = ($860|0)==(66);
                  if (!($861)) {
                   $969 = (3)>=(1);
                   if ($969) {
                    label = 175;
                    break L148;
                   } else {
                    continue L148;
                   }
                  }
                  $862 = HEAP32[$8>>2]|0;
                  $863 = HEAP32[$9>>2]|0;
                  $864 = $862;
                  $865 = $863;
                  $866 = (($864) - ($865))|0;
                  $867 = (($866) - 1)|0;
                  $868 = ($867|0)<(3);
                  $869 = (3)>=(1);
                  $or$cond18 = $868 & $869;
                  if ($or$cond18) {
                   label = 145;
                   break L148;
                  }
                  $871 = HEAP32[$9>>2]|0;
                  $872 = ((($871)) + 1|0);
                  HEAP32[$9>>2] = $872;
                  $873 = HEAP8[$871>>0]|0;
                  $16 = $873;
                  $874 = HEAP32[$9>>2]|0;
                  $26 = $874;
                  HEAP32[$25>>2] = 0;
                  while(1) {
                   $875 = $26;
                   $876 = HEAP8[$875>>0]|0;
                   $877 = ($876<<24>>24)!=(0);
                   if (!($877)) {
                    break;
                   }
                   $878 = $26;
                   $879 = HEAP8[$878>>0]|0;
                   $880 = $879 << 24 >> 24;
                   $881 = ($880|0)==(44);
                   if ($881) {
                    $882 = HEAP32[$25>>2]|0;
                    $883 = (($882) + 1)|0;
                    HEAP32[$25>>2] = $883;
                   }
                   $884 = $26;
                   $885 = ((($884)) + 1|0);
                   $26 = $885;
                  }
                  (_kputc_(66,$11)|0);
                  $886 = $16;
                  $887 = $886&255;
                  (_kputc_($887,$11)|0);
                  (_kputsn__394($25,4,$11)|0);
                  $888 = $16;
                  $889 = $888&255;
                  $890 = ($889|0)==(99);
                  if ($890) {
                   while(1) {
                    $891 = HEAP32[$9>>2]|0;
                    $892 = ((($891)) + 1|0);
                    $893 = HEAP32[$8>>2]|0;
                    $894 = ($892>>>0)<($893>>>0);
                    if (!($894)) {
                     continue L148;
                    }
                    $895 = HEAP32[$9>>2]|0;
                    $896 = ((($895)) + 1|0);
                    $897 = (_strtol($896,$9,0)|0);
                    $898 = $897&255;
                    $27 = $898;
                    $899 = $27;
                    $900 = $899 << 24 >> 24;
                    (_kputc_($900,$11)|0);
                   }
                  }
                  $901 = $16;
                  $902 = $901&255;
                  $903 = ($902|0)==(67);
                  if ($903) {
                   while(1) {
                    $904 = HEAP32[$9>>2]|0;
                    $905 = ((($904)) + 1|0);
                    $906 = HEAP32[$8>>2]|0;
                    $907 = ($905>>>0)<($906>>>0);
                    if (!($907)) {
                     continue L148;
                    }
                    $908 = HEAP32[$9>>2]|0;
                    $909 = ((($908)) + 1|0);
                    $910 = (_strtoul($909,$9,0)|0);
                    $911 = $910&255;
                    $28 = $911;
                    $912 = $28;
                    $913 = $912&255;
                    (_kputc_($913,$11)|0);
                   }
                  }
                  $914 = $16;
                  $915 = $914&255;
                  $916 = ($915|0)==(115);
                  if ($916) {
                   while(1) {
                    $917 = HEAP32[$9>>2]|0;
                    $918 = ((($917)) + 1|0);
                    $919 = HEAP32[$8>>2]|0;
                    $920 = ($918>>>0)<($919>>>0);
                    if (!($920)) {
                     continue L148;
                    }
                    $921 = HEAP32[$9>>2]|0;
                    $922 = ((($921)) + 1|0);
                    $923 = (_strtol($922,$9,0)|0);
                    $924 = $923&65535;
                    HEAP16[$29>>1] = $924;
                    (_kputsn__394($29,2,$11)|0);
                   }
                  }
                  $925 = $16;
                  $926 = $925&255;
                  $927 = ($926|0)==(83);
                  if ($927) {
                   while(1) {
                    $928 = HEAP32[$9>>2]|0;
                    $929 = ((($928)) + 1|0);
                    $930 = HEAP32[$8>>2]|0;
                    $931 = ($929>>>0)<($930>>>0);
                    if (!($931)) {
                     continue L148;
                    }
                    $932 = HEAP32[$9>>2]|0;
                    $933 = ((($932)) + 1|0);
                    $934 = (_strtoul($933,$9,0)|0);
                    $935 = $934&65535;
                    HEAP16[$30>>1] = $935;
                    (_kputsn__394($30,2,$11)|0);
                   }
                  }
                  $936 = $16;
                  $937 = $936&255;
                  $938 = ($937|0)==(105);
                  if ($938) {
                   while(1) {
                    $939 = HEAP32[$9>>2]|0;
                    $940 = ((($939)) + 1|0);
                    $941 = HEAP32[$8>>2]|0;
                    $942 = ($940>>>0)<($941>>>0);
                    if (!($942)) {
                     continue L148;
                    }
                    $943 = HEAP32[$9>>2]|0;
                    $944 = ((($943)) + 1|0);
                    $945 = (_strtol($944,$9,0)|0);
                    HEAP32[$31>>2] = $945;
                    (_kputsn__394($31,4,$11)|0);
                   }
                  }
                  $946 = $16;
                  $947 = $946&255;
                  $948 = ($947|0)==(73);
                  if ($948) {
                   while(1) {
                    $949 = HEAP32[$9>>2]|0;
                    $950 = ((($949)) + 1|0);
                    $951 = HEAP32[$8>>2]|0;
                    $952 = ($950>>>0)<($951>>>0);
                    if (!($952)) {
                     continue L148;
                    }
                    $953 = HEAP32[$9>>2]|0;
                    $954 = ((($953)) + 1|0);
                    $955 = (_strtoul($954,$9,0)|0);
                    HEAP32[$32>>2] = $955;
                    (_kputsn__394($32,4,$11)|0);
                   }
                  }
                  $956 = $16;
                  $957 = $956&255;
                  $958 = ($957|0)==(102);
                  if (!($958)) {
                   $967 = (3)>=(1);
                   if ($967) {
                    label = 173;
                    break L148;
                   } else {
                    continue L148;
                   }
                  }
                  while(1) {
                   $959 = HEAP32[$9>>2]|0;
                   $960 = ((($959)) + 1|0);
                   $961 = HEAP32[$8>>2]|0;
                   $962 = ($960>>>0)<($961>>>0);
                   if (!($962)) {
                    continue L148;
                   }
                   $963 = HEAP32[$9>>2]|0;
                   $964 = ((($963)) + 1|0);
                   $965 = (+_strtod($964,$9));
                   $966 = $965;
                   HEAPF32[$33>>2] = $966;
                   (_kputsn__394($33,4,$11)|0);
                  }
                 }
                } while(0);
                $851 = $16;
                $852 = $851&255;
                (_kputc_($852,$11)|0);
                $853 = HEAP32[$9>>2]|0;
                $854 = HEAP32[$8>>2]|0;
                $855 = HEAP32[$9>>2]|0;
                $856 = $854;
                $857 = $855;
                $858 = (($856) - ($857))|0;
                (_kputsn__394($853,$858,$11)|0);
                continue L148;
               }
              } while(0);
              $813 = HEAP32[$9>>2]|0;
              $814 = HEAP8[$813>>0]|0;
              $815 = $814 << 24 >> 24;
              $816 = ($815|0)==(45);
              $817 = HEAP32[$9>>2]|0;
              if ($816) {
               $818 = (_strtol($817,$9,10)|0);
               $17 = $818;
               $819 = $17;
               $820 = ($819|0)>=(-128);
               if ($820) {
                (_kputc_(99,$11)|0);
                $821 = $17;
                (_kputc_($821,$11)|0);
                continue L148;
               }
               $822 = $17;
               $823 = ($822|0)>=(-32768);
               $824 = $17;
               if ($823) {
                $825 = $824&65535;
                HEAP16[$18>>1] = $825;
                (_kputc_(115,$11)|0);
                (_kputsn__394($18,2,$11)|0);
                continue L148;
               } else {
                HEAP32[$19>>2] = $824;
                (_kputc_(105,$11)|0);
                (_kputsn__394($19,4,$11)|0);
                continue L148;
               }
              } else {
               $826 = (_strtoul($817,$9,10)|0);
               $20 = $826;
               $827 = $20;
               $828 = ($827>>>0)<=(255);
               if ($828) {
                (_kputc_(67,$11)|0);
                $829 = $20;
                (_kputc_($829,$11)|0);
                continue L148;
               }
               $830 = $20;
               $831 = ($830>>>0)<=(65535);
               $832 = $20;
               if ($831) {
                $833 = $832&65535;
                HEAP16[$21>>1] = $833;
                (_kputc_(83,$11)|0);
                (_kputsn__394($21,2,$11)|0);
                continue L148;
               } else {
                HEAP32[$22>>2] = $832;
                (_kputc_(73,$11)|0);
                (_kputsn__394($22,4,$11)|0);
                continue L148;
               }
              }
             }
            } while(0);
            (_kputc_(65,$11)|0);
            $804 = HEAP32[$9>>2]|0;
            $805 = HEAP8[$804>>0]|0;
            $806 = $805 << 24 >> 24;
            (_kputc_($806,$11)|0);
           }
           if ((label|0) == 117) {
            $783 = HEAP32[2410]|0;
            HEAP32[$vararg_buffer55>>2] = 17999;
            (_fprintf($783,18595,$vararg_buffer55)|0);
            break;
           }
           else if ((label|0) == 145) {
            $870 = HEAP32[2410]|0;
            HEAP32[$vararg_buffer58>>2] = 17999;
            (_fprintf($870,18625,$vararg_buffer58)|0);
            break;
           }
           else if ((label|0) == 173) {
            $968 = HEAP32[2410]|0;
            HEAP32[$vararg_buffer61>>2] = 17999;
            (_fprintf($968,18663,$vararg_buffer61)|0);
            break;
           }
           else if ((label|0) == 175) {
            $970 = HEAP32[2410]|0;
            HEAP32[$vararg_buffer64>>2] = 17999;
            (_fprintf($970,18663,$vararg_buffer64)|0);
            break;
           }
           else if ((label|0) == 176) {
            $971 = ((($11)) + 8|0);
            $972 = HEAP32[$971>>2]|0;
            $973 = $6;
            $974 = ((($973)) + 40|0);
            HEAP32[$974>>2] = $972;
            $975 = HEAP32[$11>>2]|0;
            $976 = $6;
            $977 = ((($976)) + 32|0);
            HEAP32[$977>>2] = $975;
            $978 = ((($11)) + 4|0);
            $979 = HEAP32[$978>>2]|0;
            $980 = $6;
            $981 = ((($980)) + 36|0);
            HEAP32[$981>>2] = $979;
            $3 = 0;
            $993 = $3;
            STACKTOP = sp;return ($993|0);
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $982 = ((($11)) + 8|0);
 $983 = HEAP32[$982>>2]|0;
 $984 = $6;
 $985 = ((($984)) + 40|0);
 HEAP32[$985>>2] = $983;
 $986 = HEAP32[$11>>2]|0;
 $987 = $6;
 $988 = ((($987)) + 32|0);
 HEAP32[$988>>2] = $986;
 $989 = ((($11)) + 4|0);
 $990 = HEAP32[$989>>2]|0;
 $991 = $6;
 $992 = ((($991)) + 36|0);
 HEAP32[$992>>2] = $990;
 $3 = -2;
 $993 = $3;
 STACKTOP = sp;return ($993|0);
}
function _kputsn__394($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6;
 $9 = HEAP32[$8>>2]|0;
 $10 = $5;
 $11 = (($9) + ($10))|0;
 $12 = $6;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11>>>0)>($14>>>0);
 do {
  if ($15) {
   $16 = $6;
   $17 = HEAP32[$16>>2]|0;
   $18 = $5;
   $19 = (($17) + ($18))|0;
   $20 = $6;
   $21 = ((($20)) + 4|0);
   HEAP32[$21>>2] = $19;
   $22 = $6;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + -1)|0;
   HEAP32[$23>>2] = $25;
   $26 = $6;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 >>> 1;
   $30 = $6;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $32 | $29;
   HEAP32[$31>>2] = $33;
   $34 = $6;
   $35 = ((($34)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $36 >>> 2;
   $38 = $6;
   $39 = ((($38)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 | $37;
   HEAP32[$39>>2] = $41;
   $42 = $6;
   $43 = ((($42)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 >>> 4;
   $46 = $6;
   $47 = ((($46)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $48 | $45;
   HEAP32[$47>>2] = $49;
   $50 = $6;
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $52 >>> 8;
   $54 = $6;
   $55 = ((($54)) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $56 | $53;
   HEAP32[$55>>2] = $57;
   $58 = $6;
   $59 = ((($58)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $60 >>> 16;
   $62 = $6;
   $63 = ((($62)) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $64 | $61;
   HEAP32[$63>>2] = $65;
   $66 = $6;
   $67 = ((($66)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (($68) + 1)|0;
   HEAP32[$67>>2] = $69;
   $70 = $6;
   $71 = ((($70)) + 8|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $6;
   $74 = ((($73)) + 4|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (_realloc($72,$75)|0);
   $7 = $76;
   $77 = ($76|0)!=(0|0);
   if ($77) {
    $78 = $7;
    $79 = $6;
    $80 = ((($79)) + 8|0);
    HEAP32[$80>>2] = $78;
    break;
   }
   $3 = -1;
   $94 = $3;
   STACKTOP = sp;return ($94|0);
  }
 } while(0);
 $81 = $6;
 $82 = ((($81)) + 8|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $6;
 $85 = HEAP32[$84>>2]|0;
 $86 = (($83) + ($85)|0);
 $87 = $4;
 $88 = $5;
 _memcpy(($86|0),($87|0),($88|0))|0;
 $89 = $5;
 $90 = $6;
 $91 = HEAP32[$90>>2]|0;
 $92 = (($91) + ($89))|0;
 HEAP32[$90>>2] = $92;
 $93 = $5;
 $3 = $93;
 $94 = $3;
 STACKTOP = sp;return ($94|0);
}
function _isdigit_c_399($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2&255;
 $4 = (_isdigit($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _ks_resize_402($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $4;
 $10 = ($8>>>0)<($9>>>0);
 do {
  if ($10) {
   $11 = $4;
   $12 = $3;
   $13 = ((($12)) + 4|0);
   HEAP32[$13>>2] = $11;
   $14 = $3;
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + -1)|0;
   HEAP32[$15>>2] = $17;
   $18 = $3;
   $19 = ((($18)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $20 >>> 1;
   $22 = $3;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24 | $21;
   HEAP32[$23>>2] = $25;
   $26 = $3;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 >>> 2;
   $30 = $3;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $32 | $29;
   HEAP32[$31>>2] = $33;
   $34 = $3;
   $35 = ((($34)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $36 >>> 4;
   $38 = $3;
   $39 = ((($38)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 | $37;
   HEAP32[$39>>2] = $41;
   $42 = $3;
   $43 = ((($42)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 >>> 8;
   $46 = $3;
   $47 = ((($46)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $48 | $45;
   HEAP32[$47>>2] = $49;
   $50 = $3;
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $52 >>> 16;
   $54 = $3;
   $55 = ((($54)) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $56 | $53;
   HEAP32[$55>>2] = $57;
   $58 = $3;
   $59 = ((($58)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + 1)|0;
   HEAP32[$59>>2] = $61;
   $62 = $3;
   $63 = ((($62)) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $3;
   $66 = ((($65)) + 4|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (_realloc($64,$67)|0);
   $5 = $68;
   $69 = ($68|0)!=(0|0);
   if ($69) {
    $70 = $5;
    $71 = $3;
    $72 = ((($71)) + 8|0);
    HEAP32[$72>>2] = $70;
    break;
   }
   $2 = -1;
   $73 = $2;
   STACKTOP = sp;return ($73|0);
  }
 } while(0);
 $2 = 0;
 $73 = $2;
 STACKTOP = sp;return ($73|0);
}
function _hts_reg2bin_405($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp + 8|0;
 $8 = sp;
 $14 = $7;
 $15 = $14;
 HEAP32[$15>>2] = $0;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $1;
 $18 = $8;
 $19 = $18;
 HEAP32[$19>>2] = $2;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $3;
 $9 = $4;
 $10 = $5;
 $22 = $9;
 $12 = $22;
 $23 = $10;
 $24 = $23 << 1;
 $25 = $10;
 $26 = (($24) + ($25))|0;
 $27 = 1 << $26;
 $28 = (($27) - 1)|0;
 $29 = (($28|0) / 7)&-1;
 $13 = $29;
 $30 = $8;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (_i64Add(($32|0),($35|0),-1,-1)|0);
 $37 = tempRet0;
 $38 = $8;
 $39 = $38;
 HEAP32[$39>>2] = $36;
 $40 = (($38) + 4)|0;
 $41 = $40;
 HEAP32[$41>>2] = $37;
 $42 = $10;
 $11 = $42;
 while(1) {
  $43 = $11;
  $44 = ($43|0)>(0);
  if (!($44)) {
   label = 6;
   break;
  }
  $45 = $7;
  $46 = $45;
  $47 = HEAP32[$46>>2]|0;
  $48 = (($45) + 4)|0;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $51 = $12;
  $52 = (_bitshift64Ashr(($47|0),($50|0),($51|0))|0);
  $53 = tempRet0;
  $54 = $8;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = (($54) + 4)|0;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = $12;
  $61 = (_bitshift64Ashr(($56|0),($59|0),($60|0))|0);
  $62 = tempRet0;
  $63 = ($52|0)==($61|0);
  $64 = ($53|0)==($62|0);
  $65 = $63 & $64;
  if ($65) {
   label = 4;
   break;
  }
  $80 = $11;
  $81 = (($80) + -1)|0;
  $11 = $81;
  $82 = $12;
  $83 = (($82) + 3)|0;
  $12 = $83;
  $84 = $11;
  $85 = $84 << 1;
  $86 = $11;
  $87 = (($85) + ($86))|0;
  $88 = 1 << $87;
  $89 = $13;
  $90 = (($89) - ($88))|0;
  $13 = $90;
 }
 if ((label|0) == 4) {
  $66 = $13;
  $67 = ($66|0)<(0);
  $68 = $67 << 31 >> 31;
  $69 = $7;
  $70 = $69;
  $71 = HEAP32[$70>>2]|0;
  $72 = (($69) + 4)|0;
  $73 = $72;
  $74 = HEAP32[$73>>2]|0;
  $75 = $12;
  $76 = (_bitshift64Ashr(($71|0),($74|0),($75|0))|0);
  $77 = tempRet0;
  $78 = (_i64Add(($66|0),($68|0),($76|0),($77|0))|0);
  $79 = tempRet0;
  $6 = $78;
  $91 = $6;
  STACKTOP = sp;return ($91|0);
 }
 else if ((label|0) == 6) {
  $6 = 0;
  $91 = $6;
  STACKTOP = sp;return ($91|0);
 }
 return (0)|0;
}
function _kputc_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = $4;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8>>>0)>($11>>>0);
 do {
  if ($12) {
   $13 = $4;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 1)|0;
   $16 = $4;
   $17 = ((($16)) + 4|0);
   HEAP32[$17>>2] = $15;
   $18 = $4;
   $19 = ((($18)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + -1)|0;
   HEAP32[$19>>2] = $21;
   $22 = $4;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24 >>> 1;
   $26 = $4;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 | $25;
   HEAP32[$27>>2] = $29;
   $30 = $4;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $32 >>> 2;
   $34 = $4;
   $35 = ((($34)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $36 | $33;
   HEAP32[$35>>2] = $37;
   $38 = $4;
   $39 = ((($38)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 >>> 4;
   $42 = $4;
   $43 = ((($42)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 | $41;
   HEAP32[$43>>2] = $45;
   $46 = $4;
   $47 = ((($46)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $48 >>> 8;
   $50 = $4;
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $52 | $49;
   HEAP32[$51>>2] = $53;
   $54 = $4;
   $55 = ((($54)) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $56 >>> 16;
   $58 = $4;
   $59 = ((($58)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $60 | $57;
   HEAP32[$59>>2] = $61;
   $62 = $4;
   $63 = ((($62)) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) + 1)|0;
   HEAP32[$63>>2] = $65;
   $66 = $4;
   $67 = ((($66)) + 8|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $4;
   $70 = ((($69)) + 4|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (_realloc($68,$71)|0);
   $5 = $72;
   $73 = ($72|0)!=(0|0);
   if ($73) {
    $74 = $5;
    $75 = $4;
    $76 = ((($75)) + 8|0);
    HEAP32[$76>>2] = $74;
    break;
   }
   $2 = -1;
   $86 = $2;
   STACKTOP = sp;return ($86|0);
  }
 } while(0);
 $77 = $3;
 $78 = $77&255;
 $79 = $4;
 $80 = HEAP32[$79>>2]|0;
 $81 = (($80) + 1)|0;
 HEAP32[$79>>2] = $81;
 $82 = $4;
 $83 = ((($82)) + 8|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($84) + ($80)|0);
 HEAP8[$85>>0] = $78;
 $2 = 1;
 $86 = $2;
 STACKTOP = sp;return ($86|0);
}
function _sam_read1($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $6 = sp + 28|0;
 $4 = $0;
 $5 = $1;
 HEAP32[$6>>2] = $2;
 $10 = $4;
 $11 = ((($10)) + 40|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 switch ($13|0) {
 case 4:  {
  $14 = $4;
  $15 = ((($14)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = (_bam_read1($16,$17)|0);
  $7 = $18;
  $19 = $7;
  $20 = ($19|0)>=(0);
  do {
   if ($20) {
    $21 = HEAP32[$6>>2]|0;
    $22 = HEAP32[$21>>2]|0;
    $23 = $5;
    $24 = HEAP32[$23>>2]|0;
    $25 = ($22|0)>=($24|0);
    if (!($25)) {
     $26 = HEAP32[$6>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)<(-1);
     if (!($28)) {
      $29 = HEAP32[$6>>2]|0;
      $30 = ((($29)) + 20|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = $5;
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)>=($33|0);
      if (!($34)) {
       $35 = HEAP32[$6>>2]|0;
       $36 = ((($35)) + 20|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)<(-1);
       if (!($38)) {
        break;
       }
      }
     }
    }
    $3 = -3;
    $92 = $3;
    STACKTOP = sp;return ($92|0);
   }
  } while(0);
  $39 = $7;
  $3 = $39;
  $92 = $3;
  STACKTOP = sp;return ($92|0);
  break;
 }
 case 6:  {
  $40 = $4;
  $41 = ((($40)) + 36|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (_cram_get_bam_seq($42,$6)|0);
  $8 = $43;
  $44 = $8;
  $45 = ($44|0)>=(0);
  if ($45) {
   $46 = $8;
   $53 = $46;
  } else {
   $47 = $4;
   $48 = ((($47)) + 36|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (_cram_eof($49)|0);
   $51 = ($50|0)!=(0);
   $52 = $51 ? -1 : -2;
   $53 = $52;
  }
  $3 = $53;
  $92 = $3;
  STACKTOP = sp;return ($92|0);
  break;
 }
 case 3:  {
  while(1) {
   $54 = $4;
   $55 = ((($54)) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)==(0);
   if ($57) {
    $58 = $4;
    $59 = $4;
    $60 = ((($59)) + 16|0);
    $61 = (_hts_getline($58,2,$60)|0);
    $9 = $61;
    $62 = $9;
    $63 = ($62|0)<(0);
    if ($63) {
     label = 15;
     break;
    }
   }
   $64 = $4;
   $65 = ((($64)) + 16|0);
   $66 = $5;
   $67 = HEAP32[$6>>2]|0;
   $68 = (_sam_parse1($65,$66,$67)|0);
   $9 = $68;
   $69 = $4;
   $70 = ((($69)) + 16|0);
   HEAP32[$70>>2] = 0;
   $71 = $9;
   $72 = ($71|0)<(0);
   if (!($72)) {
    label = 20;
    break;
   }
   $73 = (3)>=(1);
   if ($73) {
    $74 = HEAP32[2410]|0;
    $75 = $4;
    $76 = ((($75)) + 8|0);
    $77 = $76;
    $78 = $77;
    $79 = HEAP32[$78>>2]|0;
    $80 = (($77) + 4)|0;
    $81 = $80;
    $82 = HEAP32[$81>>2]|0;
    HEAP32[$vararg_buffer>>2] = 18724;
    $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
    $83 = $vararg_ptr1;
    $84 = $83;
    HEAP32[$84>>2] = $79;
    $85 = (($83) + 4)|0;
    $86 = $85;
    HEAP32[$86>>2] = $82;
    (_fprintf($74,18690,$vararg_buffer)|0);
   }
   $87 = $5;
   $88 = ((($87)) + 4|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ($89|0)!=(0);
   if (!($90)) {
    label = 20;
    break;
   }
  }
  if ((label|0) == 15) {
   $3 = -1;
   $92 = $3;
   STACKTOP = sp;return ($92|0);
  }
  else if ((label|0) == 20) {
   $91 = $9;
   $3 = $91;
   $92 = $3;
   STACKTOP = sp;return ($92|0);
  }
  break;
 }
 default: {
  _abort();
  // unreachable;
 }
 }
 return (0)|0;
}
function _bam_aux_get($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $4;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = $10 << 8;
 $12 = $4;
 $13 = ((($12)) + 1|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 << 24 >> 24;
 $16 = $11 | $15;
 $6 = $16;
 $17 = $3;
 $18 = ((($17)) + 40|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $3;
 $21 = ((($20)) + 8|0);
 $22 = $21;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($22) + 4)|0;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (_bitshift64Lshr(($24|0),($27|0),48)|0);
 $29 = tempRet0;
 $30 = $28 << 2;
 $31 = (($19) + ($30)|0);
 $32 = $3;
 $33 = ((($32)) + 8|0);
 $34 = $33;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = (_bitshift64Lshr(($36|0),($39|0),24)|0);
 $41 = tempRet0;
 $42 = $40 & 255;
 $43 = (($31) + ($42)|0);
 $44 = $3;
 $45 = ((($44)) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + 1)|0;
 $48 = $47 >> 1;
 $49 = (($43) + ($48)|0);
 $50 = $3;
 $51 = ((($50)) + 16|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($49) + ($52)|0);
 $5 = $53;
 while(1) {
  $54 = $5;
  $55 = $3;
  $56 = ((($55)) + 40|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $3;
  $59 = ((($58)) + 32|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($57) + ($60)|0);
  $62 = ($54>>>0)<($61>>>0);
  if (!($62)) {
   label = 6;
   break;
  }
  $63 = $5;
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = $65 << 8;
  $67 = $5;
  $68 = ((($67)) + 1|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = $66 | $70;
  $7 = $71;
  $72 = $5;
  $73 = ((($72)) + 2|0);
  $5 = $73;
  $74 = $7;
  $75 = $6;
  $76 = ($74|0)==($75|0);
  $77 = $5;
  if ($76) {
   label = 4;
   break;
  }
  $78 = (_skip_aux($77)|0);
  $5 = $78;
 }
 if ((label|0) == 4) {
  $2 = $77;
  $79 = $2;
  STACKTOP = sp;return ($79|0);
 }
 else if ((label|0) == 6) {
  $2 = 0;
  $79 = $2;
  STACKTOP = sp;return ($79|0);
 }
 return (0)|0;
}
function _skip_aux($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $5 = $2;
 $6 = HEAP8[$5>>0]|0;
 $7 = (_aux_type2size($6)|0);
 $3 = $7;
 $8 = $2;
 $9 = ((($8)) + 1|0);
 $2 = $9;
 $10 = $3;
 switch ($10|0) {
 case 72: case 90:  {
  while(1) {
   $11 = $2;
   $12 = HEAP8[$11>>0]|0;
   $13 = ($12<<24>>24)!=(0);
   $14 = $2;
   $15 = ((($14)) + 1|0);
   if (!($13)) {
    break;
   }
   $2 = $15;
  }
  $1 = $15;
  $32 = $1;
  STACKTOP = sp;return ($32|0);
  break;
 }
 case 66:  {
  $16 = $2;
  $17 = HEAP8[$16>>0]|0;
  $18 = (_aux_type2size($17)|0);
  $3 = $18;
  $19 = $2;
  $20 = ((($19)) + 1|0);
  $2 = $20;
  $21 = $2;
  ;HEAP8[$4>>0]=HEAP8[$21>>0]|0;HEAP8[$4+1>>0]=HEAP8[$21+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[$21+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[$21+3>>0]|0;
  $22 = $2;
  $23 = ((($22)) + 4|0);
  $2 = $23;
  $24 = $2;
  $25 = $3;
  $26 = HEAP32[$4>>2]|0;
  $27 = Math_imul($25, $26)|0;
  $28 = (($24) + ($27)|0);
  $1 = $28;
  $32 = $1;
  STACKTOP = sp;return ($32|0);
  break;
 }
 case 0:  {
  _abort();
  // unreachable;
  break;
 }
 default: {
  $29 = $2;
  $30 = $3;
  $31 = (($29) + ($30)|0);
  $1 = $31;
  $32 = $1;
  STACKTOP = sp;return ($32|0);
 }
 }
 return (0)|0;
}
function _bam_aux2A($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 1|0);
 $2 = $5;
 $6 = HEAP8[$4>>0]|0;
 $7 = $6&255;
 $3 = $7;
 $8 = $3;
 $9 = ($8|0)==(65);
 if ($9) {
  $10 = $2;
  $11 = HEAP8[$10>>0]|0;
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 } else {
  $1 = 0;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _bgzf_open($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $8 = (_compressBound(65280)|0);
 $9 = ($8>>>0)<(65536);
 if (!($9)) {
  ___assert_fail((18734|0),(18787|0),237,(18794|0));
  // unreachable;
 }
 $10 = $4;
 $11 = (_strchr($10,114)|0);
 $12 = ($11|0)!=(0|0);
 do {
  if ($12) {
   $13 = $3;
   $14 = $4;
   $15 = (_hopen($13,$14)|0);
   $6 = $15;
   $16 = ($15|0)==(0|0);
   if ($16) {
    $2 = 0;
    $50 = $2;
    STACKTOP = sp;return ($50|0);
   }
   $17 = $6;
   $18 = (_bgzf_read_init($17)|0);
   $5 = $18;
   $19 = $5;
   $20 = ($19|0)==(0|0);
   $21 = $6;
   if (!($20)) {
    $22 = $5;
    $23 = ((($22)) + 44|0);
    HEAP32[$23>>2] = $21;
    break;
   }
   _hclose_abruptly($21);
   $2 = 0;
   $50 = $2;
   STACKTOP = sp;return ($50|0);
  } else {
   $24 = $4;
   $25 = (_strchr($24,119)|0);
   $26 = ($25|0)!=(0|0);
   if (!($26)) {
    $27 = $4;
    $28 = (_strchr($27,97)|0);
    $29 = ($28|0)!=(0|0);
    if (!($29)) {
     $41 = (___errno_location()|0);
     HEAP32[$41>>2] = 22;
     $2 = 0;
     $50 = $2;
     STACKTOP = sp;return ($50|0);
    }
   }
   $30 = $3;
   $31 = $4;
   $32 = (_hopen($30,$31)|0);
   $7 = $32;
   $33 = ($32|0)==(0|0);
   if ($33) {
    $2 = 0;
    $50 = $2;
    STACKTOP = sp;return ($50|0);
   }
   $34 = $4;
   $35 = (_bgzf_write_init($34)|0);
   $5 = $35;
   $36 = $5;
   $37 = ($36|0)==(0|0);
   if (!($37)) {
    $38 = $7;
    $39 = $5;
    $40 = ((($39)) + 44|0);
    HEAP32[$40>>2] = $38;
    break;
   }
   $2 = 0;
   $50 = $2;
   STACKTOP = sp;return ($50|0);
  }
 } while(0);
 $42 = (_ed_is_big_462()|0);
 $43 = $5;
 $44 = HEAP32[$43>>2]|0;
 $45 = $42 & 3;
 $46 = $45 << 18;
 $47 = $44 & -786433;
 $48 = $47 | $46;
 HEAP32[$43>>2] = $48;
 $49 = $5;
 $2 = $49;
 $50 = $2;
 STACKTOP = sp;return ($50|0);
}
function _bgzf_read_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $2 = $0;
 $6 = $2;
 $7 = (_hpeek($6,$4,18)|0);
 $5 = $7;
 $8 = $5;
 $9 = ($8|0)<(0);
 if ($9) {
  $1 = 0;
  $81 = $1;
  STACKTOP = sp;return ($81|0);
 }
 $10 = (_calloc(1,64)|0);
 $3 = $10;
 $11 = $3;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $1 = 0;
  $81 = $1;
  STACKTOP = sp;return ($81|0);
 }
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & -196609;
 HEAP32[$13>>2] = $15;
 $16 = $5;
 $17 = ($16|0)==(2);
 if ($17) {
  $18 = HEAP8[$4>>0]|0;
  $19 = $18&255;
  $20 = ($19|0)==(31);
  if ($20) {
   $21 = ((($4)) + 1|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = ($23|0)==(139);
   $26 = $24;
  } else {
   $26 = 0;
  }
 } else {
  $26 = 0;
 }
 $25 = $26&1;
 $27 = $3;
 $28 = HEAP32[$27>>2]|0;
 $29 = $25 & 3;
 $30 = $29 << 29;
 $31 = $28 & -1610612737;
 $32 = $31 | $30;
 HEAP32[$27>>2] = $32;
 $33 = (_malloc(65536)|0);
 $34 = $3;
 $35 = ((($34)) + 32|0);
 HEAP32[$35>>2] = $33;
 $36 = (_malloc(65536)|0);
 $37 = $3;
 $38 = ((($37)) + 36|0);
 HEAP32[$38>>2] = $36;
 $39 = $5;
 $40 = ($39|0)==(18);
 if ($40) {
  $41 = HEAP8[$4>>0]|0;
  $42 = $41&255;
  $43 = ($42|0)==(31);
  if ($43) {
   $44 = ((($4)) + 1|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $47 = ($46|0)==(139);
   $48 = $47;
  } else {
   $48 = 0;
  }
 } else {
  $48 = 0;
 }
 $49 = $48 ? 1 : 0;
 $50 = $3;
 $51 = HEAP32[$50>>2]|0;
 $52 = $49 & 3;
 $53 = $52 << 29;
 $54 = $51 & -1610612737;
 $55 = $54 | $53;
 HEAP32[$50>>2] = $55;
 $56 = $3;
 $57 = HEAP32[$56>>2]|0;
 $58 = $57 >>> 29;
 $59 = $58 & 3;
 $60 = ($59|0)!=(0);
 if ($60) {
  $61 = ((($4)) + 3|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = $63 & 4;
  $65 = ($64|0)!=(0);
  if ($65) {
   $66 = ((($4)) + 12|0);
   $67 = (_memcmp($66,19081,4)|0);
   $68 = ($67|0)==(0);
   $69 = $68;
  } else {
   $69 = 0;
  }
 } else {
  $69 = 1;
 }
 $70 = $69 ? 0 : 1;
 $71 = $3;
 $72 = HEAP32[$71>>2]|0;
 $73 = $70 & 1;
 $74 = $73 << 31;
 $75 = $72 & 2147483647;
 $76 = $75 | $74;
 HEAP32[$71>>2] = $76;
 $77 = (_kh_init_cache()|0);
 $78 = $3;
 $79 = ((($78)) + 40|0);
 HEAP32[$79>>2] = $77;
 $80 = $3;
 $1 = $80;
 $81 = $1;
 STACKTOP = sp;return ($81|0);
}
function _bgzf_write_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $6 = (_calloc(1,64)|0);
 $3 = $6;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 do {
  if ($8) {
   label = 14;
  } else {
   $9 = $3;
   $10 = HEAP32[$9>>2]|0;
   $11 = $10 & -196609;
   $12 = $11 | 65536;
   HEAP32[$9>>2] = $12;
   $13 = $2;
   $14 = (_mode2level($13)|0);
   $4 = $14;
   $15 = $4;
   $16 = ($15|0)==(-2);
   $17 = $3;
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 & -1610612737;
   if ($16) {
    HEAP32[$17>>2] = $19;
    $20 = $3;
    $1 = $20;
    $116 = $1;
    STACKTOP = sp;return ($116|0);
   }
   $21 = $19 | 536870912;
   HEAP32[$17>>2] = $21;
   $22 = (_malloc(65536)|0);
   $23 = $3;
   $24 = ((($23)) + 32|0);
   HEAP32[$24>>2] = $22;
   $25 = $3;
   $26 = ((($25)) + 32|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    label = 14;
   } else {
    $29 = (_malloc(65536)|0);
    $30 = $3;
    $31 = ((($30)) + 36|0);
    HEAP32[$31>>2] = $29;
    $32 = $3;
    $33 = ((($32)) + 36|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(0|0);
    if ($35) {
     label = 14;
    } else {
     $36 = $4;
     $37 = ($36|0)<(0);
     $38 = $4;
     $39 = $37 ? -1 : $38;
     $40 = $3;
     $41 = HEAP32[$40>>2]|0;
     $42 = $39 & 511;
     $43 = $42 << 20;
     $44 = $41 & -535822337;
     $45 = $44 | $43;
     HEAP32[$40>>2] = $45;
     $46 = $3;
     $47 = HEAP32[$46>>2]|0;
     $48 = $47 << 3;
     $49 = $48 >> 23;
     $50 = ($49|0)>(9);
     if ($50) {
      $51 = $3;
      $52 = HEAP32[$51>>2]|0;
      $53 = $52 & -535822337;
      $54 = $53 | 535822336;
      HEAP32[$51>>2] = $54;
     }
     $55 = $2;
     $56 = (_strchr($55,103)|0);
     $57 = ($56|0)!=(0|0);
     if ($57) {
      $58 = $3;
      $59 = HEAP32[$58>>2]|0;
      $60 = $59 & 2147483647;
      $61 = $60 | -2147483648;
      HEAP32[$58>>2] = $61;
      $62 = (_calloc(1,56)|0);
      $63 = $3;
      $64 = ((($63)) + 60|0);
      HEAP32[$64>>2] = $62;
      $65 = $3;
      $66 = ((($65)) + 60|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       label = 14;
       break;
      }
      $69 = $3;
      $70 = ((($69)) + 60|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = ((($71)) + 32|0);
      HEAP32[$72>>2] = 0;
      $73 = $3;
      $74 = ((($73)) + 60|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = ((($75)) + 36|0);
      HEAP32[$76>>2] = 0;
      $77 = $3;
      $78 = ((($77)) + 60|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ((($79)) + 24|0);
      HEAP32[$80>>2] = 0;
      $81 = $3;
      $82 = ((($81)) + 60|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = $3;
      $85 = HEAP32[$84>>2]|0;
      $86 = $85 << 3;
      $87 = $86 >> 23;
      $88 = (_deflateInit2_($83,$87,8,31,8,0,18804,56)|0);
      $5 = $88;
      $89 = $5;
      $90 = ($89|0)!=(0);
      if ($90) {
       $91 = (3)>=(1);
       if (!($91)) {
        break;
       }
       $92 = HEAP32[2410]|0;
       $93 = $5;
       $94 = $3;
       $95 = ((($94)) + 60|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = (_bgzf_zerr($93,$96)|0);
       HEAP32[$vararg_buffer>>2] = 18844;
       $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
       HEAP32[$vararg_ptr1>>2] = $97;
       (_fprintf($92,18811,$vararg_buffer)|0);
       break;
      }
     }
     $98 = $3;
     $1 = $98;
     $116 = $1;
     STACKTOP = sp;return ($116|0);
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  $99 = (3)>=(1);
  if ($99) {
   $100 = HEAP32[2410]|0;
   $101 = (___errno_location()|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = (_strerror($102)|0);
   HEAP32[$vararg_buffer2>>2] = 18844;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $103;
   (_fprintf($100,18860,$vararg_buffer2)|0);
  }
 }
 $104 = $3;
 $105 = ($104|0)!=(0|0);
 if ($105) {
  $106 = $3;
  $107 = ((($106)) + 32|0);
  $108 = HEAP32[$107>>2]|0;
  _free($108);
  $109 = $3;
  $110 = ((($109)) + 36|0);
  $111 = HEAP32[$110>>2]|0;
  _free($111);
  $112 = $3;
  $113 = ((($112)) + 60|0);
  $114 = HEAP32[$113>>2]|0;
  _free($114);
  $115 = $3;
  _free($115);
 }
 $1 = 0;
 $116 = $1;
 STACKTOP = sp;return ($116|0);
}
function _ed_is_big_462() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 HEAP32[$0>>2] = 1;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)!=(0);
 $3 = $2 ^ 1;
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function _mode2level($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = -1;
 $2 = 0;
 while(1) {
  $4 = $2;
  $5 = $1;
  $6 = (($5) + ($4)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)!=(0);
  if (!($8)) {
   break;
  }
  $9 = $2;
  $10 = $1;
  $11 = (($10) + ($9)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = ($13|0)>=(48);
  if ($14) {
   $15 = $2;
   $16 = $1;
   $17 = (($16) + ($15)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18 << 24 >> 24;
   $20 = ($19|0)<=(57);
   if ($20) {
    break;
   }
  }
  $21 = $2;
  $22 = (($21) + 1)|0;
  $2 = $22;
 }
 $23 = $2;
 $24 = $1;
 $25 = (($24) + ($23)|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = ($26<<24>>24)!=(0);
 if ($27) {
  $28 = $2;
  $29 = $1;
  $30 = (($29) + ($28)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 << 24 >> 24;
  $33 = (($32) - 48)|0;
  $3 = $33;
 }
 $34 = $1;
 $35 = (_strchr($34,117)|0);
 $36 = ($35|0)!=(0|0);
 if (!($36)) {
  $37 = $3;
  STACKTOP = sp;return ($37|0);
 }
 $3 = -2;
 $37 = $3;
 STACKTOP = sp;return ($37|0);
}
function _bgzf_zerr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $4;
  $8 = ((($7)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0|0);
  if ($10) {
   $11 = $4;
   $12 = ((($11)) + 24|0);
   $13 = HEAP32[$12>>2]|0;
   $2 = $13;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 L4: do {
  if ((label|0) == 4) {
   $14 = $3;
   switch ($14|0) {
   case -1:  {
    $15 = (___errno_location()|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (_strerror($16)|0);
    $2 = $17;
    break L4;
    break;
   }
   case -2:  {
    $2 = 18872;
    break L4;
    break;
   }
   case -3:  {
    $2 = 18938;
    break L4;
    break;
   }
   case -4:  {
    $2 = 18963;
    break L4;
    break;
   }
   case -5:  {
    $2 = 18977;
    break L4;
    break;
   }
   case -6:  {
    $2 = 19046;
    break L4;
    break;
   }
   default: {
    $18 = $3;
    HEAP32[$vararg_buffer>>2] = $18;
    (_snprintf(26392,32,19068,$vararg_buffer)|0);
    $2 = 26392;
    break L4;
   }
   }
  }
 } while(0);
 $19 = $2;
 STACKTOP = sp;return ($19|0);
}
function _kh_init_cache() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,28)|0);
 return ($0|0);
}
function _bgzf_hopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = (_compressBound(65280)|0);
 $7 = ($6>>>0)<(65536);
 if (!($7)) {
  ___assert_fail((18734|0),(18787|0),283,(19086|0));
  // unreachable;
 }
 $8 = $4;
 $9 = (_strchr($8,114)|0);
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $3;
  $12 = (_bgzf_read_init($11)|0);
  $5 = $12;
  $13 = $5;
  $14 = ($13|0)==(0|0);
  if ($14) {
   $2 = 0;
   $37 = $2;
   STACKTOP = sp;return ($37|0);
  }
 } else {
  $15 = $4;
  $16 = (_strchr($15,119)|0);
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   $18 = $4;
   $19 = (_strchr($18,97)|0);
   $20 = ($19|0)!=(0|0);
   if (!($20)) {
    $25 = (___errno_location()|0);
    HEAP32[$25>>2] = 22;
    $2 = 0;
    $37 = $2;
    STACKTOP = sp;return ($37|0);
   }
  }
  $21 = $4;
  $22 = (_bgzf_write_init($21)|0);
  $5 = $22;
  $23 = $5;
  $24 = ($23|0)==(0|0);
  if ($24) {
   $2 = 0;
   $37 = $2;
   STACKTOP = sp;return ($37|0);
  }
 }
 $26 = $3;
 $27 = $5;
 $28 = ((($27)) + 44|0);
 HEAP32[$28>>2] = $26;
 $29 = (_ed_is_big_462()|0);
 $30 = $5;
 $31 = HEAP32[$30>>2]|0;
 $32 = $29 & 3;
 $33 = $32 << 18;
 $34 = $31 & -786433;
 $35 = $34 | $33;
 HEAP32[$30>>2] = $35;
 $36 = $5;
 $2 = $36;
 $37 = $2;
 STACKTOP = sp;return ($37|0);
}
function _bgzf_compress($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $12 = sp + 32|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $15 = $6;
 $13 = $15;
 $16 = ((($12)) + 32|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($12)) + 36|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($12)) + 24|0);
 HEAP32[$18>>2] = 0;
 $19 = $8;
 HEAP32[$12>>2] = $19;
 $20 = $9;
 $21 = ((($12)) + 4|0);
 HEAP32[$21>>2] = $20;
 $22 = $13;
 $23 = ((($22)) + 18|0);
 $24 = ((($12)) + 12|0);
 HEAP32[$24>>2] = $23;
 $25 = $7;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) - 18)|0;
 $28 = (($27) - 8)|0;
 $29 = ((($12)) + 16|0);
 HEAP32[$29>>2] = $28;
 $30 = $10;
 $31 = (_deflateInit2_($12,$30,8,-15,8,0,18804,56)|0);
 $14 = $31;
 $32 = $14;
 $33 = ($32|0)!=(0);
 if ($33) {
  $34 = (3)>=(1);
  if ($34) {
   $35 = HEAP32[2410]|0;
   $36 = $14;
   $37 = (_bgzf_zerr($36,$12)|0);
   HEAP32[$vararg_buffer>>2] = 19097;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $37;
   (_fprintf($35,18811,$vararg_buffer)|0);
  }
  $5 = -1;
  $80 = $5;
  STACKTOP = sp;return ($80|0);
 }
 $38 = (_deflate($12,4)|0);
 $14 = $38;
 $39 = ($38|0)!=(1);
 if ($39) {
  $40 = (3)>=(1);
  if ($40) {
   $41 = HEAP32[2410]|0;
   $42 = $14;
   $43 = $14;
   $44 = ($43|0)==(-3);
   $$ = $44 ? $12 : 0;
   $45 = (_bgzf_zerr($42,$$)|0);
   HEAP32[$vararg_buffer2>>2] = 19097;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $45;
   (_fprintf($41,19111,$vararg_buffer2)|0);
  }
  $5 = -1;
  $80 = $5;
  STACKTOP = sp;return ($80|0);
 }
 $46 = (_deflateEnd($12)|0);
 $14 = $46;
 $47 = ($46|0)!=(0);
 if (!($47)) {
  $52 = ((($12)) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + 18)|0;
  $55 = (($54) + 8)|0;
  $56 = $7;
  HEAP32[$56>>2] = $55;
  $57 = $13;
  dest=$57; src=19170; stop=dest+18|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $58 = $13;
  $59 = ((($58)) + 16|0);
  $60 = $7;
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) - 1)|0;
  $63 = $62&65535;
  _packInt16($59,$63);
  $64 = (_crc32(0,0,0)|0);
  $65 = $8;
  $66 = $9;
  $67 = (_crc32($64,$65,$66)|0);
  $11 = $67;
  $68 = $7;
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) - 8)|0;
  $71 = $13;
  $72 = (($71) + ($70)|0);
  $73 = $11;
  _packInt32($72,$73);
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) - 4)|0;
  $77 = $13;
  $78 = (($77) + ($76)|0);
  $79 = $9;
  _packInt32($78,$79);
  $5 = 0;
  $80 = $5;
  STACKTOP = sp;return ($80|0);
 }
 $48 = (3)>=(1);
 if ($48) {
  $49 = HEAP32[2410]|0;
  $50 = $14;
  $51 = (_bgzf_zerr($50,0)|0);
  HEAP32[$vararg_buffer6>>2] = 19097;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $51;
  (_fprintf($49,19139,$vararg_buffer6)|0);
 }
 $5 = -1;
 $80 = $5;
 STACKTOP = sp;return ($80|0);
}
function _packInt16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $4&255;
 $6 = $2;
 HEAP8[$6>>0] = $5;
 $7 = $3;
 $8 = $7&65535;
 $9 = $8 >> 8;
 $10 = $9&255;
 $11 = $2;
 $12 = ((($11)) + 1|0);
 HEAP8[$12>>0] = $10;
 STACKTOP = sp;return;
}
function _packInt32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $4&255;
 $6 = $2;
 HEAP8[$6>>0] = $5;
 $7 = $3;
 $8 = $7 >>> 8;
 $9 = $8&255;
 $10 = $2;
 $11 = ((($10)) + 1|0);
 HEAP8[$11>>0] = $9;
 $12 = $3;
 $13 = $12 >>> 16;
 $14 = $13&255;
 $15 = $2;
 $16 = ((($15)) + 2|0);
 HEAP8[$16>>0] = $14;
 $17 = $3;
 $18 = $17 >>> 24;
 $19 = $18&255;
 $20 = $2;
 $21 = ((($20)) + 3|0);
 HEAP8[$21>>0] = $19;
 STACKTOP = sp;return;
}
function _bgzf_read_block($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0;
 var $vararg_buffer3 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $3 = sp + 68|0;
 $9 = sp;
 $2 = $0;
 $6 = 0;
 $14 = $2;
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 >>> 29;
 $17 = $16 & 3;
 $18 = ($17|0)!=(0);
 $19 = $2;
 $20 = ((($19)) + 44|0);
 $21 = HEAP32[$20>>2]|0;
 if (!($18)) {
  $22 = $2;
  $23 = ((($22)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_hread_477($21,$24,65536)|0);
  $5 = $25;
  $26 = $5;
  $27 = ($26|0)<(0);
  if ($27) {
   $28 = $2;
   $29 = HEAP32[$28>>2]|0;
   $30 = $29 & 65535;
   $31 = $30 | 4;
   $32 = HEAP32[$28>>2]|0;
   $33 = $31 & 65535;
   $34 = $32 & -65536;
   $35 = $34 | $33;
   HEAP32[$28>>2] = $35;
   $1 = -1;
   $379 = $1;
   STACKTOP = sp;return ($379|0);
  }
  $36 = $5;
  $37 = ($36|0)==(0);
  $38 = $2;
  $39 = ((($38)) + 8|0);
  if ($37) {
   HEAP32[$39>>2] = 0;
   $1 = 0;
   $379 = $1;
   STACKTOP = sp;return ($379|0);
  }
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)!=(0);
  if ($41) {
   $42 = $2;
   $43 = ((($42)) + 12|0);
   HEAP32[$43>>2] = 0;
  }
  $44 = $5;
  $45 = ($44|0)<(0);
  $46 = $45 << 31 >> 31;
  $47 = $2;
  $48 = ((($47)) + 16|0);
  $49 = $48;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + 4)|0;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  $55 = (_i64Add(($51|0),($54|0),($44|0),($46|0))|0);
  $56 = tempRet0;
  $57 = $48;
  $58 = $57;
  HEAP32[$58>>2] = $55;
  $59 = (($57) + 4)|0;
  $60 = $59;
  HEAP32[$60>>2] = $56;
  $61 = $5;
  $62 = $2;
  $63 = ((($62)) + 8|0);
  HEAP32[$63>>2] = $61;
  $1 = 0;
  $379 = $1;
  STACKTOP = sp;return ($379|0);
 }
 $64 = (_htell_478($21)|0);
 $65 = ($64|0)<(0);
 $66 = $65 << 31 >> 31;
 $67 = $9;
 $68 = $67;
 HEAP32[$68>>2] = $64;
 $69 = (($67) + 4)|0;
 $70 = $69;
 HEAP32[$70>>2] = $66;
 $71 = $2;
 $72 = HEAP32[$71>>2]|0;
 $73 = $72 >>> 31;
 $74 = ($73|0)!=(0);
 if ($74) {
  $75 = $2;
  $76 = ((($75)) + 60|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($77|0)!=(0|0);
  if ($78) {
   $79 = $2;
   $80 = (_inflate_gzip_block($79,0)|0);
   $5 = $80;
   $81 = $5;
   $82 = ($81|0)<(0);
   if ($82) {
    $83 = $2;
    $84 = HEAP32[$83>>2]|0;
    $85 = $84 & 65535;
    $86 = $85 | 1;
    $87 = HEAP32[$83>>2]|0;
    $88 = $86 & 65535;
    $89 = $87 & -65536;
    $90 = $89 | $88;
    HEAP32[$83>>2] = $90;
    $1 = -1;
    $379 = $1;
    STACKTOP = sp;return ($379|0);
   } else {
    $91 = $5;
    $92 = $2;
    $93 = ((($92)) + 8|0);
    HEAP32[$93>>2] = $91;
    $94 = $9;
    $95 = $94;
    $96 = HEAP32[$95>>2]|0;
    $97 = (($94) + 4)|0;
    $98 = $97;
    $99 = HEAP32[$98>>2]|0;
    $100 = $2;
    $101 = ((($100)) + 16|0);
    $102 = $101;
    $103 = $102;
    HEAP32[$103>>2] = $96;
    $104 = (($102) + 4)|0;
    $105 = $104;
    HEAP32[$105>>2] = $99;
    $1 = 0;
    $379 = $1;
    STACKTOP = sp;return ($379|0);
   }
  }
 }
 $106 = $2;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ($108|0)!=(0);
 if ($109) {
  $110 = $2;
  $111 = $9;
  $112 = $111;
  $113 = HEAP32[$112>>2]|0;
  $114 = (($111) + 4)|0;
  $115 = $114;
  $116 = HEAP32[$115>>2]|0;
  $117 = (_load_block_from_cache($110,$113,$116)|0);
  $118 = ($117|0)!=(0);
  if ($118) {
   $1 = 0;
   $379 = $1;
   STACKTOP = sp;return ($379|0);
  }
 }
 $119 = $2;
 $120 = ((($119)) + 44|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = (_hread_477($121,$3,18)|0);
 $5 = $122;
 $123 = $5;
 $124 = ($123|0)==(0);
 if ($124) {
  $125 = $2;
  $126 = ((($125)) + 8|0);
  HEAP32[$126>>2] = 0;
  $1 = 0;
  $379 = $1;
  STACKTOP = sp;return ($379|0);
 }
 $127 = $5;
 $128 = ($127|0)!=(18);
 if (!($128)) {
  $129 = (_check_header($3)|0);
  $10 = $129;
  $130 = ($129|0)==(-2);
  if (!($130)) {
   $139 = $10;
   $140 = ($139|0)==(-1);
   if (!($140)) {
    $286 = $5;
    $6 = $286;
    $287 = ((($3)) + 16|0);
    $288 = (_unpackInt16($287)|0);
    $289 = (($288) + 1)|0;
    $7 = $289;
    $290 = $2;
    $291 = ((($290)) + 36|0);
    $292 = HEAP32[$291>>2]|0;
    $4 = $292;
    $293 = $4;
    dest=$293; src=$3; stop=dest+18|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $294 = $7;
    $295 = (($294) - 18)|0;
    $8 = $295;
    $296 = $2;
    $297 = ((($296)) + 44|0);
    $298 = HEAP32[$297>>2]|0;
    $299 = $4;
    $300 = ((($299)) + 18|0);
    $301 = $8;
    $302 = (_hread_477($298,$300,$301)|0);
    $5 = $302;
    $303 = $5;
    $304 = $8;
    $305 = ($303|0)!=($304|0);
    if ($305) {
     $306 = $2;
     $307 = HEAP32[$306>>2]|0;
     $308 = $307 & 65535;
     $309 = $308 | 4;
     $310 = HEAP32[$306>>2]|0;
     $311 = $309 & 65535;
     $312 = $310 & -65536;
     $313 = $312 | $311;
     HEAP32[$306>>2] = $313;
     $1 = -1;
     $379 = $1;
     STACKTOP = sp;return ($379|0);
    }
    $314 = $5;
    $315 = $6;
    $316 = (($315) + ($314))|0;
    $6 = $316;
    $317 = $2;
    $318 = $7;
    $319 = (_inflate_block($317,$318)|0);
    $5 = $319;
    $320 = ($319|0)<(0);
    if ($320) {
     $321 = (3)>=(2);
     if ($321) {
      $322 = HEAP32[2410]|0;
      $323 = $5;
      HEAP32[$vararg_buffer3>>2] = 19221;
      $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
      HEAP32[$vararg_ptr6>>2] = $323;
      (_fprintf($322,19237,$vararg_buffer3)|0);
     }
     $324 = $2;
     $325 = HEAP32[$324>>2]|0;
     $326 = $325 & 65535;
     $327 = $326 | 1;
     $328 = HEAP32[$324>>2]|0;
     $329 = $327 & 65535;
     $330 = $328 & -65536;
     $331 = $330 | $329;
     HEAP32[$324>>2] = $331;
     $1 = -1;
     $379 = $1;
     STACKTOP = sp;return ($379|0);
    }
    $332 = $2;
    $333 = ((($332)) + 8|0);
    $334 = HEAP32[$333>>2]|0;
    $335 = ($334|0)!=(0);
    if ($335) {
     $336 = $2;
     $337 = ((($336)) + 12|0);
     HEAP32[$337>>2] = 0;
    }
    $338 = $9;
    $339 = $338;
    $340 = HEAP32[$339>>2]|0;
    $341 = (($338) + 4)|0;
    $342 = $341;
    $343 = HEAP32[$342>>2]|0;
    $344 = $2;
    $345 = ((($344)) + 16|0);
    $346 = $345;
    $347 = $346;
    HEAP32[$347>>2] = $340;
    $348 = (($346) + 4)|0;
    $349 = $348;
    HEAP32[$349>>2] = $343;
    $350 = $5;
    $351 = $2;
    $352 = ((($351)) + 8|0);
    HEAP32[$352>>2] = $350;
    $353 = $2;
    $354 = ((($353)) + 56|0);
    $355 = HEAP32[$354>>2]|0;
    $356 = ($355|0)!=(0);
    if ($356) {
     $357 = $2;
     (_bgzf_index_add_block($357)|0);
     $358 = $5;
     $359 = ($358|0)<(0);
     $360 = $359 << 31 >> 31;
     $361 = $2;
     $362 = ((($361)) + 52|0);
     $363 = HEAP32[$362>>2]|0;
     $364 = ((($363)) + 16|0);
     $365 = $364;
     $366 = $365;
     $367 = HEAP32[$366>>2]|0;
     $368 = (($365) + 4)|0;
     $369 = $368;
     $370 = HEAP32[$369>>2]|0;
     $371 = (_i64Add(($367|0),($370|0),($358|0),($360|0))|0);
     $372 = tempRet0;
     $373 = $364;
     $374 = $373;
     HEAP32[$374>>2] = $371;
     $375 = (($373) + 4)|0;
     $376 = $375;
     HEAP32[$376>>2] = $372;
    }
    $377 = $2;
    $378 = $6;
    _cache_block($377,$378);
    $1 = 0;
    $379 = $1;
    STACKTOP = sp;return ($379|0);
   }
   $141 = $2;
   $142 = ((($141)) + 36|0);
   $143 = HEAP32[$142>>2]|0;
   $11 = $143;
   $144 = $11;
   dest=$144; src=$3; stop=dest+18|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $145 = $2;
   $146 = ((($145)) + 44|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = $11;
   $149 = ((($148)) + 18|0);
   $150 = (_hread_477($147,$149,65262)|0);
   $151 = (($150) + 18)|0;
   $5 = $151;
   $12 = 10;
   $152 = ((($3)) + 3|0);
   $153 = HEAP8[$152>>0]|0;
   $154 = $153&255;
   $155 = $154 & 4;
   $156 = ($155|0)!=(0);
   if ($156) {
    $157 = $12;
    $158 = $11;
    $159 = (($158) + ($157)|0);
    $160 = (_unpackInt16($159)|0);
    $161 = (($160) + 2)|0;
    $162 = $12;
    $163 = (($162) + ($161))|0;
    $12 = $163;
   }
   $164 = ((($3)) + 3|0);
   $165 = HEAP8[$164>>0]|0;
   $166 = $165&255;
   $167 = $166 & 8;
   $168 = ($167|0)!=(0);
   L61: do {
    if ($168) {
     while(1) {
      $169 = $12;
      $170 = $5;
      $171 = ($169|0)<($170|0);
      $172 = $12;
      if (!($171)) {
       break;
      }
      $173 = $11;
      $174 = (($173) + ($172)|0);
      $175 = HEAP8[$174>>0]|0;
      $176 = $175&255;
      $177 = ($176|0)!=(0);
      $178 = $12;
      $179 = (($178) + 1)|0;
      $12 = $179;
      if (!($177)) {
       break L61;
      }
     }
     $180 = (($172) + 1)|0;
     $12 = $180;
    }
   } while(0);
   $181 = ((($3)) + 3|0);
   $182 = HEAP8[$181>>0]|0;
   $183 = $182&255;
   $184 = $183 & 16;
   $185 = ($184|0)!=(0);
   L67: do {
    if ($185) {
     while(1) {
      $186 = $12;
      $187 = $5;
      $188 = ($186|0)<($187|0);
      $189 = $12;
      if (!($188)) {
       break;
      }
      $190 = $11;
      $191 = (($190) + ($189)|0);
      $192 = HEAP8[$191>>0]|0;
      $193 = $192&255;
      $194 = ($193|0)!=(0);
      $195 = $12;
      $196 = (($195) + 1)|0;
      $12 = $196;
      if (!($194)) {
       break L67;
      }
     }
     $197 = (($189) + 1)|0;
     $12 = $197;
    }
   } while(0);
   $198 = ((($3)) + 3|0);
   $199 = HEAP8[$198>>0]|0;
   $200 = $199&255;
   $201 = $200 & 2;
   $202 = ($201|0)!=(0);
   if ($202) {
    $203 = $12;
    $204 = (($203) + 2)|0;
    $12 = $204;
   }
   $205 = $12;
   $206 = $5;
   $207 = ($205|0)>=($206|0);
   $208 = $2;
   $209 = HEAP32[$208>>2]|0;
   if ($207) {
    $210 = $209 & 65535;
    $211 = $210 | 2;
    $212 = HEAP32[$208>>2]|0;
    $213 = $211 & 65535;
    $214 = $212 & -65536;
    $215 = $214 | $213;
    HEAP32[$208>>2] = $215;
    $1 = -1;
    $379 = $1;
    STACKTOP = sp;return ($379|0);
   }
   $216 = $209 & 2147483647;
   $217 = $216 | -2147483648;
   HEAP32[$208>>2] = $217;
   $218 = (_calloc(1,56)|0);
   $219 = $2;
   $220 = ((($219)) + 60|0);
   HEAP32[$220>>2] = $218;
   $221 = $2;
   $222 = ((($221)) + 60|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = (_inflateInit2_($223,-15,18804,56)|0);
   $13 = $224;
   $225 = $13;
   $226 = ($225|0)!=(0);
   if ($226) {
    $227 = (3)>=(1);
    if ($227) {
     $228 = HEAP32[2410]|0;
     $229 = $13;
     $230 = $2;
     $231 = ((($230)) + 60|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = (_bgzf_zerr($229,$232)|0);
     HEAP32[$vararg_buffer>>2] = 19221;
     $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr2>>2] = $233;
     (_fprintf($228,19189,$vararg_buffer)|0);
    }
    $234 = $2;
    $235 = HEAP32[$234>>2]|0;
    $236 = $235 & 65535;
    $237 = $236 | 1;
    $238 = HEAP32[$234>>2]|0;
    $239 = $237 & 65535;
    $240 = $238 & -65536;
    $241 = $240 | $239;
    HEAP32[$234>>2] = $241;
    $1 = -1;
    $379 = $1;
    STACKTOP = sp;return ($379|0);
   }
   $242 = $5;
   $243 = $12;
   $244 = (($242) - ($243))|0;
   $245 = $2;
   $246 = ((($245)) + 60|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = ((($247)) + 4|0);
   HEAP32[$248>>2] = $244;
   $249 = $11;
   $250 = $12;
   $251 = (($249) + ($250)|0);
   $252 = $2;
   $253 = ((($252)) + 60|0);
   $254 = HEAP32[$253>>2]|0;
   HEAP32[$254>>2] = $251;
   $255 = $2;
   $256 = (_inflate_gzip_block($255,1)|0);
   $5 = $256;
   $257 = $5;
   $258 = ($257|0)<(0);
   if ($258) {
    $259 = $2;
    $260 = HEAP32[$259>>2]|0;
    $261 = $260 & 65535;
    $262 = $261 | 1;
    $263 = HEAP32[$259>>2]|0;
    $264 = $262 & 65535;
    $265 = $263 & -65536;
    $266 = $265 | $264;
    HEAP32[$259>>2] = $266;
    $1 = -1;
    $379 = $1;
    STACKTOP = sp;return ($379|0);
   }
   $267 = $5;
   $268 = $2;
   $269 = ((($268)) + 8|0);
   HEAP32[$269>>2] = $267;
   $270 = $9;
   $271 = $270;
   $272 = HEAP32[$271>>2]|0;
   $273 = (($270) + 4)|0;
   $274 = $273;
   $275 = HEAP32[$274>>2]|0;
   $276 = $2;
   $277 = ((($276)) + 16|0);
   $278 = $277;
   $279 = $278;
   HEAP32[$279>>2] = $272;
   $280 = (($278) + 4)|0;
   $281 = $280;
   HEAP32[$281>>2] = $275;
   $282 = $2;
   $283 = ((($282)) + 56|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = ($284|0)!=(0);
   if ($285) {
    $1 = -1;
    $379 = $1;
    STACKTOP = sp;return ($379|0);
   } else {
    $1 = 0;
    $379 = $1;
    STACKTOP = sp;return ($379|0);
   }
  }
 }
 $131 = $2;
 $132 = HEAP32[$131>>2]|0;
 $133 = $132 & 65535;
 $134 = $133 | 2;
 $135 = HEAP32[$131>>2]|0;
 $136 = $134 & 65535;
 $137 = $135 & -65536;
 $138 = $137 | $136;
 HEAP32[$131>>2] = $138;
 $1 = -1;
 $379 = $1;
 STACKTOP = sp;return ($379|0);
}
function _hread_477($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $9;
 $14 = $12;
 $15 = (($13) - ($14))|0;
 $6 = $15;
 $16 = $6;
 $17 = $5;
 $18 = ($16>>>0)>($17>>>0);
 if ($18) {
  $19 = $5;
  $6 = $19;
 }
 $20 = $4;
 $21 = $3;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $6;
 _memcpy(($20|0),($23|0),($24|0))|0;
 $25 = $6;
 $26 = $3;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($25)|0);
 HEAP32[$27>>2] = $29;
 $30 = $6;
 $31 = $5;
 $32 = ($30|0)==($31|0);
 if ($32) {
  $33 = $6;
  $39 = $33;
  STACKTOP = sp;return ($39|0);
 } else {
  $34 = $3;
  $35 = $4;
  $36 = $5;
  $37 = $6;
  $38 = (_hread2($34,$35,$36,$37)|0);
  $39 = $38;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _htell_478($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = $7;
 $11 = $9;
 $12 = (($10) - ($11))|0;
 $13 = (($4) + ($12))|0;
 STACKTOP = sp;return ($13|0);
}
function _inflate_gzip_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = 0;
 L1: while(1) {
  $7 = $4;
  $8 = ($7|0)!=(0);
  if ($8) {
   label = 8;
  } else {
   $9 = $3;
   $10 = ((($9)) + 60|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 16|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)!=(0);
   if ($14) {
    $15 = $3;
    $16 = ((($15)) + 44|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $3;
    $19 = ((($18)) + 36|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (_hread_477($17,$20,65280)|0);
    $22 = $3;
    $23 = ((($22)) + 60|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($24)) + 4|0);
    HEAP32[$25>>2] = $21;
    $26 = $3;
    $27 = ((($26)) + 60|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ((($28)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30>>>0)<=(0);
    $32 = $3;
    $33 = ((($32)) + 60|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($34)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    if ($31) {
     label = 5;
     break;
    }
    $37 = ($36|0)==(0);
    if ($37) {
     label = 20;
     break;
    }
    $38 = $3;
    $39 = ((($38)) + 36|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $3;
    $42 = ((($41)) + 60|0);
    $43 = HEAP32[$42>>2]|0;
    HEAP32[$43>>2] = $40;
   } else {
    label = 8;
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $4 = 0;
  }
  while(1) {
   $44 = $3;
   $45 = ((($44)) + 32|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $3;
   $48 = ((($47)) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($46) + ($49)|0);
   $51 = $3;
   $52 = ((($51)) + 60|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ((($53)) + 12|0);
   HEAP32[$54>>2] = $50;
   $55 = $3;
   $56 = ((($55)) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (65536 - ($57))|0;
   $59 = $3;
   $60 = ((($59)) + 60|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ((($61)) + 16|0);
   HEAP32[$62>>2] = $58;
   $63 = $3;
   $64 = ((($63)) + 60|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($65)) + 24|0);
   HEAP32[$66>>2] = 0;
   $67 = $3;
   $68 = ((($67)) + 60|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (_inflate($69,0)|0);
   $5 = $70;
   $71 = $5;
   $72 = ($71|0)==(-5);
   if (!($72)) {
    $73 = $5;
    $74 = ($73|0)<(0);
    if ($74) {
     label = 11;
     break L1;
    }
    $93 = $3;
    $94 = ((($93)) + 60|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ((($95)) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (65536 - ($97))|0;
    $6 = $98;
    $99 = $6;
    $100 = ($99|0)!=(0);
    if ($100) {
     label = 17;
     break L1;
    }
   }
   $102 = $3;
   $103 = ((($102)) + 60|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ((($104)) + 16|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ($106|0)==(0);
   if (!($107)) {
    break;
   }
  }
  $108 = $5;
  $109 = ($108|0)!=(1);
  if (!($109)) {
   label = 20;
   break;
  }
 }
 if ((label|0) == 5) {
  $2 = $36;
  $116 = $2;
  STACKTOP = sp;return ($116|0);
 }
 else if ((label|0) == 11) {
  $75 = (3)>=(1);
  if ($75) {
   $76 = HEAP32[2410]|0;
   $77 = $5;
   $78 = $5;
   $79 = ($78|0)==(-3);
   if ($79) {
    $80 = $3;
    $81 = ((($80)) + 60|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $82;
   } else {
    $83 = 0;
   }
   $84 = (_bgzf_zerr($77,$83)|0);
   HEAP32[$vararg_buffer>>2] = 19400;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $84;
   (_fprintf($76,19316,$vararg_buffer)|0);
  }
  $85 = $3;
  $86 = HEAP32[$85>>2]|0;
  $87 = $86 & 65535;
  $88 = $87 | 1;
  $89 = HEAP32[$85>>2]|0;
  $90 = $88 & 65535;
  $91 = $89 & -65536;
  $92 = $91 | $90;
  HEAP32[$85>>2] = $92;
  $2 = -1;
  $116 = $2;
  STACKTOP = sp;return ($116|0);
 }
 else if ((label|0) == 17) {
  $101 = $6;
  $2 = $101;
  $116 = $2;
  STACKTOP = sp;return ($116|0);
 }
 else if ((label|0) == 20) {
  $110 = $3;
  $111 = ((($110)) + 60|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ((($112)) + 16|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (65536 - ($114))|0;
  $2 = $115;
  $116 = $2;
  STACKTOP = sp;return ($116|0);
 }
 return (0)|0;
}
function _load_block_from_cache($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp + 8|0;
 $5 = sp;
 $4 = $0;
 $9 = $5;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $2;
 $13 = $4;
 $14 = ((($13)) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $8 = $15;
 $16 = $8;
 $17 = $5;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (_kh_get_cache($16,$19,$22)|0);
 $6 = $23;
 $24 = $6;
 $25 = $8;
 $26 = HEAP32[$25>>2]|0;
 $27 = ($24|0)==($26|0);
 if ($27) {
  $3 = 0;
  $89 = $3;
  STACKTOP = sp;return ($89|0);
 }
 $28 = $6;
 $29 = $8;
 $30 = ((($29)) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($28<<4)|0);
 $7 = $32;
 $33 = $4;
 $34 = ((($33)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $4;
  $38 = ((($37)) + 12|0);
  HEAP32[$38>>2] = 0;
 }
 $39 = $5;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + 4)|0;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = $4;
 $46 = ((($45)) + 16|0);
 $47 = $46;
 $48 = $47;
 HEAP32[$48>>2] = $41;
 $49 = (($47) + 4)|0;
 $50 = $49;
 HEAP32[$50>>2] = $44;
 $51 = $7;
 $52 = HEAP32[$51>>2]|0;
 $53 = $4;
 $54 = ((($53)) + 8|0);
 HEAP32[$54>>2] = $52;
 $55 = $4;
 $56 = ((($55)) + 32|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $7;
 $59 = ((($58)) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 _memcpy(($57|0),($60|0),65536)|0;
 $61 = $4;
 $62 = ((($61)) + 44|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $7;
 $65 = ((($64)) + 8|0);
 $66 = $65;
 $67 = $66;
 $68 = HEAP32[$67>>2]|0;
 $69 = (($66) + 4)|0;
 $70 = $69;
 $71 = HEAP32[$70>>2]|0;
 $72 = (_hseek($63,$68,0)|0);
 $73 = ($72|0)<(0);
 if ($73) {
  $74 = HEAP32[2410]|0;
  $75 = $7;
  $76 = ((($75)) + 8|0);
  $77 = $76;
  $78 = $77;
  $79 = HEAP32[$78>>2]|0;
  $80 = (($77) + 4)|0;
  $81 = $80;
  $82 = HEAP32[$81>>2]|0;
  $83 = $vararg_buffer;
  $84 = $83;
  HEAP32[$84>>2] = $79;
  $85 = (($83) + 4)|0;
  $86 = $85;
  HEAP32[$86>>2] = $82;
  (_fprintf($74,19375,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $87 = $7;
 $88 = HEAP32[$87>>2]|0;
 $3 = $88;
 $89 = $3;
 STACKTOP = sp;return ($89|0);
}
function _check_header($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)!=(31);
 if (!($6)) {
  $7 = $2;
  $8 = ((($7)) + 1|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = ($10|0)!=(139);
  if (!($11)) {
   $12 = $2;
   $13 = ((($12)) + 2|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14&255;
   $16 = ($15|0)!=(8);
   if (!($16)) {
    $17 = $2;
    $18 = ((($17)) + 3|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19&255;
    $21 = $20 & 4;
    $22 = ($21|0)!=(0);
    if ($22) {
     $23 = $2;
     $24 = ((($23)) + 10|0);
     $25 = (_unpackInt16($24)|0);
     $26 = ($25|0)==(6);
     if ($26) {
      $27 = $2;
      $28 = ((($27)) + 12|0);
      $29 = HEAP8[$28>>0]|0;
      $30 = $29&255;
      $31 = ($30|0)==(66);
      if ($31) {
       $32 = $2;
       $33 = ((($32)) + 13|0);
       $34 = HEAP8[$33>>0]|0;
       $35 = $34&255;
       $36 = ($35|0)==(67);
       if ($36) {
        $37 = $2;
        $38 = ((($37)) + 14|0);
        $39 = (_unpackInt16($38)|0);
        $40 = ($39|0)==(2);
        $41 = $40;
       } else {
        $41 = 0;
       }
      } else {
       $41 = 0;
      }
     } else {
      $41 = 0;
     }
    } else {
     $41 = 0;
    }
    $42 = $41 ? 0 : -1;
    $1 = $42;
    $43 = $1;
    STACKTOP = sp;return ($43|0);
   }
  }
 }
 $1 = -2;
 $43 = $1;
 STACKTOP = sp;return ($43|0);
}
function _unpackInt16($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $1;
 $6 = ((($5)) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 << 8;
 $10 = $4 | $9;
 STACKTOP = sp;return ($10|0);
}
function _inflate_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = sp + 40|0;
 $3 = $0;
 $4 = $1;
 $7 = ((($5)) + 32|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($5)) + 36|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($5)) + 24|0);
 HEAP32[$9>>2] = 0;
 $10 = $3;
 $11 = ((($10)) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 18|0);
 HEAP32[$5>>2] = $13;
 $14 = $4;
 $15 = (($14) - 16)|0;
 $16 = ((($5)) + 4|0);
 HEAP32[$16>>2] = $15;
 $17 = $3;
 $18 = ((($17)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($5)) + 12|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($5)) + 16|0);
 HEAP32[$21>>2] = 65536;
 $22 = (_inflateInit2_($5,-15,18804,56)|0);
 $6 = $22;
 $23 = $6;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = (3)>=(1);
  if ($25) {
   $26 = HEAP32[2410]|0;
   $27 = $6;
   $28 = (_bgzf_zerr($27,$5)|0);
   HEAP32[$vararg_buffer>>2] = 19302;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $28;
   (_fprintf($26,19269,$vararg_buffer)|0);
  }
  $29 = $3;
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 & 65535;
  $32 = $31 | 1;
  $33 = HEAP32[$29>>2]|0;
  $34 = $32 & 65535;
  $35 = $33 & -65536;
  $36 = $35 | $34;
  HEAP32[$29>>2] = $36;
  $2 = -1;
  $75 = $2;
  STACKTOP = sp;return ($75|0);
 }
 $37 = (_inflate($5,4)|0);
 $6 = $37;
 $38 = ($37|0)!=(1);
 if ($38) {
  $39 = (3)>=(1);
  if ($39) {
   $40 = HEAP32[2410]|0;
   $41 = $6;
   $42 = $6;
   $43 = ($42|0)==(-3);
   $$ = $43 ? $5 : 0;
   $44 = (_bgzf_zerr($41,$$)|0);
   HEAP32[$vararg_buffer2>>2] = 19302;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $44;
   (_fprintf($40,19316,$vararg_buffer2)|0);
  }
  $45 = (_inflateEnd($5)|0);
  $6 = $45;
  $46 = ($45|0)!=(0);
  $47 = (3)>=(2);
  $or$cond = $46 & $47;
  if ($or$cond) {
   $48 = HEAP32[2410]|0;
   $49 = $6;
   $50 = (_bgzf_zerr($49,0)|0);
   HEAP32[$vararg_buffer6>>2] = 19302;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $50;
   (_fprintf($48,19344,$vararg_buffer6)|0);
  }
  $51 = $3;
  $52 = HEAP32[$51>>2]|0;
  $53 = $52 & 65535;
  $54 = $53 | 1;
  $55 = HEAP32[$51>>2]|0;
  $56 = $54 & 65535;
  $57 = $55 & -65536;
  $58 = $57 | $56;
  HEAP32[$51>>2] = $58;
  $2 = -1;
  $75 = $2;
  STACKTOP = sp;return ($75|0);
 }
 $59 = (_inflateEnd($5)|0);
 $6 = $59;
 $60 = ($59|0)!=(0);
 if (!($60)) {
  $73 = ((($5)) + 20|0);
  $74 = HEAP32[$73>>2]|0;
  $2 = $74;
  $75 = $2;
  STACKTOP = sp;return ($75|0);
 }
 $61 = (3)>=(1);
 if ($61) {
  $62 = HEAP32[2410]|0;
  $63 = $6;
  $64 = (_bgzf_zerr($63,0)|0);
  HEAP32[$vararg_buffer10>>2] = 19302;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $64;
  (_fprintf($62,19344,$vararg_buffer10)|0);
 }
 $65 = $3;
 $66 = HEAP32[$65>>2]|0;
 $67 = $66 & 65535;
 $68 = $67 | 1;
 $69 = HEAP32[$65>>2]|0;
 $70 = $68 & 65535;
 $71 = $69 & -65536;
 $72 = $71 | $70;
 HEAP32[$65>>2] = $72;
 $2 = -1;
 $75 = $2;
 STACKTOP = sp;return ($75|0);
}
function _bgzf_index_add_block($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$5>>2] = $7;
 $8 = $2;
 $9 = ((($8)) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = ((($12)) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($11|0)>($16|0);
 if ($17) {
  $18 = $2;
  $19 = ((($18)) + 52|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  $22 = $2;
  $23 = ((($22)) + 52|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 4|0);
  HEAP32[$25>>2] = $21;
  $26 = $2;
  $27 = ((($26)) + 52|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -1)|0;
  HEAP32[$29>>2] = $31;
  $32 = $2;
  $33 = ((($32)) + 52|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $36 >> 1;
  $38 = $2;
  $39 = ((($38)) + 52|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $42 | $37;
  HEAP32[$41>>2] = $43;
  $44 = $2;
  $45 = ((($44)) + 52|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $48 >> 2;
  $50 = $2;
  $51 = ((($50)) + 52|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $54 | $49;
  HEAP32[$53>>2] = $55;
  $56 = $2;
  $57 = ((($56)) + 52|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($58)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $60 >> 4;
  $62 = $2;
  $63 = ((($62)) + 52|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $66 | $61;
  HEAP32[$65>>2] = $67;
  $68 = $2;
  $69 = ((($68)) + 52|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($70)) + 4|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $72 >> 8;
  $74 = $2;
  $75 = ((($74)) + 52|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($76)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $78 | $73;
  HEAP32[$77>>2] = $79;
  $80 = $2;
  $81 = ((($80)) + 52|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ((($82)) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $84 >> 16;
  $86 = $2;
  $87 = ((($86)) + 52|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ((($88)) + 4|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $90 | $85;
  HEAP32[$89>>2] = $91;
  $92 = $2;
  $93 = ((($92)) + 52|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ((($94)) + 4|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) + 1)|0;
  HEAP32[$95>>2] = $97;
  $98 = $2;
  $99 = ((($98)) + 52|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ((($100)) + 8|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $2;
  $104 = ((($103)) + 52|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ((($105)) + 4|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = $107<<4;
  $109 = (_realloc($102,$108)|0);
  $110 = $2;
  $111 = ((($110)) + 52|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ((($112)) + 8|0);
  HEAP32[$113>>2] = $109;
  $114 = $2;
  $115 = ((($114)) + 52|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ((($116)) + 8|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ($118|0)!=(0|0);
  if (!($119)) {
   $1 = -1;
   $169 = $1;
   STACKTOP = sp;return ($169|0);
  }
 }
 $120 = $2;
 $121 = ((($120)) + 52|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ((($122)) + 16|0);
 $124 = $123;
 $125 = $124;
 $126 = HEAP32[$125>>2]|0;
 $127 = (($124) + 4)|0;
 $128 = $127;
 $129 = HEAP32[$128>>2]|0;
 $130 = $2;
 $131 = ((($130)) + 52|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = HEAP32[$132>>2]|0;
 $134 = (($133) - 1)|0;
 $135 = $2;
 $136 = ((($135)) + 52|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = ((($137)) + 8|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = (($139) + ($134<<4)|0);
 $141 = $140;
 $142 = $141;
 HEAP32[$142>>2] = $126;
 $143 = (($141) + 4)|0;
 $144 = $143;
 HEAP32[$144>>2] = $129;
 $145 = $2;
 $146 = ((($145)) + 16|0);
 $147 = $146;
 $148 = $147;
 $149 = HEAP32[$148>>2]|0;
 $150 = (($147) + 4)|0;
 $151 = $150;
 $152 = HEAP32[$151>>2]|0;
 $153 = $2;
 $154 = ((($153)) + 52|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = HEAP32[$155>>2]|0;
 $157 = (($156) - 1)|0;
 $158 = $2;
 $159 = ((($158)) + 52|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = ((($160)) + 8|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = (($162) + ($157<<4)|0);
 $164 = ((($163)) + 8|0);
 $165 = $164;
 $166 = $165;
 HEAP32[$166>>2] = $149;
 $167 = (($165) + 4)|0;
 $168 = $167;
 HEAP32[$168>>2] = $152;
 $1 = 0;
 $169 = $1;
 STACKTOP = sp;return ($169|0);
}
function _cache_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 12|0;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = ((($8)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $7 = $10;
 $11 = $2;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (65536)>=($13|0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = $7;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 1)|0;
 $19 = $18<<16;
 $20 = $2;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($19>>>0)>($22>>>0);
 if ($23) {
  $5 = 0;
  while(1) {
   $24 = $5;
   $25 = $7;
   $26 = HEAP32[$25>>2]|0;
   $27 = ($24>>>0)<($26>>>0);
   if (!($27)) {
    break;
   }
   $28 = $5;
   $29 = $28 >>> 4;
   $30 = $7;
   $31 = ((($30)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + ($29<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $5;
   $36 = $35 & 15;
   $37 = $36 << 1;
   $38 = $34 >>> $37;
   $39 = $38 & 3;
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break;
   }
   $41 = $5;
   $42 = (($41) + 1)|0;
   $5 = $42;
  }
  $43 = $5;
  $44 = $7;
  $45 = HEAP32[$44>>2]|0;
  $46 = ($43>>>0)<($45>>>0);
  if ($46) {
   $47 = $5;
   $48 = $7;
   $49 = ((($48)) + 24|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + ($47<<4)|0);
   $52 = ((($51)) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   _free($53);
   $54 = $7;
   $55 = $5;
   _kh_del_cache($54,$55);
  }
 }
 $56 = $7;
 $57 = $2;
 $58 = ((($57)) + 16|0);
 $59 = $58;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = (($59) + 4)|0;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = (_kh_put_cache($56,$61,$64,$4)|0);
 $5 = $65;
 $66 = HEAP32[$4>>2]|0;
 $67 = ($66|0)==(0);
 if ($67) {
  STACKTOP = sp;return;
 }
 $68 = $5;
 $69 = $7;
 $70 = ((($69)) + 24|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($71) + ($68<<4)|0);
 $6 = $72;
 $73 = $2;
 $74 = ((($73)) + 8|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $6;
 HEAP32[$76>>2] = $75;
 $77 = $2;
 $78 = ((($77)) + 16|0);
 $79 = $78;
 $80 = $79;
 $81 = HEAP32[$80>>2]|0;
 $82 = (($79) + 4)|0;
 $83 = $82;
 $84 = HEAP32[$83>>2]|0;
 $85 = $3;
 $86 = ($85|0)<(0);
 $87 = $86 << 31 >> 31;
 $88 = (_i64Add(($81|0),($84|0),($85|0),($87|0))|0);
 $89 = tempRet0;
 $90 = $6;
 $91 = ((($90)) + 8|0);
 $92 = $91;
 $93 = $92;
 HEAP32[$93>>2] = $88;
 $94 = (($92) + 4)|0;
 $95 = $94;
 HEAP32[$95>>2] = $89;
 $96 = (_malloc(65536)|0);
 $97 = $6;
 $98 = ((($97)) + 4|0);
 HEAP32[$98>>2] = $96;
 $99 = $5;
 $100 = $7;
 $101 = ((($100)) + 24|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($102) + ($99<<4)|0);
 $104 = ((($103)) + 4|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = $2;
 $107 = ((($106)) + 32|0);
 $108 = HEAP32[$107>>2]|0;
 _memcpy(($105|0),($108|0),65536)|0;
 STACKTOP = sp;return;
}
function _kh_del_cache($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)!=($6|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $3;
 $9 = $8 >>> 4;
 $10 = $2;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($9<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 $16 = $15 & 15;
 $17 = $16 << 1;
 $18 = $14 >>> $17;
 $19 = $18 & 3;
 $20 = ($19|0)!=(0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $21 = $3;
 $22 = $21 & 15;
 $23 = $22 << 1;
 $24 = 1 << $23;
 $25 = $3;
 $26 = $25 >>> 4;
 $27 = $2;
 $28 = ((($27)) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + ($26<<2)|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 | $24;
 HEAP32[$30>>2] = $32;
 $33 = $2;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + -1)|0;
 HEAP32[$34>>2] = $36;
 STACKTOP = sp;return;
}
function _kh_put_cache($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp;
 $5 = $0;
 $15 = $6;
 $16 = $15;
 HEAP32[$16>>2] = $1;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $2;
 $7 = $3;
 $19 = $5;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $5;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($21>>>0)>=($24>>>0);
 do {
  if ($25) {
   $26 = $5;
   $27 = HEAP32[$26>>2]|0;
   $28 = $5;
   $29 = ((($28)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $30 << 1;
   $32 = ($27>>>0)>($31>>>0);
   $33 = $5;
   $34 = $5;
   $35 = HEAP32[$34>>2]|0;
   if ($32) {
    $36 = (($35) - 1)|0;
    $37 = (_kh_resize_cache($33,$36)|0);
    $38 = ($37|0)<(0);
    if (!($38)) {
     break;
    }
    $39 = $7;
    HEAP32[$39>>2] = -1;
    $40 = $5;
    $41 = HEAP32[$40>>2]|0;
    $4 = $41;
    $287 = $4;
    STACKTOP = sp;return ($287|0);
   } else {
    $42 = (($35) + 1)|0;
    $43 = (_kh_resize_cache($33,$42)|0);
    $44 = ($43|0)<(0);
    if (!($44)) {
     break;
    }
    $45 = $7;
    HEAP32[$45>>2] = -1;
    $46 = $5;
    $47 = HEAP32[$46>>2]|0;
    $4 = $47;
    $287 = $4;
    STACKTOP = sp;return ($287|0);
   }
  }
 } while(0);
 $48 = $5;
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) - 1)|0;
 $13 = $50;
 $14 = 0;
 $51 = $5;
 $52 = HEAP32[$51>>2]|0;
 $11 = $52;
 $8 = $52;
 $53 = $6;
 $54 = $53;
 $55 = HEAP32[$54>>2]|0;
 $56 = (($53) + 4)|0;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = (_bitshift64Lshr(($55|0),($58|0),33)|0);
 $60 = tempRet0;
 $61 = $6;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + 4)|0;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = $59 ^ $63;
 $68 = $60 ^ $66;
 $69 = $6;
 $70 = $69;
 $71 = HEAP32[$70>>2]|0;
 $72 = (($69) + 4)|0;
 $73 = $72;
 $74 = HEAP32[$73>>2]|0;
 $75 = (_bitshift64Shl(($71|0),($74|0),11)|0);
 $76 = tempRet0;
 $77 = $67 ^ $75;
 $68 ^ $76;
 $9 = $77;
 $78 = $9;
 $79 = $13;
 $80 = $78 & $79;
 $10 = $80;
 $81 = $10;
 $82 = $81 >>> 4;
 $83 = $5;
 $84 = ((($83)) + 16|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($85) + ($82<<2)|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $10;
 $89 = $88 & 15;
 $90 = $89 << 1;
 $91 = $87 >>> $90;
 $92 = $91 & 2;
 $93 = ($92|0)!=(0);
 $94 = $10;
 do {
  if ($93) {
   $8 = $94;
  } else {
   $12 = $94;
   while(1) {
    $95 = $10;
    $96 = $95 >>> 4;
    $97 = $5;
    $98 = ((($97)) + 16|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = (($99) + ($96<<2)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $10;
    $103 = $102 & 15;
    $104 = $103 << 1;
    $105 = $101 >>> $104;
    $106 = $105 & 2;
    $107 = ($106|0)!=(0);
    if ($107) {
     break;
    }
    $108 = $10;
    $109 = $108 >>> 4;
    $110 = $5;
    $111 = ((($110)) + 16|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = (($112) + ($109<<2)|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = $10;
    $116 = $115 & 15;
    $117 = $116 << 1;
    $118 = $114 >>> $117;
    $119 = $118 & 1;
    $120 = ($119|0)!=(0);
    if (!($120)) {
     $121 = $10;
     $122 = $5;
     $123 = ((($122)) + 20|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = (($124) + ($121<<3)|0);
     $126 = $125;
     $127 = $126;
     $128 = HEAP32[$127>>2]|0;
     $129 = (($126) + 4)|0;
     $130 = $129;
     $131 = HEAP32[$130>>2]|0;
     $132 = $6;
     $133 = $132;
     $134 = HEAP32[$133>>2]|0;
     $135 = (($132) + 4)|0;
     $136 = $135;
     $137 = HEAP32[$136>>2]|0;
     $138 = ($128|0)==($134|0);
     $139 = ($131|0)==($137|0);
     $140 = $138 & $139;
     $141 = $140 ^ 1;
     if (!($141)) {
      break;
     }
    }
    $142 = $10;
    $143 = $142 >>> 4;
    $144 = $5;
    $145 = ((($144)) + 16|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = (($146) + ($143<<2)|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = $10;
    $150 = $149 & 15;
    $151 = $150 << 1;
    $152 = $148 >>> $151;
    $153 = $152 & 1;
    $154 = ($153|0)!=(0);
    if ($154) {
     $155 = $10;
     $11 = $155;
    }
    $156 = $10;
    $157 = $14;
    $158 = (($157) + 1)|0;
    $14 = $158;
    $159 = (($156) + ($158))|0;
    $160 = $13;
    $161 = $159 & $160;
    $10 = $161;
    $162 = $10;
    $163 = $12;
    $164 = ($162|0)==($163|0);
    if ($164) {
     label = 16;
     break;
    }
   }
   if ((label|0) == 16) {
    $165 = $11;
    $8 = $165;
   }
   $166 = $8;
   $167 = $5;
   $168 = HEAP32[$167>>2]|0;
   $169 = ($166|0)==($168|0);
   if ($169) {
    $170 = $10;
    $171 = $170 >>> 4;
    $172 = $5;
    $173 = ((($172)) + 16|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = (($174) + ($171<<2)|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = $10;
    $178 = $177 & 15;
    $179 = $178 << 1;
    $180 = $176 >>> $179;
    $181 = $180 & 2;
    $182 = ($181|0)!=(0);
    if ($182) {
     $183 = $11;
     $184 = $5;
     $185 = HEAP32[$184>>2]|0;
     $186 = ($183|0)!=($185|0);
     if ($186) {
      $187 = $11;
      $8 = $187;
      break;
     }
    }
    $188 = $10;
    $8 = $188;
   }
  }
 } while(0);
 $189 = $8;
 $190 = $189 >>> 4;
 $191 = $5;
 $192 = ((($191)) + 16|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = (($193) + ($190<<2)|0);
 $195 = HEAP32[$194>>2]|0;
 $196 = $8;
 $197 = $196 & 15;
 $198 = $197 << 1;
 $199 = $195 >>> $198;
 $200 = $199 & 2;
 $201 = ($200|0)!=(0);
 do {
  if ($201) {
   $202 = $6;
   $203 = $202;
   $204 = HEAP32[$203>>2]|0;
   $205 = (($202) + 4)|0;
   $206 = $205;
   $207 = HEAP32[$206>>2]|0;
   $208 = $8;
   $209 = $5;
   $210 = ((($209)) + 20|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = (($211) + ($208<<3)|0);
   $213 = $212;
   $214 = $213;
   HEAP32[$214>>2] = $204;
   $215 = (($213) + 4)|0;
   $216 = $215;
   HEAP32[$216>>2] = $207;
   $217 = $8;
   $218 = $217 & 15;
   $219 = $218 << 1;
   $220 = 3 << $219;
   $221 = $220 ^ -1;
   $222 = $8;
   $223 = $222 >>> 4;
   $224 = $5;
   $225 = ((($224)) + 16|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = (($226) + ($223<<2)|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = $228 & $221;
   HEAP32[$227>>2] = $229;
   $230 = $5;
   $231 = ((($230)) + 4|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = (($232) + 1)|0;
   HEAP32[$231>>2] = $233;
   $234 = $5;
   $235 = ((($234)) + 8|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = (($236) + 1)|0;
   HEAP32[$235>>2] = $237;
   $238 = $7;
   HEAP32[$238>>2] = 1;
  } else {
   $239 = $8;
   $240 = $239 >>> 4;
   $241 = $5;
   $242 = ((($241)) + 16|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = (($243) + ($240<<2)|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = $8;
   $247 = $246 & 15;
   $248 = $247 << 1;
   $249 = $245 >>> $248;
   $250 = $249 & 1;
   $251 = ($250|0)!=(0);
   if ($251) {
    $252 = $6;
    $253 = $252;
    $254 = HEAP32[$253>>2]|0;
    $255 = (($252) + 4)|0;
    $256 = $255;
    $257 = HEAP32[$256>>2]|0;
    $258 = $8;
    $259 = $5;
    $260 = ((($259)) + 20|0);
    $261 = HEAP32[$260>>2]|0;
    $262 = (($261) + ($258<<3)|0);
    $263 = $262;
    $264 = $263;
    HEAP32[$264>>2] = $254;
    $265 = (($263) + 4)|0;
    $266 = $265;
    HEAP32[$266>>2] = $257;
    $267 = $8;
    $268 = $267 & 15;
    $269 = $268 << 1;
    $270 = 3 << $269;
    $271 = $270 ^ -1;
    $272 = $8;
    $273 = $272 >>> 4;
    $274 = $5;
    $275 = ((($274)) + 16|0);
    $276 = HEAP32[$275>>2]|0;
    $277 = (($276) + ($273<<2)|0);
    $278 = HEAP32[$277>>2]|0;
    $279 = $278 & $271;
    HEAP32[$277>>2] = $279;
    $280 = $5;
    $281 = ((($280)) + 4|0);
    $282 = HEAP32[$281>>2]|0;
    $283 = (($282) + 1)|0;
    HEAP32[$281>>2] = $283;
    $284 = $7;
    HEAP32[$284>>2] = 2;
    break;
   } else {
    $285 = $7;
    HEAP32[$285>>2] = 0;
    break;
   }
  }
 } while(0);
 $286 = $8;
 $4 = $286;
 $287 = $4;
 STACKTOP = sp;return ($287|0);
}
function _kh_resize_cache($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $9 = sp + 40|0;
 $10 = sp + 24|0;
 $15 = sp + 16|0;
 $16 = sp;
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = 1;
 $17 = $4;
 $18 = (($17) + -1)|0;
 $4 = $18;
 $19 = $4;
 $20 = $19 >>> 1;
 $21 = $4;
 $22 = $21 | $20;
 $4 = $22;
 $23 = $4;
 $24 = $23 >>> 2;
 $25 = $4;
 $26 = $25 | $24;
 $4 = $26;
 $27 = $4;
 $28 = $27 >>> 4;
 $29 = $4;
 $30 = $29 | $28;
 $4 = $30;
 $31 = $4;
 $32 = $31 >>> 8;
 $33 = $4;
 $34 = $33 | $32;
 $4 = $34;
 $35 = $4;
 $36 = $35 >>> 16;
 $37 = $4;
 $38 = $37 | $36;
 $4 = $38;
 $39 = $4;
 $40 = (($39) + 1)|0;
 $4 = $40;
 $41 = $4;
 $42 = ($41>>>0)<(4);
 $$ = $42 ? 4 : $40;
 $4 = $$;
 $43 = $3;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $4;
 $47 = (+($46>>>0));
 $48 = $47 * 0.77000000000000001;
 $49 = $48 + 0.5;
 $50 = (~~(($49))>>>0);
 $51 = ($45>>>0)>=($50>>>0);
 do {
  if ($51) {
   $6 = 0;
  } else {
   $52 = $4;
   $53 = ($52>>>0)<(16);
   $54 = $4;
   $55 = $54 >>> 4;
   $56 = $53 ? 1 : $55;
   $57 = $56<<2;
   $58 = (_malloc($57)|0);
   $5 = $58;
   $59 = $5;
   $60 = ($59|0)!=(0|0);
   if (!($60)) {
    $2 = -1;
    $347 = $2;
    STACKTOP = sp;return ($347|0);
   }
   $61 = $5;
   $62 = $4;
   $63 = ($62>>>0)<(16);
   $64 = $4;
   $65 = $64 >>> 4;
   $66 = $63 ? 1 : $65;
   $67 = $66<<2;
   _memset(($61|0),-86,($67|0))|0;
   $68 = $3;
   $69 = HEAP32[$68>>2]|0;
   $70 = $4;
   $71 = ($69>>>0)<($70>>>0);
   if ($71) {
    $72 = $3;
    $73 = ((($72)) + 20|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $4;
    $76 = $75<<3;
    $77 = (_realloc($74,$76)|0);
    $7 = $77;
    $78 = $7;
    $79 = ($78|0)!=(0|0);
    if (!($79)) {
     $80 = $5;
     _free($80);
     $2 = -1;
     $347 = $2;
     STACKTOP = sp;return ($347|0);
    }
    $81 = $7;
    $82 = $3;
    $83 = ((($82)) + 20|0);
    HEAP32[$83>>2] = $81;
    $84 = $3;
    $85 = ((($84)) + 24|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $4;
    $88 = $87<<4;
    $89 = (_realloc($86,$88)|0);
    $8 = $89;
    $90 = $8;
    $91 = ($90|0)!=(0|0);
    if ($91) {
     $93 = $8;
     $94 = $3;
     $95 = ((($94)) + 24|0);
     HEAP32[$95>>2] = $93;
     break;
    }
    $92 = $5;
    _free($92);
    $2 = -1;
    $347 = $2;
    STACKTOP = sp;return ($347|0);
   }
  }
 } while(0);
 $96 = $6;
 $97 = ($96|0)!=(0);
 if ($97) {
  $6 = 0;
  while(1) {
   $98 = $6;
   $99 = $3;
   $100 = HEAP32[$99>>2]|0;
   $101 = ($98|0)!=($100|0);
   if (!($101)) {
    break;
   }
   $102 = $6;
   $103 = $102 >>> 4;
   $104 = $3;
   $105 = ((($104)) + 16|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + ($103<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $6;
   $110 = $109 & 15;
   $111 = $110 << 1;
   $112 = $108 >>> $111;
   $113 = $112 & 3;
   $114 = ($113|0)==(0);
   if ($114) {
    $115 = $6;
    $116 = $3;
    $117 = ((($116)) + 20|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (($118) + ($115<<3)|0);
    $120 = $119;
    $121 = $120;
    $122 = HEAP32[$121>>2]|0;
    $123 = (($120) + 4)|0;
    $124 = $123;
    $125 = HEAP32[$124>>2]|0;
    $126 = $9;
    $127 = $126;
    HEAP32[$127>>2] = $122;
    $128 = (($126) + 4)|0;
    $129 = $128;
    HEAP32[$129>>2] = $125;
    $130 = $4;
    $131 = (($130) - 1)|0;
    $11 = $131;
    $132 = $6;
    $133 = $3;
    $134 = ((($133)) + 24|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + ($132<<4)|0);
    ;HEAP32[$10>>2]=HEAP32[$136>>2]|0;HEAP32[$10+4>>2]=HEAP32[$136+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$136+8>>2]|0;HEAP32[$10+12>>2]=HEAP32[$136+12>>2]|0;
    $137 = $6;
    $138 = $137 & 15;
    $139 = $138 << 1;
    $140 = 1 << $139;
    $141 = $6;
    $142 = $141 >>> 4;
    $143 = $3;
    $144 = ((($143)) + 16|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (($145) + ($142<<2)|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = $147 | $140;
    HEAP32[$146>>2] = $148;
    while(1) {
     $14 = 0;
     $149 = $9;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $152 = (($149) + 4)|0;
     $153 = $152;
     $154 = HEAP32[$153>>2]|0;
     $155 = (_bitshift64Lshr(($151|0),($154|0),33)|0);
     $156 = tempRet0;
     $157 = $9;
     $158 = $157;
     $159 = HEAP32[$158>>2]|0;
     $160 = (($157) + 4)|0;
     $161 = $160;
     $162 = HEAP32[$161>>2]|0;
     $163 = $155 ^ $159;
     $164 = $156 ^ $162;
     $165 = $9;
     $166 = $165;
     $167 = HEAP32[$166>>2]|0;
     $168 = (($165) + 4)|0;
     $169 = $168;
     $170 = HEAP32[$169>>2]|0;
     $171 = (_bitshift64Shl(($167|0),($170|0),11)|0);
     $172 = tempRet0;
     $173 = $163 ^ $171;
     $164 ^ $172;
     $12 = $173;
     $174 = $12;
     $175 = $11;
     $176 = $174 & $175;
     $13 = $176;
     while(1) {
      $177 = $13;
      $178 = $177 >>> 4;
      $179 = $5;
      $180 = (($179) + ($178<<2)|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = $13;
      $183 = $182 & 15;
      $184 = $183 << 1;
      $185 = $181 >>> $184;
      $186 = $185 & 2;
      $187 = ($186|0)!=(0);
      $188 = $187 ^ 1;
      $189 = $13;
      if (!($188)) {
       break;
      }
      $190 = $14;
      $191 = (($190) + 1)|0;
      $14 = $191;
      $192 = (($189) + ($191))|0;
      $193 = $11;
      $194 = $192 & $193;
      $13 = $194;
     }
     $195 = $189 & 15;
     $196 = $195 << 1;
     $197 = 2 << $196;
     $198 = $197 ^ -1;
     $199 = $13;
     $200 = $199 >>> 4;
     $201 = $5;
     $202 = (($201) + ($200<<2)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = $203 & $198;
     HEAP32[$202>>2] = $204;
     $205 = $13;
     $206 = $3;
     $207 = HEAP32[$206>>2]|0;
     $208 = ($205>>>0)<($207>>>0);
     if (!($208)) {
      break;
     }
     $209 = $13;
     $210 = $209 >>> 4;
     $211 = $3;
     $212 = ((($211)) + 16|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = (($213) + ($210<<2)|0);
     $215 = HEAP32[$214>>2]|0;
     $216 = $13;
     $217 = $216 & 15;
     $218 = $217 << 1;
     $219 = $215 >>> $218;
     $220 = $219 & 3;
     $221 = ($220|0)==(0);
     if (!($221)) {
      break;
     }
     $222 = $13;
     $223 = $3;
     $224 = ((($223)) + 20|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = (($225) + ($222<<3)|0);
     $227 = $226;
     $228 = $227;
     $229 = HEAP32[$228>>2]|0;
     $230 = (($227) + 4)|0;
     $231 = $230;
     $232 = HEAP32[$231>>2]|0;
     $233 = $15;
     $234 = $233;
     HEAP32[$234>>2] = $229;
     $235 = (($233) + 4)|0;
     $236 = $235;
     HEAP32[$236>>2] = $232;
     $237 = $9;
     $238 = $237;
     $239 = HEAP32[$238>>2]|0;
     $240 = (($237) + 4)|0;
     $241 = $240;
     $242 = HEAP32[$241>>2]|0;
     $243 = $13;
     $244 = $3;
     $245 = ((($244)) + 20|0);
     $246 = HEAP32[$245>>2]|0;
     $247 = (($246) + ($243<<3)|0);
     $248 = $247;
     $249 = $248;
     HEAP32[$249>>2] = $239;
     $250 = (($248) + 4)|0;
     $251 = $250;
     HEAP32[$251>>2] = $242;
     $252 = $15;
     $253 = $252;
     $254 = HEAP32[$253>>2]|0;
     $255 = (($252) + 4)|0;
     $256 = $255;
     $257 = HEAP32[$256>>2]|0;
     $258 = $9;
     $259 = $258;
     HEAP32[$259>>2] = $254;
     $260 = (($258) + 4)|0;
     $261 = $260;
     HEAP32[$261>>2] = $257;
     $262 = $13;
     $263 = $3;
     $264 = ((($263)) + 24|0);
     $265 = HEAP32[$264>>2]|0;
     $266 = (($265) + ($262<<4)|0);
     ;HEAP32[$16>>2]=HEAP32[$266>>2]|0;HEAP32[$16+4>>2]=HEAP32[$266+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$266+8>>2]|0;HEAP32[$16+12>>2]=HEAP32[$266+12>>2]|0;
     $267 = $13;
     $268 = $3;
     $269 = ((($268)) + 24|0);
     $270 = HEAP32[$269>>2]|0;
     $271 = (($270) + ($267<<4)|0);
     ;HEAP32[$271>>2]=HEAP32[$10>>2]|0;HEAP32[$271+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$271+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$271+12>>2]=HEAP32[$10+12>>2]|0;
     ;HEAP32[$10>>2]=HEAP32[$16>>2]|0;HEAP32[$10+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$10+12>>2]=HEAP32[$16+12>>2]|0;
     $272 = $13;
     $273 = $272 & 15;
     $274 = $273 << 1;
     $275 = 1 << $274;
     $276 = $13;
     $277 = $276 >>> 4;
     $278 = $3;
     $279 = ((($278)) + 16|0);
     $280 = HEAP32[$279>>2]|0;
     $281 = (($280) + ($277<<2)|0);
     $282 = HEAP32[$281>>2]|0;
     $283 = $282 | $275;
     HEAP32[$281>>2] = $283;
    }
    $284 = $9;
    $285 = $284;
    $286 = HEAP32[$285>>2]|0;
    $287 = (($284) + 4)|0;
    $288 = $287;
    $289 = HEAP32[$288>>2]|0;
    $290 = $13;
    $291 = $3;
    $292 = ((($291)) + 20|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = (($293) + ($290<<3)|0);
    $295 = $294;
    $296 = $295;
    HEAP32[$296>>2] = $286;
    $297 = (($295) + 4)|0;
    $298 = $297;
    HEAP32[$298>>2] = $289;
    $299 = $13;
    $300 = $3;
    $301 = ((($300)) + 24|0);
    $302 = HEAP32[$301>>2]|0;
    $303 = (($302) + ($299<<4)|0);
    ;HEAP32[$303>>2]=HEAP32[$10>>2]|0;HEAP32[$303+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$303+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$303+12>>2]=HEAP32[$10+12>>2]|0;
   }
   $304 = $6;
   $305 = (($304) + 1)|0;
   $6 = $305;
  }
  $306 = $3;
  $307 = HEAP32[$306>>2]|0;
  $308 = $4;
  $309 = ($307>>>0)>($308>>>0);
  if ($309) {
   $310 = $3;
   $311 = ((($310)) + 20|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = $4;
   $314 = $313<<3;
   $315 = (_realloc($312,$314)|0);
   $316 = $3;
   $317 = ((($316)) + 20|0);
   HEAP32[$317>>2] = $315;
   $318 = $3;
   $319 = ((($318)) + 24|0);
   $320 = HEAP32[$319>>2]|0;
   $321 = $4;
   $322 = $321<<4;
   $323 = (_realloc($320,$322)|0);
   $324 = $3;
   $325 = ((($324)) + 24|0);
   HEAP32[$325>>2] = $323;
  }
  $326 = $3;
  $327 = ((($326)) + 16|0);
  $328 = HEAP32[$327>>2]|0;
  _free($328);
  $329 = $5;
  $330 = $3;
  $331 = ((($330)) + 16|0);
  HEAP32[$331>>2] = $329;
  $332 = $4;
  $333 = $3;
  HEAP32[$333>>2] = $332;
  $334 = $3;
  $335 = ((($334)) + 4|0);
  $336 = HEAP32[$335>>2]|0;
  $337 = $3;
  $338 = ((($337)) + 8|0);
  HEAP32[$338>>2] = $336;
  $339 = $3;
  $340 = HEAP32[$339>>2]|0;
  $341 = (+($340>>>0));
  $342 = $341 * 0.77000000000000001;
  $343 = $342 + 0.5;
  $344 = (~~(($343))>>>0);
  $345 = $3;
  $346 = ((($345)) + 12|0);
  HEAP32[$346>>2] = $344;
 }
 $2 = 0;
 $347 = $2;
 STACKTOP = sp;return ($347|0);
}
function _kh_get_cache($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp;
 $4 = $0;
 $11 = $5;
 $12 = $11;
 HEAP32[$12>>2] = $1;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $2;
 $15 = $4;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $3 = 0;
  $124 = $3;
  STACKTOP = sp;return ($124|0);
 }
 $10 = 0;
 $18 = $4;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) - 1)|0;
 $9 = $20;
 $21 = $5;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) + 4)|0;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (_bitshift64Lshr(($23|0),($26|0),33)|0);
 $28 = tempRet0;
 $29 = $5;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($29) + 4)|0;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = $27 ^ $31;
 $36 = $28 ^ $34;
 $37 = $5;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = (($37) + 4)|0;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = (_bitshift64Shl(($39|0),($42|0),11)|0);
 $44 = tempRet0;
 $45 = $35 ^ $43;
 $36 ^ $44;
 $6 = $45;
 $46 = $6;
 $47 = $9;
 $48 = $46 & $47;
 $7 = $48;
 $49 = $7;
 $8 = $49;
 while(1) {
  $50 = $7;
  $51 = $50 >>> 4;
  $52 = $4;
  $53 = ((($52)) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($51<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $7;
  $58 = $57 & 15;
  $59 = $58 << 1;
  $60 = $56 >>> $59;
  $61 = $60 & 2;
  $62 = ($61|0)!=(0);
  if ($62) {
   $125 = 0;
  } else {
   $63 = $7;
   $64 = $63 >>> 4;
   $65 = $4;
   $66 = ((($65)) + 16|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($67) + ($64<<2)|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $7;
   $71 = $70 & 15;
   $72 = $71 << 1;
   $73 = $69 >>> $72;
   $74 = $73 & 1;
   $75 = ($74|0)!=(0);
   if ($75) {
    $125 = 1;
   } else {
    $76 = $7;
    $77 = $4;
    $78 = ((($77)) + 20|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (($79) + ($76<<3)|0);
    $81 = $80;
    $82 = $81;
    $83 = HEAP32[$82>>2]|0;
    $84 = (($81) + 4)|0;
    $85 = $84;
    $86 = HEAP32[$85>>2]|0;
    $87 = $5;
    $88 = $87;
    $89 = HEAP32[$88>>2]|0;
    $90 = (($87) + 4)|0;
    $91 = $90;
    $92 = HEAP32[$91>>2]|0;
    $93 = ($83|0)==($89|0);
    $94 = ($86|0)==($92|0);
    $95 = $93 & $94;
    $96 = $95 ^ 1;
    $125 = $96;
   }
  }
  $97 = $7;
  if (!($125)) {
   break;
  }
  $98 = $10;
  $99 = (($98) + 1)|0;
  $10 = $99;
  $100 = (($97) + ($99))|0;
  $101 = $9;
  $102 = $100 & $101;
  $7 = $102;
  $103 = $7;
  $104 = $8;
  $105 = ($103|0)==($104|0);
  if ($105) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  $106 = $4;
  $107 = HEAP32[$106>>2]|0;
  $3 = $107;
  $124 = $3;
  STACKTOP = sp;return ($124|0);
 }
 $108 = $97 >>> 4;
 $109 = $4;
 $110 = ((($109)) + 16|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = (($111) + ($108<<2)|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = $7;
 $115 = $114 & 15;
 $116 = $115 << 1;
 $117 = $113 >>> $116;
 $118 = $117 & 3;
 $119 = ($118|0)!=(0);
 if ($119) {
  $120 = $4;
  $121 = HEAP32[$120>>2]|0;
  $123 = $121;
 } else {
  $122 = $7;
  $123 = $122;
 }
 $3 = $123;
 $124 = $3;
 STACKTOP = sp;return ($124|0);
}
function _bgzf_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $13 = $5;
 $8 = $13;
 $14 = $6;
 $15 = ($14>>>0)<=(0);
 if ($15) {
  $3 = 0;
  $131 = $3;
  STACKTOP = sp;return ($131|0);
 }
 $16 = $4;
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 >>> 16;
 $19 = $18 & 3;
 $20 = ($19|0)==(0);
 if (!($20)) {
  ___assert_fail((19419|0),(18787|0),690,(19437|0));
  // unreachable;
 }
 while(1) {
  $21 = $7;
  $22 = $6;
  $23 = ($21>>>0)<($22>>>0);
  if (!($23)) {
   label = 17;
   break;
  }
  $24 = $4;
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $4;
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($26) - ($29))|0;
  $10 = $30;
  $31 = $10;
  $32 = ($31|0)<=(0);
  if ($32) {
   $33 = $4;
   $34 = (_bgzf_read_block($33)|0);
   $12 = $34;
   $35 = $12;
   $36 = ($35|0)!=(0);
   if ($36) {
    label = 9;
    break;
   }
   $50 = $4;
   $51 = ((($50)) + 8|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $4;
   $54 = ((($53)) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($52) - ($55))|0;
   $10 = $56;
   $57 = $10;
   $58 = ($57|0)<=(0);
   if ($58) {
    label = 17;
    break;
   }
  }
  $59 = $6;
  $60 = $7;
  $61 = (($59) - ($60))|0;
  $62 = $10;
  $63 = ($61>>>0)<($62>>>0);
  if ($63) {
   $64 = $6;
   $65 = $7;
   $66 = (($64) - ($65))|0;
   $68 = $66;
  } else {
   $67 = $10;
   $68 = $67;
  }
  $9 = $68;
  $69 = $4;
  $70 = ((($69)) + 32|0);
  $71 = HEAP32[$70>>2]|0;
  $11 = $71;
  $72 = $8;
  $73 = $11;
  $74 = $4;
  $75 = ((($74)) + 12|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($73) + ($76)|0);
  $78 = $9;
  _memcpy(($72|0),($77|0),($78|0))|0;
  $79 = $9;
  $80 = $4;
  $81 = ((($80)) + 12|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($82) + ($79))|0;
  HEAP32[$81>>2] = $83;
  $84 = $9;
  $85 = $8;
  $86 = (($85) + ($84)|0);
  $8 = $86;
  $87 = $9;
  $88 = $7;
  $89 = (($88) + ($87))|0;
  $7 = $89;
 }
 if ((label|0) == 9) {
  $37 = (3)>=(2);
  if ($37) {
   $38 = HEAP32[2410]|0;
   $39 = $12;
   $40 = $7;
   $41 = $6;
   HEAP32[$vararg_buffer>>2] = 19437;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $39;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $40;
   $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $41;
   (_fprintf($38,19447,$vararg_buffer)|0);
  }
  $42 = $4;
  $43 = HEAP32[$42>>2]|0;
  $44 = $43 & 65535;
  $45 = $44 | 1;
  $46 = HEAP32[$42>>2]|0;
  $47 = $45 & 65535;
  $48 = $46 & -65536;
  $49 = $48 | $47;
  HEAP32[$42>>2] = $49;
  $3 = -1;
  $131 = $3;
  STACKTOP = sp;return ($131|0);
 }
 else if ((label|0) == 17) {
  $90 = $4;
  $91 = ((($90)) + 12|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $4;
  $94 = ((($93)) + 8|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ($92|0)==($95|0);
  if ($96) {
   $97 = $4;
   $98 = ((($97)) + 44|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = (_htell_478($99)|0);
   $101 = ($100|0)<(0);
   $102 = $101 << 31 >> 31;
   $103 = $4;
   $104 = ((($103)) + 16|0);
   $105 = $104;
   $106 = $105;
   HEAP32[$106>>2] = $100;
   $107 = (($105) + 4)|0;
   $108 = $107;
   HEAP32[$108>>2] = $102;
   $109 = $4;
   $110 = ((($109)) + 8|0);
   HEAP32[$110>>2] = 0;
   $111 = $4;
   $112 = ((($111)) + 12|0);
   HEAP32[$112>>2] = 0;
  }
  $113 = $7;
  $114 = ($113|0)<(0);
  $115 = $114 << 31 >> 31;
  $116 = $4;
  $117 = ((($116)) + 24|0);
  $118 = $117;
  $119 = $118;
  $120 = HEAP32[$119>>2]|0;
  $121 = (($118) + 4)|0;
  $122 = $121;
  $123 = HEAP32[$122>>2]|0;
  $124 = (_i64Add(($120|0),($123|0),($113|0),($115|0))|0);
  $125 = tempRet0;
  $126 = $117;
  $127 = $126;
  HEAP32[$127>>2] = $124;
  $128 = (($126) + 4)|0;
  $129 = $128;
  HEAP32[$129>>2] = $125;
  $130 = $7;
  $3 = $130;
  $131 = $3;
  STACKTOP = sp;return ($131|0);
 }
 return (0)|0;
}
function _bgzf_mt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 >>> 16;
 $13 = $12 & 3;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $4;
  $16 = ((($15)) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  $19 = $5;
  $20 = ($19|0)<=(1);
  $or$cond = $18 | $20;
  if (!($or$cond)) {
   $21 = (_calloc(1,112)|0);
   $8 = $21;
   $22 = $5;
   $23 = $8;
   HEAP32[$23>>2] = $22;
   $24 = $5;
   $25 = $6;
   $26 = Math_imul($24, $25)|0;
   $27 = $8;
   $28 = ((($27)) + 4|0);
   HEAP32[$28>>2] = $26;
   $29 = $8;
   $30 = ((($29)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (_calloc($31,4)|0);
   $33 = $8;
   $34 = ((($33)) + 24|0);
   HEAP32[$34>>2] = $32;
   $35 = $8;
   $36 = ((($35)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (_calloc($37,4)|0);
   $39 = $8;
   $40 = ((($39)) + 20|0);
   HEAP32[$40>>2] = $38;
   $7 = 0;
   while(1) {
    $41 = $7;
    $42 = $8;
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($41|0)<($44|0);
    if (!($45)) {
     break;
    }
    $46 = (_malloc(65536)|0);
    $47 = $7;
    $48 = $8;
    $49 = ((($48)) + 20|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($50) + ($47<<2)|0);
    HEAP32[$51>>2] = $46;
    $52 = $7;
    $53 = (($52) + 1)|0;
    $7 = $53;
   }
   $54 = $8;
   $55 = HEAP32[$54>>2]|0;
   $56 = (_calloc($55,4)|0);
   $57 = $8;
   $58 = ((($57)) + 32|0);
   HEAP32[$58>>2] = $56;
   $59 = $8;
   $60 = HEAP32[$59>>2]|0;
   $61 = (_calloc($60,24)|0);
   $62 = $8;
   $63 = ((($62)) + 28|0);
   HEAP32[$63>>2] = $61;
   $7 = 0;
   while(1) {
    $64 = $7;
    $65 = $8;
    $66 = HEAP32[$65>>2]|0;
    $67 = ($64|0)<($66|0);
    if (!($67)) {
     break;
    }
    $68 = $7;
    $69 = $7;
    $70 = $8;
    $71 = ((($70)) + 28|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (($72) + (($69*24)|0)|0);
    $74 = ((($73)) + 8|0);
    HEAP32[$74>>2] = $68;
    $75 = $8;
    $76 = $7;
    $77 = $8;
    $78 = ((($77)) + 28|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (($79) + (($76*24)|0)|0);
    HEAP32[$80>>2] = $75;
    $81 = $4;
    $82 = HEAP32[$81>>2]|0;
    $83 = $82 << 3;
    $84 = $83 >> 23;
    $85 = $7;
    $86 = $8;
    $87 = ((($86)) + 28|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = (($88) + (($85*24)|0)|0);
    $90 = ((($89)) + 20|0);
    HEAP32[$90>>2] = $84;
    $91 = (_malloc(65536)|0);
    $92 = $7;
    $93 = $8;
    $94 = ((($93)) + 28|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($95) + (($92*24)|0)|0);
    $97 = ((($96)) + 4|0);
    HEAP32[$97>>2] = $91;
    $98 = $7;
    $99 = (($98) + 1)|0;
    $7 = $99;
   }
   (_pthread_attr_init(($9|0))|0);
   (_pthread_attr_setdetachstate(($9|0),0)|0);
   $100 = $8;
   $101 = ((($100)) + 36|0);
   (_pthread_mutex_init(($101|0),(0|0))|0);
   $102 = $8;
   $103 = ((($102)) + 64|0);
   (_pthread_cond_init(($103|0),(0|0))|0);
   $7 = 1;
   while(1) {
    $104 = $7;
    $105 = $8;
    $106 = HEAP32[$105>>2]|0;
    $107 = ($104|0)<($106|0);
    if (!($107)) {
     break;
    }
    $108 = $7;
    $109 = $8;
    $110 = ((($109)) + 32|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = (($111) + ($108<<2)|0);
    $113 = $7;
    $114 = $8;
    $115 = ((($114)) + 28|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (($116) + (($113*24)|0)|0);
    (_pthread_create(($112|0),($9|0),(37|0),($117|0))|0);
    $118 = $7;
    $119 = (($118) + 1)|0;
    $7 = $119;
   }
   $120 = $8;
   $121 = $4;
   $122 = ((($121)) + 48|0);
   HEAP32[$122>>2] = $120;
   $3 = 0;
   $123 = $3;
   STACKTOP = sp;return ($123|0);
  }
 }
 $3 = -1;
 $123 = $3;
 STACKTOP = sp;return ($123|0);
}
function _mt_worker($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 while(1) {
  $2 = $1;
  $3 = (_worker_aux($2)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   break;
  }
 }
 STACKTOP = sp;return (0|0);
}
function _worker_aux($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = sp + 12|0;
 $2 = $0;
 $4 = 0;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 36|0);
 (_pthread_mutex_lock(($9|0))|0);
 while(1) {
  $10 = $2;
  $11 = ((($10)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)!=(0);
  if ($13) {
   $122 = 0;
  } else {
   $14 = $2;
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($15)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)!=(0);
   $19 = $18 ^ 1;
   $122 = $19;
  }
  $20 = $2;
  $21 = HEAP32[$20>>2]|0;
  if (!($122)) {
   break;
  }
  $22 = ((($21)) + 64|0);
  $23 = $2;
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 36|0);
  (_pthread_cond_wait(($22|0),($25|0))|0);
 }
 $26 = ((($21)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0);
 if ($28) {
  $4 = 1;
 }
 $29 = $2;
 $30 = ((($29)) + 16|0);
 HEAP32[$30>>2] = 0;
 $31 = $2;
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 36|0);
 (_pthread_mutex_unlock(($33|0))|0);
 $34 = $4;
 $35 = ($34|0)!=(0);
 if ($35) {
  $1 = 1;
  $121 = $1;
  STACKTOP = sp;return ($121|0);
 }
 $36 = $2;
 $37 = ((($36)) + 12|0);
 HEAP32[$37>>2] = 0;
 $38 = $2;
 $39 = ((($38)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $3 = $40;
 while(1) {
  $41 = $3;
  $42 = $2;
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($43)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($41|0)<($45|0);
  if (!($46)) {
   break;
  }
  HEAP32[$5>>2] = 65536;
  $47 = $2;
  $48 = ((($47)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $3;
  $51 = $2;
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + 20|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($50<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $3;
  $58 = $2;
  $59 = HEAP32[$58>>2]|0;
  $60 = ((($59)) + 24|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + ($57<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $2;
  $65 = ((($64)) + 20|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (_bgzf_compress($49,$5,$56,$63,$66)|0);
  $6 = $67;
  $68 = $6;
  $69 = ($68|0)!=(0);
  if ($69) {
   label = 13;
   break;
  }
  $94 = $3;
  $95 = $2;
  $96 = HEAP32[$95>>2]|0;
  $97 = ((($96)) + 20|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + ($94<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $2;
  $102 = ((($101)) + 4|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = HEAP32[$5>>2]|0;
  _memcpy(($100|0),($103|0),($104|0))|0;
  $105 = HEAP32[$5>>2]|0;
  $106 = $3;
  $107 = $2;
  $108 = HEAP32[$107>>2]|0;
  $109 = ((($108)) + 24|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($110) + ($106<<2)|0);
  HEAP32[$111>>2] = $105;
  $112 = $2;
  $113 = HEAP32[$112>>2]|0;
  $114 = HEAP32[$113>>2]|0;
  $115 = $3;
  $116 = (($115) + ($114))|0;
  $3 = $116;
 }
 L19: do {
  if ((label|0) == 13) {
   $70 = (3)>=(2);
   if ($70) {
    $71 = HEAP32[2410]|0;
    $72 = $6;
    HEAP32[$vararg_buffer>>2] = 19536;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $72;
    (_fprintf($71,19504,$vararg_buffer)|0);
   }
   $73 = $2;
   $74 = ((($73)) + 12|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $75 | 1;
   HEAP32[$74>>2] = $76;
   while(1) {
    $77 = $3;
    $78 = $2;
    $79 = HEAP32[$78>>2]|0;
    $80 = ((($79)) + 8|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($77|0)<($81|0);
    if (!($82)) {
     break L19;
    }
    $83 = $3;
    $84 = $2;
    $85 = HEAP32[$84>>2]|0;
    $86 = ((($85)) + 24|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (($87) + ($83<<2)|0);
    HEAP32[$88>>2] = 0;
    $89 = $2;
    $90 = HEAP32[$89>>2]|0;
    $91 = HEAP32[$90>>2]|0;
    $92 = $3;
    $93 = (($92) + ($91))|0;
    $3 = $93;
   }
  }
 } while(0);
 $117 = $2;
 $118 = HEAP32[$117>>2]|0;
 $119 = ((($118)) + 16|0);
 $120 = HEAP32[$119>>2]|0;HEAP32[$119>>2] = (($120+1)|0);
 $1 = 0;
 $121 = $1;
 STACKTOP = sp;return ($121|0);
}
function _bgzf_flush($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 16;
 $7 = $6 & 3;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $1 = 0;
  $97 = $1;
  STACKTOP = sp;return ($97|0);
 }
 $9 = $2;
 $10 = ((($9)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0);
  if ($16) {
   $17 = $2;
   _mt_queue($17);
  }
  $18 = $2;
  $19 = (_mt_flush_queue($18)|0);
  $1 = $19;
  $97 = $1;
  STACKTOP = sp;return ($97|0);
 }
 while(1) {
  $20 = $2;
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)>(0);
  if (!($23)) {
   label = 19;
   break;
  }
  $24 = $2;
  $25 = ((($24)) + 56|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)!=(0);
  if ($27) {
   $28 = $2;
   (_bgzf_index_add_block($28)|0);
   $29 = $2;
   $30 = ((($29)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)<(0);
   $33 = $32 << 31 >> 31;
   $34 = $2;
   $35 = ((($34)) + 52|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($36)) + 16|0);
   $38 = $37;
   $39 = $38;
   $40 = HEAP32[$39>>2]|0;
   $41 = (($38) + 4)|0;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = (_i64Add(($40|0),($43|0),($31|0),($33|0))|0);
   $45 = tempRet0;
   $46 = $37;
   $47 = $46;
   HEAP32[$47>>2] = $44;
   $48 = (($46) + 4)|0;
   $49 = $48;
   HEAP32[$49>>2] = $45;
  }
  $50 = $2;
  $51 = $2;
  $52 = ((($51)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (_deflate_block($50,$53)|0);
  $3 = $54;
  $55 = $3;
  $56 = ($55|0)<(0);
  if ($56) {
   label = 11;
   break;
  }
  $60 = $2;
  $61 = ((($60)) + 44|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $2;
  $64 = ((($63)) + 36|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $3;
  $67 = (_hwrite_495($62,$65,$66)|0);
  $68 = $3;
  $69 = ($67|0)!=($68|0);
  if ($69) {
   label = 15;
   break;
  }
  $80 = $3;
  $81 = ($80|0)<(0);
  $82 = $81 << 31 >> 31;
  $83 = $2;
  $84 = ((($83)) + 16|0);
  $85 = $84;
  $86 = $85;
  $87 = HEAP32[$86>>2]|0;
  $88 = (($85) + 4)|0;
  $89 = $88;
  $90 = HEAP32[$89>>2]|0;
  $91 = (_i64Add(($87|0),($90|0),($80|0),($82|0))|0);
  $92 = tempRet0;
  $93 = $84;
  $94 = $93;
  HEAP32[$94>>2] = $91;
  $95 = (($93) + 4)|0;
  $96 = $95;
  HEAP32[$96>>2] = $92;
 }
 if ((label|0) == 11) {
  $57 = (3)>=(3);
  if ($57) {
   $58 = HEAP32[2410]|0;
   $59 = $3;
   HEAP32[$vararg_buffer>>2] = 19579;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $59;
   (_fprintf($58,19547,$vararg_buffer)|0);
  }
  $1 = -1;
  $97 = $1;
  STACKTOP = sp;return ($97|0);
 }
 else if ((label|0) == 15) {
  $70 = (3)>=(1);
  if ($70) {
   $71 = HEAP32[2410]|0;
   HEAP32[$vararg_buffer2>>2] = 19579;
   (_fprintf($71,19590,$vararg_buffer2)|0);
  }
  $72 = $2;
  $73 = HEAP32[$72>>2]|0;
  $74 = $73 & 65535;
  $75 = $74 | 4;
  $76 = HEAP32[$72>>2]|0;
  $77 = $75 & 65535;
  $78 = $76 & -65536;
  $79 = $78 | $77;
  HEAP32[$72>>2] = $79;
  $1 = -1;
  $97 = $1;
  STACKTOP = sp;return ($97|0);
 }
 else if ((label|0) == 19) {
  $1 = 0;
  $97 = $1;
  STACKTOP = sp;return ($97|0);
 }
 return (0)|0;
}
function _mt_queue($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)<($11|0);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = ((($16)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($15<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $1;
  $22 = ((($21)) + 32|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $1;
  $25 = ((($24)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  _memcpy(($20|0),($23|0),($26|0))|0;
  $27 = $1;
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $2;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $2;
  $34 = ((($33)) + 24|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + ($32<<2)|0);
  HEAP32[$36>>2] = $29;
  $37 = $1;
  $38 = ((($37)) + 12|0);
  HEAP32[$38>>2] = 0;
  $39 = $2;
  $40 = ((($39)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[$40>>2] = $42;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((19688|0),(18787|0),833,(19710|0));
  // unreachable;
 }
}
function _mt_flush_queue($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 $7 = $3;
 $8 = ((($7)) + 36|0);
 (_pthread_mutex_lock(($8|0))|0);
 $2 = 0;
 while(1) {
  $9 = $2;
  $10 = $3;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $2;
  $14 = $3;
  $15 = ((($14)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + (($13*24)|0)|0);
  $18 = ((($17)) + 16|0);
  HEAP32[$18>>2] = 1;
  $19 = $2;
  $20 = (($19) + 1)|0;
  $2 = $20;
 }
 $21 = $3;
 $22 = ((($21)) + 16|0);
 HEAP32[$22>>2] = 0;
 $23 = $3;
 $24 = ((($23)) + 64|0);
 (_pthread_cond_broadcast(($24|0))|0);
 $25 = $3;
 $26 = ((($25)) + 36|0);
 (_pthread_mutex_unlock(($26|0))|0);
 $27 = $3;
 $28 = ((($27)) + 28|0);
 $29 = HEAP32[$28>>2]|0;
 (_worker_aux($29)|0);
 while(1) {
  $30 = $3;
  $31 = ((($30)) + 16|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $3;
  $34 = HEAP32[$33>>2]|0;
  $35 = ($32|0)<($34|0);
  if (!($35)) {
   break;
  }
 }
 $2 = 0;
 while(1) {
  $36 = $2;
  $37 = $3;
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)<($38|0);
  if (!($39)) {
   break;
  }
  $40 = $2;
  $41 = $3;
  $42 = ((($41)) + 28|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + (($40*24)|0)|0);
  $45 = ((($44)) + 12|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $1;
  $48 = HEAP32[$47>>2]|0;
  $49 = $48 & 65535;
  $50 = $49 | $46;
  $51 = HEAP32[$47>>2]|0;
  $52 = $50 & 65535;
  $53 = $51 & -65536;
  $54 = $53 | $52;
  HEAP32[$47>>2] = $54;
  $55 = $2;
  $56 = (($55) + 1)|0;
  $2 = $56;
 }
 $57 = $1;
 $58 = HEAP32[$57>>2]|0;
 $59 = $58 & 65535;
 $60 = ($59|0)==(0);
 if (!($60)) {
  $99 = $3;
  $100 = ((($99)) + 8|0);
  HEAP32[$100>>2] = 0;
  $101 = $1;
  $102 = HEAP32[$101>>2]|0;
  $103 = $102 & 65535;
  $104 = ($103|0)==(0);
  $105 = $104 ? 0 : -1;
  STACKTOP = sp;return ($105|0);
 }
 $2 = 0;
 while(1) {
  $61 = $2;
  $62 = $3;
  $63 = ((($62)) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($61|0)<($64|0);
  if (!($65)) {
   label = 15;
   break;
  }
  $66 = $1;
  $67 = ((($66)) + 44|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $2;
  $70 = $3;
  $71 = ((($70)) + 20|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($72) + ($69<<2)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $2;
  $76 = $3;
  $77 = ((($76)) + 24|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($78) + ($75<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (_hwrite_495($68,$74,$80)|0);
  $82 = $2;
  $83 = $3;
  $84 = ((($83)) + 24|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + ($82<<2)|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ($81|0)!=($87|0);
  if ($88) {
   break;
  }
  $97 = $2;
  $98 = (($97) + 1)|0;
  $2 = $98;
 }
 if ((label|0) == 15) {
  $99 = $3;
  $100 = ((($99)) + 8|0);
  HEAP32[$100>>2] = 0;
  $101 = $1;
  $102 = HEAP32[$101>>2]|0;
  $103 = $102 & 65535;
  $104 = ($103|0)==(0);
  $105 = $104 ? 0 : -1;
  STACKTOP = sp;return ($105|0);
 }
 $89 = $1;
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 65535;
 $92 = $91 | 4;
 $93 = HEAP32[$89>>2]|0;
 $94 = $92 & 65535;
 $95 = $93 & -65536;
 $96 = $95 | $94;
 HEAP32[$89>>2] = $96;
 $99 = $3;
 $100 = ((($99)) + 8|0);
 HEAP32[$100>>2] = 0;
 $101 = $1;
 $102 = HEAP32[$101>>2]|0;
 $103 = $102 & 65535;
 $104 = ($103|0)==(0);
 $105 = $104 ? 0 : -1;
 STACKTOP = sp;return ($105|0);
}
function _deflate_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 HEAP32[$5>>2] = 65536;
 $7 = $3;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 >>> 31;
 $10 = ($9|0)!=(0);
 $11 = $3;
 if ($10) {
  $23 = $3;
  $24 = ((($23)) + 36|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $3;
  $27 = ((($26)) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $4;
  $30 = $3;
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 << 3;
  $33 = $32 >> 23;
  $34 = (_bgzf_gzip_compress($11,$25,$5,$28,$29,$33)|0);
  $6 = $34;
 } else {
  $12 = ((($11)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $3;
  $15 = ((($14)) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $4;
  $18 = $3;
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 << 3;
  $21 = $20 >> 23;
  $22 = (_bgzf_compress($13,$5,$16,$17,$21)|0);
  $6 = $22;
 }
 $35 = $6;
 $36 = ($35|0)!=(0);
 if (!($36)) {
  $48 = $3;
  $49 = ((($48)) + 12|0);
  HEAP32[$49>>2] = 0;
  $50 = HEAP32[$5>>2]|0;
  $2 = $50;
  $51 = $2;
  STACKTOP = sp;return ($51|0);
 }
 $37 = (3)>=(3);
 if ($37) {
  $38 = HEAP32[2410]|0;
  $39 = $6;
  HEAP32[$vararg_buffer>>2] = 19655;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $39;
  (_fprintf($38,19625,$vararg_buffer)|0);
 }
 $40 = $3;
 $41 = HEAP32[$40>>2]|0;
 $42 = $41 & 65535;
 $43 = $42 | 1;
 $44 = HEAP32[$40>>2]|0;
 $45 = $43 & 65535;
 $46 = $44 & -65536;
 $47 = $46 | $45;
 HEAP32[$40>>2] = $47;
 $2 = -1;
 $51 = $2;
 STACKTOP = sp;return ($51|0);
}
function _hwrite_495($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $9;
 $14 = $12;
 $15 = (($13) - ($14))|0;
 $6 = $15;
 $16 = $6;
 $17 = $5;
 $18 = ($16>>>0)>($17>>>0);
 if ($18) {
  $19 = $5;
  $6 = $19;
 }
 $20 = $3;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $4;
 $24 = $6;
 _memcpy(($22|0),($23|0),($24|0))|0;
 $25 = $6;
 $26 = $3;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($25)|0);
 HEAP32[$27>>2] = $29;
 $30 = $6;
 $31 = $5;
 $32 = ($30|0)==($31|0);
 if ($32) {
  $33 = $6;
  $39 = $33;
  STACKTOP = sp;return ($39|0);
 } else {
  $34 = $3;
  $35 = $4;
  $36 = $5;
  $37 = $6;
  $38 = (_hwrite2($34,$35,$36,$37)|0);
  $39 = $38;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _bgzf_gzip_compress($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $17 = $8;
 $13 = $17;
 $18 = $7;
 $19 = ((($18)) + 60|0);
 $20 = HEAP32[$19>>2]|0;
 $14 = $20;
 $21 = $11;
 $22 = ($21|0)!=(0);
 $23 = $22 ? 0 : 4;
 $15 = $23;
 $24 = $10;
 $25 = $14;
 HEAP32[$25>>2] = $24;
 $26 = $11;
 $27 = $14;
 $28 = ((($27)) + 4|0);
 HEAP32[$28>>2] = $26;
 $29 = $13;
 $30 = $14;
 $31 = ((($30)) + 12|0);
 HEAP32[$31>>2] = $29;
 $32 = $9;
 $33 = HEAP32[$32>>2]|0;
 $34 = $14;
 $35 = ((($34)) + 16|0);
 HEAP32[$35>>2] = $33;
 $36 = $14;
 $37 = $15;
 $38 = (_deflate($36,$37)|0);
 $16 = $38;
 $39 = $16;
 $40 = ($39|0)==(-2);
 if (!($40)) {
  $45 = $9;
  $46 = HEAP32[$45>>2]|0;
  $47 = $14;
  $48 = ((($47)) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($46) - ($49))|0;
  $51 = $9;
  HEAP32[$51>>2] = $50;
  $6 = 0;
  $52 = $6;
  STACKTOP = sp;return ($52|0);
 }
 $41 = (3)>=(1);
 if ($41) {
  $42 = HEAP32[2410]|0;
  $43 = $16;
  $44 = (_bgzf_zerr($43,0)|0);
  HEAP32[$vararg_buffer>>2] = 19669;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $44;
  (_fprintf($42,19111,$vararg_buffer)|0);
 }
 $6 = -1;
 $52 = $6;
 STACKTOP = sp;return ($52|0);
}
function _bgzf_close($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = -1;
  $100 = $1;
  STACKTOP = sp;return ($100|0);
 }
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 >>> 16;
 $10 = $9 & 3;
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $2;
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 >>> 29;
   $15 = $14 & 3;
   $16 = ($15|0)!=(0);
   if ($16) {
    $17 = $2;
    $18 = (_bgzf_flush($17)|0);
    $19 = ($18|0)!=(0);
    if ($19) {
     $1 = -1;
     $100 = $1;
     STACKTOP = sp;return ($100|0);
    }
    $20 = $2;
    $21 = HEAP32[$20>>2]|0;
    $22 = $21 & -535822337;
    $23 = $22 | 535822336;
    HEAP32[$20>>2] = $23;
    $24 = $2;
    $25 = (_deflate_block($24,0)|0);
    $4 = $25;
    $26 = $4;
    $27 = ($26|0)<(0);
    if ($27) {
     $28 = (3)>=(3);
     if ($28) {
      $29 = HEAP32[2410]|0;
      $30 = $4;
      HEAP32[$vararg_buffer>>2] = 19719;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $30;
      (_fprintf($29,19547,$vararg_buffer)|0);
     }
     $1 = -1;
     $100 = $1;
     STACKTOP = sp;return ($100|0);
    }
    $31 = $2;
    $32 = ((($31)) + 44|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $2;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = $4;
    $38 = (_hwrite_495($33,$36,$37)|0);
    $39 = ($38|0)<(0);
    if (!($39)) {
     $40 = $2;
     $41 = ((($40)) + 44|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (_hflush($42)|0);
     $44 = ($43|0)!=(0);
     if (!($44)) {
      $55 = $2;
      $56 = ((($55)) + 48|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)!=(0|0);
      if (!($58)) {
       break;
      }
      $59 = $2;
      $60 = ((($59)) + 48|0);
      $61 = HEAP32[$60>>2]|0;
      _mt_destroy($61);
      break;
     }
    }
    $45 = (3)>=(1);
    if ($45) {
     $46 = HEAP32[2410]|0;
     HEAP32[$vararg_buffer2>>2] = 19719;
     (_fprintf($46,19730,$vararg_buffer2)|0);
    }
    $47 = $2;
    $48 = HEAP32[$47>>2]|0;
    $49 = $48 & 65535;
    $50 = $49 | 4;
    $51 = HEAP32[$47>>2]|0;
    $52 = $50 & 65535;
    $53 = $51 & -65536;
    $54 = $53 | $52;
    HEAP32[$47>>2] = $54;
    $1 = -1;
    $100 = $1;
    STACKTOP = sp;return ($100|0);
   }
  }
 } while(0);
 $62 = $2;
 $63 = HEAP32[$62>>2]|0;
 $64 = $63 >>> 31;
 $65 = ($64|0)!=(0);
 if ($65) {
  $66 = $2;
  $67 = HEAP32[$66>>2]|0;
  $68 = $67 >>> 16;
  $69 = $68 & 3;
  $70 = ($69|0)!=(0);
  $71 = $2;
  $72 = ((($71)) + 60|0);
  $73 = HEAP32[$72>>2]|0;
  if ($70) {
   $75 = (_deflateEnd($73)|0);
   $3 = $75;
  } else {
   $74 = (_inflateEnd($73)|0);
   $3 = $74;
  }
  $76 = $3;
  $77 = ($76|0)!=(0);
  $78 = (3)>=(1);
  $or$cond = $77 & $78;
  if ($or$cond) {
   $79 = HEAP32[2410]|0;
   $80 = $3;
   $81 = (_bgzf_zerr($80,0)|0);
   HEAP32[$vararg_buffer5>>2] = 19719;
   $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
   HEAP32[$vararg_ptr8>>2] = $81;
   (_fprintf($79,19756,$vararg_buffer5)|0);
  }
  $82 = $2;
  $83 = ((($82)) + 60|0);
  $84 = HEAP32[$83>>2]|0;
  _free($84);
 }
 $85 = $2;
 $86 = ((($85)) + 44|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (_hclose($87)|0);
 $3 = $88;
 $89 = $3;
 $90 = ($89|0)!=(0);
 if ($90) {
  $1 = -1;
  $100 = $1;
  STACKTOP = sp;return ($100|0);
 } else {
  $91 = $2;
  _bgzf_index_destroy($91);
  $92 = $2;
  $93 = ((($92)) + 32|0);
  $94 = HEAP32[$93>>2]|0;
  _free($94);
  $95 = $2;
  $96 = ((($95)) + 36|0);
  $97 = HEAP32[$96>>2]|0;
  _free($97);
  $98 = $2;
  _free_cache($98);
  $99 = $2;
  _free($99);
  $1 = 0;
  $100 = $1;
  STACKTOP = sp;return ($100|0);
 }
 return (0)|0;
}
function _mt_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 36|0);
 (_pthread_mutex_lock(($4|0))|0);
 $5 = $1;
 $6 = ((($5)) + 12|0);
 HEAP32[$6>>2] = 1;
 $7 = $1;
 $8 = ((($7)) + 16|0);
 HEAP32[$8>>2] = 0;
 $9 = $1;
 $10 = ((($9)) + 64|0);
 (_pthread_cond_broadcast(($10|0))|0);
 $11 = $1;
 $12 = ((($11)) + 36|0);
 (_pthread_mutex_unlock(($12|0))|0);
 $2 = 1;
 while(1) {
  $13 = $2;
  $14 = $1;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($13|0)<($15|0);
  if (!($16)) {
   break;
  }
  $17 = $2;
  $18 = $1;
  $19 = ((($18)) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($17<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  (_pthread_join(($22|0),(0|0))|0);
  $23 = $2;
  $24 = (($23) + 1)|0;
  $2 = $24;
 }
 $2 = 0;
 while(1) {
  $25 = $2;
  $26 = $1;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($25|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $2;
  $31 = $1;
  $32 = ((($31)) + 20|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  _free($35);
  $36 = $2;
  $37 = (($36) + 1)|0;
  $2 = $37;
 }
 $2 = 0;
 while(1) {
  $38 = $2;
  $39 = $1;
  $40 = HEAP32[$39>>2]|0;
  $41 = ($38|0)<($40|0);
  if (!($41)) {
   break;
  }
  $42 = $2;
  $43 = $1;
  $44 = ((($43)) + 28|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + (($42*24)|0)|0);
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  _free($48);
  $49 = $2;
  $50 = (($49) + 1)|0;
  $2 = $50;
 }
 $51 = $1;
 $52 = ((($51)) + 20|0);
 $53 = HEAP32[$52>>2]|0;
 _free($53);
 $54 = $1;
 $55 = ((($54)) + 24|0);
 $56 = HEAP32[$55>>2]|0;
 _free($56);
 $57 = $1;
 $58 = ((($57)) + 28|0);
 $59 = HEAP32[$58>>2]|0;
 _free($59);
 $60 = $1;
 $61 = ((($60)) + 32|0);
 $62 = HEAP32[$61>>2]|0;
 _free($62);
 $63 = $1;
 $64 = ((($63)) + 64|0);
 (_pthread_cond_destroy(($64|0))|0);
 $65 = $1;
 $66 = ((($65)) + 36|0);
 (_pthread_mutex_destroy(($66|0))|0);
 $67 = $1;
 _free($67);
 STACKTOP = sp;return;
}
function _bgzf_index_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 _free($10);
 $11 = $1;
 $12 = ((($11)) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 _free($13);
 $14 = $1;
 $15 = ((($14)) + 52|0);
 HEAP32[$15>>2] = 0;
 $16 = $1;
 $17 = ((($16)) + 56|0);
 HEAP32[$17>>2] = 0;
 STACKTOP = sp;return;
}
function _free_cache($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 >>> 16;
 $10 = $9 & 3;
 $11 = ($10|0)!=(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $2 = 0;
 while(1) {
  $12 = $2;
  $13 = $3;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($12>>>0)<($14>>>0);
  if (!($15)) {
   break;
  }
  $16 = $2;
  $17 = $16 >>> 4;
  $18 = $3;
  $19 = ((($18)) + 16|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($17<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $2;
  $24 = $23 & 15;
  $25 = $24 << 1;
  $26 = $22 >>> $25;
  $27 = $26 & 3;
  $28 = ($27|0)!=(0);
  if (!($28)) {
   $29 = $2;
   $30 = $3;
   $31 = ((($30)) + 24|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + ($29<<4)|0);
   $34 = ((($33)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   _free($35);
  }
  $36 = $2;
  $37 = (($36) + 1)|0;
  $2 = $37;
 }
 $38 = $3;
 _kh_destroy_cache($38);
 STACKTOP = sp;return;
}
function _kh_destroy_cache($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _bgzf_check_EOF($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 12|0;
 $2 = $0;
 $5 = $2;
 $6 = ((($5)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_htell_478($7)|0);
 $4 = $8;
 $9 = $2;
 $10 = ((($9)) + 44|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_hseek($11,-28,2)|0);
 $13 = ($12|0)<(0);
 do {
  if ($13) {
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(29);
   if ($16) {
    $17 = $2;
    $18 = ((($17)) + 44|0);
    $19 = HEAP32[$18>>2]|0;
    _hclearerr($19);
    $1 = 2;
    break;
   } else {
    $1 = -1;
    break;
   }
  } else {
   $20 = $2;
   $21 = ((($20)) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (_hread_477($22,$3,28)|0);
   $24 = ($23|0)!=(28);
   if ($24) {
    $1 = -1;
    break;
   }
   $25 = $2;
   $26 = ((($25)) + 44|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $4;
   $29 = (_hseek($27,$28,0)|0);
   $30 = ($29|0)<(0);
   if ($30) {
    $1 = -1;
    break;
   } else {
    $31 = (_memcmp(19798,$3,28)|0);
    $32 = ($31|0)==(0);
    $33 = $32 ? 1 : 0;
    $1 = $33;
    break;
   }
  }
 } while(0);
 $34 = $1;
 STACKTOP = sp;return ($34|0);
}
function _hclearerr($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 28|0);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function _bgzf_getc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)>=($9|0);
 if ($10) {
  $11 = $2;
  $12 = (_bgzf_read_block($11)|0);
  $13 = ($12|0)!=(0);
  if ($13) {
   $1 = -2;
   $66 = $1;
   STACKTOP = sp;return ($66|0);
  }
  $14 = $2;
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0);
  if ($17) {
   $1 = -1;
   $66 = $1;
   STACKTOP = sp;return ($66|0);
  }
 }
 $18 = $2;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 1)|0;
 HEAP32[$19>>2] = $21;
 $22 = $2;
 $23 = ((($22)) + 32|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($20)|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $3 = $27;
 $28 = $2;
 $29 = ((($28)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $2;
 $32 = ((($31)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($30|0)==($33|0);
 if ($34) {
  $35 = $2;
  $36 = ((($35)) + 44|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (_htell_478($37)|0);
  $39 = ($38|0)<(0);
  $40 = $39 << 31 >> 31;
  $41 = $2;
  $42 = ((($41)) + 16|0);
  $43 = $42;
  $44 = $43;
  HEAP32[$44>>2] = $38;
  $45 = (($43) + 4)|0;
  $46 = $45;
  HEAP32[$46>>2] = $40;
  $47 = $2;
  $48 = ((($47)) + 12|0);
  HEAP32[$48>>2] = 0;
  $49 = $2;
  $50 = ((($49)) + 8|0);
  HEAP32[$50>>2] = 0;
 }
 $51 = $2;
 $52 = ((($51)) + 24|0);
 $53 = $52;
 $54 = $53;
 $55 = HEAP32[$54>>2]|0;
 $56 = (($53) + 4)|0;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = (_i64Add(($55|0),($58|0),1,0)|0);
 $60 = tempRet0;
 $61 = $52;
 $62 = $61;
 HEAP32[$62>>2] = $59;
 $63 = (($61) + 4)|0;
 $64 = $63;
 HEAP32[$64>>2] = $60;
 $65 = $3;
 $1 = $65;
 $66 = $1;
 STACKTOP = sp;return ($66|0);
}
function _bgzf_index_build_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 _bgzf_index_destroy($3);
 $4 = (_calloc(1,24)|0);
 $5 = $2;
 $6 = ((($5)) + 52|0);
 HEAP32[$6>>2] = $4;
 $7 = $2;
 $8 = ((($7)) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $2;
  $12 = ((($11)) + 56|0);
  HEAP32[$12>>2] = 1;
  $1 = 0;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 } else {
  $1 = -1;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _bgzf_index_dump($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0;
 var $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = $4;
 $13 = (_bgzf_flush($12)|0);
 $14 = ($13|0)!=(0);
 if ($14) {
  $3 = -1;
  $137 = $3;
  STACKTOP = sp;return ($137|0);
 }
 $15 = $4;
 $16 = ((($15)) + 52|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  ___assert_fail((19827|0),(18787|0),1149,(19835|0));
  // unreachable;
 }
 $7 = 0;
 $19 = $6;
 $20 = ($19|0)!=(0|0);
 do {
  if ($20) {
   $21 = $5;
   $22 = (_strlen($21)|0);
   $8 = $22;
   $23 = $6;
   $24 = (_strlen($23)|0);
   $9 = $24;
   $25 = $8;
   $26 = $9;
   $27 = (($25) + ($26))|0;
   $28 = (($27) + 1)|0;
   $29 = (_malloc($28)|0);
   $7 = $29;
   $30 = $7;
   $31 = ($30|0)!=(0|0);
   if ($31) {
    $32 = $7;
    $33 = $5;
    $34 = $8;
    _memcpy(($32|0),($33|0),($34|0))|0;
    $35 = $7;
    $36 = $8;
    $37 = (($35) + ($36)|0);
    $38 = $6;
    $39 = $9;
    $40 = (($39) + 1)|0;
    _memcpy(($37|0),($38|0),($40|0))|0;
    break;
   }
   $3 = -1;
   $137 = $3;
   STACKTOP = sp;return ($137|0);
  }
 } while(0);
 $41 = $7;
 $42 = ($41|0)!=(0|0);
 $43 = $7;
 $44 = $5;
 $45 = $42 ? $43 : $44;
 $46 = (_fopen($45,22961)|0);
 $10 = $46;
 $47 = $7;
 $48 = ($47|0)!=(0|0);
 if ($48) {
  $49 = $7;
  _free($49);
 }
 $50 = $10;
 $51 = ($50|0)!=(0|0);
 if (!($51)) {
  $52 = (3)>(1);
  if ($52) {
   $53 = HEAP32[2410]|0;
   $54 = $5;
   $55 = $6;
   $56 = ($55|0)!=(0|0);
   $57 = $6;
   $58 = $56 ? $57 : 26441;
   $59 = (___errno_location()|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (_strerror($60)|0);
   HEAP32[$vararg_buffer>>2] = 19835;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $54;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $58;
   $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $61;
   (_fprintf($53,19851,$vararg_buffer)|0);
  }
  $3 = -1;
  $137 = $3;
  STACKTOP = sp;return ($137|0);
 }
 $62 = $4;
 $63 = ((($62)) + 52|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) - 1)|0;
 $67 = ($66|0)<(0);
 $68 = $67 << 31 >> 31;
 $69 = $10;
 $70 = (_fwrite_uint64($66,$68,$69)|0);
 $71 = ($70|0)<(0);
 L25: do {
  if (!($71)) {
   $11 = 1;
   while(1) {
    $72 = $11;
    $73 = $4;
    $74 = ((($73)) + 52|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = HEAP32[$75>>2]|0;
    $77 = ($72|0)<($76|0);
    if (!($77)) {
     break;
    }
    $78 = $11;
    $79 = $4;
    $80 = ((($79)) + 52|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($81)) + 8|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = (($83) + ($78<<4)|0);
    $85 = ((($84)) + 8|0);
    $86 = $85;
    $87 = $86;
    $88 = HEAP32[$87>>2]|0;
    $89 = (($86) + 4)|0;
    $90 = $89;
    $91 = HEAP32[$90>>2]|0;
    $92 = $10;
    $93 = (_fwrite_uint64($88,$91,$92)|0);
    $94 = ($93|0)<(0);
    if ($94) {
     break L25;
    }
    $95 = $11;
    $96 = $4;
    $97 = ((($96)) + 52|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ((($98)) + 8|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = (($100) + ($95<<4)|0);
    $102 = $101;
    $103 = $102;
    $104 = HEAP32[$103>>2]|0;
    $105 = (($102) + 4)|0;
    $106 = $105;
    $107 = HEAP32[$106>>2]|0;
    $108 = $10;
    $109 = (_fwrite_uint64($104,$107,$108)|0);
    $110 = ($109|0)<(0);
    if ($110) {
     break L25;
    }
    $111 = $11;
    $112 = (($111) + 1)|0;
    $11 = $112;
   }
   $113 = $10;
   $114 = (_fclose($113)|0);
   $115 = ($114|0)<(0);
   if (!($115)) {
    $3 = 0;
    $137 = $3;
    STACKTOP = sp;return ($137|0);
   }
   $116 = (3)>(1);
   if ($116) {
    $117 = HEAP32[2410]|0;
    $118 = $5;
    $119 = $6;
    $120 = ($119|0)!=(0|0);
    $121 = $6;
    $122 = $120 ? $121 : 26441;
    $123 = (___errno_location()|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (_strerror($124)|0);
    HEAP32[$vararg_buffer4>>2] = 19835;
    $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
    HEAP32[$vararg_ptr7>>2] = $118;
    $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
    HEAP32[$vararg_ptr8>>2] = $122;
    $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
    HEAP32[$vararg_ptr9>>2] = $125;
    (_fprintf($117,19884,$vararg_buffer4)|0);
   }
   $3 = -1;
   $137 = $3;
   STACKTOP = sp;return ($137|0);
  }
 } while(0);
 $126 = (3)>(1);
 if ($126) {
  $127 = HEAP32[2410]|0;
  $128 = $5;
  $129 = $6;
  $130 = ($129|0)!=(0|0);
  $131 = $6;
  $132 = $130 ? $131 : 26441;
  $133 = (___errno_location()|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (_strerror($134)|0);
  HEAP32[$vararg_buffer10>>2] = 19835;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $128;
  $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
  HEAP32[$vararg_ptr14>>2] = $132;
  $vararg_ptr15 = ((($vararg_buffer10)) + 12|0);
  HEAP32[$vararg_ptr15>>2] = $135;
  (_fprintf($127,19920,$vararg_buffer10)|0);
 }
 $136 = $10;
 (_fclose($136)|0);
 $3 = -1;
 $137 = $3;
 STACKTOP = sp;return ($137|0);
}
function _fwrite_uint64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $6 = $4;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $5 = $2;
 $10 = (_ed_is_big_462()|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $4;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + 4)|0;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (_ed_swap_8_520($14,$17)|0);
  $19 = tempRet0;
  $20 = $4;
  $21 = $20;
  HEAP32[$21>>2] = $18;
  $22 = (($20) + 4)|0;
  $23 = $22;
  HEAP32[$23>>2] = $19;
 }
 $24 = $5;
 $25 = (_fwrite($4,8,1,$24)|0);
 $26 = ($25|0)!=(1);
 if ($26) {
  $3 = -1;
  $27 = $3;
  STACKTOP = sp;return ($27|0);
 } else {
  $3 = 0;
  $27 = $3;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _ed_swap_8_520($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = $0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $7 = $2;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $2;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = $2;
 $20 = $19;
 HEAP32[$20>>2] = $18;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $9;
 $23 = $2;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = $25 & 65535;
 $30 = $28 & 65535;
 $31 = (_bitshift64Shl(($29|0),($30|0),16)|0);
 $32 = tempRet0;
 $33 = $2;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = $35 & -65536;
 $40 = $38 & -65536;
 $41 = (_bitshift64Lshr(($39|0),($40|0),16)|0);
 $42 = tempRet0;
 $43 = $31 | $41;
 $44 = $32 | $42;
 $45 = $2;
 $46 = $45;
 HEAP32[$46>>2] = $43;
 $47 = (($45) + 4)|0;
 $48 = $47;
 HEAP32[$48>>2] = $44;
 $49 = $2;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 $52 = (($49) + 4)|0;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = $51 & 16711935;
 $56 = $54 & 16711935;
 $57 = (_bitshift64Shl(($55|0),($56|0),8)|0);
 $58 = tempRet0;
 $59 = $2;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = (($59) + 4)|0;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = $61 & -16711936;
 $66 = $64 & -16711936;
 $67 = (_bitshift64Lshr(($65|0),($66|0),8)|0);
 $68 = tempRet0;
 $69 = $57 | $67;
 $70 = $58 | $68;
 tempRet0 = ($70);
 STACKTOP = sp;return ($69|0);
}
function _bgzf_index_load($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $11 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $13 = $6;
 $14 = ($13|0)!=(0|0);
 do {
  if ($14) {
   $15 = $5;
   $16 = (_strlen($15)|0);
   $8 = $16;
   $17 = $6;
   $18 = (_strlen($17)|0);
   $9 = $18;
   $19 = $8;
   $20 = $9;
   $21 = (($19) + ($20))|0;
   $22 = (($21) + 1)|0;
   $23 = (_malloc($22)|0);
   $7 = $23;
   $24 = $7;
   $25 = ($24|0)!=(0|0);
   if ($25) {
    $26 = $7;
    $27 = $5;
    $28 = $8;
    _memcpy(($26|0),($27|0),($28|0))|0;
    $29 = $7;
    $30 = $8;
    $31 = (($29) + ($30)|0);
    $32 = $6;
    $33 = $9;
    $34 = (($33) + 1)|0;
    _memcpy(($31|0),($32|0),($34|0))|0;
    break;
   }
   $3 = -1;
   $174 = $3;
   STACKTOP = sp;return ($174|0);
  }
 } while(0);
 $35 = $7;
 $36 = ($35|0)!=(0|0);
 $37 = $7;
 $38 = $5;
 $39 = $36 ? $37 : $38;
 $40 = (_fopen($39,19956)|0);
 $10 = $40;
 $41 = $7;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = $7;
  _free($43);
 }
 $44 = $10;
 $45 = ($44|0)!=(0|0);
 if (!($45)) {
  $46 = (3)>(1);
  if ($46) {
   $47 = HEAP32[2410]|0;
   $48 = $5;
   $49 = $6;
   $50 = ($49|0)!=(0|0);
   $51 = $6;
   $52 = $50 ? $51 : 26441;
   $53 = (___errno_location()|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (_strerror($54)|0);
   HEAP32[$vararg_buffer>>2] = 19959;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $48;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $52;
   $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $55;
   (_fprintf($47,19851,$vararg_buffer)|0);
  }
  $3 = -1;
  $174 = $3;
  STACKTOP = sp;return ($174|0);
 }
 $56 = (_calloc(1,24)|0);
 $57 = $4;
 $58 = ((($57)) + 52|0);
 HEAP32[$58>>2] = $56;
 $59 = $4;
 $60 = ((($59)) + 52|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)==(0|0);
 L18: do {
  if (!($62)) {
   $63 = $10;
   $64 = (_fread_uint64($11,$63)|0);
   $65 = ($64|0)<(0);
   if (!($65)) {
    $66 = $11;
    $67 = $66;
    $68 = HEAP32[$67>>2]|0;
    $69 = (($66) + 4)|0;
    $70 = $69;
    $71 = HEAP32[$70>>2]|0;
    $72 = (_i64Add(($68|0),($71|0),1,0)|0);
    $73 = tempRet0;
    $74 = $4;
    $75 = ((($74)) + 52|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ((($76)) + 4|0);
    HEAP32[$77>>2] = $72;
    $78 = $4;
    $79 = ((($78)) + 52|0);
    $80 = HEAP32[$79>>2]|0;
    HEAP32[$80>>2] = $72;
    $81 = $4;
    $82 = ((($81)) + 52|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ((($83)) + 4|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $85<<4;
    $87 = (_malloc($86)|0);
    $88 = $4;
    $89 = ((($88)) + 52|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ((($90)) + 8|0);
    HEAP32[$91>>2] = $87;
    $92 = $4;
    $93 = ((($92)) + 52|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ((($94)) + 8|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)==(0|0);
    if (!($97)) {
     $98 = $4;
     $99 = ((($98)) + 52|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = ((($100)) + 8|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = $102;
     $104 = $103;
     HEAP32[$104>>2] = 0;
     $105 = (($103) + 4)|0;
     $106 = $105;
     HEAP32[$106>>2] = 0;
     $107 = $4;
     $108 = ((($107)) + 52|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ((($109)) + 8|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = ((($111)) + 8|0);
     $113 = $112;
     $114 = $113;
     HEAP32[$114>>2] = 0;
     $115 = (($113) + 4)|0;
     $116 = $115;
     HEAP32[$116>>2] = 0;
     $12 = 1;
     while(1) {
      $117 = $12;
      $118 = $4;
      $119 = ((($118)) + 52|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = HEAP32[$120>>2]|0;
      $122 = ($117|0)<($121|0);
      if (!($122)) {
       break;
      }
      $123 = $12;
      $124 = $4;
      $125 = ((($124)) + 52|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = ((($126)) + 8|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = (($128) + ($123<<4)|0);
      $130 = ((($129)) + 8|0);
      $131 = $10;
      $132 = (_fread_uint64($130,$131)|0);
      $133 = ($132|0)<(0);
      if ($133) {
       break L18;
      }
      $134 = $12;
      $135 = $4;
      $136 = ((($135)) + 52|0);
      $137 = HEAP32[$136>>2]|0;
      $138 = ((($137)) + 8|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = (($139) + ($134<<4)|0);
      $141 = $10;
      $142 = (_fread_uint64($140,$141)|0);
      $143 = ($142|0)<(0);
      if ($143) {
       break L18;
      }
      $144 = $12;
      $145 = (($144) + 1)|0;
      $12 = $145;
     }
     $146 = $10;
     $147 = (_fclose($146)|0);
     $148 = ($147|0)!=(0);
     if (!($148)) {
      $3 = 0;
      $174 = $3;
      STACKTOP = sp;return ($174|0);
     }
    }
   }
  }
 } while(0);
 $149 = (3)>(1);
 if ($149) {
  $150 = HEAP32[2410]|0;
  $151 = $5;
  $152 = $6;
  $153 = ($152|0)!=(0|0);
  $154 = $6;
  $155 = $153 ? $154 : 26441;
  $156 = (___errno_location()|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = (_strerror($157)|0);
  HEAP32[$vararg_buffer4>>2] = 19959;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $151;
  $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
  HEAP32[$vararg_ptr8>>2] = $155;
  $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
  HEAP32[$vararg_ptr9>>2] = $158;
  (_fprintf($150,19975,$vararg_buffer4)|0);
 }
 $159 = $10;
 (_fclose($159)|0);
 $160 = $4;
 $161 = ((($160)) + 52|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = ($162|0)!=(0|0);
 if ($163) {
  $164 = $4;
  $165 = ((($164)) + 52|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ((($166)) + 8|0);
  $168 = HEAP32[$167>>2]|0;
  _free($168);
  $169 = $4;
  $170 = ((($169)) + 52|0);
  $171 = HEAP32[$170>>2]|0;
  _free($171);
  $172 = $4;
  $173 = ((($172)) + 52|0);
  HEAP32[$173>>2] = 0;
 }
 $3 = -1;
 $174 = $3;
 STACKTOP = sp;return ($174|0);
}
function _fread_uint64($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = $4;
 $7 = (_fread($5,8,1,$6)|0);
 $8 = ($7|0)!=(1);
 if ($8) {
  $2 = -1;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 }
 $9 = (_ed_is_big_462()|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $3;
  (_ed_swap_8p_525($11)|0);
 }
 $2 = 0;
 $12 = $2;
 STACKTOP = sp;return ($12|0);
}
function _ed_swap_8p_525($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_ed_swap_8_520($5,$8)|0);
 $10 = tempRet0;
 $11 = $1;
 $12 = $11;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $10;
 $16 = $1;
 STACKTOP = sp;return ($16|0);
}
function _bgzf_useek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $4;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 29;
 $14 = $13 & 3;
 $15 = ($14|0)!=(0);
 $16 = $4;
 if (!($15)) {
  $17 = ((($16)) + 44|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $5;
  $20 = (_hseek($18,$19,0)|0);
  $21 = ($20|0)<(0);
  $22 = $4;
  if ($21) {
   $23 = HEAP32[$22>>2]|0;
   $24 = $23 & 65535;
   $25 = $24 | 4;
   $26 = HEAP32[$22>>2]|0;
   $27 = $25 & 65535;
   $28 = $26 & -65536;
   $29 = $28 | $27;
   HEAP32[$22>>2] = $29;
   $3 = -1;
   $255 = $3;
   STACKTOP = sp;return ($255|0);
  }
  $30 = ((($22)) + 8|0);
  HEAP32[$30>>2] = 0;
  $31 = $5;
  $32 = ($31|0)<(0);
  $33 = $32 << 31 >> 31;
  $34 = $4;
  $35 = ((($34)) + 16|0);
  $36 = $35;
  $37 = $36;
  HEAP32[$37>>2] = $31;
  $38 = (($36) + 4)|0;
  $39 = $38;
  HEAP32[$39>>2] = $33;
  $40 = $4;
  $41 = ((($40)) + 12|0);
  HEAP32[$41>>2] = 0;
  $42 = $4;
  $43 = (_bgzf_read_block($42)|0);
  $44 = ($43|0)<(0);
  if ($44) {
   $45 = $4;
   $46 = HEAP32[$45>>2]|0;
   $47 = $46 & 65535;
   $48 = $47 | 4;
   $49 = HEAP32[$45>>2]|0;
   $50 = $48 & 65535;
   $51 = $49 & -65536;
   $52 = $51 | $50;
   HEAP32[$45>>2] = $52;
   $3 = -1;
   $255 = $3;
   STACKTOP = sp;return ($255|0);
  } else {
   $53 = $5;
   $54 = ($53|0)<(0);
   $55 = $54 << 31 >> 31;
   $56 = $4;
   $57 = ((($56)) + 24|0);
   $58 = $57;
   $59 = $58;
   HEAP32[$59>>2] = $53;
   $60 = (($58) + 4)|0;
   $61 = $60;
   HEAP32[$61>>2] = $55;
   $3 = 0;
   $255 = $3;
   STACKTOP = sp;return ($255|0);
  }
 }
 $62 = ((($16)) + 52|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)!=(0|0);
 if (!($64)) {
  $65 = $4;
  $66 = HEAP32[$65>>2]|0;
  $67 = $66 & 65535;
  $68 = $67 | 4;
  $69 = HEAP32[$65>>2]|0;
  $70 = $68 & 65535;
  $71 = $69 & -65536;
  $72 = $71 | $70;
  HEAP32[$65>>2] = $72;
  $3 = -1;
  $255 = $3;
  STACKTOP = sp;return ($255|0);
 }
 $7 = 0;
 $73 = $4;
 $74 = ((($73)) + 52|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = HEAP32[$75>>2]|0;
 $77 = (($76) - 1)|0;
 $8 = $77;
 while(1) {
  $78 = $7;
  $79 = $8;
  $80 = ($78|0)<=($79|0);
  if (!($80)) {
   break;
  }
  $81 = $7;
  $82 = $8;
  $83 = (($81) + ($82))|0;
  $84 = (+($83|0));
  $85 = $84 * 0.5;
  $86 = (~~(($85)));
  $9 = $86;
  $87 = $5;
  $88 = ($87|0)<(0);
  $89 = $88 << 31 >> 31;
  $90 = $9;
  $91 = $4;
  $92 = ((($91)) + 52|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ((($93)) + 8|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (($95) + ($90<<4)|0);
  $97 = $96;
  $98 = $97;
  $99 = HEAP32[$98>>2]|0;
  $100 = (($97) + 4)|0;
  $101 = $100;
  $102 = HEAP32[$101>>2]|0;
  $103 = ($89>>>0)<($102>>>0);
  $104 = ($87>>>0)<($99>>>0);
  $105 = ($89|0)==($102|0);
  $106 = $105 & $104;
  $107 = $103 | $106;
  if ($107) {
   $108 = $9;
   $109 = (($108) - 1)|0;
   $8 = $109;
   continue;
  }
  $110 = $5;
  $111 = ($110|0)<(0);
  $112 = $111 << 31 >> 31;
  $113 = $9;
  $114 = $4;
  $115 = ((($114)) + 52|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ((($116)) + 8|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($118) + ($113<<4)|0);
  $120 = $119;
  $121 = $120;
  $122 = HEAP32[$121>>2]|0;
  $123 = (($120) + 4)|0;
  $124 = $123;
  $125 = HEAP32[$124>>2]|0;
  $126 = ($112>>>0)>($125>>>0);
  $127 = ($110>>>0)>=($122>>>0);
  $128 = ($112|0)==($125|0);
  $129 = $128 & $127;
  $130 = $126 | $129;
  if (!($130)) {
   break;
  }
  $131 = $9;
  $132 = (($131) + 1)|0;
  $7 = $132;
 }
 $133 = $7;
 $134 = (($133) - 1)|0;
 $10 = $134;
 $135 = $4;
 $136 = ((($135)) + 44|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = $10;
 $139 = $4;
 $140 = ((($139)) + 52|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = ((($141)) + 8|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = (($143) + ($138<<4)|0);
 $145 = ((($144)) + 8|0);
 $146 = $145;
 $147 = $146;
 $148 = HEAP32[$147>>2]|0;
 $149 = (($146) + 4)|0;
 $150 = $149;
 $151 = HEAP32[$150>>2]|0;
 $152 = (_hseek($137,$148,0)|0);
 $153 = ($152|0)<(0);
 $154 = $4;
 if ($153) {
  $155 = HEAP32[$154>>2]|0;
  $156 = $155 & 65535;
  $157 = $156 | 4;
  $158 = HEAP32[$154>>2]|0;
  $159 = $157 & 65535;
  $160 = $158 & -65536;
  $161 = $160 | $159;
  HEAP32[$154>>2] = $161;
  $3 = -1;
  $255 = $3;
  STACKTOP = sp;return ($255|0);
 }
 $162 = ((($154)) + 8|0);
 HEAP32[$162>>2] = 0;
 $163 = $10;
 $164 = $4;
 $165 = ((($164)) + 52|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = ((($166)) + 8|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = (($168) + ($163<<4)|0);
 $170 = ((($169)) + 8|0);
 $171 = $170;
 $172 = $171;
 $173 = HEAP32[$172>>2]|0;
 $174 = (($171) + 4)|0;
 $175 = $174;
 $176 = HEAP32[$175>>2]|0;
 $177 = $4;
 $178 = ((($177)) + 16|0);
 $179 = $178;
 $180 = $179;
 HEAP32[$180>>2] = $173;
 $181 = (($179) + 4)|0;
 $182 = $181;
 HEAP32[$182>>2] = $176;
 $183 = $4;
 $184 = ((($183)) + 12|0);
 HEAP32[$184>>2] = 0;
 $185 = $4;
 $186 = (_bgzf_read_block($185)|0);
 $187 = ($186|0)<(0);
 if ($187) {
  $188 = $4;
  $189 = HEAP32[$188>>2]|0;
  $190 = $189 & 65535;
  $191 = $190 | 4;
  $192 = HEAP32[$188>>2]|0;
  $193 = $191 & 65535;
  $194 = $192 & -65536;
  $195 = $194 | $193;
  HEAP32[$188>>2] = $195;
  $3 = -1;
  $255 = $3;
  STACKTOP = sp;return ($255|0);
 }
 $196 = $5;
 $197 = ($196|0)<(0);
 $198 = $197 << 31 >> 31;
 $199 = $10;
 $200 = $4;
 $201 = ((($200)) + 52|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = ((($202)) + 8|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = (($204) + ($199<<4)|0);
 $206 = $205;
 $207 = $206;
 $208 = HEAP32[$207>>2]|0;
 $209 = (($206) + 4)|0;
 $210 = $209;
 $211 = HEAP32[$210>>2]|0;
 $212 = (_i64Subtract(($196|0),($198|0),($208|0),($211|0))|0);
 $213 = tempRet0;
 $214 = ($213>>>0)>(0);
 $215 = ($212>>>0)>(0);
 $216 = ($213|0)==(0);
 $217 = $216 & $215;
 $218 = $214 | $217;
 do {
  if ($218) {
   $219 = $5;
   $220 = ($219|0)<(0);
   $221 = $220 << 31 >> 31;
   $222 = $10;
   $223 = $4;
   $224 = ((($223)) + 52|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = ((($225)) + 8|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = (($227) + ($222<<4)|0);
   $229 = $228;
   $230 = $229;
   $231 = HEAP32[$230>>2]|0;
   $232 = (($229) + 4)|0;
   $233 = $232;
   $234 = HEAP32[$233>>2]|0;
   $235 = (_i64Subtract(($219|0),($221|0),($231|0),($234|0))|0);
   $236 = tempRet0;
   $237 = $4;
   $238 = ((($237)) + 12|0);
   HEAP32[$238>>2] = $235;
   $239 = $4;
   $240 = ((($239)) + 12|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = $4;
   $243 = ((($242)) + 8|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = ($241|0)<=($244|0);
   if ($245) {
    break;
   } else {
    ___assert_fail((20008|0),(18787|0),1321,(20045|0));
    // unreachable;
   }
  }
 } while(0);
 $246 = $5;
 $247 = ($246|0)<(0);
 $248 = $247 << 31 >> 31;
 $249 = $4;
 $250 = ((($249)) + 24|0);
 $251 = $250;
 $252 = $251;
 HEAP32[$252>>2] = $246;
 $253 = (($251) + 4)|0;
 $254 = $253;
 HEAP32[$254>>2] = $248;
 $3 = 0;
 $255 = $3;
 STACKTOP = sp;return ($255|0);
}
function _bgzf_utell($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _sam_hdr_add_lines($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $14 = sp + 32|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $23 = $6;
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $25 = $5;
  $26 = (_strlen($25)|0);
  $6 = $26;
 }
 $27 = $4;
 $28 = (_ks_len($27)|0);
 $9 = $28;
 $29 = $5;
 $30 = $6;
 $31 = $4;
 $32 = (_kputsn_542($29,$30,$31)|0);
 $33 = (-1)==($32|0);
 if ($33) {
  $3 = -1;
  $376 = $3;
  STACKTOP = sp;return ($376|0);
 }
 $34 = $4;
 $35 = (_ks_str($34)|0);
 $36 = $9;
 $37 = (($35) + ($36)|0);
 $10 = $37;
 $7 = 0;
 $8 = 1;
 L8: while(1) {
  $38 = $7;
  $39 = $6;
  $40 = ($38|0)<($39|0);
  if (!($40)) {
   label = 68;
   break;
  }
  $41 = $7;
  $42 = $10;
  $43 = (($42) + ($41)|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44 << 24 >> 24;
  $46 = ($45|0)!=(0);
  if (!($46)) {
   label = 68;
   break;
  }
  $47 = $7;
  $13 = $47;
  $48 = $7;
  $49 = $10;
  $50 = (($49) + ($48)|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51 << 24 >> 24;
  $53 = ($52|0)!=(64);
  $54 = $7;
  if ($53) {
   label = 9;
   break;
  }
  $79 = (($54) + 1)|0;
  $80 = $10;
  $81 = (($80) + ($79)|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82 << 24 >> 24;
  $84 = $83 << 8;
  $85 = $7;
  $86 = (($85) + 2)|0;
  $87 = $10;
  $88 = (($87) + ($86)|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = $89 << 24 >> 24;
  $91 = $84 | $90;
  $11 = $91;
  $92 = $7;
  $93 = (($92) + 1)|0;
  $94 = $10;
  $95 = (($94) + ($93)|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96 << 24 >> 24;
  $98 = ($97|0)<(65);
  if ($98) {
   label = 19;
   break;
  }
  $99 = $7;
  $100 = (($99) + 1)|0;
  $101 = $10;
  $102 = (($101) + ($100)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = $103 << 24 >> 24;
  $105 = ($104|0)>(122);
  if ($105) {
   label = 19;
   break;
  }
  $106 = $7;
  $107 = (($106) + 2)|0;
  $108 = $10;
  $109 = (($108) + ($107)|0);
  $110 = HEAP8[$109>>0]|0;
  $111 = $110 << 24 >> 24;
  $112 = ($111|0)<(65);
  if ($112) {
   label = 19;
   break;
  }
  $113 = $7;
  $114 = (($113) + 2)|0;
  $115 = $10;
  $116 = (($115) + ($114)|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = $117 << 24 >> 24;
  $119 = ($118|0)>(122);
  if ($119) {
   label = 19;
   break;
  }
  $127 = $7;
  $128 = (($127) + 3)|0;
  $7 = $128;
  $129 = $7;
  $130 = $10;
  $131 = (($130) + ($129)|0);
  $132 = HEAP8[$131>>0]|0;
  $133 = $132 << 24 >> 24;
  $134 = ($133|0)==(10);
  if (!($134)) {
   $135 = $4;
   $136 = ((($135)) + 20|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = (_pool_alloc($137)|0);
   $15 = $138;
   $139 = ($138|0)!=(0|0);
   if (!($139)) {
    label = 22;
    break;
   }
   $140 = $4;
   $141 = ((($140)) + 12|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = $11;
   $144 = (_kh_put_sam_hdr($142,$143,$14)|0);
   $12 = $144;
   $145 = (-1)==($144|0);
   if ($145) {
    label = 24;
    break;
   }
   $146 = HEAP32[$14>>2]|0;
   $147 = ($146|0)!=(0);
   if ($147) {
    $179 = $15;
    $180 = $12;
    $181 = $4;
    $182 = ((($181)) + 12|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = ((($183)) + 24|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = (($185) + ($180<<2)|0);
    HEAP32[$186>>2] = $179;
    $187 = $15;
    $188 = $15;
    HEAP32[$188>>2] = $187;
    $189 = $15;
    $190 = ((($189)) + 4|0);
    HEAP32[$190>>2] = $187;
    $191 = $15;
    $192 = ((($191)) + 12|0);
    HEAP32[$192>>2] = 0;
   } else {
    $148 = $12;
    $149 = $4;
    $150 = ((($149)) + 12|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = ((($151)) + 24|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = (($153) + ($148<<2)|0);
    $155 = HEAP32[$154>>2]|0;
    $19 = $155;
    $156 = $19;
    $157 = ((($156)) + 4|0);
    $158 = HEAP32[$157>>2]|0;
    $20 = $158;
    $159 = $20;
    $160 = HEAP32[$159>>2]|0;
    $161 = $19;
    $162 = ($160|0)==($161|0);
    if (!($162)) {
     label = 27;
     break;
    }
    $163 = $15;
    $164 = $20;
    HEAP32[$164>>2] = $163;
    $165 = $20;
    $166 = $15;
    $167 = ((($166)) + 4|0);
    HEAP32[$167>>2] = $165;
    $168 = $15;
    $169 = $19;
    $170 = ((($169)) + 4|0);
    HEAP32[$170>>2] = $168;
    $171 = $19;
    $172 = $15;
    HEAP32[$172>>2] = $171;
    $173 = $20;
    $174 = ((($173)) + 12|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = (($175) + 1)|0;
    $177 = $15;
    $178 = ((($177)) + 12|0);
    HEAP32[$178>>2] = $176;
   }
   $17 = 0;
   $193 = $11;
   $194 = $193 >>> 8;
   $195 = ($194|0)==(67);
   if ($195) {
    $196 = $11;
    $197 = $196 & 255;
    $198 = ($197|0)==(79);
    if ($198) {
     $199 = $7;
     $200 = $10;
     $201 = (($200) + ($199)|0);
     $202 = HEAP8[$201>>0]|0;
     $203 = $202 << 24 >> 24;
     $204 = ($203|0)!=(9);
     if ($204) {
      label = 33;
      break;
     }
     $212 = $7;
     $213 = (($212) + 1)|0;
     $7 = $213;
     $21 = $213;
     while(1) {
      $214 = $21;
      $215 = $6;
      $216 = ($214|0)<($215|0);
      if (!($216)) {
       break;
      }
      $217 = $21;
      $218 = $10;
      $219 = (($218) + ($217)|0);
      $220 = HEAP8[$219>>0]|0;
      $221 = $220 << 24 >> 24;
      $222 = ($221|0)!=(0);
      if (!($222)) {
       break;
      }
      $223 = $21;
      $224 = $10;
      $225 = (($224) + ($223)|0);
      $226 = HEAP8[$225>>0]|0;
      $227 = $226 << 24 >> 24;
      $228 = ($227|0)!=(10);
      if (!($228)) {
       break;
      }
      $229 = $21;
      $230 = (($229) + 1)|0;
      $21 = $230;
     }
     $231 = $4;
     $232 = ((($231)) + 24|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = (_pool_alloc($233)|0);
     $16 = $234;
     $235 = $15;
     $236 = ((($235)) + 8|0);
     HEAP32[$236>>2] = $234;
     $237 = ($234|0)!=(0|0);
     if (!($237)) {
      label = 40;
      break;
     }
     $238 = $4;
     $239 = ((($238)) + 16|0);
     $240 = HEAP32[$239>>2]|0;
     $241 = $7;
     $242 = $10;
     $243 = (($242) + ($241)|0);
     $244 = $21;
     $245 = $7;
     $246 = (($244) - ($245))|0;
     $247 = (_string_ndup($240,$243,$246)|0);
     $248 = $16;
     $249 = ((($248)) + 4|0);
     HEAP32[$249>>2] = $247;
     $250 = $21;
     $251 = $7;
     $252 = (($250) - ($251))|0;
     $253 = $16;
     $254 = ((($253)) + 8|0);
     HEAP32[$254>>2] = $252;
     $255 = $16;
     HEAP32[$255>>2] = 0;
     $256 = $16;
     $257 = ((($256)) + 4|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = ($258|0)!=(0|0);
     if (!($259)) {
      label = 42;
      break;
     }
     $260 = $21;
     $7 = $260;
    } else {
     label = 44;
    }
   } else {
    label = 44;
   }
   L38: do {
    if ((label|0) == 44) {
     while(1) {
      label = 0;
      $261 = $7;
      $262 = $10;
      $263 = (($262) + ($261)|0);
      $264 = HEAP8[$263>>0]|0;
      $265 = $264 << 24 >> 24;
      $266 = ($265|0)!=(9);
      if ($266) {
       label = 45;
       break L8;
      }
      $274 = $7;
      $275 = (($274) + 1)|0;
      $7 = $275;
      $22 = $275;
      while(1) {
       $276 = $22;
       $277 = $6;
       $278 = ($276|0)<($277|0);
       if (!($278)) {
        break;
       }
       $279 = $22;
       $280 = $10;
       $281 = (($280) + ($279)|0);
       $282 = HEAP8[$281>>0]|0;
       $283 = $282 << 24 >> 24;
       $284 = ($283|0)!=(0);
       if (!($284)) {
        break;
       }
       $285 = $22;
       $286 = $10;
       $287 = (($286) + ($285)|0);
       $288 = HEAP8[$287>>0]|0;
       $289 = $288 << 24 >> 24;
       $290 = ($289|0)!=(10);
       if (!($290)) {
        break;
       }
       $291 = $22;
       $292 = $10;
       $293 = (($292) + ($291)|0);
       $294 = HEAP8[$293>>0]|0;
       $295 = $294 << 24 >> 24;
       $296 = ($295|0)!=(9);
       if (!($296)) {
        break;
       }
       $297 = $22;
       $298 = (($297) + 1)|0;
       $22 = $298;
      }
      $299 = $4;
      $300 = ((($299)) + 24|0);
      $301 = HEAP32[$300>>2]|0;
      $302 = (_pool_alloc($301)|0);
      $16 = $302;
      $303 = ($302|0)!=(0|0);
      if (!($303)) {
       label = 53;
       break L8;
      }
      $304 = $4;
      $305 = ((($304)) + 16|0);
      $306 = HEAP32[$305>>2]|0;
      $307 = $7;
      $308 = $10;
      $309 = (($308) + ($307)|0);
      $310 = $22;
      $311 = $7;
      $312 = (($310) - ($311))|0;
      $313 = (_string_ndup($306,$309,$312)|0);
      $314 = $16;
      $315 = ((($314)) + 4|0);
      HEAP32[$315>>2] = $313;
      $316 = $22;
      $317 = $7;
      $318 = (($316) - ($317))|0;
      $319 = $16;
      $320 = ((($319)) + 8|0);
      HEAP32[$320>>2] = $318;
      $321 = $16;
      HEAP32[$321>>2] = 0;
      $322 = $16;
      $323 = ((($322)) + 4|0);
      $324 = HEAP32[$323>>2]|0;
      $325 = ($324|0)!=(0|0);
      if (!($325)) {
       label = 55;
       break L8;
      }
      $326 = $16;
      $327 = ((($326)) + 8|0);
      $328 = HEAP32[$327>>2]|0;
      $329 = ($328|0)<(3);
      if ($329) {
       label = 58;
       break L8;
      }
      $330 = $16;
      $331 = ((($330)) + 4|0);
      $332 = HEAP32[$331>>2]|0;
      $333 = ((($332)) + 2|0);
      $334 = HEAP8[$333>>0]|0;
      $335 = $334 << 24 >> 24;
      $336 = ($335|0)!=(58);
      if ($336) {
       label = 58;
       break L8;
      }
      $344 = $17;
      $345 = ($344|0)!=(0|0);
      $346 = $16;
      if ($345) {
       $347 = $17;
       HEAP32[$347>>2] = $346;
      } else {
       $348 = $15;
       $349 = ((($348)) + 8|0);
       HEAP32[$349>>2] = $346;
      }
      $350 = $16;
      $17 = $350;
      $351 = $22;
      $7 = $351;
      $352 = $7;
      $353 = $6;
      $354 = ($352|0)<($353|0);
      if (!($354)) {
       break L38;
      }
      $355 = $7;
      $356 = $10;
      $357 = (($356) + ($355)|0);
      $358 = HEAP8[$357>>0]|0;
      $359 = $358 << 24 >> 24;
      $360 = ($359|0)!=(0);
      if (!($360)) {
       break L38;
      }
      $361 = $7;
      $362 = $10;
      $363 = (($362) + ($361)|0);
      $364 = HEAP8[$363>>0]|0;
      $365 = $364 << 24 >> 24;
      $366 = ($365|0)!=(10);
      if ($366) {
       label = 44;
      } else {
       break;
      }
     }
    }
   } while(0);
   $367 = $4;
   $368 = $11;
   $369 = $15;
   $370 = (_sam_hdr_update_hashes($367,$368,$369)|0);
   $371 = (-1)==($370|0);
   if ($371) {
    label = 66;
    break;
   }
  }
  $372 = $7;
  $373 = (($372) + 1)|0;
  $7 = $373;
  $374 = $8;
  $375 = (($374) + 1)|0;
  $8 = $375;
 }
 switch (label|0) {
  case 9: {
   $18 = $54;
   while(1) {
    $55 = $18;
    $56 = $6;
    $57 = ($55|0)<($56|0);
    if (!($57)) {
     break;
    }
    $58 = $18;
    $59 = $10;
    $60 = (($59) + ($58)|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61 << 24 >> 24;
    $63 = ($62|0)!=(0);
    if (!($63)) {
     break;
    }
    $64 = $18;
    $65 = $10;
    $66 = (($65) + ($64)|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67 << 24 >> 24;
    $69 = ($68|0)!=(10);
    if (!($69)) {
     break;
    }
    $70 = $18;
    $71 = (($70) + 1)|0;
    $18 = $71;
   }
   $72 = $13;
   $73 = $10;
   $74 = (($73) + ($72)|0);
   $75 = $6;
   $76 = $13;
   $77 = (($75) - ($76))|0;
   $78 = $8;
   _sam_hdr_error(20056,$74,$77,$78);
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 19: {
   $120 = $13;
   $121 = $10;
   $122 = (($121) + ($120)|0);
   $123 = $6;
   $124 = $13;
   $125 = (($123) - ($124))|0;
   $126 = $8;
   _sam_hdr_error(20092,$122,$125,$126);
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 22: {
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 24: {
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 27: {
   ___assert_fail((20138|0),(20151|0),335,(20169|0));
   // unreachable;
   break;
  }
  case 33: {
   $205 = $13;
   $206 = $10;
   $207 = (($206) + ($205)|0);
   $208 = $6;
   $209 = $13;
   $210 = (($208) - ($209))|0;
   $211 = $8;
   _sam_hdr_error(20187,$207,$210,$211);
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 40: {
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 42: {
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 45: {
   $267 = $13;
   $268 = $10;
   $269 = (($268) + ($267)|0);
   $270 = $6;
   $271 = $13;
   $272 = (($270) - ($271))|0;
   $273 = $8;
   _sam_hdr_error(20187,$269,$272,$273);
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 53: {
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 55: {
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 58: {
   $337 = $13;
   $338 = $10;
   $339 = (($338) + ($337)|0);
   $340 = $6;
   $341 = $13;
   $342 = (($340) - ($341))|0;
   $343 = $8;
   _sam_hdr_error(20199,$339,$342,$343);
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 66: {
   $3 = -1;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 68: {
   $3 = 0;
   $376 = $3;
   STACKTOP = sp;return ($376|0);
   break;
  }
 }
 return (0)|0;
}
function _ks_len($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _kputsn_542($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6;
 $9 = HEAP32[$8>>2]|0;
 $10 = $5;
 $11 = (($9) + ($10))|0;
 $12 = (($11) + 1)|0;
 $13 = $6;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12>>>0)>=($15>>>0);
 do {
  if ($16) {
   $17 = $6;
   $18 = HEAP32[$17>>2]|0;
   $19 = $5;
   $20 = (($18) + ($19))|0;
   $21 = (($20) + 2)|0;
   $22 = $6;
   $23 = ((($22)) + 4|0);
   HEAP32[$23>>2] = $21;
   $24 = $6;
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + -1)|0;
   HEAP32[$25>>2] = $27;
   $28 = $6;
   $29 = ((($28)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $30 >>> 1;
   $32 = $6;
   $33 = ((($32)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $34 | $31;
   HEAP32[$33>>2] = $35;
   $36 = $6;
   $37 = ((($36)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $38 >>> 2;
   $40 = $6;
   $41 = ((($40)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $42 | $39;
   HEAP32[$41>>2] = $43;
   $44 = $6;
   $45 = ((($44)) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $46 >>> 4;
   $48 = $6;
   $49 = ((($48)) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $50 | $47;
   HEAP32[$49>>2] = $51;
   $52 = $6;
   $53 = ((($52)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 >>> 8;
   $56 = $6;
   $57 = ((($56)) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $58 | $55;
   HEAP32[$57>>2] = $59;
   $60 = $6;
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $62 >>> 16;
   $64 = $6;
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $66 | $63;
   HEAP32[$65>>2] = $67;
   $68 = $6;
   $69 = ((($68)) + 4|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($70) + 1)|0;
   HEAP32[$69>>2] = $71;
   $72 = $6;
   $73 = ((($72)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $6;
   $76 = ((($75)) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (_realloc($74,$77)|0);
   $7 = $78;
   $79 = ($78|0)!=(0|0);
   if ($79) {
    $80 = $7;
    $81 = $6;
    $82 = ((($81)) + 8|0);
    HEAP32[$82>>2] = $80;
    break;
   }
   $3 = -1;
   $102 = $3;
   STACKTOP = sp;return ($102|0);
  }
 } while(0);
 $83 = $6;
 $84 = ((($83)) + 8|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $6;
 $87 = HEAP32[$86>>2]|0;
 $88 = (($85) + ($87)|0);
 $89 = $4;
 $90 = $5;
 _memcpy(($88|0),($89|0),($90|0))|0;
 $91 = $5;
 $92 = $6;
 $93 = HEAP32[$92>>2]|0;
 $94 = (($93) + ($91))|0;
 HEAP32[$92>>2] = $94;
 $95 = $6;
 $96 = HEAP32[$95>>2]|0;
 $97 = $6;
 $98 = ((($97)) + 8|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = (($99) + ($96)|0);
 HEAP8[$100>>0] = 0;
 $101 = $5;
 $3 = $101;
 $102 = $3;
 STACKTOP = sp;return ($102|0);
}
function _ks_str($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _sam_hdr_error($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $9 = $8;
  $10 = $6;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $8;
  $13 = $5;
  $14 = (($13) + ($12)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = ($16|0)!=(10);
  if (!($17)) {
   break;
  }
  $18 = $8;
  $19 = (($18) + 1)|0;
  $8 = $19;
 }
 $20 = HEAP32[2410]|0;
 $21 = $4;
 $22 = $7;
 $23 = $8;
 $24 = $5;
 HEAP32[$vararg_buffer>>2] = $21;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $22;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $23;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $24;
 (_fprintf($20,20224,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _kh_put_sam_hdr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $4;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16>>>0)>=($19>>>0);
 do {
  if ($20) {
   $21 = $4;
   $22 = HEAP32[$21>>2]|0;
   $23 = $4;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 << 1;
   $27 = ($22>>>0)>($26>>>0);
   $28 = $4;
   $29 = $4;
   $30 = HEAP32[$29>>2]|0;
   if ($27) {
    $31 = (($30) - 1)|0;
    $32 = (_kh_resize_sam_hdr($28,$31)|0);
    $33 = ($32|0)<(0);
    if (!($33)) {
     break;
    }
    $34 = $6;
    HEAP32[$34>>2] = -1;
    $35 = $4;
    $36 = HEAP32[$35>>2]|0;
    $3 = $36;
    $228 = $3;
    STACKTOP = sp;return ($228|0);
   } else {
    $37 = (($30) + 1)|0;
    $38 = (_kh_resize_sam_hdr($28,$37)|0);
    $39 = ($38|0)<(0);
    if (!($39)) {
     break;
    }
    $40 = $6;
    HEAP32[$40>>2] = -1;
    $41 = $4;
    $42 = HEAP32[$41>>2]|0;
    $3 = $42;
    $228 = $3;
    STACKTOP = sp;return ($228|0);
   }
  }
 } while(0);
 $43 = $4;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) - 1)|0;
 $12 = $45;
 $13 = 0;
 $46 = $4;
 $47 = HEAP32[$46>>2]|0;
 $10 = $47;
 $7 = $47;
 $48 = $5;
 $8 = $48;
 $49 = $8;
 $50 = $12;
 $51 = $49 & $50;
 $9 = $51;
 $52 = $9;
 $53 = $52 >>> 4;
 $54 = $4;
 $55 = ((($54)) + 16|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + ($53<<2)|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $9;
 $60 = $59 & 15;
 $61 = $60 << 1;
 $62 = $58 >>> $61;
 $63 = $62 & 2;
 $64 = ($63|0)!=(0);
 $65 = $9;
 do {
  if ($64) {
   $7 = $65;
  } else {
   $11 = $65;
   while(1) {
    $66 = $9;
    $67 = $66 >>> 4;
    $68 = $4;
    $69 = ((($68)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($70) + ($67<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $9;
    $74 = $73 & 15;
    $75 = $74 << 1;
    $76 = $72 >>> $75;
    $77 = $76 & 2;
    $78 = ($77|0)!=(0);
    if ($78) {
     break;
    }
    $79 = $9;
    $80 = $79 >>> 4;
    $81 = $4;
    $82 = ((($81)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = (($83) + ($80<<2)|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $9;
    $87 = $86 & 15;
    $88 = $87 << 1;
    $89 = $85 >>> $88;
    $90 = $89 & 1;
    $91 = ($90|0)!=(0);
    if (!($91)) {
     $92 = $9;
     $93 = $4;
     $94 = ((($93)) + 20|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = (($95) + ($92<<2)|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = $5;
     $99 = ($97|0)==($98|0);
     $100 = $99 ^ 1;
     if (!($100)) {
      break;
     }
    }
    $101 = $9;
    $102 = $101 >>> 4;
    $103 = $4;
    $104 = ((($103)) + 16|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (($105) + ($102<<2)|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = $9;
    $109 = $108 & 15;
    $110 = $109 << 1;
    $111 = $107 >>> $110;
    $112 = $111 & 1;
    $113 = ($112|0)!=(0);
    if ($113) {
     $114 = $9;
     $10 = $114;
    }
    $115 = $9;
    $116 = $13;
    $117 = (($116) + 1)|0;
    $13 = $117;
    $118 = (($115) + ($117))|0;
    $119 = $12;
    $120 = $118 & $119;
    $9 = $120;
    $121 = $9;
    $122 = $11;
    $123 = ($121|0)==($122|0);
    if ($123) {
     label = 16;
     break;
    }
   }
   if ((label|0) == 16) {
    $124 = $10;
    $7 = $124;
   }
   $125 = $7;
   $126 = $4;
   $127 = HEAP32[$126>>2]|0;
   $128 = ($125|0)==($127|0);
   if ($128) {
    $129 = $9;
    $130 = $129 >>> 4;
    $131 = $4;
    $132 = ((($131)) + 16|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (($133) + ($130<<2)|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $9;
    $137 = $136 & 15;
    $138 = $137 << 1;
    $139 = $135 >>> $138;
    $140 = $139 & 2;
    $141 = ($140|0)!=(0);
    if ($141) {
     $142 = $10;
     $143 = $4;
     $144 = HEAP32[$143>>2]|0;
     $145 = ($142|0)!=($144|0);
     if ($145) {
      $146 = $10;
      $7 = $146;
      break;
     }
    }
    $147 = $9;
    $7 = $147;
   }
  }
 } while(0);
 $148 = $7;
 $149 = $148 >>> 4;
 $150 = $4;
 $151 = ((($150)) + 16|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = (($152) + ($149<<2)|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = $7;
 $156 = $155 & 15;
 $157 = $156 << 1;
 $158 = $154 >>> $157;
 $159 = $158 & 2;
 $160 = ($159|0)!=(0);
 do {
  if ($160) {
   $161 = $5;
   $162 = $7;
   $163 = $4;
   $164 = ((($163)) + 20|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = (($165) + ($162<<2)|0);
   HEAP32[$166>>2] = $161;
   $167 = $7;
   $168 = $167 & 15;
   $169 = $168 << 1;
   $170 = 3 << $169;
   $171 = $170 ^ -1;
   $172 = $7;
   $173 = $172 >>> 4;
   $174 = $4;
   $175 = ((($174)) + 16|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = (($176) + ($173<<2)|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = $178 & $171;
   HEAP32[$177>>2] = $179;
   $180 = $4;
   $181 = ((($180)) + 4|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = (($182) + 1)|0;
   HEAP32[$181>>2] = $183;
   $184 = $4;
   $185 = ((($184)) + 8|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = (($186) + 1)|0;
   HEAP32[$185>>2] = $187;
   $188 = $6;
   HEAP32[$188>>2] = 1;
  } else {
   $189 = $7;
   $190 = $189 >>> 4;
   $191 = $4;
   $192 = ((($191)) + 16|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = (($193) + ($190<<2)|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = $7;
   $197 = $196 & 15;
   $198 = $197 << 1;
   $199 = $195 >>> $198;
   $200 = $199 & 1;
   $201 = ($200|0)!=(0);
   if ($201) {
    $202 = $5;
    $203 = $7;
    $204 = $4;
    $205 = ((($204)) + 20|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = (($206) + ($203<<2)|0);
    HEAP32[$207>>2] = $202;
    $208 = $7;
    $209 = $208 & 15;
    $210 = $209 << 1;
    $211 = 3 << $210;
    $212 = $211 ^ -1;
    $213 = $7;
    $214 = $213 >>> 4;
    $215 = $4;
    $216 = ((($215)) + 16|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = (($217) + ($214<<2)|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = $219 & $212;
    HEAP32[$218>>2] = $220;
    $221 = $4;
    $222 = ((($221)) + 4|0);
    $223 = HEAP32[$222>>2]|0;
    $224 = (($223) + 1)|0;
    HEAP32[$222>>2] = $224;
    $225 = $6;
    HEAP32[$225>>2] = 2;
    break;
   } else {
    $226 = $6;
    HEAP32[$226>>2] = 0;
    break;
   }
  }
 } while(0);
 $227 = $7;
 $3 = $227;
 $228 = $3;
 STACKTOP = sp;return ($228|0);
}
function _sam_hdr_update_hashes($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $11 = sp + 60|0;
 $16 = sp + 40|0;
 $25 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $28 = $5;
 $29 = $28 >> 8;
 $30 = ($29|0)==(83);
 do {
  if ($30) {
   $31 = $5;
   $32 = $31 & 255;
   $33 = ($32|0)==(81);
   if ($33) {
    $34 = $4;
    $35 = ((($34)) + 28|0);
    $36 = HEAP32[$35>>2]|0;
    $9 = $36;
    $37 = $4;
    $38 = ((($37)) + 32|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $4;
    $41 = ((($40)) + 28|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (($42) + 1)|0;
    $44 = $43<<4;
    $45 = (_realloc($39,$44)|0);
    $8 = $45;
    $46 = $8;
    $47 = ($46|0)!=(0|0);
    if (!($47)) {
     $3 = -1;
     $672 = $3;
     STACKTOP = sp;return ($672|0);
    }
    $48 = $8;
    $49 = $4;
    $50 = ((($49)) + 32|0);
    HEAP32[$50>>2] = $48;
    $51 = $6;
    $52 = ((($51)) + 8|0);
    $53 = HEAP32[$52>>2]|0;
    $7 = $53;
    $54 = $9;
    $55 = $4;
    $56 = ((($55)) + 32|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (($57) + ($54<<4)|0);
    HEAP32[$58>>2] = 0;
    $59 = $9;
    $60 = $4;
    $61 = ((($60)) + 32|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (($62) + ($59<<4)|0);
    $64 = ((($63)) + 4|0);
    HEAP32[$64>>2] = 0;
    $65 = $6;
    $66 = $9;
    $67 = $4;
    $68 = ((($67)) + 32|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = (($69) + ($66<<4)|0);
    $71 = ((($70)) + 8|0);
    HEAP32[$71>>2] = $65;
    $72 = $7;
    $73 = $9;
    $74 = $4;
    $75 = ((($74)) + 32|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (($76) + ($73<<4)|0);
    $78 = ((($77)) + 12|0);
    HEAP32[$78>>2] = $72;
    while(1) {
     $79 = $7;
     $80 = ($79|0)!=(0|0);
     if (!($80)) {
      break;
     }
     $81 = $7;
     $82 = ((($81)) + 4|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = HEAP8[$83>>0]|0;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)==(83);
     if ($86) {
      $87 = $7;
      $88 = ((($87)) + 4|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = ((($89)) + 1|0);
      $91 = HEAP8[$90>>0]|0;
      $92 = $91 << 24 >> 24;
      $93 = ($92|0)==(78);
      if ($93) {
       $94 = $7;
       $95 = ((($94)) + 8|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = (_malloc($96)|0);
       $98 = $9;
       $99 = $4;
       $100 = ((($99)) + 32|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = (($101) + ($98<<4)|0);
       HEAP32[$102>>2] = $97;
       $103 = ($97|0)!=(0|0);
       if (!($103)) {
        label = 10;
        break;
       }
       $104 = $9;
       $105 = $4;
       $106 = ((($105)) + 32|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = (($107) + ($104<<4)|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = $7;
       $111 = ((($110)) + 4|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = ((($112)) + 3|0);
       $114 = $7;
       $115 = ((($114)) + 8|0);
       $116 = HEAP32[$115>>2]|0;
       $117 = (($116) - 3)|0;
       (_strncpy($109,$113,$117)|0);
       $118 = $7;
       $119 = ((($118)) + 8|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = (($120) - 3)|0;
       $122 = $9;
       $123 = $4;
       $124 = ((($123)) + 32|0);
       $125 = HEAP32[$124>>2]|0;
       $126 = (($125) + ($122<<4)|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = (($127) + ($121)|0);
       HEAP8[$128>>0] = 0;
      } else {
       label = 12;
      }
     } else {
      label = 12;
     }
     if ((label|0) == 12) {
      label = 0;
      $129 = $7;
      $130 = ((($129)) + 4|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = HEAP8[$131>>0]|0;
      $133 = $132 << 24 >> 24;
      $134 = ($133|0)==(76);
      if ($134) {
       $135 = $7;
       $136 = ((($135)) + 4|0);
       $137 = HEAP32[$136>>2]|0;
       $138 = ((($137)) + 1|0);
       $139 = HEAP8[$138>>0]|0;
       $140 = $139 << 24 >> 24;
       $141 = ($140|0)==(78);
       if ($141) {
        $142 = $7;
        $143 = ((($142)) + 4|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = ((($144)) + 3|0);
        $146 = (_atoi($145)|0);
        $147 = $9;
        $148 = $4;
        $149 = ((($148)) + 32|0);
        $150 = HEAP32[$149>>2]|0;
        $151 = (($150) + ($147<<4)|0);
        $152 = ((($151)) + 4|0);
        HEAP32[$152>>2] = $146;
       }
      }
     }
     $153 = $7;
     $154 = HEAP32[$153>>2]|0;
     $7 = $154;
    }
    if ((label|0) == 10) {
     $3 = -1;
     $672 = $3;
     STACKTOP = sp;return ($672|0);
    }
    $155 = $9;
    $156 = $4;
    $157 = ((($156)) + 32|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = (($158) + ($155<<4)|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = ($160|0)!=(0|0);
    if (!($161)) {
     $3 = -1;
     $672 = $3;
     STACKTOP = sp;return ($672|0);
    }
    $162 = $4;
    $163 = ((($162)) + 36|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = $9;
    $166 = $4;
    $167 = ((($166)) + 32|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = (($168) + ($165<<4)|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = (_kh_put_m_s2i($164,$170,$11)|0);
    $10 = $171;
    $172 = HEAP32[$11>>2]|0;
    $173 = (-1)==($172|0);
    if (!($173)) {
     $174 = $9;
     $175 = $10;
     $176 = $4;
     $177 = ((($176)) + 36|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = ((($178)) + 24|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = (($180) + ($175<<2)|0);
     HEAP32[$181>>2] = $174;
     $182 = $4;
     $183 = ((($182)) + 28|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = (($184) + 1)|0;
     HEAP32[$183>>2] = $185;
     break;
    }
    $3 = -1;
    $672 = $3;
    STACKTOP = sp;return ($672|0);
   }
  }
 } while(0);
 $186 = $5;
 $187 = $186 >> 8;
 $188 = ($187|0)==(82);
 do {
  if ($188) {
   $189 = $5;
   $190 = $189 & 255;
   $191 = ($190|0)==(71);
   if ($191) {
    $192 = $4;
    $193 = ((($192)) + 40|0);
    $194 = HEAP32[$193>>2]|0;
    $14 = $194;
    $195 = $4;
    $196 = ((($195)) + 44|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = $4;
    $199 = ((($198)) + 40|0);
    $200 = HEAP32[$199>>2]|0;
    $201 = (($200) + 1)|0;
    $202 = ($201*20)|0;
    $203 = (_realloc($197,$202)|0);
    $13 = $203;
    $204 = $13;
    $205 = ($204|0)!=(0|0);
    if (!($205)) {
     $3 = -1;
     $672 = $3;
     STACKTOP = sp;return ($672|0);
    }
    $206 = $13;
    $207 = $4;
    $208 = ((($207)) + 44|0);
    HEAP32[$208>>2] = $206;
    $209 = $6;
    $210 = ((($209)) + 8|0);
    $211 = HEAP32[$210>>2]|0;
    $12 = $211;
    $212 = $14;
    $213 = $4;
    $214 = ((($213)) + 44|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = (($215) + (($212*20)|0)|0);
    HEAP32[$216>>2] = 0;
    $217 = $14;
    $218 = $4;
    $219 = ((($218)) + 44|0);
    $220 = HEAP32[$219>>2]|0;
    $221 = (($220) + (($217*20)|0)|0);
    $222 = ((($221)) + 12|0);
    HEAP32[$222>>2] = 0;
    $223 = $6;
    $224 = $14;
    $225 = $4;
    $226 = ((($225)) + 44|0);
    $227 = HEAP32[$226>>2]|0;
    $228 = (($227) + (($224*20)|0)|0);
    $229 = ((($228)) + 4|0);
    HEAP32[$229>>2] = $223;
    $230 = $12;
    $231 = $14;
    $232 = $4;
    $233 = ((($232)) + 44|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = (($234) + (($231*20)|0)|0);
    $236 = ((($235)) + 8|0);
    HEAP32[$236>>2] = $230;
    $237 = $14;
    $238 = $14;
    $239 = $4;
    $240 = ((($239)) + 44|0);
    $241 = HEAP32[$240>>2]|0;
    $242 = (($241) + (($238*20)|0)|0);
    $243 = ((($242)) + 16|0);
    HEAP32[$243>>2] = $237;
    while(1) {
     $244 = $12;
     $245 = ($244|0)!=(0|0);
     if (!($245)) {
      break;
     }
     $246 = $12;
     $247 = ((($246)) + 4|0);
     $248 = HEAP32[$247>>2]|0;
     $249 = HEAP8[$248>>0]|0;
     $250 = $249 << 24 >> 24;
     $251 = ($250|0)==(73);
     if ($251) {
      $252 = $12;
      $253 = ((($252)) + 4|0);
      $254 = HEAP32[$253>>2]|0;
      $255 = ((($254)) + 1|0);
      $256 = HEAP8[$255>>0]|0;
      $257 = $256 << 24 >> 24;
      $258 = ($257|0)==(68);
      if ($258) {
       $259 = $12;
       $260 = ((($259)) + 8|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = (_malloc($261)|0);
       $263 = $14;
       $264 = $4;
       $265 = ((($264)) + 44|0);
       $266 = HEAP32[$265>>2]|0;
       $267 = (($266) + (($263*20)|0)|0);
       HEAP32[$267>>2] = $262;
       $268 = ($262|0)!=(0|0);
       if (!($268)) {
        label = 30;
        break;
       }
       $269 = $14;
       $270 = $4;
       $271 = ((($270)) + 44|0);
       $272 = HEAP32[$271>>2]|0;
       $273 = (($272) + (($269*20)|0)|0);
       $274 = HEAP32[$273>>2]|0;
       $275 = $12;
       $276 = ((($275)) + 4|0);
       $277 = HEAP32[$276>>2]|0;
       $278 = ((($277)) + 3|0);
       $279 = $12;
       $280 = ((($279)) + 8|0);
       $281 = HEAP32[$280>>2]|0;
       $282 = (($281) - 3)|0;
       (_strncpy($274,$278,$282)|0);
       $283 = $12;
       $284 = ((($283)) + 8|0);
       $285 = HEAP32[$284>>2]|0;
       $286 = (($285) - 3)|0;
       $287 = $14;
       $288 = $4;
       $289 = ((($288)) + 44|0);
       $290 = HEAP32[$289>>2]|0;
       $291 = (($290) + (($287*20)|0)|0);
       $292 = HEAP32[$291>>2]|0;
       $293 = (($292) + ($286)|0);
       HEAP8[$293>>0] = 0;
       $294 = $14;
       $295 = $4;
       $296 = ((($295)) + 44|0);
       $297 = HEAP32[$296>>2]|0;
       $298 = (($297) + (($294*20)|0)|0);
       $299 = HEAP32[$298>>2]|0;
       $300 = (_strlen($299)|0);
       $301 = $14;
       $302 = $4;
       $303 = ((($302)) + 44|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = (($304) + (($301*20)|0)|0);
       $306 = ((($305)) + 12|0);
       HEAP32[$306>>2] = $300;
      }
     }
     $307 = $12;
     $308 = HEAP32[$307>>2]|0;
     $12 = $308;
    }
    if ((label|0) == 30) {
     $3 = -1;
     $672 = $3;
     STACKTOP = sp;return ($672|0);
    }
    $309 = $14;
    $310 = $4;
    $311 = ((($310)) + 44|0);
    $312 = HEAP32[$311>>2]|0;
    $313 = (($312) + (($309*20)|0)|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = ($314|0)!=(0|0);
    if (!($315)) {
     $3 = -1;
     $672 = $3;
     STACKTOP = sp;return ($672|0);
    }
    $316 = $4;
    $317 = ((($316)) + 48|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = $14;
    $320 = $4;
    $321 = ((($320)) + 44|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = (($322) + (($319*20)|0)|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = (_kh_put_m_s2i($318,$324,$16)|0);
    $15 = $325;
    $326 = HEAP32[$16>>2]|0;
    $327 = (-1)==($326|0);
    if (!($327)) {
     $328 = $14;
     $329 = $15;
     $330 = $4;
     $331 = ((($330)) + 48|0);
     $332 = HEAP32[$331>>2]|0;
     $333 = ((($332)) + 24|0);
     $334 = HEAP32[$333>>2]|0;
     $335 = (($334) + ($329<<2)|0);
     HEAP32[$335>>2] = $328;
     $336 = $4;
     $337 = ((($336)) + 40|0);
     $338 = HEAP32[$337>>2]|0;
     $339 = (($338) + 1)|0;
     HEAP32[$337>>2] = $339;
     break;
    }
    $3 = -1;
    $672 = $3;
    STACKTOP = sp;return ($672|0);
   }
  }
 } while(0);
 $340 = $5;
 $341 = $340 >> 8;
 $342 = ($341|0)==(80);
 if ($342) {
  $343 = $5;
  $344 = $343 & 255;
  $345 = ($344|0)==(71);
  if ($345) {
   $346 = $4;
   $347 = ((($346)) + 52|0);
   $348 = HEAP32[$347>>2]|0;
   $19 = $348;
   $349 = $4;
   $350 = ((($349)) + 64|0);
   $351 = HEAP32[$350>>2]|0;
   $352 = $4;
   $353 = ((($352)) + 52|0);
   $354 = HEAP32[$353>>2]|0;
   $355 = (($354) + 1)|0;
   $356 = ($355*24)|0;
   $357 = (_realloc($351,$356)|0);
   $18 = $357;
   $358 = $18;
   $359 = ($358|0)!=(0|0);
   if (!($359)) {
    $3 = -1;
    $672 = $3;
    STACKTOP = sp;return ($672|0);
   }
   $360 = $18;
   $361 = $4;
   $362 = ((($361)) + 64|0);
   HEAP32[$362>>2] = $360;
   $363 = $6;
   $364 = ((($363)) + 8|0);
   $365 = HEAP32[$364>>2]|0;
   $17 = $365;
   $366 = $19;
   $367 = $4;
   $368 = ((($367)) + 64|0);
   $369 = HEAP32[$368>>2]|0;
   $370 = (($369) + (($366*24)|0)|0);
   HEAP32[$370>>2] = 0;
   $371 = $19;
   $372 = $4;
   $373 = ((($372)) + 64|0);
   $374 = HEAP32[$373>>2]|0;
   $375 = (($374) + (($371*24)|0)|0);
   $376 = ((($375)) + 12|0);
   HEAP32[$376>>2] = 0;
   $377 = $6;
   $378 = $19;
   $379 = $4;
   $380 = ((($379)) + 64|0);
   $381 = HEAP32[$380>>2]|0;
   $382 = (($381) + (($378*24)|0)|0);
   $383 = ((($382)) + 4|0);
   HEAP32[$383>>2] = $377;
   $384 = $17;
   $385 = $19;
   $386 = $4;
   $387 = ((($386)) + 64|0);
   $388 = HEAP32[$387>>2]|0;
   $389 = (($388) + (($385*24)|0)|0);
   $390 = ((($389)) + 8|0);
   HEAP32[$390>>2] = $384;
   $391 = $19;
   $392 = $19;
   $393 = $4;
   $394 = ((($393)) + 64|0);
   $395 = HEAP32[$394>>2]|0;
   $396 = (($395) + (($392*24)|0)|0);
   $397 = ((($396)) + 16|0);
   HEAP32[$397>>2] = $391;
   $398 = $19;
   $399 = $4;
   $400 = ((($399)) + 64|0);
   $401 = HEAP32[$400>>2]|0;
   $402 = (($401) + (($398*24)|0)|0);
   $403 = ((($402)) + 20|0);
   HEAP32[$403>>2] = -1;
   while(1) {
    $404 = $17;
    $405 = ($404|0)!=(0|0);
    if (!($405)) {
     break;
    }
    $406 = $17;
    $407 = ((($406)) + 4|0);
    $408 = HEAP32[$407>>2]|0;
    $409 = HEAP8[$408>>0]|0;
    $410 = $409 << 24 >> 24;
    $411 = ($410|0)==(73);
    if ($411) {
     $412 = $17;
     $413 = ((($412)) + 4|0);
     $414 = HEAP32[$413>>2]|0;
     $415 = ((($414)) + 1|0);
     $416 = HEAP8[$415>>0]|0;
     $417 = $416 << 24 >> 24;
     $418 = ($417|0)==(68);
     if ($418) {
      $419 = $17;
      $420 = ((($419)) + 8|0);
      $421 = HEAP32[$420>>2]|0;
      $422 = (_malloc($421)|0);
      $423 = $19;
      $424 = $4;
      $425 = ((($424)) + 64|0);
      $426 = HEAP32[$425>>2]|0;
      $427 = (($426) + (($423*24)|0)|0);
      HEAP32[$427>>2] = $422;
      $428 = ($422|0)!=(0|0);
      if (!($428)) {
       label = 47;
       break;
      }
      $429 = $19;
      $430 = $4;
      $431 = ((($430)) + 64|0);
      $432 = HEAP32[$431>>2]|0;
      $433 = (($432) + (($429*24)|0)|0);
      $434 = HEAP32[$433>>2]|0;
      $435 = $17;
      $436 = ((($435)) + 4|0);
      $437 = HEAP32[$436>>2]|0;
      $438 = ((($437)) + 3|0);
      $439 = $17;
      $440 = ((($439)) + 8|0);
      $441 = HEAP32[$440>>2]|0;
      $442 = (($441) - 3)|0;
      (_strncpy($434,$438,$442)|0);
      $443 = $17;
      $444 = ((($443)) + 8|0);
      $445 = HEAP32[$444>>2]|0;
      $446 = (($445) - 3)|0;
      $447 = $19;
      $448 = $4;
      $449 = ((($448)) + 64|0);
      $450 = HEAP32[$449>>2]|0;
      $451 = (($450) + (($447*24)|0)|0);
      $452 = HEAP32[$451>>2]|0;
      $453 = (($452) + ($446)|0);
      HEAP8[$453>>0] = 0;
      $454 = $19;
      $455 = $4;
      $456 = ((($455)) + 64|0);
      $457 = HEAP32[$456>>2]|0;
      $458 = (($457) + (($454*24)|0)|0);
      $459 = HEAP32[$458>>2]|0;
      $460 = (_strlen($459)|0);
      $461 = $19;
      $462 = $4;
      $463 = ((($462)) + 64|0);
      $464 = HEAP32[$463>>2]|0;
      $465 = (($464) + (($461*24)|0)|0);
      $466 = ((($465)) + 12|0);
      HEAP32[$466>>2] = $460;
     } else {
      label = 49;
     }
    } else {
     label = 49;
    }
    L75: do {
     if ((label|0) == 49) {
      label = 0;
      $467 = $17;
      $468 = ((($467)) + 4|0);
      $469 = HEAP32[$468>>2]|0;
      $470 = HEAP8[$469>>0]|0;
      $471 = $470 << 24 >> 24;
      $472 = ($471|0)==(80);
      if ($472) {
       $473 = $17;
       $474 = ((($473)) + 4|0);
       $475 = HEAP32[$474>>2]|0;
       $476 = ((($475)) + 1|0);
       $477 = HEAP8[$476>>0]|0;
       $478 = $477 << 24 >> 24;
       $479 = ($478|0)==(80);
       if ($479) {
        $480 = $17;
        $481 = ((($480)) + 8|0);
        $482 = HEAP32[$481>>2]|0;
        $483 = $17;
        $484 = ((($483)) + 4|0);
        $485 = HEAP32[$484>>2]|0;
        $486 = (($485) + ($482)|0);
        $487 = HEAP8[$486>>0]|0;
        $21 = $487;
        $488 = $17;
        $489 = ((($488)) + 8|0);
        $490 = HEAP32[$489>>2]|0;
        $491 = $17;
        $492 = ((($491)) + 4|0);
        $493 = HEAP32[$492>>2]|0;
        $494 = (($493) + ($490)|0);
        HEAP8[$494>>0] = 0;
        $495 = $4;
        $496 = ((($495)) + 68|0);
        $497 = HEAP32[$496>>2]|0;
        $498 = $17;
        $499 = ((($498)) + 4|0);
        $500 = HEAP32[$499>>2]|0;
        $501 = ((($500)) + 3|0);
        $502 = (_kh_get_m_s2i($497,$501)|0);
        $20 = $502;
        $503 = $21;
        $504 = $17;
        $505 = ((($504)) + 8|0);
        $506 = HEAP32[$505>>2]|0;
        $507 = $17;
        $508 = ((($507)) + 4|0);
        $509 = HEAP32[$508>>2]|0;
        $510 = (($509) + ($506)|0);
        HEAP8[$510>>0] = $503;
        $511 = $20;
        $512 = $4;
        $513 = ((($512)) + 68|0);
        $514 = HEAP32[$513>>2]|0;
        $515 = HEAP32[$514>>2]|0;
        $516 = ($511|0)!=($515|0);
        if (!($516)) {
         $594 = $19;
         $595 = $4;
         $596 = ((($595)) + 64|0);
         $597 = HEAP32[$596>>2]|0;
         $598 = (($597) + (($594*24)|0)|0);
         $599 = ((($598)) + 20|0);
         HEAP32[$599>>2] = -1;
         break;
        }
        $517 = $20;
        $518 = $4;
        $519 = ((($518)) + 68|0);
        $520 = HEAP32[$519>>2]|0;
        $521 = ((($520)) + 24|0);
        $522 = HEAP32[$521>>2]|0;
        $523 = (($522) + ($517<<2)|0);
        $524 = HEAP32[$523>>2]|0;
        $22 = $524;
        $525 = $22;
        $526 = $4;
        $527 = ((($526)) + 64|0);
        $528 = HEAP32[$527>>2]|0;
        $529 = (($528) + (($525*24)|0)|0);
        $530 = ((($529)) + 16|0);
        $531 = HEAP32[$530>>2]|0;
        $532 = $19;
        $533 = $4;
        $534 = ((($533)) + 64|0);
        $535 = HEAP32[$534>>2]|0;
        $536 = (($535) + (($532*24)|0)|0);
        $537 = ((($536)) + 20|0);
        HEAP32[$537>>2] = $531;
        $538 = $4;
        $539 = ((($538)) + 56|0);
        $540 = HEAP32[$539>>2]|0;
        $541 = ($540|0)>(0);
        if ($541) {
         $542 = $4;
         $543 = ((($542)) + 56|0);
         $544 = HEAP32[$543>>2]|0;
         $545 = (($544) - 1)|0;
         $546 = $4;
         $547 = ((($546)) + 72|0);
         $548 = HEAP32[$547>>2]|0;
         $549 = (($548) + ($545<<2)|0);
         $550 = HEAP32[$549>>2]|0;
         $551 = $22;
         $552 = ($550|0)==($551|0);
         if ($552) {
          $553 = $4;
          $554 = ((($553)) + 56|0);
          $555 = HEAP32[$554>>2]|0;
          $556 = (($555) + -1)|0;
          HEAP32[$554>>2] = $556;
          break;
         }
        }
        $23 = 0;
        while(1) {
         $557 = $23;
         $558 = $4;
         $559 = ((($558)) + 56|0);
         $560 = HEAP32[$559>>2]|0;
         $561 = ($557|0)<($560|0);
         if (!($561)) {
          break L75;
         }
         $562 = $23;
         $563 = $4;
         $564 = ((($563)) + 72|0);
         $565 = HEAP32[$564>>2]|0;
         $566 = (($565) + ($562<<2)|0);
         $567 = HEAP32[$566>>2]|0;
         $568 = $22;
         $569 = ($567|0)==($568|0);
         if ($569) {
          $570 = $23;
          $571 = $4;
          $572 = ((($571)) + 72|0);
          $573 = HEAP32[$572>>2]|0;
          $574 = (($573) + ($570<<2)|0);
          $575 = $23;
          $576 = (($575) + 1)|0;
          $577 = $4;
          $578 = ((($577)) + 72|0);
          $579 = HEAP32[$578>>2]|0;
          $580 = (($579) + ($576<<2)|0);
          $581 = $4;
          $582 = ((($581)) + 56|0);
          $583 = HEAP32[$582>>2]|0;
          $584 = $23;
          $585 = (($583) - ($584))|0;
          $586 = (($585) - 1)|0;
          $587 = $586<<2;
          _memmove(($574|0),($580|0),($587|0))|0;
          $588 = $4;
          $589 = ((($588)) + 56|0);
          $590 = HEAP32[$589>>2]|0;
          $591 = (($590) + -1)|0;
          HEAP32[$589>>2] = $591;
         }
         $592 = $23;
         $593 = (($592) + 1)|0;
         $23 = $593;
        }
       }
      }
     }
    } while(0);
    $600 = $17;
    $601 = HEAP32[$600>>2]|0;
    $17 = $601;
   }
   if ((label|0) == 47) {
    $3 = -1;
    $672 = $3;
    STACKTOP = sp;return ($672|0);
   }
   $602 = $19;
   $603 = $4;
   $604 = ((($603)) + 64|0);
   $605 = HEAP32[$604>>2]|0;
   $606 = (($605) + (($602*24)|0)|0);
   $607 = HEAP32[$606>>2]|0;
   $608 = ($607|0)!=(0|0);
   if (!($608)) {
    $3 = -1;
    $672 = $3;
    STACKTOP = sp;return ($672|0);
   }
   $609 = $4;
   $610 = ((($609)) + 68|0);
   $611 = HEAP32[$610>>2]|0;
   $612 = $19;
   $613 = $4;
   $614 = ((($613)) + 64|0);
   $615 = HEAP32[$614>>2]|0;
   $616 = (($615) + (($612*24)|0)|0);
   $617 = HEAP32[$616>>2]|0;
   $618 = (_kh_put_m_s2i($611,$617,$25)|0);
   $24 = $618;
   $619 = HEAP32[$25>>2]|0;
   $620 = (-1)==($619|0);
   if ($620) {
    $3 = -1;
    $672 = $3;
    STACKTOP = sp;return ($672|0);
   }
   $621 = $19;
   $622 = $24;
   $623 = $4;
   $624 = ((($623)) + 68|0);
   $625 = HEAP32[$624>>2]|0;
   $626 = ((($625)) + 24|0);
   $627 = HEAP32[$626>>2]|0;
   $628 = (($627) + ($622<<2)|0);
   HEAP32[$628>>2] = $621;
   $629 = $4;
   $630 = ((($629)) + 56|0);
   $631 = HEAP32[$630>>2]|0;
   $632 = $4;
   $633 = ((($632)) + 60|0);
   $634 = HEAP32[$633>>2]|0;
   $635 = ($631|0)>=($634|0);
   do {
    if ($635) {
     $636 = $4;
     $637 = ((($636)) + 60|0);
     $638 = HEAP32[$637>>2]|0;
     $639 = ($638|0)!=(0);
     if ($639) {
      $640 = $4;
      $641 = ((($640)) + 60|0);
      $642 = HEAP32[$641>>2]|0;
      $643 = $642<<1;
      $644 = $643;
     } else {
      $644 = 4;
     }
     $27 = $644;
     $645 = $4;
     $646 = ((($645)) + 72|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $27;
     $649 = $648<<2;
     $650 = (_realloc($647,$649)|0);
     $26 = $650;
     $651 = $26;
     $652 = ($651|0)!=(0|0);
     if ($652) {
      $653 = $27;
      $654 = $4;
      $655 = ((($654)) + 60|0);
      HEAP32[$655>>2] = $653;
      $656 = $26;
      $657 = $4;
      $658 = ((($657)) + 72|0);
      HEAP32[$658>>2] = $656;
      break;
     }
     $3 = -1;
     $672 = $3;
     STACKTOP = sp;return ($672|0);
    }
   } while(0);
   $659 = $19;
   $660 = $4;
   $661 = ((($660)) + 56|0);
   $662 = HEAP32[$661>>2]|0;
   $663 = (($662) + 1)|0;
   HEAP32[$661>>2] = $663;
   $664 = $4;
   $665 = ((($664)) + 72|0);
   $666 = HEAP32[$665>>2]|0;
   $667 = (($666) + ($662<<2)|0);
   HEAP32[$667>>2] = $659;
   $668 = $4;
   $669 = ((($668)) + 52|0);
   $670 = HEAP32[$669>>2]|0;
   $671 = (($670) + 1)|0;
   HEAP32[$669>>2] = $671;
  }
 }
 $3 = 0;
 $672 = $3;
 STACKTOP = sp;return ($672|0);
}
function _kh_put_m_s2i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $4;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16>>>0)>=($19>>>0);
 do {
  if ($20) {
   $21 = $4;
   $22 = HEAP32[$21>>2]|0;
   $23 = $4;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 << 1;
   $27 = ($22>>>0)>($26>>>0);
   $28 = $4;
   $29 = $4;
   $30 = HEAP32[$29>>2]|0;
   if ($27) {
    $31 = (($30) - 1)|0;
    $32 = (_kh_resize_m_s2i($28,$31)|0);
    $33 = ($32|0)<(0);
    if (!($33)) {
     break;
    }
    $34 = $6;
    HEAP32[$34>>2] = -1;
    $35 = $4;
    $36 = HEAP32[$35>>2]|0;
    $3 = $36;
    $230 = $3;
    STACKTOP = sp;return ($230|0);
   } else {
    $37 = (($30) + 1)|0;
    $38 = (_kh_resize_m_s2i($28,$37)|0);
    $39 = ($38|0)<(0);
    if (!($39)) {
     break;
    }
    $40 = $6;
    HEAP32[$40>>2] = -1;
    $41 = $4;
    $42 = HEAP32[$41>>2]|0;
    $3 = $42;
    $230 = $3;
    STACKTOP = sp;return ($230|0);
   }
  }
 } while(0);
 $43 = $4;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) - 1)|0;
 $12 = $45;
 $13 = 0;
 $46 = $4;
 $47 = HEAP32[$46>>2]|0;
 $10 = $47;
 $7 = $47;
 $48 = $5;
 $49 = (___ac_X31_hash_string_549($48)|0);
 $8 = $49;
 $50 = $8;
 $51 = $12;
 $52 = $50 & $51;
 $9 = $52;
 $53 = $9;
 $54 = $53 >>> 4;
 $55 = $4;
 $56 = ((($55)) + 16|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) + ($54<<2)|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $9;
 $61 = $60 & 15;
 $62 = $61 << 1;
 $63 = $59 >>> $62;
 $64 = $63 & 2;
 $65 = ($64|0)!=(0);
 $66 = $9;
 do {
  if ($65) {
   $7 = $66;
  } else {
   $11 = $66;
   while(1) {
    $67 = $9;
    $68 = $67 >>> 4;
    $69 = $4;
    $70 = ((($69)) + 16|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($71) + ($68<<2)|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $9;
    $75 = $74 & 15;
    $76 = $75 << 1;
    $77 = $73 >>> $76;
    $78 = $77 & 2;
    $79 = ($78|0)!=(0);
    if ($79) {
     break;
    }
    $80 = $9;
    $81 = $80 >>> 4;
    $82 = $4;
    $83 = ((($82)) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($84) + ($81<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $9;
    $88 = $87 & 15;
    $89 = $88 << 1;
    $90 = $86 >>> $89;
    $91 = $90 & 1;
    $92 = ($91|0)!=(0);
    if (!($92)) {
     $93 = $9;
     $94 = $4;
     $95 = ((($94)) + 20|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = (($96) + ($93<<2)|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $5;
     $100 = (_strcmp($98,$99)|0);
     $101 = ($100|0)==(0);
     $102 = $101 ^ 1;
     if (!($102)) {
      break;
     }
    }
    $103 = $9;
    $104 = $103 >>> 4;
    $105 = $4;
    $106 = ((($105)) + 16|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (($107) + ($104<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $9;
    $111 = $110 & 15;
    $112 = $111 << 1;
    $113 = $109 >>> $112;
    $114 = $113 & 1;
    $115 = ($114|0)!=(0);
    if ($115) {
     $116 = $9;
     $10 = $116;
    }
    $117 = $9;
    $118 = $13;
    $119 = (($118) + 1)|0;
    $13 = $119;
    $120 = (($117) + ($119))|0;
    $121 = $12;
    $122 = $120 & $121;
    $9 = $122;
    $123 = $9;
    $124 = $11;
    $125 = ($123|0)==($124|0);
    if ($125) {
     label = 16;
     break;
    }
   }
   if ((label|0) == 16) {
    $126 = $10;
    $7 = $126;
   }
   $127 = $7;
   $128 = $4;
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = $9;
    $132 = $131 >>> 4;
    $133 = $4;
    $134 = ((($133)) + 16|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + ($132<<2)|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $9;
    $139 = $138 & 15;
    $140 = $139 << 1;
    $141 = $137 >>> $140;
    $142 = $141 & 2;
    $143 = ($142|0)!=(0);
    if ($143) {
     $144 = $10;
     $145 = $4;
     $146 = HEAP32[$145>>2]|0;
     $147 = ($144|0)!=($146|0);
     if ($147) {
      $148 = $10;
      $7 = $148;
      break;
     }
    }
    $149 = $9;
    $7 = $149;
   }
  }
 } while(0);
 $150 = $7;
 $151 = $150 >>> 4;
 $152 = $4;
 $153 = ((($152)) + 16|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = (($154) + ($151<<2)|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $7;
 $158 = $157 & 15;
 $159 = $158 << 1;
 $160 = $156 >>> $159;
 $161 = $160 & 2;
 $162 = ($161|0)!=(0);
 do {
  if ($162) {
   $163 = $5;
   $164 = $7;
   $165 = $4;
   $166 = ((($165)) + 20|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = (($167) + ($164<<2)|0);
   HEAP32[$168>>2] = $163;
   $169 = $7;
   $170 = $169 & 15;
   $171 = $170 << 1;
   $172 = 3 << $171;
   $173 = $172 ^ -1;
   $174 = $7;
   $175 = $174 >>> 4;
   $176 = $4;
   $177 = ((($176)) + 16|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = (($178) + ($175<<2)|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $180 & $173;
   HEAP32[$179>>2] = $181;
   $182 = $4;
   $183 = ((($182)) + 4|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (($184) + 1)|0;
   HEAP32[$183>>2] = $185;
   $186 = $4;
   $187 = ((($186)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = (($188) + 1)|0;
   HEAP32[$187>>2] = $189;
   $190 = $6;
   HEAP32[$190>>2] = 1;
  } else {
   $191 = $7;
   $192 = $191 >>> 4;
   $193 = $4;
   $194 = ((($193)) + 16|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = (($195) + ($192<<2)|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $7;
   $199 = $198 & 15;
   $200 = $199 << 1;
   $201 = $197 >>> $200;
   $202 = $201 & 1;
   $203 = ($202|0)!=(0);
   if ($203) {
    $204 = $5;
    $205 = $7;
    $206 = $4;
    $207 = ((($206)) + 20|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = (($208) + ($205<<2)|0);
    HEAP32[$209>>2] = $204;
    $210 = $7;
    $211 = $210 & 15;
    $212 = $211 << 1;
    $213 = 3 << $212;
    $214 = $213 ^ -1;
    $215 = $7;
    $216 = $215 >>> 4;
    $217 = $4;
    $218 = ((($217)) + 16|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = (($219) + ($216<<2)|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = $221 & $214;
    HEAP32[$220>>2] = $222;
    $223 = $4;
    $224 = ((($223)) + 4|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = (($225) + 1)|0;
    HEAP32[$224>>2] = $226;
    $227 = $6;
    HEAP32[$227>>2] = 2;
    break;
   } else {
    $228 = $6;
    HEAP32[$228>>2] = 0;
    break;
   }
  }
 } while(0);
 $229 = $7;
 $3 = $229;
 $230 = $3;
 STACKTOP = sp;return ($230|0);
}
function _kh_get_m_s2i($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $2 = 0;
  $85 = $2;
  STACKTOP = sp;return ($85|0);
 }
 $9 = 0;
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - 1)|0;
 $8 = $15;
 $16 = $4;
 $17 = (___ac_X31_hash_string_549($16)|0);
 $5 = $17;
 $18 = $5;
 $19 = $8;
 $20 = $18 & $19;
 $6 = $20;
 $21 = $6;
 $7 = $21;
 while(1) {
  $22 = $6;
  $23 = $22 >>> 4;
  $24 = $3;
  $25 = ((($24)) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + ($23<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $6;
  $30 = $29 & 15;
  $31 = $30 << 1;
  $32 = $28 >>> $31;
  $33 = $32 & 2;
  $34 = ($33|0)!=(0);
  if ($34) {
   $86 = 0;
  } else {
   $35 = $6;
   $36 = $35 >>> 4;
   $37 = $3;
   $38 = ((($37)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + ($36<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $6;
   $43 = $42 & 15;
   $44 = $43 << 1;
   $45 = $41 >>> $44;
   $46 = $45 & 1;
   $47 = ($46|0)!=(0);
   if ($47) {
    $86 = 1;
   } else {
    $48 = $6;
    $49 = $3;
    $50 = ((($49)) + 20|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($51) + ($48<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $4;
    $55 = (_strcmp($53,$54)|0);
    $56 = ($55|0)==(0);
    $57 = $56 ^ 1;
    $86 = $57;
   }
  }
  $58 = $6;
  if (!($86)) {
   break;
  }
  $59 = $9;
  $60 = (($59) + 1)|0;
  $9 = $60;
  $61 = (($58) + ($60))|0;
  $62 = $8;
  $63 = $61 & $62;
  $6 = $63;
  $64 = $6;
  $65 = $7;
  $66 = ($64|0)==($65|0);
  if ($66) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  $67 = $3;
  $68 = HEAP32[$67>>2]|0;
  $2 = $68;
  $85 = $2;
  STACKTOP = sp;return ($85|0);
 }
 $69 = $58 >>> 4;
 $70 = $3;
 $71 = ((($70)) + 16|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($72) + ($69<<2)|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $6;
 $76 = $75 & 15;
 $77 = $76 << 1;
 $78 = $74 >>> $77;
 $79 = $78 & 3;
 $80 = ($79|0)!=(0);
 if ($80) {
  $81 = $3;
  $82 = HEAP32[$81>>2]|0;
  $84 = $82;
 } else {
  $83 = $6;
  $84 = $83;
 }
 $2 = $84;
 $85 = $2;
 STACKTOP = sp;return ($85|0);
}
function ___ac_X31_hash_string_549($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 << 24 >> 24;
 $2 = $5;
 $6 = $2;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 $8 = $1;
 $9 = ((($8)) + 1|0);
 $1 = $9;
 while(1) {
  $10 = $1;
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)!=(0);
  if (!($12)) {
   break;
  }
  $13 = $2;
  $14 = $13 << 5;
  $15 = $2;
  $16 = (($14) - ($15))|0;
  $17 = $1;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = (($16) + ($19))|0;
  $2 = $20;
  $21 = $1;
  $22 = ((($21)) + 1|0);
  $1 = $22;
 }
 $23 = $2;
 STACKTOP = sp;return ($23|0);
}
function _kh_resize_m_s2i($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0.0, $279 = 0.0;
 var $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = 1;
 $17 = $4;
 $18 = (($17) + -1)|0;
 $4 = $18;
 $19 = $4;
 $20 = $19 >>> 1;
 $21 = $4;
 $22 = $21 | $20;
 $4 = $22;
 $23 = $4;
 $24 = $23 >>> 2;
 $25 = $4;
 $26 = $25 | $24;
 $4 = $26;
 $27 = $4;
 $28 = $27 >>> 4;
 $29 = $4;
 $30 = $29 | $28;
 $4 = $30;
 $31 = $4;
 $32 = $31 >>> 8;
 $33 = $4;
 $34 = $33 | $32;
 $4 = $34;
 $35 = $4;
 $36 = $35 >>> 16;
 $37 = $4;
 $38 = $37 | $36;
 $4 = $38;
 $39 = $4;
 $40 = (($39) + 1)|0;
 $4 = $40;
 $41 = $4;
 $42 = ($41>>>0)<(4);
 $$ = $42 ? 4 : $40;
 $4 = $$;
 $43 = $3;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $4;
 $47 = (+($46>>>0));
 $48 = $47 * 0.77000000000000001;
 $49 = $48 + 0.5;
 $50 = (~~(($49))>>>0);
 $51 = ($45>>>0)>=($50>>>0);
 do {
  if ($51) {
   $6 = 0;
  } else {
   $52 = $4;
   $53 = ($52>>>0)<(16);
   $54 = $4;
   $55 = $54 >>> 4;
   $56 = $53 ? 1 : $55;
   $57 = $56<<2;
   $58 = (_malloc($57)|0);
   $5 = $58;
   $59 = $5;
   $60 = ($59|0)!=(0|0);
   if (!($60)) {
    $2 = -1;
    $284 = $2;
    STACKTOP = sp;return ($284|0);
   }
   $61 = $5;
   $62 = $4;
   $63 = ($62>>>0)<(16);
   $64 = $4;
   $65 = $64 >>> 4;
   $66 = $63 ? 1 : $65;
   $67 = $66<<2;
   _memset(($61|0),-86,($67|0))|0;
   $68 = $3;
   $69 = HEAP32[$68>>2]|0;
   $70 = $4;
   $71 = ($69>>>0)<($70>>>0);
   if ($71) {
    $72 = $3;
    $73 = ((($72)) + 20|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $4;
    $76 = $75<<2;
    $77 = (_realloc($74,$76)|0);
    $7 = $77;
    $78 = $7;
    $79 = ($78|0)!=(0|0);
    if (!($79)) {
     $80 = $5;
     _free($80);
     $2 = -1;
     $284 = $2;
     STACKTOP = sp;return ($284|0);
    }
    $81 = $7;
    $82 = $3;
    $83 = ((($82)) + 20|0);
    HEAP32[$83>>2] = $81;
    $84 = $3;
    $85 = ((($84)) + 24|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $4;
    $88 = $87<<2;
    $89 = (_realloc($86,$88)|0);
    $8 = $89;
    $90 = $8;
    $91 = ($90|0)!=(0|0);
    if ($91) {
     $93 = $8;
     $94 = $3;
     $95 = ((($94)) + 24|0);
     HEAP32[$95>>2] = $93;
     break;
    }
    $92 = $5;
    _free($92);
    $2 = -1;
    $284 = $2;
    STACKTOP = sp;return ($284|0);
   }
  }
 } while(0);
 $96 = $6;
 $97 = ($96|0)!=(0);
 if ($97) {
  $6 = 0;
  while(1) {
   $98 = $6;
   $99 = $3;
   $100 = HEAP32[$99>>2]|0;
   $101 = ($98|0)!=($100|0);
   if (!($101)) {
    break;
   }
   $102 = $6;
   $103 = $102 >>> 4;
   $104 = $3;
   $105 = ((($104)) + 16|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + ($103<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $6;
   $110 = $109 & 15;
   $111 = $110 << 1;
   $112 = $108 >>> $111;
   $113 = $112 & 3;
   $114 = ($113|0)==(0);
   if ($114) {
    $115 = $6;
    $116 = $3;
    $117 = ((($116)) + 20|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (($118) + ($115<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $9 = $120;
    $121 = $4;
    $122 = (($121) - 1)|0;
    $11 = $122;
    $123 = $6;
    $124 = $3;
    $125 = ((($124)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = (($126) + ($123<<2)|0);
    $128 = HEAP32[$127>>2]|0;
    $10 = $128;
    $129 = $6;
    $130 = $129 & 15;
    $131 = $130 << 1;
    $132 = 1 << $131;
    $133 = $6;
    $134 = $133 >>> 4;
    $135 = $3;
    $136 = ((($135)) + 16|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = (($137) + ($134<<2)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $139 | $132;
    HEAP32[$138>>2] = $140;
    while(1) {
     $14 = 0;
     $141 = $9;
     $142 = (___ac_X31_hash_string_549($141)|0);
     $12 = $142;
     $143 = $12;
     $144 = $11;
     $145 = $143 & $144;
     $13 = $145;
     while(1) {
      $146 = $13;
      $147 = $146 >>> 4;
      $148 = $5;
      $149 = (($148) + ($147<<2)|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = $13;
      $152 = $151 & 15;
      $153 = $152 << 1;
      $154 = $150 >>> $153;
      $155 = $154 & 2;
      $156 = ($155|0)!=(0);
      $157 = $156 ^ 1;
      $158 = $13;
      if (!($157)) {
       break;
      }
      $159 = $14;
      $160 = (($159) + 1)|0;
      $14 = $160;
      $161 = (($158) + ($160))|0;
      $162 = $11;
      $163 = $161 & $162;
      $13 = $163;
     }
     $164 = $158 & 15;
     $165 = $164 << 1;
     $166 = 2 << $165;
     $167 = $166 ^ -1;
     $168 = $13;
     $169 = $168 >>> 4;
     $170 = $5;
     $171 = (($170) + ($169<<2)|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = $172 & $167;
     HEAP32[$171>>2] = $173;
     $174 = $13;
     $175 = $3;
     $176 = HEAP32[$175>>2]|0;
     $177 = ($174>>>0)<($176>>>0);
     if (!($177)) {
      break;
     }
     $178 = $13;
     $179 = $178 >>> 4;
     $180 = $3;
     $181 = ((($180)) + 16|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (($182) + ($179<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = $13;
     $186 = $185 & 15;
     $187 = $186 << 1;
     $188 = $184 >>> $187;
     $189 = $188 & 3;
     $190 = ($189|0)==(0);
     if (!($190)) {
      break;
     }
     $191 = $13;
     $192 = $3;
     $193 = ((($192)) + 20|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (($194) + ($191<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $15 = $196;
     $197 = $9;
     $198 = $13;
     $199 = $3;
     $200 = ((($199)) + 20|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = (($201) + ($198<<2)|0);
     HEAP32[$202>>2] = $197;
     $203 = $15;
     $9 = $203;
     $204 = $13;
     $205 = $3;
     $206 = ((($205)) + 24|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = (($207) + ($204<<2)|0);
     $209 = HEAP32[$208>>2]|0;
     $16 = $209;
     $210 = $10;
     $211 = $13;
     $212 = $3;
     $213 = ((($212)) + 24|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = (($214) + ($211<<2)|0);
     HEAP32[$215>>2] = $210;
     $216 = $16;
     $10 = $216;
     $217 = $13;
     $218 = $217 & 15;
     $219 = $218 << 1;
     $220 = 1 << $219;
     $221 = $13;
     $222 = $221 >>> 4;
     $223 = $3;
     $224 = ((($223)) + 16|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = (($225) + ($222<<2)|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = $227 | $220;
     HEAP32[$226>>2] = $228;
    }
    $229 = $9;
    $230 = $13;
    $231 = $3;
    $232 = ((($231)) + 20|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = (($233) + ($230<<2)|0);
    HEAP32[$234>>2] = $229;
    $235 = $10;
    $236 = $13;
    $237 = $3;
    $238 = ((($237)) + 24|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = (($239) + ($236<<2)|0);
    HEAP32[$240>>2] = $235;
   }
   $241 = $6;
   $242 = (($241) + 1)|0;
   $6 = $242;
  }
  $243 = $3;
  $244 = HEAP32[$243>>2]|0;
  $245 = $4;
  $246 = ($244>>>0)>($245>>>0);
  if ($246) {
   $247 = $3;
   $248 = ((($247)) + 20|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = $4;
   $251 = $250<<2;
   $252 = (_realloc($249,$251)|0);
   $253 = $3;
   $254 = ((($253)) + 20|0);
   HEAP32[$254>>2] = $252;
   $255 = $3;
   $256 = ((($255)) + 24|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = $4;
   $259 = $258<<2;
   $260 = (_realloc($257,$259)|0);
   $261 = $3;
   $262 = ((($261)) + 24|0);
   HEAP32[$262>>2] = $260;
  }
  $263 = $3;
  $264 = ((($263)) + 16|0);
  $265 = HEAP32[$264>>2]|0;
  _free($265);
  $266 = $5;
  $267 = $3;
  $268 = ((($267)) + 16|0);
  HEAP32[$268>>2] = $266;
  $269 = $4;
  $270 = $3;
  HEAP32[$270>>2] = $269;
  $271 = $3;
  $272 = ((($271)) + 4|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = $3;
  $275 = ((($274)) + 8|0);
  HEAP32[$275>>2] = $273;
  $276 = $3;
  $277 = HEAP32[$276>>2]|0;
  $278 = (+($277>>>0));
  $279 = $278 * 0.77000000000000001;
  $280 = $279 + 0.5;
  $281 = (~~(($280))>>>0);
  $282 = $3;
  $283 = ((($282)) + 12|0);
  HEAP32[$283>>2] = $281;
 }
 $2 = 0;
 $284 = $2;
 STACKTOP = sp;return ($284|0);
}
function _kh_resize_sam_hdr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0.0, $279 = 0.0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = 1;
 $17 = $4;
 $18 = (($17) + -1)|0;
 $4 = $18;
 $19 = $4;
 $20 = $19 >>> 1;
 $21 = $4;
 $22 = $21 | $20;
 $4 = $22;
 $23 = $4;
 $24 = $23 >>> 2;
 $25 = $4;
 $26 = $25 | $24;
 $4 = $26;
 $27 = $4;
 $28 = $27 >>> 4;
 $29 = $4;
 $30 = $29 | $28;
 $4 = $30;
 $31 = $4;
 $32 = $31 >>> 8;
 $33 = $4;
 $34 = $33 | $32;
 $4 = $34;
 $35 = $4;
 $36 = $35 >>> 16;
 $37 = $4;
 $38 = $37 | $36;
 $4 = $38;
 $39 = $4;
 $40 = (($39) + 1)|0;
 $4 = $40;
 $41 = $4;
 $42 = ($41>>>0)<(4);
 $$ = $42 ? 4 : $40;
 $4 = $$;
 $43 = $3;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $4;
 $47 = (+($46>>>0));
 $48 = $47 * 0.77000000000000001;
 $49 = $48 + 0.5;
 $50 = (~~(($49))>>>0);
 $51 = ($45>>>0)>=($50>>>0);
 do {
  if ($51) {
   $6 = 0;
  } else {
   $52 = $4;
   $53 = ($52>>>0)<(16);
   $54 = $4;
   $55 = $54 >>> 4;
   $56 = $53 ? 1 : $55;
   $57 = $56<<2;
   $58 = (_malloc($57)|0);
   $5 = $58;
   $59 = $5;
   $60 = ($59|0)!=(0|0);
   if (!($60)) {
    $2 = -1;
    $283 = $2;
    STACKTOP = sp;return ($283|0);
   }
   $61 = $5;
   $62 = $4;
   $63 = ($62>>>0)<(16);
   $64 = $4;
   $65 = $64 >>> 4;
   $66 = $63 ? 1 : $65;
   $67 = $66<<2;
   _memset(($61|0),-86,($67|0))|0;
   $68 = $3;
   $69 = HEAP32[$68>>2]|0;
   $70 = $4;
   $71 = ($69>>>0)<($70>>>0);
   if ($71) {
    $72 = $3;
    $73 = ((($72)) + 20|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $4;
    $76 = $75<<2;
    $77 = (_realloc($74,$76)|0);
    $7 = $77;
    $78 = $7;
    $79 = ($78|0)!=(0|0);
    if (!($79)) {
     $80 = $5;
     _free($80);
     $2 = -1;
     $283 = $2;
     STACKTOP = sp;return ($283|0);
    }
    $81 = $7;
    $82 = $3;
    $83 = ((($82)) + 20|0);
    HEAP32[$83>>2] = $81;
    $84 = $3;
    $85 = ((($84)) + 24|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $4;
    $88 = $87<<2;
    $89 = (_realloc($86,$88)|0);
    $8 = $89;
    $90 = $8;
    $91 = ($90|0)!=(0|0);
    if ($91) {
     $93 = $8;
     $94 = $3;
     $95 = ((($94)) + 24|0);
     HEAP32[$95>>2] = $93;
     break;
    }
    $92 = $5;
    _free($92);
    $2 = -1;
    $283 = $2;
    STACKTOP = sp;return ($283|0);
   }
  }
 } while(0);
 $96 = $6;
 $97 = ($96|0)!=(0);
 if ($97) {
  $6 = 0;
  while(1) {
   $98 = $6;
   $99 = $3;
   $100 = HEAP32[$99>>2]|0;
   $101 = ($98|0)!=($100|0);
   if (!($101)) {
    break;
   }
   $102 = $6;
   $103 = $102 >>> 4;
   $104 = $3;
   $105 = ((($104)) + 16|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + ($103<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $6;
   $110 = $109 & 15;
   $111 = $110 << 1;
   $112 = $108 >>> $111;
   $113 = $112 & 3;
   $114 = ($113|0)==(0);
   if ($114) {
    $115 = $6;
    $116 = $3;
    $117 = ((($116)) + 20|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (($118) + ($115<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $9 = $120;
    $121 = $4;
    $122 = (($121) - 1)|0;
    $11 = $122;
    $123 = $6;
    $124 = $3;
    $125 = ((($124)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = (($126) + ($123<<2)|0);
    $128 = HEAP32[$127>>2]|0;
    $10 = $128;
    $129 = $6;
    $130 = $129 & 15;
    $131 = $130 << 1;
    $132 = 1 << $131;
    $133 = $6;
    $134 = $133 >>> 4;
    $135 = $3;
    $136 = ((($135)) + 16|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = (($137) + ($134<<2)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $139 | $132;
    HEAP32[$138>>2] = $140;
    while(1) {
     $14 = 0;
     $141 = $9;
     $12 = $141;
     $142 = $12;
     $143 = $11;
     $144 = $142 & $143;
     $13 = $144;
     while(1) {
      $145 = $13;
      $146 = $145 >>> 4;
      $147 = $5;
      $148 = (($147) + ($146<<2)|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = $13;
      $151 = $150 & 15;
      $152 = $151 << 1;
      $153 = $149 >>> $152;
      $154 = $153 & 2;
      $155 = ($154|0)!=(0);
      $156 = $155 ^ 1;
      $157 = $13;
      if (!($156)) {
       break;
      }
      $158 = $14;
      $159 = (($158) + 1)|0;
      $14 = $159;
      $160 = (($157) + ($159))|0;
      $161 = $11;
      $162 = $160 & $161;
      $13 = $162;
     }
     $163 = $157 & 15;
     $164 = $163 << 1;
     $165 = 2 << $164;
     $166 = $165 ^ -1;
     $167 = $13;
     $168 = $167 >>> 4;
     $169 = $5;
     $170 = (($169) + ($168<<2)|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = $171 & $166;
     HEAP32[$170>>2] = $172;
     $173 = $13;
     $174 = $3;
     $175 = HEAP32[$174>>2]|0;
     $176 = ($173>>>0)<($175>>>0);
     if (!($176)) {
      break;
     }
     $177 = $13;
     $178 = $177 >>> 4;
     $179 = $3;
     $180 = ((($179)) + 16|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = (($181) + ($178<<2)|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = $13;
     $185 = $184 & 15;
     $186 = $185 << 1;
     $187 = $183 >>> $186;
     $188 = $187 & 3;
     $189 = ($188|0)==(0);
     if (!($189)) {
      break;
     }
     $190 = $13;
     $191 = $3;
     $192 = ((($191)) + 20|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (($193) + ($190<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $15 = $195;
     $196 = $9;
     $197 = $13;
     $198 = $3;
     $199 = ((($198)) + 20|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = (($200) + ($197<<2)|0);
     HEAP32[$201>>2] = $196;
     $202 = $15;
     $9 = $202;
     $203 = $13;
     $204 = $3;
     $205 = ((($204)) + 24|0);
     $206 = HEAP32[$205>>2]|0;
     $207 = (($206) + ($203<<2)|0);
     $208 = HEAP32[$207>>2]|0;
     $16 = $208;
     $209 = $10;
     $210 = $13;
     $211 = $3;
     $212 = ((($211)) + 24|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = (($213) + ($210<<2)|0);
     HEAP32[$214>>2] = $209;
     $215 = $16;
     $10 = $215;
     $216 = $13;
     $217 = $216 & 15;
     $218 = $217 << 1;
     $219 = 1 << $218;
     $220 = $13;
     $221 = $220 >>> 4;
     $222 = $3;
     $223 = ((($222)) + 16|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = (($224) + ($221<<2)|0);
     $226 = HEAP32[$225>>2]|0;
     $227 = $226 | $219;
     HEAP32[$225>>2] = $227;
    }
    $228 = $9;
    $229 = $13;
    $230 = $3;
    $231 = ((($230)) + 20|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = (($232) + ($229<<2)|0);
    HEAP32[$233>>2] = $228;
    $234 = $10;
    $235 = $13;
    $236 = $3;
    $237 = ((($236)) + 24|0);
    $238 = HEAP32[$237>>2]|0;
    $239 = (($238) + ($235<<2)|0);
    HEAP32[$239>>2] = $234;
   }
   $240 = $6;
   $241 = (($240) + 1)|0;
   $6 = $241;
  }
  $242 = $3;
  $243 = HEAP32[$242>>2]|0;
  $244 = $4;
  $245 = ($243>>>0)>($244>>>0);
  if ($245) {
   $246 = $3;
   $247 = ((($246)) + 20|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = $4;
   $250 = $249<<2;
   $251 = (_realloc($248,$250)|0);
   $252 = $3;
   $253 = ((($252)) + 20|0);
   HEAP32[$253>>2] = $251;
   $254 = $3;
   $255 = ((($254)) + 24|0);
   $256 = HEAP32[$255>>2]|0;
   $257 = $4;
   $258 = $257<<2;
   $259 = (_realloc($256,$258)|0);
   $260 = $3;
   $261 = ((($260)) + 24|0);
   HEAP32[$261>>2] = $259;
  }
  $262 = $3;
  $263 = ((($262)) + 16|0);
  $264 = HEAP32[$263>>2]|0;
  _free($264);
  $265 = $5;
  $266 = $3;
  $267 = ((($266)) + 16|0);
  HEAP32[$267>>2] = $265;
  $268 = $4;
  $269 = $3;
  HEAP32[$269>>2] = $268;
  $270 = $3;
  $271 = ((($270)) + 4|0);
  $272 = HEAP32[$271>>2]|0;
  $273 = $3;
  $274 = ((($273)) + 8|0);
  HEAP32[$274>>2] = $272;
  $275 = $3;
  $276 = HEAP32[$275>>2]|0;
  $277 = (+($276>>>0));
  $278 = $277 * 0.77000000000000001;
  $279 = $278 + 0.5;
  $280 = (~~(($279))>>>0);
  $281 = $3;
  $282 = ((($281)) + 12|0);
  HEAP32[$282>>2] = $280;
 }
 $2 = 0;
 $283 = $2;
 STACKTOP = sp;return ($283|0);
}
function _sam_hdr_find($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $16 = $6;
 $17 = HEAP8[$16>>0]|0;
 $18 = $17 << 24 >> 24;
 $19 = $18 << 8;
 $20 = $6;
 $21 = ((($20)) + 1|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22 << 24 >> 24;
 $24 = $19 | $23;
 $11 = $24;
 $25 = $7;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $27 = $6;
  $28 = HEAP8[$27>>0]|0;
  $29 = $28 << 24 >> 24;
  $30 = ($29|0)==(83);
  if ($30) {
   $31 = $6;
   $32 = ((($31)) + 1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33 << 24 >> 24;
   $35 = ($34|0)==(81);
   if ($35) {
    $36 = $7;
    $37 = HEAP8[$36>>0]|0;
    $38 = $37 << 24 >> 24;
    $39 = ($38|0)==(83);
    if ($39) {
     $40 = $7;
     $41 = ((($40)) + 1|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = $42 << 24 >> 24;
     $44 = ($43|0)==(78);
     if ($44) {
      $45 = $5;
      $46 = ((($45)) + 36|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = $8;
      $49 = (_kh_get_m_s2i($47,$48)|0);
      $12 = $49;
      $50 = $12;
      $51 = $5;
      $52 = ((($51)) + 36|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = HEAP32[$53>>2]|0;
      $55 = ($50|0)!=($54|0);
      if ($55) {
       $56 = $12;
       $57 = $5;
       $58 = ((($57)) + 36|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = ((($59)) + 24|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = (($61) + ($56<<2)|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = $5;
       $65 = ((($64)) + 32|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = (($66) + ($63<<4)|0);
       $68 = ((($67)) + 8|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = $69;
      } else {
       $70 = 0;
      }
      $4 = $70;
      $241 = $4;
      STACKTOP = sp;return ($241|0);
     }
    }
   }
  }
  $71 = $6;
  $72 = HEAP8[$71>>0]|0;
  $73 = $72 << 24 >> 24;
  $74 = ($73|0)==(82);
  if ($74) {
   $75 = $6;
   $76 = ((($75)) + 1|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77 << 24 >> 24;
   $79 = ($78|0)==(71);
   if ($79) {
    $80 = $7;
    $81 = HEAP8[$80>>0]|0;
    $82 = $81 << 24 >> 24;
    $83 = ($82|0)==(73);
    if ($83) {
     $84 = $7;
     $85 = ((($84)) + 1|0);
     $86 = HEAP8[$85>>0]|0;
     $87 = $86 << 24 >> 24;
     $88 = ($87|0)==(68);
     if ($88) {
      $89 = $5;
      $90 = ((($89)) + 48|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = $8;
      $93 = (_kh_get_m_s2i($91,$92)|0);
      $12 = $93;
      $94 = $12;
      $95 = $5;
      $96 = ((($95)) + 48|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = HEAP32[$97>>2]|0;
      $99 = ($94|0)!=($98|0);
      if ($99) {
       $100 = $12;
       $101 = $5;
       $102 = ((($101)) + 48|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ((($103)) + 24|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = (($105) + ($100<<2)|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = $5;
       $109 = ((($108)) + 44|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = (($110) + (($107*20)|0)|0);
       $112 = ((($111)) + 4|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = $113;
      } else {
       $114 = 0;
      }
      $4 = $114;
      $241 = $4;
      STACKTOP = sp;return ($241|0);
     }
    }
   }
  }
  $115 = $6;
  $116 = HEAP8[$115>>0]|0;
  $117 = $116 << 24 >> 24;
  $118 = ($117|0)==(80);
  if ($118) {
   $119 = $6;
   $120 = ((($119)) + 1|0);
   $121 = HEAP8[$120>>0]|0;
   $122 = $121 << 24 >> 24;
   $123 = ($122|0)==(71);
   if ($123) {
    $124 = $7;
    $125 = HEAP8[$124>>0]|0;
    $126 = $125 << 24 >> 24;
    $127 = ($126|0)==(73);
    if ($127) {
     $128 = $7;
     $129 = ((($128)) + 1|0);
     $130 = HEAP8[$129>>0]|0;
     $131 = $130 << 24 >> 24;
     $132 = ($131|0)==(68);
     if ($132) {
      $133 = $5;
      $134 = ((($133)) + 68|0);
      $135 = HEAP32[$134>>2]|0;
      $136 = $8;
      $137 = (_kh_get_m_s2i($135,$136)|0);
      $12 = $137;
      $138 = $12;
      $139 = $5;
      $140 = ((($139)) + 68|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = HEAP32[$141>>2]|0;
      $143 = ($138|0)!=($142|0);
      if ($143) {
       $144 = $12;
       $145 = $5;
       $146 = ((($145)) + 68|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = ((($147)) + 24|0);
       $149 = HEAP32[$148>>2]|0;
       $150 = (($149) + ($144<<2)|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = $5;
       $153 = ((($152)) + 64|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = (($154) + (($151*24)|0)|0);
       $156 = ((($155)) + 4|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = $157;
      } else {
       $158 = 0;
      }
      $4 = $158;
      $241 = $4;
      STACKTOP = sp;return ($241|0);
     }
    }
   }
  }
 }
 $159 = $5;
 $160 = ((($159)) + 12|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = $11;
 $163 = (_kh_get_sam_hdr($161,$162)|0);
 $12 = $163;
 $164 = $12;
 $165 = $5;
 $166 = ((($165)) + 12|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = HEAP32[$167>>2]|0;
 $169 = ($164|0)==($168|0);
 if ($169) {
  $4 = 0;
  $241 = $4;
  STACKTOP = sp;return ($241|0);
 }
 $170 = $7;
 $171 = ($170|0)!=(0|0);
 $172 = $12;
 $173 = $5;
 $174 = ((($173)) + 12|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = ((($175)) + 24|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = (($177) + ($172<<2)|0);
 $179 = HEAP32[$178>>2]|0;
 if (!($171)) {
  $4 = $179;
  $241 = $4;
  STACKTOP = sp;return ($241|0);
 }
 $10 = $179;
 $9 = $179;
 L40: while(1) {
  $180 = $9;
  $181 = ((($180)) + 8|0);
  $182 = HEAP32[$181>>2]|0;
  $13 = $182;
  while(1) {
   $183 = $13;
   $184 = ($183|0)!=(0|0);
   if (!($184)) {
    break;
   }
   $185 = $13;
   $186 = ((($185)) + 4|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = HEAP8[$187>>0]|0;
   $189 = $188 << 24 >> 24;
   $190 = $7;
   $191 = HEAP8[$190>>0]|0;
   $192 = $191 << 24 >> 24;
   $193 = ($189|0)==($192|0);
   if ($193) {
    $194 = $13;
    $195 = ((($194)) + 4|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = ((($196)) + 1|0);
    $198 = HEAP8[$197>>0]|0;
    $199 = $198 << 24 >> 24;
    $200 = $7;
    $201 = ((($200)) + 1|0);
    $202 = HEAP8[$201>>0]|0;
    $203 = $202 << 24 >> 24;
    $204 = ($199|0)==($203|0);
    if ($204) {
     $205 = $13;
     $206 = ((($205)) + 4|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ((($207)) + 3|0);
     $14 = $208;
     $209 = $8;
     $15 = $209;
     while(1) {
      $210 = $14;
      $211 = HEAP8[$210>>0]|0;
      $212 = $211 << 24 >> 24;
      $213 = ($212|0)!=(0);
      if (!($213)) {
       break;
      }
      $214 = $14;
      $215 = HEAP8[$214>>0]|0;
      $216 = $215 << 24 >> 24;
      $217 = $15;
      $218 = HEAP8[$217>>0]|0;
      $219 = $218 << 24 >> 24;
      $220 = ($216|0)==($219|0);
      if (!($220)) {
       break;
      }
      $221 = $14;
      $222 = ((($221)) + 1|0);
      $14 = $222;
      $223 = $15;
      $224 = ((($223)) + 1|0);
      $15 = $224;
     }
     $225 = $15;
     $226 = HEAP8[$225>>0]|0;
     $227 = $226 << 24 >> 24;
     $228 = ($227|0)!=(0);
     if (!($228)) {
      $229 = $14;
      $230 = HEAP8[$229>>0]|0;
      $231 = $230 << 24 >> 24;
      $232 = ($231|0)!=(0);
      if (!($232)) {
       label = 38;
       break L40;
      }
     }
    }
   }
   $234 = $13;
   $235 = HEAP32[$234>>2]|0;
   $13 = $235;
  }
  $236 = $9;
  $237 = HEAP32[$236>>2]|0;
  $9 = $237;
  $238 = $9;
  $239 = $10;
  $240 = ($238|0)!=($239|0);
  if (!($240)) {
   label = 41;
   break;
  }
 }
 if ((label|0) == 38) {
  $233 = $9;
  $4 = $233;
  $241 = $4;
  STACKTOP = sp;return ($241|0);
 }
 else if ((label|0) == 41) {
  $4 = 0;
  $241 = $4;
  STACKTOP = sp;return ($241|0);
 }
 return (0)|0;
}
function _kh_get_sam_hdr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $2 = 0;
  $83 = $2;
  STACKTOP = sp;return ($83|0);
 }
 $9 = 0;
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - 1)|0;
 $8 = $15;
 $16 = $4;
 $5 = $16;
 $17 = $5;
 $18 = $8;
 $19 = $17 & $18;
 $6 = $19;
 $20 = $6;
 $7 = $20;
 while(1) {
  $21 = $6;
  $22 = $21 >>> 4;
  $23 = $3;
  $24 = ((($23)) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($22<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $6;
  $29 = $28 & 15;
  $30 = $29 << 1;
  $31 = $27 >>> $30;
  $32 = $31 & 2;
  $33 = ($32|0)!=(0);
  if ($33) {
   $84 = 0;
  } else {
   $34 = $6;
   $35 = $34 >>> 4;
   $36 = $3;
   $37 = ((($36)) + 16|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + ($35<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $6;
   $42 = $41 & 15;
   $43 = $42 << 1;
   $44 = $40 >>> $43;
   $45 = $44 & 1;
   $46 = ($45|0)!=(0);
   if ($46) {
    $84 = 1;
   } else {
    $47 = $6;
    $48 = $3;
    $49 = ((($48)) + 20|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($50) + ($47<<2)|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $4;
    $54 = ($52|0)==($53|0);
    $55 = $54 ^ 1;
    $84 = $55;
   }
  }
  $56 = $6;
  if (!($84)) {
   break;
  }
  $57 = $9;
  $58 = (($57) + 1)|0;
  $9 = $58;
  $59 = (($56) + ($58))|0;
  $60 = $8;
  $61 = $59 & $60;
  $6 = $61;
  $62 = $6;
  $63 = $7;
  $64 = ($62|0)==($63|0);
  if ($64) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  $65 = $3;
  $66 = HEAP32[$65>>2]|0;
  $2 = $66;
  $83 = $2;
  STACKTOP = sp;return ($83|0);
 }
 $67 = $56 >>> 4;
 $68 = $3;
 $69 = ((($68)) + 16|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($70) + ($67<<2)|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $6;
 $74 = $73 & 15;
 $75 = $74 << 1;
 $76 = $72 >>> $75;
 $77 = $76 & 3;
 $78 = ($77|0)!=(0);
 if ($78) {
  $79 = $3;
  $80 = HEAP32[$79>>2]|0;
  $82 = $80;
 } else {
  $81 = $6;
  $82 = $81;
 }
 $2 = $82;
 $83 = $2;
 STACKTOP = sp;return ($83|0);
}
function _sam_hdr_find_key($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = 0;
 $11 = $6;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $9 = $13;
 while(1) {
  $14 = $9;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   label = 9;
   break;
  }
  $16 = $9;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = $7;
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 << 24 >> 24;
  $24 = ($20|0)==($23|0);
  if ($24) {
   $25 = $9;
   $26 = ((($25)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 1|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29 << 24 >> 24;
   $31 = $7;
   $32 = ((($31)) + 1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33 << 24 >> 24;
   $35 = ($30|0)==($34|0);
   if ($35) {
    label = 5;
    break;
   }
  }
  $41 = $9;
  $10 = $41;
  $42 = $9;
  $43 = HEAP32[$42>>2]|0;
  $9 = $43;
 }
 if ((label|0) == 5) {
  $36 = $8;
  $37 = ($36|0)!=(0|0);
  if ($37) {
   $38 = $10;
   $39 = $8;
   HEAP32[$39>>2] = $38;
  }
  $40 = $9;
  $4 = $40;
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 }
 else if ((label|0) == 9) {
  $44 = $8;
  $45 = ($44|0)!=(0|0);
  if ($45) {
   $46 = $10;
   $47 = $8;
   HEAP32[$47>>2] = $46;
  }
  $4 = 0;
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function _sam_hdr_sort_order($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _sam_hdr_new() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = (_calloc(1,1112)|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $0 = 0;
  $93 = $0;
  STACKTOP = sp;return ($93|0);
 }
 $5 = (_kh_init_sam_hdr()|0);
 $6 = $1;
 $7 = ((($6)) + 12|0);
 HEAP32[$7>>2] = $5;
 $8 = $1;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $1;
  $13 = ((($12)) + 1104|0);
  HEAP32[$13>>2] = 1;
  $14 = $1;
  $15 = ((($14)) + 1108|0);
  HEAP32[$15>>2] = 1;
  $16 = $1;
  $17 = ((($16)) + 28|0);
  HEAP32[$17>>2] = 0;
  $18 = $1;
  $19 = ((($18)) + 32|0);
  HEAP32[$19>>2] = 0;
  $20 = (_kh_init_m_s2i_568()|0);
  $21 = $1;
  $22 = ((($21)) + 36|0);
  HEAP32[$22>>2] = $20;
  $23 = ($20|0)!=(0|0);
  if ($23) {
   $24 = $1;
   $25 = ((($24)) + 40|0);
   HEAP32[$25>>2] = 0;
   $26 = $1;
   $27 = ((($26)) + 44|0);
   HEAP32[$27>>2] = 0;
   $28 = (_kh_init_m_s2i_568()|0);
   $29 = $1;
   $30 = ((($29)) + 48|0);
   HEAP32[$30>>2] = $28;
   $31 = ($28|0)!=(0|0);
   if ($31) {
    $32 = $1;
    $33 = ((($32)) + 52|0);
    HEAP32[$33>>2] = 0;
    $34 = $1;
    $35 = ((($34)) + 64|0);
    HEAP32[$35>>2] = 0;
    $36 = $1;
    $37 = ((($36)) + 60|0);
    HEAP32[$37>>2] = 0;
    $38 = $1;
    $39 = ((($38)) + 56|0);
    HEAP32[$39>>2] = 0;
    $40 = $1;
    $41 = ((($40)) + 72|0);
    HEAP32[$41>>2] = 0;
    $42 = (_kh_init_m_s2i_568()|0);
    $43 = $1;
    $44 = ((($43)) + 68|0);
    HEAP32[$44>>2] = $42;
    $45 = ($42|0)!=(0|0);
    if ($45) {
     $46 = $1;
     HEAP32[$46>>2] = 0;
     $47 = $1;
     $48 = ((($47)) + 4|0);
     HEAP32[$48>>2] = 0;
     $49 = $1;
     $50 = ((($49)) + 8|0);
     HEAP32[$50>>2] = 0;
     $51 = (_pool_create(12)|0);
     $52 = $1;
     $53 = ((($52)) + 24|0);
     HEAP32[$53>>2] = $51;
     $54 = ($51|0)!=(0|0);
     if ($54) {
      $55 = (_pool_create(16)|0);
      $56 = $1;
      $57 = ((($56)) + 20|0);
      HEAP32[$57>>2] = $55;
      $58 = ($55|0)!=(0|0);
      if ($58) {
       $59 = (_string_pool_create(8192)|0);
       $60 = $1;
       $61 = ((($60)) + 16|0);
       HEAP32[$61>>2] = $59;
       $62 = ($59|0)!=(0|0);
       if ($62) {
        $63 = $1;
        $0 = $63;
        $93 = $0;
        STACKTOP = sp;return ($93|0);
       }
      }
     }
    }
   }
  }
 }
 $64 = $1;
 $65 = ((($64)) + 12|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)!=(0|0);
 if ($67) {
  $68 = $1;
  $69 = ((($68)) + 12|0);
  $70 = HEAP32[$69>>2]|0;
  _kh_destroy_sam_hdr($70);
 }
 $71 = $1;
 $72 = ((($71)) + 24|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)!=(0|0);
 if ($74) {
  $75 = $1;
  $76 = ((($75)) + 24|0);
  $77 = HEAP32[$76>>2]|0;
  _pool_destroy($77);
 }
 $78 = $1;
 $79 = ((($78)) + 20|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($80|0)!=(0|0);
 if ($81) {
  $82 = $1;
  $83 = ((($82)) + 20|0);
  $84 = HEAP32[$83>>2]|0;
  _pool_destroy($84);
 }
 $85 = $1;
 $86 = ((($85)) + 16|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)!=(0|0);
 if ($88) {
  $89 = $1;
  $90 = ((($89)) + 16|0);
  $91 = HEAP32[$90>>2]|0;
  _string_pool_destroy($91);
 }
 $92 = $1;
 _free($92);
 $0 = 0;
 $93 = $0;
 STACKTOP = sp;return ($93|0);
}
function _kh_init_sam_hdr() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,28)|0);
 return ($0|0);
}
function _kh_init_m_s2i_568() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,28)|0);
 return ($0|0);
}
function _kh_destroy_sam_hdr($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _sam_hdr_parse_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = (_sam_hdr_new()|0);
 $5 = $6;
 $7 = $5;
 $8 = (0|0)==($7|0);
 do {
  if ($8) {
   $2 = 0;
  } else {
   $9 = $3;
   $10 = (0|0)==($9|0);
   $11 = $5;
   if ($10) {
    $2 = $11;
    break;
   }
   $12 = $3;
   $13 = $4;
   $14 = (_sam_hdr_add_lines($11,$12,$13)|0);
   $15 = (-1)==($14|0);
   $16 = $5;
   if ($15) {
    _sam_hdr_free($16);
    $2 = 0;
    break;
   } else {
    $17 = (_sam_hdr_parse_sort_order($16)|0);
    $18 = $5;
    $19 = ((($18)) + 76|0);
    HEAP32[$19>>2] = $17;
    $20 = $5;
    (_sam_hdr_link_pg($20)|0);
    $21 = $5;
    $2 = $21;
    break;
   }
  }
 } while(0);
 $22 = $2;
 STACKTOP = sp;return ($22|0);
}
function _sam_hdr_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = ((($7)) + 1108|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + -1)|0;
 HEAP32[$8>>2] = $10;
 $11 = ($10|0)>(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = $1;
 $13 = (_ks_str($12)|0);
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $1;
  $16 = ((($15)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $1;
   $20 = ((($19)) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   _free($21);
  }
 }
 $22 = $1;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $1;
  $27 = ((($26)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  _kh_destroy_sam_hdr($28);
 }
 $29 = $1;
 $30 = ((($29)) + 36|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if ($32) {
  $33 = $1;
  $34 = ((($33)) + 36|0);
  $35 = HEAP32[$34>>2]|0;
  _kh_destroy_m_s2i_578($35);
 }
 $36 = $1;
 $37 = ((($36)) + 32|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $2 = 0;
  while(1) {
   $40 = $2;
   $41 = $1;
   $42 = ((($41)) + 28|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($40|0)<($43|0);
   if (!($44)) {
    break;
   }
   $45 = $2;
   $46 = $1;
   $47 = ((($46)) + 32|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + ($45<<4)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)!=(0|0);
   if ($51) {
    $52 = $2;
    $53 = $1;
    $54 = ((($53)) + 32|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (($55) + ($52<<4)|0);
    $57 = HEAP32[$56>>2]|0;
    _free($57);
   }
   $58 = $2;
   $59 = (($58) + 1)|0;
   $2 = $59;
  }
  $60 = $1;
  $61 = ((($60)) + 32|0);
  $62 = HEAP32[$61>>2]|0;
  _free($62);
 }
 $63 = $1;
 $64 = ((($63)) + 48|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($65|0)!=(0|0);
 if ($66) {
  $67 = $1;
  $68 = ((($67)) + 48|0);
  $69 = HEAP32[$68>>2]|0;
  _kh_destroy_m_s2i_578($69);
 }
 $70 = $1;
 $71 = ((($70)) + 44|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72|0)!=(0|0);
 if ($73) {
  $3 = 0;
  while(1) {
   $74 = $3;
   $75 = $1;
   $76 = ((($75)) + 40|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($74|0)<($77|0);
   if (!($78)) {
    break;
   }
   $79 = $3;
   $80 = $1;
   $81 = ((($80)) + 44|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (($82) + (($79*20)|0)|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ($84|0)!=(0|0);
   if ($85) {
    $86 = $3;
    $87 = $1;
    $88 = ((($87)) + 44|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (($89) + (($86*20)|0)|0);
    $91 = HEAP32[$90>>2]|0;
    _free($91);
   }
   $92 = $3;
   $93 = (($92) + 1)|0;
   $3 = $93;
  }
  $94 = $1;
  $95 = ((($94)) + 44|0);
  $96 = HEAP32[$95>>2]|0;
  _free($96);
 }
 $97 = $1;
 $98 = ((($97)) + 68|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ($99|0)!=(0|0);
 if ($100) {
  $101 = $1;
  $102 = ((($101)) + 68|0);
  $103 = HEAP32[$102>>2]|0;
  _kh_destroy_m_s2i_578($103);
 }
 $104 = $1;
 $105 = ((($104)) + 64|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ($106|0)!=(0|0);
 if ($107) {
  $4 = 0;
  while(1) {
   $108 = $4;
   $109 = $1;
   $110 = ((($109)) + 52|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = ($108|0)<($111|0);
   if (!($112)) {
    break;
   }
   $113 = $4;
   $114 = $1;
   $115 = ((($114)) + 64|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (($116) + (($113*24)|0)|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = ($118|0)!=(0|0);
   if ($119) {
    $120 = $4;
    $121 = $1;
    $122 = ((($121)) + 64|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = (($123) + (($120*24)|0)|0);
    $125 = HEAP32[$124>>2]|0;
    _free($125);
   }
   $126 = $4;
   $127 = (($126) + 1)|0;
   $4 = $127;
  }
  $128 = $1;
  $129 = ((($128)) + 64|0);
  $130 = HEAP32[$129>>2]|0;
  _free($130);
 }
 $131 = $1;
 $132 = ((($131)) + 72|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = ($133|0)!=(0|0);
 if ($134) {
  $135 = $1;
  $136 = ((($135)) + 72|0);
  $137 = HEAP32[$136>>2]|0;
  _free($137);
 }
 $138 = $1;
 $139 = ((($138)) + 20|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = ($140|0)!=(0|0);
 if ($141) {
  $142 = $1;
  $143 = ((($142)) + 20|0);
  $144 = HEAP32[$143>>2]|0;
  _pool_destroy($144);
 }
 $145 = $1;
 $146 = ((($145)) + 24|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = ($147|0)!=(0|0);
 if ($148) {
  $149 = $1;
  $150 = ((($149)) + 24|0);
  $151 = HEAP32[$150>>2]|0;
  _pool_destroy($151);
 }
 $152 = $1;
 $153 = ((($152)) + 16|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = ($154|0)!=(0|0);
 if ($155) {
  $156 = $1;
  $157 = ((($156)) + 16|0);
  $158 = HEAP32[$157>>2]|0;
  _string_pool_destroy($158);
 }
 $159 = $1;
 _free($159);
 STACKTOP = sp;return;
}
function _sam_hdr_parse_sort_order($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $1 = $0;
 $3 = -1;
 $6 = $1;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP8[20247]|0;
 $10 = $9 << 24 >> 24;
 $11 = $10 << 8;
 $12 = HEAP8[(20248)>>0]|0;
 $13 = $12 << 24 >> 24;
 $14 = $11 | $13;
 $15 = (_kh_get_sam_hdr($8,$14)|0);
 $2 = $15;
 $16 = $2;
 $17 = $1;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($16|0)!=($20|0);
 if (!($21)) {
  $79 = $3;
  STACKTOP = sp;return ($79|0);
 }
 $22 = $2;
 $23 = $1;
 $24 = ((($23)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + ($22<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 $4 = $29;
 $30 = $4;
 $31 = ((($30)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $5 = $32;
 while(1) {
  $33 = $5;
  $34 = ($33|0)!=(0|0);
  if (!($34)) {
   break;
  }
  $35 = $5;
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = HEAP8[$37>>0]|0;
  $39 = $38 << 24 >> 24;
  $40 = ($39|0)==(83);
  do {
   if ($40) {
    $41 = $5;
    $42 = ((($41)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ((($43)) + 1|0);
    $45 = HEAP8[$44>>0]|0;
    $46 = $45 << 24 >> 24;
    $47 = ($46|0)==(79);
    if ($47) {
     $48 = $5;
     $49 = ((($48)) + 4|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ((($50)) + 3|0);
     $52 = (_strcmp($51,20250)|0);
     $53 = ($52|0)==(0);
     if ($53) {
      $3 = 0;
      break;
     }
     $54 = $5;
     $55 = ((($54)) + 4|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ((($56)) + 3|0);
     $58 = (_strcmp($57,20259)|0);
     $59 = ($58|0)==(0);
     if ($59) {
      $3 = 1;
      break;
     }
     $60 = $5;
     $61 = ((($60)) + 4|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ((($62)) + 3|0);
     $64 = (_strcmp($63,20269)|0);
     $65 = ($64|0)==(0);
     if ($65) {
      $3 = 2;
      break;
     }
     $66 = $5;
     $67 = ((($66)) + 4|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 3|0);
     $70 = (_strcmp($69,20280)|0);
     $71 = ($70|0)!=(0);
     if ($71) {
      $72 = HEAP32[2410]|0;
      $73 = $5;
      $74 = ((($73)) + 4|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = ((($75)) + 3|0);
      HEAP32[$vararg_buffer>>2] = $76;
      (_fprintf($72,20288,$vararg_buffer)|0);
     }
    }
   }
  } while(0);
  $77 = $5;
  $78 = HEAP32[$77>>2]|0;
  $5 = $78;
 }
 $79 = $3;
 STACKTOP = sp;return ($79|0);
}
function _sam_hdr_link_pg($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $5 = 0;
 $9 = $2;
 $10 = ((($9)) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = ((($12)) + 60|0);
 HEAP32[$13>>2] = $11;
 $14 = $2;
 $15 = ((($14)) + 72|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = ((($17)) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19<<2;
 $21 = (_realloc($16,$20)|0);
 $22 = $2;
 $23 = ((($22)) + 72|0);
 HEAP32[$23>>2] = $21;
 $24 = $2;
 $25 = ((($24)) + 72|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  $1 = -1;
  $173 = $1;
  STACKTOP = sp;return ($173|0);
 }
 $3 = 0;
 while(1) {
  $28 = $3;
  $29 = $2;
  $30 = ((($29)) + 52|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($28|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = $3;
  $34 = $3;
  $35 = $2;
  $36 = ((($35)) + 72|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($34<<2)|0);
  HEAP32[$38>>2] = $33;
  $39 = $3;
  $40 = (($39) + 1)|0;
  $3 = $40;
 }
 $3 = 0;
 while(1) {
  $41 = $3;
  $42 = $2;
  $43 = ((($42)) + 52|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($41|0)<($44|0);
  if (!($45)) {
   break;
  }
  $46 = $3;
  $47 = $2;
  $48 = ((($47)) + 64|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + (($46*24)|0)|0);
  $51 = ((($50)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $7 = $52;
  while(1) {
   $53 = $7;
   $54 = ($53|0)!=(0|0);
   if (!($54)) {
    break;
   }
   $55 = $7;
   $56 = ((($55)) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = HEAP8[$57>>0]|0;
   $59 = $58 << 24 >> 24;
   $60 = ($59|0)==(80);
   if ($60) {
    $61 = $7;
    $62 = ((($61)) + 4|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ((($63)) + 1|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 << 24 >> 24;
    $67 = ($66|0)==(80);
    if ($67) {
     break;
    }
   }
   $68 = $7;
   $69 = HEAP32[$68>>2]|0;
   $7 = $69;
  }
  $70 = $7;
  $71 = ($70|0)!=(0|0);
  do {
   if ($71) {
    $72 = $7;
    $73 = ((($72)) + 8|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $7;
    $76 = ((($75)) + 4|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (($77) + ($74)|0);
    $79 = HEAP8[$78>>0]|0;
    $8 = $79;
    $80 = $7;
    $81 = ((($80)) + 8|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $7;
    $84 = ((($83)) + 4|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = (($85) + ($82)|0);
    HEAP8[$86>>0] = 0;
    $87 = $2;
    $88 = ((($87)) + 68|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = $7;
    $91 = ((($90)) + 4|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ((($92)) + 3|0);
    $94 = (_kh_get_m_s2i($89,$93)|0);
    $6 = $94;
    $95 = $8;
    $96 = $7;
    $97 = ((($96)) + 8|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = $7;
    $100 = ((($99)) + 4|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (($101) + ($98)|0);
    HEAP8[$102>>0] = $95;
    $103 = $6;
    $104 = $2;
    $105 = ((($104)) + 68|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = HEAP32[$106>>2]|0;
    $108 = ($103|0)==($107|0);
    if ($108) {
     $5 = -1;
     break;
    } else {
     $109 = $6;
     $110 = $2;
     $111 = ((($110)) + 68|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ((($112)) + 24|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = (($114) + ($109<<2)|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = $2;
     $118 = ((($117)) + 64|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = (($119) + (($116*24)|0)|0);
     $121 = ((($120)) + 16|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = $3;
     $124 = $2;
     $125 = ((($124)) + 64|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($126) + (($123*24)|0)|0);
     $128 = ((($127)) + 20|0);
     HEAP32[$128>>2] = $122;
     $129 = $6;
     $130 = $2;
     $131 = ((($130)) + 68|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 24|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = (($134) + ($129<<2)|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $2;
     $138 = ((($137)) + 72|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (($139) + ($136<<2)|0);
     HEAP32[$140>>2] = -1;
     break;
    }
   }
  } while(0);
  $141 = $3;
  $142 = (($141) + 1)|0;
  $3 = $142;
 }
 $4 = 0;
 $3 = 0;
 while(1) {
  $143 = $3;
  $144 = $2;
  $145 = ((($144)) + 52|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = ($143|0)<($146|0);
  if (!($147)) {
   break;
  }
  $148 = $3;
  $149 = $2;
  $150 = ((($149)) + 72|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($151) + ($148<<2)|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = ($153|0)!=(-1);
  if ($154) {
   $155 = $3;
   $156 = $2;
   $157 = ((($156)) + 72|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = (($158) + ($155<<2)|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = $4;
   $162 = (($161) + 1)|0;
   $4 = $162;
   $163 = $2;
   $164 = ((($163)) + 72|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = (($165) + ($161<<2)|0);
   HEAP32[$166>>2] = $160;
  }
  $167 = $3;
  $168 = (($167) + 1)|0;
  $3 = $168;
 }
 $169 = $4;
 $170 = $2;
 $171 = ((($170)) + 56|0);
 HEAP32[$171>>2] = $169;
 $172 = $5;
 $1 = $172;
 $173 = $1;
 STACKTOP = sp;return ($173|0);
}
function _kh_destroy_m_s2i_578($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _kvsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vacopy_currentptr = 0, $vacopy_currentptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $5;
 $vacopy_currentptr = HEAP32[$8>>2]|0;
 HEAP32[$6>>2] = $vacopy_currentptr;
 $9 = $3;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + ($13)|0);
 $15 = $3;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $3;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) - ($19))|0;
 $21 = $4;
 $22 = (_vsnprintf($14,$20,$21,$6)|0);
 $7 = $22;
 $23 = $7;
 $24 = (($23) + 1)|0;
 $25 = $3;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $3;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) - ($29))|0;
 $31 = ($24>>>0)>($30>>>0);
 if (!($31)) {
  $111 = $7;
  $112 = $3;
  $113 = HEAP32[$112>>2]|0;
  $114 = (($113) + ($111))|0;
  HEAP32[$112>>2] = $114;
  $115 = $7;
  STACKTOP = sp;return ($115|0);
 }
 $32 = $3;
 $33 = HEAP32[$32>>2]|0;
 $34 = $7;
 $35 = (($33) + ($34))|0;
 $36 = (($35) + 2)|0;
 $37 = $3;
 $38 = ((($37)) + 4|0);
 HEAP32[$38>>2] = $36;
 $39 = $3;
 $40 = ((($39)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + -1)|0;
 HEAP32[$40>>2] = $42;
 $43 = $3;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $45 >>> 1;
 $47 = $3;
 $48 = ((($47)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 | $46;
 HEAP32[$48>>2] = $50;
 $51 = $3;
 $52 = ((($51)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $53 >>> 2;
 $55 = $3;
 $56 = ((($55)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $57 | $54;
 HEAP32[$56>>2] = $58;
 $59 = $3;
 $60 = ((($59)) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $61 >>> 4;
 $63 = $3;
 $64 = ((($63)) + 4|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $65 | $62;
 HEAP32[$64>>2] = $66;
 $67 = $3;
 $68 = ((($67)) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $69 >>> 8;
 $71 = $3;
 $72 = ((($71)) + 4|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $73 | $70;
 HEAP32[$72>>2] = $74;
 $75 = $3;
 $76 = ((($75)) + 4|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $77 >>> 16;
 $79 = $3;
 $80 = ((($79)) + 4|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $81 | $78;
 HEAP32[$80>>2] = $82;
 $83 = $3;
 $84 = ((($83)) + 4|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($85) + 1)|0;
 HEAP32[$84>>2] = $86;
 $87 = $3;
 $88 = ((($87)) + 8|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $3;
 $91 = ((($90)) + 4|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (_realloc($89,$92)|0);
 $94 = $3;
 $95 = ((($94)) + 8|0);
 HEAP32[$95>>2] = $93;
 $96 = $5;
 $vacopy_currentptr3 = HEAP32[$96>>2]|0;
 HEAP32[$6>>2] = $vacopy_currentptr3;
 $97 = $3;
 $98 = ((($97)) + 8|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = $3;
 $101 = HEAP32[$100>>2]|0;
 $102 = (($99) + ($101)|0);
 $103 = $3;
 $104 = ((($103)) + 4|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = $3;
 $107 = HEAP32[$106>>2]|0;
 $108 = (($105) - ($107))|0;
 $109 = $4;
 $110 = (_vsnprintf($102,$108,$109,$6)|0);
 $7 = $110;
 $111 = $7;
 $112 = $3;
 $113 = HEAP32[$112>>2]|0;
 $114 = (($113) + ($111))|0;
 HEAP32[$112>>2] = $114;
 $115 = $7;
 STACKTOP = sp;return ($115|0);
}
function _ksprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 HEAP32[$4>>2] = $varargs;
 $6 = $2;
 $7 = $3;
 $8 = (_kvsprintf($6,$7,$4)|0);
 $5 = $8;
 $9 = $5;
 STACKTOP = sp;return ($9|0);
}
function _hts_md5_reset($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 HEAP32[$3>>2] = 1732584193;
 $4 = $1;
 $5 = ((($4)) + 12|0);
 HEAP32[$5>>2] = -271733879;
 $6 = $1;
 $7 = ((($6)) + 16|0);
 HEAP32[$7>>2] = -1732584194;
 $8 = $1;
 $9 = ((($8)) + 20|0);
 HEAP32[$9>>2] = 271733878;
 $10 = $1;
 HEAP32[$10>>2] = 0;
 $11 = $1;
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function _hts_md5_update($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $10 = HEAP32[$9>>2]|0;
 $6 = $10;
 $11 = $6;
 $12 = $5;
 $13 = (($11) + ($12))|0;
 $14 = $13 & 536870911;
 $15 = $3;
 HEAP32[$15>>2] = $14;
 $16 = $6;
 $17 = ($14>>>0)<($16>>>0);
 if ($17) {
  $18 = $3;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 1)|0;
  HEAP32[$19>>2] = $21;
 }
 $22 = $5;
 $23 = $22 >>> 29;
 $24 = $3;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($23))|0;
 HEAP32[$25>>2] = $27;
 $28 = $6;
 $29 = $28 & 63;
 $7 = $29;
 $30 = $7;
 $31 = ($30|0)!=(0);
 do {
  if ($31) {
   $32 = $7;
   $33 = (64 - ($32))|0;
   $8 = $33;
   $34 = $5;
   $35 = $8;
   $36 = ($34>>>0)<($35>>>0);
   $37 = $7;
   $38 = $3;
   $39 = ((($38)) + 24|0);
   $40 = (($39) + ($37)|0);
   $41 = $4;
   if (!($36)) {
    $43 = $8;
    _memcpy(($40|0),($41|0),($43|0))|0;
    $44 = $4;
    $45 = $8;
    $46 = (($44) + ($45)|0);
    $4 = $46;
    $47 = $8;
    $48 = $5;
    $49 = (($48) - ($47))|0;
    $5 = $49;
    $50 = $3;
    $51 = $3;
    $52 = ((($51)) + 24|0);
    (_body($50,$52,64)|0);
    break;
   }
   $42 = $5;
   _memcpy(($40|0),($41|0),($42|0))|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $53 = $5;
 $54 = ($53>>>0)>=(64);
 if ($54) {
  $55 = $3;
  $56 = $4;
  $57 = $5;
  $58 = $57 & -64;
  $59 = (_body($55,$56,$58)|0);
  $4 = $59;
  $60 = $5;
  $61 = $60 & 63;
  $5 = $61;
 }
 $62 = $3;
 $63 = ((($62)) + 24|0);
 $64 = $4;
 $65 = $5;
 _memcpy(($63|0),($64|0),($65|0))|0;
 STACKTOP = sp;return;
}
function _body($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $15 = $4;
 $6 = $15;
 $16 = $3;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $7 = $18;
 $19 = $3;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $8 = $21;
 $22 = $3;
 $23 = ((($22)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $9 = $24;
 $25 = $3;
 $26 = ((($25)) + 20|0);
 $27 = HEAP32[$26>>2]|0;
 $10 = $27;
 while(1) {
  $28 = $7;
  $11 = $28;
  $29 = $8;
  $12 = $29;
  $30 = $9;
  $13 = $30;
  $31 = $10;
  $14 = $31;
  $32 = $10;
  $33 = $8;
  $34 = $9;
  $35 = $10;
  $36 = $34 ^ $35;
  $37 = $33 & $36;
  $38 = $32 ^ $37;
  $39 = $6;
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $6;
  $43 = ((($42)) + 1|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = $45 << 8;
  $47 = $41 | $46;
  $48 = $6;
  $49 = ((($48)) + 2|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = $51 << 16;
  $53 = $47 | $52;
  $54 = $6;
  $55 = ((($54)) + 3|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = $57 << 24;
  $59 = $53 | $58;
  $60 = $3;
  $61 = ((($60)) + 88|0);
  HEAP32[$61>>2] = $59;
  $62 = (($38) + ($59))|0;
  $63 = (($62) + -680876936)|0;
  $64 = $7;
  $65 = (($64) + ($63))|0;
  $7 = $65;
  $66 = $7;
  $67 = $66 << 7;
  $68 = $7;
  $69 = $68 >>> 25;
  $70 = $67 | $69;
  $7 = $70;
  $71 = $8;
  $72 = $7;
  $73 = (($72) + ($71))|0;
  $7 = $73;
  $74 = $9;
  $75 = $7;
  $76 = $8;
  $77 = $9;
  $78 = $76 ^ $77;
  $79 = $75 & $78;
  $80 = $74 ^ $79;
  $81 = $6;
  $82 = ((($81)) + 4|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83&255;
  $85 = $6;
  $86 = ((($85)) + 5|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $89 = $88 << 8;
  $90 = $84 | $89;
  $91 = $6;
  $92 = ((($91)) + 6|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = $93&255;
  $95 = $94 << 16;
  $96 = $90 | $95;
  $97 = $6;
  $98 = ((($97)) + 7|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = $100 << 24;
  $102 = $96 | $101;
  $103 = $3;
  $104 = ((($103)) + 88|0);
  $105 = ((($104)) + 4|0);
  HEAP32[$105>>2] = $102;
  $106 = (($80) + ($102))|0;
  $107 = (($106) + -389564586)|0;
  $108 = $10;
  $109 = (($108) + ($107))|0;
  $10 = $109;
  $110 = $10;
  $111 = $110 << 12;
  $112 = $10;
  $113 = $112 >>> 20;
  $114 = $111 | $113;
  $10 = $114;
  $115 = $7;
  $116 = $10;
  $117 = (($116) + ($115))|0;
  $10 = $117;
  $118 = $8;
  $119 = $10;
  $120 = $7;
  $121 = $8;
  $122 = $120 ^ $121;
  $123 = $119 & $122;
  $124 = $118 ^ $123;
  $125 = $6;
  $126 = ((($125)) + 8|0);
  $127 = HEAP8[$126>>0]|0;
  $128 = $127&255;
  $129 = $6;
  $130 = ((($129)) + 9|0);
  $131 = HEAP8[$130>>0]|0;
  $132 = $131&255;
  $133 = $132 << 8;
  $134 = $128 | $133;
  $135 = $6;
  $136 = ((($135)) + 10|0);
  $137 = HEAP8[$136>>0]|0;
  $138 = $137&255;
  $139 = $138 << 16;
  $140 = $134 | $139;
  $141 = $6;
  $142 = ((($141)) + 11|0);
  $143 = HEAP8[$142>>0]|0;
  $144 = $143&255;
  $145 = $144 << 24;
  $146 = $140 | $145;
  $147 = $3;
  $148 = ((($147)) + 88|0);
  $149 = ((($148)) + 8|0);
  HEAP32[$149>>2] = $146;
  $150 = (($124) + ($146))|0;
  $151 = (($150) + 606105819)|0;
  $152 = $9;
  $153 = (($152) + ($151))|0;
  $9 = $153;
  $154 = $9;
  $155 = $154 << 17;
  $156 = $9;
  $157 = $156 >>> 15;
  $158 = $155 | $157;
  $9 = $158;
  $159 = $10;
  $160 = $9;
  $161 = (($160) + ($159))|0;
  $9 = $161;
  $162 = $7;
  $163 = $9;
  $164 = $10;
  $165 = $7;
  $166 = $164 ^ $165;
  $167 = $163 & $166;
  $168 = $162 ^ $167;
  $169 = $6;
  $170 = ((($169)) + 12|0);
  $171 = HEAP8[$170>>0]|0;
  $172 = $171&255;
  $173 = $6;
  $174 = ((($173)) + 13|0);
  $175 = HEAP8[$174>>0]|0;
  $176 = $175&255;
  $177 = $176 << 8;
  $178 = $172 | $177;
  $179 = $6;
  $180 = ((($179)) + 14|0);
  $181 = HEAP8[$180>>0]|0;
  $182 = $181&255;
  $183 = $182 << 16;
  $184 = $178 | $183;
  $185 = $6;
  $186 = ((($185)) + 15|0);
  $187 = HEAP8[$186>>0]|0;
  $188 = $187&255;
  $189 = $188 << 24;
  $190 = $184 | $189;
  $191 = $3;
  $192 = ((($191)) + 88|0);
  $193 = ((($192)) + 12|0);
  HEAP32[$193>>2] = $190;
  $194 = (($168) + ($190))|0;
  $195 = (($194) + -1044525330)|0;
  $196 = $8;
  $197 = (($196) + ($195))|0;
  $8 = $197;
  $198 = $8;
  $199 = $198 << 22;
  $200 = $8;
  $201 = $200 >>> 10;
  $202 = $199 | $201;
  $8 = $202;
  $203 = $9;
  $204 = $8;
  $205 = (($204) + ($203))|0;
  $8 = $205;
  $206 = $10;
  $207 = $8;
  $208 = $9;
  $209 = $10;
  $210 = $208 ^ $209;
  $211 = $207 & $210;
  $212 = $206 ^ $211;
  $213 = $6;
  $214 = ((($213)) + 16|0);
  $215 = HEAP8[$214>>0]|0;
  $216 = $215&255;
  $217 = $6;
  $218 = ((($217)) + 17|0);
  $219 = HEAP8[$218>>0]|0;
  $220 = $219&255;
  $221 = $220 << 8;
  $222 = $216 | $221;
  $223 = $6;
  $224 = ((($223)) + 18|0);
  $225 = HEAP8[$224>>0]|0;
  $226 = $225&255;
  $227 = $226 << 16;
  $228 = $222 | $227;
  $229 = $6;
  $230 = ((($229)) + 19|0);
  $231 = HEAP8[$230>>0]|0;
  $232 = $231&255;
  $233 = $232 << 24;
  $234 = $228 | $233;
  $235 = $3;
  $236 = ((($235)) + 88|0);
  $237 = ((($236)) + 16|0);
  HEAP32[$237>>2] = $234;
  $238 = (($212) + ($234))|0;
  $239 = (($238) + -176418897)|0;
  $240 = $7;
  $241 = (($240) + ($239))|0;
  $7 = $241;
  $242 = $7;
  $243 = $242 << 7;
  $244 = $7;
  $245 = $244 >>> 25;
  $246 = $243 | $245;
  $7 = $246;
  $247 = $8;
  $248 = $7;
  $249 = (($248) + ($247))|0;
  $7 = $249;
  $250 = $9;
  $251 = $7;
  $252 = $8;
  $253 = $9;
  $254 = $252 ^ $253;
  $255 = $251 & $254;
  $256 = $250 ^ $255;
  $257 = $6;
  $258 = ((($257)) + 20|0);
  $259 = HEAP8[$258>>0]|0;
  $260 = $259&255;
  $261 = $6;
  $262 = ((($261)) + 21|0);
  $263 = HEAP8[$262>>0]|0;
  $264 = $263&255;
  $265 = $264 << 8;
  $266 = $260 | $265;
  $267 = $6;
  $268 = ((($267)) + 22|0);
  $269 = HEAP8[$268>>0]|0;
  $270 = $269&255;
  $271 = $270 << 16;
  $272 = $266 | $271;
  $273 = $6;
  $274 = ((($273)) + 23|0);
  $275 = HEAP8[$274>>0]|0;
  $276 = $275&255;
  $277 = $276 << 24;
  $278 = $272 | $277;
  $279 = $3;
  $280 = ((($279)) + 88|0);
  $281 = ((($280)) + 20|0);
  HEAP32[$281>>2] = $278;
  $282 = (($256) + ($278))|0;
  $283 = (($282) + 1200080426)|0;
  $284 = $10;
  $285 = (($284) + ($283))|0;
  $10 = $285;
  $286 = $10;
  $287 = $286 << 12;
  $288 = $10;
  $289 = $288 >>> 20;
  $290 = $287 | $289;
  $10 = $290;
  $291 = $7;
  $292 = $10;
  $293 = (($292) + ($291))|0;
  $10 = $293;
  $294 = $8;
  $295 = $10;
  $296 = $7;
  $297 = $8;
  $298 = $296 ^ $297;
  $299 = $295 & $298;
  $300 = $294 ^ $299;
  $301 = $6;
  $302 = ((($301)) + 24|0);
  $303 = HEAP8[$302>>0]|0;
  $304 = $303&255;
  $305 = $6;
  $306 = ((($305)) + 25|0);
  $307 = HEAP8[$306>>0]|0;
  $308 = $307&255;
  $309 = $308 << 8;
  $310 = $304 | $309;
  $311 = $6;
  $312 = ((($311)) + 26|0);
  $313 = HEAP8[$312>>0]|0;
  $314 = $313&255;
  $315 = $314 << 16;
  $316 = $310 | $315;
  $317 = $6;
  $318 = ((($317)) + 27|0);
  $319 = HEAP8[$318>>0]|0;
  $320 = $319&255;
  $321 = $320 << 24;
  $322 = $316 | $321;
  $323 = $3;
  $324 = ((($323)) + 88|0);
  $325 = ((($324)) + 24|0);
  HEAP32[$325>>2] = $322;
  $326 = (($300) + ($322))|0;
  $327 = (($326) + -1473231341)|0;
  $328 = $9;
  $329 = (($328) + ($327))|0;
  $9 = $329;
  $330 = $9;
  $331 = $330 << 17;
  $332 = $9;
  $333 = $332 >>> 15;
  $334 = $331 | $333;
  $9 = $334;
  $335 = $10;
  $336 = $9;
  $337 = (($336) + ($335))|0;
  $9 = $337;
  $338 = $7;
  $339 = $9;
  $340 = $10;
  $341 = $7;
  $342 = $340 ^ $341;
  $343 = $339 & $342;
  $344 = $338 ^ $343;
  $345 = $6;
  $346 = ((($345)) + 28|0);
  $347 = HEAP8[$346>>0]|0;
  $348 = $347&255;
  $349 = $6;
  $350 = ((($349)) + 29|0);
  $351 = HEAP8[$350>>0]|0;
  $352 = $351&255;
  $353 = $352 << 8;
  $354 = $348 | $353;
  $355 = $6;
  $356 = ((($355)) + 30|0);
  $357 = HEAP8[$356>>0]|0;
  $358 = $357&255;
  $359 = $358 << 16;
  $360 = $354 | $359;
  $361 = $6;
  $362 = ((($361)) + 31|0);
  $363 = HEAP8[$362>>0]|0;
  $364 = $363&255;
  $365 = $364 << 24;
  $366 = $360 | $365;
  $367 = $3;
  $368 = ((($367)) + 88|0);
  $369 = ((($368)) + 28|0);
  HEAP32[$369>>2] = $366;
  $370 = (($344) + ($366))|0;
  $371 = (($370) + -45705983)|0;
  $372 = $8;
  $373 = (($372) + ($371))|0;
  $8 = $373;
  $374 = $8;
  $375 = $374 << 22;
  $376 = $8;
  $377 = $376 >>> 10;
  $378 = $375 | $377;
  $8 = $378;
  $379 = $9;
  $380 = $8;
  $381 = (($380) + ($379))|0;
  $8 = $381;
  $382 = $10;
  $383 = $8;
  $384 = $9;
  $385 = $10;
  $386 = $384 ^ $385;
  $387 = $383 & $386;
  $388 = $382 ^ $387;
  $389 = $6;
  $390 = ((($389)) + 32|0);
  $391 = HEAP8[$390>>0]|0;
  $392 = $391&255;
  $393 = $6;
  $394 = ((($393)) + 33|0);
  $395 = HEAP8[$394>>0]|0;
  $396 = $395&255;
  $397 = $396 << 8;
  $398 = $392 | $397;
  $399 = $6;
  $400 = ((($399)) + 34|0);
  $401 = HEAP8[$400>>0]|0;
  $402 = $401&255;
  $403 = $402 << 16;
  $404 = $398 | $403;
  $405 = $6;
  $406 = ((($405)) + 35|0);
  $407 = HEAP8[$406>>0]|0;
  $408 = $407&255;
  $409 = $408 << 24;
  $410 = $404 | $409;
  $411 = $3;
  $412 = ((($411)) + 88|0);
  $413 = ((($412)) + 32|0);
  HEAP32[$413>>2] = $410;
  $414 = (($388) + ($410))|0;
  $415 = (($414) + 1770035416)|0;
  $416 = $7;
  $417 = (($416) + ($415))|0;
  $7 = $417;
  $418 = $7;
  $419 = $418 << 7;
  $420 = $7;
  $421 = $420 >>> 25;
  $422 = $419 | $421;
  $7 = $422;
  $423 = $8;
  $424 = $7;
  $425 = (($424) + ($423))|0;
  $7 = $425;
  $426 = $9;
  $427 = $7;
  $428 = $8;
  $429 = $9;
  $430 = $428 ^ $429;
  $431 = $427 & $430;
  $432 = $426 ^ $431;
  $433 = $6;
  $434 = ((($433)) + 36|0);
  $435 = HEAP8[$434>>0]|0;
  $436 = $435&255;
  $437 = $6;
  $438 = ((($437)) + 37|0);
  $439 = HEAP8[$438>>0]|0;
  $440 = $439&255;
  $441 = $440 << 8;
  $442 = $436 | $441;
  $443 = $6;
  $444 = ((($443)) + 38|0);
  $445 = HEAP8[$444>>0]|0;
  $446 = $445&255;
  $447 = $446 << 16;
  $448 = $442 | $447;
  $449 = $6;
  $450 = ((($449)) + 39|0);
  $451 = HEAP8[$450>>0]|0;
  $452 = $451&255;
  $453 = $452 << 24;
  $454 = $448 | $453;
  $455 = $3;
  $456 = ((($455)) + 88|0);
  $457 = ((($456)) + 36|0);
  HEAP32[$457>>2] = $454;
  $458 = (($432) + ($454))|0;
  $459 = (($458) + -1958414417)|0;
  $460 = $10;
  $461 = (($460) + ($459))|0;
  $10 = $461;
  $462 = $10;
  $463 = $462 << 12;
  $464 = $10;
  $465 = $464 >>> 20;
  $466 = $463 | $465;
  $10 = $466;
  $467 = $7;
  $468 = $10;
  $469 = (($468) + ($467))|0;
  $10 = $469;
  $470 = $8;
  $471 = $10;
  $472 = $7;
  $473 = $8;
  $474 = $472 ^ $473;
  $475 = $471 & $474;
  $476 = $470 ^ $475;
  $477 = $6;
  $478 = ((($477)) + 40|0);
  $479 = HEAP8[$478>>0]|0;
  $480 = $479&255;
  $481 = $6;
  $482 = ((($481)) + 41|0);
  $483 = HEAP8[$482>>0]|0;
  $484 = $483&255;
  $485 = $484 << 8;
  $486 = $480 | $485;
  $487 = $6;
  $488 = ((($487)) + 42|0);
  $489 = HEAP8[$488>>0]|0;
  $490 = $489&255;
  $491 = $490 << 16;
  $492 = $486 | $491;
  $493 = $6;
  $494 = ((($493)) + 43|0);
  $495 = HEAP8[$494>>0]|0;
  $496 = $495&255;
  $497 = $496 << 24;
  $498 = $492 | $497;
  $499 = $3;
  $500 = ((($499)) + 88|0);
  $501 = ((($500)) + 40|0);
  HEAP32[$501>>2] = $498;
  $502 = (($476) + ($498))|0;
  $503 = (($502) + -42063)|0;
  $504 = $9;
  $505 = (($504) + ($503))|0;
  $9 = $505;
  $506 = $9;
  $507 = $506 << 17;
  $508 = $9;
  $509 = $508 >>> 15;
  $510 = $507 | $509;
  $9 = $510;
  $511 = $10;
  $512 = $9;
  $513 = (($512) + ($511))|0;
  $9 = $513;
  $514 = $7;
  $515 = $9;
  $516 = $10;
  $517 = $7;
  $518 = $516 ^ $517;
  $519 = $515 & $518;
  $520 = $514 ^ $519;
  $521 = $6;
  $522 = ((($521)) + 44|0);
  $523 = HEAP8[$522>>0]|0;
  $524 = $523&255;
  $525 = $6;
  $526 = ((($525)) + 45|0);
  $527 = HEAP8[$526>>0]|0;
  $528 = $527&255;
  $529 = $528 << 8;
  $530 = $524 | $529;
  $531 = $6;
  $532 = ((($531)) + 46|0);
  $533 = HEAP8[$532>>0]|0;
  $534 = $533&255;
  $535 = $534 << 16;
  $536 = $530 | $535;
  $537 = $6;
  $538 = ((($537)) + 47|0);
  $539 = HEAP8[$538>>0]|0;
  $540 = $539&255;
  $541 = $540 << 24;
  $542 = $536 | $541;
  $543 = $3;
  $544 = ((($543)) + 88|0);
  $545 = ((($544)) + 44|0);
  HEAP32[$545>>2] = $542;
  $546 = (($520) + ($542))|0;
  $547 = (($546) + -1990404162)|0;
  $548 = $8;
  $549 = (($548) + ($547))|0;
  $8 = $549;
  $550 = $8;
  $551 = $550 << 22;
  $552 = $8;
  $553 = $552 >>> 10;
  $554 = $551 | $553;
  $8 = $554;
  $555 = $9;
  $556 = $8;
  $557 = (($556) + ($555))|0;
  $8 = $557;
  $558 = $10;
  $559 = $8;
  $560 = $9;
  $561 = $10;
  $562 = $560 ^ $561;
  $563 = $559 & $562;
  $564 = $558 ^ $563;
  $565 = $6;
  $566 = ((($565)) + 48|0);
  $567 = HEAP8[$566>>0]|0;
  $568 = $567&255;
  $569 = $6;
  $570 = ((($569)) + 49|0);
  $571 = HEAP8[$570>>0]|0;
  $572 = $571&255;
  $573 = $572 << 8;
  $574 = $568 | $573;
  $575 = $6;
  $576 = ((($575)) + 50|0);
  $577 = HEAP8[$576>>0]|0;
  $578 = $577&255;
  $579 = $578 << 16;
  $580 = $574 | $579;
  $581 = $6;
  $582 = ((($581)) + 51|0);
  $583 = HEAP8[$582>>0]|0;
  $584 = $583&255;
  $585 = $584 << 24;
  $586 = $580 | $585;
  $587 = $3;
  $588 = ((($587)) + 88|0);
  $589 = ((($588)) + 48|0);
  HEAP32[$589>>2] = $586;
  $590 = (($564) + ($586))|0;
  $591 = (($590) + 1804603682)|0;
  $592 = $7;
  $593 = (($592) + ($591))|0;
  $7 = $593;
  $594 = $7;
  $595 = $594 << 7;
  $596 = $7;
  $597 = $596 >>> 25;
  $598 = $595 | $597;
  $7 = $598;
  $599 = $8;
  $600 = $7;
  $601 = (($600) + ($599))|0;
  $7 = $601;
  $602 = $9;
  $603 = $7;
  $604 = $8;
  $605 = $9;
  $606 = $604 ^ $605;
  $607 = $603 & $606;
  $608 = $602 ^ $607;
  $609 = $6;
  $610 = ((($609)) + 52|0);
  $611 = HEAP8[$610>>0]|0;
  $612 = $611&255;
  $613 = $6;
  $614 = ((($613)) + 53|0);
  $615 = HEAP8[$614>>0]|0;
  $616 = $615&255;
  $617 = $616 << 8;
  $618 = $612 | $617;
  $619 = $6;
  $620 = ((($619)) + 54|0);
  $621 = HEAP8[$620>>0]|0;
  $622 = $621&255;
  $623 = $622 << 16;
  $624 = $618 | $623;
  $625 = $6;
  $626 = ((($625)) + 55|0);
  $627 = HEAP8[$626>>0]|0;
  $628 = $627&255;
  $629 = $628 << 24;
  $630 = $624 | $629;
  $631 = $3;
  $632 = ((($631)) + 88|0);
  $633 = ((($632)) + 52|0);
  HEAP32[$633>>2] = $630;
  $634 = (($608) + ($630))|0;
  $635 = (($634) + -40341101)|0;
  $636 = $10;
  $637 = (($636) + ($635))|0;
  $10 = $637;
  $638 = $10;
  $639 = $638 << 12;
  $640 = $10;
  $641 = $640 >>> 20;
  $642 = $639 | $641;
  $10 = $642;
  $643 = $7;
  $644 = $10;
  $645 = (($644) + ($643))|0;
  $10 = $645;
  $646 = $8;
  $647 = $10;
  $648 = $7;
  $649 = $8;
  $650 = $648 ^ $649;
  $651 = $647 & $650;
  $652 = $646 ^ $651;
  $653 = $6;
  $654 = ((($653)) + 56|0);
  $655 = HEAP8[$654>>0]|0;
  $656 = $655&255;
  $657 = $6;
  $658 = ((($657)) + 57|0);
  $659 = HEAP8[$658>>0]|0;
  $660 = $659&255;
  $661 = $660 << 8;
  $662 = $656 | $661;
  $663 = $6;
  $664 = ((($663)) + 58|0);
  $665 = HEAP8[$664>>0]|0;
  $666 = $665&255;
  $667 = $666 << 16;
  $668 = $662 | $667;
  $669 = $6;
  $670 = ((($669)) + 59|0);
  $671 = HEAP8[$670>>0]|0;
  $672 = $671&255;
  $673 = $672 << 24;
  $674 = $668 | $673;
  $675 = $3;
  $676 = ((($675)) + 88|0);
  $677 = ((($676)) + 56|0);
  HEAP32[$677>>2] = $674;
  $678 = (($652) + ($674))|0;
  $679 = (($678) + -1502002290)|0;
  $680 = $9;
  $681 = (($680) + ($679))|0;
  $9 = $681;
  $682 = $9;
  $683 = $682 << 17;
  $684 = $9;
  $685 = $684 >>> 15;
  $686 = $683 | $685;
  $9 = $686;
  $687 = $10;
  $688 = $9;
  $689 = (($688) + ($687))|0;
  $9 = $689;
  $690 = $7;
  $691 = $9;
  $692 = $10;
  $693 = $7;
  $694 = $692 ^ $693;
  $695 = $691 & $694;
  $696 = $690 ^ $695;
  $697 = $6;
  $698 = ((($697)) + 60|0);
  $699 = HEAP8[$698>>0]|0;
  $700 = $699&255;
  $701 = $6;
  $702 = ((($701)) + 61|0);
  $703 = HEAP8[$702>>0]|0;
  $704 = $703&255;
  $705 = $704 << 8;
  $706 = $700 | $705;
  $707 = $6;
  $708 = ((($707)) + 62|0);
  $709 = HEAP8[$708>>0]|0;
  $710 = $709&255;
  $711 = $710 << 16;
  $712 = $706 | $711;
  $713 = $6;
  $714 = ((($713)) + 63|0);
  $715 = HEAP8[$714>>0]|0;
  $716 = $715&255;
  $717 = $716 << 24;
  $718 = $712 | $717;
  $719 = $3;
  $720 = ((($719)) + 88|0);
  $721 = ((($720)) + 60|0);
  HEAP32[$721>>2] = $718;
  $722 = (($696) + ($718))|0;
  $723 = (($722) + 1236535329)|0;
  $724 = $8;
  $725 = (($724) + ($723))|0;
  $8 = $725;
  $726 = $8;
  $727 = $726 << 22;
  $728 = $8;
  $729 = $728 >>> 10;
  $730 = $727 | $729;
  $8 = $730;
  $731 = $9;
  $732 = $8;
  $733 = (($732) + ($731))|0;
  $8 = $733;
  $734 = $9;
  $735 = $10;
  $736 = $8;
  $737 = $9;
  $738 = $736 ^ $737;
  $739 = $735 & $738;
  $740 = $734 ^ $739;
  $741 = $3;
  $742 = ((($741)) + 88|0);
  $743 = ((($742)) + 4|0);
  $744 = HEAP32[$743>>2]|0;
  $745 = (($740) + ($744))|0;
  $746 = (($745) + -165796510)|0;
  $747 = $7;
  $748 = (($747) + ($746))|0;
  $7 = $748;
  $749 = $7;
  $750 = $749 << 5;
  $751 = $7;
  $752 = $751 >>> 27;
  $753 = $750 | $752;
  $7 = $753;
  $754 = $8;
  $755 = $7;
  $756 = (($755) + ($754))|0;
  $7 = $756;
  $757 = $8;
  $758 = $9;
  $759 = $7;
  $760 = $8;
  $761 = $759 ^ $760;
  $762 = $758 & $761;
  $763 = $757 ^ $762;
  $764 = $3;
  $765 = ((($764)) + 88|0);
  $766 = ((($765)) + 24|0);
  $767 = HEAP32[$766>>2]|0;
  $768 = (($763) + ($767))|0;
  $769 = (($768) + -1069501632)|0;
  $770 = $10;
  $771 = (($770) + ($769))|0;
  $10 = $771;
  $772 = $10;
  $773 = $772 << 9;
  $774 = $10;
  $775 = $774 >>> 23;
  $776 = $773 | $775;
  $10 = $776;
  $777 = $7;
  $778 = $10;
  $779 = (($778) + ($777))|0;
  $10 = $779;
  $780 = $7;
  $781 = $8;
  $782 = $10;
  $783 = $7;
  $784 = $782 ^ $783;
  $785 = $781 & $784;
  $786 = $780 ^ $785;
  $787 = $3;
  $788 = ((($787)) + 88|0);
  $789 = ((($788)) + 44|0);
  $790 = HEAP32[$789>>2]|0;
  $791 = (($786) + ($790))|0;
  $792 = (($791) + 643717713)|0;
  $793 = $9;
  $794 = (($793) + ($792))|0;
  $9 = $794;
  $795 = $9;
  $796 = $795 << 14;
  $797 = $9;
  $798 = $797 >>> 18;
  $799 = $796 | $798;
  $9 = $799;
  $800 = $10;
  $801 = $9;
  $802 = (($801) + ($800))|0;
  $9 = $802;
  $803 = $10;
  $804 = $7;
  $805 = $9;
  $806 = $10;
  $807 = $805 ^ $806;
  $808 = $804 & $807;
  $809 = $803 ^ $808;
  $810 = $3;
  $811 = ((($810)) + 88|0);
  $812 = HEAP32[$811>>2]|0;
  $813 = (($809) + ($812))|0;
  $814 = (($813) + -373897302)|0;
  $815 = $8;
  $816 = (($815) + ($814))|0;
  $8 = $816;
  $817 = $8;
  $818 = $817 << 20;
  $819 = $8;
  $820 = $819 >>> 12;
  $821 = $818 | $820;
  $8 = $821;
  $822 = $9;
  $823 = $8;
  $824 = (($823) + ($822))|0;
  $8 = $824;
  $825 = $9;
  $826 = $10;
  $827 = $8;
  $828 = $9;
  $829 = $827 ^ $828;
  $830 = $826 & $829;
  $831 = $825 ^ $830;
  $832 = $3;
  $833 = ((($832)) + 88|0);
  $834 = ((($833)) + 20|0);
  $835 = HEAP32[$834>>2]|0;
  $836 = (($831) + ($835))|0;
  $837 = (($836) + -701558691)|0;
  $838 = $7;
  $839 = (($838) + ($837))|0;
  $7 = $839;
  $840 = $7;
  $841 = $840 << 5;
  $842 = $7;
  $843 = $842 >>> 27;
  $844 = $841 | $843;
  $7 = $844;
  $845 = $8;
  $846 = $7;
  $847 = (($846) + ($845))|0;
  $7 = $847;
  $848 = $8;
  $849 = $9;
  $850 = $7;
  $851 = $8;
  $852 = $850 ^ $851;
  $853 = $849 & $852;
  $854 = $848 ^ $853;
  $855 = $3;
  $856 = ((($855)) + 88|0);
  $857 = ((($856)) + 40|0);
  $858 = HEAP32[$857>>2]|0;
  $859 = (($854) + ($858))|0;
  $860 = (($859) + 38016083)|0;
  $861 = $10;
  $862 = (($861) + ($860))|0;
  $10 = $862;
  $863 = $10;
  $864 = $863 << 9;
  $865 = $10;
  $866 = $865 >>> 23;
  $867 = $864 | $866;
  $10 = $867;
  $868 = $7;
  $869 = $10;
  $870 = (($869) + ($868))|0;
  $10 = $870;
  $871 = $7;
  $872 = $8;
  $873 = $10;
  $874 = $7;
  $875 = $873 ^ $874;
  $876 = $872 & $875;
  $877 = $871 ^ $876;
  $878 = $3;
  $879 = ((($878)) + 88|0);
  $880 = ((($879)) + 60|0);
  $881 = HEAP32[$880>>2]|0;
  $882 = (($877) + ($881))|0;
  $883 = (($882) + -660478335)|0;
  $884 = $9;
  $885 = (($884) + ($883))|0;
  $9 = $885;
  $886 = $9;
  $887 = $886 << 14;
  $888 = $9;
  $889 = $888 >>> 18;
  $890 = $887 | $889;
  $9 = $890;
  $891 = $10;
  $892 = $9;
  $893 = (($892) + ($891))|0;
  $9 = $893;
  $894 = $10;
  $895 = $7;
  $896 = $9;
  $897 = $10;
  $898 = $896 ^ $897;
  $899 = $895 & $898;
  $900 = $894 ^ $899;
  $901 = $3;
  $902 = ((($901)) + 88|0);
  $903 = ((($902)) + 16|0);
  $904 = HEAP32[$903>>2]|0;
  $905 = (($900) + ($904))|0;
  $906 = (($905) + -405537848)|0;
  $907 = $8;
  $908 = (($907) + ($906))|0;
  $8 = $908;
  $909 = $8;
  $910 = $909 << 20;
  $911 = $8;
  $912 = $911 >>> 12;
  $913 = $910 | $912;
  $8 = $913;
  $914 = $9;
  $915 = $8;
  $916 = (($915) + ($914))|0;
  $8 = $916;
  $917 = $9;
  $918 = $10;
  $919 = $8;
  $920 = $9;
  $921 = $919 ^ $920;
  $922 = $918 & $921;
  $923 = $917 ^ $922;
  $924 = $3;
  $925 = ((($924)) + 88|0);
  $926 = ((($925)) + 36|0);
  $927 = HEAP32[$926>>2]|0;
  $928 = (($923) + ($927))|0;
  $929 = (($928) + 568446438)|0;
  $930 = $7;
  $931 = (($930) + ($929))|0;
  $7 = $931;
  $932 = $7;
  $933 = $932 << 5;
  $934 = $7;
  $935 = $934 >>> 27;
  $936 = $933 | $935;
  $7 = $936;
  $937 = $8;
  $938 = $7;
  $939 = (($938) + ($937))|0;
  $7 = $939;
  $940 = $8;
  $941 = $9;
  $942 = $7;
  $943 = $8;
  $944 = $942 ^ $943;
  $945 = $941 & $944;
  $946 = $940 ^ $945;
  $947 = $3;
  $948 = ((($947)) + 88|0);
  $949 = ((($948)) + 56|0);
  $950 = HEAP32[$949>>2]|0;
  $951 = (($946) + ($950))|0;
  $952 = (($951) + -1019803690)|0;
  $953 = $10;
  $954 = (($953) + ($952))|0;
  $10 = $954;
  $955 = $10;
  $956 = $955 << 9;
  $957 = $10;
  $958 = $957 >>> 23;
  $959 = $956 | $958;
  $10 = $959;
  $960 = $7;
  $961 = $10;
  $962 = (($961) + ($960))|0;
  $10 = $962;
  $963 = $7;
  $964 = $8;
  $965 = $10;
  $966 = $7;
  $967 = $965 ^ $966;
  $968 = $964 & $967;
  $969 = $963 ^ $968;
  $970 = $3;
  $971 = ((($970)) + 88|0);
  $972 = ((($971)) + 12|0);
  $973 = HEAP32[$972>>2]|0;
  $974 = (($969) + ($973))|0;
  $975 = (($974) + -187363961)|0;
  $976 = $9;
  $977 = (($976) + ($975))|0;
  $9 = $977;
  $978 = $9;
  $979 = $978 << 14;
  $980 = $9;
  $981 = $980 >>> 18;
  $982 = $979 | $981;
  $9 = $982;
  $983 = $10;
  $984 = $9;
  $985 = (($984) + ($983))|0;
  $9 = $985;
  $986 = $10;
  $987 = $7;
  $988 = $9;
  $989 = $10;
  $990 = $988 ^ $989;
  $991 = $987 & $990;
  $992 = $986 ^ $991;
  $993 = $3;
  $994 = ((($993)) + 88|0);
  $995 = ((($994)) + 32|0);
  $996 = HEAP32[$995>>2]|0;
  $997 = (($992) + ($996))|0;
  $998 = (($997) + 1163531501)|0;
  $999 = $8;
  $1000 = (($999) + ($998))|0;
  $8 = $1000;
  $1001 = $8;
  $1002 = $1001 << 20;
  $1003 = $8;
  $1004 = $1003 >>> 12;
  $1005 = $1002 | $1004;
  $8 = $1005;
  $1006 = $9;
  $1007 = $8;
  $1008 = (($1007) + ($1006))|0;
  $8 = $1008;
  $1009 = $9;
  $1010 = $10;
  $1011 = $8;
  $1012 = $9;
  $1013 = $1011 ^ $1012;
  $1014 = $1010 & $1013;
  $1015 = $1009 ^ $1014;
  $1016 = $3;
  $1017 = ((($1016)) + 88|0);
  $1018 = ((($1017)) + 52|0);
  $1019 = HEAP32[$1018>>2]|0;
  $1020 = (($1015) + ($1019))|0;
  $1021 = (($1020) + -1444681467)|0;
  $1022 = $7;
  $1023 = (($1022) + ($1021))|0;
  $7 = $1023;
  $1024 = $7;
  $1025 = $1024 << 5;
  $1026 = $7;
  $1027 = $1026 >>> 27;
  $1028 = $1025 | $1027;
  $7 = $1028;
  $1029 = $8;
  $1030 = $7;
  $1031 = (($1030) + ($1029))|0;
  $7 = $1031;
  $1032 = $8;
  $1033 = $9;
  $1034 = $7;
  $1035 = $8;
  $1036 = $1034 ^ $1035;
  $1037 = $1033 & $1036;
  $1038 = $1032 ^ $1037;
  $1039 = $3;
  $1040 = ((($1039)) + 88|0);
  $1041 = ((($1040)) + 8|0);
  $1042 = HEAP32[$1041>>2]|0;
  $1043 = (($1038) + ($1042))|0;
  $1044 = (($1043) + -51403784)|0;
  $1045 = $10;
  $1046 = (($1045) + ($1044))|0;
  $10 = $1046;
  $1047 = $10;
  $1048 = $1047 << 9;
  $1049 = $10;
  $1050 = $1049 >>> 23;
  $1051 = $1048 | $1050;
  $10 = $1051;
  $1052 = $7;
  $1053 = $10;
  $1054 = (($1053) + ($1052))|0;
  $10 = $1054;
  $1055 = $7;
  $1056 = $8;
  $1057 = $10;
  $1058 = $7;
  $1059 = $1057 ^ $1058;
  $1060 = $1056 & $1059;
  $1061 = $1055 ^ $1060;
  $1062 = $3;
  $1063 = ((($1062)) + 88|0);
  $1064 = ((($1063)) + 28|0);
  $1065 = HEAP32[$1064>>2]|0;
  $1066 = (($1061) + ($1065))|0;
  $1067 = (($1066) + 1735328473)|0;
  $1068 = $9;
  $1069 = (($1068) + ($1067))|0;
  $9 = $1069;
  $1070 = $9;
  $1071 = $1070 << 14;
  $1072 = $9;
  $1073 = $1072 >>> 18;
  $1074 = $1071 | $1073;
  $9 = $1074;
  $1075 = $10;
  $1076 = $9;
  $1077 = (($1076) + ($1075))|0;
  $9 = $1077;
  $1078 = $10;
  $1079 = $7;
  $1080 = $9;
  $1081 = $10;
  $1082 = $1080 ^ $1081;
  $1083 = $1079 & $1082;
  $1084 = $1078 ^ $1083;
  $1085 = $3;
  $1086 = ((($1085)) + 88|0);
  $1087 = ((($1086)) + 48|0);
  $1088 = HEAP32[$1087>>2]|0;
  $1089 = (($1084) + ($1088))|0;
  $1090 = (($1089) + -1926607734)|0;
  $1091 = $8;
  $1092 = (($1091) + ($1090))|0;
  $8 = $1092;
  $1093 = $8;
  $1094 = $1093 << 20;
  $1095 = $8;
  $1096 = $1095 >>> 12;
  $1097 = $1094 | $1096;
  $8 = $1097;
  $1098 = $9;
  $1099 = $8;
  $1100 = (($1099) + ($1098))|0;
  $8 = $1100;
  $1101 = $8;
  $1102 = $9;
  $1103 = $1101 ^ $1102;
  $1104 = $10;
  $1105 = $1103 ^ $1104;
  $1106 = $3;
  $1107 = ((($1106)) + 88|0);
  $1108 = ((($1107)) + 20|0);
  $1109 = HEAP32[$1108>>2]|0;
  $1110 = (($1105) + ($1109))|0;
  $1111 = (($1110) + -378558)|0;
  $1112 = $7;
  $1113 = (($1112) + ($1111))|0;
  $7 = $1113;
  $1114 = $7;
  $1115 = $1114 << 4;
  $1116 = $7;
  $1117 = $1116 >>> 28;
  $1118 = $1115 | $1117;
  $7 = $1118;
  $1119 = $8;
  $1120 = $7;
  $1121 = (($1120) + ($1119))|0;
  $7 = $1121;
  $1122 = $7;
  $1123 = $8;
  $1124 = $9;
  $1125 = $1123 ^ $1124;
  $1126 = $1122 ^ $1125;
  $1127 = $3;
  $1128 = ((($1127)) + 88|0);
  $1129 = ((($1128)) + 32|0);
  $1130 = HEAP32[$1129>>2]|0;
  $1131 = (($1126) + ($1130))|0;
  $1132 = (($1131) + -2022574463)|0;
  $1133 = $10;
  $1134 = (($1133) + ($1132))|0;
  $10 = $1134;
  $1135 = $10;
  $1136 = $1135 << 11;
  $1137 = $10;
  $1138 = $1137 >>> 21;
  $1139 = $1136 | $1138;
  $10 = $1139;
  $1140 = $7;
  $1141 = $10;
  $1142 = (($1141) + ($1140))|0;
  $10 = $1142;
  $1143 = $10;
  $1144 = $7;
  $1145 = $1143 ^ $1144;
  $1146 = $8;
  $1147 = $1145 ^ $1146;
  $1148 = $3;
  $1149 = ((($1148)) + 88|0);
  $1150 = ((($1149)) + 44|0);
  $1151 = HEAP32[$1150>>2]|0;
  $1152 = (($1147) + ($1151))|0;
  $1153 = (($1152) + 1839030562)|0;
  $1154 = $9;
  $1155 = (($1154) + ($1153))|0;
  $9 = $1155;
  $1156 = $9;
  $1157 = $1156 << 16;
  $1158 = $9;
  $1159 = $1158 >>> 16;
  $1160 = $1157 | $1159;
  $9 = $1160;
  $1161 = $10;
  $1162 = $9;
  $1163 = (($1162) + ($1161))|0;
  $9 = $1163;
  $1164 = $9;
  $1165 = $10;
  $1166 = $7;
  $1167 = $1165 ^ $1166;
  $1168 = $1164 ^ $1167;
  $1169 = $3;
  $1170 = ((($1169)) + 88|0);
  $1171 = ((($1170)) + 56|0);
  $1172 = HEAP32[$1171>>2]|0;
  $1173 = (($1168) + ($1172))|0;
  $1174 = (($1173) + -35309556)|0;
  $1175 = $8;
  $1176 = (($1175) + ($1174))|0;
  $8 = $1176;
  $1177 = $8;
  $1178 = $1177 << 23;
  $1179 = $8;
  $1180 = $1179 >>> 9;
  $1181 = $1178 | $1180;
  $8 = $1181;
  $1182 = $9;
  $1183 = $8;
  $1184 = (($1183) + ($1182))|0;
  $8 = $1184;
  $1185 = $8;
  $1186 = $9;
  $1187 = $1185 ^ $1186;
  $1188 = $10;
  $1189 = $1187 ^ $1188;
  $1190 = $3;
  $1191 = ((($1190)) + 88|0);
  $1192 = ((($1191)) + 4|0);
  $1193 = HEAP32[$1192>>2]|0;
  $1194 = (($1189) + ($1193))|0;
  $1195 = (($1194) + -1530992060)|0;
  $1196 = $7;
  $1197 = (($1196) + ($1195))|0;
  $7 = $1197;
  $1198 = $7;
  $1199 = $1198 << 4;
  $1200 = $7;
  $1201 = $1200 >>> 28;
  $1202 = $1199 | $1201;
  $7 = $1202;
  $1203 = $8;
  $1204 = $7;
  $1205 = (($1204) + ($1203))|0;
  $7 = $1205;
  $1206 = $7;
  $1207 = $8;
  $1208 = $9;
  $1209 = $1207 ^ $1208;
  $1210 = $1206 ^ $1209;
  $1211 = $3;
  $1212 = ((($1211)) + 88|0);
  $1213 = ((($1212)) + 16|0);
  $1214 = HEAP32[$1213>>2]|0;
  $1215 = (($1210) + ($1214))|0;
  $1216 = (($1215) + 1272893353)|0;
  $1217 = $10;
  $1218 = (($1217) + ($1216))|0;
  $10 = $1218;
  $1219 = $10;
  $1220 = $1219 << 11;
  $1221 = $10;
  $1222 = $1221 >>> 21;
  $1223 = $1220 | $1222;
  $10 = $1223;
  $1224 = $7;
  $1225 = $10;
  $1226 = (($1225) + ($1224))|0;
  $10 = $1226;
  $1227 = $10;
  $1228 = $7;
  $1229 = $1227 ^ $1228;
  $1230 = $8;
  $1231 = $1229 ^ $1230;
  $1232 = $3;
  $1233 = ((($1232)) + 88|0);
  $1234 = ((($1233)) + 28|0);
  $1235 = HEAP32[$1234>>2]|0;
  $1236 = (($1231) + ($1235))|0;
  $1237 = (($1236) + -155497632)|0;
  $1238 = $9;
  $1239 = (($1238) + ($1237))|0;
  $9 = $1239;
  $1240 = $9;
  $1241 = $1240 << 16;
  $1242 = $9;
  $1243 = $1242 >>> 16;
  $1244 = $1241 | $1243;
  $9 = $1244;
  $1245 = $10;
  $1246 = $9;
  $1247 = (($1246) + ($1245))|0;
  $9 = $1247;
  $1248 = $9;
  $1249 = $10;
  $1250 = $7;
  $1251 = $1249 ^ $1250;
  $1252 = $1248 ^ $1251;
  $1253 = $3;
  $1254 = ((($1253)) + 88|0);
  $1255 = ((($1254)) + 40|0);
  $1256 = HEAP32[$1255>>2]|0;
  $1257 = (($1252) + ($1256))|0;
  $1258 = (($1257) + -1094730640)|0;
  $1259 = $8;
  $1260 = (($1259) + ($1258))|0;
  $8 = $1260;
  $1261 = $8;
  $1262 = $1261 << 23;
  $1263 = $8;
  $1264 = $1263 >>> 9;
  $1265 = $1262 | $1264;
  $8 = $1265;
  $1266 = $9;
  $1267 = $8;
  $1268 = (($1267) + ($1266))|0;
  $8 = $1268;
  $1269 = $8;
  $1270 = $9;
  $1271 = $1269 ^ $1270;
  $1272 = $10;
  $1273 = $1271 ^ $1272;
  $1274 = $3;
  $1275 = ((($1274)) + 88|0);
  $1276 = ((($1275)) + 52|0);
  $1277 = HEAP32[$1276>>2]|0;
  $1278 = (($1273) + ($1277))|0;
  $1279 = (($1278) + 681279174)|0;
  $1280 = $7;
  $1281 = (($1280) + ($1279))|0;
  $7 = $1281;
  $1282 = $7;
  $1283 = $1282 << 4;
  $1284 = $7;
  $1285 = $1284 >>> 28;
  $1286 = $1283 | $1285;
  $7 = $1286;
  $1287 = $8;
  $1288 = $7;
  $1289 = (($1288) + ($1287))|0;
  $7 = $1289;
  $1290 = $7;
  $1291 = $8;
  $1292 = $9;
  $1293 = $1291 ^ $1292;
  $1294 = $1290 ^ $1293;
  $1295 = $3;
  $1296 = ((($1295)) + 88|0);
  $1297 = HEAP32[$1296>>2]|0;
  $1298 = (($1294) + ($1297))|0;
  $1299 = (($1298) + -358537222)|0;
  $1300 = $10;
  $1301 = (($1300) + ($1299))|0;
  $10 = $1301;
  $1302 = $10;
  $1303 = $1302 << 11;
  $1304 = $10;
  $1305 = $1304 >>> 21;
  $1306 = $1303 | $1305;
  $10 = $1306;
  $1307 = $7;
  $1308 = $10;
  $1309 = (($1308) + ($1307))|0;
  $10 = $1309;
  $1310 = $10;
  $1311 = $7;
  $1312 = $1310 ^ $1311;
  $1313 = $8;
  $1314 = $1312 ^ $1313;
  $1315 = $3;
  $1316 = ((($1315)) + 88|0);
  $1317 = ((($1316)) + 12|0);
  $1318 = HEAP32[$1317>>2]|0;
  $1319 = (($1314) + ($1318))|0;
  $1320 = (($1319) + -722521979)|0;
  $1321 = $9;
  $1322 = (($1321) + ($1320))|0;
  $9 = $1322;
  $1323 = $9;
  $1324 = $1323 << 16;
  $1325 = $9;
  $1326 = $1325 >>> 16;
  $1327 = $1324 | $1326;
  $9 = $1327;
  $1328 = $10;
  $1329 = $9;
  $1330 = (($1329) + ($1328))|0;
  $9 = $1330;
  $1331 = $9;
  $1332 = $10;
  $1333 = $7;
  $1334 = $1332 ^ $1333;
  $1335 = $1331 ^ $1334;
  $1336 = $3;
  $1337 = ((($1336)) + 88|0);
  $1338 = ((($1337)) + 24|0);
  $1339 = HEAP32[$1338>>2]|0;
  $1340 = (($1335) + ($1339))|0;
  $1341 = (($1340) + 76029189)|0;
  $1342 = $8;
  $1343 = (($1342) + ($1341))|0;
  $8 = $1343;
  $1344 = $8;
  $1345 = $1344 << 23;
  $1346 = $8;
  $1347 = $1346 >>> 9;
  $1348 = $1345 | $1347;
  $8 = $1348;
  $1349 = $9;
  $1350 = $8;
  $1351 = (($1350) + ($1349))|0;
  $8 = $1351;
  $1352 = $8;
  $1353 = $9;
  $1354 = $1352 ^ $1353;
  $1355 = $10;
  $1356 = $1354 ^ $1355;
  $1357 = $3;
  $1358 = ((($1357)) + 88|0);
  $1359 = ((($1358)) + 36|0);
  $1360 = HEAP32[$1359>>2]|0;
  $1361 = (($1356) + ($1360))|0;
  $1362 = (($1361) + -640364487)|0;
  $1363 = $7;
  $1364 = (($1363) + ($1362))|0;
  $7 = $1364;
  $1365 = $7;
  $1366 = $1365 << 4;
  $1367 = $7;
  $1368 = $1367 >>> 28;
  $1369 = $1366 | $1368;
  $7 = $1369;
  $1370 = $8;
  $1371 = $7;
  $1372 = (($1371) + ($1370))|0;
  $7 = $1372;
  $1373 = $7;
  $1374 = $8;
  $1375 = $9;
  $1376 = $1374 ^ $1375;
  $1377 = $1373 ^ $1376;
  $1378 = $3;
  $1379 = ((($1378)) + 88|0);
  $1380 = ((($1379)) + 48|0);
  $1381 = HEAP32[$1380>>2]|0;
  $1382 = (($1377) + ($1381))|0;
  $1383 = (($1382) + -421815835)|0;
  $1384 = $10;
  $1385 = (($1384) + ($1383))|0;
  $10 = $1385;
  $1386 = $10;
  $1387 = $1386 << 11;
  $1388 = $10;
  $1389 = $1388 >>> 21;
  $1390 = $1387 | $1389;
  $10 = $1390;
  $1391 = $7;
  $1392 = $10;
  $1393 = (($1392) + ($1391))|0;
  $10 = $1393;
  $1394 = $10;
  $1395 = $7;
  $1396 = $1394 ^ $1395;
  $1397 = $8;
  $1398 = $1396 ^ $1397;
  $1399 = $3;
  $1400 = ((($1399)) + 88|0);
  $1401 = ((($1400)) + 60|0);
  $1402 = HEAP32[$1401>>2]|0;
  $1403 = (($1398) + ($1402))|0;
  $1404 = (($1403) + 530742520)|0;
  $1405 = $9;
  $1406 = (($1405) + ($1404))|0;
  $9 = $1406;
  $1407 = $9;
  $1408 = $1407 << 16;
  $1409 = $9;
  $1410 = $1409 >>> 16;
  $1411 = $1408 | $1410;
  $9 = $1411;
  $1412 = $10;
  $1413 = $9;
  $1414 = (($1413) + ($1412))|0;
  $9 = $1414;
  $1415 = $9;
  $1416 = $10;
  $1417 = $7;
  $1418 = $1416 ^ $1417;
  $1419 = $1415 ^ $1418;
  $1420 = $3;
  $1421 = ((($1420)) + 88|0);
  $1422 = ((($1421)) + 8|0);
  $1423 = HEAP32[$1422>>2]|0;
  $1424 = (($1419) + ($1423))|0;
  $1425 = (($1424) + -995338651)|0;
  $1426 = $8;
  $1427 = (($1426) + ($1425))|0;
  $8 = $1427;
  $1428 = $8;
  $1429 = $1428 << 23;
  $1430 = $8;
  $1431 = $1430 >>> 9;
  $1432 = $1429 | $1431;
  $8 = $1432;
  $1433 = $9;
  $1434 = $8;
  $1435 = (($1434) + ($1433))|0;
  $8 = $1435;
  $1436 = $9;
  $1437 = $8;
  $1438 = $10;
  $1439 = $1438 ^ -1;
  $1440 = $1437 | $1439;
  $1441 = $1436 ^ $1440;
  $1442 = $3;
  $1443 = ((($1442)) + 88|0);
  $1444 = HEAP32[$1443>>2]|0;
  $1445 = (($1441) + ($1444))|0;
  $1446 = (($1445) + -198630844)|0;
  $1447 = $7;
  $1448 = (($1447) + ($1446))|0;
  $7 = $1448;
  $1449 = $7;
  $1450 = $1449 << 6;
  $1451 = $7;
  $1452 = $1451 >>> 26;
  $1453 = $1450 | $1452;
  $7 = $1453;
  $1454 = $8;
  $1455 = $7;
  $1456 = (($1455) + ($1454))|0;
  $7 = $1456;
  $1457 = $8;
  $1458 = $7;
  $1459 = $9;
  $1460 = $1459 ^ -1;
  $1461 = $1458 | $1460;
  $1462 = $1457 ^ $1461;
  $1463 = $3;
  $1464 = ((($1463)) + 88|0);
  $1465 = ((($1464)) + 28|0);
  $1466 = HEAP32[$1465>>2]|0;
  $1467 = (($1462) + ($1466))|0;
  $1468 = (($1467) + 1126891415)|0;
  $1469 = $10;
  $1470 = (($1469) + ($1468))|0;
  $10 = $1470;
  $1471 = $10;
  $1472 = $1471 << 10;
  $1473 = $10;
  $1474 = $1473 >>> 22;
  $1475 = $1472 | $1474;
  $10 = $1475;
  $1476 = $7;
  $1477 = $10;
  $1478 = (($1477) + ($1476))|0;
  $10 = $1478;
  $1479 = $7;
  $1480 = $10;
  $1481 = $8;
  $1482 = $1481 ^ -1;
  $1483 = $1480 | $1482;
  $1484 = $1479 ^ $1483;
  $1485 = $3;
  $1486 = ((($1485)) + 88|0);
  $1487 = ((($1486)) + 56|0);
  $1488 = HEAP32[$1487>>2]|0;
  $1489 = (($1484) + ($1488))|0;
  $1490 = (($1489) + -1416354905)|0;
  $1491 = $9;
  $1492 = (($1491) + ($1490))|0;
  $9 = $1492;
  $1493 = $9;
  $1494 = $1493 << 15;
  $1495 = $9;
  $1496 = $1495 >>> 17;
  $1497 = $1494 | $1496;
  $9 = $1497;
  $1498 = $10;
  $1499 = $9;
  $1500 = (($1499) + ($1498))|0;
  $9 = $1500;
  $1501 = $10;
  $1502 = $9;
  $1503 = $7;
  $1504 = $1503 ^ -1;
  $1505 = $1502 | $1504;
  $1506 = $1501 ^ $1505;
  $1507 = $3;
  $1508 = ((($1507)) + 88|0);
  $1509 = ((($1508)) + 20|0);
  $1510 = HEAP32[$1509>>2]|0;
  $1511 = (($1506) + ($1510))|0;
  $1512 = (($1511) + -57434055)|0;
  $1513 = $8;
  $1514 = (($1513) + ($1512))|0;
  $8 = $1514;
  $1515 = $8;
  $1516 = $1515 << 21;
  $1517 = $8;
  $1518 = $1517 >>> 11;
  $1519 = $1516 | $1518;
  $8 = $1519;
  $1520 = $9;
  $1521 = $8;
  $1522 = (($1521) + ($1520))|0;
  $8 = $1522;
  $1523 = $9;
  $1524 = $8;
  $1525 = $10;
  $1526 = $1525 ^ -1;
  $1527 = $1524 | $1526;
  $1528 = $1523 ^ $1527;
  $1529 = $3;
  $1530 = ((($1529)) + 88|0);
  $1531 = ((($1530)) + 48|0);
  $1532 = HEAP32[$1531>>2]|0;
  $1533 = (($1528) + ($1532))|0;
  $1534 = (($1533) + 1700485571)|0;
  $1535 = $7;
  $1536 = (($1535) + ($1534))|0;
  $7 = $1536;
  $1537 = $7;
  $1538 = $1537 << 6;
  $1539 = $7;
  $1540 = $1539 >>> 26;
  $1541 = $1538 | $1540;
  $7 = $1541;
  $1542 = $8;
  $1543 = $7;
  $1544 = (($1543) + ($1542))|0;
  $7 = $1544;
  $1545 = $8;
  $1546 = $7;
  $1547 = $9;
  $1548 = $1547 ^ -1;
  $1549 = $1546 | $1548;
  $1550 = $1545 ^ $1549;
  $1551 = $3;
  $1552 = ((($1551)) + 88|0);
  $1553 = ((($1552)) + 12|0);
  $1554 = HEAP32[$1553>>2]|0;
  $1555 = (($1550) + ($1554))|0;
  $1556 = (($1555) + -1894986606)|0;
  $1557 = $10;
  $1558 = (($1557) + ($1556))|0;
  $10 = $1558;
  $1559 = $10;
  $1560 = $1559 << 10;
  $1561 = $10;
  $1562 = $1561 >>> 22;
  $1563 = $1560 | $1562;
  $10 = $1563;
  $1564 = $7;
  $1565 = $10;
  $1566 = (($1565) + ($1564))|0;
  $10 = $1566;
  $1567 = $7;
  $1568 = $10;
  $1569 = $8;
  $1570 = $1569 ^ -1;
  $1571 = $1568 | $1570;
  $1572 = $1567 ^ $1571;
  $1573 = $3;
  $1574 = ((($1573)) + 88|0);
  $1575 = ((($1574)) + 40|0);
  $1576 = HEAP32[$1575>>2]|0;
  $1577 = (($1572) + ($1576))|0;
  $1578 = (($1577) + -1051523)|0;
  $1579 = $9;
  $1580 = (($1579) + ($1578))|0;
  $9 = $1580;
  $1581 = $9;
  $1582 = $1581 << 15;
  $1583 = $9;
  $1584 = $1583 >>> 17;
  $1585 = $1582 | $1584;
  $9 = $1585;
  $1586 = $10;
  $1587 = $9;
  $1588 = (($1587) + ($1586))|0;
  $9 = $1588;
  $1589 = $10;
  $1590 = $9;
  $1591 = $7;
  $1592 = $1591 ^ -1;
  $1593 = $1590 | $1592;
  $1594 = $1589 ^ $1593;
  $1595 = $3;
  $1596 = ((($1595)) + 88|0);
  $1597 = ((($1596)) + 4|0);
  $1598 = HEAP32[$1597>>2]|0;
  $1599 = (($1594) + ($1598))|0;
  $1600 = (($1599) + -2054922799)|0;
  $1601 = $8;
  $1602 = (($1601) + ($1600))|0;
  $8 = $1602;
  $1603 = $8;
  $1604 = $1603 << 21;
  $1605 = $8;
  $1606 = $1605 >>> 11;
  $1607 = $1604 | $1606;
  $8 = $1607;
  $1608 = $9;
  $1609 = $8;
  $1610 = (($1609) + ($1608))|0;
  $8 = $1610;
  $1611 = $9;
  $1612 = $8;
  $1613 = $10;
  $1614 = $1613 ^ -1;
  $1615 = $1612 | $1614;
  $1616 = $1611 ^ $1615;
  $1617 = $3;
  $1618 = ((($1617)) + 88|0);
  $1619 = ((($1618)) + 32|0);
  $1620 = HEAP32[$1619>>2]|0;
  $1621 = (($1616) + ($1620))|0;
  $1622 = (($1621) + 1873313359)|0;
  $1623 = $7;
  $1624 = (($1623) + ($1622))|0;
  $7 = $1624;
  $1625 = $7;
  $1626 = $1625 << 6;
  $1627 = $7;
  $1628 = $1627 >>> 26;
  $1629 = $1626 | $1628;
  $7 = $1629;
  $1630 = $8;
  $1631 = $7;
  $1632 = (($1631) + ($1630))|0;
  $7 = $1632;
  $1633 = $8;
  $1634 = $7;
  $1635 = $9;
  $1636 = $1635 ^ -1;
  $1637 = $1634 | $1636;
  $1638 = $1633 ^ $1637;
  $1639 = $3;
  $1640 = ((($1639)) + 88|0);
  $1641 = ((($1640)) + 60|0);
  $1642 = HEAP32[$1641>>2]|0;
  $1643 = (($1638) + ($1642))|0;
  $1644 = (($1643) + -30611744)|0;
  $1645 = $10;
  $1646 = (($1645) + ($1644))|0;
  $10 = $1646;
  $1647 = $10;
  $1648 = $1647 << 10;
  $1649 = $10;
  $1650 = $1649 >>> 22;
  $1651 = $1648 | $1650;
  $10 = $1651;
  $1652 = $7;
  $1653 = $10;
  $1654 = (($1653) + ($1652))|0;
  $10 = $1654;
  $1655 = $7;
  $1656 = $10;
  $1657 = $8;
  $1658 = $1657 ^ -1;
  $1659 = $1656 | $1658;
  $1660 = $1655 ^ $1659;
  $1661 = $3;
  $1662 = ((($1661)) + 88|0);
  $1663 = ((($1662)) + 24|0);
  $1664 = HEAP32[$1663>>2]|0;
  $1665 = (($1660) + ($1664))|0;
  $1666 = (($1665) + -1560198380)|0;
  $1667 = $9;
  $1668 = (($1667) + ($1666))|0;
  $9 = $1668;
  $1669 = $9;
  $1670 = $1669 << 15;
  $1671 = $9;
  $1672 = $1671 >>> 17;
  $1673 = $1670 | $1672;
  $9 = $1673;
  $1674 = $10;
  $1675 = $9;
  $1676 = (($1675) + ($1674))|0;
  $9 = $1676;
  $1677 = $10;
  $1678 = $9;
  $1679 = $7;
  $1680 = $1679 ^ -1;
  $1681 = $1678 | $1680;
  $1682 = $1677 ^ $1681;
  $1683 = $3;
  $1684 = ((($1683)) + 88|0);
  $1685 = ((($1684)) + 52|0);
  $1686 = HEAP32[$1685>>2]|0;
  $1687 = (($1682) + ($1686))|0;
  $1688 = (($1687) + 1309151649)|0;
  $1689 = $8;
  $1690 = (($1689) + ($1688))|0;
  $8 = $1690;
  $1691 = $8;
  $1692 = $1691 << 21;
  $1693 = $8;
  $1694 = $1693 >>> 11;
  $1695 = $1692 | $1694;
  $8 = $1695;
  $1696 = $9;
  $1697 = $8;
  $1698 = (($1697) + ($1696))|0;
  $8 = $1698;
  $1699 = $9;
  $1700 = $8;
  $1701 = $10;
  $1702 = $1701 ^ -1;
  $1703 = $1700 | $1702;
  $1704 = $1699 ^ $1703;
  $1705 = $3;
  $1706 = ((($1705)) + 88|0);
  $1707 = ((($1706)) + 16|0);
  $1708 = HEAP32[$1707>>2]|0;
  $1709 = (($1704) + ($1708))|0;
  $1710 = (($1709) + -145523070)|0;
  $1711 = $7;
  $1712 = (($1711) + ($1710))|0;
  $7 = $1712;
  $1713 = $7;
  $1714 = $1713 << 6;
  $1715 = $7;
  $1716 = $1715 >>> 26;
  $1717 = $1714 | $1716;
  $7 = $1717;
  $1718 = $8;
  $1719 = $7;
  $1720 = (($1719) + ($1718))|0;
  $7 = $1720;
  $1721 = $8;
  $1722 = $7;
  $1723 = $9;
  $1724 = $1723 ^ -1;
  $1725 = $1722 | $1724;
  $1726 = $1721 ^ $1725;
  $1727 = $3;
  $1728 = ((($1727)) + 88|0);
  $1729 = ((($1728)) + 44|0);
  $1730 = HEAP32[$1729>>2]|0;
  $1731 = (($1726) + ($1730))|0;
  $1732 = (($1731) + -1120210379)|0;
  $1733 = $10;
  $1734 = (($1733) + ($1732))|0;
  $10 = $1734;
  $1735 = $10;
  $1736 = $1735 << 10;
  $1737 = $10;
  $1738 = $1737 >>> 22;
  $1739 = $1736 | $1738;
  $10 = $1739;
  $1740 = $7;
  $1741 = $10;
  $1742 = (($1741) + ($1740))|0;
  $10 = $1742;
  $1743 = $7;
  $1744 = $10;
  $1745 = $8;
  $1746 = $1745 ^ -1;
  $1747 = $1744 | $1746;
  $1748 = $1743 ^ $1747;
  $1749 = $3;
  $1750 = ((($1749)) + 88|0);
  $1751 = ((($1750)) + 8|0);
  $1752 = HEAP32[$1751>>2]|0;
  $1753 = (($1748) + ($1752))|0;
  $1754 = (($1753) + 718787259)|0;
  $1755 = $9;
  $1756 = (($1755) + ($1754))|0;
  $9 = $1756;
  $1757 = $9;
  $1758 = $1757 << 15;
  $1759 = $9;
  $1760 = $1759 >>> 17;
  $1761 = $1758 | $1760;
  $9 = $1761;
  $1762 = $10;
  $1763 = $9;
  $1764 = (($1763) + ($1762))|0;
  $9 = $1764;
  $1765 = $10;
  $1766 = $9;
  $1767 = $7;
  $1768 = $1767 ^ -1;
  $1769 = $1766 | $1768;
  $1770 = $1765 ^ $1769;
  $1771 = $3;
  $1772 = ((($1771)) + 88|0);
  $1773 = ((($1772)) + 36|0);
  $1774 = HEAP32[$1773>>2]|0;
  $1775 = (($1770) + ($1774))|0;
  $1776 = (($1775) + -343485551)|0;
  $1777 = $8;
  $1778 = (($1777) + ($1776))|0;
  $8 = $1778;
  $1779 = $8;
  $1780 = $1779 << 21;
  $1781 = $8;
  $1782 = $1781 >>> 11;
  $1783 = $1780 | $1782;
  $8 = $1783;
  $1784 = $9;
  $1785 = $8;
  $1786 = (($1785) + ($1784))|0;
  $8 = $1786;
  $1787 = $11;
  $1788 = $7;
  $1789 = (($1788) + ($1787))|0;
  $7 = $1789;
  $1790 = $12;
  $1791 = $8;
  $1792 = (($1791) + ($1790))|0;
  $8 = $1792;
  $1793 = $13;
  $1794 = $9;
  $1795 = (($1794) + ($1793))|0;
  $9 = $1795;
  $1796 = $14;
  $1797 = $10;
  $1798 = (($1797) + ($1796))|0;
  $10 = $1798;
  $1799 = $6;
  $1800 = ((($1799)) + 64|0);
  $6 = $1800;
  $1801 = $5;
  $1802 = (($1801) - 64)|0;
  $5 = $1802;
  $1803 = ($1802|0)!=(0);
  if (!($1803)) {
   break;
  }
 }
 $1804 = $7;
 $1805 = $3;
 $1806 = ((($1805)) + 8|0);
 HEAP32[$1806>>2] = $1804;
 $1807 = $8;
 $1808 = $3;
 $1809 = ((($1808)) + 12|0);
 HEAP32[$1809>>2] = $1807;
 $1810 = $9;
 $1811 = $3;
 $1812 = ((($1811)) + 16|0);
 HEAP32[$1812>>2] = $1810;
 $1813 = $10;
 $1814 = $3;
 $1815 = ((($1814)) + 20|0);
 HEAP32[$1815>>2] = $1813;
 $1816 = $6;
 STACKTOP = sp;return ($1816|0);
}
function _hts_md5_final($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 63;
 $4 = $8;
 $9 = $4;
 $10 = (($9) + 1)|0;
 $4 = $10;
 $11 = $3;
 $12 = ((($11)) + 24|0);
 $13 = (($12) + ($9)|0);
 HEAP8[$13>>0] = -128;
 $14 = $4;
 $15 = (64 - ($14))|0;
 $5 = $15;
 $16 = $5;
 $17 = ($16>>>0)<(8);
 if ($17) {
  $18 = $4;
  $19 = $3;
  $20 = ((($19)) + 24|0);
  $21 = (($20) + ($18)|0);
  $22 = $5;
  _memset(($21|0),0,($22|0))|0;
  $23 = $3;
  $24 = $3;
  $25 = ((($24)) + 24|0);
  (_body($23,$25,64)|0);
  $4 = 0;
  $5 = 64;
 }
 $26 = $4;
 $27 = $3;
 $28 = ((($27)) + 24|0);
 $29 = (($28) + ($26)|0);
 $30 = $5;
 $31 = (($30) - 8)|0;
 _memset(($29|0),0,($31|0))|0;
 $32 = $3;
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 << 3;
 HEAP32[$32>>2] = $34;
 $35 = $3;
 $36 = HEAP32[$35>>2]|0;
 $37 = $36&255;
 $38 = $3;
 $39 = ((($38)) + 24|0);
 $40 = ((($39)) + 56|0);
 HEAP8[$40>>0] = $37;
 $41 = $3;
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 >>> 8;
 $44 = $43&255;
 $45 = $3;
 $46 = ((($45)) + 24|0);
 $47 = ((($46)) + 57|0);
 HEAP8[$47>>0] = $44;
 $48 = $3;
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 >>> 16;
 $51 = $50&255;
 $52 = $3;
 $53 = ((($52)) + 24|0);
 $54 = ((($53)) + 58|0);
 HEAP8[$54>>0] = $51;
 $55 = $3;
 $56 = HEAP32[$55>>2]|0;
 $57 = $56 >>> 24;
 $58 = $57&255;
 $59 = $3;
 $60 = ((($59)) + 24|0);
 $61 = ((($60)) + 59|0);
 HEAP8[$61>>0] = $58;
 $62 = $3;
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64&255;
 $66 = $3;
 $67 = ((($66)) + 24|0);
 $68 = ((($67)) + 60|0);
 HEAP8[$68>>0] = $65;
 $69 = $3;
 $70 = ((($69)) + 4|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $71 >>> 8;
 $73 = $72&255;
 $74 = $3;
 $75 = ((($74)) + 24|0);
 $76 = ((($75)) + 61|0);
 HEAP8[$76>>0] = $73;
 $77 = $3;
 $78 = ((($77)) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 >>> 16;
 $81 = $80&255;
 $82 = $3;
 $83 = ((($82)) + 24|0);
 $84 = ((($83)) + 62|0);
 HEAP8[$84>>0] = $81;
 $85 = $3;
 $86 = ((($85)) + 4|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $87 >>> 24;
 $89 = $88&255;
 $90 = $3;
 $91 = ((($90)) + 24|0);
 $92 = ((($91)) + 63|0);
 HEAP8[$92>>0] = $89;
 $93 = $3;
 $94 = $3;
 $95 = ((($94)) + 24|0);
 (_body($93,$95,64)|0);
 $96 = $3;
 $97 = ((($96)) + 8|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $98&255;
 $100 = $2;
 HEAP8[$100>>0] = $99;
 $101 = $3;
 $102 = ((($101)) + 8|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $103 >>> 8;
 $105 = $104&255;
 $106 = $2;
 $107 = ((($106)) + 1|0);
 HEAP8[$107>>0] = $105;
 $108 = $3;
 $109 = ((($108)) + 8|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 >>> 16;
 $112 = $111&255;
 $113 = $2;
 $114 = ((($113)) + 2|0);
 HEAP8[$114>>0] = $112;
 $115 = $3;
 $116 = ((($115)) + 8|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = $117 >>> 24;
 $119 = $118&255;
 $120 = $2;
 $121 = ((($120)) + 3|0);
 HEAP8[$121>>0] = $119;
 $122 = $3;
 $123 = ((($122)) + 12|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = $124&255;
 $126 = $2;
 $127 = ((($126)) + 4|0);
 HEAP8[$127>>0] = $125;
 $128 = $3;
 $129 = ((($128)) + 12|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = $130 >>> 8;
 $132 = $131&255;
 $133 = $2;
 $134 = ((($133)) + 5|0);
 HEAP8[$134>>0] = $132;
 $135 = $3;
 $136 = ((($135)) + 12|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = $137 >>> 16;
 $139 = $138&255;
 $140 = $2;
 $141 = ((($140)) + 6|0);
 HEAP8[$141>>0] = $139;
 $142 = $3;
 $143 = ((($142)) + 12|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = $144 >>> 24;
 $146 = $145&255;
 $147 = $2;
 $148 = ((($147)) + 7|0);
 HEAP8[$148>>0] = $146;
 $149 = $3;
 $150 = ((($149)) + 16|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = $151&255;
 $153 = $2;
 $154 = ((($153)) + 8|0);
 HEAP8[$154>>0] = $152;
 $155 = $3;
 $156 = ((($155)) + 16|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = $157 >>> 8;
 $159 = $158&255;
 $160 = $2;
 $161 = ((($160)) + 9|0);
 HEAP8[$161>>0] = $159;
 $162 = $3;
 $163 = ((($162)) + 16|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = $164 >>> 16;
 $166 = $165&255;
 $167 = $2;
 $168 = ((($167)) + 10|0);
 HEAP8[$168>>0] = $166;
 $169 = $3;
 $170 = ((($169)) + 16|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = $171 >>> 24;
 $173 = $172&255;
 $174 = $2;
 $175 = ((($174)) + 11|0);
 HEAP8[$175>>0] = $173;
 $176 = $3;
 $177 = ((($176)) + 20|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = $178&255;
 $180 = $2;
 $181 = ((($180)) + 12|0);
 HEAP8[$181>>0] = $179;
 $182 = $3;
 $183 = ((($182)) + 20|0);
 $184 = HEAP32[$183>>2]|0;
 $185 = $184 >>> 8;
 $186 = $185&255;
 $187 = $2;
 $188 = ((($187)) + 13|0);
 HEAP8[$188>>0] = $186;
 $189 = $3;
 $190 = ((($189)) + 20|0);
 $191 = HEAP32[$190>>2]|0;
 $192 = $191 >>> 16;
 $193 = $192&255;
 $194 = $2;
 $195 = ((($194)) + 14|0);
 HEAP8[$195>>0] = $193;
 $196 = $3;
 $197 = ((($196)) + 20|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = $198 >>> 24;
 $200 = $199&255;
 $201 = $2;
 $202 = ((($201)) + 15|0);
 HEAP8[$202>>0] = $200;
 $203 = $3;
 _memset(($203|0),0,152)|0;
 STACKTOP = sp;return;
}
function _hts_md5_init() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = (_malloc(152)|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  _hts_md5_reset($5);
  $6 = $1;
  $0 = $6;
 } else {
  $0 = 0;
 }
 $7 = $0;
 STACKTOP = sp;return ($7|0);
}
function _hts_md5_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  _free($4);
 }
 STACKTOP = sp;return;
}
function _hts_md5_hex($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $5 = $4;
  $6 = ($5|0)<(16);
  if (!($6)) {
   break;
  }
  $7 = $4;
  $8 = $3;
  $9 = (($8) + ($7)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $11 >> 4;
  $13 = $12 & 15;
  $14 = (21396 + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $4;
  $17 = $16<<1;
  $18 = (($17) + 0)|0;
  $19 = $2;
  $20 = (($19) + ($18)|0);
  HEAP8[$20>>0] = $15;
  $21 = $4;
  $22 = $3;
  $23 = (($22) + ($21)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $25 & 15;
  $27 = (21396 + ($26)|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $4;
  $30 = $29<<1;
  $31 = (($30) + 1)|0;
  $32 = $2;
  $33 = (($32) + ($31)|0);
  HEAP8[$33>>0] = $28;
  $34 = $4;
  $35 = (($34) + 1)|0;
  $4 = $35;
 }
 $36 = $2;
 $37 = ((($36)) + 32|0);
 HEAP8[$37>>0] = 0;
 STACKTOP = sp;return;
}
function _string_pool_create($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_malloc(12)|0);
 $3 = $4;
 $5 = (0|0)==($4|0);
 if ($5) {
  $1 = 0;
  $15 = $1;
  STACKTOP = sp;return ($15|0);
 }
 $6 = $2;
 $7 = ($6>>>0)<(1024);
 if ($7) {
  $2 = 1024;
 }
 $8 = $3;
 $9 = ((($8)) + 4|0);
 HEAP32[$9>>2] = 0;
 $10 = $2;
 $11 = $3;
 HEAP32[$11>>2] = $10;
 $12 = $3;
 $13 = ((($12)) + 8|0);
 HEAP32[$13>>2] = 0;
 $14 = $3;
 $1 = $14;
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _string_pool_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3>>>0)<($6>>>0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $9 = $1;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($8<<3)|0);
  $13 = HEAP32[$12>>2]|0;
  _free($13);
  $14 = $2;
  $15 = (($14) + 1)|0;
  $2 = $15;
 }
 $16 = $1;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 _free($18);
 $19 = $1;
 _free($19);
 STACKTOP = sp;return;
}
function _string_alloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = ($7>>>0)<=(0);
 if ($8) {
  $2 = 0;
  $56 = $2;
  STACKTOP = sp;return ($56|0);
 }
 $9 = $3;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $3;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) - 1)|0;
  $17 = $3;
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($16<<3)|0);
  $5 = $20;
  $21 = $5;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $4;
  $25 = (($23) + ($24))|0;
  $26 = $3;
  $27 = HEAP32[$26>>2]|0;
  $28 = ($25>>>0)<($27>>>0);
  if ($28) {
   $29 = $5;
   $30 = HEAP32[$29>>2]|0;
   $31 = $5;
   $32 = ((($31)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($30) + ($33)|0);
   $6 = $34;
   $35 = $4;
   $36 = $5;
   $37 = ((($36)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + ($35))|0;
   HEAP32[$37>>2] = $39;
   $40 = $6;
   $2 = $40;
   $56 = $2;
   STACKTOP = sp;return ($56|0);
  }
 }
 $41 = $4;
 $42 = $3;
 $43 = HEAP32[$42>>2]|0;
 $44 = ($41>>>0)>($43>>>0);
 if ($44) {
  $45 = $4;
  $46 = $3;
  HEAP32[$46>>2] = $45;
 }
 $47 = $3;
 $48 = (_new_string_pool($47)|0);
 $5 = $48;
 $49 = $5;
 $50 = (0|0)==($49|0);
 if ($50) {
  $2 = 0;
  $56 = $2;
  STACKTOP = sp;return ($56|0);
 } else {
  $51 = $4;
  $52 = $5;
  $53 = ((($52)) + 4|0);
  HEAP32[$53>>2] = $51;
  $54 = $5;
  $55 = HEAP32[$54>>2]|0;
  $2 = $55;
  $56 = $2;
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function _new_string_pool($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 $11 = $10<<3;
 $12 = (_realloc($6,$11)|0);
 $3 = $12;
 $13 = $3;
 $14 = (0|0)==($13|0);
 if ($14) {
  $1 = 0;
  $39 = $1;
  STACKTOP = sp;return ($39|0);
 }
 $15 = $3;
 $16 = $2;
 $17 = ((($16)) + 8|0);
 HEAP32[$17>>2] = $15;
 $18 = $2;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $2;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + ($20<<3)|0);
 $3 = $24;
 $25 = $2;
 $26 = HEAP32[$25>>2]|0;
 $27 = (_malloc($26)|0);
 $28 = $3;
 HEAP32[$28>>2] = $27;
 $29 = $3;
 $30 = HEAP32[$29>>2]|0;
 $31 = (0|0)==($30|0);
 if ($31) {
  $1 = 0;
  $39 = $1;
  STACKTOP = sp;return ($39|0);
 } else {
  $32 = $3;
  $33 = ((($32)) + 4|0);
  HEAP32[$33>>2] = 0;
  $34 = $2;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 1)|0;
  HEAP32[$35>>2] = $37;
  $38 = $3;
  $1 = $38;
  $39 = $1;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _string_dup($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $3;
 $7 = (_strlen($6)|0);
 $8 = (_string_ndup($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _string_ndup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = $6;
 $10 = (($9) + 1)|0;
 $11 = (_string_alloc($8,$10)|0);
 $7 = $11;
 $12 = $7;
 $13 = (0|0)==($12|0);
 if ($13) {
  $3 = 0;
  $21 = $3;
  STACKTOP = sp;return ($21|0);
 } else {
  $14 = $7;
  $15 = $5;
  $16 = $6;
  (_strncpy($14,$15,$16)|0);
  $17 = $6;
  $18 = $7;
  $19 = (($18) + ($17)|0);
  HEAP8[$19>>0] = 0;
  $20 = $7;
  $3 = $20;
  $21 = $3;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _cram_stats_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4096|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 4096|0);
  $8 = HEAP32[$7>>2]|0;
  _kh_destroy_m_i2i($8);
 }
 $9 = $1;
 _free($9);
 STACKTOP = sp;return;
}
function _kh_destroy_m_i2i($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _cram_external_decode_int($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $14 = $6;
 $15 = $7;
 $16 = ((($15)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_cram_get_block_by_id($14,$17)|0);
 $13 = $18;
 $19 = $13;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $25 = $13;
  $26 = ((($25)) + 32|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $13;
  $29 = ((($28)) + 28|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($27) + ($30)|0);
  $12 = $31;
  $32 = $12;
  $33 = $13;
  $34 = ((($33)) + 32|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $13;
  $37 = ((($36)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($35) + ($38)|0);
  $40 = $9;
  $41 = (_safe_itf8_get($32,$39,$40)|0);
  $11 = $41;
  $42 = $11;
  $43 = $13;
  $44 = ((($43)) + 28|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + ($42))|0;
  HEAP32[$44>>2] = $46;
  $47 = $10;
  HEAP32[$47>>2] = 1;
  $48 = $11;
  $49 = ($48|0)>(0);
  $50 = $49 ? 0 : -1;
  $5 = $50;
  $51 = $5;
  STACKTOP = sp;return ($51|0);
 } else {
  $21 = $10;
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(0);
  $24 = $23 ? -1 : 0;
  $5 = $24;
  $51 = $5;
  STACKTOP = sp;return ($51|0);
 }
 return (0)|0;
}
function _cram_get_block_by_id($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 $11 = $4;
 $12 = ($11|0)>=(0);
 $or$cond = $10 & $12;
 $13 = $4;
 $14 = ($13|0)<(1024);
 $or$cond3 = $or$cond & $14;
 if ($or$cond3) {
  $15 = $4;
  $16 = $3;
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($15<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $2 = $20;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 $5 = 0;
 while(1) {
  $21 = $5;
  $22 = $3;
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 32|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($21|0)<($25|0);
  if (!($26)) {
   label = 10;
   break;
  }
  $27 = $5;
  $28 = $3;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + ($27<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $6 = $32;
  $33 = $6;
  $34 = ($33|0)!=(0|0);
  if ($34) {
   $35 = $6;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(4);
   if ($38) {
    $39 = $6;
    $40 = ((($39)) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $4;
    $43 = ($41|0)==($42|0);
    if ($43) {
     label = 8;
     break;
    }
   }
  }
  $45 = $5;
  $46 = (($45) + 1)|0;
  $5 = $46;
 }
 if ((label|0) == 8) {
  $44 = $6;
  $2 = $44;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 else if ((label|0) == 10) {
  $2 = 0;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function _safe_itf8_get($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $7 = $8;
 $9 = $5;
 $10 = $4;
 $11 = $9;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = ($13|0)<(5);
 do {
  if ($14) {
   $15 = $4;
   $16 = $5;
   $17 = ($15>>>0)>=($16>>>0);
   if (!($17)) {
    $18 = $5;
    $19 = $4;
    $20 = $18;
    $21 = $19;
    $22 = (($20) - ($21))|0;
    $23 = $7;
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = $25 >> 4;
    $27 = (8968 + ($26<<2)|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($22|0)<($28|0);
    if (!($29)) {
     break;
    }
   }
   $30 = $6;
   HEAP32[$30>>2] = 0;
   $3 = 0;
   $120 = $3;
   STACKTOP = sp;return ($120|0);
  }
 } while(0);
 $31 = $7;
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = ($33|0)<(128);
 $35 = $7;
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 if ($34) {
  $38 = $6;
  HEAP32[$38>>2] = $37;
  $3 = 1;
  $120 = $3;
  STACKTOP = sp;return ($120|0);
 }
 $39 = ($37|0)<(192);
 $40 = $7;
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 if ($39) {
  $43 = $42 << 8;
  $44 = $7;
  $45 = ((($44)) + 1|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = $43 | $47;
  $49 = $48 & 16383;
  $50 = $6;
  HEAP32[$50>>2] = $49;
  $3 = 2;
  $120 = $3;
  STACKTOP = sp;return ($120|0);
 }
 $51 = ($42|0)<(224);
 $52 = $7;
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 if ($51) {
  $55 = $54 << 16;
  $56 = $7;
  $57 = ((($56)) + 1|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = $59 << 8;
  $61 = $55 | $60;
  $62 = $7;
  $63 = ((($62)) + 2|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = $61 | $65;
  $67 = $66 & 2097151;
  $68 = $6;
  HEAP32[$68>>2] = $67;
  $3 = 3;
  $120 = $3;
  STACKTOP = sp;return ($120|0);
 }
 $69 = ($54|0)<(240);
 $70 = $7;
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&255;
 if ($69) {
  $73 = $72 << 24;
  $74 = $7;
  $75 = ((($74)) + 1|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76&255;
  $78 = $77 << 16;
  $79 = $73 | $78;
  $80 = $7;
  $81 = ((($80)) + 2|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82&255;
  $84 = $83 << 8;
  $85 = $79 | $84;
  $86 = $7;
  $87 = ((($86)) + 3|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88&255;
  $90 = $85 | $89;
  $91 = $90 & 268435455;
  $92 = $6;
  HEAP32[$92>>2] = $91;
  $3 = 4;
  $120 = $3;
  STACKTOP = sp;return ($120|0);
 } else {
  $93 = $72 & 15;
  $94 = $93 << 28;
  $95 = $7;
  $96 = ((($95)) + 1|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = $97&255;
  $99 = $98 << 20;
  $100 = $94 | $99;
  $101 = $7;
  $102 = ((($101)) + 2|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = $103&255;
  $105 = $104 << 12;
  $106 = $100 | $105;
  $107 = $7;
  $108 = ((($107)) + 3|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109&255;
  $111 = $110 << 4;
  $112 = $106 | $111;
  $113 = $7;
  $114 = ((($113)) + 4|0);
  $115 = HEAP8[$114>>0]|0;
  $116 = $115&255;
  $117 = $116 & 15;
  $118 = $112 | $117;
  $119 = $6;
  HEAP32[$119>>2] = $118;
  $3 = 5;
  $120 = $3;
  STACKTOP = sp;return ($120|0);
 }
 return (0)|0;
}
function _cram_external_decode_char($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $6;
 $14 = $7;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_cram_get_block_by_id($13,$16)|0);
 $12 = $17;
 $18 = $12;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  $20 = $10;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(0);
  $23 = $22 ? -1 : 0;
  $5 = $23;
  $36 = $5;
  STACKTOP = sp;return ($36|0);
 }
 $24 = $12;
 $25 = $10;
 $26 = HEAP32[$25>>2]|0;
 $27 = (_cram_extract_block($24,$26)|0);
 $11 = $27;
 $28 = $11;
 $29 = ($28|0)!=(0|0);
 if (!($29)) {
  $5 = -1;
  $36 = $5;
  STACKTOP = sp;return ($36|0);
 }
 $30 = $9;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $32 = $9;
  $33 = $11;
  $34 = $10;
  $35 = HEAP32[$34>>2]|0;
  _memcpy(($32|0),($33|0),($35|0))|0;
 }
 $5 = 0;
 $36 = $5;
 STACKTOP = sp;return ($36|0);
}
function _cram_extract_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($8) + ($11)|0);
 $5 = $12;
 $13 = $4;
 $14 = $3;
 $15 = ((($14)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($13))|0;
 HEAP32[$15>>2] = $17;
 $18 = $3;
 $19 = ((($18)) + 28|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $3;
 $22 = ((($21)) + 20|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20|0)>($23|0);
 if ($24) {
  $2 = 0;
  $26 = $2;
  STACKTOP = sp;return ($26|0);
 } else {
  $25 = $5;
  $2 = $25;
  $26 = $2;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _cram_external_decode_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  _free($4);
 }
 STACKTOP = sp;return;
}
function _cram_external_decode_init($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $5;
 $10 = $11;
 $12 = (_malloc(548)|0);
 $9 = $12;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $4 = 0;
  $140 = $4;
  STACKTOP = sp;return ($140|0);
 }
 $14 = $9;
 HEAP32[$14>>2] = 1;
 $15 = $7;
 $16 = ($15|0)==(1);
 $17 = $7;
 $18 = ($17|0)==(2);
 $or$cond = $16 | $18;
 do {
  if ($or$cond) {
   $19 = $9;
   $20 = ((($19)) + 12|0);
   HEAP32[$20>>2] = 38;
  } else {
   $21 = $7;
   $22 = ($21|0)==(4);
   $23 = $7;
   $24 = ($23|0)==(3);
   $or$cond3 = $22 | $24;
   $25 = $9;
   $26 = ((($25)) + 12|0);
   if ($or$cond3) {
    HEAP32[$26>>2] = 39;
    break;
   } else {
    HEAP32[$26>>2] = 40;
    break;
   }
  }
 } while(0);
 $27 = $9;
 $28 = ((($27)) + 8|0);
 HEAP32[$28>>2] = 41;
 $29 = $10;
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = ($31|0)<(128);
 $33 = $10;
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 do {
  if ($32) {
   $36 = $9;
   $37 = ((($36)) + 24|0);
   HEAP32[$37>>2] = $35;
   $125 = 1;
  } else {
   $38 = ($35|0)<(192);
   $39 = $10;
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   if ($38) {
    $42 = $41 << 8;
    $43 = $10;
    $44 = ((($43)) + 1|0);
    $45 = HEAP8[$44>>0]|0;
    $46 = $45&255;
    $47 = $42 | $46;
    $48 = $47 & 16383;
    $49 = $9;
    $50 = ((($49)) + 24|0);
    HEAP32[$50>>2] = $48;
    $125 = 2;
    break;
   }
   $51 = ($41|0)<(224);
   $52 = $10;
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   if ($51) {
    $55 = $54 << 16;
    $56 = $10;
    $57 = ((($56)) + 1|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = $58&255;
    $60 = $59 << 8;
    $61 = $55 | $60;
    $62 = $10;
    $63 = ((($62)) + 2|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $64&255;
    $66 = $61 | $65;
    $67 = $66 & 2097151;
    $68 = $9;
    $69 = ((($68)) + 24|0);
    HEAP32[$69>>2] = $67;
    $125 = 3;
    break;
   }
   $70 = ($54|0)<(240);
   $71 = $10;
   $72 = HEAP8[$71>>0]|0;
   $73 = $72&255;
   if ($70) {
    $74 = $73 << 24;
    $75 = $10;
    $76 = ((($75)) + 1|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = $77&255;
    $79 = $78 << 16;
    $80 = $74 | $79;
    $81 = $10;
    $82 = ((($81)) + 2|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $83&255;
    $85 = $84 << 8;
    $86 = $80 | $85;
    $87 = $10;
    $88 = ((($87)) + 3|0);
    $89 = HEAP8[$88>>0]|0;
    $90 = $89&255;
    $91 = $86 | $90;
    $92 = $91 & 268435455;
    $93 = $9;
    $94 = ((($93)) + 24|0);
    HEAP32[$94>>2] = $92;
    $125 = 4;
    break;
   } else {
    $95 = $73 & 15;
    $96 = $95 << 28;
    $97 = $10;
    $98 = ((($97)) + 1|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99&255;
    $101 = $100 << 20;
    $102 = $96 | $101;
    $103 = $10;
    $104 = ((($103)) + 2|0);
    $105 = HEAP8[$104>>0]|0;
    $106 = $105&255;
    $107 = $106 << 12;
    $108 = $102 | $107;
    $109 = $10;
    $110 = ((($109)) + 3|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111&255;
    $113 = $112 << 4;
    $114 = $108 | $113;
    $115 = $10;
    $116 = ((($115)) + 4|0);
    $117 = HEAP8[$116>>0]|0;
    $118 = $117&255;
    $119 = $118 & 15;
    $120 = $114 | $119;
    $121 = $9;
    $122 = ((($121)) + 24|0);
    HEAP32[$122>>2] = $120;
    $125 = 5;
    break;
   }
  }
 } while(0);
 $123 = $10;
 $124 = (($123) + ($125)|0);
 $10 = $124;
 $126 = $10;
 $127 = $5;
 $128 = $126;
 $129 = $127;
 $130 = (($128) - ($129))|0;
 $131 = $6;
 $132 = ($130|0)!=($131|0);
 if ($132) {
  $133 = HEAP32[2410]|0;
  (_fprintf($133,20318,$vararg_buffer)|0);
  $134 = $9;
  _free($134);
  $4 = 0;
  $140 = $4;
  STACKTOP = sp;return ($140|0);
 } else {
  $135 = $7;
  $136 = $9;
  $137 = ((($136)) + 24|0);
  $138 = ((($137)) + 4|0);
  HEAP32[$138>>2] = $135;
  $139 = $9;
  $4 = $139;
  $140 = $4;
  STACKTOP = sp;return ($140|0);
 }
 return (0)|0;
}
function _cram_external_decode_block($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $12 = 0;
 $14 = $9;
 $13 = $14;
 $15 = $6;
 $16 = $7;
 $17 = ((($16)) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_cram_get_block_by_id($15,$18)|0);
 $12 = $19;
 $20 = $12;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  $22 = $10;
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0);
  $25 = $24 ? -1 : 0;
  $5 = $25;
  $79 = $5;
  STACKTOP = sp;return ($79|0);
 }
 $26 = $12;
 $27 = $10;
 $28 = HEAP32[$27>>2]|0;
 $29 = (_cram_extract_block($26,$28)|0);
 $11 = $29;
 $30 = $11;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  $5 = -1;
  $79 = $5;
  STACKTOP = sp;return ($79|0);
 }
 while(1) {
  $32 = $13;
  $33 = ((($32)) + 36|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $13;
  $36 = ((($35)) + 40|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $10;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + ($39))|0;
  $41 = ($34>>>0)<=($40>>>0);
  $42 = $13;
  if (!($41)) {
   break;
  }
  $43 = ((($42)) + 36|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)!=(0);
  if ($45) {
   $46 = $13;
   $47 = ((($46)) + 36|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (+($48>>>0));
   $50 = $49 * 1.5;
   $52 = $50;
  } else {
   $52 = 1024.0;
  }
  $51 = (~~(($52))>>>0);
  $53 = $13;
  $54 = ((($53)) + 36|0);
  HEAP32[$54>>2] = $51;
  $55 = $13;
  $56 = ((($55)) + 32|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $13;
  $59 = ((($58)) + 36|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (_realloc($57,$60)|0);
  $62 = $13;
  $63 = ((($62)) + 32|0);
  HEAP32[$63>>2] = $61;
 }
 $64 = ((($42)) + 40|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $13;
 $67 = ((($66)) + 32|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (($68) + ($65)|0);
 $70 = $11;
 $71 = $10;
 $72 = HEAP32[$71>>2]|0;
 _memcpy(($69|0),($70|0),($72|0))|0;
 $73 = $10;
 $74 = HEAP32[$73>>2]|0;
 $75 = $13;
 $76 = ((($75)) + 40|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($77) + ($74))|0;
 HEAP32[$76>>2] = $78;
 $5 = 0;
 $79 = $5;
 STACKTOP = sp;return ($79|0);
}
function _cram_beta_decode_int($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $14 = $9;
 $11 = $14;
 $15 = $7;
 $16 = ((($15)) + 24|0);
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0);
 L1: do {
  if ($19) {
   $20 = $8;
   $21 = $7;
   $22 = ((($21)) + 24|0);
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (_cram_not_enough_bits($20,$24)|0);
   $26 = ($25|0)!=(0);
   if ($26) {
    $5 = -1;
    $61 = $5;
    STACKTOP = sp;return ($61|0);
   }
   $12 = 0;
   $27 = $10;
   $28 = HEAP32[$27>>2]|0;
   $13 = $28;
   while(1) {
    $29 = $12;
    $30 = $13;
    $31 = ($29|0)<($30|0);
    if (!($31)) {
     break L1;
    }
    $32 = $8;
    $33 = $7;
    $34 = ((($33)) + 24|0);
    $35 = ((($34)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (_get_bits_MSB($32,$36)|0);
    $38 = $7;
    $39 = ((($38)) + 24|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($37) - ($40))|0;
    $42 = $12;
    $43 = $11;
    $44 = (($43) + ($42<<2)|0);
    HEAP32[$44>>2] = $41;
    $45 = $12;
    $46 = (($45) + 1)|0;
    $12 = $46;
   }
  } else {
   $12 = 0;
   $47 = $10;
   $48 = HEAP32[$47>>2]|0;
   $13 = $48;
   while(1) {
    $49 = $12;
    $50 = $13;
    $51 = ($49|0)<($50|0);
    if (!($51)) {
     break L1;
    }
    $52 = $7;
    $53 = ((($52)) + 24|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (0 - ($54))|0;
    $56 = $12;
    $57 = $11;
    $58 = (($57) + ($56<<2)|0);
    HEAP32[$58>>2] = $55;
    $59 = $12;
    $60 = (($59) + 1)|0;
    $12 = $60;
   }
  }
 } while(0);
 $5 = 0;
 $61 = $5;
 STACKTOP = sp;return ($61|0);
}
function _cram_not_enough_bits($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5|0)<(0);
 do {
  if (!($6)) {
   $7 = $3;
   $8 = ((($7)) + 40|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $3;
   $11 = ((($10)) + 20|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($9>>>0)>=($12>>>0);
   $14 = $4;
   $15 = ($14|0)>(0);
   $or$cond = $13 & $15;
   if (!($or$cond)) {
    $16 = $3;
    $17 = ((($16)) + 20|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $3;
    $20 = ((($19)) + 40|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (($18) - ($21))|0;
    $23 = ($22>>>0)<=(268435456);
    if ($23) {
     $24 = $3;
     $25 = ((($24)) + 20|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = $3;
     $28 = ((($27)) + 40|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (($26) - ($29))|0;
     $31 = $30<<3;
     $32 = $3;
     $33 = ((($32)) + 44|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($31) + ($34))|0;
     $36 = (($35) - 7)|0;
     $37 = $4;
     $38 = ($36>>>0)<($37>>>0);
     if ($38) {
      break;
     }
    }
    $2 = 0;
    $39 = $2;
    STACKTOP = sp;return ($39|0);
   }
  }
 } while(0);
 $2 = 1;
 $39 = $2;
 STACKTOP = sp;return ($39|0);
}
function _get_bits_MSB($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $7 = $4;
 $8 = $3;
 $9 = ((($8)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 1)|0;
 $12 = ($7|0)<=($11|0);
 if ($12) {
  $13 = $3;
  $14 = ((($13)) + 40|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $3;
  $17 = ((($16)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($15)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $3;
  $23 = ((($22)) + 44|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $4;
  $26 = (($25) - 1)|0;
  $27 = (($24) - ($26))|0;
  $28 = $21 >> $27;
  $29 = $4;
  $30 = 1 << $29;
  $31 = (($30) - 1)|0;
  $32 = $28 & $31;
  $5 = $32;
  $33 = $4;
  $34 = $3;
  $35 = ((($34)) + 44|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) - ($33))|0;
  HEAP32[$35>>2] = $37;
  $38 = ($37|0)==(-1);
  if ($38) {
   $39 = $3;
   $40 = ((($39)) + 44|0);
   HEAP32[$40>>2] = 7;
   $41 = $3;
   $42 = ((($41)) + 40|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + 1)|0;
   HEAP32[$42>>2] = $44;
  }
  $45 = $5;
  $2 = $45;
  $341 = $2;
  STACKTOP = sp;return ($341|0);
 }
 $46 = $4;
 L8: do {
  switch ($46|0) {
  case 8:  {
   $47 = $5;
   $48 = $47 << 1;
   $5 = $48;
   $49 = $3;
   $50 = ((($49)) + 40|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $3;
   $53 = ((($52)) + 32|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($54) + ($51)|0);
   $56 = HEAP8[$55>>0]|0;
   $57 = $56&255;
   $58 = $3;
   $59 = ((($58)) + 44|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $57 >> $60;
   $62 = $61 & 1;
   $63 = $5;
   $64 = $63 | $62;
   $5 = $64;
   $65 = $3;
   $66 = ((($65)) + 44|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($67) + -1)|0;
   HEAP32[$66>>2] = $68;
   $69 = ($68|0)<(0);
   $70 = $69&1;
   $71 = $3;
   $72 = ((($71)) + 40|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($73) + ($70))|0;
   HEAP32[$72>>2] = $74;
   $75 = $3;
   $76 = ((($75)) + 44|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $77 & 7;
   HEAP32[$76>>2] = $78;
   label = 7;
   break;
  }
  case 7:  {
   label = 7;
   break;
  }
  case 6:  {
   label = 8;
   break;
  }
  case 5:  {
   label = 9;
   break;
  }
  case 4:  {
   label = 10;
   break;
  }
  case 3:  {
   label = 11;
   break;
  }
  case 2:  {
   label = 12;
   break;
  }
  case 1:  {
   label = 13;
   break;
  }
  default: {
   $6 = 0;
   while(1) {
    $303 = $6;
    $304 = $4;
    $305 = ($303|0)<($304|0);
    if (!($305)) {
     break L8;
    }
    $306 = $5;
    $307 = $306 << 1;
    $5 = $307;
    $308 = $3;
    $309 = ((($308)) + 40|0);
    $310 = HEAP32[$309>>2]|0;
    $311 = $3;
    $312 = ((($311)) + 32|0);
    $313 = HEAP32[$312>>2]|0;
    $314 = (($313) + ($310)|0);
    $315 = HEAP8[$314>>0]|0;
    $316 = $315&255;
    $317 = $3;
    $318 = ((($317)) + 44|0);
    $319 = HEAP32[$318>>2]|0;
    $320 = $316 >> $319;
    $321 = $320 & 1;
    $322 = $5;
    $323 = $322 | $321;
    $5 = $323;
    $324 = $3;
    $325 = ((($324)) + 44|0);
    $326 = HEAP32[$325>>2]|0;
    $327 = (($326) + -1)|0;
    HEAP32[$325>>2] = $327;
    $328 = ($327|0)<(0);
    $329 = $328&1;
    $330 = $3;
    $331 = ((($330)) + 40|0);
    $332 = HEAP32[$331>>2]|0;
    $333 = (($332) + ($329))|0;
    HEAP32[$331>>2] = $333;
    $334 = $3;
    $335 = ((($334)) + 44|0);
    $336 = HEAP32[$335>>2]|0;
    $337 = $336 & 7;
    HEAP32[$335>>2] = $337;
    $338 = $6;
    $339 = (($338) + 1)|0;
    $6 = $339;
   }
  }
  }
 } while(0);
 if ((label|0) == 7) {
  $79 = $5;
  $80 = $79 << 1;
  $5 = $80;
  $81 = $3;
  $82 = ((($81)) + 40|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $3;
  $85 = ((($84)) + 32|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($86) + ($83)|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88&255;
  $90 = $3;
  $91 = ((($90)) + 44|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $89 >> $92;
  $94 = $93 & 1;
  $95 = $5;
  $96 = $95 | $94;
  $5 = $96;
  $97 = $3;
  $98 = ((($97)) + 44|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($99) + -1)|0;
  HEAP32[$98>>2] = $100;
  $101 = ($100|0)<(0);
  $102 = $101&1;
  $103 = $3;
  $104 = ((($103)) + 40|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($105) + ($102))|0;
  HEAP32[$104>>2] = $106;
  $107 = $3;
  $108 = ((($107)) + 44|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = $109 & 7;
  HEAP32[$108>>2] = $110;
  label = 8;
 }
 if ((label|0) == 8) {
  $111 = $5;
  $112 = $111 << 1;
  $5 = $112;
  $113 = $3;
  $114 = ((($113)) + 40|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $3;
  $117 = ((($116)) + 32|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($118) + ($115)|0);
  $120 = HEAP8[$119>>0]|0;
  $121 = $120&255;
  $122 = $3;
  $123 = ((($122)) + 44|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $121 >> $124;
  $126 = $125 & 1;
  $127 = $5;
  $128 = $127 | $126;
  $5 = $128;
  $129 = $3;
  $130 = ((($129)) + 44|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = (($131) + -1)|0;
  HEAP32[$130>>2] = $132;
  $133 = ($132|0)<(0);
  $134 = $133&1;
  $135 = $3;
  $136 = ((($135)) + 40|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (($137) + ($134))|0;
  HEAP32[$136>>2] = $138;
  $139 = $3;
  $140 = ((($139)) + 44|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = $141 & 7;
  HEAP32[$140>>2] = $142;
  label = 9;
 }
 if ((label|0) == 9) {
  $143 = $5;
  $144 = $143 << 1;
  $5 = $144;
  $145 = $3;
  $146 = ((($145)) + 40|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $3;
  $149 = ((($148)) + 32|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = (($150) + ($147)|0);
  $152 = HEAP8[$151>>0]|0;
  $153 = $152&255;
  $154 = $3;
  $155 = ((($154)) + 44|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = $153 >> $156;
  $158 = $157 & 1;
  $159 = $5;
  $160 = $159 | $158;
  $5 = $160;
  $161 = $3;
  $162 = ((($161)) + 44|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($163) + -1)|0;
  HEAP32[$162>>2] = $164;
  $165 = ($164|0)<(0);
  $166 = $165&1;
  $167 = $3;
  $168 = ((($167)) + 40|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = (($169) + ($166))|0;
  HEAP32[$168>>2] = $170;
  $171 = $3;
  $172 = ((($171)) + 44|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = $173 & 7;
  HEAP32[$172>>2] = $174;
  label = 10;
 }
 if ((label|0) == 10) {
  $175 = $5;
  $176 = $175 << 1;
  $5 = $176;
  $177 = $3;
  $178 = ((($177)) + 40|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = $3;
  $181 = ((($180)) + 32|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = (($182) + ($179)|0);
  $184 = HEAP8[$183>>0]|0;
  $185 = $184&255;
  $186 = $3;
  $187 = ((($186)) + 44|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = $185 >> $188;
  $190 = $189 & 1;
  $191 = $5;
  $192 = $191 | $190;
  $5 = $192;
  $193 = $3;
  $194 = ((($193)) + 44|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = (($195) + -1)|0;
  HEAP32[$194>>2] = $196;
  $197 = ($196|0)<(0);
  $198 = $197&1;
  $199 = $3;
  $200 = ((($199)) + 40|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = (($201) + ($198))|0;
  HEAP32[$200>>2] = $202;
  $203 = $3;
  $204 = ((($203)) + 44|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = $205 & 7;
  HEAP32[$204>>2] = $206;
  label = 11;
 }
 if ((label|0) == 11) {
  $207 = $5;
  $208 = $207 << 1;
  $5 = $208;
  $209 = $3;
  $210 = ((($209)) + 40|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = $3;
  $213 = ((($212)) + 32|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = (($214) + ($211)|0);
  $216 = HEAP8[$215>>0]|0;
  $217 = $216&255;
  $218 = $3;
  $219 = ((($218)) + 44|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = $217 >> $220;
  $222 = $221 & 1;
  $223 = $5;
  $224 = $223 | $222;
  $5 = $224;
  $225 = $3;
  $226 = ((($225)) + 44|0);
  $227 = HEAP32[$226>>2]|0;
  $228 = (($227) + -1)|0;
  HEAP32[$226>>2] = $228;
  $229 = ($228|0)<(0);
  $230 = $229&1;
  $231 = $3;
  $232 = ((($231)) + 40|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = (($233) + ($230))|0;
  HEAP32[$232>>2] = $234;
  $235 = $3;
  $236 = ((($235)) + 44|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = $237 & 7;
  HEAP32[$236>>2] = $238;
  label = 12;
 }
 if ((label|0) == 12) {
  $239 = $5;
  $240 = $239 << 1;
  $5 = $240;
  $241 = $3;
  $242 = ((($241)) + 40|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = $3;
  $245 = ((($244)) + 32|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = (($246) + ($243)|0);
  $248 = HEAP8[$247>>0]|0;
  $249 = $248&255;
  $250 = $3;
  $251 = ((($250)) + 44|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = $249 >> $252;
  $254 = $253 & 1;
  $255 = $5;
  $256 = $255 | $254;
  $5 = $256;
  $257 = $3;
  $258 = ((($257)) + 44|0);
  $259 = HEAP32[$258>>2]|0;
  $260 = (($259) + -1)|0;
  HEAP32[$258>>2] = $260;
  $261 = ($260|0)<(0);
  $262 = $261&1;
  $263 = $3;
  $264 = ((($263)) + 40|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = (($265) + ($262))|0;
  HEAP32[$264>>2] = $266;
  $267 = $3;
  $268 = ((($267)) + 44|0);
  $269 = HEAP32[$268>>2]|0;
  $270 = $269 & 7;
  HEAP32[$268>>2] = $270;
  label = 13;
 }
 if ((label|0) == 13) {
  $271 = $5;
  $272 = $271 << 1;
  $5 = $272;
  $273 = $3;
  $274 = ((($273)) + 40|0);
  $275 = HEAP32[$274>>2]|0;
  $276 = $3;
  $277 = ((($276)) + 32|0);
  $278 = HEAP32[$277>>2]|0;
  $279 = (($278) + ($275)|0);
  $280 = HEAP8[$279>>0]|0;
  $281 = $280&255;
  $282 = $3;
  $283 = ((($282)) + 44|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = $281 >> $284;
  $286 = $285 & 1;
  $287 = $5;
  $288 = $287 | $286;
  $5 = $288;
  $289 = $3;
  $290 = ((($289)) + 44|0);
  $291 = HEAP32[$290>>2]|0;
  $292 = (($291) + -1)|0;
  HEAP32[$290>>2] = $292;
  $293 = ($292|0)<(0);
  $294 = $293&1;
  $295 = $3;
  $296 = ((($295)) + 40|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = (($297) + ($294))|0;
  HEAP32[$296>>2] = $298;
  $299 = $3;
  $300 = ((($299)) + 44|0);
  $301 = HEAP32[$300>>2]|0;
  $302 = $301 & 7;
  HEAP32[$300>>2] = $302;
 }
 $340 = $5;
 $2 = $340;
 $341 = $2;
 STACKTOP = sp;return ($341|0);
}
function _cram_beta_decode_char($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $7;
 $14 = ((($13)) + 24|0);
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0);
 L1: do {
  if ($17) {
   $18 = $8;
   $19 = $7;
   $20 = ((($19)) + 24|0);
   $21 = ((($20)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (_cram_not_enough_bits($18,$22)|0);
   $24 = ($23|0)!=(0);
   if ($24) {
    $5 = -1;
    $75 = $5;
    STACKTOP = sp;return ($75|0);
   }
   $25 = $9;
   $26 = ($25|0)!=(0|0);
   $11 = 0;
   $27 = $10;
   $28 = HEAP32[$27>>2]|0;
   $12 = $28;
   if ($26) {
    while(1) {
     $29 = $11;
     $30 = $12;
     $31 = ($29|0)<($30|0);
     if (!($31)) {
      break L1;
     }
     $32 = $8;
     $33 = $7;
     $34 = ((($33)) + 24|0);
     $35 = ((($34)) + 4|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = (_get_bits_MSB($32,$36)|0);
     $38 = $7;
     $39 = ((($38)) + 24|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = (($37) - ($40))|0;
     $42 = $41&255;
     $43 = $11;
     $44 = $9;
     $45 = (($44) + ($43)|0);
     HEAP8[$45>>0] = $42;
     $46 = $11;
     $47 = (($46) + 1)|0;
     $11 = $47;
    }
   } else {
    while(1) {
     $48 = $11;
     $49 = $12;
     $50 = ($48|0)<($49|0);
     if (!($50)) {
      break L1;
     }
     $51 = $8;
     $52 = $7;
     $53 = ((($52)) + 24|0);
     $54 = ((($53)) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     (_get_bits_MSB($51,$55)|0);
     $56 = $11;
     $57 = (($56) + 1)|0;
     $11 = $57;
    }
   }
  } else {
   $58 = $9;
   $59 = ($58|0)!=(0|0);
   if ($59) {
    $11 = 0;
    $60 = $10;
    $61 = HEAP32[$60>>2]|0;
    $12 = $61;
    while(1) {
     $62 = $11;
     $63 = $12;
     $64 = ($62|0)<($63|0);
     if (!($64)) {
      break L1;
     }
     $65 = $7;
     $66 = ((($65)) + 24|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (0 - ($67))|0;
     $69 = $68&255;
     $70 = $11;
     $71 = $9;
     $72 = (($71) + ($70)|0);
     HEAP8[$72>>0] = $69;
     $73 = $11;
     $74 = (($73) + 1)|0;
     $11 = $74;
    }
   }
  }
 } while(0);
 $5 = 0;
 $75 = $5;
 STACKTOP = sp;return ($75|0);
}
function _cram_beta_decode_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  _free($4);
 }
 STACKTOP = sp;return;
}
function _cram_beta_decode_init($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $5;
 $10 = $11;
 $12 = (_malloc(548)|0);
 $9 = $12;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $4 = 0;
  $248 = $4;
  STACKTOP = sp;return ($248|0);
 }
 $14 = $9;
 HEAP32[$14>>2] = 6;
 $15 = $7;
 $16 = ($15|0)==(1);
 $17 = $7;
 $18 = ($17|0)==(2);
 $or$cond = $16 | $18;
 do {
  if ($or$cond) {
   $19 = $9;
   $20 = ((($19)) + 12|0);
   HEAP32[$20>>2] = 42;
  } else {
   $21 = $7;
   $22 = ($21|0)==(4);
   $23 = $7;
   $24 = ($23|0)==(3);
   $or$cond3 = $22 | $24;
   if ($or$cond3) {
    $25 = $9;
    $26 = ((($25)) + 12|0);
    HEAP32[$26>>2] = 43;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $27 = $9;
 $28 = ((($27)) + 8|0);
 HEAP32[$28>>2] = 44;
 $29 = $10;
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = ($31|0)<(128);
 $33 = $10;
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 do {
  if ($32) {
   $36 = $9;
   $37 = ((($36)) + 24|0);
   HEAP32[$37>>2] = $35;
   $125 = 1;
  } else {
   $38 = ($35|0)<(192);
   $39 = $10;
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   if ($38) {
    $42 = $41 << 8;
    $43 = $10;
    $44 = ((($43)) + 1|0);
    $45 = HEAP8[$44>>0]|0;
    $46 = $45&255;
    $47 = $42 | $46;
    $48 = $47 & 16383;
    $49 = $9;
    $50 = ((($49)) + 24|0);
    HEAP32[$50>>2] = $48;
    $125 = 2;
    break;
   }
   $51 = ($41|0)<(224);
   $52 = $10;
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   if ($51) {
    $55 = $54 << 16;
    $56 = $10;
    $57 = ((($56)) + 1|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = $58&255;
    $60 = $59 << 8;
    $61 = $55 | $60;
    $62 = $10;
    $63 = ((($62)) + 2|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $64&255;
    $66 = $61 | $65;
    $67 = $66 & 2097151;
    $68 = $9;
    $69 = ((($68)) + 24|0);
    HEAP32[$69>>2] = $67;
    $125 = 3;
    break;
   }
   $70 = ($54|0)<(240);
   $71 = $10;
   $72 = HEAP8[$71>>0]|0;
   $73 = $72&255;
   if ($70) {
    $74 = $73 << 24;
    $75 = $10;
    $76 = ((($75)) + 1|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = $77&255;
    $79 = $78 << 16;
    $80 = $74 | $79;
    $81 = $10;
    $82 = ((($81)) + 2|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $83&255;
    $85 = $84 << 8;
    $86 = $80 | $85;
    $87 = $10;
    $88 = ((($87)) + 3|0);
    $89 = HEAP8[$88>>0]|0;
    $90 = $89&255;
    $91 = $86 | $90;
    $92 = $91 & 268435455;
    $93 = $9;
    $94 = ((($93)) + 24|0);
    HEAP32[$94>>2] = $92;
    $125 = 4;
    break;
   } else {
    $95 = $73 & 15;
    $96 = $95 << 28;
    $97 = $10;
    $98 = ((($97)) + 1|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99&255;
    $101 = $100 << 20;
    $102 = $96 | $101;
    $103 = $10;
    $104 = ((($103)) + 2|0);
    $105 = HEAP8[$104>>0]|0;
    $106 = $105&255;
    $107 = $106 << 12;
    $108 = $102 | $107;
    $109 = $10;
    $110 = ((($109)) + 3|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111&255;
    $113 = $112 << 4;
    $114 = $108 | $113;
    $115 = $10;
    $116 = ((($115)) + 4|0);
    $117 = HEAP8[$116>>0]|0;
    $118 = $117&255;
    $119 = $118 & 15;
    $120 = $114 | $119;
    $121 = $9;
    $122 = ((($121)) + 24|0);
    HEAP32[$122>>2] = $120;
    $125 = 5;
    break;
   }
  }
 } while(0);
 $123 = $10;
 $124 = (($123) + ($125)|0);
 $10 = $124;
 $126 = $10;
 $127 = HEAP8[$126>>0]|0;
 $128 = $127&255;
 $129 = ($128|0)<(128);
 $130 = $10;
 $131 = HEAP8[$130>>0]|0;
 $132 = $131&255;
 do {
  if ($129) {
   $133 = $9;
   $134 = ((($133)) + 24|0);
   $135 = ((($134)) + 4|0);
   HEAP32[$135>>2] = $132;
   $227 = 1;
  } else {
   $136 = ($132|0)<(192);
   $137 = $10;
   $138 = HEAP8[$137>>0]|0;
   $139 = $138&255;
   if ($136) {
    $140 = $139 << 8;
    $141 = $10;
    $142 = ((($141)) + 1|0);
    $143 = HEAP8[$142>>0]|0;
    $144 = $143&255;
    $145 = $140 | $144;
    $146 = $145 & 16383;
    $147 = $9;
    $148 = ((($147)) + 24|0);
    $149 = ((($148)) + 4|0);
    HEAP32[$149>>2] = $146;
    $227 = 2;
    break;
   }
   $150 = ($139|0)<(224);
   $151 = $10;
   $152 = HEAP8[$151>>0]|0;
   $153 = $152&255;
   if ($150) {
    $154 = $153 << 16;
    $155 = $10;
    $156 = ((($155)) + 1|0);
    $157 = HEAP8[$156>>0]|0;
    $158 = $157&255;
    $159 = $158 << 8;
    $160 = $154 | $159;
    $161 = $10;
    $162 = ((($161)) + 2|0);
    $163 = HEAP8[$162>>0]|0;
    $164 = $163&255;
    $165 = $160 | $164;
    $166 = $165 & 2097151;
    $167 = $9;
    $168 = ((($167)) + 24|0);
    $169 = ((($168)) + 4|0);
    HEAP32[$169>>2] = $166;
    $227 = 3;
    break;
   }
   $170 = ($153|0)<(240);
   $171 = $10;
   $172 = HEAP8[$171>>0]|0;
   $173 = $172&255;
   if ($170) {
    $174 = $173 << 24;
    $175 = $10;
    $176 = ((($175)) + 1|0);
    $177 = HEAP8[$176>>0]|0;
    $178 = $177&255;
    $179 = $178 << 16;
    $180 = $174 | $179;
    $181 = $10;
    $182 = ((($181)) + 2|0);
    $183 = HEAP8[$182>>0]|0;
    $184 = $183&255;
    $185 = $184 << 8;
    $186 = $180 | $185;
    $187 = $10;
    $188 = ((($187)) + 3|0);
    $189 = HEAP8[$188>>0]|0;
    $190 = $189&255;
    $191 = $186 | $190;
    $192 = $191 & 268435455;
    $193 = $9;
    $194 = ((($193)) + 24|0);
    $195 = ((($194)) + 4|0);
    HEAP32[$195>>2] = $192;
    $227 = 4;
    break;
   } else {
    $196 = $173 & 15;
    $197 = $196 << 28;
    $198 = $10;
    $199 = ((($198)) + 1|0);
    $200 = HEAP8[$199>>0]|0;
    $201 = $200&255;
    $202 = $201 << 20;
    $203 = $197 | $202;
    $204 = $10;
    $205 = ((($204)) + 2|0);
    $206 = HEAP8[$205>>0]|0;
    $207 = $206&255;
    $208 = $207 << 12;
    $209 = $203 | $208;
    $210 = $10;
    $211 = ((($210)) + 3|0);
    $212 = HEAP8[$211>>0]|0;
    $213 = $212&255;
    $214 = $213 << 4;
    $215 = $209 | $214;
    $216 = $10;
    $217 = ((($216)) + 4|0);
    $218 = HEAP8[$217>>0]|0;
    $219 = $218&255;
    $220 = $219 & 15;
    $221 = $215 | $220;
    $222 = $9;
    $223 = ((($222)) + 24|0);
    $224 = ((($223)) + 4|0);
    HEAP32[$224>>2] = $221;
    $227 = 5;
    break;
   }
  }
 } while(0);
 $225 = $10;
 $226 = (($225) + ($227)|0);
 $10 = $226;
 $228 = $10;
 $229 = $5;
 $230 = $228;
 $231 = $229;
 $232 = (($230) - ($231))|0;
 $233 = $6;
 $234 = ($232|0)!=($233|0);
 if (!($234)) {
  $235 = $9;
  $236 = ((($235)) + 24|0);
  $237 = ((($236)) + 4|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = ($238|0)<(0);
  if (!($239)) {
   $240 = $9;
   $241 = ((($240)) + 24|0);
   $242 = ((($241)) + 4|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = ($243>>>0)>(32);
   if (!($244)) {
    $247 = $9;
    $4 = $247;
    $248 = $4;
    STACKTOP = sp;return ($248|0);
   }
  }
 }
 $245 = HEAP32[2410]|0;
 (_fprintf($245,20352,$vararg_buffer)|0);
 $246 = $9;
 _free($246);
 $4 = 0;
 $248 = $4;
 STACKTOP = sp;return ($248|0);
}
function _cram_subexp_decode($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $18 = $9;
 $11 = $18;
 $19 = $7;
 $20 = ((($19)) + 24|0);
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $14 = $22;
 $13 = 0;
 $23 = $10;
 $24 = HEAP32[$23>>2]|0;
 $12 = $24;
 while(1) {
  $25 = $13;
  $26 = $12;
  $27 = ($25|0)<($26|0);
  if (!($27)) {
   label = 18;
   break;
  }
  $15 = 0;
  $28 = $8;
  $29 = (_get_one_bits_MSB($28)|0);
  $15 = $29;
  $30 = $15;
  $31 = ($30|0)<(0);
  if ($31) {
   label = 8;
   break;
  }
  $32 = $8;
  $33 = $15;
  $34 = ($33|0)>(0);
  if ($34) {
   $35 = $15;
   $36 = $14;
   $37 = (($35) + ($36))|0;
   $38 = (($37) - 1)|0;
   $40 = $38;
  } else {
   $39 = $14;
   $40 = $39;
  }
  $41 = (_cram_not_enough_bits($32,$40)|0);
  $42 = ($41|0)!=(0);
  if ($42) {
   label = 8;
   break;
  }
  $43 = $15;
  $44 = ($43|0)!=(0);
  L10: do {
   if ($44) {
    $45 = $15;
    $46 = $14;
    $47 = (($45) + ($46))|0;
    $48 = (($47) - 1)|0;
    $16 = $48;
    $17 = 0;
    while(1) {
     $49 = $16;
     $50 = ($49|0)!=(0);
     if (!($50)) {
      break;
     }
     $51 = $17;
     $52 = $51 << 1;
     $17 = $52;
     $53 = $8;
     $54 = ((($53)) + 40|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = $8;
     $57 = ((($56)) + 32|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = (($58) + ($55)|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60&255;
     $62 = $8;
     $63 = ((($62)) + 44|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = $61 >> $64;
     $66 = $65 & 1;
     $67 = $17;
     $68 = $67 | $66;
     $17 = $68;
     $69 = $8;
     $70 = ((($69)) + 44|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (($71) + -1)|0;
     HEAP32[$70>>2] = $72;
     $73 = ($72|0)<(0);
     $74 = $73&1;
     $75 = $8;
     $76 = ((($75)) + 40|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (($77) + ($74))|0;
     HEAP32[$76>>2] = $78;
     $79 = $8;
     $80 = ((($79)) + 44|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = $81 & 7;
     HEAP32[$80>>2] = $82;
     $83 = $16;
     $84 = (($83) + -1)|0;
     $16 = $84;
    }
    $85 = $15;
    $86 = $14;
    $87 = (($85) + ($86))|0;
    $88 = (($87) - 1)|0;
    $89 = 1 << $88;
    $90 = $17;
    $91 = (($90) + ($89))|0;
    $17 = $91;
   } else {
    $92 = $14;
    $16 = $92;
    $17 = 0;
    while(1) {
     $93 = $16;
     $94 = ($93|0)!=(0);
     if (!($94)) {
      break L10;
     }
     $95 = $17;
     $96 = $95 << 1;
     $17 = $96;
     $97 = $8;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = $8;
     $101 = ((($100)) + 32|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (($102) + ($99)|0);
     $104 = HEAP8[$103>>0]|0;
     $105 = $104&255;
     $106 = $8;
     $107 = ((($106)) + 44|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = $105 >> $108;
     $110 = $109 & 1;
     $111 = $17;
     $112 = $111 | $110;
     $17 = $112;
     $113 = $8;
     $114 = ((($113)) + 44|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = (($115) + -1)|0;
     HEAP32[$114>>2] = $116;
     $117 = ($116|0)<(0);
     $118 = $117&1;
     $119 = $8;
     $120 = ((($119)) + 40|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = (($121) + ($118))|0;
     HEAP32[$120>>2] = $122;
     $123 = $8;
     $124 = ((($123)) + 44|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = $125 & 7;
     HEAP32[$124>>2] = $126;
     $127 = $16;
     $128 = (($127) + -1)|0;
     $16 = $128;
    }
   }
  } while(0);
  $129 = $17;
  $130 = $7;
  $131 = ((($130)) + 24|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (($129) - ($132))|0;
  $134 = $13;
  $135 = $11;
  $136 = (($135) + ($134<<2)|0);
  HEAP32[$136>>2] = $133;
  $137 = $13;
  $138 = (($137) + 1)|0;
  $13 = $138;
 }
 if ((label|0) == 8) {
  $5 = -1;
  $139 = $5;
  STACKTOP = sp;return ($139|0);
 }
 else if ((label|0) == 18) {
  $5 = 0;
  $139 = $5;
  STACKTOP = sp;return ($139|0);
 }
 return (0)|0;
}
function _get_one_bits_MSB($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 $5 = $2;
 $6 = ((($5)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7>>>0)>=($10>>>0);
 if ($11) {
  $1 = -1;
  $53 = $1;
  STACKTOP = sp;return ($53|0);
 }
 while(1) {
  $12 = $2;
  $13 = ((($12)) + 40|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $2;
  $16 = ((($15)) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($14)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $2;
  $22 = ((($21)) + 44|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $20 >> $23;
  $4 = $24;
  $25 = $2;
  $26 = ((($25)) + 44|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + -1)|0;
  HEAP32[$26>>2] = $28;
  $29 = ($28|0)==(-1);
  if ($29) {
   $30 = $2;
   $31 = ((($30)) + 44|0);
   HEAP32[$31>>2] = 7;
   $32 = $2;
   $33 = ((($32)) + 40|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + 1)|0;
   HEAP32[$33>>2] = $35;
   $36 = $2;
   $37 = ((($36)) + 40|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $2;
   $40 = ((($39)) + 20|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($38|0)==($41|0);
   if ($42) {
    $43 = $4;
    $44 = $43 & 1;
    $45 = ($44|0)!=(0);
    if ($45) {
     label = 6;
     break;
    }
   }
  }
  $46 = $3;
  $47 = (($46) + 1)|0;
  $3 = $47;
  $48 = $4;
  $49 = $48 & 1;
  $50 = ($49|0)!=(0);
  if (!($50)) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 6) {
  $1 = -1;
  $53 = $1;
  STACKTOP = sp;return ($53|0);
 }
 else if ((label|0) == 8) {
  $51 = $3;
  $52 = (($51) - 1)|0;
  $1 = $52;
  $53 = $1;
  STACKTOP = sp;return ($53|0);
 }
 return (0)|0;
}
function _cram_subexp_decode_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  _free($4);
 }
 STACKTOP = sp;return;
}
function _cram_subexp_decode_init($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $5;
 $10 = $11;
 $12 = (_malloc(548)|0);
 $9 = $12;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $4 = 0;
  $56 = $4;
  STACKTOP = sp;return ($56|0);
 }
 $14 = $9;
 HEAP32[$14>>2] = 7;
 $15 = $9;
 $16 = ((($15)) + 12|0);
 HEAP32[$16>>2] = 45;
 $17 = $9;
 $18 = ((($17)) + 8|0);
 HEAP32[$18>>2] = 46;
 $19 = $9;
 $20 = ((($19)) + 24|0);
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = -1;
 $22 = $10;
 $23 = $5;
 $24 = $6;
 $25 = (($23) + ($24)|0);
 $26 = $9;
 $27 = ((($26)) + 24|0);
 $28 = (_safe_itf8_get($22,$25,$27)|0);
 $29 = $10;
 $30 = (($29) + ($28)|0);
 $10 = $30;
 $31 = $10;
 $32 = $5;
 $33 = $6;
 $34 = (($32) + ($33)|0);
 $35 = $9;
 $36 = ((($35)) + 24|0);
 $37 = ((($36)) + 4|0);
 $38 = (_safe_itf8_get($31,$34,$37)|0);
 $39 = $10;
 $40 = (($39) + ($38)|0);
 $10 = $40;
 $41 = $10;
 $42 = $5;
 $43 = $41;
 $44 = $42;
 $45 = (($43) - ($44))|0;
 $46 = $6;
 $47 = ($45|0)!=($46|0);
 if (!($47)) {
  $48 = $9;
  $49 = ((($48)) + 24|0);
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)<(0);
  if (!($52)) {
   $55 = $9;
   $4 = $55;
   $56 = $4;
   STACKTOP = sp;return ($56|0);
  }
 }
 $53 = HEAP32[2410]|0;
 (_fprintf($53,20382,$vararg_buffer)|0);
 $54 = $9;
 _free($54);
 $4 = 0;
 $56 = $4;
 STACKTOP = sp;return ($56|0);
}
function _cram_gamma_decode($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $16 = $9;
 $11 = $16;
 $12 = 0;
 $17 = $10;
 $18 = HEAP32[$17>>2]|0;
 $13 = $18;
 while(1) {
  $19 = $12;
  $20 = $13;
  $21 = ($19|0)<($20|0);
  if (!($21)) {
   label = 9;
   break;
  }
  $14 = 0;
  $22 = $8;
  $23 = (_get_zero_bits_MSB($22)|0);
  $14 = $23;
  $24 = $8;
  $25 = $14;
  $26 = (_cram_not_enough_bits($24,$25)|0);
  $27 = ($26|0)!=(0);
  if ($27) {
   label = 4;
   break;
  }
  $15 = 1;
  while(1) {
   $28 = $14;
   $29 = ($28|0)>(0);
   $30 = $15;
   if (!($29)) {
    break;
   }
   $31 = $30 << 1;
   $15 = $31;
   $32 = $8;
   $33 = ((($32)) + 40|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $8;
   $36 = ((($35)) + 32|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) + ($34)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = $8;
   $42 = ((($41)) + 44|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $40 >> $43;
   $45 = $44 & 1;
   $46 = $15;
   $47 = $46 | $45;
   $15 = $47;
   $48 = $8;
   $49 = ((($48)) + 44|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + -1)|0;
   HEAP32[$49>>2] = $51;
   $52 = ($51|0)<(0);
   $53 = $52&1;
   $54 = $8;
   $55 = ((($54)) + 40|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + ($53))|0;
   HEAP32[$55>>2] = $57;
   $58 = $8;
   $59 = ((($58)) + 44|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $60 & 7;
   HEAP32[$59>>2] = $61;
   $62 = $14;
   $63 = (($62) + -1)|0;
   $14 = $63;
  }
  $64 = $7;
  $65 = ((($64)) + 24|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($30) - ($66))|0;
  $68 = $12;
  $69 = $11;
  $70 = (($69) + ($68<<2)|0);
  HEAP32[$70>>2] = $67;
  $71 = $12;
  $72 = (($71) + 1)|0;
  $12 = $72;
 }
 if ((label|0) == 4) {
  $5 = -1;
  $73 = $5;
  STACKTOP = sp;return ($73|0);
 }
 else if ((label|0) == 9) {
  $5 = 0;
  $73 = $5;
  STACKTOP = sp;return ($73|0);
 }
 return (0)|0;
}
function _get_zero_bits_MSB($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 $5 = $2;
 $6 = ((($5)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7>>>0)>=($10>>>0);
 if ($11) {
  $1 = -1;
  $54 = $1;
  STACKTOP = sp;return ($54|0);
 }
 while(1) {
  $12 = $2;
  $13 = ((($12)) + 40|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $2;
  $16 = ((($15)) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($14)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $2;
  $22 = ((($21)) + 44|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $20 >> $23;
  $4 = $24;
  $25 = $2;
  $26 = ((($25)) + 44|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + -1)|0;
  HEAP32[$26>>2] = $28;
  $29 = ($28|0)==(-1);
  if ($29) {
   $30 = $2;
   $31 = ((($30)) + 44|0);
   HEAP32[$31>>2] = 7;
   $32 = $2;
   $33 = ((($32)) + 40|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + 1)|0;
   HEAP32[$33>>2] = $35;
   $36 = $2;
   $37 = ((($36)) + 40|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $2;
   $40 = ((($39)) + 20|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($38|0)==($41|0);
   if ($42) {
    $43 = $4;
    $44 = $43 & 1;
    $45 = ($44|0)!=(0);
    if (!($45)) {
     label = 6;
     break;
    }
   }
  }
  $46 = $3;
  $47 = (($46) + 1)|0;
  $3 = $47;
  $48 = $4;
  $49 = $48 & 1;
  $50 = ($49|0)!=(0);
  $51 = $50 ^ 1;
  if (!($51)) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 6) {
  $1 = -1;
  $54 = $1;
  STACKTOP = sp;return ($54|0);
 }
 else if ((label|0) == 8) {
  $52 = $3;
  $53 = (($52) - 1)|0;
  $1 = $53;
  $54 = $1;
  STACKTOP = sp;return ($54|0);
 }
 return (0)|0;
}
function _cram_gamma_decode_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  _free($4);
 }
 STACKTOP = sp;return;
}
function _cram_gamma_decode_init($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $5;
 $10 = $11;
 $12 = (_malloc(548)|0);
 $9 = $12;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $4 = 0;
  $126 = $4;
  STACKTOP = sp;return ($126|0);
 }
 $14 = $9;
 HEAP32[$14>>2] = 9;
 $15 = $9;
 $16 = ((($15)) + 12|0);
 HEAP32[$16>>2] = 47;
 $17 = $9;
 $18 = ((($17)) + 8|0);
 HEAP32[$18>>2] = 48;
 $19 = $10;
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = ($21|0)<(128);
 $23 = $10;
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 do {
  if ($22) {
   $26 = $9;
   $27 = ((($26)) + 24|0);
   HEAP32[$27>>2] = $25;
   $115 = 1;
  } else {
   $28 = ($25|0)<(192);
   $29 = $10;
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   if ($28) {
    $32 = $31 << 8;
    $33 = $10;
    $34 = ((($33)) + 1|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = $35&255;
    $37 = $32 | $36;
    $38 = $37 & 16383;
    $39 = $9;
    $40 = ((($39)) + 24|0);
    HEAP32[$40>>2] = $38;
    $115 = 2;
    break;
   }
   $41 = ($31|0)<(224);
   $42 = $10;
   $43 = HEAP8[$42>>0]|0;
   $44 = $43&255;
   if ($41) {
    $45 = $44 << 16;
    $46 = $10;
    $47 = ((($46)) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48&255;
    $50 = $49 << 8;
    $51 = $45 | $50;
    $52 = $10;
    $53 = ((($52)) + 2|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = $54&255;
    $56 = $51 | $55;
    $57 = $56 & 2097151;
    $58 = $9;
    $59 = ((($58)) + 24|0);
    HEAP32[$59>>2] = $57;
    $115 = 3;
    break;
   }
   $60 = ($44|0)<(240);
   $61 = $10;
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   if ($60) {
    $64 = $63 << 24;
    $65 = $10;
    $66 = ((($65)) + 1|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67&255;
    $69 = $68 << 16;
    $70 = $64 | $69;
    $71 = $10;
    $72 = ((($71)) + 2|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = $73&255;
    $75 = $74 << 8;
    $76 = $70 | $75;
    $77 = $10;
    $78 = ((($77)) + 3|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79&255;
    $81 = $76 | $80;
    $82 = $81 & 268435455;
    $83 = $9;
    $84 = ((($83)) + 24|0);
    HEAP32[$84>>2] = $82;
    $115 = 4;
    break;
   } else {
    $85 = $63 & 15;
    $86 = $85 << 28;
    $87 = $10;
    $88 = ((($87)) + 1|0);
    $89 = HEAP8[$88>>0]|0;
    $90 = $89&255;
    $91 = $90 << 20;
    $92 = $86 | $91;
    $93 = $10;
    $94 = ((($93)) + 2|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = $95&255;
    $97 = $96 << 12;
    $98 = $92 | $97;
    $99 = $10;
    $100 = ((($99)) + 3|0);
    $101 = HEAP8[$100>>0]|0;
    $102 = $101&255;
    $103 = $102 << 4;
    $104 = $98 | $103;
    $105 = $10;
    $106 = ((($105)) + 4|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = $107&255;
    $109 = $108 & 15;
    $110 = $104 | $109;
    $111 = $9;
    $112 = ((($111)) + 24|0);
    HEAP32[$112>>2] = $110;
    $115 = 5;
    break;
   }
  }
 } while(0);
 $113 = $10;
 $114 = (($113) + ($115)|0);
 $10 = $114;
 $116 = $10;
 $117 = $5;
 $118 = $116;
 $119 = $117;
 $120 = (($118) - ($119))|0;
 $121 = $6;
 $122 = ($120|0)!=($121|0);
 if ($122) {
  $123 = HEAP32[2410]|0;
  (_fprintf($123,20414,$vararg_buffer)|0);
  $124 = $9;
  _free($124);
  $4 = 0;
  $126 = $4;
  STACKTOP = sp;return ($126|0);
 } else {
  $125 = $9;
  $4 = $125;
  $126 = $4;
  STACKTOP = sp;return ($126|0);
 }
 return (0)|0;
}
function _cram_huffman_decode_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 24|0);
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $1;
  $10 = ((($9)) + 24|0);
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  _free($12);
 }
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _cram_huffman_decode_null($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 STACKTOP = sp;return -1;
}
function _cram_huffman_decode_char0($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $9;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $5 = 0;
  $31 = $5;
  STACKTOP = sp;return ($31|0);
 }
 $11 = 0;
 $15 = $10;
 $16 = HEAP32[$15>>2]|0;
 $12 = $16;
 while(1) {
  $17 = $11;
  $18 = $12;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $7;
  $21 = ((($20)) + 24|0);
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = $24&255;
  $26 = $11;
  $27 = $9;
  $28 = (($27) + ($26)|0);
  HEAP8[$28>>0] = $25;
  $29 = $11;
  $30 = (($29) + 1)|0;
  $11 = $30;
 }
 $5 = 0;
 $31 = $5;
 STACKTOP = sp;return ($31|0);
}
function _cram_huffman_decode_char($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $20 = $7;
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $13 = $22;
 $23 = $7;
 $24 = ((($23)) + 24|0);
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $14 = $26;
 $11 = 0;
 $27 = $10;
 $28 = HEAP32[$27>>2]|0;
 $12 = $28;
 L1: while(1) {
  $29 = $11;
  $30 = $12;
  $31 = ($29|0)<($30|0);
  if (!($31)) {
   label = 14;
   break;
  }
  $15 = 0;
  $16 = 0;
  $17 = 0;
  $18 = 0;
  while(1) {
   $32 = $15;
   $33 = $14;
   $34 = (($33) + ($32<<4)|0);
   $35 = ((($34)) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $18;
   $38 = (($36) - ($37))|0;
   $19 = $38;
   $39 = $8;
   $40 = $19;
   $41 = (_cram_not_enough_bits($39,$40)|0);
   $42 = ($41|0)!=(0);
   if ($42) {
    label = 5;
    break L1;
   }
   $43 = $19;
   $44 = $17;
   $45 = (($44) + ($43))|0;
   $17 = $45;
   $18 = $45;
   while(1) {
    $46 = $19;
    $47 = ($46|0)!=(0);
    $48 = $16;
    if (!($47)) {
     break;
    }
    $49 = $48 << 1;
    $16 = $49;
    $50 = $8;
    $51 = ((($50)) + 40|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $8;
    $54 = ((($53)) + 32|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (($55) + ($52)|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57&255;
    $59 = $8;
    $60 = ((($59)) + 44|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = $58 >> $61;
    $63 = $62 & 1;
    $64 = $16;
    $65 = $64 | $63;
    $16 = $65;
    $66 = $8;
    $67 = ((($66)) + 44|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (($68) + -1)|0;
    HEAP32[$67>>2] = $69;
    $70 = ($69|0)<(0);
    $71 = $70&1;
    $72 = $8;
    $73 = ((($72)) + 40|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (($74) + ($71))|0;
    HEAP32[$73>>2] = $75;
    $76 = $8;
    $77 = ((($76)) + 44|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = $78 & 7;
    HEAP32[$77>>2] = $79;
    $80 = $19;
    $81 = (($80) + -1)|0;
    $19 = $81;
   }
   $82 = $15;
   $83 = $14;
   $84 = (($83) + ($82<<4)|0);
   $85 = ((($84)) + 4|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($48) - ($86))|0;
   $15 = $87;
   $88 = $15;
   $89 = $13;
   $90 = ($88|0)>=($89|0);
   $91 = $15;
   $92 = ($91|0)<(0);
   $or$cond = $90 | $92;
   if ($or$cond) {
    label = 10;
    break L1;
   }
   $93 = $15;
   $94 = $14;
   $95 = (($94) + ($93<<4)|0);
   $96 = ((($95)) + 8|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = $16;
   $99 = ($97|0)==($98|0);
   if (!($99)) {
    continue;
   }
   $100 = $15;
   $101 = $14;
   $102 = (($101) + ($100<<4)|0);
   $103 = ((($102)) + 12|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $17;
   $106 = ($104|0)==($105|0);
   if ($106) {
    break;
   }
  }
  $107 = $15;
  $108 = $14;
  $109 = (($108) + ($107<<4)|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = $110&255;
  $112 = $11;
  $113 = $9;
  $114 = (($113) + ($112)|0);
  HEAP8[$114>>0] = $111;
  $115 = $11;
  $116 = (($115) + 1)|0;
  $11 = $116;
 }
 if ((label|0) == 5) {
  $5 = -1;
  $117 = $5;
  STACKTOP = sp;return ($117|0);
 }
 else if ((label|0) == 10) {
  $5 = -1;
  $117 = $5;
  STACKTOP = sp;return ($117|0);
 }
 else if ((label|0) == 14) {
  $5 = 0;
  $117 = $5;
  STACKTOP = sp;return ($117|0);
 }
 return (0)|0;
}
function _cram_huffman_decode_int0($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $14 = $8;
 $10 = $14;
 $15 = $6;
 $16 = ((($15)) + 24|0);
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $13 = $18;
 $11 = 0;
 $19 = $9;
 $20 = HEAP32[$19>>2]|0;
 $12 = $20;
 while(1) {
  $21 = $11;
  $22 = $12;
  $23 = ($21|0)<($22|0);
  if (!($23)) {
   break;
  }
  $24 = $13;
  $25 = HEAP32[$24>>2]|0;
  $26 = $11;
  $27 = $10;
  $28 = (($27) + ($26<<2)|0);
  HEAP32[$28>>2] = $25;
  $29 = $11;
  $30 = (($29) + 1)|0;
  $11 = $30;
 }
 STACKTOP = sp;return 0;
}
function _cram_huffman_decode_int($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $21 = $9;
 $11 = $21;
 $22 = $7;
 $23 = ((($22)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $14 = $24;
 $25 = $7;
 $26 = ((($25)) + 24|0);
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $15 = $28;
 $12 = 0;
 $29 = $10;
 $30 = HEAP32[$29>>2]|0;
 $13 = $30;
 L1: while(1) {
  $31 = $12;
  $32 = $13;
  $33 = ($31|0)<($32|0);
  if (!($33)) {
   label = 14;
   break;
  }
  $16 = 0;
  $17 = 0;
  $18 = 0;
  $19 = 0;
  while(1) {
   $34 = $16;
   $35 = $15;
   $36 = (($35) + ($34<<4)|0);
   $37 = ((($36)) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $19;
   $40 = (($38) - ($39))|0;
   $20 = $40;
   $41 = $8;
   $42 = $20;
   $43 = (_cram_not_enough_bits($41,$42)|0);
   $44 = ($43|0)!=(0);
   if ($44) {
    label = 5;
    break L1;
   }
   $45 = $20;
   $46 = $18;
   $47 = (($46) + ($45))|0;
   $18 = $47;
   $19 = $47;
   while(1) {
    $48 = $20;
    $49 = ($48|0)!=(0);
    $50 = $17;
    if (!($49)) {
     break;
    }
    $51 = $50 << 1;
    $17 = $51;
    $52 = $8;
    $53 = ((($52)) + 40|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = $8;
    $56 = ((($55)) + 32|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (($57) + ($54)|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = $8;
    $62 = ((($61)) + 44|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $60 >> $63;
    $65 = $64 & 1;
    $66 = $17;
    $67 = $66 | $65;
    $17 = $67;
    $68 = $8;
    $69 = ((($68)) + 44|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($70) + -1)|0;
    HEAP32[$69>>2] = $71;
    $72 = ($71|0)<(0);
    $73 = $72&1;
    $74 = $8;
    $75 = ((($74)) + 40|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (($76) + ($73))|0;
    HEAP32[$75>>2] = $77;
    $78 = $8;
    $79 = ((($78)) + 44|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 7;
    HEAP32[$79>>2] = $81;
    $82 = $20;
    $83 = (($82) + -1)|0;
    $20 = $83;
   }
   $84 = $16;
   $85 = $15;
   $86 = (($85) + ($84<<4)|0);
   $87 = ((($86)) + 4|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (($50) - ($88))|0;
   $16 = $89;
   $90 = $16;
   $91 = $14;
   $92 = ($90|0)>=($91|0);
   $93 = $16;
   $94 = ($93|0)<(0);
   $or$cond = $92 | $94;
   if ($or$cond) {
    label = 10;
    break L1;
   }
   $95 = $16;
   $96 = $15;
   $97 = (($96) + ($95<<4)|0);
   $98 = ((($97)) + 8|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $17;
   $101 = ($99|0)==($100|0);
   if (!($101)) {
    continue;
   }
   $102 = $16;
   $103 = $15;
   $104 = (($103) + ($102<<4)|0);
   $105 = ((($104)) + 12|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = $18;
   $108 = ($106|0)==($107|0);
   if ($108) {
    break;
   }
  }
  $109 = $16;
  $110 = $15;
  $111 = (($110) + ($109<<4)|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = $12;
  $114 = $11;
  $115 = (($114) + ($113<<2)|0);
  HEAP32[$115>>2] = $112;
  $116 = $12;
  $117 = (($116) + 1)|0;
  $12 = $117;
 }
 if ((label|0) == 5) {
  $5 = -1;
  $118 = $5;
  STACKTOP = sp;return ($118|0);
 }
 else if ((label|0) == 10) {
  $5 = -1;
  $118 = $5;
  STACKTOP = sp;return ($118|0);
 }
 else if ((label|0) == 14) {
  $5 = 0;
  $118 = $5;
  STACKTOP = sp;return ($118|0);
 }
 return (0)|0;
}
function _cram_huffman_decode_init($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $9 = sp + 60|0;
 $10 = sp + 56|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 HEAP32[$9>>2] = 0;
 $20 = $5;
 $12 = $20;
 $21 = $6;
 $22 = $5;
 $23 = (($22) + ($21)|0);
 $13 = $23;
 $18 = 0;
 $24 = $12;
 $25 = $13;
 $26 = (_safe_itf8_get($24,$25,$9)|0);
 $27 = $12;
 $28 = (($27) + ($26)|0);
 $12 = $28;
 $29 = (_calloc(1,548)|0);
 $14 = $29;
 $30 = $14;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  $4 = 0;
  $212 = $4;
  STACKTOP = sp;return ($212|0);
 }
 $32 = $14;
 HEAP32[$32>>2] = 3;
 $33 = $14;
 $34 = ((($33)) + 8|0);
 HEAP32[$34>>2] = 49;
 $35 = HEAP32[$9>>2]|0;
 $36 = $14;
 $37 = ((($36)) + 24|0);
 HEAP32[$37>>2] = $35;
 $38 = HEAP32[$9>>2]|0;
 $39 = $38<<4;
 $40 = (_malloc($39)|0);
 $41 = $14;
 $42 = ((($41)) + 24|0);
 $43 = ((($42)) + 4|0);
 HEAP32[$43>>2] = $40;
 $15 = $40;
 $44 = $15;
 $45 = ($44|0)!=(0|0);
 if (!($45)) {
  $46 = $14;
  _free($46);
  $4 = 0;
  $212 = $4;
  STACKTOP = sp;return ($212|0);
 }
 HEAP32[$10>>2] = 0;
 $19 = 1;
 while(1) {
  $47 = HEAP32[$10>>2]|0;
  $48 = HEAP32[$9>>2]|0;
  $49 = ($47|0)<($48|0);
  $50 = $19;
  $51 = ($50|0)>(0);
  $52 = $49 ? $51 : 0;
  if (!($52)) {
   break;
  }
  $53 = $12;
  $54 = $13;
  $55 = HEAP32[$10>>2]|0;
  $56 = $15;
  $57 = (($56) + ($55<<4)|0);
  $58 = (_safe_itf8_get($53,$54,$57)|0);
  $19 = $58;
  $59 = HEAP32[$10>>2]|0;
  $60 = (($59) + 1)|0;
  HEAP32[$10>>2] = $60;
  $61 = $19;
  $62 = $12;
  $63 = (($62) + ($61)|0);
  $12 = $63;
 }
 $64 = $19;
 $65 = ($64|0)<(1);
 if ($65) {
  $66 = HEAP32[2410]|0;
  (_fprintf($66,20445,$vararg_buffer)|0);
  $67 = $14;
  _free($67);
  $4 = 0;
  $212 = $4;
  STACKTOP = sp;return ($212|0);
 }
 $68 = $12;
 $69 = $13;
 $70 = (_safe_itf8_get($68,$69,$10)|0);
 $71 = $12;
 $72 = (($71) + ($70)|0);
 $12 = $72;
 $73 = HEAP32[$10>>2]|0;
 $74 = HEAP32[$9>>2]|0;
 $75 = ($73|0)!=($74|0);
 if ($75) {
  $76 = HEAP32[2410]|0;
  (_fprintf($76,20445,$vararg_buffer2)|0);
  $77 = $14;
  _free($77);
  $4 = 0;
  $212 = $4;
  STACKTOP = sp;return ($212|0);
 }
 $78 = HEAP32[$9>>2]|0;
 $79 = ($78|0)==(0);
 if ($79) {
  $80 = $14;
  $81 = ((($80)) + 12|0);
  HEAP32[$81>>2] = 50;
  $82 = $14;
  $4 = $82;
  $212 = $4;
  STACKTOP = sp;return ($212|0);
 }
 HEAP32[$10>>2] = 0;
 $19 = 1;
 while(1) {
  $83 = HEAP32[$10>>2]|0;
  $84 = HEAP32[$9>>2]|0;
  $85 = ($83|0)<($84|0);
  if (!($85)) {
   break;
  }
  $86 = $12;
  $87 = $13;
  $88 = HEAP32[$10>>2]|0;
  $89 = $15;
  $90 = (($89) + ($88<<4)|0);
  $91 = ((($90)) + 12|0);
  $92 = (_safe_itf8_get($86,$87,$91)|0);
  $19 = $92;
  $93 = $19;
  $94 = ($93|0)<(1);
  if ($94) {
   break;
  }
  $95 = $18;
  $96 = HEAP32[$10>>2]|0;
  $97 = $15;
  $98 = (($97) + ($96<<4)|0);
  $99 = ((($98)) + 12|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ($95|0)<($100|0);
  if ($101) {
   $102 = HEAP32[$10>>2]|0;
   $103 = $15;
   $104 = (($103) + ($102<<4)|0);
   $105 = ((($104)) + 12|0);
   $106 = HEAP32[$105>>2]|0;
   $18 = $106;
  }
  $107 = HEAP32[$10>>2]|0;
  $108 = (($107) + 1)|0;
  HEAP32[$10>>2] = $108;
  $109 = $19;
  $110 = $12;
  $111 = (($110) + ($109)|0);
  $12 = $111;
 }
 $112 = $19;
 $113 = ($112|0)<(1);
 if (!($113)) {
  $114 = $12;
  $115 = $5;
  $116 = $114;
  $117 = $115;
  $118 = (($116) - ($117))|0;
  $119 = $6;
  $120 = ($118|0)!=($119|0);
  if (!($120)) {
   $121 = $18;
   $122 = HEAP32[$9>>2]|0;
   $123 = ($121|0)>=($122|0);
   if (!($123)) {
    $126 = $15;
    $127 = HEAP32[$9>>2]|0;
    _qsort($126,$127,16,51);
    $16 = -1;
    $17 = 0;
    HEAP32[$10>>2] = 0;
    while(1) {
     $128 = HEAP32[$10>>2]|0;
     $129 = HEAP32[$9>>2]|0;
     $130 = ($128|0)<($129|0);
     if (!($130)) {
      break;
     }
     $131 = $16;
     $132 = (($131) + 1)|0;
     $16 = $132;
     $133 = HEAP32[$10>>2]|0;
     $134 = $15;
     $135 = (($134) + ($133<<4)|0);
     $136 = ((($135)) + 12|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = $17;
     $139 = ($137|0)>($138|0);
     L40: do {
      if ($139) {
       while(1) {
        $140 = HEAP32[$10>>2]|0;
        $141 = $15;
        $142 = (($141) + ($140<<4)|0);
        $143 = ((($142)) + 12|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = $17;
        $146 = ($144|0)>($145|0);
        if (!($146)) {
         break L40;
        }
        $147 = $16;
        $148 = $147 << 1;
        $16 = $148;
        $149 = $17;
        $150 = (($149) + 1)|0;
        $17 = $150;
       }
      }
     } while(0);
     $151 = $16;
     $152 = HEAP32[$10>>2]|0;
     $153 = $15;
     $154 = (($153) + ($152<<4)|0);
     $155 = ((($154)) + 8|0);
     HEAP32[$155>>2] = $151;
     $156 = HEAP32[$10>>2]|0;
     $157 = (($156) + 1)|0;
     HEAP32[$10>>2] = $157;
    }
    $17 = 0;
    $11 = 0;
    HEAP32[$10>>2] = 0;
    while(1) {
     $158 = HEAP32[$10>>2]|0;
     $159 = HEAP32[$9>>2]|0;
     $160 = ($158|0)<($159|0);
     if (!($160)) {
      break;
     }
     $161 = HEAP32[$10>>2]|0;
     $162 = $15;
     $163 = (($162) + ($161<<4)|0);
     $164 = ((($163)) + 12|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = $17;
     $167 = ($165|0)>($166|0);
     if ($167) {
      $168 = HEAP32[$10>>2]|0;
      $169 = $15;
      $170 = (($169) + ($168<<4)|0);
      $171 = ((($170)) + 8|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = HEAP32[$10>>2]|0;
      $174 = (($172) - ($173))|0;
      $11 = $174;
      $175 = HEAP32[$10>>2]|0;
      $176 = $15;
      $177 = (($176) + ($175<<4)|0);
      $178 = ((($177)) + 12|0);
      $179 = HEAP32[$178>>2]|0;
      $17 = $179;
     }
     $180 = $11;
     $181 = HEAP32[$10>>2]|0;
     $182 = $15;
     $183 = (($182) + ($181<<4)|0);
     $184 = ((($183)) + 4|0);
     HEAP32[$184>>2] = $180;
     $185 = HEAP32[$10>>2]|0;
     $186 = (($185) + 1)|0;
     HEAP32[$10>>2] = $186;
    }
    $187 = $7;
    $188 = ($187|0)==(3);
    $189 = $7;
    $190 = ($189|0)==(4);
    $or$cond = $188 | $190;
    do {
     if ($or$cond) {
      $191 = $14;
      $192 = ((($191)) + 24|0);
      $193 = ((($192)) + 4|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ((($194)) + 12|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ($196|0)==(0);
      $198 = $14;
      $199 = ((($198)) + 12|0);
      if ($197) {
       HEAP32[$199>>2] = 52;
       break;
      } else {
       HEAP32[$199>>2] = 53;
       break;
      }
     } else {
      $200 = $7;
      $201 = ($200|0)==(5);
      if ($201) {
       _abort();
       // unreachable;
      }
      $202 = $14;
      $203 = ((($202)) + 24|0);
      $204 = ((($203)) + 4|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = ((($205)) + 12|0);
      $207 = HEAP32[$206>>2]|0;
      $208 = ($207|0)==(0);
      $209 = $14;
      $210 = ((($209)) + 12|0);
      if ($208) {
       HEAP32[$210>>2] = 54;
       break;
      } else {
       HEAP32[$210>>2] = 55;
       break;
      }
     }
    } while(0);
    $211 = $14;
    $4 = $211;
    $212 = $4;
    STACKTOP = sp;return ($212|0);
   }
  }
 }
 $124 = HEAP32[2410]|0;
 (_fprintf($124,20445,$vararg_buffer4)|0);
 $125 = $14;
 _free($125);
 $4 = 0;
 $212 = $4;
 STACKTOP = sp;return ($212|0);
}
function _code_sort($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $5 = $7;
 $8 = $4;
 $6 = $8;
 $9 = $5;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $6;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11|0)!=($14|0);
 $16 = $5;
 if ($15) {
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $6;
  $20 = ((($19)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($18) - ($21))|0;
  $2 = $22;
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 } else {
  $23 = HEAP32[$16>>2]|0;
  $24 = $6;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) - ($25))|0;
  $2 = $26;
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _cram_byte_array_len_decode($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 HEAP32[$11>>2] = 0;
 HEAP32[$12>>2] = 1;
 $14 = $7;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $6;
 $20 = $7;
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $8;
 $24 = (FUNCTION_TABLE_iiiiii[$18 & 63]($19,$22,$23,$11,$12)|0);
 $13 = $24;
 $25 = $13;
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $27 = $7;
  $28 = ((($27)) + 24|0);
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)!=(0|0);
  $32 = HEAP32[$11>>2]|0;
  $33 = ($32|0)>=(0);
  $or$cond = $31 & $33;
  if ($or$cond) {
   $34 = $7;
   $35 = ((($34)) + 24|0);
   $36 = ((($35)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($37)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $6;
   $41 = $7;
   $42 = ((($41)) + 24|0);
   $43 = ((($42)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $8;
   $46 = $9;
   $47 = (FUNCTION_TABLE_iiiiii[$39 & 63]($40,$44,$45,$46,$11)|0);
   $13 = $47;
   $48 = HEAP32[$11>>2]|0;
   $49 = $10;
   HEAP32[$49>>2] = $48;
   $50 = $13;
   $5 = $50;
   $51 = $5;
   STACKTOP = sp;return ($51|0);
  }
 }
 $5 = -1;
 $51 = $5;
 STACKTOP = sp;return ($51|0);
}
function _cram_byte_array_len_decode_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $1;
  $14 = ((($13)) + 24|0);
  $15 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_vi[$12 & 127]($15);
 }
 $16 = $1;
 $17 = ((($16)) + 24|0);
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $1;
  $22 = ((($21)) + 24|0);
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $1;
  $28 = ((($27)) + 24|0);
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  FUNCTION_TABLE_vi[$26 & 127]($30);
 }
 $31 = $1;
 _free($31);
 STACKTOP = sp;return;
}
function _cram_byte_array_len_decode_init($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $5;
 $10 = $14;
 $15 = $5;
 $16 = $6;
 $17 = (($15) + ($16)|0);
 $11 = $17;
 HEAP32[$12>>2] = 0;
 HEAP32[$13>>2] = -1;
 $18 = (_malloc(548)|0);
 $9 = $18;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  $4 = 0;
  $104 = $4;
  STACKTOP = sp;return ($104|0);
 }
 $20 = $9;
 HEAP32[$20>>2] = 4;
 $21 = $9;
 $22 = ((($21)) + 12|0);
 HEAP32[$22>>2] = 56;
 $23 = $9;
 $24 = ((($23)) + 8|0);
 HEAP32[$24>>2] = 57;
 $25 = $10;
 $26 = $11;
 $27 = (_safe_itf8_get($25,$26,$12)|0);
 $28 = $10;
 $29 = (($28) + ($27)|0);
 $10 = $29;
 $30 = $10;
 $31 = $11;
 $32 = (_safe_itf8_get($30,$31,$13)|0);
 $33 = $10;
 $34 = (($33) + ($32)|0);
 $10 = $34;
 $35 = HEAP32[$13>>2]|0;
 $36 = ($35|0)<(0);
 if ($36) {
  label = 11;
 } else {
  $37 = $11;
  $38 = $10;
  $39 = $37;
  $40 = $38;
  $41 = (($39) - ($40))|0;
  $42 = HEAP32[$13>>2]|0;
  $43 = ($41|0)<($42|0);
  if ($43) {
   label = 11;
  } else {
   $44 = HEAP32[$12>>2]|0;
   $45 = $10;
   $46 = HEAP32[$13>>2]|0;
   $47 = $8;
   $48 = (_cram_decoder_init($44,$45,$46,1,$47)|0);
   $49 = $9;
   $50 = ((($49)) + 24|0);
   HEAP32[$50>>2] = $48;
   $51 = $9;
   $52 = ((($51)) + 24|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(0|0);
   if (!($54)) {
    $55 = HEAP32[$13>>2]|0;
    $56 = $10;
    $57 = (($56) + ($55)|0);
    $10 = $57;
    HEAP32[$13>>2] = -1;
    $58 = $10;
    $59 = $11;
    $60 = (_safe_itf8_get($58,$59,$12)|0);
    $61 = $10;
    $62 = (($61) + ($60)|0);
    $10 = $62;
    $63 = $10;
    $64 = $11;
    $65 = (_safe_itf8_get($63,$64,$13)|0);
    $66 = $10;
    $67 = (($66) + ($65)|0);
    $10 = $67;
    $68 = HEAP32[$13>>2]|0;
    $69 = ($68|0)<(0);
    if ($69) {
     label = 11;
    } else {
     $70 = $11;
     $71 = $10;
     $72 = $70;
     $73 = $71;
     $74 = (($72) - ($73))|0;
     $75 = HEAP32[$13>>2]|0;
     $76 = ($74|0)<($75|0);
     if ($76) {
      label = 11;
     } else {
      $77 = HEAP32[$12>>2]|0;
      $78 = $10;
      $79 = HEAP32[$13>>2]|0;
      $80 = $7;
      $81 = $8;
      $82 = (_cram_decoder_init($77,$78,$79,$80,$81)|0);
      $83 = $9;
      $84 = ((($83)) + 24|0);
      $85 = ((($84)) + 4|0);
      HEAP32[$85>>2] = $82;
      $86 = $9;
      $87 = ((($86)) + 24|0);
      $88 = ((($87)) + 4|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = ($89|0)==(0|0);
      if (!($90)) {
       $91 = HEAP32[$13>>2]|0;
       $92 = $10;
       $93 = (($92) + ($91)|0);
       $10 = $93;
       $94 = $10;
       $95 = $5;
       $96 = $94;
       $97 = $95;
       $98 = (($96) - ($97))|0;
       $99 = $6;
       $100 = ($98|0)!=($99|0);
       if ($100) {
        label = 11;
       } else {
        $101 = $9;
        $4 = $101;
        $104 = $4;
        STACKTOP = sp;return ($104|0);
       }
      }
     }
    }
   }
  }
 }
 if ((label|0) == 11) {
  $102 = HEAP32[2410]|0;
  (_fprintf($102,20478,$vararg_buffer)|0);
 }
 $103 = $9;
 _free($103);
 $4 = 0;
 $104 = $4;
 STACKTOP = sp;return ($104|0);
}
function _cram_decoder_init($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $6;
 $12 = ($11>>>0)>=(0);
 $13 = $6;
 $14 = ($13>>>0)<(10);
 $or$cond = $12 & $14;
 if ($or$cond) {
  $15 = $6;
  $16 = (9248 + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $6;
   $20 = (9248 + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $7;
   $23 = $8;
   $24 = $9;
   $25 = $10;
   $26 = (FUNCTION_TABLE_iiiii[$21 & 31]($22,$23,$24,$25)|0);
   $5 = $26;
   $30 = $5;
   STACKTOP = sp;return ($30|0);
  }
 }
 $27 = HEAP32[2410]|0;
 $28 = $6;
 $29 = (_cram_encoding2str($28)|0);
 HEAP32[$vararg_buffer>>2] = $29;
 (_fprintf($27,20518,$vararg_buffer)|0);
 $5 = 0;
 $30 = $5;
 STACKTOP = sp;return ($30|0);
}
function _cram_encoding2str($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 do {
  switch ($3|0) {
  case 0:  {
   $1 = 20550;
   break;
  }
  case 1:  {
   $1 = 20555;
   break;
  }
  case 2:  {
   $1 = 20564;
   break;
  }
  case 3:  {
   $1 = 20571;
   break;
  }
  case 4:  {
   $1 = 20579;
   break;
  }
  case 5:  {
   $1 = 20594;
   break;
  }
  case 6:  {
   $1 = 20610;
   break;
  }
  case 7:  {
   $1 = 20615;
   break;
  }
  case 8:  {
   $1 = 20622;
   break;
  }
  case 9:  {
   $1 = 20634;
   break;
  }
  default: {
   $1 = 21466;
  }
  }
 } while(0);
 $4 = $1;
 STACKTOP = sp;return ($4|0);
}
function _cram_byte_array_stop_decode_init($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $5;
 $10 = $11;
 $12 = (_malloc(548)|0);
 $9 = $12;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $4 = 0;
  $167 = $4;
  STACKTOP = sp;return ($167|0);
 }
 $14 = $9;
 HEAP32[$14>>2] = 5;
 $15 = $7;
 switch ($15|0) {
 case 5:  {
  $16 = $9;
  $17 = ((($16)) + 12|0);
  HEAP32[$17>>2] = 58;
  break;
 }
 case 4:  {
  $18 = $9;
  $19 = ((($18)) + 12|0);
  HEAP32[$19>>2] = 59;
  break;
 }
 default: {
  $20 = HEAP32[2410]|0;
  (_fprintf($20,20640,$vararg_buffer)|0);
  $21 = $9;
  _free($21);
  $4 = 0;
  $167 = $4;
  STACKTOP = sp;return ($167|0);
 }
 }
 $22 = $9;
 $23 = ((($22)) + 8|0);
 HEAP32[$23>>2] = 60;
 $24 = $10;
 $25 = ((($24)) + 1|0);
 $10 = $25;
 $26 = HEAP8[$24>>0]|0;
 $27 = $9;
 $28 = ((($27)) + 24|0);
 HEAP8[$28>>0] = $26;
 $29 = $8;
 $30 = $29 >> 8;
 $31 = ($30|0)==(1);
 $32 = $10;
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 if ($31) {
  $35 = $10;
  $36 = ((($35)) + 1|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = $38 << 8;
  $40 = (($34) + ($39))|0;
  $41 = $10;
  $42 = ((($41)) + 2|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = $44 << 16;
  $46 = (($40) + ($45))|0;
  $47 = $10;
  $48 = ((($47)) + 3|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = $50 << 24;
  $52 = (($46) + ($51))|0;
  $53 = $9;
  $54 = ((($53)) + 24|0);
  $55 = ((($54)) + 4|0);
  HEAP32[$55>>2] = $52;
  $56 = $10;
  $57 = ((($56)) + 4|0);
  $10 = $57;
 } else {
  $58 = ($34|0)<(128);
  $59 = $10;
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  do {
   if ($58) {
    $62 = $9;
    $63 = ((($62)) + 24|0);
    $64 = ((($63)) + 4|0);
    HEAP32[$64>>2] = $61;
    $156 = 1;
   } else {
    $65 = ($61|0)<(192);
    $66 = $10;
    $67 = HEAP8[$66>>0]|0;
    $68 = $67&255;
    if ($65) {
     $69 = $68 << 8;
     $70 = $10;
     $71 = ((($70)) + 1|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $72&255;
     $74 = $69 | $73;
     $75 = $74 & 16383;
     $76 = $9;
     $77 = ((($76)) + 24|0);
     $78 = ((($77)) + 4|0);
     HEAP32[$78>>2] = $75;
     $156 = 2;
     break;
    }
    $79 = ($68|0)<(224);
    $80 = $10;
    $81 = HEAP8[$80>>0]|0;
    $82 = $81&255;
    if ($79) {
     $83 = $82 << 16;
     $84 = $10;
     $85 = ((($84)) + 1|0);
     $86 = HEAP8[$85>>0]|0;
     $87 = $86&255;
     $88 = $87 << 8;
     $89 = $83 | $88;
     $90 = $10;
     $91 = ((($90)) + 2|0);
     $92 = HEAP8[$91>>0]|0;
     $93 = $92&255;
     $94 = $89 | $93;
     $95 = $94 & 2097151;
     $96 = $9;
     $97 = ((($96)) + 24|0);
     $98 = ((($97)) + 4|0);
     HEAP32[$98>>2] = $95;
     $156 = 3;
     break;
    }
    $99 = ($82|0)<(240);
    $100 = $10;
    $101 = HEAP8[$100>>0]|0;
    $102 = $101&255;
    if ($99) {
     $103 = $102 << 24;
     $104 = $10;
     $105 = ((($104)) + 1|0);
     $106 = HEAP8[$105>>0]|0;
     $107 = $106&255;
     $108 = $107 << 16;
     $109 = $103 | $108;
     $110 = $10;
     $111 = ((($110)) + 2|0);
     $112 = HEAP8[$111>>0]|0;
     $113 = $112&255;
     $114 = $113 << 8;
     $115 = $109 | $114;
     $116 = $10;
     $117 = ((($116)) + 3|0);
     $118 = HEAP8[$117>>0]|0;
     $119 = $118&255;
     $120 = $115 | $119;
     $121 = $120 & 268435455;
     $122 = $9;
     $123 = ((($122)) + 24|0);
     $124 = ((($123)) + 4|0);
     HEAP32[$124>>2] = $121;
     $156 = 4;
     break;
    } else {
     $125 = $102 & 15;
     $126 = $125 << 28;
     $127 = $10;
     $128 = ((($127)) + 1|0);
     $129 = HEAP8[$128>>0]|0;
     $130 = $129&255;
     $131 = $130 << 20;
     $132 = $126 | $131;
     $133 = $10;
     $134 = ((($133)) + 2|0);
     $135 = HEAP8[$134>>0]|0;
     $136 = $135&255;
     $137 = $136 << 12;
     $138 = $132 | $137;
     $139 = $10;
     $140 = ((($139)) + 3|0);
     $141 = HEAP8[$140>>0]|0;
     $142 = $141&255;
     $143 = $142 << 4;
     $144 = $138 | $143;
     $145 = $10;
     $146 = ((($145)) + 4|0);
     $147 = HEAP8[$146>>0]|0;
     $148 = $147&255;
     $149 = $148 & 15;
     $150 = $144 | $149;
     $151 = $9;
     $152 = ((($151)) + 24|0);
     $153 = ((($152)) + 4|0);
     HEAP32[$153>>2] = $150;
     $156 = 5;
     break;
    }
   }
  } while(0);
  $154 = $10;
  $155 = (($154) + ($156)|0);
  $10 = $155;
 }
 $157 = $10;
 $158 = $5;
 $159 = $157;
 $160 = $158;
 $161 = (($159) - ($160))|0;
 $162 = $6;
 $163 = ($161|0)!=($162|0);
 if ($163) {
  $164 = HEAP32[2410]|0;
  (_fprintf($164,20690,$vararg_buffer1)|0);
  $165 = $9;
  _free($165);
  $4 = 0;
  $167 = $4;
  STACKTOP = sp;return ($167|0);
 } else {
  $166 = $9;
  $4 = $166;
  $167 = $4;
  STACKTOP = sp;return ($167|0);
 }
 return (0)|0;
}
function _cram_byte_array_stop_decode_block($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0.0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $18 = $9;
 $12 = $18;
 $19 = $6;
 $20 = $7;
 $21 = ((($20)) + 24|0);
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (_cram_get_block_by_id($19,$23)|0);
 $11 = $24;
 $25 = $11;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  $27 = $10;
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0);
  $30 = $29 ? -1 : 0;
  $5 = $30;
  $223 = $5;
  STACKTOP = sp;return ($223|0);
 }
 $31 = $11;
 $32 = ((($31)) + 28|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $11;
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($33|0)>=($36|0);
 if ($37) {
  $5 = -1;
  $223 = $5;
  STACKTOP = sp;return ($223|0);
 }
 $38 = $11;
 $39 = ((($38)) + 32|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $11;
 $42 = ((($41)) + 28|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($40) + ($43)|0);
 $13 = $44;
 $45 = $11;
 $46 = ((($45)) + 32|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $11;
 $49 = ((($48)) + 20|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($47) + ($50)|0);
 $15 = $51;
 $52 = $12;
 $53 = ((($52)) + 40|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $12;
 $56 = ((($55)) + 32|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) + ($54)|0);
 $14 = $58;
 $59 = $7;
 $60 = ((($59)) + 24|0);
 $61 = HEAP8[$60>>0]|0;
 $16 = $61;
 $62 = $15;
 $63 = $13;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = $12;
 $68 = ((($67)) + 36|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $12;
 $71 = ((($70)) + 40|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($69) - ($72))|0;
 $74 = ($66>>>0)<($73>>>0);
 L9: do {
  if ($74) {
   while(1) {
    $75 = $13;
    $76 = $15;
    $77 = ($75|0)!=($76|0);
    if (!($77)) {
     break;
    }
    $78 = $13;
    $79 = HEAP8[$78>>0]|0;
    $80 = $79 << 24 >> 24;
    $81 = $16;
    $82 = $81 << 24 >> 24;
    $83 = ($80|0)!=($82|0);
    if (!($83)) {
     break;
    }
    $84 = $13;
    $85 = ((($84)) + 1|0);
    $13 = $85;
    $86 = HEAP8[$84>>0]|0;
    $87 = $14;
    $88 = ((($87)) + 1|0);
    $14 = $88;
    HEAP8[$87>>0] = $86;
   }
   $89 = $14;
   $90 = $12;
   $91 = ((($90)) + 32|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = $89;
   $94 = $92;
   $95 = (($93) - ($94))|0;
   $96 = $12;
   $97 = ((($96)) + 40|0);
   HEAP32[$97>>2] = $95;
  } else {
   $98 = $13;
   $17 = $98;
   while(1) {
    $99 = $13;
    $100 = $15;
    $101 = ($99|0)!=($100|0);
    if (!($101)) {
     break;
    }
    $102 = $13;
    $103 = HEAP8[$102>>0]|0;
    $104 = $103 << 24 >> 24;
    $105 = $16;
    $106 = $105 << 24 >> 24;
    $107 = ($104|0)!=($106|0);
    if (!($107)) {
     break;
    }
    $108 = $13;
    $109 = ((($108)) + 1|0);
    $13 = $109;
   }
   while(1) {
    $110 = $12;
    $111 = ((($110)) + 36|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $12;
    $114 = ((($113)) + 40|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = $13;
    $117 = $17;
    $118 = $116;
    $119 = $117;
    $120 = (($118) - ($119))|0;
    $121 = (($115) + ($120))|0;
    $122 = ($112>>>0)<=($121>>>0);
    $123 = $12;
    if (!($122)) {
     break;
    }
    $124 = ((($123)) + 36|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = ($125|0)!=(0);
    if ($126) {
     $127 = $12;
     $128 = ((($127)) + 36|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (+($129>>>0));
     $131 = $130 * 1.5;
     $133 = $131;
    } else {
     $133 = 1024.0;
    }
    $132 = (~~(($133))>>>0);
    $134 = $12;
    $135 = ((($134)) + 36|0);
    HEAP32[$135>>2] = $132;
    $136 = $12;
    $137 = ((($136)) + 32|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = $12;
    $140 = ((($139)) + 36|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (_realloc($138,$141)|0);
    $143 = $12;
    $144 = ((($143)) + 32|0);
    HEAP32[$144>>2] = $142;
   }
   $145 = ((($123)) + 40|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = $12;
   $148 = ((($147)) + 32|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = (($149) + ($146)|0);
   $151 = $17;
   $152 = $13;
   $153 = $17;
   $154 = $152;
   $155 = $153;
   $156 = (($154) - ($155))|0;
   _memcpy(($150|0),($151|0),($156|0))|0;
   $157 = $13;
   $158 = $17;
   $159 = $157;
   $160 = $158;
   $161 = (($159) - ($160))|0;
   $162 = $12;
   $163 = ((($162)) + 40|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = (($164) + ($161))|0;
   HEAP32[$163>>2] = $165;
   while(1) {
    $166 = $12;
    $167 = ((($166)) + 36|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = $12;
    $170 = ((($169)) + 40|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = $13;
    $173 = $17;
    $174 = $172;
    $175 = $173;
    $176 = (($174) - ($175))|0;
    $177 = (($171) + ($176))|0;
    $178 = ($168>>>0)<=($177>>>0);
    if (!($178)) {
     break L9;
    }
    $179 = $12;
    $180 = ((($179)) + 36|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = ($181|0)!=(0);
    if ($182) {
     $183 = $12;
     $184 = ((($183)) + 36|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = (+($185>>>0));
     $187 = $186 * 1.5;
     $189 = $187;
    } else {
     $189 = 1024.0;
    }
    $188 = (~~(($189))>>>0);
    $190 = $12;
    $191 = ((($190)) + 36|0);
    HEAP32[$191>>2] = $188;
    $192 = $12;
    $193 = ((($192)) + 32|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = $12;
    $196 = ((($195)) + 36|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = (_realloc($194,$197)|0);
    $199 = $12;
    $200 = ((($199)) + 32|0);
    HEAP32[$200>>2] = $198;
   }
  }
 } while(0);
 $201 = $13;
 $202 = $11;
 $203 = ((($202)) + 32|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = $11;
 $206 = ((($205)) + 28|0);
 $207 = HEAP32[$206>>2]|0;
 $208 = (($204) + ($207)|0);
 $209 = $201;
 $210 = $208;
 $211 = (($209) - ($210))|0;
 $212 = $10;
 HEAP32[$212>>2] = $211;
 $213 = $13;
 $214 = $11;
 $215 = ((($214)) + 32|0);
 $216 = HEAP32[$215>>2]|0;
 $217 = $213;
 $218 = $216;
 $219 = (($217) - ($218))|0;
 $220 = (($219) + 1)|0;
 $221 = $11;
 $222 = ((($221)) + 28|0);
 HEAP32[$222>>2] = $220;
 $5 = 0;
 $223 = $5;
 STACKTOP = sp;return ($223|0);
}
function _cram_byte_array_stop_decode_char($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = 0;
 $14 = $6;
 $15 = $7;
 $16 = ((($15)) + 24|0);
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_cram_get_block_by_id($14,$18)|0);
 $11 = $19;
 $20 = $11;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  $22 = $10;
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0);
  $25 = $24 ? -1 : 0;
  $5 = $25;
  $109 = $5;
  STACKTOP = sp;return ($109|0);
 }
 $26 = $11;
 $27 = ((($26)) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $11;
 $30 = ((($29)) + 20|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($28|0)>=($31|0);
 if ($32) {
  $5 = -1;
  $109 = $5;
  STACKTOP = sp;return ($109|0);
 }
 $33 = $11;
 $34 = ((($33)) + 32|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $11;
 $37 = ((($36)) + 28|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($35) + ($38)|0);
 $12 = $39;
 $40 = $9;
 $41 = ($40|0)!=(0|0);
 L9: do {
  if ($41) {
   while(1) {
    $42 = $12;
    $43 = HEAP8[$42>>0]|0;
    $13 = $43;
    $44 = $43 << 24 >> 24;
    $45 = $7;
    $46 = ((($45)) + 24|0);
    $47 = HEAP8[$46>>0]|0;
    $48 = $47 << 24 >> 24;
    $49 = ($44|0)!=($48|0);
    if (!($49)) {
     break L9;
    }
    $50 = $12;
    $51 = $11;
    $52 = ((($51)) + 32|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $50;
    $55 = $53;
    $56 = (($54) - ($55))|0;
    $57 = $11;
    $58 = ((($57)) + 20|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($56|0)>=($59|0);
    if ($60) {
     break;
    }
    $61 = $13;
    $62 = $9;
    $63 = ((($62)) + 1|0);
    $9 = $63;
    HEAP8[$62>>0] = $61;
    $64 = $12;
    $65 = ((($64)) + 1|0);
    $12 = $65;
   }
   $5 = -1;
   $109 = $5;
   STACKTOP = sp;return ($109|0);
  } else {
   while(1) {
    $66 = $12;
    $67 = HEAP8[$66>>0]|0;
    $13 = $67;
    $68 = $67 << 24 >> 24;
    $69 = $7;
    $70 = ((($69)) + 24|0);
    $71 = HEAP8[$70>>0]|0;
    $72 = $71 << 24 >> 24;
    $73 = ($68|0)!=($72|0);
    if (!($73)) {
     break L9;
    }
    $74 = $12;
    $75 = $11;
    $76 = ((($75)) + 32|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = $74;
    $79 = $77;
    $80 = (($78) - ($79))|0;
    $81 = $11;
    $82 = ((($81)) + 20|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($80|0)>=($83|0);
    if ($84) {
     break;
    }
    $85 = $12;
    $86 = ((($85)) + 1|0);
    $12 = $86;
   }
   $5 = -1;
   $109 = $5;
   STACKTOP = sp;return ($109|0);
  }
 } while(0);
 $87 = $12;
 $88 = $11;
 $89 = ((($88)) + 32|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $11;
 $92 = ((($91)) + 28|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = (($90) + ($93)|0);
 $95 = $87;
 $96 = $94;
 $97 = (($95) - ($96))|0;
 $98 = $10;
 HEAP32[$98>>2] = $97;
 $99 = $12;
 $100 = $11;
 $101 = ((($100)) + 32|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = $99;
 $104 = $102;
 $105 = (($103) - ($104))|0;
 $106 = (($105) + 1)|0;
 $107 = $11;
 $108 = ((($107)) + 28|0);
 HEAP32[$108>>2] = $106;
 $5 = 0;
 $109 = $5;
 STACKTOP = sp;return ($109|0);
}
function _cram_byte_array_stop_decode_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  _free($4);
 }
 STACKTOP = sp;return;
}
function _cram_codec_to_id($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $5 = -2;
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 switch ($7|0) {
 case 3:  {
  $8 = $2;
  $9 = ((($8)) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(1);
  $12 = $11 ? -2 : -1;
  $4 = $12;
  break;
 }
 case 9: case 8: case 7: case 6: case 2:  {
  $4 = -1;
  break;
 }
 case 1:  {
  $13 = $2;
  $14 = ((($13)) + 24|0);
  $15 = HEAP32[$14>>2]|0;
  $4 = $15;
  break;
 }
 case 4:  {
  $16 = $2;
  $17 = ((($16)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_cram_codec_to_id($18,0)|0);
  $4 = $19;
  $20 = $2;
  $21 = ((($20)) + 24|0);
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_cram_codec_to_id($23,0)|0);
  $5 = $24;
  break;
 }
 case 5:  {
  $25 = $2;
  $26 = ((($25)) + 24|0);
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $4 = $28;
  break;
 }
 case 0:  {
  $4 = -2;
  break;
 }
 default: {
  $29 = HEAP32[2410]|0;
  $30 = $2;
  $31 = HEAP32[$30>>2]|0;
  HEAP32[$vararg_buffer>>2] = $31;
  (_fprintf($29,20731,$vararg_buffer)|0);
  $4 = -1;
 }
 }
 $32 = $3;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  $36 = $4;
  STACKTOP = sp;return ($36|0);
 }
 $34 = $5;
 $35 = $3;
 HEAP32[$35>>2] = $34;
 $36 = $4;
 STACKTOP = sp;return ($36|0);
}
function _t_pool_next_result_locked($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = 0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $1;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)==($13|0);
  if ($14) {
   break;
  }
  $15 = $2;
  $3 = $15;
  $16 = $2;
  $17 = HEAP32[$16>>2]|0;
  $2 = $17;
 }
 $18 = $2;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  $49 = $2;
  STACKTOP = sp;return ($49|0);
 }
 $20 = $1;
 $21 = HEAP32[$20>>2]|0;
 $22 = $2;
 $23 = ($21|0)==($22|0);
 $24 = $2;
 $25 = HEAP32[$24>>2]|0;
 if ($23) {
  $26 = $1;
  HEAP32[$26>>2] = $25;
 } else {
  $27 = $3;
  HEAP32[$27>>2] = $25;
 }
 $28 = $1;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $2;
 $32 = ($30|0)==($31|0);
 if ($32) {
  $33 = $3;
  $34 = $1;
  $35 = ((($34)) + 4|0);
  HEAP32[$35>>2] = $33;
 }
 $36 = $1;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)!=(0|0);
 if (!($38)) {
  $39 = $1;
  $40 = ((($39)) + 4|0);
  HEAP32[$40>>2] = 0;
 }
 $41 = $1;
 $42 = ((($41)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + 1)|0;
 HEAP32[$42>>2] = $44;
 $45 = $1;
 $46 = ((($45)) + 16|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + -1)|0;
 HEAP32[$46>>2] = $48;
 $49 = $2;
 STACKTOP = sp;return ($49|0);
}
function _t_pool_next_result_wait($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 8|0;
 $4 = sp;
 $1 = $0;
 $5 = $1;
 $6 = ((($5)) + 24|0);
 (_pthread_mutex_lock(($6|0))|0);
 while(1) {
  $7 = $1;
  $8 = (_t_pool_next_result_locked($7)|0);
  $2 = $8;
  $9 = ($8|0)!=(0|0);
  $10 = $9 ^ 1;
  if (!($10)) {
   break;
  }
  (_gettimeofday(($3|0),(0|0))|0);
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + 10)|0;
  HEAP32[$4>>2] = $12;
  $13 = ((($3)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14*1000)|0;
  $16 = ((($4)) + 4|0);
  HEAP32[$16>>2] = $15;
  $17 = $1;
  $18 = ((($17)) + 52|0);
  $19 = $1;
  $20 = ((($19)) + 24|0);
  (_pthread_cond_timedwait(($18|0),($20|0),($4|0))|0);
 }
 $21 = $1;
 $22 = ((($21)) + 24|0);
 (_pthread_mutex_unlock(($22|0))|0);
 $23 = $2;
 STACKTOP = sp;return ($23|0);
}
function _t_pool_results_queue_empty($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 24|0);
 (_pthread_mutex_lock(($4|0))|0);
 $5 = $1;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $1;
  $10 = ((($9)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  $14 = $12;
 } else {
  $14 = 0;
 }
 $13 = $14&1;
 $2 = $13;
 $15 = $1;
 $16 = ((($15)) + 24|0);
 (_pthread_mutex_unlock(($16|0))|0);
 $17 = $2;
 STACKTOP = sp;return ($17|0);
}
function _t_pool_results_queue_len($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 24|0);
 (_pthread_mutex_lock(($4|0))|0);
 $5 = $1;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $2 = $7;
 $8 = $1;
 $9 = ((($8)) + 24|0);
 (_pthread_mutex_unlock(($9|0))|0);
 $10 = $2;
 STACKTOP = sp;return ($10|0);
}
function _t_pool_results_queue_sz($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 24|0);
 (_pthread_mutex_lock(($4|0))|0);
 $5 = $1;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) + ($10))|0;
 $2 = $11;
 $12 = $1;
 $13 = ((($12)) + 24|0);
 (_pthread_mutex_unlock(($13|0))|0);
 $14 = $2;
 STACKTOP = sp;return ($14|0);
}
function _t_pool_delete_result($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $3;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $2;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  if ($11) {
   $12 = $2;
   $13 = ((($12)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   _free($14);
  }
 }
 $15 = $2;
 _free($15);
 STACKTOP = sp;return;
}
function _t_results_queue_init() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(100)|0);
 $0 = $1;
 $2 = $0;
 $3 = ((($2)) + 24|0);
 (_pthread_mutex_init(($3|0),(0|0))|0);
 $4 = $0;
 $5 = ((($4)) + 52|0);
 (_pthread_cond_init(($5|0),(0|0))|0);
 $6 = $0;
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = ((($9)) + 8|0);
 HEAP32[$10>>2] = 0;
 $11 = $0;
 $12 = ((($11)) + 12|0);
 HEAP32[$12>>2] = 0;
 $13 = $0;
 $14 = ((($13)) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = $0;
 $16 = ((($15)) + 20|0);
 HEAP32[$16>>2] = 0;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _t_pool_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = (_malloc(232)|0);
 $6 = $8;
 $9 = $3;
 $10 = $6;
 HEAP32[$10>>2] = $9;
 $11 = $4;
 $12 = $6;
 $13 = ((($12)) + 24|0);
 HEAP32[$13>>2] = $11;
 $14 = $6;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = 0;
 $16 = $6;
 $17 = ((($16)) + 8|0);
 HEAP32[$17>>2] = 0;
 $18 = $6;
 $19 = ((($18)) + 12|0);
 HEAP32[$19>>2] = 0;
 $20 = $6;
 $21 = ((($20)) + 20|0);
 HEAP32[$21>>2] = 0;
 $22 = $6;
 $23 = ((($22)) + 16|0);
 HEAP32[$23>>2] = 0;
 $24 = $6;
 $25 = ((($24)) + 204|0);
 HEAP32[$25>>2] = 0;
 $26 = $4;
 $27 = ($26*72)|0;
 $28 = (_malloc($27)|0);
 $29 = $6;
 $30 = ((($29)) + 28|0);
 HEAP32[$30>>2] = $28;
 $31 = $6;
 $32 = ((($31)) + 32|0);
 (_pthread_mutex_init(($32|0),(0|0))|0);
 $33 = $6;
 $34 = ((($33)) + 60|0);
 (_pthread_cond_init(($34|0),(0|0))|0);
 $35 = $6;
 $36 = ((($35)) + 156|0);
 (_pthread_cond_init(($36|0),(0|0))|0);
 $37 = $6;
 $38 = ((($37)) + 32|0);
 (_pthread_mutex_lock(($38|0))|0);
 $39 = $4;
 $40 = $39<<2;
 $41 = (_malloc($40)|0);
 $42 = $6;
 $43 = ((($42)) + 204|0);
 HEAP32[$43>>2] = $41;
 $44 = ($41|0)!=(0|0);
 if (!($44)) {
  $2 = 0;
  $83 = $2;
  STACKTOP = sp;return ($83|0);
 }
 $45 = $6;
 $46 = ((($45)) + 208|0);
 HEAP32[$46>>2] = -1;
 $5 = 0;
 while(1) {
  $47 = $5;
  $48 = $4;
  $49 = ($47|0)<($48|0);
  if (!($49)) {
   label = 8;
   break;
  }
  $50 = $5;
  $51 = $6;
  $52 = ((($51)) + 28|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + (($50*72)|0)|0);
  $7 = $54;
  $55 = $5;
  $56 = $6;
  $57 = ((($56)) + 204|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + ($55<<2)|0);
  HEAP32[$59>>2] = 0;
  $60 = $6;
  $61 = $7;
  HEAP32[$61>>2] = $60;
  $62 = $5;
  $63 = $7;
  $64 = ((($63)) + 4|0);
  HEAP32[$64>>2] = $62;
  $65 = $7;
  $66 = ((($65)) + 64|0);
  $67 = $66;
  $68 = $67;
  HEAP32[$68>>2] = 0;
  $69 = (($67) + 4)|0;
  $70 = $69;
  HEAP32[$70>>2] = 0;
  $71 = $7;
  $72 = ((($71)) + 12|0);
  (_pthread_cond_init(($72|0),(0|0))|0);
  $73 = $7;
  $74 = ((($73)) + 8|0);
  $75 = $7;
  $76 = (_pthread_create(($74|0),(0|0),(61|0),($75|0))|0);
  $77 = (0)!=($76|0);
  if ($77) {
   label = 6;
   break;
  }
  $78 = $5;
  $79 = (($78) + 1)|0;
  $5 = $79;
 }
 if ((label|0) == 6) {
  $2 = 0;
  $83 = $2;
  STACKTOP = sp;return ($83|0);
 }
 else if ((label|0) == 8) {
  $80 = $6;
  $81 = ((($80)) + 32|0);
  (_pthread_mutex_unlock(($81|0))|0);
  $82 = $6;
  $2 = $82;
  $83 = $2;
  STACKTOP = sp;return ($83|0);
 }
 return (0)|0;
}
function _t_pool_worker($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $6 = $1;
 $2 = $6;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $3 = $8;
 while(1) {
  $9 = $3;
  $10 = ((($9)) + 32|0);
  (_pthread_mutex_lock(($10|0))|0);
  while(1) {
   $11 = $3;
   $12 = ((($11)) + 16|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)!=(0|0);
   if ($14) {
    $127 = 0;
   } else {
    $15 = $3;
    $16 = ((($15)) + 12|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)!=(0);
    $19 = $18 ^ 1;
    $127 = $19;
   }
   $20 = $3;
   if (!($127)) {
    break;
   }
   $21 = ((($20)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + 1)|0;
   HEAP32[$21>>2] = $23;
   $24 = $3;
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0);
   if ($27) {
    $28 = $3;
    $29 = ((($28)) + 60|0);
    (_pthread_cond_signal(($29|0))|0);
   }
   $30 = $3;
   $31 = ((($30)) + 208|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(-1);
   if ($33) {
    label = 10;
   } else {
    $34 = $3;
    $35 = ((($34)) + 208|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = $2;
    $38 = ((($37)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($36|0)>($39|0);
    if ($40) {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    label = 0;
    $41 = $2;
    $42 = ((($41)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = $3;
    $45 = ((($44)) + 208|0);
    HEAP32[$45>>2] = $43;
   }
   $46 = $2;
   $47 = ((($46)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $3;
   $50 = ((($49)) + 204|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + ($48<<2)|0);
   HEAP32[$52>>2] = 1;
   $53 = $2;
   $54 = ((($53)) + 12|0);
   $55 = $3;
   $56 = ((($55)) + 32|0);
   (_pthread_cond_wait(($54|0),($56|0))|0);
   $57 = $2;
   $58 = ((($57)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $3;
   $61 = ((($60)) + 204|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (($62) + ($59<<2)|0);
   HEAP32[$63>>2] = 0;
   $64 = $3;
   $65 = ((($64)) + 208|0);
   HEAP32[$65>>2] = -1;
   $5 = 0;
   while(1) {
    $66 = $5;
    $67 = $3;
    $68 = ((($67)) + 24|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($66|0)<($69|0);
    if (!($70)) {
     break;
    }
    $71 = $5;
    $72 = $3;
    $73 = ((($72)) + 204|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (($74) + ($71<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)!=(0);
    $78 = $5;
    if ($77) {
     label = 14;
     break;
    }
    $81 = (($78) + 1)|0;
    $5 = $81;
   }
   if ((label|0) == 14) {
    label = 0;
    $79 = $3;
    $80 = ((($79)) + 208|0);
    HEAP32[$80>>2] = $78;
   }
   $82 = $3;
   $83 = ((($82)) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + -1)|0;
   HEAP32[$83>>2] = $85;
  }
  $86 = ((($20)) + 12|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ($87|0)!=(0);
  $89 = $3;
  if ($88) {
   break;
  }
  $91 = ((($89)) + 16|0);
  $92 = HEAP32[$91>>2]|0;
  $4 = $92;
  $93 = $4;
  $94 = ((($93)) + 8|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $3;
  $97 = ((($96)) + 16|0);
  HEAP32[$97>>2] = $95;
  $98 = ($95|0)!=(0|0);
  if (!($98)) {
   $99 = $3;
   $100 = ((($99)) + 20|0);
   HEAP32[$100>>2] = 0;
  }
  $101 = $3;
  $102 = ((($101)) + 4|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (($103) + -1)|0;
  HEAP32[$102>>2] = $104;
  $105 = $3;
  $106 = HEAP32[$105>>2]|0;
  $107 = ($103|0)>=($106|0);
  if ($107) {
   $108 = $3;
   $109 = ((($108)) + 156|0);
   (_pthread_cond_signal(($109|0))|0);
  }
  $110 = $3;
  $111 = ((($110)) + 4|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($112|0)==(0);
  if ($113) {
   $114 = $3;
   $115 = ((($114)) + 60|0);
   (_pthread_cond_signal(($115|0))|0);
  }
  $116 = $3;
  $117 = ((($116)) + 32|0);
  (_pthread_mutex_unlock(($117|0))|0);
  $118 = $4;
  $119 = $4;
  $120 = HEAP32[$119>>2]|0;
  $121 = $4;
  $122 = ((($121)) + 4|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (FUNCTION_TABLE_ii[$120 & 63]($123)|0);
  (_t_pool_add_result($118,$124)|0);
  $125 = $4;
  ;HEAP32[$125>>2]=3149642683|0;HEAP32[$125+4>>2]=3149642683|0;HEAP32[$125+8>>2]=3149642683|0;HEAP32[$125+12>>2]=3149642683|0;HEAP32[$125+16>>2]=3149642683|0;HEAP32[$125+20>>2]=3149642683|0;
  $126 = $4;
  _free($126);
 }
 $90 = ((($89)) + 32|0);
 (_pthread_mutex_unlock(($90|0))|0);
 _pthread_exit((0|0));
 // unreachable;
 return (0)|0;
}
function _t_pool_add_result($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $10 = $5;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  $2 = 0;
  $49 = $2;
  STACKTOP = sp;return ($49|0);
 }
 $12 = (_malloc(12)|0);
 $6 = $12;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $2 = -1;
  $49 = $2;
  STACKTOP = sp;return ($49|0);
 }
 $14 = $6;
 HEAP32[$14>>2] = 0;
 $15 = $4;
 $16 = $6;
 $17 = ((($16)) + 8|0);
 HEAP32[$17>>2] = $15;
 $18 = $3;
 $19 = ((($18)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $6;
 $22 = ((($21)) + 4|0);
 HEAP32[$22>>2] = $20;
 $23 = $5;
 $24 = ((($23)) + 24|0);
 (_pthread_mutex_lock(($24|0))|0);
 $25 = $5;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 $29 = $6;
 $30 = $5;
 $31 = ((($30)) + 4|0);
 if ($28) {
  $32 = HEAP32[$31>>2]|0;
  HEAP32[$32>>2] = $29;
  $33 = $6;
  $34 = $5;
  $35 = ((($34)) + 4|0);
  HEAP32[$35>>2] = $33;
 } else {
  HEAP32[$31>>2] = $29;
  $36 = $5;
  HEAP32[$36>>2] = $29;
 }
 $37 = $5;
 $38 = ((($37)) + 16|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + 1)|0;
 HEAP32[$38>>2] = $40;
 $41 = $5;
 $42 = ((($41)) + 20|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + -1)|0;
 HEAP32[$42>>2] = $44;
 $45 = $5;
 $46 = ((($45)) + 52|0);
 (_pthread_cond_signal(($46|0))|0);
 $47 = $5;
 $48 = ((($47)) + 24|0);
 (_pthread_mutex_unlock(($48|0))|0);
 $2 = 0;
 $49 = $2;
 STACKTOP = sp;return ($49|0);
}
function _t_pool_dispatch2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $12 = $6;
 $13 = ((($12)) + 32|0);
 (_pthread_mutex_lock(($13|0))|0);
 $14 = $6;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $6;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($16|0)>=($18|0);
 $20 = $10;
 $21 = ($20|0)==(1);
 $or$cond = $19 & $21;
 if ($or$cond) {
  $22 = $6;
  $23 = ((($22)) + 32|0);
  (_pthread_mutex_unlock(($23|0))|0);
  $24 = (___errno_location()|0);
  HEAP32[$24>>2] = 11;
  $5 = -1;
  $113 = $5;
  STACKTOP = sp;return ($113|0);
 }
 $25 = (_malloc(24)|0);
 $11 = $25;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  $5 = -1;
  $113 = $5;
  STACKTOP = sp;return ($113|0);
 }
 $27 = $8;
 $28 = $11;
 HEAP32[$28>>2] = $27;
 $29 = $9;
 $30 = $11;
 $31 = ((($30)) + 4|0);
 HEAP32[$31>>2] = $29;
 $32 = $11;
 $33 = ((($32)) + 8|0);
 HEAP32[$33>>2] = 0;
 $34 = $6;
 $35 = $11;
 $36 = ((($35)) + 12|0);
 HEAP32[$36>>2] = $34;
 $37 = $7;
 $38 = $11;
 $39 = ((($38)) + 16|0);
 HEAP32[$39>>2] = $37;
 $40 = $7;
 $41 = ($40|0)!=(0|0);
 if ($41) {
  $42 = $7;
  $43 = ((($42)) + 24|0);
  (_pthread_mutex_lock(($43|0))|0);
  $44 = $7;
  $45 = ((($44)) + 12|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + 1)|0;
  HEAP32[$45>>2] = $47;
  $48 = $11;
  $49 = ((($48)) + 20|0);
  HEAP32[$49>>2] = $46;
  $50 = $7;
  $51 = ((($50)) + 20|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + 1)|0;
  HEAP32[$51>>2] = $53;
  $54 = $7;
  $55 = ((($54)) + 24|0);
  (_pthread_mutex_unlock(($55|0))|0);
 } else {
  $56 = $11;
  $57 = ((($56)) + 20|0);
  HEAP32[$57>>2] = 0;
 }
 $58 = $10;
 $59 = ($58|0)==(0);
 L13: do {
  if ($59) {
   while(1) {
    $60 = $6;
    $61 = ((($60)) + 4|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = $6;
    $64 = HEAP32[$63>>2]|0;
    $65 = ($62|0)>=($64|0);
    if (!($65)) {
     break L13;
    }
    $66 = $6;
    $67 = ((($66)) + 156|0);
    $68 = $6;
    $69 = ((($68)) + 32|0);
    (_pthread_cond_wait(($67|0),($69|0))|0);
   }
  }
 } while(0);
 $70 = $6;
 $71 = ((($70)) + 4|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($72) + 1)|0;
 HEAP32[$71>>2] = $73;
 $74 = $6;
 $75 = ((($74)) + 20|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ($76|0)!=(0|0);
 $78 = $11;
 $79 = $6;
 $80 = ((($79)) + 20|0);
 if ($77) {
  $81 = HEAP32[$80>>2]|0;
  $82 = ((($81)) + 8|0);
  HEAP32[$82>>2] = $78;
  $83 = $11;
  $84 = $6;
  $85 = ((($84)) + 20|0);
  HEAP32[$85>>2] = $83;
 } else {
  HEAP32[$80>>2] = $78;
  $86 = $6;
  $87 = ((($86)) + 16|0);
  HEAP32[$87>>2] = $78;
 }
 $88 = $6;
 $89 = ((($88)) + 208|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ($90|0)>=(0);
 if ($91) {
  $92 = $6;
  $93 = ((($92)) + 4|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $6;
  $96 = ((($95)) + 24|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = $6;
  $99 = ((($98)) + 8|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (($97) - ($100))|0;
  $102 = ($94|0)>($101|0);
  if ($102) {
   $103 = $6;
   $104 = ((($103)) + 208|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $6;
   $107 = ((($106)) + 28|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = (($108) + (($105*72)|0)|0);
   $110 = ((($109)) + 12|0);
   (_pthread_cond_signal(($110|0))|0);
  }
 }
 $111 = $6;
 $112 = ((($111)) + 32|0);
 (_pthread_mutex_unlock(($112|0))|0);
 $5 = 0;
 $113 = $5;
 STACKTOP = sp;return ($113|0);
}
function _pool_create($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_malloc(20)|0);
 $3 = $4;
 $5 = (0|0)==($4|0);
 if ($5) {
  $1 = 0;
  $33 = $1;
  STACKTOP = sp;return ($33|0);
 }
 $6 = $2;
 $7 = (($6) + 4)|0;
 $8 = (($7) - 1)|0;
 $9 = $8 & -4;
 $2 = $9;
 $10 = $2;
 $11 = ($10>>>0)<(4);
 $$ = $11 ? 4 : $9;
 $2 = $$;
 $12 = $2;
 $13 = $3;
 HEAP32[$13>>2] = $12;
 $14 = $3;
 $15 = HEAP32[$14>>2]|0;
 $16 = $15<<10;
 $17 = (_next_power_2($16)|0);
 $18 = (1048576)<($17|0);
 if ($18) {
  $25 = 1048576;
 } else {
  $19 = $3;
  $20 = HEAP32[$19>>2]|0;
  $21 = $20<<10;
  $22 = (_next_power_2($21)|0);
  $25 = $22;
 }
 $23 = $3;
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = $25;
 $26 = $3;
 $27 = ((($26)) + 8|0);
 HEAP32[$27>>2] = 0;
 $28 = $3;
 $29 = ((($28)) + 12|0);
 HEAP32[$29>>2] = 0;
 $30 = $3;
 $31 = ((($30)) + 16|0);
 HEAP32[$31>>2] = 0;
 $32 = $3;
 $1 = $32;
 $33 = $1;
 STACKTOP = sp;return ($33|0);
}
function _next_power_2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (($2) + -1)|0;
 $1 = $3;
 $4 = $1;
 $5 = $4 >>> 1;
 $6 = $1;
 $7 = $6 | $5;
 $1 = $7;
 $8 = $1;
 $9 = $8 >>> 2;
 $10 = $1;
 $11 = $10 | $9;
 $1 = $11;
 $12 = $1;
 $13 = $12 >>> 4;
 $14 = $1;
 $15 = $14 | $13;
 $1 = $15;
 $16 = $1;
 $17 = $16 >>> 8;
 $18 = $1;
 $19 = $18 | $17;
 $1 = $19;
 $20 = $1;
 $21 = $20 >>> 16;
 $22 = $1;
 $23 = $22 | $21;
 $1 = $23;
 $24 = $1;
 $25 = (($24) + 1)|0;
 $1 = $25;
 $26 = $1;
 STACKTOP = sp;return ($26|0);
}
function _pool_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3>>>0)<($6>>>0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $9 = $1;
  $10 = ((($9)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($8<<3)|0);
  $13 = HEAP32[$12>>2]|0;
  _free($13);
  $14 = $2;
  $15 = (($14) + 1)|0;
  $2 = $15;
 }
 $16 = $1;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 _free($18);
 $19 = $1;
 _free($19);
 STACKTOP = sp;return;
}
function _pool_alloc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (0|0)!=($7|0);
 $9 = $2;
 if ($8) {
  $10 = ((($9)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $4 = $11;
  $12 = $2;
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = ((($16)) + 16|0);
  HEAP32[$17>>2] = $15;
  $18 = $4;
  $1 = $18;
  $63 = $1;
  STACKTOP = sp;return ($63|0);
 }
 $19 = ((($9)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $2;
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) - 1)|0;
  $26 = $2;
  $27 = ((($26)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + ($25<<3)|0);
  $3 = $29;
  $30 = $3;
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $2;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($32) + ($34))|0;
  $36 = $2;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($35>>>0)<($38>>>0);
  if ($39) {
   $40 = $3;
   $41 = HEAP32[$40>>2]|0;
   $42 = $3;
   $43 = ((($42)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($41) + ($44)|0);
   $4 = $45;
   $46 = $2;
   $47 = HEAP32[$46>>2]|0;
   $48 = $3;
   $49 = ((($48)) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + ($47))|0;
   HEAP32[$49>>2] = $51;
   $52 = $4;
   $1 = $52;
   $63 = $1;
   STACKTOP = sp;return ($63|0);
  }
 }
 $53 = $2;
 $54 = (_new_pool($53)|0);
 $3 = $54;
 $55 = $3;
 $56 = (0|0)==($55|0);
 if ($56) {
  $1 = 0;
  $63 = $1;
  STACKTOP = sp;return ($63|0);
 } else {
  $57 = $2;
  $58 = HEAP32[$57>>2]|0;
  $59 = $3;
  $60 = ((($59)) + 4|0);
  HEAP32[$60>>2] = $58;
  $61 = $3;
  $62 = HEAP32[$61>>2]|0;
  $1 = $62;
  $63 = $1;
  STACKTOP = sp;return ($63|0);
 }
 return (0)|0;
}
function _new_pool($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7>>>0) / ($9>>>0))&-1;
 $3 = $10;
 $11 = $2;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 1)|0;
 $18 = $17<<3;
 $19 = (_realloc($13,$18)|0);
 $4 = $19;
 $20 = $4;
 $21 = (0|0)==($20|0);
 if ($21) {
  $1 = 0;
  $48 = $1;
  STACKTOP = sp;return ($48|0);
 }
 $22 = $4;
 $23 = $2;
 $24 = ((($23)) + 12|0);
 HEAP32[$24>>2] = $22;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $2;
 $29 = ((($28)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + ($27<<3)|0);
 $4 = $31;
 $32 = $3;
 $33 = $2;
 $34 = HEAP32[$33>>2]|0;
 $35 = Math_imul($32, $34)|0;
 $36 = (_malloc($35)|0);
 $37 = $4;
 HEAP32[$37>>2] = $36;
 $38 = $4;
 $39 = HEAP32[$38>>2]|0;
 $40 = (0|0)==($39|0);
 if ($40) {
  $1 = 0;
  $48 = $1;
  STACKTOP = sp;return ($48|0);
 } else {
  $41 = $4;
  $42 = ((($41)) + 4|0);
  HEAP32[$42>>2] = 0;
  $43 = $2;
  $44 = ((($43)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 1)|0;
  HEAP32[$44>>2] = $46;
  $47 = $4;
  $1 = $47;
  $48 = $1;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function _cram_decode_TD($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 12|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 $7 = $14;
 HEAP32[$10>>2] = 0;
 $15 = (_cram_new_block(0,0)|0);
 $9 = $15;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  $3 = -1;
  $195 = $3;
  STACKTOP = sp;return ($195|0);
 }
 $17 = $4;
 $18 = $5;
 $19 = (_safe_itf8_get_784($17,$18,$10)|0);
 $20 = $4;
 $21 = (($20) + ($19)|0);
 $4 = $21;
 $22 = HEAP32[$10>>2]|0;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  $24 = $6;
  $25 = ((($24)) + 72|0);
  HEAP32[$25>>2] = 0;
  $26 = $6;
  $27 = ((($26)) + 76|0);
  HEAP32[$27>>2] = 0;
  $28 = $9;
  _cram_free_block($28);
  $29 = $4;
  $30 = $7;
  $31 = $29;
  $32 = $30;
  $33 = (($31) - ($32))|0;
  $3 = $33;
  $195 = $3;
  STACKTOP = sp;return ($195|0);
 }
 $34 = HEAP32[$10>>2]|0;
 $35 = ($34|0)<(0);
 if (!($35)) {
  $36 = $5;
  $37 = $4;
  $38 = $36;
  $39 = $37;
  $40 = (($38) - ($39))|0;
  $41 = HEAP32[$10>>2]|0;
  $42 = ($40|0)<($41|0);
  if (!($42)) {
   while(1) {
    $44 = $9;
    $45 = ((($44)) + 36|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $9;
    $48 = ((($47)) + 40|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = HEAP32[$10>>2]|0;
    $51 = (($49) + ($50))|0;
    $52 = ($46>>>0)<=($51>>>0);
    $53 = $9;
    if (!($52)) {
     break;
    }
    $54 = ((($53)) + 36|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ($55|0)!=(0);
    if ($56) {
     $57 = $9;
     $58 = ((($57)) + 36|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (+($59>>>0));
     $61 = $60 * 1.5;
     $63 = $61;
    } else {
     $63 = 1024.0;
    }
    $62 = (~~(($63))>>>0);
    $64 = $9;
    $65 = ((($64)) + 36|0);
    HEAP32[$65>>2] = $62;
    $66 = $9;
    $67 = ((($66)) + 32|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $9;
    $70 = ((($69)) + 36|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (_realloc($68,$71)|0);
    $73 = $9;
    $74 = ((($73)) + 32|0);
    HEAP32[$74>>2] = $72;
   }
   $75 = ((($53)) + 40|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $9;
   $78 = ((($77)) + 32|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (($79) + ($76)|0);
   $81 = $4;
   $82 = HEAP32[$10>>2]|0;
   _memcpy(($80|0),($81|0),($82|0))|0;
   $83 = HEAP32[$10>>2]|0;
   $84 = $9;
   $85 = ((($84)) + 40|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($86) + ($83))|0;
   HEAP32[$85>>2] = $87;
   $88 = HEAP32[$10>>2]|0;
   $89 = $4;
   $90 = (($89) + ($88)|0);
   $4 = $90;
   $91 = $4;
   $92 = $7;
   $93 = $91;
   $94 = $92;
   $95 = (($93) - ($94))|0;
   $13 = $95;
   $96 = $9;
   $97 = ((($96)) + 40|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (($98) - 1)|0;
   $100 = $9;
   $101 = ((($100)) + 32|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = (($102) + ($99)|0);
   $104 = HEAP8[$103>>0]|0;
   $105 = ($104<<24>>24)!=(0);
   if ($105) {
    while(1) {
     $106 = $9;
     $107 = ((($106)) + 36|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = $9;
     $110 = ((($109)) + 40|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = (($111) + 1)|0;
     $113 = ($108>>>0)<=($112>>>0);
     $114 = $9;
     if (!($113)) {
      break;
     }
     $115 = ((($114)) + 36|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)!=(0);
     if ($117) {
      $118 = $9;
      $119 = ((($118)) + 36|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = (+($120>>>0));
      $122 = $121 * 1.5;
      $124 = $122;
     } else {
      $124 = 1024.0;
     }
     $123 = (~~(($124))>>>0);
     $125 = $9;
     $126 = ((($125)) + 36|0);
     HEAP32[$126>>2] = $123;
     $127 = $9;
     $128 = ((($127)) + 32|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = $9;
     $131 = ((($130)) + 36|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (_realloc($129,$132)|0);
     $134 = $9;
     $135 = ((($134)) + 32|0);
     HEAP32[$135>>2] = $133;
    }
    $136 = ((($114)) + 40|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = (($137) + 1)|0;
    HEAP32[$136>>2] = $138;
    $139 = $9;
    $140 = ((($139)) + 32|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (($141) + ($137)|0);
    HEAP8[$142>>0] = 0;
   }
   $143 = $9;
   $144 = ((($143)) + 32|0);
   $145 = HEAP32[$144>>2]|0;
   $8 = $145;
   $12 = 0;
   $11 = 0;
   L27: while(1) {
    $146 = $12;
    $147 = $9;
    $148 = ((($147)) + 40|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($146>>>0)<($149>>>0);
    $151 = $11;
    if (!($150)) {
     break;
    }
    $152 = (($151) + 1)|0;
    $11 = $152;
    while(1) {
     $153 = $12;
     $154 = $8;
     $155 = (($154) + ($153)|0);
     $156 = HEAP8[$155>>0]|0;
     $157 = ($156<<24>>24)!=(0);
     $158 = $12;
     $159 = (($158) + 1)|0;
     $12 = $159;
     if (!($157)) {
      continue L27;
     }
    }
   }
   $160 = $6;
   $161 = ((($160)) + 72|0);
   HEAP32[$161>>2] = $151;
   $162 = $6;
   $163 = ((($162)) + 72|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = (_calloc($164,4)|0);
   $166 = $6;
   $167 = ((($166)) + 76|0);
   HEAP32[$167>>2] = $165;
   $168 = ($165|0)!=(0|0);
   if (!($168)) {
    $169 = $9;
    _cram_free_block($169);
    $3 = -1;
    $195 = $3;
    STACKTOP = sp;return ($195|0);
   }
   $12 = 0;
   $11 = 0;
   L37: while(1) {
    $170 = $12;
    $171 = $9;
    $172 = ((($171)) + 40|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = ($170>>>0)<($173>>>0);
    if (!($174)) {
     break;
    }
    $175 = $12;
    $176 = $8;
    $177 = (($176) + ($175)|0);
    $178 = $11;
    $179 = (($178) + 1)|0;
    $11 = $179;
    $180 = $6;
    $181 = ((($180)) + 76|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = (($182) + ($178<<2)|0);
    HEAP32[$183>>2] = $177;
    while(1) {
     $184 = $12;
     $185 = $8;
     $186 = (($185) + ($184)|0);
     $187 = HEAP8[$186>>0]|0;
     $188 = ($187<<24>>24)!=(0);
     $189 = $12;
     $190 = (($189) + 1)|0;
     $12 = $190;
     if (!($188)) {
      continue L37;
     }
    }
   }
   $191 = $9;
   $192 = $6;
   $193 = ((($192)) + 68|0);
   HEAP32[$193>>2] = $191;
   $194 = $13;
   $3 = $194;
   $195 = $3;
   STACKTOP = sp;return ($195|0);
  }
 }
 $43 = $9;
 _cram_free_block($43);
 $3 = -1;
 $195 = $3;
 STACKTOP = sp;return ($195|0);
}
function _safe_itf8_get_784($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $7 = $8;
 $9 = $5;
 $10 = $4;
 $11 = $9;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = ($13|0)<(5);
 do {
  if ($14) {
   $15 = $4;
   $16 = $5;
   $17 = ($15>>>0)>=($16>>>0);
   if (!($17)) {
    $18 = $5;
    $19 = $4;
    $20 = $18;
    $21 = $19;
    $22 = (($20) - ($21))|0;
    $23 = $7;
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = $25 >> 4;
    $27 = (8968 + ($26<<2)|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($22|0)<($28|0);
    if (!($29)) {
     break;
    }
   }
   $30 = $6;
   HEAP32[$30>>2] = 0;
   $3 = 0;
   $120 = $3;
   STACKTOP = sp;return ($120|0);
  }
 } while(0);
 $31 = $7;
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = ($33|0)<(128);
 $35 = $7;
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 if ($34) {
  $38 = $6;
  HEAP32[$38>>2] = $37;
  $3 = 1;
  $120 = $3;
  STACKTOP = sp;return ($120|0);
 }
 $39 = ($37|0)<(192);
 $40 = $7;
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 if ($39) {
  $43 = $42 << 8;
  $44 = $7;
  $45 = ((($44)) + 1|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = $43 | $47;
  $49 = $48 & 16383;
  $50 = $6;
  HEAP32[$50>>2] = $49;
  $3 = 2;
  $120 = $3;
  STACKTOP = sp;return ($120|0);
 }
 $51 = ($42|0)<(224);
 $52 = $7;
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 if ($51) {
  $55 = $54 << 16;
  $56 = $7;
  $57 = ((($56)) + 1|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = $59 << 8;
  $61 = $55 | $60;
  $62 = $7;
  $63 = ((($62)) + 2|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = $61 | $65;
  $67 = $66 & 2097151;
  $68 = $6;
  HEAP32[$68>>2] = $67;
  $3 = 3;
  $120 = $3;
  STACKTOP = sp;return ($120|0);
 }
 $69 = ($54|0)<(240);
 $70 = $7;
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&255;
 if ($69) {
  $73 = $72 << 24;
  $74 = $7;
  $75 = ((($74)) + 1|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76&255;
  $78 = $77 << 16;
  $79 = $73 | $78;
  $80 = $7;
  $81 = ((($80)) + 2|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82&255;
  $84 = $83 << 8;
  $85 = $79 | $84;
  $86 = $7;
  $87 = ((($86)) + 3|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88&255;
  $90 = $85 | $89;
  $91 = $90 & 268435455;
  $92 = $6;
  HEAP32[$92>>2] = $91;
  $3 = 4;
  $120 = $3;
  STACKTOP = sp;return ($120|0);
 } else {
  $93 = $72 & 15;
  $94 = $93 << 28;
  $95 = $7;
  $96 = ((($95)) + 1|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = $97&255;
  $99 = $98 << 20;
  $100 = $94 | $99;
  $101 = $7;
  $102 = ((($101)) + 2|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = $103&255;
  $105 = $104 << 12;
  $106 = $100 | $105;
  $107 = $7;
  $108 = ((($107)) + 3|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109&255;
  $111 = $110 << 4;
  $112 = $106 | $111;
  $113 = $7;
  $114 = ((($113)) + 4|0);
  $115 = HEAP8[$114>>0]|0;
  $116 = $115&255;
  $117 = $116 & 15;
  $118 = $112 | $117;
  $119 = $6;
  HEAP32[$119>>2] = $118;
  $3 = 5;
  $120 = $3;
  STACKTOP = sp;return ($120|0);
 }
 return (0)|0;
}
function _cram_decode_compression_header($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0;
 var $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0;
 var $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0;
 var $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0;
 var $999 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $10 = sp + 64|0;
 $11 = sp + 60|0;
 $12 = sp + 56|0;
 $14 = sp + 48|0;
 $17 = sp + 36|0;
 $18 = sp + 32|0;
 $20 = sp + 24|0;
 $21 = sp + 20|0;
 $3 = $0;
 $4 = $1;
 $24 = (_calloc(1,552)|0);
 $8 = $24;
 HEAP32[$10>>2] = 0;
 HEAP32[$11>>2] = 0;
 $25 = $8;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  $2 = 0;
  $1462 = $2;
  STACKTOP = sp;return ($1462|0);
 }
 $27 = $4;
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $4;
  $31 = (_cram_uncompress_block($30)|0);
  $32 = ($31|0)!=(0);
  if ($32) {
   $33 = $8;
   _free($33);
   $2 = 0;
   $1462 = $2;
   STACKTOP = sp;return ($1462|0);
  }
 }
 $34 = $4;
 $35 = ((($34)) + 32|0);
 $36 = HEAP32[$35>>2]|0;
 $5 = $36;
 $37 = $5;
 $38 = $4;
 $39 = ((($38)) + 20|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($37) + ($40)|0);
 $6 = $41;
 $42 = $3;
 $43 = ((($42)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $44 >> 8;
 $46 = ($45|0)==(1);
 L10: do {
  if ($46) {
   $47 = $5;
   $48 = $6;
   $49 = $8;
   $50 = (_safe_itf8_get_784($47,$48,$49)|0);
   $51 = $5;
   $52 = (($51) + ($50)|0);
   $5 = $52;
   $53 = $5;
   $54 = $6;
   $55 = $8;
   $56 = ((($55)) + 4|0);
   $57 = (_safe_itf8_get_784($53,$54,$56)|0);
   $58 = $5;
   $59 = (($58) + ($57)|0);
   $5 = $59;
   $60 = $5;
   $61 = $6;
   $62 = $8;
   $63 = ((($62)) + 8|0);
   $64 = (_safe_itf8_get_784($60,$61,$63)|0);
   $65 = $5;
   $66 = (($65) + ($64)|0);
   $5 = $66;
   $67 = $5;
   $68 = $6;
   $69 = $8;
   $70 = ((($69)) + 12|0);
   $71 = (_safe_itf8_get_784($67,$68,$70)|0);
   $72 = $5;
   $73 = (($72) + ($71)|0);
   $5 = $73;
   $74 = $5;
   $75 = $6;
   $76 = $8;
   $77 = ((($76)) + 16|0);
   $78 = (_safe_itf8_get_784($74,$75,$77)|0);
   $79 = $5;
   $80 = (($79) + ($78)|0);
   $5 = $80;
   $81 = $8;
   $82 = ((($81)) + 16|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $83<<2;
   $85 = (_malloc($84)|0);
   $86 = $8;
   $87 = ((($86)) + 20|0);
   HEAP32[$87>>2] = $85;
   $88 = ($85|0)!=(0|0);
   if (!($88)) {
    $89 = $8;
    _free($89);
    $2 = 0;
    $1462 = $2;
    STACKTOP = sp;return ($1462|0);
   }
   $9 = 0;
   while(1) {
    $90 = $9;
    $91 = $8;
    $92 = ((($91)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($90|0)<($93|0);
    if (!($94)) {
     break L10;
    }
    $95 = $5;
    $96 = $6;
    $97 = $9;
    $98 = $8;
    $99 = ((($98)) + 20|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = (($100) + ($97<<2)|0);
    $102 = (_safe_itf8_get_784($95,$96,$101)|0);
    $103 = $5;
    $104 = (($103) + ($102)|0);
    $5 = $104;
    $105 = $9;
    $106 = (($105) + 1)|0;
    $9 = $106;
   }
  }
 } while(0);
 $107 = (_kh_init_map_785()|0);
 $108 = $8;
 $109 = ((($108)) + 88|0);
 HEAP32[$109>>2] = $107;
 $110 = $8;
 $111 = ((($110)) + 92|0);
 dest=$111; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $112 = $8;
 $113 = ((($112)) + 220|0);
 dest=$113; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $114 = $8;
 $115 = ((($114)) + 88|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ($116|0)!=(0|0);
 $118 = $8;
 if (!($117)) {
  _cram_free_compression_header($118);
  $2 = 0;
  $1462 = $2;
  STACKTOP = sp;return ($1462|0);
 }
 $119 = ((($118)) + 24|0);
 HEAP32[$119>>2] = 0;
 $120 = $8;
 $121 = ((($120)) + 28|0);
 HEAP32[$121>>2] = 0;
 $122 = $8;
 $123 = ((($122)) + 32|0);
 HEAP32[$123>>2] = 0;
 $124 = $8;
 $125 = ((($124)) + 36|0);
 HEAP32[$125>>2] = 0;
 $126 = $8;
 $127 = ((($126)) + 40|0);
 HEAP32[$127>>2] = 0;
 $128 = $8;
 $129 = ((($128)) + 44|0);
 HEAP32[$129>>2] = 1;
 $130 = $8;
 $131 = ((($130)) + 48|0);
 dest=$131; src=20754; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $132 = $5;
 $133 = $6;
 $134 = (_safe_itf8_get_784($132,$133,$10)|0);
 $135 = $5;
 $136 = (($135) + ($134)|0);
 $5 = $136;
 $137 = $5;
 $7 = $137;
 $138 = $5;
 $139 = $6;
 $140 = (_safe_itf8_get_784($138,$139,$11)|0);
 $141 = $5;
 $142 = (($141) + ($140)|0);
 $5 = $142;
 $9 = 0;
 L24: while(1) {
  $143 = $9;
  $144 = HEAP32[$11>>2]|0;
  $145 = ($143|0)<($144|0);
  if (!($145)) {
   label = 49;
   break;
  }
  $146 = $6;
  $147 = $5;
  $148 = $146;
  $149 = $147;
  $150 = (($148) - ($149))|0;
  $151 = ($150|0)<(2);
  if ($151) {
   label = 17;
   break;
  }
  $153 = $5;
  $154 = ((($153)) + 2|0);
  $5 = $154;
  $155 = $5;
  $156 = ((($155)) + -2|0);
  $157 = HEAP8[$156>>0]|0;
  $158 = $157 << 24 >> 24;
  $159 = $158 << 8;
  $160 = $5;
  $161 = ((($160)) + -1|0);
  $162 = HEAP8[$161>>0]|0;
  $163 = $162 << 24 >> 24;
  $164 = $159 | $163;
  switch ($164|0) {
  case 19785:  {
   $165 = $5;
   $166 = ((($165)) + 1|0);
   $5 = $166;
   $167 = HEAP8[$165>>0]|0;
   $168 = $167 << 24 >> 24;
   HEAP32[$12>>2] = $168;
   $169 = $8;
   $170 = ((($169)) + 88|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (_kh_put_map_788($171,20775,$14)|0);
   $13 = $172;
   $173 = HEAP32[$14>>2]|0;
   $174 = (-1)==($173|0);
   if ($174) {
    label = 20;
    break L24;
   }
   $176 = $13;
   $177 = $8;
   $178 = ((($177)) + 88|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = ((($179)) + 24|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = (($181) + ($176<<2)|0);
   ;HEAP32[$182>>2]=HEAP32[$12>>2]|0;
   $183 = HEAP32[$12>>2]|0;
   $184 = $8;
   $185 = ((($184)) + 24|0);
   HEAP32[$185>>2] = $183;
   break;
  }
  case 21833:  {
   $186 = $5;
   $187 = ((($186)) + 1|0);
   $5 = $187;
   $188 = HEAP8[$186>>0]|0;
   $189 = $188 << 24 >> 24;
   HEAP32[$12>>2] = $189;
   $190 = $8;
   $191 = ((($190)) + 88|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = (_kh_put_map_788($192,20778,$14)|0);
   $13 = $193;
   $194 = HEAP32[$14>>2]|0;
   $195 = (-1)==($194|0);
   if ($195) {
    label = 23;
    break L24;
   }
   $197 = $13;
   $198 = $8;
   $199 = ((($198)) + 88|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = ((($200)) + 24|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = (($202) + ($197<<2)|0);
   ;HEAP32[$203>>2]=HEAP32[$12>>2]|0;
   $204 = HEAP32[$12>>2]|0;
   $205 = $8;
   $206 = ((($205)) + 28|0);
   HEAP32[$206>>2] = $204;
   break;
  }
  case 20553:  {
   $207 = $5;
   $208 = ((($207)) + 1|0);
   $5 = $208;
   $209 = HEAP8[$207>>0]|0;
   $210 = $209 << 24 >> 24;
   HEAP32[$12>>2] = $210;
   $211 = $8;
   $212 = ((($211)) + 88|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = (_kh_put_map_788($213,20781,$14)|0);
   $13 = $214;
   $215 = HEAP32[$14>>2]|0;
   $216 = (-1)==($215|0);
   if ($216) {
    label = 26;
    break L24;
   }
   $218 = $13;
   $219 = $8;
   $220 = ((($219)) + 88|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = ((($221)) + 24|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = (($223) + ($218<<2)|0);
   ;HEAP32[$224>>2]=HEAP32[$12>>2]|0;
   $225 = HEAP32[$12>>2]|0;
   $226 = $8;
   $227 = ((($226)) + 32|0);
   HEAP32[$227>>2] = $225;
   break;
  }
  case 21070:  {
   $228 = $5;
   $229 = ((($228)) + 1|0);
   $5 = $229;
   $230 = HEAP8[$228>>0]|0;
   $231 = $230 << 24 >> 24;
   HEAP32[$12>>2] = $231;
   $232 = $8;
   $233 = ((($232)) + 88|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = (_kh_put_map_788($234,20784,$14)|0);
   $13 = $235;
   $236 = HEAP32[$14>>2]|0;
   $237 = (-1)==($236|0);
   if ($237) {
    label = 29;
    break L24;
   }
   $239 = $13;
   $240 = $8;
   $241 = ((($240)) + 88|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = ((($242)) + 24|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = (($244) + ($239<<2)|0);
   ;HEAP32[$245>>2]=HEAP32[$12>>2]|0;
   $246 = HEAP32[$12>>2]|0;
   $247 = $8;
   $248 = ((($247)) + 40|0);
   HEAP32[$248>>2] = $246;
   break;
  }
  case 16720:  {
   $249 = $5;
   $250 = ((($249)) + 1|0);
   $5 = $250;
   $251 = HEAP8[$249>>0]|0;
   $252 = $251 << 24 >> 24;
   HEAP32[$12>>2] = $252;
   $253 = $8;
   $254 = ((($253)) + 88|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = (_kh_put_map_788($255,20787,$14)|0);
   $13 = $256;
   $257 = HEAP32[$14>>2]|0;
   $258 = (-1)==($257|0);
   if ($258) {
    label = 32;
    break L24;
   }
   $260 = $13;
   $261 = $8;
   $262 = ((($261)) + 88|0);
   $263 = HEAP32[$262>>2]|0;
   $264 = ((($263)) + 24|0);
   $265 = HEAP32[$264>>2]|0;
   $266 = (($265) + ($260<<2)|0);
   ;HEAP32[$266>>2]=HEAP32[$12>>2]|0;
   $267 = HEAP32[$12>>2]|0;
   $268 = $8;
   $269 = ((($268)) + 44|0);
   HEAP32[$269>>2] = $267;
   break;
  }
  case 21074:  {
   $270 = $5;
   $271 = ((($270)) + 1|0);
   $5 = $271;
   $272 = HEAP8[$270>>0]|0;
   $273 = $272 << 24 >> 24;
   HEAP32[$12>>2] = $273;
   $274 = $8;
   $275 = ((($274)) + 88|0);
   $276 = HEAP32[$275>>2]|0;
   $277 = (_kh_put_map_788($276,20790,$14)|0);
   $13 = $277;
   $278 = HEAP32[$14>>2]|0;
   $279 = (-1)==($278|0);
   if ($279) {
    label = 35;
    break L24;
   }
   $281 = $13;
   $282 = $8;
   $283 = ((($282)) + 88|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = ((($284)) + 24|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = (($286) + ($281<<2)|0);
   ;HEAP32[$287>>2]=HEAP32[$12>>2]|0;
   $288 = HEAP32[$12>>2]|0;
   $289 = ($288|0)!=(0);
   $290 = $289 ^ 1;
   $291 = $290&1;
   $292 = $3;
   $293 = ((($292)) + 288|0);
   HEAP32[$293>>2] = $291;
   break;
  }
  case 21325:  {
   $294 = $6;
   $295 = $5;
   $296 = $294;
   $297 = $295;
   $298 = (($296) - ($297))|0;
   $299 = ($298|0)<(5);
   if ($299) {
    label = 38;
    break L24;
   }
   $301 = $5;
   $302 = HEAP8[$301>>0]|0;
   $303 = $302 << 24 >> 24;
   $304 = $303 >> 6;
   $305 = $304 & 3;
   $306 = $8;
   $307 = ((($306)) + 48|0);
   $308 = (($307) + ($305)|0);
   HEAP8[$308>>0] = 67;
   $309 = $5;
   $310 = HEAP8[$309>>0]|0;
   $311 = $310 << 24 >> 24;
   $312 = $311 >> 4;
   $313 = $312 & 3;
   $314 = $8;
   $315 = ((($314)) + 48|0);
   $316 = (($315) + ($313)|0);
   HEAP8[$316>>0] = 71;
   $317 = $5;
   $318 = HEAP8[$317>>0]|0;
   $319 = $318 << 24 >> 24;
   $320 = $319 >> 2;
   $321 = $320 & 3;
   $322 = $8;
   $323 = ((($322)) + 48|0);
   $324 = (($323) + ($321)|0);
   HEAP8[$324>>0] = 84;
   $325 = $5;
   $326 = HEAP8[$325>>0]|0;
   $327 = $326 << 24 >> 24;
   $328 = $327 >> 0;
   $329 = $328 & 3;
   $330 = $8;
   $331 = ((($330)) + 48|0);
   $332 = (($331) + ($329)|0);
   HEAP8[$332>>0] = 78;
   $333 = $5;
   $334 = ((($333)) + 1|0);
   $335 = HEAP8[$334>>0]|0;
   $336 = $335 << 24 >> 24;
   $337 = $336 >> 6;
   $338 = $337 & 3;
   $339 = $8;
   $340 = ((($339)) + 48|0);
   $341 = ((($340)) + 4|0);
   $342 = (($341) + ($338)|0);
   HEAP8[$342>>0] = 65;
   $343 = $5;
   $344 = ((($343)) + 1|0);
   $345 = HEAP8[$344>>0]|0;
   $346 = $345 << 24 >> 24;
   $347 = $346 >> 4;
   $348 = $347 & 3;
   $349 = $8;
   $350 = ((($349)) + 48|0);
   $351 = ((($350)) + 4|0);
   $352 = (($351) + ($348)|0);
   HEAP8[$352>>0] = 71;
   $353 = $5;
   $354 = ((($353)) + 1|0);
   $355 = HEAP8[$354>>0]|0;
   $356 = $355 << 24 >> 24;
   $357 = $356 >> 2;
   $358 = $357 & 3;
   $359 = $8;
   $360 = ((($359)) + 48|0);
   $361 = ((($360)) + 4|0);
   $362 = (($361) + ($358)|0);
   HEAP8[$362>>0] = 84;
   $363 = $5;
   $364 = ((($363)) + 1|0);
   $365 = HEAP8[$364>>0]|0;
   $366 = $365 << 24 >> 24;
   $367 = $366 >> 0;
   $368 = $367 & 3;
   $369 = $8;
   $370 = ((($369)) + 48|0);
   $371 = ((($370)) + 4|0);
   $372 = (($371) + ($368)|0);
   HEAP8[$372>>0] = 78;
   $373 = $5;
   $374 = ((($373)) + 2|0);
   $375 = HEAP8[$374>>0]|0;
   $376 = $375 << 24 >> 24;
   $377 = $376 >> 6;
   $378 = $377 & 3;
   $379 = $8;
   $380 = ((($379)) + 48|0);
   $381 = ((($380)) + 8|0);
   $382 = (($381) + ($378)|0);
   HEAP8[$382>>0] = 65;
   $383 = $5;
   $384 = ((($383)) + 2|0);
   $385 = HEAP8[$384>>0]|0;
   $386 = $385 << 24 >> 24;
   $387 = $386 >> 4;
   $388 = $387 & 3;
   $389 = $8;
   $390 = ((($389)) + 48|0);
   $391 = ((($390)) + 8|0);
   $392 = (($391) + ($388)|0);
   HEAP8[$392>>0] = 67;
   $393 = $5;
   $394 = ((($393)) + 2|0);
   $395 = HEAP8[$394>>0]|0;
   $396 = $395 << 24 >> 24;
   $397 = $396 >> 2;
   $398 = $397 & 3;
   $399 = $8;
   $400 = ((($399)) + 48|0);
   $401 = ((($400)) + 8|0);
   $402 = (($401) + ($398)|0);
   HEAP8[$402>>0] = 84;
   $403 = $5;
   $404 = ((($403)) + 2|0);
   $405 = HEAP8[$404>>0]|0;
   $406 = $405 << 24 >> 24;
   $407 = $406 >> 0;
   $408 = $407 & 3;
   $409 = $8;
   $410 = ((($409)) + 48|0);
   $411 = ((($410)) + 8|0);
   $412 = (($411) + ($408)|0);
   HEAP8[$412>>0] = 78;
   $413 = $5;
   $414 = ((($413)) + 3|0);
   $415 = HEAP8[$414>>0]|0;
   $416 = $415 << 24 >> 24;
   $417 = $416 >> 6;
   $418 = $417 & 3;
   $419 = $8;
   $420 = ((($419)) + 48|0);
   $421 = ((($420)) + 12|0);
   $422 = (($421) + ($418)|0);
   HEAP8[$422>>0] = 65;
   $423 = $5;
   $424 = ((($423)) + 3|0);
   $425 = HEAP8[$424>>0]|0;
   $426 = $425 << 24 >> 24;
   $427 = $426 >> 4;
   $428 = $427 & 3;
   $429 = $8;
   $430 = ((($429)) + 48|0);
   $431 = ((($430)) + 12|0);
   $432 = (($431) + ($428)|0);
   HEAP8[$432>>0] = 67;
   $433 = $5;
   $434 = ((($433)) + 3|0);
   $435 = HEAP8[$434>>0]|0;
   $436 = $435 << 24 >> 24;
   $437 = $436 >> 2;
   $438 = $437 & 3;
   $439 = $8;
   $440 = ((($439)) + 48|0);
   $441 = ((($440)) + 12|0);
   $442 = (($441) + ($438)|0);
   HEAP8[$442>>0] = 71;
   $443 = $5;
   $444 = ((($443)) + 3|0);
   $445 = HEAP8[$444>>0]|0;
   $446 = $445 << 24 >> 24;
   $447 = $446 >> 0;
   $448 = $447 & 3;
   $449 = $8;
   $450 = ((($449)) + 48|0);
   $451 = ((($450)) + 12|0);
   $452 = (($451) + ($448)|0);
   HEAP8[$452>>0] = 78;
   $453 = $5;
   $454 = ((($453)) + 4|0);
   $455 = HEAP8[$454>>0]|0;
   $456 = $455 << 24 >> 24;
   $457 = $456 >> 6;
   $458 = $457 & 3;
   $459 = $8;
   $460 = ((($459)) + 48|0);
   $461 = ((($460)) + 16|0);
   $462 = (($461) + ($458)|0);
   HEAP8[$462>>0] = 65;
   $463 = $5;
   $464 = ((($463)) + 4|0);
   $465 = HEAP8[$464>>0]|0;
   $466 = $465 << 24 >> 24;
   $467 = $466 >> 4;
   $468 = $467 & 3;
   $469 = $8;
   $470 = ((($469)) + 48|0);
   $471 = ((($470)) + 16|0);
   $472 = (($471) + ($468)|0);
   HEAP8[$472>>0] = 67;
   $473 = $5;
   $474 = ((($473)) + 4|0);
   $475 = HEAP8[$474>>0]|0;
   $476 = $475 << 24 >> 24;
   $477 = $476 >> 2;
   $478 = $477 & 3;
   $479 = $8;
   $480 = ((($479)) + 48|0);
   $481 = ((($480)) + 16|0);
   $482 = (($481) + ($478)|0);
   HEAP8[$482>>0] = 71;
   $483 = $5;
   $484 = ((($483)) + 4|0);
   $485 = HEAP8[$484>>0]|0;
   $486 = $485 << 24 >> 24;
   $487 = $486 >> 0;
   $488 = $487 & 3;
   $489 = $8;
   $490 = ((($489)) + 48|0);
   $491 = ((($490)) + 16|0);
   $492 = (($491) + ($488)|0);
   HEAP8[$492>>0] = 84;
   $493 = $5;
   HEAP32[$12>>2] = $493;
   $494 = $5;
   $495 = ((($494)) + 5|0);
   $5 = $495;
   $496 = $8;
   $497 = ((($496)) + 88|0);
   $498 = HEAP32[$497>>2]|0;
   $499 = (_kh_put_map_788($498,20793,$14)|0);
   $13 = $499;
   $500 = HEAP32[$14>>2]|0;
   $501 = (-1)==($500|0);
   if ($501) {
    label = 40;
    break L24;
   }
   $503 = $13;
   $504 = $8;
   $505 = ((($504)) + 88|0);
   $506 = HEAP32[$505>>2]|0;
   $507 = ((($506)) + 24|0);
   $508 = HEAP32[$507>>2]|0;
   $509 = (($508) + ($503<<2)|0);
   ;HEAP32[$509>>2]=HEAP32[$12>>2]|0;
   break;
  }
  case 21572:  {
   $510 = $5;
   $511 = $6;
   $512 = $8;
   $513 = (_cram_decode_TD($510,$511,$512)|0);
   $15 = $513;
   $514 = $15;
   $515 = ($514|0)<(0);
   if ($515) {
    label = 43;
    break L24;
   }
   $517 = $5;
   HEAP32[$12>>2] = $517;
   $518 = $15;
   $519 = $5;
   $520 = (($519) + ($518)|0);
   $5 = $520;
   $521 = $8;
   $522 = ((($521)) + 88|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = (_kh_put_map_788($523,20796,$14)|0);
   $13 = $524;
   $525 = HEAP32[$14>>2]|0;
   $526 = (-1)==($525|0);
   if ($526) {
    label = 45;
    break L24;
   }
   $528 = $13;
   $529 = $8;
   $530 = ((($529)) + 88|0);
   $531 = HEAP32[$530>>2]|0;
   $532 = ((($531)) + 24|0);
   $533 = HEAP32[$532>>2]|0;
   $534 = (($533) + ($528<<2)|0);
   ;HEAP32[$534>>2]=HEAP32[$12>>2]|0;
   break;
  }
  default: {
   $535 = HEAP32[2410]|0;
   $536 = $5;
   $537 = ((($536)) + -2|0);
   $538 = HEAP8[$537>>0]|0;
   $539 = $538 << 24 >> 24;
   $540 = $5;
   $541 = ((($540)) + -1|0);
   $542 = HEAP8[$541>>0]|0;
   $543 = $542 << 24 >> 24;
   HEAP32[$vararg_buffer>>2] = $539;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $543;
   (_fprintf($535,20799,$vararg_buffer)|0);
   $544 = $5;
   $545 = ((($544)) + 1|0);
   $5 = $545;
  }
  }
  $546 = $9;
  $547 = (($546) + 1)|0;
  $9 = $547;
 }
 switch (label|0) {
  case 17: {
   $152 = $8;
   _cram_free_compression_header($152);
   $2 = 0;
   $1462 = $2;
   STACKTOP = sp;return ($1462|0);
   break;
  }
  case 20: {
   $175 = $8;
   _cram_free_compression_header($175);
   $2 = 0;
   $1462 = $2;
   STACKTOP = sp;return ($1462|0);
   break;
  }
  case 23: {
   $196 = $8;
   _cram_free_compression_header($196);
   $2 = 0;
   $1462 = $2;
   STACKTOP = sp;return ($1462|0);
   break;
  }
  case 26: {
   $217 = $8;
   _cram_free_compression_header($217);
   $2 = 0;
   $1462 = $2;
   STACKTOP = sp;return ($1462|0);
   break;
  }
  case 29: {
   $238 = $8;
   _cram_free_compression_header($238);
   $2 = 0;
   $1462 = $2;
   STACKTOP = sp;return ($1462|0);
   break;
  }
  case 32: {
   $259 = $8;
   _cram_free_compression_header($259);
   $2 = 0;
   $1462 = $2;
   STACKTOP = sp;return ($1462|0);
   break;
  }
  case 35: {
   $280 = $8;
   _cram_free_compression_header($280);
   $2 = 0;
   $1462 = $2;
   STACKTOP = sp;return ($1462|0);
   break;
  }
  case 38: {
   $300 = $8;
   _cram_free_compression_header($300);
   $2 = 0;
   $1462 = $2;
   STACKTOP = sp;return ($1462|0);
   break;
  }
  case 40: {
   $502 = $8;
   _cram_free_compression_header($502);
   $2 = 0;
   $1462 = $2;
   STACKTOP = sp;return ($1462|0);
   break;
  }
  case 43: {
   $516 = $8;
   _cram_free_compression_header($516);
   $2 = 0;
   $1462 = $2;
   STACKTOP = sp;return ($1462|0);
   break;
  }
  case 45: {
   $527 = $8;
   _cram_free_compression_header($527);
   $2 = 0;
   $1462 = $2;
   STACKTOP = sp;return ($1462|0);
   break;
  }
  case 49: {
   $548 = $5;
   $549 = $7;
   $550 = $548;
   $551 = $549;
   $552 = (($550) - ($551))|0;
   $553 = HEAP32[$10>>2]|0;
   $554 = ($552|0)!=($553|0);
   if ($554) {
    $555 = $8;
    _cram_free_compression_header($555);
    $2 = 0;
    $1462 = $2;
    STACKTOP = sp;return ($1462|0);
   }
   $556 = $5;
   $557 = $6;
   $558 = (_safe_itf8_get_784($556,$557,$10)|0);
   $559 = $5;
   $560 = (($559) + ($558)|0);
   $5 = $560;
   $561 = $5;
   $7 = $561;
   $562 = $5;
   $563 = $6;
   $564 = (_safe_itf8_get_784($562,$563,$11)|0);
   $565 = $5;
   $566 = (($565) + ($564)|0);
   $5 = $566;
   $9 = 0;
   L55: while(1) {
    $567 = $9;
    $568 = HEAP32[$11>>2]|0;
    $569 = ($567|0)<($568|0);
    $570 = $5;
    if (!($569)) {
     label = 187;
     break;
    }
    $16 = $570;
    HEAP32[$17>>2] = 0;
    HEAP32[$18>>2] = 0;
    $571 = (_malloc(24)|0);
    $19 = $571;
    $572 = $19;
    $573 = ($572|0)!=(0|0);
    if (!($573)) {
     label = 55;
     break;
    }
    $574 = $6;
    $575 = $5;
    $576 = $574;
    $577 = $575;
    $578 = (($576) - ($577))|0;
    $579 = ($578|0)<(4);
    if ($579) {
     label = 55;
     break;
    }
    $582 = $5;
    $583 = ((($582)) + 2|0);
    $5 = $583;
    $584 = $5;
    $585 = $6;
    $586 = (_safe_itf8_get_784($584,$585,$17)|0);
    $587 = $5;
    $588 = (($587) + ($586)|0);
    $5 = $588;
    $589 = $5;
    $590 = $6;
    $591 = (_safe_itf8_get_784($589,$590,$18)|0);
    $592 = $5;
    $593 = (($592) + ($591)|0);
    $5 = $593;
    $594 = $16;
    $595 = HEAP8[$594>>0]|0;
    $596 = $595 << 24 >> 24;
    $597 = $596 << 8;
    $598 = $16;
    $599 = ((($598)) + 1|0);
    $600 = HEAP8[$599>>0]|0;
    $601 = $600 << 24 >> 24;
    $602 = $597 | $601;
    $603 = $19;
    HEAP32[$603>>2] = $602;
    $604 = HEAP32[$17>>2]|0;
    $605 = $19;
    $606 = ((($605)) + 4|0);
    HEAP32[$606>>2] = $604;
    $607 = HEAP32[$18>>2]|0;
    $608 = $19;
    $609 = ((($608)) + 12|0);
    HEAP32[$609>>2] = $607;
    $610 = $5;
    $611 = $4;
    $612 = ((($611)) + 32|0);
    $613 = HEAP32[$612>>2]|0;
    $614 = $610;
    $615 = $613;
    $616 = (($614) - ($615))|0;
    $617 = $19;
    $618 = ((($617)) + 8|0);
    HEAP32[$618>>2] = $616;
    $619 = $19;
    $620 = ((($619)) + 16|0);
    HEAP32[$620>>2] = 0;
    $621 = $19;
    $622 = ((($621)) + 4|0);
    $623 = HEAP32[$622>>2]|0;
    $624 = ($623|0)==(0);
    if (!($624)) {
     $625 = HEAP32[$18>>2]|0;
     $626 = ($625|0)<(0);
     if ($626) {
      label = 59;
      break;
     }
     $627 = $6;
     $628 = $5;
     $629 = $627;
     $630 = $628;
     $631 = (($629) - ($630))|0;
     $632 = HEAP32[$18>>2]|0;
     $633 = ($631|0)<($632|0);
     if ($633) {
      label = 59;
      break;
     }
     $636 = $16;
     $637 = HEAP8[$636>>0]|0;
     $638 = $637 << 24 >> 24;
     $639 = ($638|0)==(66);
     if ($639) {
      $640 = $16;
      $641 = ((($640)) + 1|0);
      $642 = HEAP8[$641>>0]|0;
      $643 = $642 << 24 >> 24;
      $644 = ($643|0)==(70);
      if ($644) {
       $645 = HEAP32[$17>>2]|0;
       $646 = $5;
       $647 = HEAP32[$18>>2]|0;
       $648 = $3;
       $649 = ((($648)) + 8|0);
       $650 = HEAP32[$649>>2]|0;
       $651 = (_cram_decoder_init($645,$646,$647,1,$650)|0);
       $652 = $8;
       $653 = ((($652)) + 348|0);
       $654 = ((($653)) + 60|0);
       HEAP32[$654>>2] = $651;
       $655 = ($651|0)!=(0|0);
       if (!($655)) {
        label = 63;
        break;
       }
      } else {
       label = 64;
      }
     } else {
      label = 64;
     }
     L67: do {
      if ((label|0) == 64) {
       label = 0;
       $657 = $16;
       $658 = HEAP8[$657>>0]|0;
       $659 = $658 << 24 >> 24;
       $660 = ($659|0)==(67);
       if ($660) {
        $661 = $16;
        $662 = ((($661)) + 1|0);
        $663 = HEAP8[$662>>0]|0;
        $664 = $663 << 24 >> 24;
        $665 = ($664|0)==(70);
        if ($665) {
         $666 = HEAP32[$17>>2]|0;
         $667 = $5;
         $668 = HEAP32[$18>>2]|0;
         $669 = $3;
         $670 = ((($669)) + 8|0);
         $671 = HEAP32[$670>>2]|0;
         $672 = (_cram_decoder_init($666,$667,$668,1,$671)|0);
         $673 = $8;
         $674 = ((($673)) + 348|0);
         $675 = ((($674)) + 64|0);
         HEAP32[$675>>2] = $672;
         $676 = ($672|0)!=(0|0);
         if ($676) {
          break;
         } else {
          label = 67;
          break L55;
         }
        }
       }
       $678 = $16;
       $679 = HEAP8[$678>>0]|0;
       $680 = $679 << 24 >> 24;
       $681 = ($680|0)==(82);
       if ($681) {
        $682 = $16;
        $683 = ((($682)) + 1|0);
        $684 = HEAP8[$683>>0]|0;
        $685 = $684 << 24 >> 24;
        $686 = ($685|0)==(73);
        if ($686) {
         $687 = HEAP32[$17>>2]|0;
         $688 = $5;
         $689 = HEAP32[$18>>2]|0;
         $690 = $3;
         $691 = ((($690)) + 8|0);
         $692 = HEAP32[$691>>2]|0;
         $693 = (_cram_decoder_init($687,$688,$689,1,$692)|0);
         $694 = $8;
         $695 = ((($694)) + 348|0);
         $696 = ((($695)) + 132|0);
         HEAP32[$696>>2] = $693;
         $697 = ($693|0)!=(0|0);
         if ($697) {
          break;
         } else {
          label = 71;
          break L55;
         }
        }
       }
       $699 = $16;
       $700 = HEAP8[$699>>0]|0;
       $701 = $700 << 24 >> 24;
       $702 = ($701|0)==(82);
       do {
        if ($702) {
         $703 = $16;
         $704 = ((($703)) + 1|0);
         $705 = HEAP8[$704>>0]|0;
         $706 = $705 << 24 >> 24;
         $707 = ($706|0)==(76);
         if (!($707)) {
          break;
         }
         $708 = HEAP32[$17>>2]|0;
         $709 = $5;
         $710 = HEAP32[$18>>2]|0;
         $711 = $3;
         $712 = ((($711)) + 8|0);
         $713 = HEAP32[$712>>2]|0;
         $714 = (_cram_decoder_init($708,$709,$710,1,$713)|0);
         $715 = $8;
         $716 = ((($715)) + 348|0);
         $717 = ((($716)) + 100|0);
         HEAP32[$717>>2] = $714;
         $718 = ($714|0)!=(0|0);
         if ($718) {
          break L67;
         } else {
          label = 75;
          break L55;
         }
        }
       } while(0);
       $720 = $16;
       $721 = HEAP8[$720>>0]|0;
       $722 = $721 << 24 >> 24;
       $723 = ($722|0)==(65);
       do {
        if ($723) {
         $724 = $16;
         $725 = ((($724)) + 1|0);
         $726 = HEAP8[$725>>0]|0;
         $727 = $726 << 24 >> 24;
         $728 = ($727|0)==(80);
         if (!($728)) {
          break;
         }
         $729 = HEAP32[$17>>2]|0;
         $730 = $5;
         $731 = HEAP32[$18>>2]|0;
         $732 = $3;
         $733 = ((($732)) + 8|0);
         $734 = HEAP32[$733>>2]|0;
         $735 = (_cram_decoder_init($729,$730,$731,1,$734)|0);
         $736 = $8;
         $737 = ((($736)) + 348|0);
         $738 = ((($737)) + 68|0);
         HEAP32[$738>>2] = $735;
         $739 = ($735|0)!=(0|0);
         if ($739) {
          break L67;
         } else {
          label = 79;
          break L55;
         }
        }
       } while(0);
       $741 = $16;
       $742 = HEAP8[$741>>0]|0;
       $743 = $742 << 24 >> 24;
       $744 = ($743|0)==(82);
       do {
        if ($744) {
         $745 = $16;
         $746 = ((($745)) + 1|0);
         $747 = HEAP8[$746>>0]|0;
         $748 = $747 << 24 >> 24;
         $749 = ($748|0)==(71);
         if (!($749)) {
          break;
         }
         $750 = HEAP32[$17>>2]|0;
         $751 = $5;
         $752 = HEAP32[$18>>2]|0;
         $753 = $3;
         $754 = ((($753)) + 8|0);
         $755 = HEAP32[$754>>2]|0;
         $756 = (_cram_decoder_init($750,$751,$752,1,$755)|0);
         $757 = $8;
         $758 = ((($757)) + 348|0);
         $759 = ((($758)) + 72|0);
         HEAP32[$759>>2] = $756;
         $760 = ($756|0)!=(0|0);
         if ($760) {
          break L67;
         } else {
          label = 83;
          break L55;
         }
        }
       } while(0);
       $762 = $16;
       $763 = HEAP8[$762>>0]|0;
       $764 = $763 << 24 >> 24;
       $765 = ($764|0)==(77);
       do {
        if ($765) {
         $766 = $16;
         $767 = ((($766)) + 1|0);
         $768 = HEAP8[$767>>0]|0;
         $769 = $768 << 24 >> 24;
         $770 = ($769|0)==(70);
         if (!($770)) {
          break;
         }
         $771 = HEAP32[$17>>2]|0;
         $772 = $5;
         $773 = HEAP32[$18>>2]|0;
         $774 = $3;
         $775 = ((($774)) + 8|0);
         $776 = HEAP32[$775>>2]|0;
         $777 = (_cram_decoder_init($771,$772,$773,1,$776)|0);
         $778 = $8;
         $779 = ((($778)) + 348|0);
         $780 = ((($779)) + 84|0);
         HEAP32[$780>>2] = $777;
         $781 = ($777|0)!=(0|0);
         if ($781) {
          break L67;
         } else {
          label = 87;
          break L55;
         }
        }
       } while(0);
       $783 = $16;
       $784 = HEAP8[$783>>0]|0;
       $785 = $784 << 24 >> 24;
       $786 = ($785|0)==(78);
       do {
        if ($786) {
         $787 = $16;
         $788 = ((($787)) + 1|0);
         $789 = HEAP8[$788>>0]|0;
         $790 = $789 << 24 >> 24;
         $791 = ($790|0)==(83);
         if (!($791)) {
          break;
         }
         $792 = HEAP32[$17>>2]|0;
         $793 = $5;
         $794 = HEAP32[$18>>2]|0;
         $795 = $3;
         $796 = ((($795)) + 8|0);
         $797 = HEAP32[$796>>2]|0;
         $798 = (_cram_decoder_init($792,$793,$794,1,$797)|0);
         $799 = $8;
         $800 = ((($799)) + 348|0);
         $801 = ((($800)) + 80|0);
         HEAP32[$801>>2] = $798;
         $802 = ($798|0)!=(0|0);
         if ($802) {
          break L67;
         } else {
          label = 91;
          break L55;
         }
        }
       } while(0);
       $804 = $16;
       $805 = HEAP8[$804>>0]|0;
       $806 = $805 << 24 >> 24;
       $807 = ($806|0)==(78);
       do {
        if ($807) {
         $808 = $16;
         $809 = ((($808)) + 1|0);
         $810 = HEAP8[$809>>0]|0;
         $811 = $810 << 24 >> 24;
         $812 = ($811|0)==(80);
         if (!($812)) {
          break;
         }
         $813 = HEAP32[$17>>2]|0;
         $814 = $5;
         $815 = HEAP32[$18>>2]|0;
         $816 = $3;
         $817 = ((($816)) + 8|0);
         $818 = HEAP32[$817>>2]|0;
         $819 = (_cram_decoder_init($813,$814,$815,1,$818)|0);
         $820 = $8;
         $821 = ((($820)) + 348|0);
         $822 = ((($821)) + 92|0);
         HEAP32[$822>>2] = $819;
         $823 = ($819|0)!=(0|0);
         if ($823) {
          break L67;
         } else {
          label = 95;
          break L55;
         }
        }
       } while(0);
       $825 = $16;
       $826 = HEAP8[$825>>0]|0;
       $827 = $826 << 24 >> 24;
       $828 = ($827|0)==(84);
       do {
        if ($828) {
         $829 = $16;
         $830 = ((($829)) + 1|0);
         $831 = HEAP8[$830>>0]|0;
         $832 = $831 << 24 >> 24;
         $833 = ($832|0)==(83);
         if (!($833)) {
          break;
         }
         $834 = HEAP32[$17>>2]|0;
         $835 = $5;
         $836 = HEAP32[$18>>2]|0;
         $837 = $3;
         $838 = ((($837)) + 8|0);
         $839 = HEAP32[$838>>2]|0;
         $840 = (_cram_decoder_init($834,$835,$836,1,$839)|0);
         $841 = $8;
         $842 = ((($841)) + 348|0);
         $843 = ((($842)) + 88|0);
         HEAP32[$843>>2] = $840;
         $844 = ($840|0)!=(0|0);
         if ($844) {
          break L67;
         } else {
          label = 99;
          break L55;
         }
        }
       } while(0);
       $846 = $16;
       $847 = HEAP8[$846>>0]|0;
       $848 = $847 << 24 >> 24;
       $849 = ($848|0)==(78);
       do {
        if ($849) {
         $850 = $16;
         $851 = ((($850)) + 1|0);
         $852 = HEAP8[$851>>0]|0;
         $853 = $852 << 24 >> 24;
         $854 = ($853|0)==(70);
         if (!($854)) {
          break;
         }
         $855 = HEAP32[$17>>2]|0;
         $856 = $5;
         $857 = HEAP32[$18>>2]|0;
         $858 = $3;
         $859 = ((($858)) + 8|0);
         $860 = HEAP32[$859>>2]|0;
         $861 = (_cram_decoder_init($855,$856,$857,1,$860)|0);
         $862 = $8;
         $863 = ((($862)) + 348|0);
         $864 = ((($863)) + 96|0);
         HEAP32[$864>>2] = $861;
         $865 = ($861|0)!=(0|0);
         if ($865) {
          break L67;
         } else {
          label = 103;
          break L55;
         }
        }
       } while(0);
       $867 = $16;
       $868 = HEAP8[$867>>0]|0;
       $869 = $868 << 24 >> 24;
       $870 = ($869|0)==(84);
       do {
        if ($870) {
         $871 = $16;
         $872 = ((($871)) + 1|0);
         $873 = HEAP8[$872>>0]|0;
         $874 = $873 << 24 >> 24;
         $875 = ($874|0)==(67);
         if (!($875)) {
          break;
         }
         $876 = HEAP32[$17>>2]|0;
         $877 = $5;
         $878 = HEAP32[$18>>2]|0;
         $879 = $3;
         $880 = ((($879)) + 8|0);
         $881 = HEAP32[$880>>2]|0;
         $882 = (_cram_decoder_init($876,$877,$878,3,$881)|0);
         $883 = $8;
         $884 = ((($883)) + 348|0);
         $885 = ((($884)) + 176|0);
         HEAP32[$885>>2] = $882;
         $886 = ($882|0)!=(0|0);
         if ($886) {
          break L67;
         } else {
          label = 107;
          break L55;
         }
        }
       } while(0);
       $888 = $16;
       $889 = HEAP8[$888>>0]|0;
       $890 = $889 << 24 >> 24;
       $891 = ($890|0)==(84);
       do {
        if ($891) {
         $892 = $16;
         $893 = ((($892)) + 1|0);
         $894 = HEAP8[$893>>0]|0;
         $895 = $894 << 24 >> 24;
         $896 = ($895|0)==(78);
         if (!($896)) {
          break;
         }
         $897 = HEAP32[$17>>2]|0;
         $898 = $5;
         $899 = HEAP32[$18>>2]|0;
         $900 = $3;
         $901 = ((($900)) + 8|0);
         $902 = HEAP32[$901>>2]|0;
         $903 = (_cram_decoder_init($897,$898,$899,1,$902)|0);
         $904 = $8;
         $905 = ((($904)) + 348|0);
         $906 = ((($905)) + 156|0);
         HEAP32[$906>>2] = $903;
         $907 = ($903|0)!=(0|0);
         if ($907) {
          break L67;
         } else {
          label = 111;
          break L55;
         }
        }
       } while(0);
       $909 = $16;
       $910 = HEAP8[$909>>0]|0;
       $911 = $910 << 24 >> 24;
       $912 = ($911|0)==(70);
       do {
        if ($912) {
         $913 = $16;
         $914 = ((($913)) + 1|0);
         $915 = HEAP8[$914>>0]|0;
         $916 = $915 << 24 >> 24;
         $917 = ($916|0)==(78);
         if (!($917)) {
          break;
         }
         $918 = HEAP32[$17>>2]|0;
         $919 = $5;
         $920 = HEAP32[$18>>2]|0;
         $921 = $3;
         $922 = ((($921)) + 8|0);
         $923 = HEAP32[$922>>2]|0;
         $924 = (_cram_decoder_init($918,$919,$920,1,$923)|0);
         $925 = $8;
         $926 = ((($925)) + 348|0);
         $927 = ((($926)) + 104|0);
         HEAP32[$927>>2] = $924;
         $928 = ($924|0)!=(0|0);
         if ($928) {
          break L67;
         } else {
          label = 115;
          break L55;
         }
        }
       } while(0);
       $930 = $16;
       $931 = HEAP8[$930>>0]|0;
       $932 = $931 << 24 >> 24;
       $933 = ($932|0)==(70);
       do {
        if ($933) {
         $934 = $16;
         $935 = ((($934)) + 1|0);
         $936 = HEAP8[$935>>0]|0;
         $937 = $936 << 24 >> 24;
         $938 = ($937|0)==(67);
         if (!($938)) {
          break;
         }
         $939 = HEAP32[$17>>2]|0;
         $940 = $5;
         $941 = HEAP32[$18>>2]|0;
         $942 = $3;
         $943 = ((($942)) + 8|0);
         $944 = HEAP32[$943>>2]|0;
         $945 = (_cram_decoder_init($939,$940,$941,3,$944)|0);
         $946 = $8;
         $947 = ((($946)) + 348|0);
         $948 = ((($947)) + 108|0);
         HEAP32[$948>>2] = $945;
         $949 = ($945|0)!=(0|0);
         if ($949) {
          break L67;
         } else {
          label = 119;
          break L55;
         }
        }
       } while(0);
       $951 = $16;
       $952 = HEAP8[$951>>0]|0;
       $953 = $952 << 24 >> 24;
       $954 = ($953|0)==(70);
       do {
        if ($954) {
         $955 = $16;
         $956 = ((($955)) + 1|0);
         $957 = HEAP8[$956>>0]|0;
         $958 = $957 << 24 >> 24;
         $959 = ($958|0)==(80);
         if (!($959)) {
          break;
         }
         $960 = HEAP32[$17>>2]|0;
         $961 = $5;
         $962 = HEAP32[$18>>2]|0;
         $963 = $3;
         $964 = ((($963)) + 8|0);
         $965 = HEAP32[$964>>2]|0;
         $966 = (_cram_decoder_init($960,$961,$962,1,$965)|0);
         $967 = $8;
         $968 = ((($967)) + 348|0);
         $969 = ((($968)) + 112|0);
         HEAP32[$969>>2] = $966;
         $970 = ($966|0)!=(0|0);
         if ($970) {
          break L67;
         } else {
          label = 123;
          break L55;
         }
        }
       } while(0);
       $972 = $16;
       $973 = HEAP8[$972>>0]|0;
       $974 = $973 << 24 >> 24;
       $975 = ($974|0)==(66);
       do {
        if ($975) {
         $976 = $16;
         $977 = ((($976)) + 1|0);
         $978 = HEAP8[$977>>0]|0;
         $979 = $978 << 24 >> 24;
         $980 = ($979|0)==(83);
         if (!($980)) {
          break;
         }
         $981 = HEAP32[$17>>2]|0;
         $982 = $5;
         $983 = HEAP32[$18>>2]|0;
         $984 = $3;
         $985 = ((($984)) + 8|0);
         $986 = HEAP32[$985>>2]|0;
         $987 = (_cram_decoder_init($981,$982,$983,3,$986)|0);
         $988 = $8;
         $989 = ((($988)) + 348|0);
         $990 = ((($989)) + 124|0);
         HEAP32[$990>>2] = $987;
         $991 = ($987|0)!=(0|0);
         if ($991) {
          break L67;
         } else {
          label = 127;
          break L55;
         }
        }
       } while(0);
       $993 = $16;
       $994 = HEAP8[$993>>0]|0;
       $995 = $994 << 24 >> 24;
       $996 = ($995|0)==(73);
       do {
        if ($996) {
         $997 = $16;
         $998 = ((($997)) + 1|0);
         $999 = HEAP8[$998>>0]|0;
         $1000 = $999 << 24 >> 24;
         $1001 = ($1000|0)==(78);
         if (!($1001)) {
          break;
         }
         $1002 = HEAP32[$17>>2]|0;
         $1003 = $5;
         $1004 = HEAP32[$18>>2]|0;
         $1005 = $3;
         $1006 = ((($1005)) + 8|0);
         $1007 = HEAP32[$1006>>2]|0;
         $1008 = (_cram_decoder_init($1002,$1003,$1004,4,$1007)|0);
         $1009 = $8;
         $1010 = ((($1009)) + 348|0);
         $1011 = ((($1010)) + 52|0);
         HEAP32[$1011>>2] = $1008;
         $1012 = ($1008|0)!=(0|0);
         if ($1012) {
          break L67;
         } else {
          label = 131;
          break L55;
         }
        }
       } while(0);
       $1014 = $16;
       $1015 = HEAP8[$1014>>0]|0;
       $1016 = $1015 << 24 >> 24;
       $1017 = ($1016|0)==(83);
       do {
        if ($1017) {
         $1018 = $16;
         $1019 = ((($1018)) + 1|0);
         $1020 = HEAP8[$1019>>0]|0;
         $1021 = $1020 << 24 >> 24;
         $1022 = ($1021|0)==(67);
         if (!($1022)) {
          break;
         }
         $1023 = HEAP32[$17>>2]|0;
         $1024 = $5;
         $1025 = HEAP32[$18>>2]|0;
         $1026 = $3;
         $1027 = ((($1026)) + 8|0);
         $1028 = HEAP32[$1027>>2]|0;
         $1029 = (_cram_decoder_init($1023,$1024,$1025,4,$1028)|0);
         $1030 = $8;
         $1031 = ((($1030)) + 348|0);
         $1032 = ((($1031)) + 56|0);
         HEAP32[$1032>>2] = $1029;
         $1033 = ($1029|0)!=(0|0);
         if ($1033) {
          break L67;
         } else {
          label = 135;
          break L55;
         }
        }
       } while(0);
       $1035 = $16;
       $1036 = HEAP8[$1035>>0]|0;
       $1037 = $1036 << 24 >> 24;
       $1038 = ($1037|0)==(68);
       do {
        if ($1038) {
         $1039 = $16;
         $1040 = ((($1039)) + 1|0);
         $1041 = HEAP8[$1040>>0]|0;
         $1042 = $1041 << 24 >> 24;
         $1043 = ($1042|0)==(76);
         if (!($1043)) {
          break;
         }
         $1044 = HEAP32[$17>>2]|0;
         $1045 = $5;
         $1046 = HEAP32[$18>>2]|0;
         $1047 = $3;
         $1048 = ((($1047)) + 8|0);
         $1049 = HEAP32[$1048>>2]|0;
         $1050 = (_cram_decoder_init($1044,$1045,$1046,1,$1049)|0);
         $1051 = $8;
         $1052 = ((($1051)) + 348|0);
         $1053 = ((($1052)) + 116|0);
         HEAP32[$1053>>2] = $1050;
         $1054 = ($1050|0)!=(0|0);
         if ($1054) {
          break L67;
         } else {
          label = 139;
          break L55;
         }
        }
       } while(0);
       $1056 = $16;
       $1057 = HEAP8[$1056>>0]|0;
       $1058 = $1057 << 24 >> 24;
       $1059 = ($1058|0)==(66);
       do {
        if ($1059) {
         $1060 = $16;
         $1061 = ((($1060)) + 1|0);
         $1062 = HEAP8[$1061>>0]|0;
         $1063 = $1062 << 24 >> 24;
         $1064 = ($1063|0)==(65);
         if (!($1064)) {
          break;
         }
         $1065 = HEAP32[$17>>2]|0;
         $1066 = $5;
         $1067 = HEAP32[$18>>2]|0;
         $1068 = $3;
         $1069 = ((($1068)) + 8|0);
         $1070 = HEAP32[$1069>>2]|0;
         $1071 = (_cram_decoder_init($1065,$1066,$1067,3,$1070)|0);
         $1072 = $8;
         $1073 = ((($1072)) + 348|0);
         $1074 = ((($1073)) + 120|0);
         HEAP32[$1074>>2] = $1071;
         $1075 = ($1071|0)!=(0|0);
         if ($1075) {
          break L67;
         } else {
          label = 143;
          break L55;
         }
        }
       } while(0);
       $1077 = $16;
       $1078 = HEAP8[$1077>>0]|0;
       $1079 = $1078 << 24 >> 24;
       $1080 = ($1079|0)==(66);
       do {
        if ($1080) {
         $1081 = $16;
         $1082 = ((($1081)) + 1|0);
         $1083 = HEAP8[$1082>>0]|0;
         $1084 = $1083 << 24 >> 24;
         $1085 = ($1084|0)==(66);
         if (!($1085)) {
          break;
         }
         $1086 = HEAP32[$17>>2]|0;
         $1087 = $5;
         $1088 = HEAP32[$18>>2]|0;
         $1089 = $3;
         $1090 = ((($1089)) + 8|0);
         $1091 = HEAP32[$1090>>2]|0;
         $1092 = (_cram_decoder_init($1086,$1087,$1088,4,$1091)|0);
         $1093 = $8;
         $1094 = ((($1093)) + 348|0);
         $1095 = ((($1094)) + 148|0);
         HEAP32[$1095>>2] = $1092;
         $1096 = ($1092|0)!=(0|0);
         if ($1096) {
          break L67;
         } else {
          label = 147;
          break L55;
         }
        }
       } while(0);
       $1098 = $16;
       $1099 = HEAP8[$1098>>0]|0;
       $1100 = $1099 << 24 >> 24;
       $1101 = ($1100|0)==(82);
       do {
        if ($1101) {
         $1102 = $16;
         $1103 = ((($1102)) + 1|0);
         $1104 = HEAP8[$1103>>0]|0;
         $1105 = $1104 << 24 >> 24;
         $1106 = ($1105|0)==(83);
         if (!($1106)) {
          break;
         }
         $1107 = HEAP32[$17>>2]|0;
         $1108 = $5;
         $1109 = HEAP32[$18>>2]|0;
         $1110 = $3;
         $1111 = ((($1110)) + 8|0);
         $1112 = HEAP32[$1111>>2]|0;
         $1113 = (_cram_decoder_init($1107,$1108,$1109,1,$1112)|0);
         $1114 = $8;
         $1115 = ((($1114)) + 348|0);
         $1116 = ((($1115)) + 136|0);
         HEAP32[$1116>>2] = $1113;
         $1117 = ($1113|0)!=(0|0);
         if ($1117) {
          break L67;
         } else {
          label = 151;
          break L55;
         }
        }
       } while(0);
       $1119 = $16;
       $1120 = HEAP8[$1119>>0]|0;
       $1121 = $1120 << 24 >> 24;
       $1122 = ($1121|0)==(80);
       do {
        if ($1122) {
         $1123 = $16;
         $1124 = ((($1123)) + 1|0);
         $1125 = HEAP8[$1124>>0]|0;
         $1126 = $1125 << 24 >> 24;
         $1127 = ($1126|0)==(68);
         if (!($1127)) {
          break;
         }
         $1128 = HEAP32[$17>>2]|0;
         $1129 = $5;
         $1130 = HEAP32[$18>>2]|0;
         $1131 = $3;
         $1132 = ((($1131)) + 8|0);
         $1133 = HEAP32[$1132>>2]|0;
         $1134 = (_cram_decoder_init($1128,$1129,$1130,1,$1133)|0);
         $1135 = $8;
         $1136 = ((($1135)) + 348|0);
         $1137 = ((($1136)) + 140|0);
         HEAP32[$1137>>2] = $1134;
         $1138 = ($1134|0)!=(0|0);
         if ($1138) {
          break L67;
         } else {
          label = 155;
          break L55;
         }
        }
       } while(0);
       $1140 = $16;
       $1141 = HEAP8[$1140>>0]|0;
       $1142 = $1141 << 24 >> 24;
       $1143 = ($1142|0)==(72);
       do {
        if ($1143) {
         $1144 = $16;
         $1145 = ((($1144)) + 1|0);
         $1146 = HEAP8[$1145>>0]|0;
         $1147 = $1146 << 24 >> 24;
         $1148 = ($1147|0)==(67);
         if (!($1148)) {
          break;
         }
         $1149 = HEAP32[$17>>2]|0;
         $1150 = $5;
         $1151 = HEAP32[$18>>2]|0;
         $1152 = $3;
         $1153 = ((($1152)) + 8|0);
         $1154 = HEAP32[$1153>>2]|0;
         $1155 = (_cram_decoder_init($1149,$1150,$1151,1,$1154)|0);
         $1156 = $8;
         $1157 = ((($1156)) + 348|0);
         $1158 = ((($1157)) + 144|0);
         HEAP32[$1158>>2] = $1155;
         $1159 = ($1155|0)!=(0|0);
         if ($1159) {
          break L67;
         } else {
          label = 159;
          break L55;
         }
        }
       } while(0);
       $1161 = $16;
       $1162 = HEAP8[$1161>>0]|0;
       $1163 = $1162 << 24 >> 24;
       $1164 = ($1163|0)==(77);
       do {
        if ($1164) {
         $1165 = $16;
         $1166 = ((($1165)) + 1|0);
         $1167 = HEAP8[$1166>>0]|0;
         $1168 = $1167 << 24 >> 24;
         $1169 = ($1168|0)==(81);
         if (!($1169)) {
          break;
         }
         $1170 = HEAP32[$17>>2]|0;
         $1171 = $5;
         $1172 = HEAP32[$18>>2]|0;
         $1173 = $3;
         $1174 = ((($1173)) + 8|0);
         $1175 = HEAP32[$1174>>2]|0;
         $1176 = (_cram_decoder_init($1170,$1171,$1172,1,$1175)|0);
         $1177 = $8;
         $1178 = ((($1177)) + 348|0);
         $1179 = ((($1178)) + 76|0);
         HEAP32[$1179>>2] = $1176;
         $1180 = ($1176|0)!=(0|0);
         if ($1180) {
          break L67;
         } else {
          label = 163;
          break L55;
         }
        }
       } while(0);
       $1182 = $16;
       $1183 = HEAP8[$1182>>0]|0;
       $1184 = $1183 << 24 >> 24;
       $1185 = ($1184|0)==(82);
       do {
        if ($1185) {
         $1186 = $16;
         $1187 = ((($1186)) + 1|0);
         $1188 = HEAP8[$1187>>0]|0;
         $1189 = $1188 << 24 >> 24;
         $1190 = ($1189|0)==(78);
         if (!($1190)) {
          break;
         }
         $1191 = HEAP32[$17>>2]|0;
         $1192 = $5;
         $1193 = HEAP32[$18>>2]|0;
         $1194 = $3;
         $1195 = ((($1194)) + 8|0);
         $1196 = HEAP32[$1195>>2]|0;
         $1197 = (_cram_decoder_init($1191,$1192,$1193,5,$1196)|0);
         $1198 = $8;
         $1199 = ((($1198)) + 348|0);
         $1200 = ((($1199)) + 44|0);
         HEAP32[$1200>>2] = $1197;
         $1201 = ($1197|0)!=(0|0);
         if ($1201) {
          break L67;
         } else {
          label = 167;
          break L55;
         }
        }
       } while(0);
       $1203 = $16;
       $1204 = HEAP8[$1203>>0]|0;
       $1205 = $1204 << 24 >> 24;
       $1206 = ($1205|0)==(81);
       do {
        if ($1206) {
         $1207 = $16;
         $1208 = ((($1207)) + 1|0);
         $1209 = HEAP8[$1208>>0]|0;
         $1210 = $1209 << 24 >> 24;
         $1211 = ($1210|0)==(83);
         if (!($1211)) {
          break;
         }
         $1212 = HEAP32[$17>>2]|0;
         $1213 = $5;
         $1214 = HEAP32[$18>>2]|0;
         $1215 = $3;
         $1216 = ((($1215)) + 8|0);
         $1217 = HEAP32[$1216>>2]|0;
         $1218 = (_cram_decoder_init($1212,$1213,$1214,3,$1217)|0);
         $1219 = $8;
         $1220 = ((($1219)) + 348|0);
         $1221 = ((($1220)) + 48|0);
         HEAP32[$1221>>2] = $1218;
         $1222 = ($1218|0)!=(0|0);
         if ($1222) {
          break L67;
         } else {
          label = 171;
          break L55;
         }
        }
       } while(0);
       $1224 = $16;
       $1225 = HEAP8[$1224>>0]|0;
       $1226 = $1225 << 24 >> 24;
       $1227 = ($1226|0)==(81);
       do {
        if ($1227) {
         $1228 = $16;
         $1229 = ((($1228)) + 1|0);
         $1230 = HEAP8[$1229>>0]|0;
         $1231 = $1230 << 24 >> 24;
         $1232 = ($1231|0)==(81);
         if (!($1232)) {
          break;
         }
         $1233 = HEAP32[$17>>2]|0;
         $1234 = $5;
         $1235 = HEAP32[$18>>2]|0;
         $1236 = $3;
         $1237 = ((($1236)) + 8|0);
         $1238 = HEAP32[$1237>>2]|0;
         $1239 = (_cram_decoder_init($1233,$1234,$1235,4,$1238)|0);
         $1240 = $8;
         $1241 = ((($1240)) + 348|0);
         $1242 = ((($1241)) + 152|0);
         HEAP32[$1242>>2] = $1239;
         $1243 = ($1239|0)!=(0|0);
         if ($1243) {
          break L67;
         } else {
          label = 175;
          break L55;
         }
        }
       } while(0);
       $1245 = $16;
       $1246 = HEAP8[$1245>>0]|0;
       $1247 = $1246 << 24 >> 24;
       $1248 = ($1247|0)==(84);
       do {
        if ($1248) {
         $1249 = $16;
         $1250 = ((($1249)) + 1|0);
         $1251 = HEAP8[$1250>>0]|0;
         $1252 = $1251 << 24 >> 24;
         $1253 = ($1252|0)==(76);
         if (!($1253)) {
          break;
         }
         $1254 = HEAP32[$17>>2]|0;
         $1255 = $5;
         $1256 = HEAP32[$18>>2]|0;
         $1257 = $3;
         $1258 = ((($1257)) + 8|0);
         $1259 = HEAP32[$1258>>2]|0;
         $1260 = (_cram_decoder_init($1254,$1255,$1256,1,$1259)|0);
         $1261 = $8;
         $1262 = ((($1261)) + 348|0);
         $1263 = ((($1262)) + 128|0);
         HEAP32[$1263>>2] = $1260;
         $1264 = ($1260|0)!=(0|0);
         if ($1264) {
          break L67;
         } else {
          label = 179;
          break L55;
         }
        }
       } while(0);
       $1266 = $16;
       $1267 = HEAP8[$1266>>0]|0;
       $1268 = $1267 << 24 >> 24;
       $1269 = ($1268|0)==(84);
       if ($1269) {
        $1270 = $16;
        $1271 = ((($1270)) + 1|0);
        $1272 = HEAP8[$1271>>0]|0;
        $1273 = $1272 << 24 >> 24;
        $1274 = ($1273|0)==(77);
        if ($1274) {
         break;
        }
       }
       $1275 = $16;
       $1276 = HEAP8[$1275>>0]|0;
       $1277 = $1276 << 24 >> 24;
       $1278 = ($1277|0)==(84);
       if ($1278) {
        $1279 = $16;
        $1280 = ((($1279)) + 1|0);
        $1281 = HEAP8[$1280>>0]|0;
        $1282 = $1281 << 24 >> 24;
        $1283 = ($1282|0)==(86);
        if ($1283) {
         break;
        }
       }
       $1284 = HEAP32[2410]|0;
       $1285 = $16;
       HEAP32[$vararg_buffer2>>2] = $1285;
       (_fprintf($1284,20839,$vararg_buffer2)|0);
      }
     } while(0);
     $1286 = HEAP32[$18>>2]|0;
     $1287 = $5;
     $1288 = (($1287) + ($1286)|0);
     $5 = $1288;
     $1289 = $16;
     $1290 = HEAP8[$1289>>0]|0;
     $1291 = $1290 << 24 >> 24;
     $1292 = ($1291*3)|0;
     $1293 = $16;
     $1294 = ((($1293)) + 1|0);
     $1295 = HEAP8[$1294>>0]|0;
     $1296 = $1295 << 24 >> 24;
     $1297 = (($1292) + ($1296))|0;
     $1298 = $1297 & 31;
     $1299 = $8;
     $1300 = ((($1299)) + 92|0);
     $1301 = (($1300) + ($1298<<2)|0);
     $1302 = HEAP32[$1301>>2]|0;
     $1303 = $19;
     $1304 = ((($1303)) + 20|0);
     HEAP32[$1304>>2] = $1302;
     $1305 = $19;
     $1306 = $16;
     $1307 = HEAP8[$1306>>0]|0;
     $1308 = $1307 << 24 >> 24;
     $1309 = ($1308*3)|0;
     $1310 = $16;
     $1311 = ((($1310)) + 1|0);
     $1312 = HEAP8[$1311>>0]|0;
     $1313 = $1312 << 24 >> 24;
     $1314 = (($1309) + ($1313))|0;
     $1315 = $1314 & 31;
     $1316 = $8;
     $1317 = ((($1316)) + 92|0);
     $1318 = (($1317) + ($1315<<2)|0);
     HEAP32[$1318>>2] = $1305;
    }
    $1319 = $9;
    $1320 = (($1319) + 1)|0;
    $9 = $1320;
   }
   switch (label|0) {
    case 55: {
     $580 = $19;
     _free($580);
     $581 = $8;
     _cram_free_compression_header($581);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 59: {
     $634 = $19;
     _free($634);
     $635 = $8;
     _cram_free_compression_header($635);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 63: {
     $656 = $8;
     _cram_free_compression_header($656);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 67: {
     $677 = $8;
     _cram_free_compression_header($677);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 71: {
     $698 = $8;
     _cram_free_compression_header($698);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 75: {
     $719 = $8;
     _cram_free_compression_header($719);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 79: {
     $740 = $8;
     _cram_free_compression_header($740);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 83: {
     $761 = $8;
     _cram_free_compression_header($761);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 87: {
     $782 = $8;
     _cram_free_compression_header($782);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 91: {
     $803 = $8;
     _cram_free_compression_header($803);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 95: {
     $824 = $8;
     _cram_free_compression_header($824);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 99: {
     $845 = $8;
     _cram_free_compression_header($845);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 103: {
     $866 = $8;
     _cram_free_compression_header($866);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 107: {
     $887 = $8;
     _cram_free_compression_header($887);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 111: {
     $908 = $8;
     _cram_free_compression_header($908);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 115: {
     $929 = $8;
     _cram_free_compression_header($929);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 119: {
     $950 = $8;
     _cram_free_compression_header($950);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 123: {
     $971 = $8;
     _cram_free_compression_header($971);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 127: {
     $992 = $8;
     _cram_free_compression_header($992);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 131: {
     $1013 = $8;
     _cram_free_compression_header($1013);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 135: {
     $1034 = $8;
     _cram_free_compression_header($1034);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 139: {
     $1055 = $8;
     _cram_free_compression_header($1055);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 143: {
     $1076 = $8;
     _cram_free_compression_header($1076);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 147: {
     $1097 = $8;
     _cram_free_compression_header($1097);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 151: {
     $1118 = $8;
     _cram_free_compression_header($1118);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 155: {
     $1139 = $8;
     _cram_free_compression_header($1139);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 159: {
     $1160 = $8;
     _cram_free_compression_header($1160);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 163: {
     $1181 = $8;
     _cram_free_compression_header($1181);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 167: {
     $1202 = $8;
     _cram_free_compression_header($1202);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 171: {
     $1223 = $8;
     _cram_free_compression_header($1223);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 175: {
     $1244 = $8;
     _cram_free_compression_header($1244);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 179: {
     $1265 = $8;
     _cram_free_compression_header($1265);
     $2 = 0;
     $1462 = $2;
     STACKTOP = sp;return ($1462|0);
     break;
    }
    case 187: {
     $1321 = $7;
     $1322 = $570;
     $1323 = $1321;
     $1324 = (($1322) - ($1323))|0;
     $1325 = HEAP32[$10>>2]|0;
     $1326 = ($1324|0)!=($1325|0);
     if ($1326) {
      $1327 = $8;
      _cram_free_compression_header($1327);
      $2 = 0;
      $1462 = $2;
      STACKTOP = sp;return ($1462|0);
     }
     $1328 = $5;
     $1329 = $6;
     $1330 = (_safe_itf8_get_784($1328,$1329,$10)|0);
     $1331 = $5;
     $1332 = (($1331) + ($1330)|0);
     $5 = $1332;
     $1333 = $5;
     $7 = $1333;
     $1334 = $5;
     $1335 = $6;
     $1336 = (_safe_itf8_get_784($1334,$1335,$11)|0);
     $1337 = $5;
     $1338 = (($1337) + ($1336)|0);
     $5 = $1338;
     $9 = 0;
     while(1) {
      $1339 = $9;
      $1340 = HEAP32[$11>>2]|0;
      $1341 = ($1339|0)<($1340|0);
      if (!($1341)) {
       label = 199;
       break;
      }
      HEAP32[$20>>2] = 0;
      HEAP32[$21>>2] = 0;
      $1342 = (_malloc(24)|0);
      $22 = $1342;
      $1343 = $22;
      $1344 = ($1343|0)!=(0|0);
      if (!($1344)) {
       label = 193;
       break;
      }
      $1345 = $6;
      $1346 = $5;
      $1347 = $1345;
      $1348 = $1346;
      $1349 = (($1347) - ($1348))|0;
      $1350 = ($1349|0)<(6);
      if ($1350) {
       label = 193;
       break;
      }
      $1353 = $5;
      $1354 = ((($1353)) + 1|0);
      $23 = $1354;
      $1355 = $23;
      $1356 = HEAP8[$1355>>0]|0;
      $1357 = $1356 << 24 >> 24;
      $1358 = $1357 << 16;
      $1359 = $23;
      $1360 = ((($1359)) + 1|0);
      $1361 = HEAP8[$1360>>0]|0;
      $1362 = $1361 << 24 >> 24;
      $1363 = $1362 << 8;
      $1364 = $1358 | $1363;
      $1365 = $23;
      $1366 = ((($1365)) + 2|0);
      $1367 = HEAP8[$1366>>0]|0;
      $1368 = $1367 << 24 >> 24;
      $1369 = $1364 | $1368;
      $1370 = $22;
      HEAP32[$1370>>2] = $1369;
      $1371 = $5;
      $1372 = ((($1371)) + 4|0);
      $5 = $1372;
      $1373 = $5;
      $1374 = $6;
      $1375 = (_safe_itf8_get_784($1373,$1374,$20)|0);
      $1376 = $5;
      $1377 = (($1376) + ($1375)|0);
      $5 = $1377;
      $1378 = $5;
      $1379 = $6;
      $1380 = (_safe_itf8_get_784($1378,$1379,$21)|0);
      $1381 = $5;
      $1382 = (($1381) + ($1380)|0);
      $5 = $1382;
      $1383 = HEAP32[$20>>2]|0;
      $1384 = $22;
      $1385 = ((($1384)) + 4|0);
      HEAP32[$1385>>2] = $1383;
      $1386 = HEAP32[$21>>2]|0;
      $1387 = $22;
      $1388 = ((($1387)) + 12|0);
      HEAP32[$1388>>2] = $1386;
      $1389 = $5;
      $1390 = $4;
      $1391 = ((($1390)) + 32|0);
      $1392 = HEAP32[$1391>>2]|0;
      $1393 = $1389;
      $1394 = $1392;
      $1395 = (($1393) - ($1394))|0;
      $1396 = $22;
      $1397 = ((($1396)) + 8|0);
      HEAP32[$1397>>2] = $1395;
      $1398 = HEAP32[$21>>2]|0;
      $1399 = ($1398|0)<(0);
      if ($1399) {
       label = 197;
       break;
      }
      $1400 = $6;
      $1401 = $5;
      $1402 = $1400;
      $1403 = $1401;
      $1404 = (($1402) - ($1403))|0;
      $1405 = HEAP32[$21>>2]|0;
      $1406 = ($1404|0)<($1405|0);
      if ($1406) {
       label = 197;
       break;
      }
      $1407 = HEAP32[$20>>2]|0;
      $1408 = $5;
      $1409 = HEAP32[$21>>2]|0;
      $1410 = $3;
      $1411 = ((($1410)) + 8|0);
      $1412 = HEAP32[$1411>>2]|0;
      $1413 = (_cram_decoder_init($1407,$1408,$1409,5,$1412)|0);
      $1414 = $22;
      $1415 = ((($1414)) + 16|0);
      HEAP32[$1415>>2] = $1413;
      $1416 = ($1413|0)!=(0|0);
      if (!($1416)) {
       label = 197;
       break;
      }
      $1419 = HEAP32[$21>>2]|0;
      $1420 = $5;
      $1421 = (($1420) + ($1419)|0);
      $5 = $1421;
      $1422 = $23;
      $1423 = HEAP8[$1422>>0]|0;
      $1424 = $1423 << 24 >> 24;
      $1425 = ($1424*3)|0;
      $1426 = $23;
      $1427 = ((($1426)) + 1|0);
      $1428 = HEAP8[$1427>>0]|0;
      $1429 = $1428 << 24 >> 24;
      $1430 = (($1425) + ($1429))|0;
      $1431 = $1430 & 31;
      $1432 = $8;
      $1433 = ((($1432)) + 220|0);
      $1434 = (($1433) + ($1431<<2)|0);
      $1435 = HEAP32[$1434>>2]|0;
      $1436 = $22;
      $1437 = ((($1436)) + 20|0);
      HEAP32[$1437>>2] = $1435;
      $1438 = $22;
      $1439 = $23;
      $1440 = HEAP8[$1439>>0]|0;
      $1441 = $1440 << 24 >> 24;
      $1442 = ($1441*3)|0;
      $1443 = $23;
      $1444 = ((($1443)) + 1|0);
      $1445 = HEAP8[$1444>>0]|0;
      $1446 = $1445 << 24 >> 24;
      $1447 = (($1442) + ($1446))|0;
      $1448 = $1447 & 31;
      $1449 = $8;
      $1450 = ((($1449)) + 220|0);
      $1451 = (($1450) + ($1448<<2)|0);
      HEAP32[$1451>>2] = $1438;
      $1452 = $9;
      $1453 = (($1452) + 1)|0;
      $9 = $1453;
     }
     if ((label|0) == 193) {
      $1351 = $22;
      _free($1351);
      $1352 = $8;
      _cram_free_compression_header($1352);
      $2 = 0;
      $1462 = $2;
      STACKTOP = sp;return ($1462|0);
     }
     else if ((label|0) == 197) {
      $1417 = $8;
      _cram_free_compression_header($1417);
      $1418 = $22;
      _free($1418);
      $2 = 0;
      $1462 = $2;
      STACKTOP = sp;return ($1462|0);
     }
     else if ((label|0) == 199) {
      $1454 = $5;
      $1455 = $7;
      $1456 = $1454;
      $1457 = $1455;
      $1458 = (($1456) - ($1457))|0;
      $1459 = HEAP32[$10>>2]|0;
      $1460 = ($1458|0)!=($1459|0);
      $1461 = $8;
      if ($1460) {
       _cram_free_compression_header($1461);
       $2 = 0;
       $1462 = $2;
       STACKTOP = sp;return ($1462|0);
      } else {
       $2 = $1461;
       $1462 = $2;
       STACKTOP = sp;return ($1462|0);
      }
     }
     break;
    }
   }
   break;
  }
 }
 return (0)|0;
}
function _kh_init_map_785() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,28)|0);
 return ($0|0);
}
function _kh_put_map_788($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $4;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16>>>0)>=($19>>>0);
 do {
  if ($20) {
   $21 = $4;
   $22 = HEAP32[$21>>2]|0;
   $23 = $4;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 << 1;
   $27 = ($22>>>0)>($26>>>0);
   $28 = $4;
   $29 = $4;
   $30 = HEAP32[$29>>2]|0;
   if ($27) {
    $31 = (($30) - 1)|0;
    $32 = (_kh_resize_map_798($28,$31)|0);
    $33 = ($32|0)<(0);
    if (!($33)) {
     break;
    }
    $34 = $6;
    HEAP32[$34>>2] = -1;
    $35 = $4;
    $36 = HEAP32[$35>>2]|0;
    $3 = $36;
    $230 = $3;
    STACKTOP = sp;return ($230|0);
   } else {
    $37 = (($30) + 1)|0;
    $38 = (_kh_resize_map_798($28,$37)|0);
    $39 = ($38|0)<(0);
    if (!($39)) {
     break;
    }
    $40 = $6;
    HEAP32[$40>>2] = -1;
    $41 = $4;
    $42 = HEAP32[$41>>2]|0;
    $3 = $42;
    $230 = $3;
    STACKTOP = sp;return ($230|0);
   }
  }
 } while(0);
 $43 = $4;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) - 1)|0;
 $12 = $45;
 $13 = 0;
 $46 = $4;
 $47 = HEAP32[$46>>2]|0;
 $10 = $47;
 $7 = $47;
 $48 = $5;
 $49 = (___ac_X31_hash_string_799($48)|0);
 $8 = $49;
 $50 = $8;
 $51 = $12;
 $52 = $50 & $51;
 $9 = $52;
 $53 = $9;
 $54 = $53 >>> 4;
 $55 = $4;
 $56 = ((($55)) + 16|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) + ($54<<2)|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $9;
 $61 = $60 & 15;
 $62 = $61 << 1;
 $63 = $59 >>> $62;
 $64 = $63 & 2;
 $65 = ($64|0)!=(0);
 $66 = $9;
 do {
  if ($65) {
   $7 = $66;
  } else {
   $11 = $66;
   while(1) {
    $67 = $9;
    $68 = $67 >>> 4;
    $69 = $4;
    $70 = ((($69)) + 16|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($71) + ($68<<2)|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $9;
    $75 = $74 & 15;
    $76 = $75 << 1;
    $77 = $73 >>> $76;
    $78 = $77 & 2;
    $79 = ($78|0)!=(0);
    if ($79) {
     break;
    }
    $80 = $9;
    $81 = $80 >>> 4;
    $82 = $4;
    $83 = ((($82)) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($84) + ($81<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $9;
    $88 = $87 & 15;
    $89 = $88 << 1;
    $90 = $86 >>> $89;
    $91 = $90 & 1;
    $92 = ($91|0)!=(0);
    if (!($92)) {
     $93 = $9;
     $94 = $4;
     $95 = ((($94)) + 20|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = (($96) + ($93<<2)|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $5;
     $100 = (_strcmp($98,$99)|0);
     $101 = ($100|0)==(0);
     $102 = $101 ^ 1;
     if (!($102)) {
      break;
     }
    }
    $103 = $9;
    $104 = $103 >>> 4;
    $105 = $4;
    $106 = ((($105)) + 16|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (($107) + ($104<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $9;
    $111 = $110 & 15;
    $112 = $111 << 1;
    $113 = $109 >>> $112;
    $114 = $113 & 1;
    $115 = ($114|0)!=(0);
    if ($115) {
     $116 = $9;
     $10 = $116;
    }
    $117 = $9;
    $118 = $13;
    $119 = (($118) + 1)|0;
    $13 = $119;
    $120 = (($117) + ($119))|0;
    $121 = $12;
    $122 = $120 & $121;
    $9 = $122;
    $123 = $9;
    $124 = $11;
    $125 = ($123|0)==($124|0);
    if ($125) {
     label = 16;
     break;
    }
   }
   if ((label|0) == 16) {
    $126 = $10;
    $7 = $126;
   }
   $127 = $7;
   $128 = $4;
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = $9;
    $132 = $131 >>> 4;
    $133 = $4;
    $134 = ((($133)) + 16|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + ($132<<2)|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $9;
    $139 = $138 & 15;
    $140 = $139 << 1;
    $141 = $137 >>> $140;
    $142 = $141 & 2;
    $143 = ($142|0)!=(0);
    if ($143) {
     $144 = $10;
     $145 = $4;
     $146 = HEAP32[$145>>2]|0;
     $147 = ($144|0)!=($146|0);
     if ($147) {
      $148 = $10;
      $7 = $148;
      break;
     }
    }
    $149 = $9;
    $7 = $149;
   }
  }
 } while(0);
 $150 = $7;
 $151 = $150 >>> 4;
 $152 = $4;
 $153 = ((($152)) + 16|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = (($154) + ($151<<2)|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $7;
 $158 = $157 & 15;
 $159 = $158 << 1;
 $160 = $156 >>> $159;
 $161 = $160 & 2;
 $162 = ($161|0)!=(0);
 do {
  if ($162) {
   $163 = $5;
   $164 = $7;
   $165 = $4;
   $166 = ((($165)) + 20|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = (($167) + ($164<<2)|0);
   HEAP32[$168>>2] = $163;
   $169 = $7;
   $170 = $169 & 15;
   $171 = $170 << 1;
   $172 = 3 << $171;
   $173 = $172 ^ -1;
   $174 = $7;
   $175 = $174 >>> 4;
   $176 = $4;
   $177 = ((($176)) + 16|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = (($178) + ($175<<2)|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $180 & $173;
   HEAP32[$179>>2] = $181;
   $182 = $4;
   $183 = ((($182)) + 4|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (($184) + 1)|0;
   HEAP32[$183>>2] = $185;
   $186 = $4;
   $187 = ((($186)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = (($188) + 1)|0;
   HEAP32[$187>>2] = $189;
   $190 = $6;
   HEAP32[$190>>2] = 1;
  } else {
   $191 = $7;
   $192 = $191 >>> 4;
   $193 = $4;
   $194 = ((($193)) + 16|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = (($195) + ($192<<2)|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $7;
   $199 = $198 & 15;
   $200 = $199 << 1;
   $201 = $197 >>> $200;
   $202 = $201 & 1;
   $203 = ($202|0)!=(0);
   if ($203) {
    $204 = $5;
    $205 = $7;
    $206 = $4;
    $207 = ((($206)) + 20|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = (($208) + ($205<<2)|0);
    HEAP32[$209>>2] = $204;
    $210 = $7;
    $211 = $210 & 15;
    $212 = $211 << 1;
    $213 = 3 << $212;
    $214 = $213 ^ -1;
    $215 = $7;
    $216 = $215 >>> 4;
    $217 = $4;
    $218 = ((($217)) + 16|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = (($219) + ($216<<2)|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = $221 & $214;
    HEAP32[$220>>2] = $222;
    $223 = $4;
    $224 = ((($223)) + 4|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = (($225) + 1)|0;
    HEAP32[$224>>2] = $226;
    $227 = $6;
    HEAP32[$227>>2] = 2;
    break;
   } else {
    $228 = $6;
    HEAP32[$228>>2] = 0;
    break;
   }
  }
 } while(0);
 $229 = $7;
 $3 = $229;
 $230 = $3;
 STACKTOP = sp;return ($230|0);
}
function _kh_resize_map_798($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $10 = sp + 24|0;
 $16 = sp;
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = 1;
 $17 = $4;
 $18 = (($17) + -1)|0;
 $4 = $18;
 $19 = $4;
 $20 = $19 >>> 1;
 $21 = $4;
 $22 = $21 | $20;
 $4 = $22;
 $23 = $4;
 $24 = $23 >>> 2;
 $25 = $4;
 $26 = $25 | $24;
 $4 = $26;
 $27 = $4;
 $28 = $27 >>> 4;
 $29 = $4;
 $30 = $29 | $28;
 $4 = $30;
 $31 = $4;
 $32 = $31 >>> 8;
 $33 = $4;
 $34 = $33 | $32;
 $4 = $34;
 $35 = $4;
 $36 = $35 >>> 16;
 $37 = $4;
 $38 = $37 | $36;
 $4 = $38;
 $39 = $4;
 $40 = (($39) + 1)|0;
 $4 = $40;
 $41 = $4;
 $42 = ($41>>>0)<(4);
 $$ = $42 ? 4 : $40;
 $4 = $$;
 $43 = $3;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $4;
 $47 = (+($46>>>0));
 $48 = $47 * 0.77000000000000001;
 $49 = $48 + 0.5;
 $50 = (~~(($49))>>>0);
 $51 = ($45>>>0)>=($50>>>0);
 do {
  if ($51) {
   $6 = 0;
  } else {
   $52 = $4;
   $53 = ($52>>>0)<(16);
   $54 = $4;
   $55 = $54 >>> 4;
   $56 = $53 ? 1 : $55;
   $57 = $56<<2;
   $58 = (_malloc($57)|0);
   $5 = $58;
   $59 = $5;
   $60 = ($59|0)!=(0|0);
   if (!($60)) {
    $2 = -1;
    $279 = $2;
    STACKTOP = sp;return ($279|0);
   }
   $61 = $5;
   $62 = $4;
   $63 = ($62>>>0)<(16);
   $64 = $4;
   $65 = $64 >>> 4;
   $66 = $63 ? 1 : $65;
   $67 = $66<<2;
   _memset(($61|0),-86,($67|0))|0;
   $68 = $3;
   $69 = HEAP32[$68>>2]|0;
   $70 = $4;
   $71 = ($69>>>0)<($70>>>0);
   if ($71) {
    $72 = $3;
    $73 = ((($72)) + 20|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $4;
    $76 = $75<<2;
    $77 = (_realloc($74,$76)|0);
    $7 = $77;
    $78 = $7;
    $79 = ($78|0)!=(0|0);
    if (!($79)) {
     $80 = $5;
     _free($80);
     $2 = -1;
     $279 = $2;
     STACKTOP = sp;return ($279|0);
    }
    $81 = $7;
    $82 = $3;
    $83 = ((($82)) + 20|0);
    HEAP32[$83>>2] = $81;
    $84 = $3;
    $85 = ((($84)) + 24|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $4;
    $88 = $87<<2;
    $89 = (_realloc($86,$88)|0);
    $8 = $89;
    $90 = $8;
    $91 = ($90|0)!=(0|0);
    if ($91) {
     $93 = $8;
     $94 = $3;
     $95 = ((($94)) + 24|0);
     HEAP32[$95>>2] = $93;
     break;
    }
    $92 = $5;
    _free($92);
    $2 = -1;
    $279 = $2;
    STACKTOP = sp;return ($279|0);
   }
  }
 } while(0);
 $96 = $6;
 $97 = ($96|0)!=(0);
 if ($97) {
  $6 = 0;
  while(1) {
   $98 = $6;
   $99 = $3;
   $100 = HEAP32[$99>>2]|0;
   $101 = ($98|0)!=($100|0);
   if (!($101)) {
    break;
   }
   $102 = $6;
   $103 = $102 >>> 4;
   $104 = $3;
   $105 = ((($104)) + 16|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + ($103<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $6;
   $110 = $109 & 15;
   $111 = $110 << 1;
   $112 = $108 >>> $111;
   $113 = $112 & 3;
   $114 = ($113|0)==(0);
   if ($114) {
    $115 = $6;
    $116 = $3;
    $117 = ((($116)) + 20|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (($118) + ($115<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $9 = $120;
    $121 = $4;
    $122 = (($121) - 1)|0;
    $11 = $122;
    $123 = $6;
    $124 = $3;
    $125 = ((($124)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = (($126) + ($123<<2)|0);
    ;HEAP32[$10>>2]=HEAP32[$127>>2]|0;
    $128 = $6;
    $129 = $128 & 15;
    $130 = $129 << 1;
    $131 = 1 << $130;
    $132 = $6;
    $133 = $132 >>> 4;
    $134 = $3;
    $135 = ((($134)) + 16|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (($136) + ($133<<2)|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = $138 | $131;
    HEAP32[$137>>2] = $139;
    while(1) {
     $14 = 0;
     $140 = $9;
     $141 = (___ac_X31_hash_string_799($140)|0);
     $12 = $141;
     $142 = $12;
     $143 = $11;
     $144 = $142 & $143;
     $13 = $144;
     while(1) {
      $145 = $13;
      $146 = $145 >>> 4;
      $147 = $5;
      $148 = (($147) + ($146<<2)|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = $13;
      $151 = $150 & 15;
      $152 = $151 << 1;
      $153 = $149 >>> $152;
      $154 = $153 & 2;
      $155 = ($154|0)!=(0);
      $156 = $155 ^ 1;
      $157 = $13;
      if (!($156)) {
       break;
      }
      $158 = $14;
      $159 = (($158) + 1)|0;
      $14 = $159;
      $160 = (($157) + ($159))|0;
      $161 = $11;
      $162 = $160 & $161;
      $13 = $162;
     }
     $163 = $157 & 15;
     $164 = $163 << 1;
     $165 = 2 << $164;
     $166 = $165 ^ -1;
     $167 = $13;
     $168 = $167 >>> 4;
     $169 = $5;
     $170 = (($169) + ($168<<2)|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = $171 & $166;
     HEAP32[$170>>2] = $172;
     $173 = $13;
     $174 = $3;
     $175 = HEAP32[$174>>2]|0;
     $176 = ($173>>>0)<($175>>>0);
     if (!($176)) {
      break;
     }
     $177 = $13;
     $178 = $177 >>> 4;
     $179 = $3;
     $180 = ((($179)) + 16|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = (($181) + ($178<<2)|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = $13;
     $185 = $184 & 15;
     $186 = $185 << 1;
     $187 = $183 >>> $186;
     $188 = $187 & 3;
     $189 = ($188|0)==(0);
     if (!($189)) {
      break;
     }
     $190 = $13;
     $191 = $3;
     $192 = ((($191)) + 20|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (($193) + ($190<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $15 = $195;
     $196 = $9;
     $197 = $13;
     $198 = $3;
     $199 = ((($198)) + 20|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = (($200) + ($197<<2)|0);
     HEAP32[$201>>2] = $196;
     $202 = $15;
     $9 = $202;
     $203 = $13;
     $204 = $3;
     $205 = ((($204)) + 24|0);
     $206 = HEAP32[$205>>2]|0;
     $207 = (($206) + ($203<<2)|0);
     ;HEAP32[$16>>2]=HEAP32[$207>>2]|0;
     $208 = $13;
     $209 = $3;
     $210 = ((($209)) + 24|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = (($211) + ($208<<2)|0);
     ;HEAP32[$212>>2]=HEAP32[$10>>2]|0;
     ;HEAP32[$10>>2]=HEAP32[$16>>2]|0;
     $213 = $13;
     $214 = $213 & 15;
     $215 = $214 << 1;
     $216 = 1 << $215;
     $217 = $13;
     $218 = $217 >>> 4;
     $219 = $3;
     $220 = ((($219)) + 16|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = (($221) + ($218<<2)|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = $223 | $216;
     HEAP32[$222>>2] = $224;
    }
    $225 = $9;
    $226 = $13;
    $227 = $3;
    $228 = ((($227)) + 20|0);
    $229 = HEAP32[$228>>2]|0;
    $230 = (($229) + ($226<<2)|0);
    HEAP32[$230>>2] = $225;
    $231 = $13;
    $232 = $3;
    $233 = ((($232)) + 24|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = (($234) + ($231<<2)|0);
    ;HEAP32[$235>>2]=HEAP32[$10>>2]|0;
   }
   $236 = $6;
   $237 = (($236) + 1)|0;
   $6 = $237;
  }
  $238 = $3;
  $239 = HEAP32[$238>>2]|0;
  $240 = $4;
  $241 = ($239>>>0)>($240>>>0);
  if ($241) {
   $242 = $3;
   $243 = ((($242)) + 20|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = $4;
   $246 = $245<<2;
   $247 = (_realloc($244,$246)|0);
   $248 = $3;
   $249 = ((($248)) + 20|0);
   HEAP32[$249>>2] = $247;
   $250 = $3;
   $251 = ((($250)) + 24|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = $4;
   $254 = $253<<2;
   $255 = (_realloc($252,$254)|0);
   $256 = $3;
   $257 = ((($256)) + 24|0);
   HEAP32[$257>>2] = $255;
  }
  $258 = $3;
  $259 = ((($258)) + 16|0);
  $260 = HEAP32[$259>>2]|0;
  _free($260);
  $261 = $5;
  $262 = $3;
  $263 = ((($262)) + 16|0);
  HEAP32[$263>>2] = $261;
  $264 = $4;
  $265 = $3;
  HEAP32[$265>>2] = $264;
  $266 = $3;
  $267 = ((($266)) + 4|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = $3;
  $270 = ((($269)) + 8|0);
  HEAP32[$270>>2] = $268;
  $271 = $3;
  $272 = HEAP32[$271>>2]|0;
  $273 = (+($272>>>0));
  $274 = $273 * 0.77000000000000001;
  $275 = $274 + 0.5;
  $276 = (~~(($275))>>>0);
  $277 = $3;
  $278 = ((($277)) + 12|0);
  HEAP32[$278>>2] = $276;
 }
 $2 = 0;
 $279 = $2;
 STACKTOP = sp;return ($279|0);
}
function ___ac_X31_hash_string_799($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 << 24 >> 24;
 $2 = $5;
 $6 = $2;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 $8 = $1;
 $9 = ((($8)) + 1|0);
 $1 = $9;
 while(1) {
  $10 = $1;
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)!=(0);
  if (!($12)) {
   break;
  }
  $13 = $2;
  $14 = $13 << 5;
  $15 = $2;
  $16 = (($14) - ($15))|0;
  $17 = $1;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = (($16) + ($19))|0;
  $2 = $20;
  $21 = $1;
  $22 = ((($21)) + 1|0);
  $1 = $22;
 }
 $23 = $2;
 STACKTOP = sp;return ($23|0);
}
function _cram_dependent_data_series($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $12 = sp + 64|0;
 $16 = sp + 48|0;
 $21 = sp + 28|0;
 $25 = sp + 12|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 $29 = $4;
 $30 = ((($29)) + 312|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0);
 if ($32) {
  $33 = $4;
  $34 = ((($33)) + 312|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)!=(2147483647);
  if ($36) {
   $37 = $5;
   $38 = ((($37)) + 548|0);
   HEAP32[$38>>2] = 0;
   $39 = $4;
   $40 = ((($39)) + 312|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 & 1;
   $43 = ($42|0)!=(0);
   if ($43) {
    $44 = $5;
    $45 = ((($44)) + 548|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $46 | 32768;
    HEAP32[$45>>2] = $47;
   }
   $48 = $4;
   $49 = ((($48)) + 312|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $50 & 2;
   $52 = ($51|0)!=(0);
   if ($52) {
    $53 = $5;
    $54 = ((($53)) + 548|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $55 | 1;
    HEAP32[$54>>2] = $56;
   }
   $57 = $4;
   $58 = ((($57)) + 312|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & 4;
   $61 = ($60|0)!=(0);
   if ($61) {
    $62 = $5;
    $63 = ((($62)) + 548|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $64 | 2097153;
    HEAP32[$63>>2] = $65;
   }
   $66 = $4;
   $67 = ((($66)) + 312|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 & 8;
   $70 = ($69|0)!=(0);
   if ($70) {
    $71 = $5;
    $72 = ((($71)) + 548|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $73 | 3;
    HEAP32[$72>>2] = $74;
   }
   $75 = $4;
   $76 = ((($75)) + 312|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $77 & 16;
   $79 = ($78|0)!=(0);
   if ($79) {
    $80 = $5;
    $81 = ((($80)) + 548|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $82 | 8192;
    HEAP32[$81>>2] = $83;
   }
   $84 = $4;
   $85 = ((($84)) + 312|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $86 & 32;
   $88 = ($87|0)!=(0);
   if ($88) {
    $89 = $5;
    $90 = ((($89)) + 548|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = $91 | 62917405;
    HEAP32[$90>>2] = $92;
   }
   $93 = $4;
   $94 = ((($93)) + 312|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $95 & 64;
   $97 = ($96|0)!=(0);
   if ($97) {
    $98 = $5;
    $99 = ((($98)) + 548|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 | 3211297;
    HEAP32[$99>>2] = $101;
   }
   $102 = $4;
   $103 = ((($102)) + 312|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $104 & 128;
   $106 = ($105|0)!=(0);
   if ($106) {
    $107 = $5;
    $108 = ((($107)) + 548|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $109 | 1179683;
    HEAP32[$108>>2] = $110;
   }
   $111 = $4;
   $112 = ((($111)) + 312|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $113 & 256;
   $115 = ($114|0)!=(0);
   if ($115) {
    $116 = $5;
    $117 = ((($116)) + 548|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = $118 | 66849599;
    HEAP32[$117>>2] = $119;
   }
   $120 = $4;
   $121 = ((($120)) + 312|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = $122 & 512;
   $124 = ($123|0)!=(0);
   if ($124) {
    $125 = $5;
    $126 = ((($125)) + 548|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = $127 | 130027359;
    HEAP32[$126>>2] = $128;
   }
   $129 = $4;
   $130 = ((($129)) + 312|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $131 & 2048;
   $133 = ($132|0)!=(0);
   if (!($133)) {
    $134 = $4;
    $135 = ((($134)) + 268|0);
    HEAP32[$135>>2] = 0;
   }
   $136 = $4;
   $137 = ((($136)) + 312|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = $138 & 1024;
   $140 = ($139|0)!=(0);
   if ($140) {
    $141 = $5;
    $142 = ((($141)) + 548|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = $143 | 331352991;
    HEAP32[$142>>2] = $144;
   }
   $145 = $4;
   $146 = ((($145)) + 312|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = $147 & 2048;
   $149 = ($148|0)!=(0);
   if ($149) {
    $150 = $5;
    $151 = ((($150)) + 548|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = $152 | 1073762304;
    HEAP32[$151>>2] = $153;
   }
   $154 = $4;
   $155 = ((($154)) + 312|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = $156 & 4096;
   $158 = ($157|0)!=(0);
   if ($158) {
    $159 = $5;
    $160 = ((($159)) + 548|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = $161 | 4097;
    HEAP32[$160>>2] = $162;
   }
   $163 = $6;
   $164 = ((($163)) + 8|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = HEAP32[$165>>2]|0;
   $167 = (_cram_uncompress_block($166)|0);
   $168 = ($167|0)!=(0);
   if ($168) {
    $3 = -1;
    $678 = $3;
    STACKTOP = sp;return ($678|0);
   }
   $187 = $6;
   $188 = HEAP32[$187>>2]|0;
   $189 = ((($188)) + 32|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = (($190) + 1)|0;
   $192 = (_calloc($191,4)|0);
   $7 = $192;
   $193 = $7;
   $194 = ($193|0)!=(0|0);
   if (!($194)) {
    $3 = -1;
    $678 = $3;
    STACKTOP = sp;return ($678|0);
   }
   L53: while(1) {
    $195 = $5;
    $196 = ((($195)) + 548|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = $197 & 4194304;
    $199 = ($198|0)!=(0);
    if ($199) {
     $200 = $5;
     $201 = ((($200)) + 548|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = $202 | 260;
     HEAP32[$201>>2] = $203;
    }
    $204 = $5;
    $205 = ((($204)) + 548|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = $206 & 8388608;
    $208 = ($207|0)!=(0);
    if ($208) {
     $209 = $5;
     $210 = ((($209)) + 548|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = $211 | 260;
     HEAP32[$210>>2] = $212;
    }
    $213 = $5;
    $214 = ((($213)) + 548|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = $215 & 16777216;
    $217 = ($216|0)!=(0);
    if ($217) {
     $218 = $5;
     $219 = ((($218)) + 548|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = $220 | 260;
     HEAP32[$219>>2] = $221;
    }
    $222 = $5;
    $223 = ((($222)) + 548|0);
    $224 = HEAP32[$223>>2]|0;
    $225 = $224 & 128;
    $226 = ($225|0)!=(0);
    if ($226) {
     $227 = $5;
     $228 = ((($227)) + 548|0);
     $229 = HEAP32[$228>>2]|0;
     $230 = $229 | 260;
     HEAP32[$228>>2] = $230;
    }
    $231 = $5;
    $232 = ((($231)) + 548|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = $233 & 2048;
    $235 = ($234|0)!=(0);
    if ($235) {
     $236 = $5;
     $237 = ((($236)) + 548|0);
     $238 = HEAP32[$237>>2]|0;
     $239 = $238 | 260;
     HEAP32[$237>>2] = $239;
    }
    $240 = $5;
    $241 = ((($240)) + 548|0);
    $242 = HEAP32[$241>>2]|0;
    $243 = $242 & 33554432;
    $244 = ($243|0)!=(0);
    if ($244) {
     $245 = $5;
     $246 = ((($245)) + 548|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = $247 | 260;
     HEAP32[$246>>2] = $248;
    }
    $249 = $5;
    $250 = ((($249)) + 548|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = $251 & 1024;
    $253 = ($252|0)!=(0);
    if ($253) {
     $254 = $5;
     $255 = ((($254)) + 548|0);
     $256 = HEAP32[$255>>2]|0;
     $257 = $256 | 260;
     HEAP32[$255>>2] = $257;
    }
    $258 = $5;
    $259 = ((($258)) + 548|0);
    $260 = HEAP32[$259>>2]|0;
    $261 = $260 & 16;
    $262 = ($261|0)!=(0);
    if ($262) {
     $263 = $5;
     $264 = ((($263)) + 548|0);
     $265 = HEAP32[$264>>2]|0;
     $266 = $265 | 260;
     HEAP32[$264>>2] = $266;
    }
    $267 = $5;
    $268 = ((($267)) + 548|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = $269 & 64;
    $271 = ($270|0)!=(0);
    if ($271) {
     $272 = $5;
     $273 = ((($272)) + 548|0);
     $274 = HEAP32[$273>>2]|0;
     $275 = $274 | 260;
     HEAP32[$273>>2] = $275;
    }
    $276 = $5;
    $277 = ((($276)) + 548|0);
    $278 = HEAP32[$277>>2]|0;
    $279 = $278 & 67108864;
    $280 = ($279|0)!=(0);
    if ($280) {
     $281 = $5;
     $282 = ((($281)) + 548|0);
     $283 = HEAP32[$282>>2]|0;
     $284 = $283 | 260;
     HEAP32[$282>>2] = $284;
    }
    $285 = $5;
    $286 = ((($285)) + 548|0);
    $287 = HEAP32[$286>>2]|0;
    $288 = $287 & 268435456;
    $289 = ($288|0)!=(0);
    if ($289) {
     $290 = $5;
     $291 = ((($290)) + 548|0);
     $292 = HEAP32[$291>>2]|0;
     $293 = $292 | 260;
     HEAP32[$291>>2] = $293;
    }
    $294 = $5;
    $295 = ((($294)) + 548|0);
    $296 = HEAP32[$295>>2]|0;
    $297 = $296 & 130027359;
    $298 = ($297|0)!=(0);
    if ($298) {
     $299 = $5;
     $300 = ((($299)) + 548|0);
     $301 = HEAP32[$300>>2]|0;
     $302 = $301 | 8;
     HEAP32[$300>>2] = $302;
    }
    $303 = $5;
    $304 = ((($303)) + 548|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = $305 & 4;
    $307 = ($306|0)!=(0);
    if ($307) {
     $308 = $5;
     $309 = ((($308)) + 548|0);
     $310 = HEAP32[$309>>2]|0;
     $311 = $310 | 256;
     HEAP32[$309>>2] = $311;
    }
    $312 = $5;
    $313 = ((($312)) + 548|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = $314 & 256;
    $316 = ($315|0)!=(0);
    if ($316) {
     $317 = $5;
     $318 = ((($317)) + 548|0);
     $319 = HEAP32[$318>>2]|0;
     $320 = $319 | 512;
     HEAP32[$318>>2] = $320;
    }
    $321 = $5;
    $322 = ((($321)) + 548|0);
    $323 = HEAP32[$322>>2]|0;
    $324 = $323 & 1073741824;
    $325 = ($324|0)!=(0);
    if ($325) {
     $326 = $5;
     $327 = ((($326)) + 548|0);
     $328 = HEAP32[$327>>2]|0;
     $329 = $328 | 16384;
     HEAP32[$327>>2] = $329;
    }
    $330 = $5;
    $331 = ((($330)) + 548|0);
    $332 = HEAP32[$331>>2]|0;
    $333 = $332 & 524288;
    $334 = ($333|0)!=(0);
    if ($334) {
     $335 = $5;
     $336 = ((($335)) + 548|0);
     $337 = HEAP32[$336>>2]|0;
     $338 = $337 | 1048576;
     HEAP32[$336>>2] = $338;
    }
    $339 = $5;
    $340 = ((($339)) + 548|0);
    $341 = HEAP32[$340>>2]|0;
    $342 = $341 & 8192;
    $343 = ($342|0)!=(0);
    if ($343) {
     $344 = $5;
     $345 = ((($344)) + 548|0);
     $346 = HEAP32[$345>>2]|0;
     $347 = $346 | 1;
     HEAP32[$345>>2] = $347;
    }
    $348 = $5;
    $349 = ((($348)) + 548|0);
    $350 = HEAP32[$349>>2]|0;
    $351 = $350 & 1024;
    $352 = ($351|0)!=(0);
    if ($352) {
     $353 = $5;
     $354 = ((($353)) + 548|0);
     $355 = HEAP32[$354>>2]|0;
     $356 = $355 | 2097152;
     HEAP32[$354>>2] = $356;
    }
    $357 = $5;
    $358 = ((($357)) + 548|0);
    $359 = HEAP32[$358>>2]|0;
    $360 = $359 & 983072;
    $361 = ($360|0)!=(0);
    if ($361) {
     $362 = $5;
     $363 = ((($362)) + 548|0);
     $364 = HEAP32[$363>>2]|0;
     $365 = $364 | 1048576;
     HEAP32[$363>>2] = $365;
    }
    $366 = $5;
    $367 = ((($366)) + 40|0);
    $368 = HEAP32[$367>>2]|0;
    $369 = ($368|0)!=(0);
    do {
     if (!($369)) {
      $370 = $5;
      $371 = ((($370)) + 548|0);
      $372 = HEAP32[$371>>2]|0;
      $373 = $372 & 32768;
      $374 = ($373|0)!=(0);
      if (!($374)) {
       break;
      }
      $375 = $5;
      $376 = ((($375)) + 548|0);
      $377 = HEAP32[$376>>2]|0;
      $378 = $377 | 1048608;
      HEAP32[$376>>2] = $378;
     }
    } while(0);
    $379 = $5;
    $380 = ((($379)) + 548|0);
    $381 = HEAP32[$380>>2]|0;
    $382 = $381 & 335544512;
    $383 = ($382|0)!=(0);
    if ($383) {
     $384 = $5;
     $385 = ((($384)) + 548|0);
     $386 = HEAP32[$385>>2]|0;
     $387 = $386 | 1048585;
     HEAP32[$385>>2] = $387;
    }
    $388 = $5;
    $389 = ((($388)) + 548|0);
    $390 = HEAP32[$389>>2]|0;
    $10 = $390;
    $9 = 0;
    while(1) {
     $391 = $9;
     $392 = ($391>>>0)<(28);
     if (!($392)) {
      break;
     }
     $393 = $9;
     $394 = (9288 + ($393<<2)|0);
     $395 = HEAP32[$394>>2]|0;
     $396 = $5;
     $397 = ((($396)) + 348|0);
     $398 = (($397) + ($395<<2)|0);
     $399 = HEAP32[$398>>2]|0;
     $14 = $399;
     $400 = $5;
     $401 = ((($400)) + 548|0);
     $402 = HEAP32[$401>>2]|0;
     $403 = $9;
     $404 = 1 << $403;
     $405 = $402 & $404;
     $406 = ($405|0)!=(0);
     $407 = $14;
     $408 = ($407|0)!=(0|0);
     $or$cond = $406 & $408;
     L122: do {
      if ($or$cond) {
       $409 = $14;
       $410 = (_cram_codec_to_id($409,$12)|0);
       $11 = $410;
       while(1) {
        $411 = $11;
        L126: do {
         switch ($411|0) {
         case -2:  {
          break;
         }
         case -1:  {
          $8 = 1;
          break;
         }
         default: {
          $13 = 0;
          while(1) {
           $412 = $13;
           $413 = $6;
           $414 = HEAP32[$413>>2]|0;
           $415 = ((($414)) + 32|0);
           $416 = HEAP32[$415>>2]|0;
           $417 = ($412|0)<($416|0);
           if (!($417)) {
            break L126;
           }
           $418 = $13;
           $419 = $6;
           $420 = ((($419)) + 8|0);
           $421 = HEAP32[$420>>2]|0;
           $422 = (($421) + ($418<<2)|0);
           $423 = HEAP32[$422>>2]|0;
           $424 = ((($423)) + 8|0);
           $425 = HEAP32[$424>>2]|0;
           $426 = ($425|0)==(4);
           do {
            if ($426) {
             $427 = $13;
             $428 = $6;
             $429 = ((($428)) + 8|0);
             $430 = HEAP32[$429>>2]|0;
             $431 = (($430) + ($427<<2)|0);
             $432 = HEAP32[$431>>2]|0;
             $433 = ((($432)) + 12|0);
             $434 = HEAP32[$433>>2]|0;
             $435 = $11;
             $436 = ($434|0)==($435|0);
             if (!($436)) {
              break;
             }
             $437 = $13;
             $438 = $7;
             $439 = (($438) + ($437<<2)|0);
             HEAP32[$439>>2] = 1;
             $440 = $13;
             $441 = $6;
             $442 = ((($441)) + 8|0);
             $443 = HEAP32[$442>>2]|0;
             $444 = (($443) + ($440<<2)|0);
             $445 = HEAP32[$444>>2]|0;
             $446 = (_cram_uncompress_block($445)|0);
             $447 = ($446|0)!=(0);
             if ($447) {
              label = 95;
              break L53;
             }
            }
           } while(0);
           $449 = $13;
           $450 = (($449) + 1)|0;
           $13 = $450;
          }
         }
         }
        } while(0);
        $451 = HEAP32[$12>>2]|0;
        $452 = ($451|0)==(-2);
        if ($452) {
         break L122;
        }
        $453 = $11;
        $454 = HEAP32[$12>>2]|0;
        $455 = ($453|0)==($454|0);
        if ($455) {
         break L122;
        }
        $456 = HEAP32[$12>>2]|0;
        $11 = $456;
       }
      }
     } while(0);
     $457 = $9;
     $458 = (($457) + 1)|0;
     $9 = $458;
    }
    $459 = $4;
    $460 = ((($459)) + 312|0);
    $461 = HEAP32[$460>>2]|0;
    $462 = $461 & 2048;
    $463 = ($462|0)!=(0);
    if ($463) {
     label = 103;
    } else {
     $464 = $5;
     $465 = ((($464)) + 548|0);
     $466 = HEAP32[$465>>2]|0;
     $467 = $466 & 1073741824;
     $468 = ($467|0)!=(0);
     if ($468) {
      label = 103;
     }
    }
    L143: do {
     if ((label|0) == 103) {
      label = 0;
      $9 = 0;
      while(1) {
       $469 = $9;
       $470 = ($469|0)<(32);
       if (!($470)) {
        break L143;
       }
       $471 = $9;
       $472 = $5;
       $473 = ((($472)) + 220|0);
       $474 = (($473) + ($471<<2)|0);
       $475 = HEAP32[$474>>2]|0;
       $18 = $475;
       while(1) {
        $476 = $18;
        $477 = ($476|0)!=(0|0);
        if (!($477)) {
         break;
        }
        $478 = $18;
        $479 = ((($478)) + 16|0);
        $480 = HEAP32[$479>>2]|0;
        $19 = $480;
        $481 = $19;
        $482 = ($481|0)!=(0|0);
        if (!($482)) {
         continue;
        }
        $483 = $19;
        $484 = (_cram_codec_to_id($483,$16)|0);
        $15 = $484;
        while(1) {
         $485 = $15;
         L154: do {
          switch ($485|0) {
          case -2:  {
           break;
          }
          case -1:  {
           $8 = 1;
           break;
          }
          default: {
           $17 = 0;
           while(1) {
            $486 = $17;
            $487 = $6;
            $488 = HEAP32[$487>>2]|0;
            $489 = ((($488)) + 32|0);
            $490 = HEAP32[$489>>2]|0;
            $491 = ($486|0)<($490|0);
            if (!($491)) {
             break L154;
            }
            $492 = $17;
            $493 = $6;
            $494 = ((($493)) + 8|0);
            $495 = HEAP32[$494>>2]|0;
            $496 = (($495) + ($492<<2)|0);
            $497 = HEAP32[$496>>2]|0;
            $498 = ((($497)) + 8|0);
            $499 = HEAP32[$498>>2]|0;
            $500 = ($499|0)==(4);
            do {
             if ($500) {
              $501 = $17;
              $502 = $6;
              $503 = ((($502)) + 8|0);
              $504 = HEAP32[$503>>2]|0;
              $505 = (($504) + ($501<<2)|0);
              $506 = HEAP32[$505>>2]|0;
              $507 = ((($506)) + 12|0);
              $508 = HEAP32[$507>>2]|0;
              $509 = $15;
              $510 = ($508|0)==($509|0);
              if (!($510)) {
               break;
              }
              $511 = $17;
              $512 = $7;
              $513 = (($512) + ($511<<2)|0);
              HEAP32[$513>>2] = 1;
              $514 = $17;
              $515 = $6;
              $516 = ((($515)) + 8|0);
              $517 = HEAP32[$516>>2]|0;
              $518 = (($517) + ($514<<2)|0);
              $519 = HEAP32[$518>>2]|0;
              $520 = (_cram_uncompress_block($519)|0);
              $521 = ($520|0)!=(0);
              if ($521) {
               label = 116;
               break L53;
              }
             }
            } while(0);
            $523 = $17;
            $524 = (($523) + 1)|0;
            $17 = $524;
           }
          }
          }
         } while(0);
         $525 = HEAP32[$16>>2]|0;
         $526 = ($525|0)==(-2);
         if ($526) {
          break;
         }
         $527 = $15;
         $528 = HEAP32[$16>>2]|0;
         $529 = ($527|0)==($528|0);
         if ($529) {
          break;
         }
         $530 = HEAP32[$16>>2]|0;
         $15 = $530;
        }
        $531 = $18;
        $532 = ((($531)) + 20|0);
        $533 = HEAP32[$532>>2]|0;
        $18 = $533;
       }
       $534 = $9;
       $535 = (($534) + 1)|0;
       $9 = $535;
      }
     }
    } while(0);
    $9 = 0;
    while(1) {
     $536 = $9;
     $537 = ($536>>>0)<(28);
     if (!($537)) {
      break;
     }
     $538 = $9;
     $539 = (9288 + ($538<<2)|0);
     $540 = HEAP32[$539>>2]|0;
     $541 = $5;
     $542 = ((($541)) + 348|0);
     $543 = (($542) + ($540<<2)|0);
     $544 = HEAP32[$543>>2]|0;
     $23 = $544;
     $545 = $23;
     $546 = ($545|0)!=(0|0);
     L173: do {
      if ($546) {
       $547 = $23;
       $548 = (_cram_codec_to_id($547,$21)|0);
       $20 = $548;
       while(1) {
        $549 = $20;
        L177: do {
         switch ($549|0) {
         case -2:  {
          break;
         }
         case -1:  {
          $550 = $8;
          $551 = ($550|0)!=(0);
          if (!($551)) {
           break L177;
          }
          $552 = $9;
          $553 = 1 << $552;
          $554 = $5;
          $555 = ((($554)) + 548|0);
          $556 = HEAP32[$555>>2]|0;
          $557 = $556 | $553;
          HEAP32[$555>>2] = $557;
          break;
         }
         default: {
          $22 = 0;
          while(1) {
           $558 = $22;
           $559 = $6;
           $560 = HEAP32[$559>>2]|0;
           $561 = ((($560)) + 32|0);
           $562 = HEAP32[$561>>2]|0;
           $563 = ($558|0)<($562|0);
           if (!($563)) {
            break L177;
           }
           $564 = $22;
           $565 = $6;
           $566 = ((($565)) + 8|0);
           $567 = HEAP32[$566>>2]|0;
           $568 = (($567) + ($564<<2)|0);
           $569 = HEAP32[$568>>2]|0;
           $570 = ((($569)) + 8|0);
           $571 = HEAP32[$570>>2]|0;
           $572 = ($571|0)==(4);
           do {
            if ($572) {
             $573 = $22;
             $574 = $6;
             $575 = ((($574)) + 8|0);
             $576 = HEAP32[$575>>2]|0;
             $577 = (($576) + ($573<<2)|0);
             $578 = HEAP32[$577>>2]|0;
             $579 = ((($578)) + 12|0);
             $580 = HEAP32[$579>>2]|0;
             $581 = $20;
             $582 = ($580|0)==($581|0);
             if (!($582)) {
              break;
             }
             $583 = $22;
             $584 = $7;
             $585 = (($584) + ($583<<2)|0);
             $586 = HEAP32[$585>>2]|0;
             $587 = ($586|0)!=(0);
             if (!($587)) {
              break;
             }
             $588 = $9;
             $589 = 1 << $588;
             $590 = $5;
             $591 = ((($590)) + 548|0);
             $592 = HEAP32[$591>>2]|0;
             $593 = $592 | $589;
             HEAP32[$591>>2] = $593;
            }
           } while(0);
           $594 = $22;
           $595 = (($594) + 1)|0;
           $22 = $595;
          }
         }
         }
        } while(0);
        $596 = HEAP32[$21>>2]|0;
        $597 = ($596|0)==(-2);
        if ($597) {
         break L173;
        }
        $598 = $20;
        $599 = HEAP32[$21>>2]|0;
        $600 = ($598|0)==($599|0);
        if ($600) {
         break L173;
        }
        $601 = HEAP32[$21>>2]|0;
        $20 = $601;
       }
      }
     } while(0);
     $602 = $9;
     $603 = (($602) + 1)|0;
     $9 = $603;
    }
    $9 = 0;
    while(1) {
     $604 = $9;
     $605 = ($604|0)<(32);
     if (!($605)) {
      break;
     }
     $606 = $9;
     $607 = $5;
     $608 = ((($607)) + 220|0);
     $609 = (($608) + ($606<<2)|0);
     $610 = HEAP32[$609>>2]|0;
     $27 = $610;
     while(1) {
      $611 = $27;
      $612 = ($611|0)!=(0|0);
      if (!($612)) {
       break;
      }
      $613 = $27;
      $614 = ((($613)) + 16|0);
      $615 = HEAP32[$614>>2]|0;
      $28 = $615;
      $616 = $28;
      $617 = ($616|0)!=(0|0);
      if (!($617)) {
       continue;
      }
      $618 = $28;
      $619 = (_cram_codec_to_id($618,$25)|0);
      $24 = $619;
      while(1) {
       $620 = $24;
       L203: do {
        switch ($620|0) {
        case -2:  {
         break;
        }
        case -1:  {
         $621 = $5;
         $622 = ((($621)) + 548|0);
         $623 = HEAP32[$622>>2]|0;
         $624 = $623 | 1073741824;
         HEAP32[$622>>2] = $624;
         break;
        }
        default: {
         $26 = 0;
         while(1) {
          $625 = $26;
          $626 = $6;
          $627 = HEAP32[$626>>2]|0;
          $628 = ((($627)) + 32|0);
          $629 = HEAP32[$628>>2]|0;
          $630 = ($625|0)<($629|0);
          if (!($630)) {
           break L203;
          }
          $631 = $26;
          $632 = $6;
          $633 = ((($632)) + 8|0);
          $634 = HEAP32[$633>>2]|0;
          $635 = (($634) + ($631<<2)|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ((($636)) + 8|0);
          $638 = HEAP32[$637>>2]|0;
          $639 = ($638|0)!=(0);
          do {
           if ($639) {
            $640 = $26;
            $641 = $6;
            $642 = ((($641)) + 8|0);
            $643 = HEAP32[$642>>2]|0;
            $644 = (($643) + ($640<<2)|0);
            $645 = HEAP32[$644>>2]|0;
            $646 = ((($645)) + 12|0);
            $647 = HEAP32[$646>>2]|0;
            $648 = $24;
            $649 = ($647|0)==($648|0);
            if (!($649)) {
             break;
            }
            $650 = $26;
            $651 = $7;
            $652 = (($651) + ($650<<2)|0);
            $653 = HEAP32[$652>>2]|0;
            $654 = ($653|0)!=(0);
            if (!($654)) {
             break;
            }
            $655 = $5;
            $656 = ((($655)) + 548|0);
            $657 = HEAP32[$656>>2]|0;
            $658 = $657 | 1073741824;
            HEAP32[$656>>2] = $658;
           }
          } while(0);
          $659 = $26;
          $660 = (($659) + 1)|0;
          $26 = $660;
         }
        }
        }
       } while(0);
       $661 = HEAP32[$25>>2]|0;
       $662 = ($661|0)==(-2);
       if ($662) {
        break;
       }
       $663 = $24;
       $664 = HEAP32[$25>>2]|0;
       $665 = ($663|0)==($664|0);
       if ($665) {
        break;
       }
       $666 = HEAP32[$25>>2]|0;
       $24 = $666;
      }
      $667 = $27;
      $668 = ((($667)) + 20|0);
      $669 = HEAP32[$668>>2]|0;
      $27 = $669;
     }
     $670 = $9;
     $671 = (($670) + 1)|0;
     $9 = $671;
    }
    $672 = $10;
    $673 = $5;
    $674 = ((($673)) + 548|0);
    $675 = HEAP32[$674>>2]|0;
    $676 = ($672|0)!=($675|0);
    if (!($676)) {
     label = 162;
     break;
    }
   }
   if ((label|0) == 95) {
    $448 = $7;
    _free($448);
    $3 = -1;
    $678 = $3;
    STACKTOP = sp;return ($678|0);
   }
   else if ((label|0) == 116) {
    $522 = $7;
    _free($522);
    $3 = -1;
    $678 = $3;
    STACKTOP = sp;return ($678|0);
   }
   else if ((label|0) == 162) {
    $677 = $7;
    _free($677);
    $3 = 0;
    $678 = $3;
    STACKTOP = sp;return ($678|0);
   }
  }
 }
 $169 = $5;
 $170 = ((($169)) + 548|0);
 HEAP32[$170>>2] = 2147483647;
 $9 = 0;
 while(1) {
  $171 = $9;
  $172 = $6;
  $173 = HEAP32[$172>>2]|0;
  $174 = ((($173)) + 32|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = ($171|0)<($175|0);
  if (!($176)) {
   label = 38;
   break;
  }
  $177 = $9;
  $178 = $6;
  $179 = ((($178)) + 8|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = (($180) + ($177<<2)|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = (_cram_uncompress_block($182)|0);
  $184 = ($183|0)!=(0);
  if ($184) {
   label = 36;
   break;
  }
  $185 = $9;
  $186 = (($185) + 1)|0;
  $9 = $186;
 }
 if ((label|0) == 36) {
  $3 = -1;
  $678 = $3;
  STACKTOP = sp;return ($678|0);
 }
 else if ((label|0) == 38) {
  $3 = 0;
  $678 = $3;
  STACKTOP = sp;return ($678|0);
 }
 return (0)|0;
}
function _cram_decode_estimate_sizes($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = sp + 12|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $15 = $7;
 HEAP32[$15>>2] = 0;
 $16 = $8;
 HEAP32[$16>>2] = 0;
 $17 = $5;
 $18 = ((($17)) + 348|0);
 $19 = ((($18)) + 48|0);
 $20 = HEAP32[$19>>2]|0;
 $12 = $20;
 $21 = $12;
 $22 = (_cram_codec_to_id($21,$11)|0);
 $10 = $22;
 $23 = $10;
 $24 = ($23|0)<(0);
 $25 = HEAP32[$11>>2]|0;
 $26 = ($25|0)>=(0);
 $or$cond = $24 & $26;
 if ($or$cond) {
  $27 = HEAP32[$11>>2]|0;
  $10 = $27;
 }
 $28 = $5;
 $29 = $12;
 $30 = $10;
 $31 = (_cram_ds_unique($28,$29,$30)|0);
 $32 = ($31|0)!=(0);
 if ($32) {
  $33 = $6;
  $34 = $10;
  $35 = (_cram_get_block_by_id_800($33,$34)|0);
  $13 = $35;
  $36 = $13;
  $37 = ($36|0)!=(0|0);
  if ($37) {
   $38 = $13;
   $39 = ((($38)) + 20|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $7;
   HEAP32[$41>>2] = $40;
  }
  $42 = $9;
  $43 = ($42|0)!=(0|0);
  if ($43) {
   $44 = $12;
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45|0)==(1);
   if ($46) {
    $47 = $10;
    $48 = $9;
    HEAP32[$48>>2] = $47;
   }
  }
 }
 $49 = $5;
 $50 = ((($49)) + 348|0);
 $51 = ((($50)) + 44|0);
 $52 = HEAP32[$51>>2]|0;
 $12 = $52;
 $53 = $12;
 $54 = (_cram_codec_to_id($53,$11)|0);
 $10 = $54;
 $55 = $10;
 $56 = ($55|0)<(0);
 $57 = HEAP32[$11>>2]|0;
 $58 = ($57|0)>=(0);
 $or$cond3 = $56 & $58;
 if ($or$cond3) {
  $59 = HEAP32[$11>>2]|0;
  $10 = $59;
 }
 $60 = $5;
 $61 = $12;
 $62 = $10;
 $63 = (_cram_ds_unique($60,$61,$62)|0);
 $64 = ($63|0)!=(0);
 if (!($64)) {
  STACKTOP = sp;return;
 }
 $65 = $6;
 $66 = $10;
 $67 = (_cram_get_block_by_id_800($65,$66)|0);
 $14 = $67;
 $68 = $14;
 $69 = ($68|0)!=(0|0);
 if (!($69)) {
  STACKTOP = sp;return;
 }
 $70 = $14;
 $71 = ((($70)) + 20|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $8;
 HEAP32[$73>>2] = $72;
 STACKTOP = sp;return;
}
function _cram_ds_unique($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = sp + 4|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0;
 $8 = 0;
 $6 = 0;
 while(1) {
  $13 = $6;
  $14 = ($13|0)<(47);
  if (!($14)) {
   break;
  }
  $15 = $6;
  $16 = $3;
  $17 = ((($16)) + 348|0);
  $18 = (($17) + ($15<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $9 = $19;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   $21 = $9;
   $22 = (_cram_codec_to_id($21,$11)|0);
   $10 = $22;
   $23 = $7;
   $12 = $23;
   $24 = $10;
   $25 = $5;
   $26 = ($24|0)==($25|0);
   if ($26) {
    $27 = $7;
    $28 = (($27) + 1)|0;
    $7 = $28;
    $29 = $9;
    $30 = HEAP32[$29>>2]|0;
    $8 = $30;
   }
   $31 = HEAP32[$11>>2]|0;
   $32 = $5;
   $33 = ($31|0)==($32|0);
   if ($33) {
    $34 = $7;
    $35 = (($34) + 1)|0;
    $7 = $35;
    $36 = $9;
    $37 = HEAP32[$36>>2]|0;
    $8 = $37;
   }
   $38 = $7;
   $39 = $12;
   $40 = (($39) + 2)|0;
   $41 = ($38|0)==($40|0);
   if ($41) {
    $42 = $7;
    $43 = (($42) + -1)|0;
    $7 = $43;
   }
  }
  $44 = $6;
  $45 = (($44) + 1)|0;
  $6 = $45;
 }
 $46 = $7;
 $47 = ($46|0)==(1);
 $48 = $8;
 $49 = $47 ? $48 : 0;
 STACKTOP = sp;return ($49|0);
}
function _cram_get_block_by_id_800($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 $11 = $4;
 $12 = ($11|0)>=(0);
 $or$cond = $10 & $12;
 $13 = $4;
 $14 = ($13|0)<(1024);
 $or$cond3 = $or$cond & $14;
 if ($or$cond3) {
  $15 = $4;
  $16 = $3;
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($15<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $2 = $20;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 $5 = 0;
 while(1) {
  $21 = $5;
  $22 = $3;
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 32|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($21|0)<($25|0);
  if (!($26)) {
   label = 10;
   break;
  }
  $27 = $5;
  $28 = $3;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + ($27<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $6 = $32;
  $33 = $6;
  $34 = ($33|0)!=(0|0);
  if ($34) {
   $35 = $6;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(4);
   if ($38) {
    $39 = $6;
    $40 = ((($39)) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $4;
    $43 = ($41|0)==($42|0);
    if ($43) {
     label = 8;
     break;
    }
   }
  }
  $45 = $5;
  $46 = (($45) + 1)|0;
  $5 = $46;
 }
 if ((label|0) == 8) {
  $44 = $6;
  $2 = $44;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 else if ((label|0) == 10) {
  $2 = 0;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function _cram_decode_slice_header($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = sp + 4|0;
 $3 = $0;
 $4 = $1;
 $11 = $4;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $4;
  $15 = (_cram_uncompress_block($14)|0);
  $16 = ($15|0)<(0);
  if ($16) {
   $2 = 0;
   $197 = $2;
   STACKTOP = sp;return ($197|0);
  }
 }
 $17 = $4;
 $18 = ((($17)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 $6 = $19;
 $20 = $6;
 $21 = $4;
 $22 = ((($21)) + 20|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($20) + ($23)|0);
 $7 = $24;
 $25 = $4;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(2);
 if ($28) {
  $29 = $4;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)!=(3);
  if ($32) {
   $2 = 0;
   $197 = $2;
   STACKTOP = sp;return ($197|0);
  }
 }
 $33 = (_calloc(1,64)|0);
 $5 = $33;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  $2 = 0;
  $197 = $2;
  STACKTOP = sp;return ($197|0);
 }
 $35 = $4;
 $36 = ((($35)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $5;
 HEAP32[$38>>2] = $37;
 $39 = $4;
 $40 = ((($39)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(2);
 if ($42) {
  $43 = $6;
  $44 = $7;
  $45 = $5;
  $46 = ((($45)) + 4|0);
  $47 = (_safe_itf8_get_784($43,$44,$46)|0);
  $48 = $6;
  $49 = (($48) + ($47)|0);
  $6 = $49;
  $50 = $6;
  $51 = $7;
  $52 = $5;
  $53 = ((($52)) + 8|0);
  $54 = (_safe_itf8_get_784($50,$51,$53)|0);
  $55 = $6;
  $56 = (($55) + ($54)|0);
  $6 = $56;
  $57 = $6;
  $58 = $7;
  $59 = $5;
  $60 = ((($59)) + 12|0);
  $61 = (_safe_itf8_get_784($57,$58,$60)|0);
  $62 = $6;
  $63 = (($62) + ($61)|0);
  $6 = $63;
 }
 $64 = $6;
 $65 = $7;
 $66 = $5;
 $67 = ((($66)) + 16|0);
 $68 = (_safe_itf8_get_784($64,$65,$67)|0);
 $69 = $6;
 $70 = (($69) + ($68)|0);
 $6 = $70;
 $71 = $5;
 $72 = ((($71)) + 24|0);
 $73 = $72;
 $74 = $73;
 HEAP32[$74>>2] = 0;
 $75 = (($73) + 4)|0;
 $76 = $75;
 HEAP32[$76>>2] = 0;
 $77 = $3;
 $78 = ((($77)) + 8|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 >> 8;
 $81 = ($80|0)==(2);
 if ($81) {
  HEAP32[$9>>2] = 0;
  $82 = $6;
  $83 = $7;
  $84 = (_safe_itf8_get_784($82,$83,$9)|0);
  $85 = $6;
  $86 = (($85) + ($84)|0);
  $6 = $86;
  $87 = HEAP32[$9>>2]|0;
  $88 = ($87|0)<(0);
  $89 = $88 << 31 >> 31;
  $90 = $5;
  $91 = ((($90)) + 24|0);
  $92 = $91;
  $93 = $92;
  HEAP32[$93>>2] = $87;
  $94 = (($92) + 4)|0;
  $95 = $94;
  HEAP32[$95>>2] = $89;
 } else {
  $96 = $3;
  $97 = ((($96)) + 8|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $98 >> 8;
  $100 = ($99|0)>=(3);
  if ($100) {
   $101 = $6;
   $102 = $5;
   $103 = ((($102)) + 24|0);
   $104 = (_ltf8_get($101,$103)|0);
   $105 = $6;
   $106 = (($105) + ($104)|0);
   $6 = $106;
  }
 }
 $107 = $6;
 $108 = $7;
 $109 = $5;
 $110 = ((($109)) + 32|0);
 $111 = (_safe_itf8_get_784($107,$108,$110)|0);
 $112 = $6;
 $113 = (($112) + ($111)|0);
 $6 = $113;
 $114 = $6;
 $115 = $7;
 $116 = $5;
 $117 = ((($116)) + 36|0);
 $118 = (_safe_itf8_get_784($114,$115,$117)|0);
 $119 = $6;
 $120 = (($119) + ($118)|0);
 $6 = $120;
 $121 = $5;
 $122 = ((($121)) + 36|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ($123|0)<(1);
 if (!($124)) {
  $125 = $5;
  $126 = ((($125)) + 36|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ($127>>>0)>=(1073741823);
  if (!($128)) {
   $130 = $5;
   $131 = ((($130)) + 36|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = $132<<2;
   $134 = (_malloc($133)|0);
   $135 = $5;
   $136 = ((($135)) + 40|0);
   HEAP32[$136>>2] = $134;
   $137 = $5;
   $138 = ((($137)) + 40|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ($139|0)!=(0|0);
   if (!($140)) {
    $141 = $5;
    _free($141);
    $2 = 0;
    $197 = $2;
    STACKTOP = sp;return ($197|0);
   }
   $8 = 0;
   while(1) {
    $142 = $8;
    $143 = $5;
    $144 = ((($143)) + 36|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($142|0)<($145|0);
    if (!($146)) {
     break;
    }
    $147 = $6;
    $148 = $7;
    $149 = $8;
    $150 = $5;
    $151 = ((($150)) + 40|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = (($152) + ($149<<2)|0);
    $154 = (_safe_itf8_get_784($147,$148,$153)|0);
    $10 = $154;
    $155 = $10;
    $156 = ($155|0)<=(0);
    if ($156) {
     label = 23;
     break;
    }
    $161 = $10;
    $162 = $6;
    $163 = (($162) + ($161)|0);
    $6 = $163;
    $164 = $8;
    $165 = (($164) + 1)|0;
    $8 = $165;
   }
   if ((label|0) == 23) {
    $157 = $5;
    $158 = ((($157)) + 40|0);
    $159 = HEAP32[$158>>2]|0;
    _free($159);
    $160 = $5;
    _free($160);
    $2 = 0;
    $197 = $2;
    STACKTOP = sp;return ($197|0);
   }
   $166 = $4;
   $167 = ((($166)) + 8|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = ($168|0)==(2);
   if ($169) {
    $170 = $6;
    $171 = $7;
    $172 = $5;
    $173 = ((($172)) + 44|0);
    $174 = (_safe_itf8_get_784($170,$171,$173)|0);
    $175 = $6;
    $176 = (($175) + ($174)|0);
    $6 = $176;
   }
   $177 = $3;
   $178 = ((($177)) + 8|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = $179 >> 8;
   $181 = ($180|0)!=(1);
   do {
    if ($181) {
     $182 = $7;
     $183 = $6;
     $184 = $182;
     $185 = $183;
     $186 = (($184) - ($185))|0;
     $187 = ($186|0)<(16);
     $188 = $5;
     if (!($187)) {
      $192 = ((($188)) + 48|0);
      $193 = $6;
      dest=$192; src=$193; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
      break;
     }
     $189 = ((($188)) + 40|0);
     $190 = HEAP32[$189>>2]|0;
     _free($190);
     $191 = $5;
     _free($191);
     $2 = 0;
     $197 = $2;
     STACKTOP = sp;return ($197|0);
    } else {
     $194 = $5;
     $195 = ((($194)) + 48|0);
     ;HEAP32[$195>>2]=0|0;HEAP32[$195+4>>2]=0|0;HEAP32[$195+8>>2]=0|0;HEAP32[$195+12>>2]=0|0;
    }
   } while(0);
   $196 = $5;
   $2 = $196;
   $197 = $2;
   STACKTOP = sp;return ($197|0);
  }
 }
 $129 = $5;
 _free($129);
 $2 = 0;
 $197 = $2;
 STACKTOP = sp;return ($197|0);
}
function _cram_decode_slice($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0.0, $141 = 0, $1410 = 0.0, $1411 = 0, $1412 = 0.0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0.0, $1485 = 0.0;
 var $1486 = 0, $1487 = 0.0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
 var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0;
 var $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0;
 var $vararg_buffer20 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer36 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $vararg_buffer36 = sp + 96|0;
 $vararg_buffer34 = sp + 88|0;
 $vararg_buffer31 = sp + 80|0;
 $vararg_buffer28 = sp + 72|0;
 $vararg_buffer25 = sp + 64|0;
 $vararg_buffer20 = sp + 48|0;
 $vararg_buffer18 = sp + 40|0;
 $vararg_buffer16 = sp + 32|0;
 $vararg_buffer12 = sp + 16|0;
 $vararg_buffer10 = sp + 8|0;
 $vararg_buffer = sp;
 $10 = sp + 212|0;
 $12 = sp + 296|0;
 $13 = sp + 204|0;
 $22 = sp + 168|0;
 $23 = sp + 164|0;
 $24 = sp + 160|0;
 $27 = sp + 280|0;
 $31 = sp + 241|0;
 $34 = sp + 128|0;
 $35 = sp + 124|0;
 $36 = sp + 120|0;
 $37 = sp + 240|0;
 $38 = sp + 116|0;
 $39 = sp + 112|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $43 = $7;
 $44 = ((($43)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$45>>2]|0;
 $9 = $46;
 $14 = 0;
 $16 = 0;
 $17 = 0;
 $18 = -1;
 $20 = 0;
 $47 = $5;
 $48 = $6;
 $49 = ((($48)) + 52|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $7;
 $52 = (_cram_dependent_data_series($47,$50,$51)|0);
 $53 = ($52|0)!=(0);
 if ($53) {
  $4 = -1;
  $1853 = $4;
  STACKTOP = sp;return ($1853|0);
 }
 $54 = $6;
 $55 = ((($54)) + 52|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($56)) + 548|0);
 $58 = HEAP32[$57>>2]|0;
 $21 = $58;
 $59 = $9;
 $60 = ((($59)) + 44|0);
 HEAP32[$60>>2] = 7;
 $61 = $6;
 $62 = ((($61)) + 52|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $7;
 _cram_decode_estimate_sizes($63,$64,$22,$23,$24);
 $65 = HEAP32[$22>>2]|0;
 $66 = ($65|0)!=(0);
 if ($66) {
  $67 = $21;
  $68 = $67 & 8;
  $69 = ($68|0)!=(0);
  if ($69) {
   $70 = HEAP32[$22>>2]|0;
   $71 = (($70) + 1)|0;
   $72 = $7;
   $73 = ((($72)) + 68|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($74)) + 36|0);
   HEAP32[$75>>2] = $71;
   $76 = $7;
   $77 = ((($76)) + 68|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ((($78)) + 32|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $7;
   $82 = ((($81)) + 68|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ((($83)) + 36|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = (_realloc($80,$85)|0);
   $87 = $7;
   $88 = ((($87)) + 68|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ((($89)) + 32|0);
   HEAP32[$90>>2] = $86;
  }
 }
 $91 = HEAP32[$22>>2]|0;
 $92 = ($91|0)!=(0);
 if ($92) {
  $93 = $21;
  $94 = $93 & 8;
  $95 = ($94|0)!=(0);
  if ($95) {
   $96 = HEAP32[$22>>2]|0;
   $97 = (($96) + 1)|0;
   $98 = $7;
   $99 = ((($98)) + 72|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($100)) + 36|0);
   HEAP32[$101>>2] = $97;
   $102 = $7;
   $103 = ((($102)) + 72|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ((($104)) + 32|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = $7;
   $108 = ((($107)) + 72|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = ((($109)) + 36|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (_realloc($106,$111)|0);
   $113 = $7;
   $114 = ((($113)) + 72|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = ((($115)) + 32|0);
   HEAP32[$116>>2] = $112;
  }
 }
 $117 = HEAP32[$23>>2]|0;
 $118 = ($117|0)!=(0);
 if ($118) {
  $119 = $21;
  $120 = $119 & 65536;
  $121 = ($120|0)!=(0);
  if ($121) {
   $122 = HEAP32[$23>>2]|0;
   $123 = (($122) + 1)|0;
   $124 = $7;
   $125 = ((($124)) + 64|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ((($126)) + 36|0);
   HEAP32[$127>>2] = $123;
   $128 = $7;
   $129 = ((($128)) + 64|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = ((($130)) + 32|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = $7;
   $134 = ((($133)) + 64|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = ((($135)) + 36|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = (_realloc($132,$137)|0);
   $139 = $7;
   $140 = ((($139)) + 64|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ((($141)) + 32|0);
   HEAP32[$142>>2] = $138;
  }
 }
 $143 = $8;
 $144 = ((($143)) + 40|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = ($145|0)>(0);
 if ($146) {
  $147 = $8;
  $148 = ((($147)) + 40|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($149) - 1)|0;
  $151 = $8;
  $152 = ((($151)) + 44|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($153) + (($150*20)|0)|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = ($155|0)!=(0|0);
  if ($156) {
   $157 = $8;
   $158 = ((($157)) + 40|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = (($159) - 1)|0;
   $161 = $8;
   $162 = ((($161)) + 44|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = (($163) + (($160*20)|0)|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = (_strcmp($165,20863)|0);
   $167 = ($166|0)!=(0);
   if (!($167)) {
    $168 = $8;
    $169 = ((($168)) + 40|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = (($170) - 1)|0;
    $18 = $171;
   }
  }
 }
 $172 = $9;
 $173 = ((($172)) + 8|0);
 $174 = HEAP32[$173>>2]|0;
 $175 = ($174|0)!=(5);
 if ($175) {
  $4 = -1;
  $1853 = $4;
  STACKTOP = sp;return ($1853|0);
 }
 $176 = $7;
 $177 = ((($176)) + 24|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = ($178|0)!=(0|0);
 if ($179) {
  $180 = $7;
  $181 = ((($180)) + 24|0);
  $182 = HEAP32[$181>>2]|0;
  _free($182);
 }
 $183 = $7;
 $184 = HEAP32[$183>>2]|0;
 $185 = ((($184)) + 16|0);
 $186 = HEAP32[$185>>2]|0;
 $187 = ($186*108)|0;
 $188 = (_malloc($187)|0);
 $189 = $7;
 $190 = ((($189)) + 24|0);
 HEAP32[$190>>2] = $188;
 $191 = ($188|0)!=(0|0);
 if (!($191)) {
  $4 = -1;
  $1853 = $4;
  STACKTOP = sp;return ($1853|0);
 }
 $192 = $7;
 $193 = HEAP32[$192>>2]|0;
 $194 = ((($193)) + 4|0);
 $195 = HEAP32[$194>>2]|0;
 $11 = $195;
 $196 = $7;
 $197 = HEAP32[$196>>2]|0;
 $198 = ((($197)) + 44|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = ($199|0)>=(0);
 $201 = $200 ? 1 : 0;
 $19 = $201;
 $202 = $11;
 $203 = ($202|0)>=(0);
 do {
  if ($203) {
   $204 = $19;
   $205 = ($204|0)!=(0);
   if (!($205)) {
    $246 = $5;
    $247 = ((($246)) + 288|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = ($248|0)!=(0);
    if ($249) {
     break;
    }
    $250 = $5;
    $251 = ((($250)) + 312|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = $252 & 512;
    $254 = ($253|0)!=(0);
    if ($254) {
     $255 = $5;
     $256 = $7;
     $257 = HEAP32[$256>>2]|0;
     $258 = ((($257)) + 4|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = $7;
     $261 = HEAP32[$260>>2]|0;
     $262 = ((($261)) + 8|0);
     $263 = HEAP32[$262>>2]|0;
     $264 = $7;
     $265 = HEAP32[$264>>2]|0;
     $266 = ((($265)) + 8|0);
     $267 = HEAP32[$266>>2]|0;
     $268 = $7;
     $269 = HEAP32[$268>>2]|0;
     $270 = ((($269)) + 12|0);
     $271 = HEAP32[$270>>2]|0;
     $272 = (($267) + ($271))|0;
     $273 = (($272) - 1)|0;
     $274 = (_cram_get_ref($255,$259,$263,$273)|0);
     $275 = $7;
     $276 = ((($275)) + 132|0);
     HEAP32[$276>>2] = $274;
    }
    $277 = $7;
    $278 = HEAP32[$277>>2]|0;
    $279 = ((($278)) + 8|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = $7;
    $282 = ((($281)) + 136|0);
    HEAP32[$282>>2] = $280;
    $283 = $7;
    $284 = HEAP32[$283>>2]|0;
    $285 = ((($284)) + 8|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = $7;
    $288 = HEAP32[$287>>2]|0;
    $289 = ((($288)) + 12|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = (($286) + ($290))|0;
    $292 = (($291) - 1)|0;
    $293 = $7;
    $294 = ((($293)) + 140|0);
    HEAP32[$294>>2] = $292;
    $295 = $7;
    $296 = ((($295)) + 136|0);
    $297 = HEAP32[$296>>2]|0;
    $298 = ($297|0)<(0);
    if ($298) {
     $299 = HEAP32[2410]|0;
     (_fprintf($299,20935,$vararg_buffer10)|0);
     $300 = $7;
     $301 = ((($300)) + 136|0);
     HEAP32[$301>>2] = 0;
    }
    $302 = $5;
    $303 = ((($302)) + 34704|0);
    (_pthread_mutex_lock(($303|0))|0);
    $304 = $5;
    $305 = ((($304)) + 48|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = ((($306)) + 28|0);
    (_pthread_mutex_lock(($307|0))|0);
    $308 = $5;
    $309 = ((($308)) + 312|0);
    $310 = HEAP32[$309>>2]|0;
    $311 = $310 & 512;
    $312 = ($311|0)!=(0);
    if ($312) {
     $313 = $7;
     $314 = ((($313)) + 140|0);
     $315 = HEAP32[$314>>2]|0;
     $316 = ($315|0)<(0);
     $317 = $316 << 31 >> 31;
     $318 = $11;
     $319 = $5;
     $320 = ((($319)) + 48|0);
     $321 = HEAP32[$320>>2]|0;
     $322 = ((($321)) + 8|0);
     $323 = HEAP32[$322>>2]|0;
     $324 = (($323) + ($318<<2)|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = ((($325)) + 8|0);
     $327 = $326;
     $328 = $327;
     $329 = HEAP32[$328>>2]|0;
     $330 = (($327) + 4)|0;
     $331 = $330;
     $332 = HEAP32[$331>>2]|0;
     $333 = ($317|0)>($332|0);
     $334 = ($315>>>0)>($329>>>0);
     $335 = ($317|0)==($332|0);
     $336 = $335 & $334;
     $337 = $333 | $336;
     if ($337) {
      $338 = $11;
      $339 = $5;
      $340 = ((($339)) + 48|0);
      $341 = HEAP32[$340>>2]|0;
      $342 = ((($341)) + 8|0);
      $343 = HEAP32[$342>>2]|0;
      $344 = (($343) + ($338<<2)|0);
      $345 = HEAP32[$344>>2]|0;
      $346 = ((($345)) + 8|0);
      $347 = $346;
      $348 = $347;
      $349 = HEAP32[$348>>2]|0;
      $350 = (($347) + 4)|0;
      $351 = $350;
      $352 = HEAP32[$351>>2]|0;
      $353 = $7;
      $354 = ((($353)) + 140|0);
      HEAP32[$354>>2] = $349;
     }
    }
    $355 = $5;
    $356 = ((($355)) + 48|0);
    $357 = HEAP32[$356>>2]|0;
    $358 = ((($357)) + 28|0);
    (_pthread_mutex_unlock(($358|0))|0);
    $359 = $5;
    $360 = ((($359)) + 34704|0);
    (_pthread_mutex_unlock(($360|0))|0);
    break;
   }
   $206 = $7;
   $207 = HEAP32[$206>>2]|0;
   $208 = ((($207)) + 44|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = ($209|0)<(0);
   if ($210) {
    $211 = HEAP32[2410]|0;
    (_fprintf($211,20871,$vararg_buffer)|0);
    $4 = -1;
    $1853 = $4;
    STACKTOP = sp;return ($1853|0);
   }
   $212 = $7;
   $213 = $7;
   $214 = HEAP32[$213>>2]|0;
   $215 = ((($214)) + 44|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = (_cram_get_block_by_id_800($212,$216)|0);
   $25 = $217;
   $218 = $25;
   $219 = ($218|0)!=(0|0);
   if (!($219)) {
    $4 = -1;
    $1853 = $4;
    STACKTOP = sp;return ($1853|0);
   }
   $220 = $25;
   $221 = (_cram_uncompress_block($220)|0);
   $222 = ($221|0)!=(0);
   if (!($222)) {
    $223 = $25;
    $224 = ((($223)) + 32|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = $7;
    $227 = ((($226)) + 132|0);
    HEAP32[$227>>2] = $225;
    $228 = $7;
    $229 = HEAP32[$228>>2]|0;
    $230 = ((($229)) + 8|0);
    $231 = HEAP32[$230>>2]|0;
    $232 = $7;
    $233 = ((($232)) + 136|0);
    HEAP32[$233>>2] = $231;
    $234 = $7;
    $235 = HEAP32[$234>>2]|0;
    $236 = ((($235)) + 8|0);
    $237 = HEAP32[$236>>2]|0;
    $238 = $7;
    $239 = HEAP32[$238>>2]|0;
    $240 = ((($239)) + 12|0);
    $241 = HEAP32[$240>>2]|0;
    $242 = (($237) + ($241))|0;
    $243 = (($242) - 1)|0;
    $244 = $7;
    $245 = ((($244)) + 140|0);
    HEAP32[$245>>2] = $243;
    break;
   }
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
  }
 } while(0);
 $361 = $5;
 $362 = ((($361)) + 312|0);
 $363 = HEAP32[$362>>2]|0;
 $364 = $363 & 512;
 $365 = ($364|0)!=(0);
 if ($365) {
  $366 = $7;
  $367 = ((($366)) + 132|0);
  $368 = HEAP32[$367>>2]|0;
  $369 = ($368|0)==(0|0);
  if ($369) {
   $370 = $7;
   $371 = HEAP32[$370>>2]|0;
   $372 = ((($371)) + 4|0);
   $373 = HEAP32[$372>>2]|0;
   $374 = ($373|0)>=(0);
   if ($374) {
    $375 = $5;
    $376 = ((($375)) + 288|0);
    $377 = HEAP32[$376>>2]|0;
    $378 = ($377|0)!=(0);
    if (!($378)) {
     $379 = HEAP32[2410]|0;
     $380 = $7;
     $381 = HEAP32[$380>>2]|0;
     $382 = ((($381)) + 4|0);
     $383 = HEAP32[$382>>2]|0;
     $384 = $7;
     $385 = HEAP32[$384>>2]|0;
     $386 = ((($385)) + 8|0);
     $387 = HEAP32[$386>>2]|0;
     $388 = $7;
     $389 = HEAP32[$388>>2]|0;
     $390 = ((($389)) + 8|0);
     $391 = HEAP32[$390>>2]|0;
     $392 = $7;
     $393 = HEAP32[$392>>2]|0;
     $394 = ((($393)) + 12|0);
     $395 = HEAP32[$394>>2]|0;
     $396 = (($391) + ($395))|0;
     $397 = (($396) - 1)|0;
     HEAP32[$vararg_buffer12>>2] = $383;
     $vararg_ptr14 = ((($vararg_buffer12)) + 4|0);
     HEAP32[$vararg_ptr14>>2] = $387;
     $vararg_ptr15 = ((($vararg_buffer12)) + 8|0);
     HEAP32[$vararg_ptr15>>2] = $397;
     (_fprintf($379,20964,$vararg_buffer12)|0);
     $4 = -1;
     $1853 = $4;
     STACKTOP = sp;return ($1853|0);
    }
   }
  }
 }
 $398 = $5;
 $399 = ((($398)) + 8|0);
 $400 = HEAP32[$399>>2]|0;
 $401 = $400 >> 8;
 $402 = ($401|0)!=(1);
 do {
  if ($402) {
   $403 = $5;
   $404 = ((($403)) + 312|0);
   $405 = HEAP32[$404>>2]|0;
   $406 = $405 & 512;
   $407 = ($406|0)!=(0);
   if ($407) {
    $408 = $7;
    $409 = HEAP32[$408>>2]|0;
    $410 = ((($409)) + 4|0);
    $411 = HEAP32[$410>>2]|0;
    $412 = ($411|0)>=(0);
    if ($412) {
     $413 = $5;
     $414 = ((($413)) + 292|0);
     $415 = HEAP32[$414>>2]|0;
     $416 = ($415|0)!=(0);
     if (!($416)) {
      $417 = $7;
      $418 = HEAP32[$417>>2]|0;
      $419 = ((($418)) + 48|0);
      $420 = (_memcmp($419,26424,16)|0);
      $421 = ($420|0)!=(0);
      if ($421) {
       $422 = $7;
       $423 = ((($422)) + 132|0);
       $424 = HEAP32[$423>>2]|0;
       $425 = ($424|0)!=(0|0);
       if ($425) {
        $426 = $7;
        $427 = HEAP32[$426>>2]|0;
        $428 = ((($427)) + 4|0);
        $429 = HEAP32[$428>>2]|0;
        $430 = ($429|0)>=(0);
        if ($430) {
         $431 = $7;
         $432 = HEAP32[$431>>2]|0;
         $433 = ((($432)) + 8|0);
         $434 = HEAP32[$433>>2]|0;
         $435 = $7;
         $436 = ((($435)) + 136|0);
         $437 = HEAP32[$436>>2]|0;
         $438 = ($434|0)>=($437|0);
         if ($438) {
          $439 = $7;
          $440 = HEAP32[$439>>2]|0;
          $441 = ((($440)) + 8|0);
          $442 = HEAP32[$441>>2]|0;
          $443 = $7;
          $444 = ((($443)) + 136|0);
          $445 = HEAP32[$444>>2]|0;
          $446 = (($442) - ($445))|0;
          $28 = $446;
         } else {
          $447 = HEAP32[2410]|0;
          (_fprintf($447,20935,$vararg_buffer16)|0);
          $28 = 0;
         }
         $448 = $7;
         $449 = HEAP32[$448>>2]|0;
         $450 = ((($449)) + 12|0);
         $451 = HEAP32[$450>>2]|0;
         $452 = $7;
         $453 = ((($452)) + 140|0);
         $454 = HEAP32[$453>>2]|0;
         $455 = $7;
         $456 = ((($455)) + 136|0);
         $457 = HEAP32[$456>>2]|0;
         $458 = (($454) - ($457))|0;
         $459 = (($458) + 1)|0;
         $460 = ($451|0)<=($459|0);
         if ($460) {
          $461 = $7;
          $462 = HEAP32[$461>>2]|0;
          $463 = ((($462)) + 12|0);
          $464 = HEAP32[$463>>2]|0;
          $29 = $464;
         } else {
          $465 = HEAP32[2410]|0;
          (_fprintf($465,21002,$vararg_buffer18)|0);
          $466 = $7;
          $467 = ((($466)) + 140|0);
          $468 = HEAP32[$467>>2]|0;
          $469 = $7;
          $470 = ((($469)) + 136|0);
          $471 = HEAP32[$470>>2]|0;
          $472 = (($468) - ($471))|0;
          $473 = (($472) + 1)|0;
          $29 = $473;
         }
         $474 = (_hts_md5_init()|0);
         $26 = $474;
         $475 = ($474|0)!=(0|0);
         if (!($475)) {
          $4 = -1;
          $1853 = $4;
          STACKTOP = sp;return ($1853|0);
         }
         $476 = $28;
         $477 = $29;
         $478 = (($476) + ($477))|0;
         $479 = $7;
         $480 = ((($479)) + 140|0);
         $481 = HEAP32[$480>>2]|0;
         $482 = $7;
         $483 = ((($482)) + 136|0);
         $484 = HEAP32[$483>>2]|0;
         $485 = (($481) - ($484))|0;
         $486 = (($485) + 1)|0;
         $487 = ($478|0)>($486|0);
         if ($487) {
          $488 = $7;
          $489 = ((($488)) + 140|0);
          $490 = HEAP32[$489>>2]|0;
          $491 = $7;
          $492 = ((($491)) + 136|0);
          $493 = HEAP32[$492>>2]|0;
          $494 = (($490) - ($493))|0;
          $495 = (($494) + 1)|0;
          $496 = $28;
          $497 = (($495) - ($496))|0;
          $29 = $497;
         }
         $498 = $29;
         $499 = ($498|0)>=(0);
         if ($499) {
          $500 = $26;
          $501 = $7;
          $502 = ((($501)) + 132|0);
          $503 = HEAP32[$502>>2]|0;
          $504 = $28;
          $505 = (($503) + ($504)|0);
          $506 = $29;
          _hts_md5_update($500,$505,$506);
         }
         $507 = $26;
         _hts_md5_final($27,$507);
         $508 = $26;
         _hts_md5_destroy($508);
        } else {
         label = 65;
        }
       } else {
        label = 65;
       }
       do {
        if ((label|0) == 65) {
         $509 = $7;
         $510 = ((($509)) + 132|0);
         $511 = HEAP32[$510>>2]|0;
         $512 = ($511|0)!=(0|0);
         if (!($512)) {
          $513 = $7;
          $514 = HEAP32[$513>>2]|0;
          $515 = ((($514)) + 44|0);
          $516 = HEAP32[$515>>2]|0;
          $517 = ($516|0)>=(0);
          if ($517) {
           $518 = $7;
           $519 = $7;
           $520 = HEAP32[$519>>2]|0;
           $521 = ((($520)) + 44|0);
           $522 = HEAP32[$521>>2]|0;
           $523 = (_cram_get_block_by_id_800($518,$522)|0);
           $30 = $523;
           $524 = $30;
           $525 = ($524|0)!=(0|0);
           if (!($525)) {
            break;
           }
           $526 = (_hts_md5_init()|0);
           $26 = $526;
           $527 = ($526|0)!=(0|0);
           if ($527) {
            $528 = $26;
            $529 = $30;
            $530 = ((($529)) + 32|0);
            $531 = HEAP32[$530>>2]|0;
            $532 = $30;
            $533 = ((($532)) + 20|0);
            $534 = HEAP32[$533>>2]|0;
            _hts_md5_update($528,$531,$534);
            $535 = $26;
            _hts_md5_final($27,$535);
            $536 = $26;
            _hts_md5_destroy($536);
            break;
           }
           $4 = -1;
           $1853 = $4;
           STACKTOP = sp;return ($1853|0);
          }
         }
        }
       } while(0);
       $537 = $7;
       $538 = ((($537)) + 132|0);
       $539 = HEAP32[$538>>2]|0;
       $540 = ($539|0)!=(0|0);
       if ($540) {
        label = 73;
       } else {
        $541 = $7;
        $542 = HEAP32[$541>>2]|0;
        $543 = ((($542)) + 44|0);
        $544 = HEAP32[$543>>2]|0;
        $545 = ($544|0)<(0);
        if (!($545)) {
         label = 73;
        }
       }
       if ((label|0) == 73) {
        $546 = $7;
        $547 = HEAP32[$546>>2]|0;
        $548 = ((($547)) + 48|0);
        $549 = (_memcmp($27,$548,16)|0);
        $550 = ($549|0)!=(0);
        if (!($550)) {
         break;
        }
       }
       $551 = HEAP32[2410]|0;
       $552 = $11;
       $553 = $7;
       $554 = ((($553)) + 136|0);
       $555 = HEAP32[$554>>2]|0;
       $556 = $7;
       $557 = ((($556)) + 140|0);
       $558 = HEAP32[$557>>2]|0;
       HEAP32[$vararg_buffer20>>2] = $552;
       $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
       HEAP32[$vararg_ptr23>>2] = $555;
       $vararg_ptr24 = ((($vararg_buffer20)) + 8|0);
       HEAP32[$vararg_ptr24>>2] = $558;
       (_fprintf($551,21036,$vararg_buffer20)|0);
       $559 = HEAP32[2410]|0;
       $560 = $7;
       $561 = HEAP32[$560>>2]|0;
       $562 = ((($561)) + 48|0);
       $563 = (_md5_print($562,$31)|0);
       HEAP32[$vararg_buffer25>>2] = $563;
       (_fprintf($559,21092,$vararg_buffer25)|0);
       $564 = HEAP32[2410]|0;
       $565 = (_md5_print($27,$31)|0);
       HEAP32[$vararg_buffer28>>2] = $565;
       (_fprintf($564,21102,$vararg_buffer28)|0);
       $4 = -1;
       $1853 = $4;
       STACKTOP = sp;return ($1853|0);
      }
     }
    }
   }
  }
 } while(0);
 $566 = $11;
 $567 = ($566|0)==(-2);
 if ($567) {
  $568 = $5;
  $569 = ((($568)) + 34704|0);
  (_pthread_mutex_lock(($569|0))|0);
  $570 = $5;
  $571 = ((($570)) + 48|0);
  $572 = HEAP32[$571>>2]|0;
  $573 = ((($572)) + 28|0);
  (_pthread_mutex_lock(($573|0))|0);
  $574 = $5;
  $575 = ((($574)) + 48|0);
  $576 = HEAP32[$575>>2]|0;
  $577 = ((($576)) + 12|0);
  $578 = HEAP32[$577>>2]|0;
  $579 = (_calloc($578,4)|0);
  $20 = $579;
  $580 = $5;
  $581 = ((($580)) + 48|0);
  $582 = HEAP32[$581>>2]|0;
  $583 = ((($582)) + 28|0);
  (_pthread_mutex_unlock(($583|0))|0);
  $584 = $5;
  $585 = ((($584)) + 34704|0);
  (_pthread_mutex_unlock(($585|0))|0);
  $586 = $20;
  $587 = ($586|0)!=(0|0);
  if (!($587)) {
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
  }
 }
 $32 = -9;
 $15 = 0;
 L118: while(1) {
  $588 = $15;
  $589 = $7;
  $590 = HEAP32[$589>>2]|0;
  $591 = ((($590)) + 16|0);
  $592 = HEAP32[$591>>2]|0;
  $593 = ($588|0)<($592|0);
  if (!($593)) {
   label = 243;
   break;
  }
  $594 = $15;
  $595 = $7;
  $596 = ((($595)) + 24|0);
  $597 = HEAP32[$596>>2]|0;
  $598 = (($597) + (($594*108)|0)|0);
  $33 = $598;
  $599 = $7;
  $600 = $33;
  HEAP32[$600>>2] = $599;
  HEAP32[$13>>2] = 1;
  $601 = $21;
  $602 = $601 & 1;
  $603 = ($602|0)!=(0);
  if ($603) {
   $604 = $6;
   $605 = ((($604)) + 52|0);
   $606 = HEAP32[$605>>2]|0;
   $607 = ((($606)) + 348|0);
   $608 = ((($607)) + 60|0);
   $609 = HEAP32[$608>>2]|0;
   $610 = ($609|0)!=(0|0);
   if (!($610)) {
    label = 82;
    break;
   }
   $611 = $6;
   $612 = ((($611)) + 52|0);
   $613 = HEAP32[$612>>2]|0;
   $614 = ((($613)) + 348|0);
   $615 = ((($614)) + 60|0);
   $616 = HEAP32[$615>>2]|0;
   $617 = ((($616)) + 12|0);
   $618 = HEAP32[$617>>2]|0;
   $619 = $7;
   $620 = $6;
   $621 = ((($620)) + 52|0);
   $622 = HEAP32[$621>>2]|0;
   $623 = ((($622)) + 348|0);
   $624 = ((($623)) + 60|0);
   $625 = HEAP32[$624>>2]|0;
   $626 = $9;
   $627 = (FUNCTION_TABLE_iiiiii[$618 & 63]($619,$625,$626,$10,$13)|0);
   $628 = $14;
   $629 = $628 | $627;
   $14 = $629;
   $630 = $14;
   $631 = ($630|0)!=(0);
   $632 = HEAP32[$10>>2]|0;
   $633 = ($632|0)<(0);
   $or$cond = $631 | $633;
   $634 = HEAP32[$10>>2]|0;
   $635 = ($634>>>0)>=(4096);
   $or$cond3 = $or$cond | $635;
   if ($or$cond3) {
    label = 84;
    break;
   }
   $636 = HEAP32[$10>>2]|0;
   $637 = $5;
   $638 = ((($637)) + 328|0);
   $639 = (($638) + ($636<<2)|0);
   $640 = HEAP32[$639>>2]|0;
   HEAP32[$10>>2] = $640;
   $641 = HEAP32[$10>>2]|0;
   $642 = $33;
   $643 = ((($642)) + 8|0);
   HEAP32[$643>>2] = $641;
  } else {
   HEAP32[$10>>2] = 4;
   $644 = $33;
   $645 = ((($644)) + 8|0);
   HEAP32[$645>>2] = 4;
  }
  $646 = $21;
  $647 = $646 & 1048576;
  $648 = ($647|0)!=(0);
  do {
   if ($648) {
    $649 = $5;
    $650 = ((($649)) + 8|0);
    $651 = HEAP32[$650>>2]|0;
    $652 = $651 >> 8;
    $653 = ($652|0)==(1);
    $654 = $6;
    $655 = ((($654)) + 52|0);
    $656 = HEAP32[$655>>2]|0;
    $657 = ((($656)) + 348|0);
    $658 = ((($657)) + 64|0);
    $659 = HEAP32[$658>>2]|0;
    $660 = ($659|0)!=(0|0);
    if ($653) {
     if (!($660)) {
      label = 90;
      break L118;
     }
     $661 = $6;
     $662 = ((($661)) + 52|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = ((($663)) + 348|0);
     $665 = ((($664)) + 64|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ((($666)) + 12|0);
     $668 = HEAP32[$667>>2]|0;
     $669 = $7;
     $670 = $6;
     $671 = ((($670)) + 52|0);
     $672 = HEAP32[$671>>2]|0;
     $673 = ((($672)) + 348|0);
     $674 = ((($673)) + 64|0);
     $675 = HEAP32[$674>>2]|0;
     $676 = $9;
     $677 = (FUNCTION_TABLE_iiiiii[$668 & 63]($669,$675,$676,$12,$13)|0);
     $678 = $14;
     $679 = $678 | $677;
     $14 = $679;
     $680 = $14;
     $681 = ($680|0)!=(0);
     if ($681) {
      label = 92;
      break L118;
     }
     $682 = HEAP8[$12>>0]|0;
     $683 = $682&255;
     $684 = $33;
     $685 = ((($684)) + 12|0);
     HEAP32[$685>>2] = $683;
     break;
    } else {
     if (!($660)) {
      label = 95;
      break L118;
     }
     $686 = $6;
     $687 = ((($686)) + 52|0);
     $688 = HEAP32[$687>>2]|0;
     $689 = ((($688)) + 348|0);
     $690 = ((($689)) + 64|0);
     $691 = HEAP32[$690>>2]|0;
     $692 = ((($691)) + 12|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = $7;
     $695 = $6;
     $696 = ((($695)) + 52|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ((($697)) + 348|0);
     $699 = ((($698)) + 64|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $9;
     $702 = $33;
     $703 = ((($702)) + 12|0);
     $704 = (FUNCTION_TABLE_iiiiii[$693 & 63]($694,$700,$701,$703,$13)|0);
     $705 = $14;
     $706 = $705 | $704;
     $14 = $706;
     $707 = $14;
     $708 = ($707|0)!=(0);
     if ($708) {
      label = 97;
      break L118;
     }
     $709 = $33;
     $710 = ((($709)) + 12|0);
     $711 = HEAP32[$710>>2]|0;
     $712 = $711&255;
     HEAP8[$12>>0] = $712;
     break;
    }
   } else {
    $713 = $33;
    $714 = ((($713)) + 12|0);
    HEAP32[$714>>2] = 0;
    HEAP8[$12>>0] = 0;
   }
  } while(0);
  $715 = $5;
  $716 = ((($715)) + 8|0);
  $717 = HEAP32[$716>>2]|0;
  $718 = $717 >> 8;
  $719 = ($718|0)!=(1);
  $720 = $11;
  $721 = ($720|0)==(-2);
  $or$cond5 = $719 & $721;
  do {
   if ($or$cond5) {
    $722 = $21;
    $723 = $722 & 2097152;
    $724 = ($723|0)!=(0);
    if (!($724)) {
     $852 = $33;
     $853 = ((($852)) + 4|0);
     HEAP32[$853>>2] = -1;
     break;
    }
    $725 = $6;
    $726 = ((($725)) + 52|0);
    $727 = HEAP32[$726>>2]|0;
    $728 = ((($727)) + 348|0);
    $729 = ((($728)) + 132|0);
    $730 = HEAP32[$729>>2]|0;
    $731 = ($730|0)!=(0|0);
    if (!($731)) {
     label = 103;
     break L118;
    }
    $732 = $6;
    $733 = ((($732)) + 52|0);
    $734 = HEAP32[$733>>2]|0;
    $735 = ((($734)) + 348|0);
    $736 = ((($735)) + 132|0);
    $737 = HEAP32[$736>>2]|0;
    $738 = ((($737)) + 12|0);
    $739 = HEAP32[$738>>2]|0;
    $740 = $7;
    $741 = $6;
    $742 = ((($741)) + 52|0);
    $743 = HEAP32[$742>>2]|0;
    $744 = ((($743)) + 348|0);
    $745 = ((($744)) + 132|0);
    $746 = HEAP32[$745>>2]|0;
    $747 = $9;
    $748 = $33;
    $749 = ((($748)) + 4|0);
    $750 = (FUNCTION_TABLE_iiiiii[$739 & 63]($740,$746,$747,$749,$13)|0);
    $751 = $14;
    $752 = $751 | $750;
    $14 = $752;
    $753 = $14;
    $754 = ($753|0)!=(0);
    if ($754) {
     label = 105;
     break L118;
    }
    $755 = $5;
    $756 = ((($755)) + 312|0);
    $757 = HEAP32[$756>>2]|0;
    $758 = $757 & 768;
    $759 = ($758|0)!=(0);
    if (!($759)) {
     break;
    }
    $760 = $33;
    $761 = ((($760)) + 4|0);
    $762 = HEAP32[$761>>2]|0;
    $763 = ($762|0)>=(0);
    if (!($763)) {
     break;
    }
    $764 = $33;
    $765 = ((($764)) + 4|0);
    $766 = HEAP32[$765>>2]|0;
    $767 = $32;
    $768 = ($766|0)!=($767|0);
    if (!($768)) {
     break;
    }
    $769 = $5;
    $770 = ((($769)) + 288|0);
    $771 = HEAP32[$770>>2]|0;
    $772 = ($771|0)!=(0);
    do {
     if (!($772)) {
      $773 = $33;
      $774 = ((($773)) + 4|0);
      $775 = HEAP32[$774>>2]|0;
      $776 = $20;
      $777 = (($776) + ($775<<2)|0);
      $778 = HEAP32[$777>>2]|0;
      $779 = ($778|0)!=(0|0);
      if (!($779)) {
       $780 = $5;
       $781 = $33;
       $782 = ((($781)) + 4|0);
       $783 = HEAP32[$782>>2]|0;
       $784 = (_cram_get_ref($780,$783,1,0)|0);
       $785 = $33;
       $786 = ((($785)) + 4|0);
       $787 = HEAP32[$786>>2]|0;
       $788 = $20;
       $789 = (($788) + ($787<<2)|0);
       HEAP32[$789>>2] = $784;
      }
      $790 = $33;
      $791 = ((($790)) + 4|0);
      $792 = HEAP32[$791>>2]|0;
      $793 = $20;
      $794 = (($793) + ($792<<2)|0);
      $795 = HEAP32[$794>>2]|0;
      $796 = $7;
      $797 = ((($796)) + 132|0);
      HEAP32[$797>>2] = $795;
      $798 = $5;
      $799 = ((($798)) + 34656|0);
      $800 = HEAP32[$799>>2]|0;
      $801 = ($800|0)==(0);
      $802 = $32;
      $803 = ($802|0)>=(0);
      $or$cond7 = $801 & $803;
      if (!($or$cond7)) {
       break;
      }
      $804 = $32;
      $805 = $20;
      $806 = (($805) + ($804<<2)|0);
      $807 = HEAP32[$806>>2]|0;
      $808 = ($807|0)!=(0|0);
      if (!($808)) {
       break;
      }
      $809 = $5;
      $810 = ((($809)) + 48|0);
      $811 = HEAP32[$810>>2]|0;
      $812 = $32;
      _cram_ref_decr($811,$812);
      $813 = $32;
      $814 = $20;
      $815 = (($814) + ($813<<2)|0);
      HEAP32[$815>>2] = 0;
     }
    } while(0);
    $816 = $7;
    $817 = ((($816)) + 136|0);
    HEAP32[$817>>2] = 1;
    $818 = $5;
    $819 = ((($818)) + 34704|0);
    (_pthread_mutex_lock(($819|0))|0);
    $820 = $5;
    $821 = ((($820)) + 48|0);
    $822 = HEAP32[$821>>2]|0;
    $823 = ((($822)) + 28|0);
    (_pthread_mutex_lock(($823|0))|0);
    $824 = $33;
    $825 = ((($824)) + 4|0);
    $826 = HEAP32[$825>>2]|0;
    $827 = $5;
    $828 = ((($827)) + 48|0);
    $829 = HEAP32[$828>>2]|0;
    $830 = ((($829)) + 8|0);
    $831 = HEAP32[$830>>2]|0;
    $832 = (($831) + ($826<<2)|0);
    $833 = HEAP32[$832>>2]|0;
    $834 = ((($833)) + 8|0);
    $835 = $834;
    $836 = $835;
    $837 = HEAP32[$836>>2]|0;
    $838 = (($835) + 4)|0;
    $839 = $838;
    $840 = HEAP32[$839>>2]|0;
    $841 = $7;
    $842 = ((($841)) + 140|0);
    HEAP32[$842>>2] = $837;
    $843 = $5;
    $844 = ((($843)) + 48|0);
    $845 = HEAP32[$844>>2]|0;
    $846 = ((($845)) + 28|0);
    (_pthread_mutex_unlock(($846|0))|0);
    $847 = $5;
    $848 = ((($847)) + 34704|0);
    (_pthread_mutex_unlock(($848|0))|0);
    $849 = $33;
    $850 = ((($849)) + 4|0);
    $851 = HEAP32[$850>>2]|0;
    $32 = $851;
   } else {
    $854 = $11;
    $855 = $33;
    $856 = ((($855)) + 4|0);
    HEAP32[$856>>2] = $854;
   }
  } while(0);
  $857 = $33;
  $858 = ((($857)) + 4|0);
  $859 = HEAP32[$858>>2]|0;
  $860 = $8;
  $861 = ((($860)) + 28|0);
  $862 = HEAP32[$861>>2]|0;
  $863 = ($859|0)>=($862|0);
  if ($863) {
   label = 119;
   break;
  }
  $868 = $21;
  $869 = $868 & 8;
  $870 = ($869|0)!=(0);
  if ($870) {
   $871 = $6;
   $872 = ((($871)) + 52|0);
   $873 = HEAP32[$872>>2]|0;
   $874 = ((($873)) + 348|0);
   $875 = ((($874)) + 100|0);
   $876 = HEAP32[$875>>2]|0;
   $877 = ($876|0)!=(0|0);
   if (!($877)) {
    label = 122;
    break;
   }
   $878 = $6;
   $879 = ((($878)) + 52|0);
   $880 = HEAP32[$879>>2]|0;
   $881 = ((($880)) + 348|0);
   $882 = ((($881)) + 100|0);
   $883 = HEAP32[$882>>2]|0;
   $884 = ((($883)) + 12|0);
   $885 = HEAP32[$884>>2]|0;
   $886 = $7;
   $887 = $6;
   $888 = ((($887)) + 52|0);
   $889 = HEAP32[$888>>2]|0;
   $890 = ((($889)) + 348|0);
   $891 = ((($890)) + 100|0);
   $892 = HEAP32[$891>>2]|0;
   $893 = $9;
   $894 = $33;
   $895 = ((($894)) + 16|0);
   $896 = (FUNCTION_TABLE_iiiiii[$885 & 63]($886,$892,$893,$895,$13)|0);
   $897 = $14;
   $898 = $897 | $896;
   $14 = $898;
   $899 = $14;
   $900 = ($899|0)!=(0);
   if ($900) {
    label = 124;
    break;
   }
   $902 = $33;
   $903 = ((($902)) + 16|0);
   $904 = HEAP32[$903>>2]|0;
   $905 = ($904|0)<(0);
   if ($905) {
    label = 126;
    break;
   }
  }
  $907 = $21;
  $908 = $907 & 2;
  $909 = ($908|0)!=(0);
  $910 = $6;
  if ($909) {
   $911 = ((($910)) + 52|0);
   $912 = HEAP32[$911>>2]|0;
   $913 = ((($912)) + 348|0);
   $914 = ((($913)) + 68|0);
   $915 = HEAP32[$914>>2]|0;
   $916 = ($915|0)!=(0|0);
   if (!($916)) {
    label = 129;
    break;
   }
   $917 = $6;
   $918 = ((($917)) + 52|0);
   $919 = HEAP32[$918>>2]|0;
   $920 = ((($919)) + 348|0);
   $921 = ((($920)) + 68|0);
   $922 = HEAP32[$921>>2]|0;
   $923 = ((($922)) + 12|0);
   $924 = HEAP32[$923>>2]|0;
   $925 = $7;
   $926 = $6;
   $927 = ((($926)) + 52|0);
   $928 = HEAP32[$927>>2]|0;
   $929 = ((($928)) + 348|0);
   $930 = ((($929)) + 68|0);
   $931 = HEAP32[$930>>2]|0;
   $932 = $9;
   $933 = $33;
   $934 = ((($933)) + 20|0);
   $935 = (FUNCTION_TABLE_iiiiii[$924 & 63]($925,$931,$932,$934,$13)|0);
   $936 = $14;
   $937 = $936 | $935;
   $14 = $937;
   $938 = $14;
   $939 = ($938|0)!=(0);
   if ($939) {
    label = 131;
    break;
   }
   $941 = $6;
   $942 = ((($941)) + 52|0);
   $943 = HEAP32[$942>>2]|0;
   $944 = ((($943)) + 44|0);
   $945 = HEAP32[$944>>2]|0;
   $946 = ($945|0)!=(0);
   if ($946) {
    $947 = $7;
    $948 = ((($947)) + 16|0);
    $949 = HEAP32[$948>>2]|0;
    $950 = $33;
    $951 = ((($950)) + 20|0);
    $952 = HEAP32[$951>>2]|0;
    $953 = (($952) + ($949))|0;
    HEAP32[$951>>2] = $953;
   }
   $954 = $33;
   $955 = ((($954)) + 20|0);
   $956 = HEAP32[$955>>2]|0;
   $957 = $7;
   $958 = ((($957)) + 16|0);
   HEAP32[$958>>2] = $956;
  } else {
   $959 = ((($910)) + 8|0);
   $960 = HEAP32[$959>>2]|0;
   $961 = $33;
   $962 = ((($961)) + 20|0);
   HEAP32[$962>>2] = $960;
  }
  $963 = $21;
  $964 = $963 & 4096;
  $965 = ($964|0)!=(0);
  do {
   if ($965) {
    $966 = $6;
    $967 = ((($966)) + 52|0);
    $968 = HEAP32[$967>>2]|0;
    $969 = ((($968)) + 348|0);
    $970 = ((($969)) + 72|0);
    $971 = HEAP32[$970>>2]|0;
    $972 = ($971|0)!=(0|0);
    if (!($972)) {
     label = 138;
     break L118;
    }
    $973 = $6;
    $974 = ((($973)) + 52|0);
    $975 = HEAP32[$974>>2]|0;
    $976 = ((($975)) + 348|0);
    $977 = ((($976)) + 72|0);
    $978 = HEAP32[$977>>2]|0;
    $979 = ((($978)) + 12|0);
    $980 = HEAP32[$979>>2]|0;
    $981 = $7;
    $982 = $6;
    $983 = ((($982)) + 52|0);
    $984 = HEAP32[$983>>2]|0;
    $985 = ((($984)) + 348|0);
    $986 = ((($985)) + 72|0);
    $987 = HEAP32[$986>>2]|0;
    $988 = $9;
    $989 = $33;
    $990 = ((($989)) + 24|0);
    $991 = (FUNCTION_TABLE_iiiiii[$980 & 63]($981,$987,$988,$990,$13)|0);
    $992 = $14;
    $993 = $992 | $991;
    $14 = $993;
    $994 = $14;
    $995 = ($994|0)!=(0);
    if ($995) {
     label = 140;
     break L118;
    }
    $997 = $33;
    $998 = ((($997)) + 24|0);
    $999 = HEAP32[$998>>2]|0;
    $1000 = $18;
    $1001 = ($999|0)==($1000|0);
    if (!($1001)) {
     break;
    }
    $1002 = $33;
    $1003 = ((($1002)) + 24|0);
    HEAP32[$1003>>2] = -1;
   } else {
    $1004 = $33;
    $1005 = ((($1004)) + 24|0);
    HEAP32[$1005>>2] = -1;
   }
  } while(0);
  $1006 = $33;
  $1007 = ((($1006)) + 32|0);
  HEAP32[$1007>>2] = 0;
  $1008 = $6;
  $1009 = ((($1008)) + 52|0);
  $1010 = HEAP32[$1009>>2]|0;
  $1011 = ((($1010)) + 40|0);
  $1012 = HEAP32[$1011>>2]|0;
  $1013 = ($1012|0)!=(0);
  do {
   if ($1013) {
    HEAP32[$36>>2] = 1;
    $1014 = $7;
    $1015 = ((($1014)) + 64|0);
    $1016 = HEAP32[$1015>>2]|0;
    $1017 = ((($1016)) + 40|0);
    $1018 = HEAP32[$1017>>2]|0;
    $1019 = $33;
    $1020 = ((($1019)) + 28|0);
    HEAP32[$1020>>2] = $1018;
    $1021 = $21;
    $1022 = $1021 & 32768;
    $1023 = ($1022|0)!=(0);
    if (!($1023)) {
     break;
    }
    $1024 = $6;
    $1025 = ((($1024)) + 52|0);
    $1026 = HEAP32[$1025>>2]|0;
    $1027 = ((($1026)) + 348|0);
    $1028 = ((($1027)) + 44|0);
    $1029 = HEAP32[$1028>>2]|0;
    $1030 = ($1029|0)!=(0|0);
    if (!($1030)) {
     label = 147;
     break L118;
    }
    $1031 = $6;
    $1032 = ((($1031)) + 52|0);
    $1033 = HEAP32[$1032>>2]|0;
    $1034 = ((($1033)) + 348|0);
    $1035 = ((($1034)) + 44|0);
    $1036 = HEAP32[$1035>>2]|0;
    $1037 = ((($1036)) + 12|0);
    $1038 = HEAP32[$1037>>2]|0;
    $1039 = $7;
    $1040 = $6;
    $1041 = ((($1040)) + 52|0);
    $1042 = HEAP32[$1041>>2]|0;
    $1043 = ((($1042)) + 348|0);
    $1044 = ((($1043)) + 44|0);
    $1045 = HEAP32[$1044>>2]|0;
    $1046 = $9;
    $1047 = $7;
    $1048 = ((($1047)) + 64|0);
    $1049 = HEAP32[$1048>>2]|0;
    $1050 = (FUNCTION_TABLE_iiiiii[$1038 & 63]($1039,$1045,$1046,$1049,$36)|0);
    $1051 = $14;
    $1052 = $1051 | $1050;
    $14 = $1052;
    $1053 = $14;
    $1054 = ($1053|0)!=(0);
    if ($1054) {
     label = 149;
     break L118;
    }
    $1056 = HEAP32[$36>>2]|0;
    $1057 = $33;
    $1058 = ((($1057)) + 32|0);
    HEAP32[$1058>>2] = $1056;
   }
  } while(0);
  $1059 = $33;
  $1060 = ((($1059)) + 44|0);
  HEAP32[$1060>>2] = 0;
  $1061 = $33;
  $1062 = ((($1061)) + 36|0);
  HEAP32[$1062>>2] = -1;
  $1063 = $33;
  $1064 = ((($1063)) + 40|0);
  HEAP32[$1064>>2] = -1;
  $1065 = $21;
  $1066 = $1065 & 1048576;
  $1067 = ($1066|0)!=(0);
  do {
   if ($1067) {
    $1068 = HEAP8[$12>>0]|0;
    $1069 = $1068&255;
    $1070 = $1069 & 2;
    $1071 = ($1070|0)!=(0);
    if (!($1071)) {
     label = 188;
     break;
    }
    $1072 = $21;
    $1073 = $1072 & 524288;
    $1074 = ($1073|0)!=(0);
    do {
     if ($1074) {
      $1075 = $5;
      $1076 = ((($1075)) + 8|0);
      $1077 = HEAP32[$1076>>2]|0;
      $1078 = $1077 >> 8;
      $1079 = ($1078|0)==(1);
      $1080 = $6;
      $1081 = ((($1080)) + 52|0);
      $1082 = HEAP32[$1081>>2]|0;
      $1083 = ((($1082)) + 348|0);
      $1084 = ((($1083)) + 84|0);
      $1085 = HEAP32[$1084>>2]|0;
      $1086 = ($1085|0)!=(0|0);
      if (!($1079)) {
       if (!($1086)) {
        label = 161;
        break L118;
       }
       $1113 = $6;
       $1114 = ((($1113)) + 52|0);
       $1115 = HEAP32[$1114>>2]|0;
       $1116 = ((($1115)) + 348|0);
       $1117 = ((($1116)) + 84|0);
       $1118 = HEAP32[$1117>>2]|0;
       $1119 = ((($1118)) + 12|0);
       $1120 = HEAP32[$1119>>2]|0;
       $1121 = $7;
       $1122 = $6;
       $1123 = ((($1122)) + 52|0);
       $1124 = HEAP32[$1123>>2]|0;
       $1125 = ((($1124)) + 348|0);
       $1126 = ((($1125)) + 84|0);
       $1127 = HEAP32[$1126>>2]|0;
       $1128 = $9;
       $1129 = $33;
       $1130 = ((($1129)) + 104|0);
       $1131 = (FUNCTION_TABLE_iiiiii[$1120 & 63]($1121,$1127,$1128,$1130,$13)|0);
       $1132 = $14;
       $1133 = $1132 | $1131;
       $14 = $1133;
       $1134 = $14;
       $1135 = ($1134|0)!=(0);
       if ($1135) {
        label = 163;
        break L118;
       } else {
        break;
       }
      }
      if (!($1086)) {
       label = 156;
       break L118;
      }
      $1087 = $6;
      $1088 = ((($1087)) + 52|0);
      $1089 = HEAP32[$1088>>2]|0;
      $1090 = ((($1089)) + 348|0);
      $1091 = ((($1090)) + 84|0);
      $1092 = HEAP32[$1091>>2]|0;
      $1093 = ((($1092)) + 12|0);
      $1094 = HEAP32[$1093>>2]|0;
      $1095 = $7;
      $1096 = $6;
      $1097 = ((($1096)) + 52|0);
      $1098 = HEAP32[$1097>>2]|0;
      $1099 = ((($1098)) + 348|0);
      $1100 = ((($1099)) + 84|0);
      $1101 = HEAP32[$1100>>2]|0;
      $1102 = $9;
      $1103 = (FUNCTION_TABLE_iiiiii[$1094 & 63]($1095,$1101,$1102,$37,$13)|0);
      $1104 = $14;
      $1105 = $1104 | $1103;
      $14 = $1105;
      $1106 = $14;
      $1107 = ($1106|0)!=(0);
      if ($1107) {
       label = 158;
       break L118;
      }
      $1109 = HEAP8[$37>>0]|0;
      $1110 = $1109&255;
      $1111 = $33;
      $1112 = ((($1111)) + 104|0);
      HEAP32[$1112>>2] = $1110;
     } else {
      $1137 = $33;
      $1138 = ((($1137)) + 104|0);
      HEAP32[$1138>>2] = 0;
     }
    } while(0);
    $1139 = $6;
    $1140 = ((($1139)) + 52|0);
    $1141 = HEAP32[$1140>>2]|0;
    $1142 = ((($1141)) + 40|0);
    $1143 = HEAP32[$1142>>2]|0;
    $1144 = ($1143|0)!=(0);
    do {
     if (!($1144)) {
      HEAP32[$38>>2] = 1;
      $1145 = $7;
      $1146 = ((($1145)) + 64|0);
      $1147 = HEAP32[$1146>>2]|0;
      $1148 = ((($1147)) + 40|0);
      $1149 = HEAP32[$1148>>2]|0;
      $1150 = $33;
      $1151 = ((($1150)) + 28|0);
      HEAP32[$1151>>2] = $1149;
      $1152 = $21;
      $1153 = $1152 & 32768;
      $1154 = ($1153|0)!=(0);
      if (!($1154)) {
       break;
      }
      $1155 = $6;
      $1156 = ((($1155)) + 52|0);
      $1157 = HEAP32[$1156>>2]|0;
      $1158 = ((($1157)) + 348|0);
      $1159 = ((($1158)) + 44|0);
      $1160 = HEAP32[$1159>>2]|0;
      $1161 = ($1160|0)!=(0|0);
      if (!($1161)) {
       label = 168;
       break L118;
      }
      $1162 = $6;
      $1163 = ((($1162)) + 52|0);
      $1164 = HEAP32[$1163>>2]|0;
      $1165 = ((($1164)) + 348|0);
      $1166 = ((($1165)) + 44|0);
      $1167 = HEAP32[$1166>>2]|0;
      $1168 = ((($1167)) + 12|0);
      $1169 = HEAP32[$1168>>2]|0;
      $1170 = $7;
      $1171 = $6;
      $1172 = ((($1171)) + 52|0);
      $1173 = HEAP32[$1172>>2]|0;
      $1174 = ((($1173)) + 348|0);
      $1175 = ((($1174)) + 44|0);
      $1176 = HEAP32[$1175>>2]|0;
      $1177 = $9;
      $1178 = $7;
      $1179 = ((($1178)) + 64|0);
      $1180 = HEAP32[$1179>>2]|0;
      $1181 = (FUNCTION_TABLE_iiiiii[$1169 & 63]($1170,$1176,$1177,$1180,$38)|0);
      $1182 = $14;
      $1183 = $1182 | $1181;
      $14 = $1183;
      $1184 = $14;
      $1185 = ($1184|0)!=(0);
      if ($1185) {
       label = 170;
       break L118;
      }
      $1187 = HEAP32[$38>>2]|0;
      $1188 = $33;
      $1189 = ((($1188)) + 32|0);
      HEAP32[$1189>>2] = $1187;
     }
    } while(0);
    $1190 = $21;
    $1191 = $1190 & 65536;
    $1192 = ($1191|0)!=(0);
    if ($1192) {
     $1193 = $6;
     $1194 = ((($1193)) + 52|0);
     $1195 = HEAP32[$1194>>2]|0;
     $1196 = ((($1195)) + 348|0);
     $1197 = ((($1196)) + 80|0);
     $1198 = HEAP32[$1197>>2]|0;
     $1199 = ($1198|0)!=(0|0);
     if (!($1199)) {
      label = 174;
      break L118;
     }
     $1200 = $6;
     $1201 = ((($1200)) + 52|0);
     $1202 = HEAP32[$1201>>2]|0;
     $1203 = ((($1202)) + 348|0);
     $1204 = ((($1203)) + 80|0);
     $1205 = HEAP32[$1204>>2]|0;
     $1206 = ((($1205)) + 12|0);
     $1207 = HEAP32[$1206>>2]|0;
     $1208 = $7;
     $1209 = $6;
     $1210 = ((($1209)) + 52|0);
     $1211 = HEAP32[$1210>>2]|0;
     $1212 = ((($1211)) + 348|0);
     $1213 = ((($1212)) + 80|0);
     $1214 = HEAP32[$1213>>2]|0;
     $1215 = $9;
     $1216 = $33;
     $1217 = ((($1216)) + 40|0);
     $1218 = (FUNCTION_TABLE_iiiiii[$1207 & 63]($1208,$1214,$1215,$1217,$13)|0);
     $1219 = $14;
     $1220 = $1219 | $1218;
     $14 = $1220;
     $1221 = $14;
     $1222 = ($1221|0)!=(0);
     if ($1222) {
      label = 176;
      break L118;
     }
    }
    $1224 = $21;
    $1225 = $1224 & 131072;
    $1226 = ($1225|0)!=(0);
    if ($1226) {
     $1227 = $6;
     $1228 = ((($1227)) + 52|0);
     $1229 = HEAP32[$1228>>2]|0;
     $1230 = ((($1229)) + 348|0);
     $1231 = ((($1230)) + 92|0);
     $1232 = HEAP32[$1231>>2]|0;
     $1233 = ($1232|0)!=(0|0);
     if (!($1233)) {
      label = 179;
      break L118;
     }
     $1234 = $6;
     $1235 = ((($1234)) + 52|0);
     $1236 = HEAP32[$1235>>2]|0;
     $1237 = ((($1236)) + 348|0);
     $1238 = ((($1237)) + 92|0);
     $1239 = HEAP32[$1238>>2]|0;
     $1240 = ((($1239)) + 12|0);
     $1241 = HEAP32[$1240>>2]|0;
     $1242 = $7;
     $1243 = $6;
     $1244 = ((($1243)) + 52|0);
     $1245 = HEAP32[$1244>>2]|0;
     $1246 = ((($1245)) + 348|0);
     $1247 = ((($1246)) + 92|0);
     $1248 = HEAP32[$1247>>2]|0;
     $1249 = $9;
     $1250 = $33;
     $1251 = ((($1250)) + 44|0);
     $1252 = (FUNCTION_TABLE_iiiiii[$1241 & 63]($1242,$1248,$1249,$1251,$13)|0);
     $1253 = $14;
     $1254 = $1253 | $1252;
     $14 = $1254;
     $1255 = $14;
     $1256 = ($1255|0)!=(0);
     if ($1256) {
      label = 181;
      break L118;
     }
    }
    $1258 = $21;
    $1259 = $1258 & 262144;
    $1260 = ($1259|0)!=(0);
    if (!($1260)) {
     $1292 = $33;
     $1293 = ((($1292)) + 48|0);
     HEAP32[$1293>>2] = -2147483648;
     break;
    }
    $1261 = $6;
    $1262 = ((($1261)) + 52|0);
    $1263 = HEAP32[$1262>>2]|0;
    $1264 = ((($1263)) + 348|0);
    $1265 = ((($1264)) + 88|0);
    $1266 = HEAP32[$1265>>2]|0;
    $1267 = ($1266|0)!=(0|0);
    if (!($1267)) {
     label = 184;
     break L118;
    }
    $1268 = $6;
    $1269 = ((($1268)) + 52|0);
    $1270 = HEAP32[$1269>>2]|0;
    $1271 = ((($1270)) + 348|0);
    $1272 = ((($1271)) + 88|0);
    $1273 = HEAP32[$1272>>2]|0;
    $1274 = ((($1273)) + 12|0);
    $1275 = HEAP32[$1274>>2]|0;
    $1276 = $7;
    $1277 = $6;
    $1278 = ((($1277)) + 52|0);
    $1279 = HEAP32[$1278>>2]|0;
    $1280 = ((($1279)) + 348|0);
    $1281 = ((($1280)) + 88|0);
    $1282 = HEAP32[$1281>>2]|0;
    $1283 = $9;
    $1284 = $33;
    $1285 = ((($1284)) + 48|0);
    $1286 = (FUNCTION_TABLE_iiiiii[$1275 & 63]($1276,$1282,$1283,$1285,$13)|0);
    $1287 = $14;
    $1288 = $1287 | $1286;
    $14 = $1288;
    $1289 = $14;
    $1290 = ($1289|0)!=(0);
    if ($1290) {
     label = 186;
     break L118;
    }
   } else {
    label = 188;
   }
  } while(0);
  L217: do {
   if ((label|0) == 188) {
    label = 0;
    $1294 = $21;
    $1295 = $1294 & 1048576;
    $1296 = ($1295|0)!=(0);
    do {
     if ($1296) {
      $1297 = HEAP8[$12>>0]|0;
      $1298 = $1297&255;
      $1299 = $1298 & 4;
      $1300 = ($1299|0)!=(0);
      if (!($1300)) {
       break;
      }
      $1301 = $21;
      $1302 = $1301 & 32;
      $1303 = ($1302|0)!=(0);
      if (!($1303)) {
       $1347 = $33;
       $1348 = ((($1347)) + 104|0);
       HEAP32[$1348>>2] = 0;
       $1349 = $33;
       $1350 = ((($1349)) + 48|0);
       HEAP32[$1350>>2] = -2147483648;
       break L217;
      }
      $1304 = $6;
      $1305 = ((($1304)) + 52|0);
      $1306 = HEAP32[$1305>>2]|0;
      $1307 = ((($1306)) + 348|0);
      $1308 = ((($1307)) + 96|0);
      $1309 = HEAP32[$1308>>2]|0;
      $1310 = ($1309|0)!=(0|0);
      if (!($1310)) {
       label = 192;
       break L118;
      }
      $1311 = $6;
      $1312 = ((($1311)) + 52|0);
      $1313 = HEAP32[$1312>>2]|0;
      $1314 = ((($1313)) + 348|0);
      $1315 = ((($1314)) + 96|0);
      $1316 = HEAP32[$1315>>2]|0;
      $1317 = ((($1316)) + 12|0);
      $1318 = HEAP32[$1317>>2]|0;
      $1319 = $7;
      $1320 = $6;
      $1321 = ((($1320)) + 52|0);
      $1322 = HEAP32[$1321>>2]|0;
      $1323 = ((($1322)) + 348|0);
      $1324 = ((($1323)) + 96|0);
      $1325 = HEAP32[$1324>>2]|0;
      $1326 = $9;
      $1327 = $33;
      $1328 = ((($1327)) + 36|0);
      $1329 = (FUNCTION_TABLE_iiiiii[$1318 & 63]($1319,$1325,$1326,$1328,$13)|0);
      $1330 = $14;
      $1331 = $1330 | $1329;
      $14 = $1331;
      $1332 = $14;
      $1333 = ($1332|0)!=(0);
      if ($1333) {
       label = 194;
       break L118;
      }
      $1335 = $15;
      $1336 = (($1335) + 1)|0;
      $1337 = $33;
      $1338 = ((($1337)) + 36|0);
      $1339 = HEAP32[$1338>>2]|0;
      $1340 = (($1339) + ($1336))|0;
      HEAP32[$1338>>2] = $1340;
      $1341 = $33;
      $1342 = ((($1341)) + 40|0);
      HEAP32[$1342>>2] = -1;
      $1343 = $33;
      $1344 = ((($1343)) + 48|0);
      HEAP32[$1344>>2] = -2147483648;
      $1345 = $33;
      $1346 = ((($1345)) + 44|0);
      HEAP32[$1346>>2] = 0;
      break L217;
     }
    } while(0);
    $1351 = $33;
    $1352 = ((($1351)) + 104|0);
    HEAP32[$1352>>2] = 0;
    $1353 = $33;
    $1354 = ((($1353)) + 48|0);
    HEAP32[$1354>>2] = -2147483648;
   }
  } while(0);
  HEAP32[$35>>2] = 0;
  HEAP32[$34>>2] = 0;
  $1355 = $5;
  $1356 = ((($1355)) + 8|0);
  $1357 = HEAP32[$1356>>2]|0;
  $1358 = $1357 >> 8;
  $1359 = ($1358|0)==(1);
  $1360 = $6;
  $1361 = $7;
  $1362 = $9;
  $1363 = $33;
  if ($1359) {
   $1364 = (_cram_decode_aux_1_0($1360,$1361,$1362,$1363)|0);
   $1365 = $14;
   $1366 = $1365 | $1364;
   $14 = $1366;
  } else {
   $1367 = (_cram_decode_aux($1360,$1361,$1362,$1363,$34,$35)|0);
   $1368 = $14;
   $1369 = $1368 | $1367;
   $14 = $1369;
  }
  $1370 = $14;
  $1371 = ($1370|0)!=(0);
  if ($1371) {
   label = 202;
   break;
  }
  $1373 = $21;
  $1374 = $1373 & 8;
  $1375 = ($1374|0)!=(0);
  do {
   if ($1375) {
    $1376 = $7;
    $1377 = ((($1376)) + 68|0);
    $1378 = HEAP32[$1377>>2]|0;
    $1379 = ((($1378)) + 40|0);
    $1380 = HEAP32[$1379>>2]|0;
    $1381 = $33;
    $1382 = ((($1381)) + 72|0);
    HEAP32[$1382>>2] = $1380;
    while(1) {
     $1383 = $7;
     $1384 = ((($1383)) + 68|0);
     $1385 = HEAP32[$1384>>2]|0;
     $1386 = ((($1385)) + 36|0);
     $1387 = HEAP32[$1386>>2]|0;
     $1388 = $7;
     $1389 = ((($1388)) + 68|0);
     $1390 = HEAP32[$1389>>2]|0;
     $1391 = ((($1390)) + 40|0);
     $1392 = HEAP32[$1391>>2]|0;
     $1393 = $33;
     $1394 = ((($1393)) + 16|0);
     $1395 = HEAP32[$1394>>2]|0;
     $1396 = (($1392) + ($1395))|0;
     $1397 = ($1387>>>0)<=($1396>>>0);
     $1398 = $7;
     $1399 = ((($1398)) + 68|0);
     $1400 = HEAP32[$1399>>2]|0;
     if (!($1397)) {
      break;
     }
     $1401 = ((($1400)) + 36|0);
     $1402 = HEAP32[$1401>>2]|0;
     $1403 = ($1402|0)!=(0);
     if ($1403) {
      $1404 = $7;
      $1405 = ((($1404)) + 68|0);
      $1406 = HEAP32[$1405>>2]|0;
      $1407 = ((($1406)) + 36|0);
      $1408 = HEAP32[$1407>>2]|0;
      $1409 = (+($1408>>>0));
      $1410 = $1409 * 1.5;
      $1412 = $1410;
     } else {
      $1412 = 1024.0;
     }
     $1411 = (~~(($1412))>>>0);
     $1413 = $7;
     $1414 = ((($1413)) + 68|0);
     $1415 = HEAP32[$1414>>2]|0;
     $1416 = ((($1415)) + 36|0);
     HEAP32[$1416>>2] = $1411;
     $1417 = $7;
     $1418 = ((($1417)) + 68|0);
     $1419 = HEAP32[$1418>>2]|0;
     $1420 = ((($1419)) + 32|0);
     $1421 = HEAP32[$1420>>2]|0;
     $1422 = $7;
     $1423 = ((($1422)) + 68|0);
     $1424 = HEAP32[$1423>>2]|0;
     $1425 = ((($1424)) + 36|0);
     $1426 = HEAP32[$1425>>2]|0;
     $1427 = (_realloc($1421,$1426)|0);
     $1428 = $7;
     $1429 = ((($1428)) + 68|0);
     $1430 = HEAP32[$1429>>2]|0;
     $1431 = ((($1430)) + 32|0);
     HEAP32[$1431>>2] = $1427;
    }
    $1432 = ((($1400)) + 40|0);
    $1433 = HEAP32[$1432>>2]|0;
    $1434 = $7;
    $1435 = ((($1434)) + 68|0);
    $1436 = HEAP32[$1435>>2]|0;
    $1437 = ((($1436)) + 32|0);
    $1438 = HEAP32[$1437>>2]|0;
    $1439 = (($1438) + ($1433)|0);
    $16 = $1439;
    $1440 = $33;
    $1441 = ((($1440)) + 16|0);
    $1442 = HEAP32[$1441>>2]|0;
    $1443 = $7;
    $1444 = ((($1443)) + 68|0);
    $1445 = HEAP32[$1444>>2]|0;
    $1446 = ((($1445)) + 40|0);
    $1447 = HEAP32[$1446>>2]|0;
    $1448 = (($1447) + ($1442))|0;
    HEAP32[$1446>>2] = $1448;
    $1449 = $16;
    $1450 = ($1449|0)!=(0|0);
    if (!($1450)) {
     label = 210;
     break L118;
    }
    $1451 = $7;
    $1452 = ((($1451)) + 72|0);
    $1453 = HEAP32[$1452>>2]|0;
    $1454 = ((($1453)) + 40|0);
    $1455 = HEAP32[$1454>>2]|0;
    $1456 = $33;
    $1457 = ((($1456)) + 76|0);
    HEAP32[$1457>>2] = $1455;
    while(1) {
     $1458 = $7;
     $1459 = ((($1458)) + 72|0);
     $1460 = HEAP32[$1459>>2]|0;
     $1461 = ((($1460)) + 36|0);
     $1462 = HEAP32[$1461>>2]|0;
     $1463 = $7;
     $1464 = ((($1463)) + 72|0);
     $1465 = HEAP32[$1464>>2]|0;
     $1466 = ((($1465)) + 40|0);
     $1467 = HEAP32[$1466>>2]|0;
     $1468 = $33;
     $1469 = ((($1468)) + 16|0);
     $1470 = HEAP32[$1469>>2]|0;
     $1471 = (($1467) + ($1470))|0;
     $1472 = ($1462>>>0)<=($1471>>>0);
     $1473 = $7;
     $1474 = ((($1473)) + 72|0);
     $1475 = HEAP32[$1474>>2]|0;
     if (!($1472)) {
      break;
     }
     $1476 = ((($1475)) + 36|0);
     $1477 = HEAP32[$1476>>2]|0;
     $1478 = ($1477|0)!=(0);
     if ($1478) {
      $1479 = $7;
      $1480 = ((($1479)) + 72|0);
      $1481 = HEAP32[$1480>>2]|0;
      $1482 = ((($1481)) + 36|0);
      $1483 = HEAP32[$1482>>2]|0;
      $1484 = (+($1483>>>0));
      $1485 = $1484 * 1.5;
      $1487 = $1485;
     } else {
      $1487 = 1024.0;
     }
     $1486 = (~~(($1487))>>>0);
     $1488 = $7;
     $1489 = ((($1488)) + 72|0);
     $1490 = HEAP32[$1489>>2]|0;
     $1491 = ((($1490)) + 36|0);
     HEAP32[$1491>>2] = $1486;
     $1492 = $7;
     $1493 = ((($1492)) + 72|0);
     $1494 = HEAP32[$1493>>2]|0;
     $1495 = ((($1494)) + 32|0);
     $1496 = HEAP32[$1495>>2]|0;
     $1497 = $7;
     $1498 = ((($1497)) + 72|0);
     $1499 = HEAP32[$1498>>2]|0;
     $1500 = ((($1499)) + 36|0);
     $1501 = HEAP32[$1500>>2]|0;
     $1502 = (_realloc($1496,$1501)|0);
     $1503 = $7;
     $1504 = ((($1503)) + 72|0);
     $1505 = HEAP32[$1504>>2]|0;
     $1506 = ((($1505)) + 32|0);
     HEAP32[$1506>>2] = $1502;
    }
    $1507 = ((($1475)) + 40|0);
    $1508 = HEAP32[$1507>>2]|0;
    $1509 = $7;
    $1510 = ((($1509)) + 72|0);
    $1511 = HEAP32[$1510>>2]|0;
    $1512 = ((($1511)) + 32|0);
    $1513 = HEAP32[$1512>>2]|0;
    $1514 = (($1513) + ($1508)|0);
    $17 = $1514;
    $1515 = $33;
    $1516 = ((($1515)) + 16|0);
    $1517 = HEAP32[$1516>>2]|0;
    $1518 = $7;
    $1519 = ((($1518)) + 72|0);
    $1520 = HEAP32[$1519>>2]|0;
    $1521 = ((($1520)) + 40|0);
    $1522 = HEAP32[$1521>>2]|0;
    $1523 = (($1522) + ($1517))|0;
    HEAP32[$1521>>2] = $1523;
    $1524 = $7;
    $1525 = ((($1524)) + 132|0);
    $1526 = HEAP32[$1525>>2]|0;
    $1527 = ($1526|0)!=(0|0);
    if ($1527) {
     break;
    }
    $1528 = $16;
    $1529 = $33;
    $1530 = ((($1529)) + 16|0);
    $1531 = HEAP32[$1530>>2]|0;
    _memset(($1528|0),61,($1531|0))|0;
   }
  } while(0);
  $1532 = HEAP32[$10>>2]|0;
  $1533 = $1532 & 4;
  $1534 = ($1533|0)!=(0);
  L253: do {
   if ($1534) {
    $1578 = $33;
    $1579 = ((($1578)) + 16|0);
    $1580 = HEAP32[$1579>>2]|0;
    HEAP32[$39>>2] = $1580;
    $1581 = $33;
    $1582 = ((($1581)) + 80|0);
    HEAP32[$1582>>2] = 0;
    $1583 = $33;
    $1584 = ((($1583)) + 84|0);
    HEAP32[$1584>>2] = 0;
    $1585 = $33;
    $1586 = ((($1585)) + 20|0);
    $1587 = HEAP32[$1586>>2]|0;
    $1588 = $33;
    $1589 = ((($1588)) + 88|0);
    HEAP32[$1589>>2] = $1587;
    $1590 = $33;
    $1591 = ((($1590)) + 92|0);
    HEAP32[$1591>>2] = 0;
    $1592 = $21;
    $1593 = $1592 & 64;
    $1594 = ($1593|0)!=(0);
    do {
     if ($1594) {
      $1595 = $33;
      $1596 = ((($1595)) + 16|0);
      $1597 = HEAP32[$1596>>2]|0;
      $1598 = ($1597|0)!=(0);
      if (!($1598)) {
       break;
      }
      $1599 = $6;
      $1600 = ((($1599)) + 52|0);
      $1601 = HEAP32[$1600>>2]|0;
      $1602 = ((($1601)) + 348|0);
      $1603 = ((($1602)) + 120|0);
      $1604 = HEAP32[$1603>>2]|0;
      $1605 = ($1604|0)!=(0|0);
      if (!($1605)) {
       label = 229;
       break L118;
      }
      $1606 = $6;
      $1607 = ((($1606)) + 52|0);
      $1608 = HEAP32[$1607>>2]|0;
      $1609 = ((($1608)) + 348|0);
      $1610 = ((($1609)) + 120|0);
      $1611 = HEAP32[$1610>>2]|0;
      $1612 = ((($1611)) + 12|0);
      $1613 = HEAP32[$1612>>2]|0;
      $1614 = $7;
      $1615 = $6;
      $1616 = ((($1615)) + 52|0);
      $1617 = HEAP32[$1616>>2]|0;
      $1618 = ((($1617)) + 348|0);
      $1619 = ((($1618)) + 120|0);
      $1620 = HEAP32[$1619>>2]|0;
      $1621 = $9;
      $1622 = $16;
      $1623 = (FUNCTION_TABLE_iiiiii[$1613 & 63]($1614,$1620,$1621,$1622,$39)|0);
      $1624 = $14;
      $1625 = $1624 | $1623;
      $14 = $1625;
      $1626 = $14;
      $1627 = ($1626|0)!=(0);
      if ($1627) {
       label = 231;
       break L118;
      }
     }
    } while(0);
    $1629 = $21;
    $1630 = $1629 & 1048576;
    $1631 = ($1630|0)!=(0);
    do {
     if ($1631) {
      $1632 = HEAP8[$12>>0]|0;
      $1633 = $1632&255;
      $1634 = $1633 & 1;
      $1635 = ($1634|0)!=(0);
      if (!($1635)) {
       break;
      }
      $1636 = $33;
      $1637 = ((($1636)) + 16|0);
      $1638 = HEAP32[$1637>>2]|0;
      HEAP32[$39>>2] = $1638;
      $1639 = $21;
      $1640 = $1639 & 128;
      $1641 = ($1640|0)!=(0);
      if (!($1641)) {
       break L253;
      }
      $1642 = $33;
      $1643 = ((($1642)) + 16|0);
      $1644 = HEAP32[$1643>>2]|0;
      $1645 = ($1644|0)>=(0);
      if (!($1645)) {
       break L253;
      }
      $1646 = $6;
      $1647 = ((($1646)) + 52|0);
      $1648 = HEAP32[$1647>>2]|0;
      $1649 = ((($1648)) + 348|0);
      $1650 = ((($1649)) + 48|0);
      $1651 = HEAP32[$1650>>2]|0;
      $1652 = ($1651|0)!=(0|0);
      if (!($1652)) {
       label = 237;
       break L118;
      }
      $1653 = $6;
      $1654 = ((($1653)) + 52|0);
      $1655 = HEAP32[$1654>>2]|0;
      $1656 = ((($1655)) + 348|0);
      $1657 = ((($1656)) + 48|0);
      $1658 = HEAP32[$1657>>2]|0;
      $1659 = ((($1658)) + 12|0);
      $1660 = HEAP32[$1659>>2]|0;
      $1661 = $7;
      $1662 = $6;
      $1663 = ((($1662)) + 52|0);
      $1664 = HEAP32[$1663>>2]|0;
      $1665 = ((($1664)) + 348|0);
      $1666 = ((($1665)) + 48|0);
      $1667 = HEAP32[$1666>>2]|0;
      $1668 = $9;
      $1669 = $17;
      $1670 = (FUNCTION_TABLE_iiiiii[$1660 & 63]($1661,$1667,$1668,$1669,$39)|0);
      $1671 = $14;
      $1672 = $1671 | $1670;
      $14 = $1672;
      $1673 = $14;
      $1674 = ($1673|0)!=(0);
      if ($1674) {
       label = 239;
       break L118;
      } else {
       break L253;
      }
     }
    } while(0);
    $1676 = $21;
    $1677 = $1676 & 8;
    $1678 = ($1677|0)!=(0);
    if (!($1678)) {
     break;
    }
    $1679 = $17;
    $1680 = $33;
    $1681 = ((($1680)) + 16|0);
    $1682 = HEAP32[$1681>>2]|0;
    _memset(($1679|0),-1,($1682|0))|0;
   } else {
    $1535 = $21;
    $1536 = $1535 & 2;
    $1537 = ($1536|0)!=(0);
    if ($1537) {
     $1538 = $33;
     $1539 = ((($1538)) + 20|0);
     $1540 = HEAP32[$1539>>2]|0;
     $1541 = ($1540|0)<=(0);
     if ($1541) {
      label = 221;
      break L118;
     }
    }
    $1546 = $21;
    $1547 = $1546 & 130035551;
    $1548 = ($1547|0)!=(0);
    if ($1548) {
     $1549 = $5;
     $1550 = $6;
     $1551 = $7;
     $1552 = $9;
     $1553 = $33;
     $1554 = $8;
     $1555 = HEAP8[$12>>0]|0;
     $1556 = $1555&255;
     $1557 = $16;
     $1558 = $17;
     $1559 = HEAP32[$34>>2]|0;
     $1560 = HEAP32[$35>>2]|0;
     $1561 = (_cram_decode_seq($1549,$1550,$1551,$1552,$1553,$1554,$1556,$1557,$1558,$1559,$1560)|0);
     $1562 = $14;
     $1563 = $1562 | $1561;
     $14 = $1563;
     $1564 = $14;
     $1565 = ($1564|0)!=(0);
     if ($1565) {
      label = 224;
      break L118;
     } else {
      break;
     }
    } else {
     $1567 = $33;
     $1568 = ((($1567)) + 80|0);
     HEAP32[$1568>>2] = 0;
     $1569 = $33;
     $1570 = ((($1569)) + 84|0);
     HEAP32[$1570>>2] = 0;
     $1571 = $33;
     $1572 = ((($1571)) + 20|0);
     $1573 = HEAP32[$1572>>2]|0;
     $1574 = $33;
     $1575 = ((($1574)) + 88|0);
     HEAP32[$1575>>2] = $1573;
     $1576 = $33;
     $1577 = ((($1576)) + 92|0);
     HEAP32[$1577>>2] = 0;
     break;
    }
   }
  } while(0);
  $1683 = $15;
  $1684 = (($1683) + 1)|0;
  $15 = $1684;
 }
 switch (label|0) {
  case 82: {
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 84: {
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 90: {
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 92: {
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 95: {
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 97: {
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 103: {
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 105: {
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 119: {
   $864 = HEAP32[2410]|0;
   $865 = $33;
   $866 = ((($865)) + 4|0);
   $867 = HEAP32[$866>>2]|0;
   HEAP32[$vararg_buffer31>>2] = $867;
   (_fprintf($864,21112,$vararg_buffer31)|0);
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 122: {
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 124: {
   $901 = $14;
   $4 = $901;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 126: {
   $906 = HEAP32[2410]|0;
   (_fprintf($906,21147,$vararg_buffer34)|0);
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 129: {
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 131: {
   $940 = $14;
   $4 = $940;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 138: {
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 140: {
   $996 = $14;
   $4 = $996;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 147: {
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 149: {
   $1055 = $14;
   $4 = $1055;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 156: {
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 158: {
   $1108 = $14;
   $4 = $1108;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 161: {
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 163: {
   $1136 = $14;
   $4 = $1136;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 168: {
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 170: {
   $1186 = $14;
   $4 = $1186;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 174: {
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 176: {
   $1223 = $14;
   $4 = $1223;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 179: {
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 181: {
   $1257 = $14;
   $4 = $1257;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 184: {
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 186: {
   $1291 = $14;
   $4 = $1291;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 192: {
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 194: {
   $1334 = $14;
   $4 = $1334;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 202: {
   $1372 = $14;
   $4 = $1372;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 210: {
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 221: {
   $1542 = HEAP32[2410]|0;
   $1543 = $33;
   $1544 = ((($1543)) + 20|0);
   $1545 = HEAP32[$1544>>2]|0;
   HEAP32[$vararg_buffer36>>2] = $1545;
   (_fprintf($1542,21173,$vararg_buffer36)|0);
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 224: {
   $1566 = $14;
   $4 = $1566;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 229: {
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 231: {
   $1628 = $14;
   $4 = $1628;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 237: {
   $4 = -1;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 239: {
   $1675 = $14;
   $4 = $1675;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
  case 243: {
   $1685 = $5;
   $1686 = ((($1685)) + 34704|0);
   (_pthread_mutex_lock(($1686|0))|0);
   $1687 = $20;
   $1688 = ($1687|0)!=(0|0);
   if ($1688) {
    $40 = 0;
    while(1) {
     $1689 = $40;
     $1690 = $5;
     $1691 = ((($1690)) + 48|0);
     $1692 = HEAP32[$1691>>2]|0;
     $1693 = ((($1692)) + 12|0);
     $1694 = HEAP32[$1693>>2]|0;
     $1695 = ($1689|0)<($1694|0);
     if (!($1695)) {
      break;
     }
     $1696 = $40;
     $1697 = $20;
     $1698 = (($1697) + ($1696<<2)|0);
     $1699 = HEAP32[$1698>>2]|0;
     $1700 = ($1699|0)!=(0|0);
     if ($1700) {
      $1701 = $5;
      $1702 = ((($1701)) + 48|0);
      $1703 = HEAP32[$1702>>2]|0;
      $1704 = $40;
      _cram_ref_decr($1703,$1704);
     }
     $1705 = $40;
     $1706 = (($1705) + 1)|0;
     $40 = $1706;
    }
    $1707 = $20;
    _free($1707);
   } else {
    $1708 = $11;
    $1709 = ($1708|0)>=(0);
    if ($1709) {
     $1710 = $7;
     $1711 = ((($1710)) + 132|0);
     $1712 = HEAP32[$1711>>2]|0;
     $1713 = $5;
     $1714 = ((($1713)) + 56|0);
     $1715 = HEAP32[$1714>>2]|0;
     $1716 = ($1712|0)==($1715|0);
     $1717 = $19;
     $1718 = ($1717|0)!=(0);
     $or$cond9 = $1716 | $1718;
     if (!($or$cond9)) {
      $1719 = $5;
      $1720 = ((($1719)) + 48|0);
      $1721 = HEAP32[$1720>>2]|0;
      $1722 = $11;
      _cram_ref_decr($1721,$1722);
     }
    }
   }
   $1723 = $5;
   $1724 = ((($1723)) + 34704|0);
   (_pthread_mutex_unlock(($1724|0))|0);
   $1725 = $7;
   $1726 = $5;
   $1727 = ((($1726)) + 312|0);
   $1728 = HEAP32[$1727>>2]|0;
   $1729 = (_cram_decode_slice_xref($1725,$1728)|0);
   $1730 = $14;
   $1731 = $1730 | $1729;
   $14 = $1731;
   $41 = 0;
   while(1) {
    $1732 = $41;
    $1733 = $7;
    $1734 = HEAP32[$1733>>2]|0;
    $1735 = ((($1734)) + 32|0);
    $1736 = HEAP32[$1735>>2]|0;
    $1737 = ($1732|0)<($1736|0);
    if (!($1737)) {
     break;
    }
    $1738 = $41;
    $1739 = $7;
    $1740 = ((($1739)) + 8|0);
    $1741 = HEAP32[$1740>>2]|0;
    $1742 = (($1741) + ($1738<<2)|0);
    $1743 = HEAP32[$1742>>2]|0;
    $42 = $1743;
    $1744 = $42;
    _cram_free_block($1744);
    $1745 = $41;
    $1746 = $7;
    $1747 = ((($1746)) + 8|0);
    $1748 = HEAP32[$1747>>2]|0;
    $1749 = (($1748) + ($1745<<2)|0);
    HEAP32[$1749>>2] = 0;
    $1750 = $41;
    $1751 = (($1750) + 1)|0;
    $41 = $1751;
   }
   $1752 = $7;
   $1753 = ((($1752)) + 68|0);
   $1754 = HEAP32[$1753>>2]|0;
   $1755 = ((($1754)) + 40|0);
   $1756 = HEAP32[$1755>>2]|0;
   $1757 = (($1756) + 1)|0;
   $1758 = $7;
   $1759 = ((($1758)) + 68|0);
   $1760 = HEAP32[$1759>>2]|0;
   $1761 = ((($1760)) + 36|0);
   HEAP32[$1761>>2] = $1757;
   $1762 = $7;
   $1763 = ((($1762)) + 68|0);
   $1764 = HEAP32[$1763>>2]|0;
   $1765 = ((($1764)) + 32|0);
   $1766 = HEAP32[$1765>>2]|0;
   $1767 = $7;
   $1768 = ((($1767)) + 68|0);
   $1769 = HEAP32[$1768>>2]|0;
   $1770 = ((($1769)) + 36|0);
   $1771 = HEAP32[$1770>>2]|0;
   $1772 = (_realloc($1766,$1771)|0);
   $1773 = $7;
   $1774 = ((($1773)) + 68|0);
   $1775 = HEAP32[$1774>>2]|0;
   $1776 = ((($1775)) + 32|0);
   HEAP32[$1776>>2] = $1772;
   $1777 = $7;
   $1778 = ((($1777)) + 72|0);
   $1779 = HEAP32[$1778>>2]|0;
   $1780 = ((($1779)) + 40|0);
   $1781 = HEAP32[$1780>>2]|0;
   $1782 = (($1781) + 1)|0;
   $1783 = $7;
   $1784 = ((($1783)) + 72|0);
   $1785 = HEAP32[$1784>>2]|0;
   $1786 = ((($1785)) + 36|0);
   HEAP32[$1786>>2] = $1782;
   $1787 = $7;
   $1788 = ((($1787)) + 72|0);
   $1789 = HEAP32[$1788>>2]|0;
   $1790 = ((($1789)) + 32|0);
   $1791 = HEAP32[$1790>>2]|0;
   $1792 = $7;
   $1793 = ((($1792)) + 72|0);
   $1794 = HEAP32[$1793>>2]|0;
   $1795 = ((($1794)) + 36|0);
   $1796 = HEAP32[$1795>>2]|0;
   $1797 = (_realloc($1791,$1796)|0);
   $1798 = $7;
   $1799 = ((($1798)) + 72|0);
   $1800 = HEAP32[$1799>>2]|0;
   $1801 = ((($1800)) + 32|0);
   HEAP32[$1801>>2] = $1797;
   $1802 = $7;
   $1803 = ((($1802)) + 64|0);
   $1804 = HEAP32[$1803>>2]|0;
   $1805 = ((($1804)) + 40|0);
   $1806 = HEAP32[$1805>>2]|0;
   $1807 = (($1806) + 1)|0;
   $1808 = $7;
   $1809 = ((($1808)) + 64|0);
   $1810 = HEAP32[$1809>>2]|0;
   $1811 = ((($1810)) + 36|0);
   HEAP32[$1811>>2] = $1807;
   $1812 = $7;
   $1813 = ((($1812)) + 64|0);
   $1814 = HEAP32[$1813>>2]|0;
   $1815 = ((($1814)) + 32|0);
   $1816 = HEAP32[$1815>>2]|0;
   $1817 = $7;
   $1818 = ((($1817)) + 64|0);
   $1819 = HEAP32[$1818>>2]|0;
   $1820 = ((($1819)) + 36|0);
   $1821 = HEAP32[$1820>>2]|0;
   $1822 = (_realloc($1816,$1821)|0);
   $1823 = $7;
   $1824 = ((($1823)) + 64|0);
   $1825 = HEAP32[$1824>>2]|0;
   $1826 = ((($1825)) + 32|0);
   HEAP32[$1826>>2] = $1822;
   $1827 = $7;
   $1828 = ((($1827)) + 84|0);
   $1829 = HEAP32[$1828>>2]|0;
   $1830 = ((($1829)) + 40|0);
   $1831 = HEAP32[$1830>>2]|0;
   $1832 = (($1831) + 1)|0;
   $1833 = $7;
   $1834 = ((($1833)) + 84|0);
   $1835 = HEAP32[$1834>>2]|0;
   $1836 = ((($1835)) + 36|0);
   HEAP32[$1836>>2] = $1832;
   $1837 = $7;
   $1838 = ((($1837)) + 84|0);
   $1839 = HEAP32[$1838>>2]|0;
   $1840 = ((($1839)) + 32|0);
   $1841 = HEAP32[$1840>>2]|0;
   $1842 = $7;
   $1843 = ((($1842)) + 84|0);
   $1844 = HEAP32[$1843>>2]|0;
   $1845 = ((($1844)) + 36|0);
   $1846 = HEAP32[$1845>>2]|0;
   $1847 = (_realloc($1841,$1846)|0);
   $1848 = $7;
   $1849 = ((($1848)) + 84|0);
   $1850 = HEAP32[$1849>>2]|0;
   $1851 = ((($1850)) + 32|0);
   HEAP32[$1851>>2] = $1847;
   $1852 = $14;
   $4 = $1852;
   $1853 = $4;
   STACKTOP = sp;return ($1853|0);
   break;
  }
 }
 return (0)|0;
}
function _md5_print($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $5 = $4;
  $6 = ($5|0)<(16);
  if (!($6)) {
   break;
  }
  $7 = $4;
  $8 = $2;
  $9 = (($8) + ($7)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $11 >> 4;
  $13 = (21396 + ($12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $4;
  $16 = $15<<1;
  $17 = (($16) + 0)|0;
  $18 = $3;
  $19 = (($18) + ($17)|0);
  HEAP8[$19>>0] = $14;
  $20 = $4;
  $21 = $2;
  $22 = (($21) + ($20)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $24 & 15;
  $26 = (21396 + ($25)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $4;
  $29 = $28<<1;
  $30 = (($29) + 1)|0;
  $31 = $3;
  $32 = (($31) + ($30)|0);
  HEAP8[$32>>0] = $27;
  $33 = $4;
  $34 = (($33) + 1)|0;
  $4 = $34;
 }
 $35 = $3;
 $36 = ((($35)) + 32|0);
 HEAP8[$36>>0] = 0;
 $37 = $3;
 STACKTOP = sp;return ($37|0);
}
function _cram_decode_aux_1_0($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = sp + 12|0;
 $12 = sp + 47|0;
 $13 = sp + 8|0;
 $14 = sp + 4|0;
 $15 = sp + 44|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = 0;
 HEAP32[$11>>2] = 1;
 $17 = $5;
 $18 = ((($17)) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 348|0);
 $21 = ((($20)) + 176|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  $4 = -1;
  $206 = $4;
  STACKTOP = sp;return ($206|0);
 }
 $24 = $5;
 $25 = ((($24)) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 348|0);
 $28 = ((($27)) + 176|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $6;
 $33 = $5;
 $34 = ((($33)) + 52|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 348|0);
 $37 = ((($36)) + 176|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $7;
 $40 = (FUNCTION_TABLE_iiiiii[$31 & 63]($32,$38,$39,$12,$11)|0);
 $41 = $10;
 $42 = $41 | $40;
 $10 = $42;
 $43 = HEAP8[$12>>0]|0;
 $44 = $43&255;
 $45 = $8;
 $46 = ((($45)) + 52|0);
 HEAP32[$46>>2] = $44;
 $47 = $8;
 $48 = ((($47)) + 60|0);
 HEAP32[$48>>2] = 0;
 $49 = $6;
 $50 = ((($49)) + 84|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($51)) + 40|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $8;
 $55 = ((($54)) + 56|0);
 HEAP32[$55>>2] = $53;
 $9 = 0;
 while(1) {
  $56 = $9;
  $57 = $8;
  $58 = ((($57)) + 52|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($56|0)<($59|0);
  if (!($60)) {
   label = 19;
   break;
  }
  HEAP32[$14>>2] = 1;
  $61 = $5;
  $62 = ((($61)) + 52|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($63)) + 348|0);
  $65 = ((($64)) + 156|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($66|0)!=(0|0);
  if (!($67)) {
   label = 6;
   break;
  }
  $68 = $5;
  $69 = ((($68)) + 52|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($70)) + 348|0);
  $72 = ((($71)) + 156|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($73)) + 12|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $6;
  $77 = $5;
  $78 = ((($77)) + 52|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($79)) + 348|0);
  $81 = ((($80)) + 156|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $7;
  $84 = (FUNCTION_TABLE_iiiiii[$75 & 63]($76,$82,$83,$13,$14)|0);
  $85 = $10;
  $86 = $85 | $84;
  $10 = $86;
  $87 = HEAP32[$14>>2]|0;
  $88 = ($87|0)==(3);
  if ($88) {
   $89 = HEAP8[$13>>0]|0;
   HEAP8[$15>>0] = $89;
   $90 = ((($13)) + 1|0);
   $91 = HEAP8[$90>>0]|0;
   $92 = ((($15)) + 1|0);
   HEAP8[$92>>0] = $91;
   $93 = ((($13)) + 2|0);
   $94 = HEAP8[$93>>0]|0;
   $95 = ((($15)) + 2|0);
   HEAP8[$95>>0] = $94;
  } else {
   $96 = HEAP32[$13>>2]|0;
   $97 = $96 >> 16;
   $98 = $97 & 255;
   $99 = $98&255;
   HEAP8[$15>>0] = $99;
   $100 = HEAP32[$13>>2]|0;
   $101 = $100 >> 8;
   $102 = $101 & 255;
   $103 = $102&255;
   $104 = ((($15)) + 1|0);
   HEAP8[$104>>0] = $103;
   $105 = HEAP32[$13>>2]|0;
   $106 = $105 & 255;
   $107 = $106&255;
   $108 = ((($15)) + 2|0);
   HEAP8[$108>>0] = $107;
  }
  $109 = $5;
  $110 = ((($109)) + 52|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ((($111)) + 220|0);
  $113 = HEAP32[$13>>2]|0;
  $114 = (_map_find($112,$15,$113)|0);
  $16 = $114;
  $115 = $16;
  $116 = ($115|0)!=(0|0);
  if (!($116)) {
   label = 11;
   break;
  }
  while(1) {
   $117 = $6;
   $118 = ((($117)) + 84|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ((($119)) + 36|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $6;
   $123 = ((($122)) + 84|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ((($124)) + 40|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = (($126) + 3)|0;
   $128 = ($121>>>0)<=($127>>>0);
   $129 = $6;
   $130 = ((($129)) + 84|0);
   $131 = HEAP32[$130>>2]|0;
   if (!($128)) {
    break;
   }
   $132 = ((($131)) + 36|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = ($133|0)!=(0);
   if ($134) {
    $135 = $6;
    $136 = ((($135)) + 84|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = ((($137)) + 36|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = (+($139>>>0));
    $141 = $140 * 1.5;
    $143 = $141;
   } else {
    $143 = 1024.0;
   }
   $142 = (~~(($143))>>>0);
   $144 = $6;
   $145 = ((($144)) + 84|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = ((($146)) + 36|0);
   HEAP32[$147>>2] = $142;
   $148 = $6;
   $149 = ((($148)) + 84|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = ((($150)) + 32|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = $6;
   $154 = ((($153)) + 84|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = ((($155)) + 36|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = (_realloc($152,$157)|0);
   $159 = $6;
   $160 = ((($159)) + 84|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = ((($161)) + 32|0);
   HEAP32[$162>>2] = $158;
  }
  $163 = ((($131)) + 40|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $6;
  $166 = ((($165)) + 84|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = ((($167)) + 32|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = (($169) + ($164)|0);
  ;HEAP8[$170>>0]=HEAP8[$15>>0]|0;HEAP8[$170+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$170+2>>0]=HEAP8[$15+2>>0]|0;
  $171 = $6;
  $172 = ((($171)) + 84|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = ((($173)) + 40|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = (($175) + 3)|0;
  HEAP32[$174>>2] = $176;
  $177 = $16;
  $178 = ((($177)) + 16|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = ($179|0)!=(0|0);
  if (!($180)) {
   label = 17;
   break;
  }
  $181 = $16;
  $182 = ((($181)) + 16|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = ((($183)) + 12|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = $6;
  $187 = $16;
  $188 = ((($187)) + 16|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = $7;
  $191 = $6;
  $192 = ((($191)) + 84|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = (FUNCTION_TABLE_iiiiii[$185 & 63]($186,$189,$190,$193,$14)|0);
  $195 = $10;
  $196 = $195 | $194;
  $10 = $196;
  $197 = HEAP32[$14>>2]|0;
  $198 = (($197) + 3)|0;
  $199 = $8;
  $200 = ((($199)) + 60|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = (($201) + ($198))|0;
  HEAP32[$200>>2] = $202;
  $203 = $9;
  $204 = (($203) + 1)|0;
  $9 = $204;
 }
 if ((label|0) == 6) {
  $4 = -1;
  $206 = $4;
  STACKTOP = sp;return ($206|0);
 }
 else if ((label|0) == 11) {
  $4 = -1;
  $206 = $4;
  STACKTOP = sp;return ($206|0);
 }
 else if ((label|0) == 17) {
  $4 = -1;
  $206 = $4;
  STACKTOP = sp;return ($206|0);
 }
 else if ((label|0) == 19) {
  $205 = $10;
  $4 = $205;
  $206 = $4;
  STACKTOP = sp;return ($206|0);
 }
 return (0)|0;
}
function _cram_decode_aux($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $15 = sp + 24|0;
 $16 = sp + 20|0;
 $20 = sp + 4|0;
 $21 = sp + 64|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $14 = 0;
 HEAP32[$15>>2] = 1;
 HEAP32[$16>>2] = 0;
 $23 = $7;
 $24 = ((($23)) + 52|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 548|0);
 $27 = HEAP32[$26>>2]|0;
 $18 = $27;
 $28 = $18;
 $29 = $28 & 1073758208;
 $30 = ($29|0)!=(0);
 if (!($30)) {
  $31 = $10;
  $32 = ((($31)) + 56|0);
  HEAP32[$32>>2] = 0;
  $33 = $10;
  $34 = ((($33)) + 60|0);
  HEAP32[$34>>2] = 0;
  $6 = 0;
  $248 = $6;
  STACKTOP = sp;return ($248|0);
 }
 $35 = $7;
 $36 = ((($35)) + 52|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 348|0);
 $39 = ((($38)) + 128|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)!=(0|0);
 if (!($41)) {
  $6 = -1;
  $248 = $6;
  STACKTOP = sp;return ($248|0);
 }
 $42 = $7;
 $43 = ((($42)) + 52|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($44)) + 348|0);
 $46 = ((($45)) + 128|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($47)) + 12|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $8;
 $51 = $7;
 $52 = ((($51)) + 52|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($53)) + 348|0);
 $55 = ((($54)) + 128|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $9;
 $58 = (FUNCTION_TABLE_iiiiii[$49 & 63]($50,$56,$57,$16,$15)|0);
 $59 = $14;
 $60 = $59 | $58;
 $14 = $60;
 $61 = $14;
 $62 = ($61|0)!=(0);
 $63 = HEAP32[$16>>2]|0;
 $64 = ($63|0)<(0);
 $or$cond = $62 | $64;
 if (!($or$cond)) {
  $65 = HEAP32[$16>>2]|0;
  $66 = $7;
  $67 = ((($66)) + 52|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($68)) + 72|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($65|0)>=($70|0);
  if (!($71)) {
   $72 = HEAP32[$16>>2]|0;
   $73 = $7;
   $74 = ((($73)) + 52|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ((($75)) + 76|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) + ($72<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $17 = $79;
   $80 = $17;
   $81 = (_strlen($80)|0);
   $82 = (($81>>>0) / 3)&-1;
   $83 = $10;
   $84 = ((($83)) + 52|0);
   HEAP32[$84>>2] = $82;
   $85 = $10;
   $86 = ((($85)) + 60|0);
   HEAP32[$86>>2] = 0;
   $87 = $8;
   $88 = ((($87)) + 84|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ((($89)) + 40|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $10;
   $93 = ((($92)) + 56|0);
   HEAP32[$93>>2] = $91;
   $94 = $18;
   $95 = $94 & 1073741824;
   $96 = ($95|0)!=(0);
   if (!($96)) {
    $6 = 0;
    $248 = $6;
    STACKTOP = sp;return ($248|0);
   }
   $13 = 0;
   while(1) {
    $97 = $13;
    $98 = $10;
    $99 = ((($98)) + 52|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ($97|0)<($100|0);
    if (!($101)) {
     label = 28;
     break;
    }
    HEAP32[$20>>2] = 1;
    $102 = $17;
    $103 = HEAP8[$102>>0]|0;
    $104 = $103&255;
    $105 = ($104|0)==(77);
    if ($105) {
     $106 = $17;
     $107 = ((($106)) + 1|0);
     $108 = HEAP8[$107>>0]|0;
     $109 = $108&255;
     $110 = ($109|0)==(68);
     $111 = $11;
     $112 = ($111|0)!=(0|0);
     $or$cond3 = $110 & $112;
     if ($or$cond3) {
      $113 = $11;
      HEAP32[$113>>2] = 1;
     }
    }
    $114 = $17;
    $115 = HEAP8[$114>>0]|0;
    $116 = $115&255;
    $117 = ($116|0)==(78);
    if ($117) {
     $118 = $17;
     $119 = ((($118)) + 1|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = ($121|0)==(77);
     $123 = $12;
     $124 = ($123|0)!=(0|0);
     $or$cond5 = $122 & $124;
     if ($or$cond5) {
      $125 = $12;
      HEAP32[$125>>2] = 1;
     }
    }
    $126 = $17;
    $127 = ((($126)) + 1|0);
    $17 = $127;
    $128 = HEAP8[$126>>0]|0;
    HEAP8[$21>>0] = $128;
    $129 = $17;
    $130 = ((($129)) + 1|0);
    $17 = $130;
    $131 = HEAP8[$129>>0]|0;
    $132 = ((($21)) + 1|0);
    HEAP8[$132>>0] = $131;
    $133 = $17;
    $134 = ((($133)) + 1|0);
    $17 = $134;
    $135 = HEAP8[$133>>0]|0;
    $136 = ((($21)) + 2|0);
    HEAP8[$136>>0] = $135;
    $137 = HEAP8[$21>>0]|0;
    $138 = $137&255;
    $139 = $138 << 16;
    $140 = ((($21)) + 1|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = $141&255;
    $143 = $142 << 8;
    $144 = $139 | $143;
    $145 = ((($21)) + 2|0);
    $146 = HEAP8[$145>>0]|0;
    $147 = $146&255;
    $148 = $144 | $147;
    $19 = $148;
    $149 = $7;
    $150 = ((($149)) + 52|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = ((($151)) + 220|0);
    $153 = $19;
    $154 = (_map_find($152,$21,$153)|0);
    $22 = $154;
    $155 = $22;
    $156 = ($155|0)!=(0|0);
    if (!($156)) {
     label = 19;
     break;
    }
    while(1) {
     $157 = $8;
     $158 = ((($157)) + 84|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ((($159)) + 36|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = $8;
     $163 = ((($162)) + 84|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = ((($164)) + 40|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = (($166) + 3)|0;
     $168 = ($161>>>0)<=($167>>>0);
     $169 = $8;
     $170 = ((($169)) + 84|0);
     $171 = HEAP32[$170>>2]|0;
     if (!($168)) {
      break;
     }
     $172 = ((($171)) + 36|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = ($173|0)!=(0);
     if ($174) {
      $175 = $8;
      $176 = ((($175)) + 84|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = ((($177)) + 36|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = (+($179>>>0));
      $181 = $180 * 1.5;
      $183 = $181;
     } else {
      $183 = 1024.0;
     }
     $182 = (~~(($183))>>>0);
     $184 = $8;
     $185 = ((($184)) + 84|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ((($186)) + 36|0);
     HEAP32[$187>>2] = $182;
     $188 = $8;
     $189 = ((($188)) + 84|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = ((($190)) + 32|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = $8;
     $194 = ((($193)) + 84|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ((($195)) + 36|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = (_realloc($192,$197)|0);
     $199 = $8;
     $200 = ((($199)) + 84|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ((($201)) + 32|0);
     HEAP32[$202>>2] = $198;
    }
    $203 = ((($171)) + 40|0);
    $204 = HEAP32[$203>>2]|0;
    $205 = $8;
    $206 = ((($205)) + 84|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = ((($207)) + 32|0);
    $209 = HEAP32[$208>>2]|0;
    $210 = (($209) + ($204)|0);
    ;HEAP8[$210>>0]=HEAP8[$21>>0]|0;HEAP8[$210+1>>0]=HEAP8[$21+1>>0]|0;HEAP8[$210+2>>0]=HEAP8[$21+2>>0]|0;
    $211 = $8;
    $212 = ((($211)) + 84|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = ((($213)) + 40|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = (($215) + 3)|0;
    HEAP32[$214>>2] = $216;
    $217 = $22;
    $218 = ((($217)) + 16|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = ($219|0)!=(0|0);
    if (!($220)) {
     label = 25;
     break;
    }
    $221 = $22;
    $222 = ((($221)) + 16|0);
    $223 = HEAP32[$222>>2]|0;
    $224 = ((($223)) + 12|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = $8;
    $227 = $22;
    $228 = ((($227)) + 16|0);
    $229 = HEAP32[$228>>2]|0;
    $230 = $9;
    $231 = $8;
    $232 = ((($231)) + 84|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = (FUNCTION_TABLE_iiiiii[$225 & 63]($226,$229,$230,$233,$20)|0);
    $235 = $14;
    $236 = $235 | $234;
    $14 = $236;
    $237 = $14;
    $238 = ($237|0)!=(0);
    if ($238) {
     label = 28;
     break;
    }
    $239 = HEAP32[$20>>2]|0;
    $240 = (($239) + 3)|0;
    $241 = $10;
    $242 = ((($241)) + 60|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = (($243) + ($240))|0;
    HEAP32[$242>>2] = $244;
    $245 = $13;
    $246 = (($245) + 1)|0;
    $13 = $246;
   }
   if ((label|0) == 19) {
    $6 = -1;
    $248 = $6;
    STACKTOP = sp;return ($248|0);
   }
   else if ((label|0) == 25) {
    $6 = -1;
    $248 = $6;
    STACKTOP = sp;return ($248|0);
   }
   else if ((label|0) == 28) {
    $247 = $14;
    $6 = $247;
    $248 = $6;
    STACKTOP = sp;return ($248|0);
   }
  }
 }
 $6 = -1;
 $248 = $6;
 STACKTOP = sp;return ($248|0);
}
function _cram_decode_seq($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0;
 var $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0;
 var $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0;
 var $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0;
 var $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0.0, $1078 = 0.0, $1079 = 0, $108 = 0, $1080 = 0.0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0;
 var $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0;
 var $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0;
 var $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0.0, $1134 = 0.0, $1135 = 0, $1136 = 0.0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0;
 var $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0;
 var $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0;
 var $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0;
 var $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0;
 var $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0.0, $1222 = 0.0, $1223 = 0, $1224 = 0.0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0;
 var $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0;
 var $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0;
 var $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0.0, $1288 = 0.0;
 var $1289 = 0, $129 = 0, $1290 = 0.0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0;
 var $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0;
 var $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0;
 var $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0;
 var $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0;
 var $1379 = 0.0, $138 = 0, $1380 = 0.0, $1381 = 0, $1382 = 0.0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0;
 var $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0;
 var $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0;
 var $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0;
 var $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0;
 var $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0;
 var $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0;
 var $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0;
 var $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0;
 var $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0.0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0;
 var $1559 = 0, $156 = 0.0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0;
 var $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0.0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0;
 var $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0;
 var $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0;
 var $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0;
 var $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0.0, $1653 = 0.0, $1654 = 0, $1655 = 0.0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0;
 var $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0;
 var $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0;
 var $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0;
 var $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0.0, $1727 = 0.0, $1728 = 0, $1729 = 0.0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0;
 var $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0;
 var $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0;
 var $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0;
 var $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0;
 var $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0.0, $1825 = 0.0, $1826 = 0, $1827 = 0.0, $1828 = 0;
 var $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0;
 var $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0;
 var $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0;
 var $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0;
 var $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0;
 var $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0;
 var $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0;
 var $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0;
 var $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0;
 var $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0;
 var $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0.0, $2013 = 0.0, $2014 = 0, $2015 = 0.0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0;
 var $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0;
 var $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0;
 var $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0;
 var $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0.0, $2097 = 0.0, $2098 = 0, $2099 = 0.0;
 var $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0;
 var $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0;
 var $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0;
 var $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0;
 var $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0;
 var $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0;
 var $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0;
 var $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0;
 var $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0;
 var $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0;
 var $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0;
 var $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0;
 var $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0;
 var $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0;
 var $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0;
 var $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0;
 var $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0;
 var $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0;
 var $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0;
 var $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0;
 var $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0;
 var $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0;
 var $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0;
 var $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0;
 var $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0;
 var $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0;
 var $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0;
 var $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0.0, $2596 = 0.0, $2597 = 0, $2598 = 0.0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0;
 var $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0;
 var $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0;
 var $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0;
 var $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0;
 var $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0;
 var $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0;
 var $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0;
 var $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0;
 var $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0;
 var $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0;
 var $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0.0, $2789 = 0.0, $279 = 0, $2790 = 0, $2791 = 0.0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0, $2800 = 0;
 var $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0;
 var $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0;
 var $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0;
 var $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0;
 var $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0.0, $2879 = 0.0, $288 = 0, $2880 = 0, $2881 = 0.0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0;
 var $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0;
 var $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0.0, $693 = 0.0, $694 = 0, $695 = 0.0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0.0, $81 = 0, $810 = 0.0, $811 = 0, $812 = 0.0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
 var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
 var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
 var $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0.0, $877 = 0.0, $878 = 0, $879 = 0.0, $88 = 0, $880 = 0;
 var $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0;
 var $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0.0, $996 = 0.0, $997 = 0, $998 = 0.0, $999 = 0, $cond = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0;
 var $or$cond27 = 0, $or$cond29 = 0, $or$cond3 = 0, $or$cond31 = 0, $or$cond33 = 0, $or$cond35 = 0, $or$cond37 = 0, $or$cond39 = 0, $or$cond41 = 0, $or$cond43 = 0, $or$cond45 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer46 = 0, $vararg_buffer48 = 0, $vararg_buffer51 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $vararg_buffer51 = sp + 24|0;
 $vararg_buffer48 = sp + 16|0;
 $vararg_buffer46 = sp + 8|0;
 $vararg_buffer = sp;
 $26 = sp + 168|0;
 $30 = sp + 152|0;
 $31 = sp + 148|0;
 $42 = sp + 104|0;
 $43 = sp + 242|0;
 $45 = sp + 96|0;
 $47 = sp + 241|0;
 $55 = sp + 64|0;
 $56 = sp + 60|0;
 $61 = sp + 44|0;
 $65 = sp + 28|0;
 $66 = sp + 232|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = 0;
 $25 = 0;
 HEAP32[$26>>2] = 1;
 $27 = 1;
 $28 = 0;
 $67 = $16;
 $68 = ((($67)) + 20|0);
 $69 = HEAP32[$68>>2]|0;
 $29 = $69;
 $32 = 0;
 $70 = $14;
 $71 = ((($70)) + 28|0);
 $72 = HEAP32[$71>>2]|0;
 $33 = $72;
 $73 = $14;
 $74 = ((($73)) + 36|0);
 $75 = HEAP32[$74>>2]|0;
 $34 = $75;
 $76 = $14;
 $77 = ((($76)) + 32|0);
 $78 = HEAP32[$77>>2]|0;
 $35 = $78;
 $36 = 0;
 $37 = 0;
 $38 = 0;
 $79 = $12;
 $80 = ((($79)) + 268|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ($81|0)!=(0);
 if ($82) {
  $83 = $14;
  $84 = ((($83)) + 132|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)!=(0|0);
  if ($86) {
   $87 = $21;
   $88 = ($87|0)!=(0);
   $89 = $88 ^ 1;
   $91 = $89;
  } else {
   $91 = 0;
  }
 } else {
  $91 = 0;
 }
 $90 = $91&1;
 $39 = $90;
 $92 = $12;
 $93 = ((($92)) + 268|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ($94|0)!=(0);
 if ($95) {
  $96 = $14;
  $97 = ((($96)) + 132|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ($98|0)!=(0|0);
  if ($99) {
   $100 = $22;
   $101 = ($100|0)!=(0);
   $102 = $101 ^ 1;
   $104 = $102;
  } else {
   $104 = 0;
  }
 } else {
  $104 = 0;
 }
 $103 = $104&1;
 $40 = $103;
 $105 = $13;
 $106 = ((($105)) + 52|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ((($107)) + 548|0);
 $109 = HEAP32[$108>>2]|0;
 $41 = $109;
 $110 = $41;
 $111 = $110 & 128;
 $112 = ($111|0)!=(0);
 if ($112) {
  $113 = $18;
  $114 = $113 & 1;
  $115 = ($114|0)!=(0);
  if (!($115)) {
   $116 = $20;
   $117 = $16;
   $118 = ((($117)) + 16|0);
   $119 = HEAP32[$118>>2]|0;
   _memset(($116|0),-1,($119|0))|0;
  }
 }
 $120 = $16;
 $121 = ((($120)) + 12|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = $122 & 8;
 $124 = ($123|0)!=(0);
 if ($124) {
  $40 = 0;
  $39 = 0;
 }
 $125 = $39;
 $126 = ($125|0)!=(0);
 if ($126) {
  $127 = $14;
  $128 = ((($127)) + 84|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = ((($129)) + 40|0);
  $131 = HEAP32[$130>>2]|0;
  $38 = $131;
  while(1) {
   $132 = $14;
   $133 = ((($132)) + 84|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ((($134)) + 36|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = $14;
   $138 = ((($137)) + 84|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ((($139)) + 40|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = (($141) + 3)|0;
   $143 = ($136>>>0)<=($142>>>0);
   $144 = $14;
   $145 = ((($144)) + 84|0);
   $146 = HEAP32[$145>>2]|0;
   if (!($143)) {
    break;
   }
   $147 = ((($146)) + 36|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = ($148|0)!=(0);
   if ($149) {
    $150 = $14;
    $151 = ((($150)) + 84|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ((($152)) + 36|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = (+($154>>>0));
    $156 = $155 * 1.5;
    $158 = $156;
   } else {
    $158 = 1024.0;
   }
   $157 = (~~(($158))>>>0);
   $159 = $14;
   $160 = ((($159)) + 84|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = ((($161)) + 36|0);
   HEAP32[$162>>2] = $157;
   $163 = $14;
   $164 = ((($163)) + 84|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = ((($165)) + 32|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = $14;
   $169 = ((($168)) + 84|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = ((($170)) + 36|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = (_realloc($167,$172)|0);
   $174 = $14;
   $175 = ((($174)) + 84|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = ((($176)) + 32|0);
   HEAP32[$177>>2] = $173;
  }
  $178 = ((($146)) + 40|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = $14;
  $181 = ((($180)) + 84|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = ((($182)) + 32|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = (($184) + ($179)|0);
  ;HEAP8[$185>>0]=HEAP8[21266>>0]|0;HEAP8[$185+1>>0]=HEAP8[21266+1>>0]|0;HEAP8[$185+2>>0]=HEAP8[21266+2>>0]|0;
  $186 = $14;
  $187 = ((($186)) + 84|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = ((($188)) + 40|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = (($190) + 3)|0;
  HEAP32[$189>>2] = $191;
 }
 $192 = $41;
 $193 = $192 & 512;
 $194 = ($193|0)!=(0);
 if ($194) {
  $195 = $13;
  $196 = ((($195)) + 52|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = ((($197)) + 348|0);
  $199 = ((($198)) + 104|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = ($200|0)!=(0|0);
  if (!($201)) {
   $11 = -1;
   $2920 = $11;
   STACKTOP = sp;return ($2920|0);
  }
  $202 = $13;
  $203 = ((($202)) + 52|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = ((($204)) + 348|0);
  $206 = ((($205)) + 104|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = ((($207)) + 12|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = $14;
  $211 = $13;
  $212 = ((($211)) + 52|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = ((($213)) + 348|0);
  $215 = ((($214)) + 104|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = $15;
  $218 = (FUNCTION_TABLE_iiiiii[$209 & 63]($210,$216,$217,$30,$26)|0);
  $219 = $25;
  $220 = $219 | $218;
  $25 = $220;
  $221 = $25;
  $222 = ($221|0)!=(0);
  if ($222) {
   $223 = $25;
   $11 = $223;
   $2920 = $11;
   STACKTOP = sp;return ($2920|0);
  }
 } else {
  HEAP32[$30>>2] = 0;
 }
 $224 = $29;
 $225 = (($224) + -1)|0;
 $29 = $225;
 $226 = $34;
 $227 = $16;
 $228 = ((($227)) + 80|0);
 HEAP32[$228>>2] = $226;
 $229 = $41;
 $230 = $229 & 260;
 $231 = ($230|0)!=(0);
 L36: do {
  if ($231) {
   $24 = 0;
   L38: while(1) {
    $232 = $24;
    $233 = HEAP32[$30>>2]|0;
    $234 = ($232|0)<($233|0);
    if (!($234)) {
     label = 292;
     break;
    }
    HEAP32[$42>>2] = 0;
    $235 = $34;
    $236 = (($235) + 2)|0;
    $237 = $35;
    $238 = ($236>>>0)>=($237>>>0);
    if ($238) {
     $239 = $35;
     $240 = ($239|0)!=(0);
     $241 = $35;
     $242 = $241<<1;
     $243 = $240 ? $242 : 1024;
     $35 = $243;
     $244 = $33;
     $245 = $14;
     $246 = ((($245)) + 28|0);
     HEAP32[$246>>2] = $244;
     $247 = $33;
     $248 = $35;
     $249 = $248<<2;
     $250 = (_realloc($247,$249)|0);
     $33 = $250;
     $251 = ($250|0)!=(0|0);
     if (!($251)) {
      label = 30;
      break;
     }
    }
    $252 = $41;
    $253 = $252 & 256;
    $254 = ($253|0)!=(0);
    if ($254) {
     $255 = $13;
     $256 = ((($255)) + 52|0);
     $257 = HEAP32[$256>>2]|0;
     $258 = ((($257)) + 348|0);
     $259 = ((($258)) + 108|0);
     $260 = HEAP32[$259>>2]|0;
     $261 = ($260|0)!=(0|0);
     if (!($261)) {
      label = 33;
      break;
     }
     $262 = $13;
     $263 = ((($262)) + 52|0);
     $264 = HEAP32[$263>>2]|0;
     $265 = ((($264)) + 348|0);
     $266 = ((($265)) + 108|0);
     $267 = HEAP32[$266>>2]|0;
     $268 = ((($267)) + 12|0);
     $269 = HEAP32[$268>>2]|0;
     $270 = $14;
     $271 = $13;
     $272 = ((($271)) + 52|0);
     $273 = HEAP32[$272>>2]|0;
     $274 = ((($273)) + 348|0);
     $275 = ((($274)) + 108|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = $15;
     $278 = (FUNCTION_TABLE_iiiiii[$269 & 63]($270,$276,$277,$43,$26)|0);
     $279 = $25;
     $280 = $279 | $278;
     $25 = $280;
     $281 = $25;
     $282 = ($281|0)!=(0);
     if ($282) {
      label = 35;
      break;
     }
    }
    $284 = $41;
    $285 = $284 & 4;
    $286 = ($285|0)!=(0);
    L48: do {
     if ($286) {
      $287 = $13;
      $288 = ((($287)) + 52|0);
      $289 = HEAP32[$288>>2]|0;
      $290 = ((($289)) + 348|0);
      $291 = ((($290)) + 112|0);
      $292 = HEAP32[$291>>2]|0;
      $293 = ($292|0)!=(0|0);
      if (!($293)) {
       label = 38;
       break L38;
      }
      $294 = $13;
      $295 = ((($294)) + 52|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = ((($296)) + 348|0);
      $298 = ((($297)) + 112|0);
      $299 = HEAP32[$298>>2]|0;
      $300 = ((($299)) + 12|0);
      $301 = HEAP32[$300>>2]|0;
      $302 = $14;
      $303 = $13;
      $304 = ((($303)) + 52|0);
      $305 = HEAP32[$304>>2]|0;
      $306 = ((($305)) + 348|0);
      $307 = ((($306)) + 112|0);
      $308 = HEAP32[$307>>2]|0;
      $309 = $15;
      $310 = (FUNCTION_TABLE_iiiiii[$301 & 63]($302,$308,$309,$42,$26)|0);
      $311 = $25;
      $312 = $311 | $310;
      $25 = $312;
      $313 = $25;
      $314 = ($313|0)!=(0);
      if ($314) {
       label = 40;
       break L38;
      }
      $316 = $23;
      $317 = HEAP32[$42>>2]|0;
      $318 = (($317) + ($316))|0;
      HEAP32[$42>>2] = $318;
      $319 = HEAP32[$42>>2]|0;
      $320 = ($319|0)<=(0);
      if ($320) {
       label = 42;
       break L38;
      }
      $323 = HEAP32[$42>>2]|0;
      $324 = $27;
      $325 = ($323|0)>($324|0);
      if ($325) {
       $326 = HEAP32[$42>>2]|0;
       $327 = $16;
       $328 = ((($327)) + 16|0);
       $329 = HEAP32[$328>>2]|0;
       $330 = (($329) + 1)|0;
       $331 = ($326|0)>($330|0);
       if ($331) {
        label = 45;
        break L38;
       }
       $332 = $14;
       $333 = ((($332)) + 132|0);
       $334 = HEAP32[$333>>2]|0;
       $335 = ($334|0)!=(0|0);
       do {
        if ($335) {
         $336 = $16;
         $337 = ((($336)) + 4|0);
         $338 = HEAP32[$337>>2]|0;
         $339 = ($338|0)>=(0);
         if (!($339)) {
          break;
         }
         $340 = $29;
         $341 = HEAP32[$42>>2]|0;
         $342 = (($340) + ($341))|0;
         $343 = $27;
         $344 = (($342) - ($343))|0;
         $345 = $16;
         $346 = ((($345)) + 4|0);
         $347 = HEAP32[$346>>2]|0;
         $348 = $17;
         $349 = ((($348)) + 32|0);
         $350 = HEAP32[$349>>2]|0;
         $351 = (($350) + ($347<<4)|0);
         $352 = ((($351)) + 4|0);
         $353 = HEAP32[$352>>2]|0;
         $354 = ($344>>>0)>($353>>>0);
         if (!($354)) {
          $409 = $27;
          $410 = (($409) - 1)|0;
          $411 = $19;
          $412 = (($411) + ($410)|0);
          $413 = $29;
          $414 = $14;
          $415 = ((($414)) + 136|0);
          $416 = HEAP32[$415>>2]|0;
          $417 = (($413) - ($416))|0;
          $418 = (($417) + 1)|0;
          $419 = $14;
          $420 = ((($419)) + 132|0);
          $421 = HEAP32[$420>>2]|0;
          $422 = (($421) + ($418)|0);
          $423 = HEAP32[$42>>2]|0;
          $424 = $27;
          $425 = (($423) - ($424))|0;
          _memcpy(($412|0),($422|0),($425|0))|0;
          break;
         }
         $355 = HEAP32[6457]|0;
         $356 = ($355|0)!=(0);
         if (!($356)) {
          $357 = HEAP32[2410]|0;
          (_fprintf($357,21320,$vararg_buffer46)|0);
         }
         HEAP32[6457] = 1;
         $358 = $16;
         $359 = ((($358)) + 4|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = $17;
         $362 = ((($361)) + 32|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = (($363) + ($360<<4)|0);
         $365 = ((($364)) + 4|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = $29;
         $368 = (($366) - ($367))|0;
         $44 = $368;
         $369 = $44;
         $370 = ($369|0)>(0);
         $371 = $27;
         $372 = (($371) - 1)|0;
         $373 = $19;
         $374 = (($373) + ($372)|0);
         if (!($370)) {
          $403 = $16;
          $404 = ((($403)) + 16|0);
          $405 = HEAP32[$404>>2]|0;
          $406 = $27;
          $407 = (($405) - ($406))|0;
          $408 = (($407) + 1)|0;
          _memset(($374|0),78,($408|0))|0;
          break;
         }
         $375 = $29;
         $376 = $14;
         $377 = ((($376)) + 136|0);
         $378 = HEAP32[$377>>2]|0;
         $379 = (($375) - ($378))|0;
         $380 = (($379) + 1)|0;
         $381 = $14;
         $382 = ((($381)) + 132|0);
         $383 = HEAP32[$382>>2]|0;
         $384 = (($383) + ($380)|0);
         $385 = $44;
         _memcpy(($374|0),($384|0),($385|0))|0;
         $386 = HEAP32[$42>>2]|0;
         $387 = $27;
         $388 = (($386) - ($387))|0;
         $389 = $44;
         $390 = (($388) - ($389))|0;
         $391 = ($390|0)>(0);
         if (!($391)) {
          break;
         }
         $392 = $27;
         $393 = (($392) - 1)|0;
         $394 = $44;
         $395 = (($393) + ($394))|0;
         $396 = $19;
         $397 = (($396) + ($395)|0);
         $398 = HEAP32[$42>>2]|0;
         $399 = $27;
         $400 = (($398) - ($399))|0;
         $401 = $44;
         $402 = (($400) - ($401))|0;
         _memset(($397|0),78,($402|0))|0;
        }
       } while(0);
       $426 = $28;
       $427 = ($426|0)!=(0);
       $428 = $32;
       $429 = ($428|0)!=(0);
       $or$cond = $427 & $429;
       if ($or$cond) {
        $430 = $28;
        $431 = $430 << 4;
        $432 = $32;
        $433 = (($431) + ($432))|0;
        $434 = $34;
        $435 = (($434) + 1)|0;
        $34 = $435;
        $436 = $33;
        $437 = (($436) + ($434<<2)|0);
        HEAP32[$437>>2] = $433;
        $28 = 0;
       }
       $32 = 0;
       $438 = HEAP32[$42>>2]|0;
       $439 = $27;
       $440 = (($438) - ($439))|0;
       $441 = $28;
       $442 = (($441) + ($440))|0;
       $28 = $442;
       $443 = HEAP32[$42>>2]|0;
       $444 = $27;
       $445 = (($443) - ($444))|0;
       $446 = $29;
       $447 = (($446) + ($445))|0;
       $29 = $447;
       $448 = $37;
       $449 = ($448|0)>=(0);
       if ($449) {
        $450 = HEAP32[$42>>2]|0;
        $451 = $27;
        $452 = (($450) - ($451))|0;
        $453 = $37;
        $454 = (($453) + ($452))|0;
        $37 = $454;
       }
       $455 = HEAP32[$42>>2]|0;
       $27 = $455;
      }
      $456 = HEAP32[$42>>2]|0;
      $23 = $456;
      $457 = $41;
      $458 = $457 & 256;
      $459 = ($458|0)!=(0);
      if (!($459)) {
       break L36;
      }
      $460 = $41;
      $461 = $460 & 256;
      $462 = ($461|0)!=(0);
      if ($462) {
       $463 = HEAP8[$43>>0]|0;
       $464 = $463 << 24 >> 24;
       do {
        switch ($464|0) {
        case 83:  {
         HEAP32[$45>>2] = 1;
         $46 = 0;
         $465 = $28;
         $466 = ($465|0)!=(0);
         if ($466) {
          $467 = $28;
          $468 = $467 << 4;
          $469 = $32;
          $470 = (($468) + ($469))|0;
          $471 = $34;
          $472 = (($471) + 1)|0;
          $34 = $472;
          $473 = $33;
          $474 = (($473) + ($471<<2)|0);
          HEAP32[$474>>2] = $470;
          $28 = 0;
         }
         $475 = $12;
         $476 = ((($475)) + 8|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 >> 8;
         $cond = ($478|0)==(1);
         $479 = $41;
         do {
          if ($cond) {
           $480 = $479 & 2048;
           $481 = ($480|0)!=(0);
           if (!($481)) {
            break;
           }
           $482 = $13;
           $483 = ((($482)) + 52|0);
           $484 = HEAP32[$483>>2]|0;
           $485 = ((($484)) + 348|0);
           $486 = ((($485)) + 52|0);
           $487 = HEAP32[$486>>2]|0;
           $488 = ($487|0)!=(0|0);
           if ($488) {
            $489 = $13;
            $490 = ((($489)) + 52|0);
            $491 = HEAP32[$490>>2]|0;
            $492 = ((($491)) + 348|0);
            $493 = ((($492)) + 52|0);
            $494 = HEAP32[$493>>2]|0;
            $495 = ((($494)) + 12|0);
            $496 = HEAP32[$495>>2]|0;
            $497 = $14;
            $498 = $13;
            $499 = ((($498)) + 52|0);
            $500 = HEAP32[$499>>2]|0;
            $501 = ((($500)) + 348|0);
            $502 = ((($501)) + 52|0);
            $503 = HEAP32[$502>>2]|0;
            $504 = $15;
            $505 = $16;
            $506 = ((($505)) + 16|0);
            $507 = HEAP32[$506>>2]|0;
            $508 = ($507|0)!=(0);
            if ($508) {
             $509 = HEAP32[$42>>2]|0;
             $510 = (($509) - 1)|0;
             $511 = $19;
             $512 = (($511) + ($510)|0);
             $513 = $512;
            } else {
             $513 = 0;
            }
            $514 = (FUNCTION_TABLE_iiiiii[$496 & 63]($497,$503,$504,$513,$45)|0);
            $521 = $514;
           } else {
            $515 = HEAP32[$42>>2]|0;
            $516 = (($515) - 1)|0;
            $517 = $19;
            $518 = (($517) + ($516)|0);
            HEAP8[$518>>0] = 78;
            HEAP32[$45>>2] = 1;
            $521 = 0;
           }
           $519 = $25;
           $520 = $519 | $521;
           $25 = $520;
           $46 = 1;
          } else {
           $522 = $479 & 33554432;
           $523 = ($522|0)!=(0);
           if (!($523)) {
            break;
           }
           $524 = $13;
           $525 = ((($524)) + 52|0);
           $526 = HEAP32[$525>>2]|0;
           $527 = ((($526)) + 348|0);
           $528 = ((($527)) + 56|0);
           $529 = HEAP32[$528>>2]|0;
           $530 = ($529|0)!=(0|0);
           if ($530) {
            $531 = $13;
            $532 = ((($531)) + 52|0);
            $533 = HEAP32[$532>>2]|0;
            $534 = ((($533)) + 348|0);
            $535 = ((($534)) + 56|0);
            $536 = HEAP32[$535>>2]|0;
            $537 = ((($536)) + 12|0);
            $538 = HEAP32[$537>>2]|0;
            $539 = $14;
            $540 = $13;
            $541 = ((($540)) + 52|0);
            $542 = HEAP32[$541>>2]|0;
            $543 = ((($542)) + 348|0);
            $544 = ((($543)) + 56|0);
            $545 = HEAP32[$544>>2]|0;
            $546 = $15;
            $547 = $16;
            $548 = ((($547)) + 16|0);
            $549 = HEAP32[$548>>2]|0;
            $550 = ($549|0)!=(0);
            if ($550) {
             $551 = HEAP32[$42>>2]|0;
             $552 = (($551) - 1)|0;
             $553 = $19;
             $554 = (($553) + ($552)|0);
             $555 = $554;
            } else {
             $555 = 0;
            }
            $556 = (FUNCTION_TABLE_iiiiii[$538 & 63]($539,$545,$546,$555,$45)|0);
            $563 = $556;
           } else {
            $557 = HEAP32[$42>>2]|0;
            $558 = (($557) - 1)|0;
            $559 = $19;
            $560 = (($559) + ($558)|0);
            HEAP8[$560>>0] = 78;
            HEAP32[$45>>2] = 1;
            $563 = 0;
           }
           $561 = $25;
           $562 = $561 | $563;
           $25 = $562;
           $46 = 1;
          }
         } while(0);
         $564 = $46;
         $565 = ($564|0)!=(0);
         if (!($565)) {
          break L48;
         }
         $566 = $25;
         $567 = ($566|0)!=(0);
         if ($567) {
          label = 83;
          break L38;
         }
         $569 = HEAP32[$45>>2]|0;
         $570 = $569 << 4;
         $571 = (($570) + 4)|0;
         $572 = $34;
         $573 = (($572) + 1)|0;
         $34 = $573;
         $574 = $33;
         $575 = (($574) + ($572<<2)|0);
         HEAP32[$575>>2] = $571;
         $32 = 4;
         $576 = HEAP32[$45>>2]|0;
         $577 = $27;
         $578 = (($577) + ($576))|0;
         $27 = $578;
         break L48;
         break;
        }
        case 88:  {
         $579 = $28;
         $580 = ($579|0)!=(0);
         $581 = $32;
         $582 = ($581|0)!=(0);
         $or$cond3 = $580 & $582;
         if ($or$cond3) {
          $583 = $28;
          $584 = $583 << 4;
          $585 = $32;
          $586 = (($584) + ($585))|0;
          $587 = $34;
          $588 = (($587) + 1)|0;
          $34 = $588;
          $589 = $33;
          $590 = (($589) + ($587<<2)|0);
          HEAP32[$590>>2] = $586;
          $28 = 0;
         }
         $591 = $41;
         $592 = $591 & 1024;
         $593 = ($592|0)!=(0);
         L110: do {
          if ($593) {
           $594 = $13;
           $595 = ((($594)) + 52|0);
           $596 = HEAP32[$595>>2]|0;
           $597 = ((($596)) + 348|0);
           $598 = ((($597)) + 124|0);
           $599 = HEAP32[$598>>2]|0;
           $600 = ($599|0)!=(0|0);
           if (!($600)) {
            label = 89;
            break L38;
           }
           $601 = $13;
           $602 = ((($601)) + 52|0);
           $603 = HEAP32[$602>>2]|0;
           $604 = ((($603)) + 348|0);
           $605 = ((($604)) + 124|0);
           $606 = HEAP32[$605>>2]|0;
           $607 = ((($606)) + 12|0);
           $608 = HEAP32[$607>>2]|0;
           $609 = $14;
           $610 = $13;
           $611 = ((($610)) + 52|0);
           $612 = HEAP32[$611>>2]|0;
           $613 = ((($612)) + 348|0);
           $614 = ((($613)) + 124|0);
           $615 = HEAP32[$614>>2]|0;
           $616 = $15;
           $617 = (FUNCTION_TABLE_iiiiii[$608 & 63]($609,$615,$616,$47,$26)|0);
           $618 = $25;
           $619 = $618 | $617;
           $25 = $619;
           $620 = $25;
           $621 = ($620|0)!=(0);
           if ($621) {
            label = 91;
            break L38;
           }
           $622 = $29;
           $623 = $16;
           $624 = ((($623)) + 4|0);
           $625 = HEAP32[$624>>2]|0;
           $626 = $17;
           $627 = ((($626)) + 32|0);
           $628 = HEAP32[$627>>2]|0;
           $629 = (($628) + ($625<<4)|0);
           $630 = ((($629)) + 4|0);
           $631 = HEAP32[$630>>2]|0;
           $632 = ($622>>>0)>=($631>>>0);
           do {
            if (!($632)) {
             $633 = $14;
             $634 = ((($633)) + 132|0);
             $635 = HEAP32[$634>>2]|0;
             $636 = ($635|0)!=(0|0);
             if (!($636)) {
              break;
             }
             $738 = $29;
             $739 = $14;
             $740 = ((($739)) + 140|0);
             $741 = HEAP32[$740>>2]|0;
             $742 = ($738|0)<=($741|0);
             if ($742) {
              $743 = $29;
              $744 = $14;
              $745 = ((($744)) + 136|0);
              $746 = HEAP32[$745>>2]|0;
              $747 = (($743) - ($746))|0;
              $748 = (($747) + 1)|0;
              $749 = $14;
              $750 = ((($749)) + 132|0);
              $751 = HEAP32[$750>>2]|0;
              $752 = (($751) + ($748)|0);
              $753 = HEAP8[$752>>0]|0;
              $754 = $753&255;
              $756 = $754;
             } else {
              $756 = 78;
             }
             $755 = $756&255;
             $50 = $755;
             $757 = $50;
             $758 = $757&255;
             $759 = $12;
             $760 = ((($759)) + 33096|0);
             $761 = (($760) + ($758)|0);
             $762 = HEAP8[$761>>0]|0;
             $763 = $762&255;
             $48 = $763;
             $764 = HEAP32[$42>>2]|0;
             $765 = (($764) - 1)|0;
             $766 = $16;
             $767 = ((($766)) + 16|0);
             $768 = HEAP32[$767>>2]|0;
             $769 = ($765|0)<($768|0);
             if ($769) {
              $770 = HEAP8[$47>>0]|0;
              $771 = $770&255;
              $772 = $48;
              $773 = $13;
              $774 = ((($773)) + 52|0);
              $775 = HEAP32[$774>>2]|0;
              $776 = ((($775)) + 48|0);
              $777 = (($776) + ($772<<2)|0);
              $778 = (($777) + ($771)|0);
              $779 = HEAP8[$778>>0]|0;
              $780 = HEAP32[$42>>2]|0;
              $781 = (($780) - 1)|0;
              $782 = $19;
              $783 = (($782) + ($781)|0);
              HEAP8[$783>>0] = $779;
             }
             $784 = $39;
             $785 = ($784|0)!=(0);
             if (!($785)) {
              break L110;
             }
             while(1) {
              $786 = $14;
              $787 = ((($786)) + 84|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ((($788)) + 36|0);
              $790 = HEAP32[$789>>2]|0;
              $791 = $14;
              $792 = ((($791)) + 84|0);
              $793 = HEAP32[$792>>2]|0;
              $794 = ((($793)) + 40|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = (($795) + 11)|0;
              $797 = ($790>>>0)<=($796>>>0);
              $798 = $14;
              $799 = ((($798)) + 84|0);
              $800 = HEAP32[$799>>2]|0;
              if (!($797)) {
               break;
              }
              $801 = ((($800)) + 36|0);
              $802 = HEAP32[$801>>2]|0;
              $803 = ($802|0)!=(0);
              if ($803) {
               $804 = $14;
               $805 = ((($804)) + 84|0);
               $806 = HEAP32[$805>>2]|0;
               $807 = ((($806)) + 36|0);
               $808 = HEAP32[$807>>2]|0;
               $809 = (+($808>>>0));
               $810 = $809 * 1.5;
               $812 = $810;
              } else {
               $812 = 1024.0;
              }
              $811 = (~~(($812))>>>0);
              $813 = $14;
              $814 = ((($813)) + 84|0);
              $815 = HEAP32[$814>>2]|0;
              $816 = ((($815)) + 36|0);
              HEAP32[$816>>2] = $811;
              $817 = $14;
              $818 = ((($817)) + 84|0);
              $819 = HEAP32[$818>>2]|0;
              $820 = ((($819)) + 32|0);
              $821 = HEAP32[$820>>2]|0;
              $822 = $14;
              $823 = ((($822)) + 84|0);
              $824 = HEAP32[$823>>2]|0;
              $825 = ((($824)) + 36|0);
              $826 = HEAP32[$825>>2]|0;
              $827 = (_realloc($821,$826)|0);
              $828 = $14;
              $829 = ((($828)) + 84|0);
              $830 = HEAP32[$829>>2]|0;
              $831 = ((($830)) + 32|0);
              HEAP32[$831>>2] = $827;
             }
             $832 = ((($800)) + 40|0);
             $833 = HEAP32[$832>>2]|0;
             $834 = $14;
             $835 = ((($834)) + 84|0);
             $836 = HEAP32[$835>>2]|0;
             $837 = ((($836)) + 32|0);
             $838 = HEAP32[$837>>2]|0;
             $839 = (($838) + ($833)|0);
             $51 = $839;
             $840 = $51;
             $841 = $37;
             $842 = (_append_uint32($840,$841)|0);
             $843 = $51;
             $844 = $842;
             $845 = $843;
             $846 = (($844) - ($845))|0;
             $847 = $14;
             $848 = ((($847)) + 84|0);
             $849 = HEAP32[$848>>2]|0;
             $850 = ((($849)) + 40|0);
             $851 = HEAP32[$850>>2]|0;
             $852 = (($851) + ($846))|0;
             HEAP32[$850>>2] = $852;
             while(1) {
              $853 = $14;
              $854 = ((($853)) + 84|0);
              $855 = HEAP32[$854>>2]|0;
              $856 = ((($855)) + 36|0);
              $857 = HEAP32[$856>>2]|0;
              $858 = $14;
              $859 = ((($858)) + 84|0);
              $860 = HEAP32[$859>>2]|0;
              $861 = ((($860)) + 40|0);
              $862 = HEAP32[$861>>2]|0;
              $863 = (($862) + 1)|0;
              $864 = ($857>>>0)<=($863>>>0);
              if (!($864)) {
               break;
              }
              $865 = $14;
              $866 = ((($865)) + 84|0);
              $867 = HEAP32[$866>>2]|0;
              $868 = ((($867)) + 36|0);
              $869 = HEAP32[$868>>2]|0;
              $870 = ($869|0)!=(0);
              if ($870) {
               $871 = $14;
               $872 = ((($871)) + 84|0);
               $873 = HEAP32[$872>>2]|0;
               $874 = ((($873)) + 36|0);
               $875 = HEAP32[$874>>2]|0;
               $876 = (+($875>>>0));
               $877 = $876 * 1.5;
               $879 = $877;
              } else {
               $879 = 1024.0;
              }
              $878 = (~~(($879))>>>0);
              $880 = $14;
              $881 = ((($880)) + 84|0);
              $882 = HEAP32[$881>>2]|0;
              $883 = ((($882)) + 36|0);
              HEAP32[$883>>2] = $878;
              $884 = $14;
              $885 = ((($884)) + 84|0);
              $886 = HEAP32[$885>>2]|0;
              $887 = ((($886)) + 32|0);
              $888 = HEAP32[$887>>2]|0;
              $889 = $14;
              $890 = ((($889)) + 84|0);
              $891 = HEAP32[$890>>2]|0;
              $892 = ((($891)) + 36|0);
              $893 = HEAP32[$892>>2]|0;
              $894 = (_realloc($888,$893)|0);
              $895 = $14;
              $896 = ((($895)) + 84|0);
              $897 = HEAP32[$896>>2]|0;
              $898 = ((($897)) + 32|0);
              HEAP32[$898>>2] = $894;
             }
             $899 = $50;
             $900 = $14;
             $901 = ((($900)) + 84|0);
             $902 = HEAP32[$901>>2]|0;
             $903 = ((($902)) + 40|0);
             $904 = HEAP32[$903>>2]|0;
             $905 = (($904) + 1)|0;
             HEAP32[$903>>2] = $905;
             $906 = $14;
             $907 = ((($906)) + 84|0);
             $908 = HEAP32[$907>>2]|0;
             $909 = ((($908)) + 32|0);
             $910 = HEAP32[$909>>2]|0;
             $911 = (($910) + ($904)|0);
             HEAP8[$911>>0] = $899;
             $37 = 0;
             break L110;
            }
           } while(0);
           $637 = HEAP32[$42>>2]|0;
           $638 = (($637) - 1)|0;
           $639 = $16;
           $640 = ((($639)) + 16|0);
           $641 = HEAP32[$640>>2]|0;
           $642 = ($638|0)<($641|0);
           if ($642) {
            $643 = HEAP8[$47>>0]|0;
            $644 = $643&255;
            $645 = $12;
            $646 = ((($645)) + 33096|0);
            $647 = ((($646)) + 78|0);
            $648 = HEAP8[$647>>0]|0;
            $649 = $648&255;
            $650 = $13;
            $651 = ((($650)) + 52|0);
            $652 = HEAP32[$651>>2]|0;
            $653 = ((($652)) + 48|0);
            $654 = (($653) + ($649<<2)|0);
            $655 = (($654) + ($644)|0);
            $656 = HEAP8[$655>>0]|0;
            $657 = HEAP32[$42>>2]|0;
            $658 = (($657) - 1)|0;
            $659 = $19;
            $660 = (($659) + ($658)|0);
            HEAP8[$660>>0] = $656;
           }
           $661 = $39;
           $662 = ($661|0)!=(0);
           $663 = $40;
           $664 = ($663|0)!=(0);
           $or$cond5 = $662 | $664;
           if (!($or$cond5)) {
            break;
           }
           $665 = $37;
           $666 = ($665|0)>=(0);
           $667 = $39;
           $668 = ($667|0)!=(0);
           $or$cond7 = $666 & $668;
           if ($or$cond7) {
            while(1) {
             $669 = $14;
             $670 = ((($669)) + 84|0);
             $671 = HEAP32[$670>>2]|0;
             $672 = ((($671)) + 36|0);
             $673 = HEAP32[$672>>2]|0;
             $674 = $14;
             $675 = ((($674)) + 84|0);
             $676 = HEAP32[$675>>2]|0;
             $677 = ((($676)) + 40|0);
             $678 = HEAP32[$677>>2]|0;
             $679 = (($678) + 11)|0;
             $680 = ($673>>>0)<=($679>>>0);
             $681 = $14;
             $682 = ((($681)) + 84|0);
             $683 = HEAP32[$682>>2]|0;
             if (!($680)) {
              break;
             }
             $684 = ((($683)) + 36|0);
             $685 = HEAP32[$684>>2]|0;
             $686 = ($685|0)!=(0);
             if ($686) {
              $687 = $14;
              $688 = ((($687)) + 84|0);
              $689 = HEAP32[$688>>2]|0;
              $690 = ((($689)) + 36|0);
              $691 = HEAP32[$690>>2]|0;
              $692 = (+($691>>>0));
              $693 = $692 * 1.5;
              $695 = $693;
             } else {
              $695 = 1024.0;
             }
             $694 = (~~(($695))>>>0);
             $696 = $14;
             $697 = ((($696)) + 84|0);
             $698 = HEAP32[$697>>2]|0;
             $699 = ((($698)) + 36|0);
             HEAP32[$699>>2] = $694;
             $700 = $14;
             $701 = ((($700)) + 84|0);
             $702 = HEAP32[$701>>2]|0;
             $703 = ((($702)) + 32|0);
             $704 = HEAP32[$703>>2]|0;
             $705 = $14;
             $706 = ((($705)) + 84|0);
             $707 = HEAP32[$706>>2]|0;
             $708 = ((($707)) + 36|0);
             $709 = HEAP32[$708>>2]|0;
             $710 = (_realloc($704,$709)|0);
             $711 = $14;
             $712 = ((($711)) + 84|0);
             $713 = HEAP32[$712>>2]|0;
             $714 = ((($713)) + 32|0);
             HEAP32[$714>>2] = $710;
            }
            $715 = ((($683)) + 40|0);
            $716 = HEAP32[$715>>2]|0;
            $717 = $14;
            $718 = ((($717)) + 84|0);
            $719 = HEAP32[$718>>2]|0;
            $720 = ((($719)) + 32|0);
            $721 = HEAP32[$720>>2]|0;
            $722 = (($721) + ($716)|0);
            $49 = $722;
            $723 = $49;
            $724 = $37;
            $725 = (_append_uint32($723,$724)|0);
            $726 = $49;
            $727 = $725;
            $728 = $726;
            $729 = (($727) - ($728))|0;
            $730 = $14;
            $731 = ((($730)) + 84|0);
            $732 = HEAP32[$731>>2]|0;
            $733 = ((($732)) + 40|0);
            $734 = HEAP32[$733>>2]|0;
            $735 = (($734) + ($729))|0;
            HEAP32[$733>>2] = $735;
           }
           $37 = -1;
           $736 = $36;
           $737 = (($736) + -1)|0;
           $36 = $737;
          }
         } while(0);
         $32 = 0;
         $912 = $36;
         $913 = (($912) + 1)|0;
         $36 = $913;
         $914 = $28;
         $915 = (($914) + 1)|0;
         $28 = $915;
         $916 = $27;
         $917 = (($916) + 1)|0;
         $27 = $917;
         $918 = $29;
         $919 = (($918) + 1)|0;
         $29 = $919;
         break L48;
         break;
        }
        case 68:  {
         $920 = $28;
         $921 = ($920|0)!=(0);
         $922 = $32;
         $923 = ($922|0)!=(2);
         $or$cond9 = $921 & $923;
         if ($or$cond9) {
          $924 = $28;
          $925 = $924 << 4;
          $926 = $32;
          $927 = (($925) + ($926))|0;
          $928 = $34;
          $929 = (($928) + 1)|0;
          $34 = $929;
          $930 = $33;
          $931 = (($930) + ($928<<2)|0);
          HEAP32[$931>>2] = $927;
          $28 = 0;
         }
         $932 = $41;
         $933 = $932 & 16;
         $934 = ($933|0)!=(0);
         if (!($934)) {
          break L48;
         }
         $935 = $13;
         $936 = ((($935)) + 52|0);
         $937 = HEAP32[$936>>2]|0;
         $938 = ((($937)) + 348|0);
         $939 = ((($938)) + 116|0);
         $940 = HEAP32[$939>>2]|0;
         $941 = ($940|0)!=(0|0);
         if (!($941)) {
          label = 124;
          break L38;
         }
         $942 = $13;
         $943 = ((($942)) + 52|0);
         $944 = HEAP32[$943>>2]|0;
         $945 = ((($944)) + 348|0);
         $946 = ((($945)) + 116|0);
         $947 = HEAP32[$946>>2]|0;
         $948 = ((($947)) + 12|0);
         $949 = HEAP32[$948>>2]|0;
         $950 = $14;
         $951 = $13;
         $952 = ((($951)) + 52|0);
         $953 = HEAP32[$952>>2]|0;
         $954 = ((($953)) + 348|0);
         $955 = ((($954)) + 116|0);
         $956 = HEAP32[$955>>2]|0;
         $957 = $15;
         $958 = (FUNCTION_TABLE_iiiiii[$949 & 63]($950,$956,$957,$31,$26)|0);
         $959 = $25;
         $960 = $959 | $958;
         $25 = $960;
         $961 = $25;
         $962 = ($961|0)!=(0);
         if ($962) {
          label = 126;
          break L38;
         }
         $964 = $39;
         $965 = ($964|0)!=(0);
         $966 = $40;
         $967 = ($966|0)!=(0);
         $or$cond11 = $965 | $967;
         do {
          if ($or$cond11) {
           $968 = $37;
           $969 = ($968|0)>=(0);
           $970 = $39;
           $971 = ($970|0)!=(0);
           $or$cond13 = $969 & $971;
           if ($or$cond13) {
            while(1) {
             $972 = $14;
             $973 = ((($972)) + 84|0);
             $974 = HEAP32[$973>>2]|0;
             $975 = ((($974)) + 36|0);
             $976 = HEAP32[$975>>2]|0;
             $977 = $14;
             $978 = ((($977)) + 84|0);
             $979 = HEAP32[$978>>2]|0;
             $980 = ((($979)) + 40|0);
             $981 = HEAP32[$980>>2]|0;
             $982 = (($981) + 11)|0;
             $983 = ($976>>>0)<=($982>>>0);
             $984 = $14;
             $985 = ((($984)) + 84|0);
             $986 = HEAP32[$985>>2]|0;
             if (!($983)) {
              break;
             }
             $987 = ((($986)) + 36|0);
             $988 = HEAP32[$987>>2]|0;
             $989 = ($988|0)!=(0);
             if ($989) {
              $990 = $14;
              $991 = ((($990)) + 84|0);
              $992 = HEAP32[$991>>2]|0;
              $993 = ((($992)) + 36|0);
              $994 = HEAP32[$993>>2]|0;
              $995 = (+($994>>>0));
              $996 = $995 * 1.5;
              $998 = $996;
             } else {
              $998 = 1024.0;
             }
             $997 = (~~(($998))>>>0);
             $999 = $14;
             $1000 = ((($999)) + 84|0);
             $1001 = HEAP32[$1000>>2]|0;
             $1002 = ((($1001)) + 36|0);
             HEAP32[$1002>>2] = $997;
             $1003 = $14;
             $1004 = ((($1003)) + 84|0);
             $1005 = HEAP32[$1004>>2]|0;
             $1006 = ((($1005)) + 32|0);
             $1007 = HEAP32[$1006>>2]|0;
             $1008 = $14;
             $1009 = ((($1008)) + 84|0);
             $1010 = HEAP32[$1009>>2]|0;
             $1011 = ((($1010)) + 36|0);
             $1012 = HEAP32[$1011>>2]|0;
             $1013 = (_realloc($1007,$1012)|0);
             $1014 = $14;
             $1015 = ((($1014)) + 84|0);
             $1016 = HEAP32[$1015>>2]|0;
             $1017 = ((($1016)) + 32|0);
             HEAP32[$1017>>2] = $1013;
            }
            $1018 = ((($986)) + 40|0);
            $1019 = HEAP32[$1018>>2]|0;
            $1020 = $14;
            $1021 = ((($1020)) + 84|0);
            $1022 = HEAP32[$1021>>2]|0;
            $1023 = ((($1022)) + 32|0);
            $1024 = HEAP32[$1023>>2]|0;
            $1025 = (($1024) + ($1019)|0);
            $52 = $1025;
            $1026 = $52;
            $1027 = $37;
            $1028 = (_append_uint32($1026,$1027)|0);
            $1029 = $52;
            $1030 = $1028;
            $1031 = $1029;
            $1032 = (($1030) - ($1031))|0;
            $1033 = $14;
            $1034 = ((($1033)) + 84|0);
            $1035 = HEAP32[$1034>>2]|0;
            $1036 = ((($1035)) + 40|0);
            $1037 = HEAP32[$1036>>2]|0;
            $1038 = (($1037) + ($1032))|0;
            HEAP32[$1036>>2] = $1038;
           }
           $1039 = $29;
           $1040 = HEAP32[$31>>2]|0;
           $1041 = (($1039) + ($1040))|0;
           $1042 = $16;
           $1043 = ((($1042)) + 4|0);
           $1044 = HEAP32[$1043>>2]|0;
           $1045 = $17;
           $1046 = ((($1045)) + 32|0);
           $1047 = HEAP32[$1046>>2]|0;
           $1048 = (($1047) + ($1044<<4)|0);
           $1049 = ((($1048)) + 4|0);
           $1050 = HEAP32[$1049>>2]|0;
           $1051 = ($1041>>>0)<=($1050>>>0);
           if ($1051) {
            $1052 = $39;
            $1053 = ($1052|0)!=(0);
            if ($1053) {
             while(1) {
              $1054 = $14;
              $1055 = ((($1054)) + 84|0);
              $1056 = HEAP32[$1055>>2]|0;
              $1057 = ((($1056)) + 36|0);
              $1058 = HEAP32[$1057>>2]|0;
              $1059 = $14;
              $1060 = ((($1059)) + 84|0);
              $1061 = HEAP32[$1060>>2]|0;
              $1062 = ((($1061)) + 40|0);
              $1063 = HEAP32[$1062>>2]|0;
              $1064 = (($1063) + 1)|0;
              $1065 = ($1058>>>0)<=($1064>>>0);
              $1066 = $14;
              $1067 = ((($1066)) + 84|0);
              $1068 = HEAP32[$1067>>2]|0;
              if (!($1065)) {
               break;
              }
              $1069 = ((($1068)) + 36|0);
              $1070 = HEAP32[$1069>>2]|0;
              $1071 = ($1070|0)!=(0);
              if ($1071) {
               $1072 = $14;
               $1073 = ((($1072)) + 84|0);
               $1074 = HEAP32[$1073>>2]|0;
               $1075 = ((($1074)) + 36|0);
               $1076 = HEAP32[$1075>>2]|0;
               $1077 = (+($1076>>>0));
               $1078 = $1077 * 1.5;
               $1080 = $1078;
              } else {
               $1080 = 1024.0;
              }
              $1079 = (~~(($1080))>>>0);
              $1081 = $14;
              $1082 = ((($1081)) + 84|0);
              $1083 = HEAP32[$1082>>2]|0;
              $1084 = ((($1083)) + 36|0);
              HEAP32[$1084>>2] = $1079;
              $1085 = $14;
              $1086 = ((($1085)) + 84|0);
              $1087 = HEAP32[$1086>>2]|0;
              $1088 = ((($1087)) + 32|0);
              $1089 = HEAP32[$1088>>2]|0;
              $1090 = $14;
              $1091 = ((($1090)) + 84|0);
              $1092 = HEAP32[$1091>>2]|0;
              $1093 = ((($1092)) + 36|0);
              $1094 = HEAP32[$1093>>2]|0;
              $1095 = (_realloc($1089,$1094)|0);
              $1096 = $14;
              $1097 = ((($1096)) + 84|0);
              $1098 = HEAP32[$1097>>2]|0;
              $1099 = ((($1098)) + 32|0);
              HEAP32[$1099>>2] = $1095;
             }
             $1100 = ((($1068)) + 40|0);
             $1101 = HEAP32[$1100>>2]|0;
             $1102 = (($1101) + 1)|0;
             HEAP32[$1100>>2] = $1102;
             $1103 = $14;
             $1104 = ((($1103)) + 84|0);
             $1105 = HEAP32[$1104>>2]|0;
             $1106 = ((($1105)) + 32|0);
             $1107 = HEAP32[$1106>>2]|0;
             $1108 = (($1107) + ($1101)|0);
             HEAP8[$1108>>0] = 94;
             while(1) {
              $1109 = $14;
              $1110 = ((($1109)) + 84|0);
              $1111 = HEAP32[$1110>>2]|0;
              $1112 = ((($1111)) + 36|0);
              $1113 = HEAP32[$1112>>2]|0;
              $1114 = $14;
              $1115 = ((($1114)) + 84|0);
              $1116 = HEAP32[$1115>>2]|0;
              $1117 = ((($1116)) + 40|0);
              $1118 = HEAP32[$1117>>2]|0;
              $1119 = HEAP32[$31>>2]|0;
              $1120 = (($1118) + ($1119))|0;
              $1121 = ($1113>>>0)<=($1120>>>0);
              $1122 = $14;
              $1123 = ((($1122)) + 84|0);
              $1124 = HEAP32[$1123>>2]|0;
              if (!($1121)) {
               break;
              }
              $1125 = ((($1124)) + 36|0);
              $1126 = HEAP32[$1125>>2]|0;
              $1127 = ($1126|0)!=(0);
              if ($1127) {
               $1128 = $14;
               $1129 = ((($1128)) + 84|0);
               $1130 = HEAP32[$1129>>2]|0;
               $1131 = ((($1130)) + 36|0);
               $1132 = HEAP32[$1131>>2]|0;
               $1133 = (+($1132>>>0));
               $1134 = $1133 * 1.5;
               $1136 = $1134;
              } else {
               $1136 = 1024.0;
              }
              $1135 = (~~(($1136))>>>0);
              $1137 = $14;
              $1138 = ((($1137)) + 84|0);
              $1139 = HEAP32[$1138>>2]|0;
              $1140 = ((($1139)) + 36|0);
              HEAP32[$1140>>2] = $1135;
              $1141 = $14;
              $1142 = ((($1141)) + 84|0);
              $1143 = HEAP32[$1142>>2]|0;
              $1144 = ((($1143)) + 32|0);
              $1145 = HEAP32[$1144>>2]|0;
              $1146 = $14;
              $1147 = ((($1146)) + 84|0);
              $1148 = HEAP32[$1147>>2]|0;
              $1149 = ((($1148)) + 36|0);
              $1150 = HEAP32[$1149>>2]|0;
              $1151 = (_realloc($1145,$1150)|0);
              $1152 = $14;
              $1153 = ((($1152)) + 84|0);
              $1154 = HEAP32[$1153>>2]|0;
              $1155 = ((($1154)) + 32|0);
              HEAP32[$1155>>2] = $1151;
             }
             $1156 = ((($1124)) + 40|0);
             $1157 = HEAP32[$1156>>2]|0;
             $1158 = $14;
             $1159 = ((($1158)) + 84|0);
             $1160 = HEAP32[$1159>>2]|0;
             $1161 = ((($1160)) + 32|0);
             $1162 = HEAP32[$1161>>2]|0;
             $1163 = (($1162) + ($1157)|0);
             $1164 = $29;
             $1165 = $14;
             $1166 = ((($1165)) + 136|0);
             $1167 = HEAP32[$1166>>2]|0;
             $1168 = (($1164) - ($1167))|0;
             $1169 = (($1168) + 1)|0;
             $1170 = $14;
             $1171 = ((($1170)) + 132|0);
             $1172 = HEAP32[$1171>>2]|0;
             $1173 = (($1172) + ($1169)|0);
             $1174 = HEAP32[$31>>2]|0;
             _memcpy(($1163|0),($1173|0),($1174|0))|0;
             $1175 = HEAP32[$31>>2]|0;
             $1176 = $14;
             $1177 = ((($1176)) + 84|0);
             $1178 = HEAP32[$1177>>2]|0;
             $1179 = ((($1178)) + 40|0);
             $1180 = HEAP32[$1179>>2]|0;
             $1181 = (($1180) + ($1175))|0;
             HEAP32[$1179>>2] = $1181;
             $37 = 0;
            }
            $1182 = HEAP32[$31>>2]|0;
            $1183 = $36;
            $1184 = (($1183) + ($1182))|0;
            $36 = $1184;
            break;
           }
           $1185 = $16;
           $1186 = ((($1185)) + 4|0);
           $1187 = HEAP32[$1186>>2]|0;
           $1188 = $17;
           $1189 = ((($1188)) + 32|0);
           $1190 = HEAP32[$1189>>2]|0;
           $1191 = (($1190) + ($1187<<4)|0);
           $1192 = ((($1191)) + 4|0);
           $1193 = HEAP32[$1192>>2]|0;
           $1194 = $29;
           $1195 = ($1193>>>0)>=($1194>>>0);
           if ($1195) {
            $1196 = $39;
            $1197 = ($1196|0)!=(0);
            if ($1197) {
             while(1) {
              $1198 = $14;
              $1199 = ((($1198)) + 84|0);
              $1200 = HEAP32[$1199>>2]|0;
              $1201 = ((($1200)) + 36|0);
              $1202 = HEAP32[$1201>>2]|0;
              $1203 = $14;
              $1204 = ((($1203)) + 84|0);
              $1205 = HEAP32[$1204>>2]|0;
              $1206 = ((($1205)) + 40|0);
              $1207 = HEAP32[$1206>>2]|0;
              $1208 = (($1207) + 1)|0;
              $1209 = ($1202>>>0)<=($1208>>>0);
              $1210 = $14;
              $1211 = ((($1210)) + 84|0);
              $1212 = HEAP32[$1211>>2]|0;
              if (!($1209)) {
               break;
              }
              $1213 = ((($1212)) + 36|0);
              $1214 = HEAP32[$1213>>2]|0;
              $1215 = ($1214|0)!=(0);
              if ($1215) {
               $1216 = $14;
               $1217 = ((($1216)) + 84|0);
               $1218 = HEAP32[$1217>>2]|0;
               $1219 = ((($1218)) + 36|0);
               $1220 = HEAP32[$1219>>2]|0;
               $1221 = (+($1220>>>0));
               $1222 = $1221 * 1.5;
               $1224 = $1222;
              } else {
               $1224 = 1024.0;
              }
              $1223 = (~~(($1224))>>>0);
              $1225 = $14;
              $1226 = ((($1225)) + 84|0);
              $1227 = HEAP32[$1226>>2]|0;
              $1228 = ((($1227)) + 36|0);
              HEAP32[$1228>>2] = $1223;
              $1229 = $14;
              $1230 = ((($1229)) + 84|0);
              $1231 = HEAP32[$1230>>2]|0;
              $1232 = ((($1231)) + 32|0);
              $1233 = HEAP32[$1232>>2]|0;
              $1234 = $14;
              $1235 = ((($1234)) + 84|0);
              $1236 = HEAP32[$1235>>2]|0;
              $1237 = ((($1236)) + 36|0);
              $1238 = HEAP32[$1237>>2]|0;
              $1239 = (_realloc($1233,$1238)|0);
              $1240 = $14;
              $1241 = ((($1240)) + 84|0);
              $1242 = HEAP32[$1241>>2]|0;
              $1243 = ((($1242)) + 32|0);
              HEAP32[$1243>>2] = $1239;
             }
             $1244 = ((($1212)) + 40|0);
             $1245 = HEAP32[$1244>>2]|0;
             $1246 = (($1245) + 1)|0;
             HEAP32[$1244>>2] = $1246;
             $1247 = $14;
             $1248 = ((($1247)) + 84|0);
             $1249 = HEAP32[$1248>>2]|0;
             $1250 = ((($1249)) + 32|0);
             $1251 = HEAP32[$1250>>2]|0;
             $1252 = (($1251) + ($1245)|0);
             HEAP8[$1252>>0] = 94;
             while(1) {
              $1253 = $14;
              $1254 = ((($1253)) + 84|0);
              $1255 = HEAP32[$1254>>2]|0;
              $1256 = ((($1255)) + 36|0);
              $1257 = HEAP32[$1256>>2]|0;
              $1258 = $14;
              $1259 = ((($1258)) + 84|0);
              $1260 = HEAP32[$1259>>2]|0;
              $1261 = ((($1260)) + 40|0);
              $1262 = HEAP32[$1261>>2]|0;
              $1263 = $16;
              $1264 = ((($1263)) + 4|0);
              $1265 = HEAP32[$1264>>2]|0;
              $1266 = $17;
              $1267 = ((($1266)) + 32|0);
              $1268 = HEAP32[$1267>>2]|0;
              $1269 = (($1268) + ($1265<<4)|0);
              $1270 = ((($1269)) + 4|0);
              $1271 = HEAP32[$1270>>2]|0;
              $1272 = $29;
              $1273 = (($1271) - ($1272))|0;
              $1274 = (($1262) + ($1273))|0;
              $1275 = ($1257>>>0)<=($1274>>>0);
              $1276 = $14;
              $1277 = ((($1276)) + 84|0);
              $1278 = HEAP32[$1277>>2]|0;
              if (!($1275)) {
               break;
              }
              $1279 = ((($1278)) + 36|0);
              $1280 = HEAP32[$1279>>2]|0;
              $1281 = ($1280|0)!=(0);
              if ($1281) {
               $1282 = $14;
               $1283 = ((($1282)) + 84|0);
               $1284 = HEAP32[$1283>>2]|0;
               $1285 = ((($1284)) + 36|0);
               $1286 = HEAP32[$1285>>2]|0;
               $1287 = (+($1286>>>0));
               $1288 = $1287 * 1.5;
               $1290 = $1288;
              } else {
               $1290 = 1024.0;
              }
              $1289 = (~~(($1290))>>>0);
              $1291 = $14;
              $1292 = ((($1291)) + 84|0);
              $1293 = HEAP32[$1292>>2]|0;
              $1294 = ((($1293)) + 36|0);
              HEAP32[$1294>>2] = $1289;
              $1295 = $14;
              $1296 = ((($1295)) + 84|0);
              $1297 = HEAP32[$1296>>2]|0;
              $1298 = ((($1297)) + 32|0);
              $1299 = HEAP32[$1298>>2]|0;
              $1300 = $14;
              $1301 = ((($1300)) + 84|0);
              $1302 = HEAP32[$1301>>2]|0;
              $1303 = ((($1302)) + 36|0);
              $1304 = HEAP32[$1303>>2]|0;
              $1305 = (_realloc($1299,$1304)|0);
              $1306 = $14;
              $1307 = ((($1306)) + 84|0);
              $1308 = HEAP32[$1307>>2]|0;
              $1309 = ((($1308)) + 32|0);
              HEAP32[$1309>>2] = $1305;
             }
             $1310 = ((($1278)) + 40|0);
             $1311 = HEAP32[$1310>>2]|0;
             $1312 = $14;
             $1313 = ((($1312)) + 84|0);
             $1314 = HEAP32[$1313>>2]|0;
             $1315 = ((($1314)) + 32|0);
             $1316 = HEAP32[$1315>>2]|0;
             $1317 = (($1316) + ($1311)|0);
             $1318 = $29;
             $1319 = $14;
             $1320 = ((($1319)) + 136|0);
             $1321 = HEAP32[$1320>>2]|0;
             $1322 = (($1318) - ($1321))|0;
             $1323 = (($1322) + 1)|0;
             $1324 = $14;
             $1325 = ((($1324)) + 132|0);
             $1326 = HEAP32[$1325>>2]|0;
             $1327 = (($1326) + ($1323)|0);
             $1328 = $16;
             $1329 = ((($1328)) + 4|0);
             $1330 = HEAP32[$1329>>2]|0;
             $1331 = $17;
             $1332 = ((($1331)) + 32|0);
             $1333 = HEAP32[$1332>>2]|0;
             $1334 = (($1333) + ($1330<<4)|0);
             $1335 = ((($1334)) + 4|0);
             $1336 = HEAP32[$1335>>2]|0;
             $1337 = $29;
             $1338 = (($1336) - ($1337))|0;
             _memcpy(($1317|0),($1327|0),($1338|0))|0;
             $1339 = $16;
             $1340 = ((($1339)) + 4|0);
             $1341 = HEAP32[$1340>>2]|0;
             $1342 = $17;
             $1343 = ((($1342)) + 32|0);
             $1344 = HEAP32[$1343>>2]|0;
             $1345 = (($1344) + ($1341<<4)|0);
             $1346 = ((($1345)) + 4|0);
             $1347 = HEAP32[$1346>>2]|0;
             $1348 = $29;
             $1349 = (($1347) - ($1348))|0;
             $1350 = $14;
             $1351 = ((($1350)) + 84|0);
             $1352 = HEAP32[$1351>>2]|0;
             $1353 = ((($1352)) + 40|0);
             $1354 = HEAP32[$1353>>2]|0;
             $1355 = (($1354) + ($1349))|0;
             HEAP32[$1353>>2] = $1355;
             while(1) {
              $1356 = $14;
              $1357 = ((($1356)) + 84|0);
              $1358 = HEAP32[$1357>>2]|0;
              $1359 = ((($1358)) + 36|0);
              $1360 = HEAP32[$1359>>2]|0;
              $1361 = $14;
              $1362 = ((($1361)) + 84|0);
              $1363 = HEAP32[$1362>>2]|0;
              $1364 = ((($1363)) + 40|0);
              $1365 = HEAP32[$1364>>2]|0;
              $1366 = (($1365) + 11)|0;
              $1367 = ($1360>>>0)<=($1366>>>0);
              $1368 = $14;
              $1369 = ((($1368)) + 84|0);
              $1370 = HEAP32[$1369>>2]|0;
              if (!($1367)) {
               break;
              }
              $1371 = ((($1370)) + 36|0);
              $1372 = HEAP32[$1371>>2]|0;
              $1373 = ($1372|0)!=(0);
              if ($1373) {
               $1374 = $14;
               $1375 = ((($1374)) + 84|0);
               $1376 = HEAP32[$1375>>2]|0;
               $1377 = ((($1376)) + 36|0);
               $1378 = HEAP32[$1377>>2]|0;
               $1379 = (+($1378>>>0));
               $1380 = $1379 * 1.5;
               $1382 = $1380;
              } else {
               $1382 = 1024.0;
              }
              $1381 = (~~(($1382))>>>0);
              $1383 = $14;
              $1384 = ((($1383)) + 84|0);
              $1385 = HEAP32[$1384>>2]|0;
              $1386 = ((($1385)) + 36|0);
              HEAP32[$1386>>2] = $1381;
              $1387 = $14;
              $1388 = ((($1387)) + 84|0);
              $1389 = HEAP32[$1388>>2]|0;
              $1390 = ((($1389)) + 32|0);
              $1391 = HEAP32[$1390>>2]|0;
              $1392 = $14;
              $1393 = ((($1392)) + 84|0);
              $1394 = HEAP32[$1393>>2]|0;
              $1395 = ((($1394)) + 36|0);
              $1396 = HEAP32[$1395>>2]|0;
              $1397 = (_realloc($1391,$1396)|0);
              $1398 = $14;
              $1399 = ((($1398)) + 84|0);
              $1400 = HEAP32[$1399>>2]|0;
              $1401 = ((($1400)) + 32|0);
              HEAP32[$1401>>2] = $1397;
             }
             $1402 = ((($1370)) + 40|0);
             $1403 = HEAP32[$1402>>2]|0;
             $1404 = $14;
             $1405 = ((($1404)) + 84|0);
             $1406 = HEAP32[$1405>>2]|0;
             $1407 = ((($1406)) + 32|0);
             $1408 = HEAP32[$1407>>2]|0;
             $1409 = (($1408) + ($1403)|0);
             $54 = $1409;
             $1410 = $54;
             $1411 = (_append_uint32($1410,0)|0);
             $1412 = $54;
             $1413 = $1411;
             $1414 = $1412;
             $1415 = (($1413) - ($1414))|0;
             $1416 = $14;
             $1417 = ((($1416)) + 84|0);
             $1418 = HEAP32[$1417>>2]|0;
             $1419 = ((($1418)) + 40|0);
             $1420 = HEAP32[$1419>>2]|0;
             $1421 = (($1420) + ($1415))|0;
             HEAP32[$1419>>2] = $1421;
            }
            $1422 = HEAP32[$31>>2]|0;
            $1423 = $16;
            $1424 = ((($1423)) + 4|0);
            $1425 = HEAP32[$1424>>2]|0;
            $1426 = $17;
            $1427 = ((($1426)) + 32|0);
            $1428 = HEAP32[$1427>>2]|0;
            $1429 = (($1428) + ($1425<<4)|0);
            $1430 = ((($1429)) + 4|0);
            $1431 = HEAP32[$1430>>2]|0;
            $1432 = $29;
            $1433 = (($1431) - ($1432))|0;
            $1434 = (($1422) - ($1433))|0;
            $53 = $1434;
            $1435 = HEAP32[$31>>2]|0;
            $1436 = $53;
            $1437 = (($1435) - ($1436))|0;
            $1438 = $36;
            $1439 = (($1438) + ($1437))|0;
            $36 = $1439;
           } else {
            $1440 = HEAP32[$31>>2]|0;
            $53 = $1440;
           }
           $37 = -1;
          }
         } while(0);
         $32 = 2;
         $1441 = HEAP32[$31>>2]|0;
         $1442 = $28;
         $1443 = (($1442) + ($1441))|0;
         $28 = $1443;
         $1444 = HEAP32[$31>>2]|0;
         $1445 = $29;
         $1446 = (($1445) + ($1444))|0;
         $29 = $1446;
         break L48;
         break;
        }
        case 73:  {
         HEAP32[$55>>2] = 1;
         $1447 = $28;
         $1448 = ($1447|0)!=(0);
         $1449 = $32;
         $1450 = ($1449|0)!=(1);
         $or$cond15 = $1448 & $1450;
         if ($or$cond15) {
          $1451 = $28;
          $1452 = $1451 << 4;
          $1453 = $32;
          $1454 = (($1452) + ($1453))|0;
          $1455 = $34;
          $1456 = (($1455) + 1)|0;
          $34 = $1456;
          $1457 = $33;
          $1458 = (($1457) + ($1455<<2)|0);
          HEAP32[$1458>>2] = $1454;
          $28 = 0;
         }
         $1459 = $41;
         $1460 = $1459 & 2048;
         $1461 = ($1460|0)!=(0);
         if (!($1461)) {
          break L48;
         }
         $1462 = $13;
         $1463 = ((($1462)) + 52|0);
         $1464 = HEAP32[$1463>>2]|0;
         $1465 = ((($1464)) + 348|0);
         $1466 = ((($1465)) + 52|0);
         $1467 = HEAP32[$1466>>2]|0;
         $1468 = ($1467|0)!=(0|0);
         if (!($1468)) {
          label = 172;
          break L38;
         }
         $1469 = $13;
         $1470 = ((($1469)) + 52|0);
         $1471 = HEAP32[$1470>>2]|0;
         $1472 = ((($1471)) + 348|0);
         $1473 = ((($1472)) + 52|0);
         $1474 = HEAP32[$1473>>2]|0;
         $1475 = ((($1474)) + 12|0);
         $1476 = HEAP32[$1475>>2]|0;
         $1477 = $14;
         $1478 = $13;
         $1479 = ((($1478)) + 52|0);
         $1480 = HEAP32[$1479>>2]|0;
         $1481 = ((($1480)) + 348|0);
         $1482 = ((($1481)) + 52|0);
         $1483 = HEAP32[$1482>>2]|0;
         $1484 = $15;
         $1485 = $16;
         $1486 = ((($1485)) + 16|0);
         $1487 = HEAP32[$1486>>2]|0;
         $1488 = ($1487|0)!=(0);
         if ($1488) {
          $1489 = HEAP32[$42>>2]|0;
          $1490 = (($1489) - 1)|0;
          $1491 = $19;
          $1492 = (($1491) + ($1490)|0);
          $1493 = $1492;
         } else {
          $1493 = 0;
         }
         $1494 = (FUNCTION_TABLE_iiiiii[$1476 & 63]($1477,$1483,$1484,$1493,$55)|0);
         $1495 = $25;
         $1496 = $1495 | $1494;
         $25 = $1496;
         $1497 = $25;
         $1498 = ($1497|0)!=(0);
         if ($1498) {
          label = 176;
          break L38;
         }
         $32 = 1;
         $1500 = HEAP32[$55>>2]|0;
         $1501 = $28;
         $1502 = (($1501) + ($1500))|0;
         $28 = $1502;
         $1503 = HEAP32[$55>>2]|0;
         $1504 = $27;
         $1505 = (($1504) + ($1503))|0;
         $27 = $1505;
         $1506 = HEAP32[$55>>2]|0;
         $1507 = $36;
         $1508 = (($1507) + ($1506))|0;
         $36 = $1508;
         break L48;
         break;
        }
        case 105:  {
         $1509 = $28;
         $1510 = ($1509|0)!=(0);
         $1511 = $32;
         $1512 = ($1511|0)!=(1);
         $or$cond17 = $1510 & $1512;
         if ($or$cond17) {
          $1513 = $28;
          $1514 = $1513 << 4;
          $1515 = $32;
          $1516 = (($1514) + ($1515))|0;
          $1517 = $34;
          $1518 = (($1517) + 1)|0;
          $34 = $1518;
          $1519 = $33;
          $1520 = (($1519) + ($1517<<2)|0);
          HEAP32[$1520>>2] = $1516;
          $28 = 0;
         }
         $1521 = $41;
         $1522 = $1521 & 64;
         $1523 = ($1522|0)!=(0);
         if ($1523) {
          $1524 = $13;
          $1525 = ((($1524)) + 52|0);
          $1526 = HEAP32[$1525>>2]|0;
          $1527 = ((($1526)) + 348|0);
          $1528 = ((($1527)) + 120|0);
          $1529 = HEAP32[$1528>>2]|0;
          $1530 = ($1529|0)!=(0|0);
          if (!($1530)) {
           label = 182;
           break L38;
          }
          $1531 = $13;
          $1532 = ((($1531)) + 52|0);
          $1533 = HEAP32[$1532>>2]|0;
          $1534 = ((($1533)) + 348|0);
          $1535 = ((($1534)) + 120|0);
          $1536 = HEAP32[$1535>>2]|0;
          $1537 = ((($1536)) + 12|0);
          $1538 = HEAP32[$1537>>2]|0;
          $1539 = $14;
          $1540 = $13;
          $1541 = ((($1540)) + 52|0);
          $1542 = HEAP32[$1541>>2]|0;
          $1543 = ((($1542)) + 348|0);
          $1544 = ((($1543)) + 120|0);
          $1545 = HEAP32[$1544>>2]|0;
          $1546 = $15;
          $1547 = $16;
          $1548 = ((($1547)) + 16|0);
          $1549 = HEAP32[$1548>>2]|0;
          $1550 = ($1549|0)!=(0);
          if ($1550) {
           $1551 = HEAP32[$42>>2]|0;
           $1552 = (($1551) - 1)|0;
           $1553 = $19;
           $1554 = (($1553) + ($1552)|0);
           $1555 = $1554;
          } else {
           $1555 = 0;
          }
          $1556 = (FUNCTION_TABLE_iiiiii[$1538 & 63]($1539,$1545,$1546,$1555,$26)|0);
          $1557 = $25;
          $1558 = $1557 | $1556;
          $25 = $1558;
          $1559 = $25;
          $1560 = ($1559|0)!=(0);
          if ($1560) {
           label = 186;
           break L38;
          }
         }
         $32 = 1;
         $1562 = $28;
         $1563 = (($1562) + 1)|0;
         $28 = $1563;
         $1564 = $27;
         $1565 = (($1564) + 1)|0;
         $27 = $1565;
         $1566 = $36;
         $1567 = (($1566) + 1)|0;
         $36 = $1567;
         break L48;
         break;
        }
        case 98:  {
         HEAP32[$56>>2] = 1;
         $1568 = $28;
         $1569 = ($1568|0)!=(0);
         $1570 = $32;
         $1571 = ($1570|0)!=(0);
         $or$cond19 = $1569 & $1571;
         if ($or$cond19) {
          $1572 = $28;
          $1573 = $1572 << 4;
          $1574 = $32;
          $1575 = (($1573) + ($1574))|0;
          $1576 = $34;
          $1577 = (($1576) + 1)|0;
          $34 = $1577;
          $1578 = $33;
          $1579 = (($1578) + ($1576<<2)|0);
          HEAP32[$1579>>2] = $1575;
          $28 = 0;
         }
         $1580 = $41;
         $1581 = $1580 & 67108864;
         $1582 = ($1581|0)!=(0);
         do {
          if ($1582) {
           $1583 = $13;
           $1584 = ((($1583)) + 52|0);
           $1585 = HEAP32[$1584>>2]|0;
           $1586 = ((($1585)) + 348|0);
           $1587 = ((($1586)) + 148|0);
           $1588 = HEAP32[$1587>>2]|0;
           $1589 = ($1588|0)!=(0|0);
           if (!($1589)) {
            label = 192;
            break L38;
           }
           $1590 = $13;
           $1591 = ((($1590)) + 52|0);
           $1592 = HEAP32[$1591>>2]|0;
           $1593 = ((($1592)) + 348|0);
           $1594 = ((($1593)) + 148|0);
           $1595 = HEAP32[$1594>>2]|0;
           $1596 = ((($1595)) + 12|0);
           $1597 = HEAP32[$1596>>2]|0;
           $1598 = $14;
           $1599 = $13;
           $1600 = ((($1599)) + 52|0);
           $1601 = HEAP32[$1600>>2]|0;
           $1602 = ((($1601)) + 348|0);
           $1603 = ((($1602)) + 148|0);
           $1604 = HEAP32[$1603>>2]|0;
           $1605 = $15;
           $1606 = $16;
           $1607 = ((($1606)) + 16|0);
           $1608 = HEAP32[$1607>>2]|0;
           $1609 = ($1608|0)!=(0);
           if ($1609) {
            $1610 = HEAP32[$42>>2]|0;
            $1611 = (($1610) - 1)|0;
            $1612 = $19;
            $1613 = (($1612) + ($1611)|0);
            $1614 = $1613;
           } else {
            $1614 = 0;
           }
           $1615 = (FUNCTION_TABLE_iiiiii[$1597 & 63]($1598,$1604,$1605,$1614,$56)|0);
           $1616 = $25;
           $1617 = $1616 | $1615;
           $25 = $1617;
           $1618 = $25;
           $1619 = ($1618|0)!=(0);
           if ($1619) {
            label = 196;
            break L38;
           }
           $1621 = $39;
           $1622 = ($1621|0)!=(0);
           $1623 = $40;
           $1624 = ($1623|0)!=(0);
           $or$cond21 = $1622 | $1624;
           if (!($or$cond21)) {
            break;
           }
           $1625 = $37;
           $1626 = ($1625|0)>=(0);
           $1627 = $39;
           $1628 = ($1627|0)!=(0);
           $or$cond23 = $1626 & $1628;
           if ($or$cond23) {
            while(1) {
             $1629 = $14;
             $1630 = ((($1629)) + 84|0);
             $1631 = HEAP32[$1630>>2]|0;
             $1632 = ((($1631)) + 36|0);
             $1633 = HEAP32[$1632>>2]|0;
             $1634 = $14;
             $1635 = ((($1634)) + 84|0);
             $1636 = HEAP32[$1635>>2]|0;
             $1637 = ((($1636)) + 40|0);
             $1638 = HEAP32[$1637>>2]|0;
             $1639 = (($1638) + 11)|0;
             $1640 = ($1633>>>0)<=($1639>>>0);
             $1641 = $14;
             $1642 = ((($1641)) + 84|0);
             $1643 = HEAP32[$1642>>2]|0;
             if (!($1640)) {
              break;
             }
             $1644 = ((($1643)) + 36|0);
             $1645 = HEAP32[$1644>>2]|0;
             $1646 = ($1645|0)!=(0);
             if ($1646) {
              $1647 = $14;
              $1648 = ((($1647)) + 84|0);
              $1649 = HEAP32[$1648>>2]|0;
              $1650 = ((($1649)) + 36|0);
              $1651 = HEAP32[$1650>>2]|0;
              $1652 = (+($1651>>>0));
              $1653 = $1652 * 1.5;
              $1655 = $1653;
             } else {
              $1655 = 1024.0;
             }
             $1654 = (~~(($1655))>>>0);
             $1656 = $14;
             $1657 = ((($1656)) + 84|0);
             $1658 = HEAP32[$1657>>2]|0;
             $1659 = ((($1658)) + 36|0);
             HEAP32[$1659>>2] = $1654;
             $1660 = $14;
             $1661 = ((($1660)) + 84|0);
             $1662 = HEAP32[$1661>>2]|0;
             $1663 = ((($1662)) + 32|0);
             $1664 = HEAP32[$1663>>2]|0;
             $1665 = $14;
             $1666 = ((($1665)) + 84|0);
             $1667 = HEAP32[$1666>>2]|0;
             $1668 = ((($1667)) + 36|0);
             $1669 = HEAP32[$1668>>2]|0;
             $1670 = (_realloc($1664,$1669)|0);
             $1671 = $14;
             $1672 = ((($1671)) + 84|0);
             $1673 = HEAP32[$1672>>2]|0;
             $1674 = ((($1673)) + 32|0);
             HEAP32[$1674>>2] = $1670;
            }
            $1675 = ((($1643)) + 40|0);
            $1676 = HEAP32[$1675>>2]|0;
            $1677 = $14;
            $1678 = ((($1677)) + 84|0);
            $1679 = HEAP32[$1678>>2]|0;
            $1680 = ((($1679)) + 32|0);
            $1681 = HEAP32[$1680>>2]|0;
            $1682 = (($1681) + ($1676)|0);
            $58 = $1682;
            $1683 = $58;
            $1684 = $37;
            $1685 = (_append_uint32($1683,$1684)|0);
            $1686 = $58;
            $1687 = $1685;
            $1688 = $1686;
            $1689 = (($1687) - ($1688))|0;
            $1690 = $14;
            $1691 = ((($1690)) + 84|0);
            $1692 = HEAP32[$1691>>2]|0;
            $1693 = ((($1692)) + 40|0);
            $1694 = HEAP32[$1693>>2]|0;
            $1695 = (($1694) + ($1689))|0;
            HEAP32[$1693>>2] = $1695;
           }
           $57 = 0;
           while(1) {
            $1696 = $57;
            $1697 = HEAP32[$56>>2]|0;
            $1698 = ($1696|0)<($1697|0);
            if (!($1698)) {
             break;
            }
            $1699 = $57;
            $1700 = ($1699|0)!=(0);
            $1701 = $39;
            $1702 = ($1701|0)!=(0);
            $or$cond25 = $1700 & $1702;
            if ($or$cond25) {
             while(1) {
              $1703 = $14;
              $1704 = ((($1703)) + 84|0);
              $1705 = HEAP32[$1704>>2]|0;
              $1706 = ((($1705)) + 36|0);
              $1707 = HEAP32[$1706>>2]|0;
              $1708 = $14;
              $1709 = ((($1708)) + 84|0);
              $1710 = HEAP32[$1709>>2]|0;
              $1711 = ((($1710)) + 40|0);
              $1712 = HEAP32[$1711>>2]|0;
              $1713 = (($1712) + 11)|0;
              $1714 = ($1707>>>0)<=($1713>>>0);
              $1715 = $14;
              $1716 = ((($1715)) + 84|0);
              $1717 = HEAP32[$1716>>2]|0;
              if (!($1714)) {
               break;
              }
              $1718 = ((($1717)) + 36|0);
              $1719 = HEAP32[$1718>>2]|0;
              $1720 = ($1719|0)!=(0);
              if ($1720) {
               $1721 = $14;
               $1722 = ((($1721)) + 84|0);
               $1723 = HEAP32[$1722>>2]|0;
               $1724 = ((($1723)) + 36|0);
               $1725 = HEAP32[$1724>>2]|0;
               $1726 = (+($1725>>>0));
               $1727 = $1726 * 1.5;
               $1729 = $1727;
              } else {
               $1729 = 1024.0;
              }
              $1728 = (~~(($1729))>>>0);
              $1730 = $14;
              $1731 = ((($1730)) + 84|0);
              $1732 = HEAP32[$1731>>2]|0;
              $1733 = ((($1732)) + 36|0);
              HEAP32[$1733>>2] = $1728;
              $1734 = $14;
              $1735 = ((($1734)) + 84|0);
              $1736 = HEAP32[$1735>>2]|0;
              $1737 = ((($1736)) + 32|0);
              $1738 = HEAP32[$1737>>2]|0;
              $1739 = $14;
              $1740 = ((($1739)) + 84|0);
              $1741 = HEAP32[$1740>>2]|0;
              $1742 = ((($1741)) + 36|0);
              $1743 = HEAP32[$1742>>2]|0;
              $1744 = (_realloc($1738,$1743)|0);
              $1745 = $14;
              $1746 = ((($1745)) + 84|0);
              $1747 = HEAP32[$1746>>2]|0;
              $1748 = ((($1747)) + 32|0);
              HEAP32[$1748>>2] = $1744;
             }
             $1749 = ((($1717)) + 40|0);
             $1750 = HEAP32[$1749>>2]|0;
             $1751 = $14;
             $1752 = ((($1751)) + 84|0);
             $1753 = HEAP32[$1752>>2]|0;
             $1754 = ((($1753)) + 32|0);
             $1755 = HEAP32[$1754>>2]|0;
             $1756 = (($1755) + ($1750)|0);
             $59 = $1756;
             $1757 = $59;
             $1758 = (_append_uint32($1757,0)|0);
             $1759 = $59;
             $1760 = $1758;
             $1761 = $1759;
             $1762 = (($1760) - ($1761))|0;
             $1763 = $14;
             $1764 = ((($1763)) + 84|0);
             $1765 = HEAP32[$1764>>2]|0;
             $1766 = ((($1765)) + 40|0);
             $1767 = HEAP32[$1766>>2]|0;
             $1768 = (($1767) + ($1762))|0;
             HEAP32[$1766>>2] = $1768;
            }
            $1769 = $29;
            $1770 = $57;
            $1771 = (($1769) + ($1770))|0;
            $1772 = $16;
            $1773 = ((($1772)) + 4|0);
            $1774 = HEAP32[$1773>>2]|0;
            $1775 = $17;
            $1776 = ((($1775)) + 32|0);
            $1777 = HEAP32[$1776>>2]|0;
            $1778 = (($1777) + ($1774<<4)|0);
            $1779 = ((($1778)) + 4|0);
            $1780 = HEAP32[$1779>>2]|0;
            $1781 = ($1771>>>0)>=($1780>>>0);
            if ($1781) {
             label = 214;
             break;
            }
            $1782 = $14;
            $1783 = ((($1782)) + 132|0);
            $1784 = HEAP32[$1783>>2]|0;
            $1785 = ($1784|0)!=(0|0);
            if (!($1785)) {
             label = 214;
             break;
            }
            $1786 = $39;
            $1787 = ($1786|0)!=(0);
            if ($1787) {
             $1788 = $29;
             $1789 = $57;
             $1790 = (($1788) + ($1789))|0;
             $1791 = $14;
             $1792 = ((($1791)) + 136|0);
             $1793 = HEAP32[$1792>>2]|0;
             $1794 = (($1790) - ($1793))|0;
             $1795 = (($1794) + 1)|0;
             $1796 = $14;
             $1797 = ((($1796)) + 132|0);
             $1798 = HEAP32[$1797>>2]|0;
             $1799 = (($1798) + ($1795)|0);
             $1800 = HEAP8[$1799>>0]|0;
             $60 = $1800;
             while(1) {
              $1801 = $14;
              $1802 = ((($1801)) + 84|0);
              $1803 = HEAP32[$1802>>2]|0;
              $1804 = ((($1803)) + 36|0);
              $1805 = HEAP32[$1804>>2]|0;
              $1806 = $14;
              $1807 = ((($1806)) + 84|0);
              $1808 = HEAP32[$1807>>2]|0;
              $1809 = ((($1808)) + 40|0);
              $1810 = HEAP32[$1809>>2]|0;
              $1811 = (($1810) + 1)|0;
              $1812 = ($1805>>>0)<=($1811>>>0);
              if (!($1812)) {
               break;
              }
              $1813 = $14;
              $1814 = ((($1813)) + 84|0);
              $1815 = HEAP32[$1814>>2]|0;
              $1816 = ((($1815)) + 36|0);
              $1817 = HEAP32[$1816>>2]|0;
              $1818 = ($1817|0)!=(0);
              if ($1818) {
               $1819 = $14;
               $1820 = ((($1819)) + 84|0);
               $1821 = HEAP32[$1820>>2]|0;
               $1822 = ((($1821)) + 36|0);
               $1823 = HEAP32[$1822>>2]|0;
               $1824 = (+($1823>>>0));
               $1825 = $1824 * 1.5;
               $1827 = $1825;
              } else {
               $1827 = 1024.0;
              }
              $1826 = (~~(($1827))>>>0);
              $1828 = $14;
              $1829 = ((($1828)) + 84|0);
              $1830 = HEAP32[$1829>>2]|0;
              $1831 = ((($1830)) + 36|0);
              HEAP32[$1831>>2] = $1826;
              $1832 = $14;
              $1833 = ((($1832)) + 84|0);
              $1834 = HEAP32[$1833>>2]|0;
              $1835 = ((($1834)) + 32|0);
              $1836 = HEAP32[$1835>>2]|0;
              $1837 = $14;
              $1838 = ((($1837)) + 84|0);
              $1839 = HEAP32[$1838>>2]|0;
              $1840 = ((($1839)) + 36|0);
              $1841 = HEAP32[$1840>>2]|0;
              $1842 = (_realloc($1836,$1841)|0);
              $1843 = $14;
              $1844 = ((($1843)) + 84|0);
              $1845 = HEAP32[$1844>>2]|0;
              $1846 = ((($1845)) + 32|0);
              HEAP32[$1846>>2] = $1842;
             }
             $1847 = $60;
             $1848 = $14;
             $1849 = ((($1848)) + 84|0);
             $1850 = HEAP32[$1849>>2]|0;
             $1851 = ((($1850)) + 40|0);
             $1852 = HEAP32[$1851>>2]|0;
             $1853 = (($1852) + 1)|0;
             HEAP32[$1851>>2] = $1853;
             $1854 = $14;
             $1855 = ((($1854)) + 84|0);
             $1856 = HEAP32[$1855>>2]|0;
             $1857 = ((($1856)) + 32|0);
             $1858 = HEAP32[$1857>>2]|0;
             $1859 = (($1858) + ($1852)|0);
             HEAP8[$1859>>0] = $1847;
            }
            $1860 = $57;
            $1861 = (($1860) + 1)|0;
            $57 = $1861;
           }
           if ((label|0) == 214) {
            label = 0;
            $37 = -1;
           }
           $1862 = $57;
           $1863 = $36;
           $1864 = (($1863) + ($1862))|0;
           $36 = $1864;
          }
         } while(0);
         $32 = 0;
         $1865 = HEAP32[$56>>2]|0;
         $1866 = $28;
         $1867 = (($1866) + ($1865))|0;
         $28 = $1867;
         $1868 = HEAP32[$56>>2]|0;
         $1869 = $27;
         $1870 = (($1869) + ($1868))|0;
         $27 = $1870;
         $1871 = HEAP32[$56>>2]|0;
         $1872 = $29;
         $1873 = (($1872) + ($1871))|0;
         $29 = $1873;
         break L48;
         break;
        }
        case 113:  {
         HEAP32[$61>>2] = 1;
         $1874 = $28;
         $1875 = ($1874|0)!=(0);
         $1876 = $32;
         $1877 = ($1876|0)!=(0);
         $or$cond27 = $1875 & $1877;
         if ($or$cond27) {
          $1878 = $28;
          $1879 = $1878 << 4;
          $1880 = $32;
          $1881 = (($1879) + ($1880))|0;
          $1882 = $34;
          $1883 = (($1882) + 1)|0;
          $34 = $1883;
          $1884 = $33;
          $1885 = (($1884) + ($1882<<2)|0);
          HEAP32[$1885>>2] = $1881;
          $28 = 0;
         }
         $1886 = $41;
         $1887 = $1886 & 268435456;
         $1888 = ($1887|0)!=(0);
         if ($1888) {
          $1889 = $13;
          $1890 = ((($1889)) + 52|0);
          $1891 = HEAP32[$1890>>2]|0;
          $1892 = ((($1891)) + 348|0);
          $1893 = ((($1892)) + 152|0);
          $1894 = HEAP32[$1893>>2]|0;
          $1895 = ($1894|0)!=(0|0);
          if (!($1895)) {
           label = 229;
           break L38;
          }
          $1896 = $13;
          $1897 = ((($1896)) + 52|0);
          $1898 = HEAP32[$1897>>2]|0;
          $1899 = ((($1898)) + 348|0);
          $1900 = ((($1899)) + 152|0);
          $1901 = HEAP32[$1900>>2]|0;
          $1902 = ((($1901)) + 12|0);
          $1903 = HEAP32[$1902>>2]|0;
          $1904 = $14;
          $1905 = $13;
          $1906 = ((($1905)) + 52|0);
          $1907 = HEAP32[$1906>>2]|0;
          $1908 = ((($1907)) + 348|0);
          $1909 = ((($1908)) + 152|0);
          $1910 = HEAP32[$1909>>2]|0;
          $1911 = $15;
          $1912 = HEAP32[$42>>2]|0;
          $1913 = (($1912) - 1)|0;
          $1914 = $20;
          $1915 = (($1914) + ($1913)|0);
          $1916 = (FUNCTION_TABLE_iiiiii[$1903 & 63]($1904,$1910,$1911,$1915,$61)|0);
          $1917 = $25;
          $1918 = $1917 | $1916;
          $25 = $1918;
          $1919 = $25;
          $1920 = ($1919|0)!=(0);
          if ($1920) {
           label = 231;
           break L38;
          }
         }
         $32 = 0;
         $1922 = HEAP32[$61>>2]|0;
         $1923 = $28;
         $1924 = (($1923) + ($1922))|0;
         $28 = $1924;
         $1925 = HEAP32[$61>>2]|0;
         $1926 = $27;
         $1927 = (($1926) + ($1925))|0;
         $27 = $1927;
         $1928 = HEAP32[$61>>2]|0;
         $1929 = $29;
         $1930 = (($1929) + ($1928))|0;
         $29 = $1930;
         break L48;
         break;
        }
        case 66:  {
         $1931 = $28;
         $1932 = ($1931|0)!=(0);
         $1933 = $32;
         $1934 = ($1933|0)!=(0);
         $or$cond29 = $1932 & $1934;
         if ($or$cond29) {
          $1935 = $28;
          $1936 = $1935 << 4;
          $1937 = $32;
          $1938 = (($1936) + ($1937))|0;
          $1939 = $34;
          $1940 = (($1939) + 1)|0;
          $34 = $1940;
          $1941 = $33;
          $1942 = (($1941) + ($1939<<2)|0);
          HEAP32[$1942>>2] = $1938;
          $28 = 0;
         }
         $1943 = $41;
         $1944 = $1943 & 64;
         $1945 = ($1944|0)!=(0);
         L299: do {
          if ($1945) {
           $1946 = $13;
           $1947 = ((($1946)) + 52|0);
           $1948 = HEAP32[$1947>>2]|0;
           $1949 = ((($1948)) + 348|0);
           $1950 = ((($1949)) + 120|0);
           $1951 = HEAP32[$1950>>2]|0;
           $1952 = ($1951|0)!=(0|0);
           if (!($1952)) {
            label = 237;
            break L38;
           }
           $1953 = $13;
           $1954 = ((($1953)) + 52|0);
           $1955 = HEAP32[$1954>>2]|0;
           $1956 = ((($1955)) + 348|0);
           $1957 = ((($1956)) + 120|0);
           $1958 = HEAP32[$1957>>2]|0;
           $1959 = ((($1958)) + 12|0);
           $1960 = HEAP32[$1959>>2]|0;
           $1961 = $14;
           $1962 = $13;
           $1963 = ((($1962)) + 52|0);
           $1964 = HEAP32[$1963>>2]|0;
           $1965 = ((($1964)) + 348|0);
           $1966 = ((($1965)) + 120|0);
           $1967 = HEAP32[$1966>>2]|0;
           $1968 = $15;
           $1969 = $16;
           $1970 = ((($1969)) + 16|0);
           $1971 = HEAP32[$1970>>2]|0;
           $1972 = ($1971|0)!=(0);
           if ($1972) {
            $1973 = HEAP32[$42>>2]|0;
            $1974 = (($1973) - 1)|0;
            $1975 = $19;
            $1976 = (($1975) + ($1974)|0);
            $1977 = $1976;
           } else {
            $1977 = 0;
           }
           $1978 = (FUNCTION_TABLE_iiiiii[$1960 & 63]($1961,$1967,$1968,$1977,$26)|0);
           $1979 = $25;
           $1980 = $1979 | $1978;
           $25 = $1980;
           $1981 = $39;
           $1982 = ($1981|0)!=(0);
           $1983 = $40;
           $1984 = ($1983|0)!=(0);
           $or$cond31 = $1982 | $1984;
           if (!($or$cond31)) {
            break;
           }
           $1985 = $37;
           $1986 = ($1985|0)>=(0);
           $1987 = $39;
           $1988 = ($1987|0)!=(0);
           $or$cond33 = $1986 & $1988;
           if ($or$cond33) {
            while(1) {
             $1989 = $14;
             $1990 = ((($1989)) + 84|0);
             $1991 = HEAP32[$1990>>2]|0;
             $1992 = ((($1991)) + 36|0);
             $1993 = HEAP32[$1992>>2]|0;
             $1994 = $14;
             $1995 = ((($1994)) + 84|0);
             $1996 = HEAP32[$1995>>2]|0;
             $1997 = ((($1996)) + 40|0);
             $1998 = HEAP32[$1997>>2]|0;
             $1999 = (($1998) + 11)|0;
             $2000 = ($1993>>>0)<=($1999>>>0);
             $2001 = $14;
             $2002 = ((($2001)) + 84|0);
             $2003 = HEAP32[$2002>>2]|0;
             if (!($2000)) {
              break;
             }
             $2004 = ((($2003)) + 36|0);
             $2005 = HEAP32[$2004>>2]|0;
             $2006 = ($2005|0)!=(0);
             if ($2006) {
              $2007 = $14;
              $2008 = ((($2007)) + 84|0);
              $2009 = HEAP32[$2008>>2]|0;
              $2010 = ((($2009)) + 36|0);
              $2011 = HEAP32[$2010>>2]|0;
              $2012 = (+($2011>>>0));
              $2013 = $2012 * 1.5;
              $2015 = $2013;
             } else {
              $2015 = 1024.0;
             }
             $2014 = (~~(($2015))>>>0);
             $2016 = $14;
             $2017 = ((($2016)) + 84|0);
             $2018 = HEAP32[$2017>>2]|0;
             $2019 = ((($2018)) + 36|0);
             HEAP32[$2019>>2] = $2014;
             $2020 = $14;
             $2021 = ((($2020)) + 84|0);
             $2022 = HEAP32[$2021>>2]|0;
             $2023 = ((($2022)) + 32|0);
             $2024 = HEAP32[$2023>>2]|0;
             $2025 = $14;
             $2026 = ((($2025)) + 84|0);
             $2027 = HEAP32[$2026>>2]|0;
             $2028 = ((($2027)) + 36|0);
             $2029 = HEAP32[$2028>>2]|0;
             $2030 = (_realloc($2024,$2029)|0);
             $2031 = $14;
             $2032 = ((($2031)) + 84|0);
             $2033 = HEAP32[$2032>>2]|0;
             $2034 = ((($2033)) + 32|0);
             HEAP32[$2034>>2] = $2030;
            }
            $2035 = ((($2003)) + 40|0);
            $2036 = HEAP32[$2035>>2]|0;
            $2037 = $14;
            $2038 = ((($2037)) + 84|0);
            $2039 = HEAP32[$2038>>2]|0;
            $2040 = ((($2039)) + 32|0);
            $2041 = HEAP32[$2040>>2]|0;
            $2042 = (($2041) + ($2036)|0);
            $62 = $2042;
            $2043 = $62;
            $2044 = $37;
            $2045 = (_append_uint32($2043,$2044)|0);
            $2046 = $62;
            $2047 = $2045;
            $2048 = $2046;
            $2049 = (($2047) - ($2048))|0;
            $2050 = $14;
            $2051 = ((($2050)) + 84|0);
            $2052 = HEAP32[$2051>>2]|0;
            $2053 = ((($2052)) + 40|0);
            $2054 = HEAP32[$2053>>2]|0;
            $2055 = (($2054) + ($2049))|0;
            HEAP32[$2053>>2] = $2055;
           }
           $2056 = $29;
           $2057 = $16;
           $2058 = ((($2057)) + 4|0);
           $2059 = HEAP32[$2058>>2]|0;
           $2060 = $17;
           $2061 = ((($2060)) + 32|0);
           $2062 = HEAP32[$2061>>2]|0;
           $2063 = (($2062) + ($2059<<4)|0);
           $2064 = ((($2063)) + 4|0);
           $2065 = HEAP32[$2064>>2]|0;
           $2066 = ($2056>>>0)>=($2065>>>0);
           do {
            if (!($2066)) {
             $2067 = $14;
             $2068 = ((($2067)) + 132|0);
             $2069 = HEAP32[$2068>>2]|0;
             $2070 = ($2069|0)!=(0|0);
             if (!($2070)) {
              break;
             }
             $2071 = $39;
             $2072 = ($2071|0)!=(0);
             if ($2072) {
              while(1) {
               $2073 = $14;
               $2074 = ((($2073)) + 84|0);
               $2075 = HEAP32[$2074>>2]|0;
               $2076 = ((($2075)) + 36|0);
               $2077 = HEAP32[$2076>>2]|0;
               $2078 = $14;
               $2079 = ((($2078)) + 84|0);
               $2080 = HEAP32[$2079>>2]|0;
               $2081 = ((($2080)) + 40|0);
               $2082 = HEAP32[$2081>>2]|0;
               $2083 = (($2082) + 1)|0;
               $2084 = ($2077>>>0)<=($2083>>>0);
               if (!($2084)) {
                break;
               }
               $2085 = $14;
               $2086 = ((($2085)) + 84|0);
               $2087 = HEAP32[$2086>>2]|0;
               $2088 = ((($2087)) + 36|0);
               $2089 = HEAP32[$2088>>2]|0;
               $2090 = ($2089|0)!=(0);
               if ($2090) {
                $2091 = $14;
                $2092 = ((($2091)) + 84|0);
                $2093 = HEAP32[$2092>>2]|0;
                $2094 = ((($2093)) + 36|0);
                $2095 = HEAP32[$2094>>2]|0;
                $2096 = (+($2095>>>0));
                $2097 = $2096 * 1.5;
                $2099 = $2097;
               } else {
                $2099 = 1024.0;
               }
               $2098 = (~~(($2099))>>>0);
               $2100 = $14;
               $2101 = ((($2100)) + 84|0);
               $2102 = HEAP32[$2101>>2]|0;
               $2103 = ((($2102)) + 36|0);
               HEAP32[$2103>>2] = $2098;
               $2104 = $14;
               $2105 = ((($2104)) + 84|0);
               $2106 = HEAP32[$2105>>2]|0;
               $2107 = ((($2106)) + 32|0);
               $2108 = HEAP32[$2107>>2]|0;
               $2109 = $14;
               $2110 = ((($2109)) + 84|0);
               $2111 = HEAP32[$2110>>2]|0;
               $2112 = ((($2111)) + 36|0);
               $2113 = HEAP32[$2112>>2]|0;
               $2114 = (_realloc($2108,$2113)|0);
               $2115 = $14;
               $2116 = ((($2115)) + 84|0);
               $2117 = HEAP32[$2116>>2]|0;
               $2118 = ((($2117)) + 32|0);
               HEAP32[$2118>>2] = $2114;
              }
              $2119 = $29;
              $2120 = $14;
              $2121 = ((($2120)) + 136|0);
              $2122 = HEAP32[$2121>>2]|0;
              $2123 = (($2119) - ($2122))|0;
              $2124 = (($2123) + 1)|0;
              $2125 = $14;
              $2126 = ((($2125)) + 132|0);
              $2127 = HEAP32[$2126>>2]|0;
              $2128 = (($2127) + ($2124)|0);
              $2129 = HEAP8[$2128>>0]|0;
              $2130 = $14;
              $2131 = ((($2130)) + 84|0);
              $2132 = HEAP32[$2131>>2]|0;
              $2133 = ((($2132)) + 40|0);
              $2134 = HEAP32[$2133>>2]|0;
              $2135 = (($2134) + 1)|0;
              HEAP32[$2133>>2] = $2135;
              $2136 = $14;
              $2137 = ((($2136)) + 84|0);
              $2138 = HEAP32[$2137>>2]|0;
              $2139 = ((($2138)) + 32|0);
              $2140 = HEAP32[$2139>>2]|0;
              $2141 = (($2140) + ($2134)|0);
              HEAP8[$2141>>0] = $2129;
             }
             $2142 = $36;
             $2143 = (($2142) + 1)|0;
             $36 = $2143;
             $37 = 0;
             break L299;
            }
           } while(0);
           $37 = -1;
          }
         } while(0);
         $2144 = $41;
         $2145 = $2144 & 128;
         $2146 = ($2145|0)!=(0);
         if ($2146) {
          $2147 = $13;
          $2148 = ((($2147)) + 52|0);
          $2149 = HEAP32[$2148>>2]|0;
          $2150 = ((($2149)) + 348|0);
          $2151 = ((($2150)) + 48|0);
          $2152 = HEAP32[$2151>>2]|0;
          $2153 = ($2152|0)!=(0|0);
          if (!($2153)) {
           label = 259;
           break L38;
          }
          $2154 = $13;
          $2155 = ((($2154)) + 52|0);
          $2156 = HEAP32[$2155>>2]|0;
          $2157 = ((($2156)) + 348|0);
          $2158 = ((($2157)) + 48|0);
          $2159 = HEAP32[$2158>>2]|0;
          $2160 = ((($2159)) + 12|0);
          $2161 = HEAP32[$2160>>2]|0;
          $2162 = $14;
          $2163 = $13;
          $2164 = ((($2163)) + 52|0);
          $2165 = HEAP32[$2164>>2]|0;
          $2166 = ((($2165)) + 348|0);
          $2167 = ((($2166)) + 48|0);
          $2168 = HEAP32[$2167>>2]|0;
          $2169 = $15;
          $2170 = HEAP32[$42>>2]|0;
          $2171 = (($2170) - 1)|0;
          $2172 = $20;
          $2173 = (($2172) + ($2171)|0);
          $2174 = (FUNCTION_TABLE_iiiiii[$2161 & 63]($2162,$2168,$2169,$2173,$26)|0);
          $2175 = $25;
          $2176 = $2175 | $2174;
          $25 = $2176;
         }
         $32 = 0;
         $2177 = $28;
         $2178 = (($2177) + 1)|0;
         $28 = $2178;
         $2179 = $27;
         $2180 = (($2179) + 1)|0;
         $27 = $2180;
         $2181 = $29;
         $2182 = (($2181) + 1)|0;
         $29 = $2182;
         break L48;
         break;
        }
        case 81:  {
         $2183 = $41;
         $2184 = $2183 & 128;
         $2185 = ($2184|0)!=(0);
         if (!($2185)) {
          break L48;
         }
         $2186 = $13;
         $2187 = ((($2186)) + 52|0);
         $2188 = HEAP32[$2187>>2]|0;
         $2189 = ((($2188)) + 348|0);
         $2190 = ((($2189)) + 48|0);
         $2191 = HEAP32[$2190>>2]|0;
         $2192 = ($2191|0)!=(0|0);
         if (!($2192)) {
          label = 264;
          break L38;
         }
         $2193 = $13;
         $2194 = ((($2193)) + 52|0);
         $2195 = HEAP32[$2194>>2]|0;
         $2196 = ((($2195)) + 348|0);
         $2197 = ((($2196)) + 48|0);
         $2198 = HEAP32[$2197>>2]|0;
         $2199 = ((($2198)) + 12|0);
         $2200 = HEAP32[$2199>>2]|0;
         $2201 = $14;
         $2202 = $13;
         $2203 = ((($2202)) + 52|0);
         $2204 = HEAP32[$2203>>2]|0;
         $2205 = ((($2204)) + 348|0);
         $2206 = ((($2205)) + 48|0);
         $2207 = HEAP32[$2206>>2]|0;
         $2208 = $15;
         $2209 = HEAP32[$42>>2]|0;
         $2210 = (($2209) - 1)|0;
         $2211 = $20;
         $2212 = (($2211) + ($2210)|0);
         $2213 = (FUNCTION_TABLE_iiiiii[$2200 & 63]($2201,$2207,$2208,$2212,$26)|0);
         $2214 = $25;
         $2215 = $2214 | $2213;
         $25 = $2215;
         break L48;
         break;
        }
        case 72:  {
         $2216 = $28;
         $2217 = ($2216|0)!=(0);
         $2218 = $32;
         $2219 = ($2218|0)!=(5);
         $or$cond35 = $2217 & $2219;
         if ($or$cond35) {
          $2220 = $28;
          $2221 = $2220 << 4;
          $2222 = $32;
          $2223 = (($2221) + ($2222))|0;
          $2224 = $34;
          $2225 = (($2224) + 1)|0;
          $34 = $2225;
          $2226 = $33;
          $2227 = (($2226) + ($2224<<2)|0);
          HEAP32[$2227>>2] = $2223;
          $28 = 0;
         }
         $2228 = $41;
         $2229 = $2228 & 16777216;
         $2230 = ($2229|0)!=(0);
         if (!($2230)) {
          break L48;
         }
         $2231 = $13;
         $2232 = ((($2231)) + 52|0);
         $2233 = HEAP32[$2232>>2]|0;
         $2234 = ((($2233)) + 348|0);
         $2235 = ((($2234)) + 144|0);
         $2236 = HEAP32[$2235>>2]|0;
         $2237 = ($2236|0)!=(0|0);
         if (!($2237)) {
          label = 270;
          break L38;
         }
         $2238 = $13;
         $2239 = ((($2238)) + 52|0);
         $2240 = HEAP32[$2239>>2]|0;
         $2241 = ((($2240)) + 348|0);
         $2242 = ((($2241)) + 144|0);
         $2243 = HEAP32[$2242>>2]|0;
         $2244 = ((($2243)) + 12|0);
         $2245 = HEAP32[$2244>>2]|0;
         $2246 = $14;
         $2247 = $13;
         $2248 = ((($2247)) + 52|0);
         $2249 = HEAP32[$2248>>2]|0;
         $2250 = ((($2249)) + 348|0);
         $2251 = ((($2250)) + 144|0);
         $2252 = HEAP32[$2251>>2]|0;
         $2253 = $15;
         $2254 = (FUNCTION_TABLE_iiiiii[$2245 & 63]($2246,$2252,$2253,$31,$26)|0);
         $2255 = $25;
         $2256 = $2255 | $2254;
         $25 = $2256;
         $2257 = $25;
         $2258 = ($2257|0)!=(0);
         if ($2258) {
          label = 272;
          break L38;
         }
         $32 = 5;
         $2260 = HEAP32[$31>>2]|0;
         $2261 = $28;
         $2262 = (($2261) + ($2260))|0;
         $28 = $2262;
         break L48;
         break;
        }
        case 80:  {
         $2263 = $28;
         $2264 = ($2263|0)!=(0);
         $2265 = $32;
         $2266 = ($2265|0)!=(6);
         $or$cond37 = $2264 & $2266;
         if ($or$cond37) {
          $2267 = $28;
          $2268 = $2267 << 4;
          $2269 = $32;
          $2270 = (($2268) + ($2269))|0;
          $2271 = $34;
          $2272 = (($2271) + 1)|0;
          $34 = $2272;
          $2273 = $33;
          $2274 = (($2273) + ($2271<<2)|0);
          HEAP32[$2274>>2] = $2270;
          $28 = 0;
         }
         $2275 = $41;
         $2276 = $2275 & 8388608;
         $2277 = ($2276|0)!=(0);
         if (!($2277)) {
          break L48;
         }
         $2278 = $13;
         $2279 = ((($2278)) + 52|0);
         $2280 = HEAP32[$2279>>2]|0;
         $2281 = ((($2280)) + 348|0);
         $2282 = ((($2281)) + 140|0);
         $2283 = HEAP32[$2282>>2]|0;
         $2284 = ($2283|0)!=(0|0);
         if (!($2284)) {
          label = 278;
          break L38;
         }
         $2285 = $13;
         $2286 = ((($2285)) + 52|0);
         $2287 = HEAP32[$2286>>2]|0;
         $2288 = ((($2287)) + 348|0);
         $2289 = ((($2288)) + 140|0);
         $2290 = HEAP32[$2289>>2]|0;
         $2291 = ((($2290)) + 12|0);
         $2292 = HEAP32[$2291>>2]|0;
         $2293 = $14;
         $2294 = $13;
         $2295 = ((($2294)) + 52|0);
         $2296 = HEAP32[$2295>>2]|0;
         $2297 = ((($2296)) + 348|0);
         $2298 = ((($2297)) + 140|0);
         $2299 = HEAP32[$2298>>2]|0;
         $2300 = $15;
         $2301 = (FUNCTION_TABLE_iiiiii[$2292 & 63]($2293,$2299,$2300,$31,$26)|0);
         $2302 = $25;
         $2303 = $2302 | $2301;
         $25 = $2303;
         $2304 = $25;
         $2305 = ($2304|0)!=(0);
         if ($2305) {
          label = 280;
          break L38;
         }
         $32 = 6;
         $2307 = HEAP32[$31>>2]|0;
         $2308 = $28;
         $2309 = (($2308) + ($2307))|0;
         $28 = $2309;
         $2310 = HEAP32[$31>>2]|0;
         $2311 = $36;
         $2312 = (($2311) + ($2310))|0;
         $36 = $2312;
         break L48;
         break;
        }
        case 78:  {
         $2313 = $28;
         $2314 = ($2313|0)!=(0);
         $2315 = $32;
         $2316 = ($2315|0)!=(3);
         $or$cond39 = $2314 & $2316;
         if ($or$cond39) {
          $2317 = $28;
          $2318 = $2317 << 4;
          $2319 = $32;
          $2320 = (($2318) + ($2319))|0;
          $2321 = $34;
          $2322 = (($2321) + 1)|0;
          $34 = $2322;
          $2323 = $33;
          $2324 = (($2323) + ($2321<<2)|0);
          HEAP32[$2324>>2] = $2320;
          $28 = 0;
         }
         $2325 = $41;
         $2326 = $2325 & 4194304;
         $2327 = ($2326|0)!=(0);
         if (!($2327)) {
          break L48;
         }
         $2328 = $13;
         $2329 = ((($2328)) + 52|0);
         $2330 = HEAP32[$2329>>2]|0;
         $2331 = ((($2330)) + 348|0);
         $2332 = ((($2331)) + 136|0);
         $2333 = HEAP32[$2332>>2]|0;
         $2334 = ($2333|0)!=(0|0);
         if (!($2334)) {
          label = 286;
          break L38;
         }
         $2335 = $13;
         $2336 = ((($2335)) + 52|0);
         $2337 = HEAP32[$2336>>2]|0;
         $2338 = ((($2337)) + 348|0);
         $2339 = ((($2338)) + 136|0);
         $2340 = HEAP32[$2339>>2]|0;
         $2341 = ((($2340)) + 12|0);
         $2342 = HEAP32[$2341>>2]|0;
         $2343 = $14;
         $2344 = $13;
         $2345 = ((($2344)) + 52|0);
         $2346 = HEAP32[$2345>>2]|0;
         $2347 = ((($2346)) + 348|0);
         $2348 = ((($2347)) + 136|0);
         $2349 = HEAP32[$2348>>2]|0;
         $2350 = $15;
         $2351 = (FUNCTION_TABLE_iiiiii[$2342 & 63]($2343,$2349,$2350,$31,$26)|0);
         $2352 = $25;
         $2353 = $2352 | $2351;
         $25 = $2353;
         $2354 = $25;
         $2355 = ($2354|0)!=(0);
         if ($2355) {
          label = 288;
          break L38;
         }
         $32 = 3;
         $2357 = HEAP32[$31>>2]|0;
         $2358 = $28;
         $2359 = (($2358) + ($2357))|0;
         $28 = $2359;
         $2360 = HEAP32[$31>>2]|0;
         $2361 = $29;
         $2362 = (($2361) + ($2360))|0;
         $29 = $2362;
         $2363 = HEAP32[$31>>2]|0;
         $2364 = $36;
         $2365 = (($2364) + ($2363))|0;
         $36 = $2365;
         break L48;
         break;
        }
        default: {
         label = 290;
         break L38;
        }
        }
       } while(0);
      }
     }
    } while(0);
    $2369 = $24;
    $2370 = (($2369) + 1)|0;
    $24 = $2370;
   }
   switch (label|0) {
    case 30: {
     $11 = -1;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 33: {
     $11 = -1;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 35: {
     $283 = $25;
     $11 = $283;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 38: {
     $11 = -1;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 40: {
     $315 = $25;
     $11 = $315;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 42: {
     $321 = HEAP32[2410]|0;
     $322 = HEAP32[$42>>2]|0;
     HEAP32[$vararg_buffer>>2] = $322;
     (_fprintf($321,21270,$vararg_buffer)|0);
     $11 = -1;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 45: {
     $11 = -1;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 83: {
     $568 = $25;
     $11 = $568;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 89: {
     $11 = -1;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 91: {
     $11 = -1;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 124: {
     $11 = -1;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 126: {
     $963 = $25;
     $11 = $963;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 172: {
     $11 = -1;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 176: {
     $1499 = $25;
     $11 = $1499;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 182: {
     $11 = -1;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 186: {
     $1561 = $25;
     $11 = $1561;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 192: {
     $11 = -1;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 196: {
     $1620 = $25;
     $11 = $1620;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 229: {
     $11 = -1;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 231: {
     $1921 = $25;
     $11 = $1921;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 237: {
     $11 = -1;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 259: {
     $11 = -1;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 264: {
     $11 = -1;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 270: {
     $11 = -1;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 272: {
     $2259 = $25;
     $11 = $2259;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 278: {
     $11 = -1;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 280: {
     $2306 = $25;
     $11 = $2306;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 286: {
     $11 = -1;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 288: {
     $2356 = $25;
     $11 = $2356;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 290: {
     $2366 = HEAP32[2410]|0;
     $2367 = HEAP8[$43>>0]|0;
     $2368 = $2367 << 24 >> 24;
     HEAP32[$vararg_buffer48>>2] = $2368;
     (_fprintf($2366,21362,$vararg_buffer48)|0);
     $11 = -1;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
     break;
    }
    case 292: {
     $2371 = $41;
     $2372 = $2371 & 256;
     $2373 = ($2372|0)!=(0);
     if (!($2373)) {
      break L36;
     }
     $2374 = $41;
     $2375 = $2374 & 512;
     $2376 = ($2375|0)!=(0);
     if (!($2376)) {
      break L36;
     }
     $2377 = $16;
     $2378 = ((($2377)) + 16|0);
     $2379 = HEAP32[$2378>>2]|0;
     $2380 = $27;
     $2381 = ($2379|0)>=($2380|0);
     if (!($2381)) {
      break L36;
     }
     $2382 = $14;
     $2383 = ((($2382)) + 132|0);
     $2384 = HEAP32[$2383>>2]|0;
     $2385 = ($2384|0)!=(0|0);
     do {
      if ($2385) {
       $2386 = $29;
       $2387 = $16;
       $2388 = ((($2387)) + 16|0);
       $2389 = HEAP32[$2388>>2]|0;
       $2390 = (($2386) + ($2389))|0;
       $2391 = $27;
       $2392 = (($2390) - ($2391))|0;
       $2393 = (($2392) + 1)|0;
       $2394 = $16;
       $2395 = ((($2394)) + 4|0);
       $2396 = HEAP32[$2395>>2]|0;
       $2397 = $17;
       $2398 = ((($2397)) + 32|0);
       $2399 = HEAP32[$2398>>2]|0;
       $2400 = (($2399) + ($2396<<4)|0);
       $2401 = ((($2400)) + 4|0);
       $2402 = HEAP32[$2401>>2]|0;
       $2403 = ($2393>>>0)>($2402>>>0);
       if (!($2403)) {
        $2483 = $16;
        $2484 = ((($2483)) + 16|0);
        $2485 = HEAP32[$2484>>2]|0;
        $2486 = $27;
        $2487 = (($2485) - ($2486))|0;
        $2488 = (($2487) + 1)|0;
        $2489 = ($2488|0)>(0);
        if ($2489) {
         $2490 = $27;
         $2491 = (($2490) - 1)|0;
         $2492 = $19;
         $2493 = (($2492) + ($2491)|0);
         $2494 = $29;
         $2495 = $14;
         $2496 = ((($2495)) + 136|0);
         $2497 = HEAP32[$2496>>2]|0;
         $2498 = (($2494) - ($2497))|0;
         $2499 = (($2498) + 1)|0;
         $2500 = $14;
         $2501 = ((($2500)) + 132|0);
         $2502 = HEAP32[$2501>>2]|0;
         $2503 = (($2502) + ($2499)|0);
         $2504 = $16;
         $2505 = ((($2504)) + 16|0);
         $2506 = HEAP32[$2505>>2]|0;
         $2507 = $27;
         $2508 = (($2506) - ($2507))|0;
         $2509 = (($2508) + 1)|0;
         _memcpy(($2493|0),($2503|0),($2509|0))|0;
        }
        $2510 = $16;
        $2511 = ((($2510)) + 16|0);
        $2512 = HEAP32[$2511>>2]|0;
        $2513 = $27;
        $2514 = (($2512) - ($2513))|0;
        $2515 = (($2514) + 1)|0;
        $2516 = $29;
        $2517 = (($2516) + ($2515))|0;
        $29 = $2517;
        $2518 = $37;
        $2519 = ($2518|0)>=(0);
        if (!($2519)) {
         break;
        }
        $2520 = $16;
        $2521 = ((($2520)) + 16|0);
        $2522 = HEAP32[$2521>>2]|0;
        $2523 = $27;
        $2524 = (($2522) - ($2523))|0;
        $2525 = (($2524) + 1)|0;
        $2526 = $37;
        $2527 = (($2526) + ($2525))|0;
        $37 = $2527;
        break;
       }
       $2404 = HEAP32[6458]|0;
       $2405 = ($2404|0)!=(0);
       if (!($2405)) {
        $2406 = HEAP32[2410]|0;
        (_fprintf($2406,21320,$vararg_buffer51)|0);
       }
       HEAP32[6458] = 1;
       $2407 = $16;
       $2408 = ((($2407)) + 4|0);
       $2409 = HEAP32[$2408>>2]|0;
       $2410 = $17;
       $2411 = ((($2410)) + 32|0);
       $2412 = HEAP32[$2411>>2]|0;
       $2413 = (($2412) + ($2409<<4)|0);
       $2414 = ((($2413)) + 4|0);
       $2415 = HEAP32[$2414>>2]|0;
       $2416 = $29;
       $2417 = (($2415) - ($2416))|0;
       $63 = $2417;
       $2418 = $63;
       $2419 = ($2418|0)>(0);
       if (!($2419)) {
        $2466 = $16;
        $2467 = ((($2466)) + 16|0);
        $2468 = HEAP32[$2467>>2]|0;
        $2469 = $27;
        $2470 = (($2468) - ($2469))|0;
        $2471 = (($2470) + 1)|0;
        $2472 = ($2471|0)>(0);
        if (!($2472)) {
         break;
        }
        $2473 = $27;
        $2474 = (($2473) - 1)|0;
        $2475 = $19;
        $2476 = (($2475) + ($2474)|0);
        $2477 = $16;
        $2478 = ((($2477)) + 16|0);
        $2479 = HEAP32[$2478>>2]|0;
        $2480 = $27;
        $2481 = (($2479) - ($2480))|0;
        $2482 = (($2481) + 1)|0;
        _memset(($2476|0),78,($2482|0))|0;
        break;
       }
       $2420 = $27;
       $2421 = (($2420) - 1)|0;
       $2422 = $63;
       $2423 = (($2421) + ($2422))|0;
       $2424 = $16;
       $2425 = ((($2424)) + 16|0);
       $2426 = HEAP32[$2425>>2]|0;
       $2427 = ($2423|0)<($2426|0);
       if ($2427) {
        $2428 = $27;
        $2429 = (($2428) - 1)|0;
        $2430 = $19;
        $2431 = (($2430) + ($2429)|0);
        $2432 = $29;
        $2433 = $14;
        $2434 = ((($2433)) + 136|0);
        $2435 = HEAP32[$2434>>2]|0;
        $2436 = (($2432) - ($2435))|0;
        $2437 = (($2436) + 1)|0;
        $2438 = $14;
        $2439 = ((($2438)) + 132|0);
        $2440 = HEAP32[$2439>>2]|0;
        $2441 = (($2440) + ($2437)|0);
        $2442 = $63;
        _memcpy(($2431|0),($2441|0),($2442|0))|0;
       }
       $2443 = $16;
       $2444 = ((($2443)) + 16|0);
       $2445 = HEAP32[$2444>>2]|0;
       $2446 = $27;
       $2447 = (($2445) - ($2446))|0;
       $2448 = (($2447) + 1)|0;
       $2449 = $63;
       $2450 = (($2448) - ($2449))|0;
       $2451 = ($2450|0)>(0);
       if ($2451) {
        $2452 = $27;
        $2453 = (($2452) - 1)|0;
        $2454 = $63;
        $2455 = (($2453) + ($2454))|0;
        $2456 = $19;
        $2457 = (($2456) + ($2455)|0);
        $2458 = $16;
        $2459 = ((($2458)) + 16|0);
        $2460 = HEAP32[$2459>>2]|0;
        $2461 = $27;
        $2462 = (($2460) - ($2461))|0;
        $2463 = (($2462) + 1)|0;
        $2464 = $63;
        $2465 = (($2463) - ($2464))|0;
        _memset(($2457|0),78,($2465|0))|0;
       }
      }
     } while(0);
     $2528 = $34;
     $2529 = (($2528) + 1)|0;
     $2530 = $35;
     $2531 = ($2529>>>0)>=($2530>>>0);
     if ($2531) {
      $2532 = $35;
      $2533 = ($2532|0)!=(0);
      $2534 = $35;
      $2535 = $2534<<1;
      $2536 = $2533 ? $2535 : 1024;
      $35 = $2536;
      $2537 = $33;
      $2538 = $14;
      $2539 = ((($2538)) + 28|0);
      HEAP32[$2539>>2] = $2537;
      $2540 = $33;
      $2541 = $35;
      $2542 = $2541<<2;
      $2543 = (_realloc($2540,$2542)|0);
      $33 = $2543;
      $2544 = ($2543|0)!=(0|0);
      if (!($2544)) {
       $11 = -1;
       $2920 = $11;
       STACKTOP = sp;return ($2920|0);
      }
     }
     $2545 = $28;
     $2546 = ($2545|0)!=(0);
     $2547 = $32;
     $2548 = ($2547|0)!=(0);
     $or$cond41 = $2546 & $2548;
     if ($or$cond41) {
      $2549 = $28;
      $2550 = $2549 << 4;
      $2551 = $32;
      $2552 = (($2550) + ($2551))|0;
      $2553 = $34;
      $2554 = (($2553) + 1)|0;
      $34 = $2554;
      $2555 = $33;
      $2556 = (($2555) + ($2553<<2)|0);
      HEAP32[$2556>>2] = $2552;
      $28 = 0;
     }
     $32 = 0;
     $2557 = $16;
     $2558 = ((($2557)) + 16|0);
     $2559 = HEAP32[$2558>>2]|0;
     $2560 = $27;
     $2561 = (($2559) - ($2560))|0;
     $2562 = (($2561) + 1)|0;
     $2563 = $28;
     $2564 = (($2563) + ($2562))|0;
     $28 = $2564;
     break L36;
     break;
    }
   }
  }
 } while(0);
 $2565 = $41;
 $2566 = $2565 & 512;
 $2567 = ($2566|0)!=(0);
 $2568 = $39;
 $2569 = ($2568|0)!=(0);
 $or$cond43 = $2567 & $2569;
 $2570 = $37;
 $2571 = ($2570|0)>=(0);
 $or$cond45 = $or$cond43 & $2571;
 if ($or$cond45) {
  while(1) {
   $2572 = $14;
   $2573 = ((($2572)) + 84|0);
   $2574 = HEAP32[$2573>>2]|0;
   $2575 = ((($2574)) + 36|0);
   $2576 = HEAP32[$2575>>2]|0;
   $2577 = $14;
   $2578 = ((($2577)) + 84|0);
   $2579 = HEAP32[$2578>>2]|0;
   $2580 = ((($2579)) + 40|0);
   $2581 = HEAP32[$2580>>2]|0;
   $2582 = (($2581) + 11)|0;
   $2583 = ($2576>>>0)<=($2582>>>0);
   $2584 = $14;
   $2585 = ((($2584)) + 84|0);
   $2586 = HEAP32[$2585>>2]|0;
   if (!($2583)) {
    break;
   }
   $2587 = ((($2586)) + 36|0);
   $2588 = HEAP32[$2587>>2]|0;
   $2589 = ($2588|0)!=(0);
   if ($2589) {
    $2590 = $14;
    $2591 = ((($2590)) + 84|0);
    $2592 = HEAP32[$2591>>2]|0;
    $2593 = ((($2592)) + 36|0);
    $2594 = HEAP32[$2593>>2]|0;
    $2595 = (+($2594>>>0));
    $2596 = $2595 * 1.5;
    $2598 = $2596;
   } else {
    $2598 = 1024.0;
   }
   $2597 = (~~(($2598))>>>0);
   $2599 = $14;
   $2600 = ((($2599)) + 84|0);
   $2601 = HEAP32[$2600>>2]|0;
   $2602 = ((($2601)) + 36|0);
   HEAP32[$2602>>2] = $2597;
   $2603 = $14;
   $2604 = ((($2603)) + 84|0);
   $2605 = HEAP32[$2604>>2]|0;
   $2606 = ((($2605)) + 32|0);
   $2607 = HEAP32[$2606>>2]|0;
   $2608 = $14;
   $2609 = ((($2608)) + 84|0);
   $2610 = HEAP32[$2609>>2]|0;
   $2611 = ((($2610)) + 36|0);
   $2612 = HEAP32[$2611>>2]|0;
   $2613 = (_realloc($2607,$2612)|0);
   $2614 = $14;
   $2615 = ((($2614)) + 84|0);
   $2616 = HEAP32[$2615>>2]|0;
   $2617 = ((($2616)) + 32|0);
   HEAP32[$2617>>2] = $2613;
  }
  $2618 = ((($2586)) + 40|0);
  $2619 = HEAP32[$2618>>2]|0;
  $2620 = $14;
  $2621 = ((($2620)) + 84|0);
  $2622 = HEAP32[$2621>>2]|0;
  $2623 = ((($2622)) + 32|0);
  $2624 = HEAP32[$2623>>2]|0;
  $2625 = (($2624) + ($2619)|0);
  $64 = $2625;
  $2626 = $64;
  $2627 = $37;
  $2628 = (_append_uint32($2626,$2627)|0);
  $2629 = $64;
  $2630 = $2628;
  $2631 = $2629;
  $2632 = (($2630) - ($2631))|0;
  $2633 = $14;
  $2634 = ((($2633)) + 84|0);
  $2635 = HEAP32[$2634>>2]|0;
  $2636 = ((($2635)) + 40|0);
  $2637 = HEAP32[$2636>>2]|0;
  $2638 = (($2637) + ($2632))|0;
  HEAP32[$2636>>2] = $2638;
 }
 $2639 = $28;
 $2640 = ($2639|0)!=(0);
 if ($2640) {
  $2641 = $34;
  $2642 = $35;
  $2643 = ($2641>>>0)>=($2642>>>0);
  if ($2643) {
   $2644 = $35;
   $2645 = ($2644|0)!=(0);
   $2646 = $35;
   $2647 = $2646<<1;
   $2648 = $2645 ? $2647 : 1024;
   $35 = $2648;
   $2649 = $33;
   $2650 = $14;
   $2651 = ((($2650)) + 28|0);
   HEAP32[$2651>>2] = $2649;
   $2652 = $33;
   $2653 = $35;
   $2654 = $2653<<2;
   $2655 = (_realloc($2652,$2654)|0);
   $33 = $2655;
   $2656 = ($2655|0)!=(0|0);
   if (!($2656)) {
    $11 = -1;
    $2920 = $11;
    STACKTOP = sp;return ($2920|0);
   }
  }
  $2657 = $28;
  $2658 = $2657 << 4;
  $2659 = $32;
  $2660 = (($2658) + ($2659))|0;
  $2661 = $34;
  $2662 = (($2661) + 1)|0;
  $34 = $2662;
  $2663 = $33;
  $2664 = (($2663) + ($2661<<2)|0);
  HEAP32[$2664>>2] = $2660;
 }
 $2665 = $34;
 $2666 = $16;
 $2667 = ((($2666)) + 80|0);
 $2668 = HEAP32[$2667>>2]|0;
 $2669 = (($2665) - ($2668))|0;
 $2670 = $16;
 $2671 = ((($2670)) + 84|0);
 HEAP32[$2671>>2] = $2669;
 $2672 = $29;
 $2673 = $16;
 $2674 = ((($2673)) + 88|0);
 HEAP32[$2674>>2] = $2672;
 $2675 = $41;
 $2676 = $2675 & 8192;
 $2677 = ($2676|0)!=(0);
 do {
  if ($2677) {
   $2678 = $13;
   $2679 = ((($2678)) + 52|0);
   $2680 = HEAP32[$2679>>2]|0;
   $2681 = ((($2680)) + 348|0);
   $2682 = ((($2681)) + 76|0);
   $2683 = HEAP32[$2682>>2]|0;
   $2684 = ($2683|0)!=(0|0);
   if ($2684) {
    $2685 = $13;
    $2686 = ((($2685)) + 52|0);
    $2687 = HEAP32[$2686>>2]|0;
    $2688 = ((($2687)) + 348|0);
    $2689 = ((($2688)) + 76|0);
    $2690 = HEAP32[$2689>>2]|0;
    $2691 = ((($2690)) + 12|0);
    $2692 = HEAP32[$2691>>2]|0;
    $2693 = $14;
    $2694 = $13;
    $2695 = ((($2694)) + 52|0);
    $2696 = HEAP32[$2695>>2]|0;
    $2697 = ((($2696)) + 348|0);
    $2698 = ((($2697)) + 76|0);
    $2699 = HEAP32[$2698>>2]|0;
    $2700 = $15;
    $2701 = $16;
    $2702 = ((($2701)) + 92|0);
    $2703 = (FUNCTION_TABLE_iiiiii[$2692 & 63]($2693,$2699,$2700,$2702,$26)|0);
    $2704 = $25;
    $2705 = $2704 | $2703;
    $25 = $2705;
    break;
   }
   $11 = -1;
   $2920 = $11;
   STACKTOP = sp;return ($2920|0);
  } else {
   $2706 = $16;
   $2707 = ((($2706)) + 92|0);
   HEAP32[$2707>>2] = 40;
  }
 } while(0);
 $2708 = $41;
 $2709 = $2708 & 128;
 $2710 = ($2709|0)!=(0);
 do {
  if ($2710) {
   $2711 = $18;
   $2712 = $2711 & 1;
   $2713 = ($2712|0)!=(0);
   if ($2713) {
    $2714 = $16;
    $2715 = ((($2714)) + 16|0);
    $2716 = HEAP32[$2715>>2]|0;
    HEAP32[$65>>2] = $2716;
    $2717 = $41;
    $2718 = $2717 & 128;
    $2719 = ($2718|0)!=(0);
    if ($2719) {
     $2720 = $13;
     $2721 = ((($2720)) + 52|0);
     $2722 = HEAP32[$2721>>2]|0;
     $2723 = ((($2722)) + 348|0);
     $2724 = ((($2723)) + 48|0);
     $2725 = HEAP32[$2724>>2]|0;
     $2726 = ($2725|0)!=(0|0);
     if ($2726) {
      $2727 = $13;
      $2728 = ((($2727)) + 52|0);
      $2729 = HEAP32[$2728>>2]|0;
      $2730 = ((($2729)) + 348|0);
      $2731 = ((($2730)) + 48|0);
      $2732 = HEAP32[$2731>>2]|0;
      $2733 = ((($2732)) + 12|0);
      $2734 = HEAP32[$2733>>2]|0;
      $2735 = $14;
      $2736 = $13;
      $2737 = ((($2736)) + 52|0);
      $2738 = HEAP32[$2737>>2]|0;
      $2739 = ((($2738)) + 348|0);
      $2740 = ((($2739)) + 48|0);
      $2741 = HEAP32[$2740>>2]|0;
      $2742 = $15;
      $2743 = $20;
      $2744 = (FUNCTION_TABLE_iiiiii[$2734 & 63]($2735,$2741,$2742,$2743,$65)|0);
      $2745 = $25;
      $2746 = $2745 | $2744;
      $25 = $2746;
      break;
     }
     $11 = -1;
     $2920 = $11;
     STACKTOP = sp;return ($2920|0);
    }
   }
  }
 } while(0);
 $2747 = $33;
 $2748 = $14;
 $2749 = ((($2748)) + 28|0);
 HEAP32[$2749>>2] = $2747;
 $2750 = $35;
 $2751 = $14;
 $2752 = ((($2751)) + 32|0);
 HEAP32[$2752>>2] = $2750;
 $2753 = $34;
 $2754 = $14;
 $2755 = ((($2754)) + 36|0);
 HEAP32[$2755>>2] = $2753;
 $2756 = $16;
 $2757 = ((($2756)) + 12|0);
 $2758 = HEAP32[$2757>>2]|0;
 $2759 = $2758 & 8;
 $2760 = ($2759|0)!=(0);
 if ($2760) {
  $2761 = $16;
  $2762 = ((($2761)) + 16|0);
  HEAP32[$2762>>2] = 0;
 }
 $2763 = $39;
 $2764 = ($2763|0)!=(0);
 if ($2764) {
  while(1) {
   $2765 = $14;
   $2766 = ((($2765)) + 84|0);
   $2767 = HEAP32[$2766>>2]|0;
   $2768 = ((($2767)) + 36|0);
   $2769 = HEAP32[$2768>>2]|0;
   $2770 = $14;
   $2771 = ((($2770)) + 84|0);
   $2772 = HEAP32[$2771>>2]|0;
   $2773 = ((($2772)) + 40|0);
   $2774 = HEAP32[$2773>>2]|0;
   $2775 = (($2774) + 1)|0;
   $2776 = ($2769>>>0)<=($2775>>>0);
   $2777 = $14;
   $2778 = ((($2777)) + 84|0);
   $2779 = HEAP32[$2778>>2]|0;
   if (!($2776)) {
    break;
   }
   $2780 = ((($2779)) + 36|0);
   $2781 = HEAP32[$2780>>2]|0;
   $2782 = ($2781|0)!=(0);
   if ($2782) {
    $2783 = $14;
    $2784 = ((($2783)) + 84|0);
    $2785 = HEAP32[$2784>>2]|0;
    $2786 = ((($2785)) + 36|0);
    $2787 = HEAP32[$2786>>2]|0;
    $2788 = (+($2787>>>0));
    $2789 = $2788 * 1.5;
    $2791 = $2789;
   } else {
    $2791 = 1024.0;
   }
   $2790 = (~~(($2791))>>>0);
   $2792 = $14;
   $2793 = ((($2792)) + 84|0);
   $2794 = HEAP32[$2793>>2]|0;
   $2795 = ((($2794)) + 36|0);
   HEAP32[$2795>>2] = $2790;
   $2796 = $14;
   $2797 = ((($2796)) + 84|0);
   $2798 = HEAP32[$2797>>2]|0;
   $2799 = ((($2798)) + 32|0);
   $2800 = HEAP32[$2799>>2]|0;
   $2801 = $14;
   $2802 = ((($2801)) + 84|0);
   $2803 = HEAP32[$2802>>2]|0;
   $2804 = ((($2803)) + 36|0);
   $2805 = HEAP32[$2804>>2]|0;
   $2806 = (_realloc($2800,$2805)|0);
   $2807 = $14;
   $2808 = ((($2807)) + 84|0);
   $2809 = HEAP32[$2808>>2]|0;
   $2810 = ((($2809)) + 32|0);
   HEAP32[$2810>>2] = $2806;
  }
  $2811 = ((($2779)) + 40|0);
  $2812 = HEAP32[$2811>>2]|0;
  $2813 = (($2812) + 1)|0;
  HEAP32[$2811>>2] = $2813;
  $2814 = $14;
  $2815 = ((($2814)) + 84|0);
  $2816 = HEAP32[$2815>>2]|0;
  $2817 = ((($2816)) + 32|0);
  $2818 = HEAP32[$2817>>2]|0;
  $2819 = (($2818) + ($2812)|0);
  HEAP8[$2819>>0] = 0;
  $2820 = $14;
  $2821 = ((($2820)) + 84|0);
  $2822 = HEAP32[$2821>>2]|0;
  $2823 = ((($2822)) + 40|0);
  $2824 = HEAP32[$2823>>2]|0;
  $2825 = $38;
  $2826 = (($2824) - ($2825))|0;
  $2827 = $16;
  $2828 = ((($2827)) + 60|0);
  $2829 = HEAP32[$2828>>2]|0;
  $2830 = (($2829) + ($2826))|0;
  HEAP32[$2828>>2] = $2830;
 }
 $2831 = $40;
 $2832 = ($2831|0)!=(0);
 if ($2832) {
  HEAP8[$66>>0] = 78;
  $2833 = ((($66)) + 1|0);
  HEAP8[$2833>>0] = 77;
  $2834 = ((($66)) + 2|0);
  HEAP8[$2834>>0] = 73;
  $2835 = $36;
  $2836 = $2835 >>> 0;
  $2837 = $2836 & 255;
  $2838 = $2837&255;
  $2839 = ((($66)) + 3|0);
  HEAP8[$2839>>0] = $2838;
  $2840 = $36;
  $2841 = $2840 >>> 8;
  $2842 = $2841 & 255;
  $2843 = $2842&255;
  $2844 = ((($66)) + 4|0);
  HEAP8[$2844>>0] = $2843;
  $2845 = $36;
  $2846 = $2845 >>> 16;
  $2847 = $2846 & 255;
  $2848 = $2847&255;
  $2849 = ((($66)) + 5|0);
  HEAP8[$2849>>0] = $2848;
  $2850 = $36;
  $2851 = $2850 >>> 24;
  $2852 = $2851 & 255;
  $2853 = $2852&255;
  $2854 = ((($66)) + 6|0);
  HEAP8[$2854>>0] = $2853;
  while(1) {
   $2855 = $14;
   $2856 = ((($2855)) + 84|0);
   $2857 = HEAP32[$2856>>2]|0;
   $2858 = ((($2857)) + 36|0);
   $2859 = HEAP32[$2858>>2]|0;
   $2860 = $14;
   $2861 = ((($2860)) + 84|0);
   $2862 = HEAP32[$2861>>2]|0;
   $2863 = ((($2862)) + 40|0);
   $2864 = HEAP32[$2863>>2]|0;
   $2865 = (($2864) + 7)|0;
   $2866 = ($2859>>>0)<=($2865>>>0);
   $2867 = $14;
   $2868 = ((($2867)) + 84|0);
   $2869 = HEAP32[$2868>>2]|0;
   if (!($2866)) {
    break;
   }
   $2870 = ((($2869)) + 36|0);
   $2871 = HEAP32[$2870>>2]|0;
   $2872 = ($2871|0)!=(0);
   if ($2872) {
    $2873 = $14;
    $2874 = ((($2873)) + 84|0);
    $2875 = HEAP32[$2874>>2]|0;
    $2876 = ((($2875)) + 36|0);
    $2877 = HEAP32[$2876>>2]|0;
    $2878 = (+($2877>>>0));
    $2879 = $2878 * 1.5;
    $2881 = $2879;
   } else {
    $2881 = 1024.0;
   }
   $2880 = (~~(($2881))>>>0);
   $2882 = $14;
   $2883 = ((($2882)) + 84|0);
   $2884 = HEAP32[$2883>>2]|0;
   $2885 = ((($2884)) + 36|0);
   HEAP32[$2885>>2] = $2880;
   $2886 = $14;
   $2887 = ((($2886)) + 84|0);
   $2888 = HEAP32[$2887>>2]|0;
   $2889 = ((($2888)) + 32|0);
   $2890 = HEAP32[$2889>>2]|0;
   $2891 = $14;
   $2892 = ((($2891)) + 84|0);
   $2893 = HEAP32[$2892>>2]|0;
   $2894 = ((($2893)) + 36|0);
   $2895 = HEAP32[$2894>>2]|0;
   $2896 = (_realloc($2890,$2895)|0);
   $2897 = $14;
   $2898 = ((($2897)) + 84|0);
   $2899 = HEAP32[$2898>>2]|0;
   $2900 = ((($2899)) + 32|0);
   HEAP32[$2900>>2] = $2896;
  }
  $2901 = ((($2869)) + 40|0);
  $2902 = HEAP32[$2901>>2]|0;
  $2903 = $14;
  $2904 = ((($2903)) + 84|0);
  $2905 = HEAP32[$2904>>2]|0;
  $2906 = ((($2905)) + 32|0);
  $2907 = HEAP32[$2906>>2]|0;
  $2908 = (($2907) + ($2902)|0);
  ;HEAP8[$2908>>0]=HEAP8[$66>>0]|0;HEAP8[$2908+1>>0]=HEAP8[$66+1>>0]|0;HEAP8[$2908+2>>0]=HEAP8[$66+2>>0]|0;HEAP8[$2908+3>>0]=HEAP8[$66+3>>0]|0;HEAP8[$2908+4>>0]=HEAP8[$66+4>>0]|0;HEAP8[$2908+5>>0]=HEAP8[$66+5>>0]|0;HEAP8[$2908+6>>0]=HEAP8[$66+6>>0]|0;
  $2909 = $14;
  $2910 = ((($2909)) + 84|0);
  $2911 = HEAP32[$2910>>2]|0;
  $2912 = ((($2911)) + 40|0);
  $2913 = HEAP32[$2912>>2]|0;
  $2914 = (($2913) + 7)|0;
  HEAP32[$2912>>2] = $2914;
  $2915 = $16;
  $2916 = ((($2915)) + 60|0);
  $2917 = HEAP32[$2916>>2]|0;
  $2918 = (($2917) + 7)|0;
  HEAP32[$2916>>2] = $2918;
 }
 $2919 = $25;
 $11 = $2919;
 $2920 = $11;
 STACKTOP = sp;return ($2920|0);
}
function _cram_decode_slice_xref($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $15 = $4;
 $16 = $15 & 448;
 $17 = ($16|0)!=(0);
 $5 = 0;
 if (!($17)) {
  while(1) {
   $18 = $5;
   $19 = $3;
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($20)) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($18|0)<($22|0);
   if (!($23)) {
    break;
   }
   $24 = $5;
   $25 = $3;
   $26 = ((($25)) + 24|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + (($24*108)|0)|0);
   $6 = $28;
   $29 = $6;
   $30 = ((($29)) + 48|0);
   HEAP32[$30>>2] = 0;
   $31 = $6;
   $32 = ((($31)) + 44|0);
   HEAP32[$32>>2] = 0;
   $33 = $6;
   $34 = ((($33)) + 40|0);
   HEAP32[$34>>2] = -1;
   $35 = $5;
   $36 = (($35) + 1)|0;
   $5 = $36;
  }
  $2 = 0;
  $419 = $2;
  STACKTOP = sp;return ($419|0);
 }
 L7: while(1) {
  $37 = $5;
  $38 = $3;
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($39)) + 16|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($37|0)<($41|0);
  if (!($42)) {
   label = 59;
   break;
  }
  $43 = $5;
  $44 = $3;
  $45 = ((($44)) + 24|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + (($43*108)|0)|0);
  $7 = $47;
  $48 = $7;
  $49 = ((($48)) + 36|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)>=(0);
  $52 = $7;
  do {
   if ($51) {
    $53 = ((($52)) + 36|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = $3;
    $56 = HEAP32[$55>>2]|0;
    $57 = ((($56)) + 16|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($54|0)<($58|0);
    if (!($59)) {
     $378 = HEAP32[2410]|0;
     $379 = $7;
     $380 = ((($379)) + 36|0);
     $381 = HEAP32[$380>>2]|0;
     $382 = $3;
     $383 = HEAP32[$382>>2]|0;
     $384 = ((($383)) + 16|0);
     $385 = HEAP32[$384>>2]|0;
     $386 = (($385) - 1)|0;
     HEAP32[$vararg_buffer>>2] = $381;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $386;
     (_fprintf($378,21226,$vararg_buffer)|0);
     break;
    }
    $60 = $7;
    $61 = ((($60)) + 48|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)==(-2147483648);
    L15: do {
     if ($63) {
      $64 = $5;
      $8 = $64;
      $65 = $5;
      $9 = $65;
      $66 = $7;
      $67 = ((($66)) + 20|0);
      $68 = HEAP32[$67>>2]|0;
      $10 = $68;
      $69 = $7;
      $70 = ((($69)) + 88|0);
      $71 = HEAP32[$70>>2]|0;
      $11 = $71;
      $72 = $7;
      $73 = ((($72)) + 4|0);
      $74 = HEAP32[$73>>2]|0;
      $13 = $74;
      $14 = 0;
      while(1) {
       $75 = $10;
       $76 = $9;
       $77 = $3;
       $78 = ((($77)) + 24|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = (($79) + (($76*108)|0)|0);
       $81 = ((($80)) + 20|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = ($75|0)>($82|0);
       if ($83) {
        $84 = $9;
        $85 = $3;
        $86 = ((($85)) + 24|0);
        $87 = HEAP32[$86>>2]|0;
        $88 = (($87) + (($84*108)|0)|0);
        $89 = ((($88)) + 20|0);
        $90 = HEAP32[$89>>2]|0;
        $10 = $90;
        $14 = 1;
       } else {
        $91 = $10;
        $92 = $9;
        $93 = $3;
        $94 = ((($93)) + 24|0);
        $95 = HEAP32[$94>>2]|0;
        $96 = (($95) + (($92*108)|0)|0);
        $97 = ((($96)) + 20|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = ($91|0)==($98|0);
        if ($99) {
         $100 = $14;
         $101 = (($100) + 1)|0;
         $14 = $101;
        }
       }
       $102 = $11;
       $103 = $9;
       $104 = $3;
       $105 = ((($104)) + 24|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = (($106) + (($103*108)|0)|0);
       $108 = ((($107)) + 88|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = ($102|0)<($109|0);
       if ($110) {
        $111 = $9;
        $112 = $3;
        $113 = ((($112)) + 24|0);
        $114 = HEAP32[$113>>2]|0;
        $115 = (($114) + (($111*108)|0)|0);
        $116 = ((($115)) + 88|0);
        $117 = HEAP32[$116>>2]|0;
        $11 = $117;
       }
       $118 = $9;
       $119 = $3;
       $120 = ((($119)) + 24|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = (($121) + (($118*108)|0)|0);
       $123 = ((($122)) + 36|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = ($124|0)==(-1);
       if ($125) {
        label = 17;
        break;
       }
       $133 = $9;
       $134 = $3;
       $135 = ((($134)) + 24|0);
       $136 = HEAP32[$135>>2]|0;
       $137 = (($136) + (($133*108)|0)|0);
       $138 = ((($137)) + 36|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = $9;
       $141 = ($139|0)<=($140|0);
       if ($141) {
        label = 20;
        break L7;
       }
       $142 = $9;
       $143 = $3;
       $144 = ((($143)) + 24|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = (($145) + (($142*108)|0)|0);
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = $3;
       $150 = HEAP32[$149>>2]|0;
       $151 = ((($150)) + 16|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = ($148|0)>=($152|0);
       if ($153) {
        label = 20;
        break L7;
       }
       $154 = $9;
       $155 = $3;
       $156 = ((($155)) + 24|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = (($157) + (($154*108)|0)|0);
       $159 = ((($158)) + 36|0);
       $160 = HEAP32[$159>>2]|0;
       $9 = $160;
       $161 = $9;
       $162 = $3;
       $163 = ((($162)) + 24|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = (($164) + (($161*108)|0)|0);
       $166 = ((($165)) + 4|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = $13;
       $169 = ($167|0)!=($168|0);
       if ($169) {
        $13 = -1;
       }
       $170 = $9;
       $171 = $8;
       $172 = ($170|0)!=($171|0);
       if (!($172)) {
        break;
       }
      }
      if ((label|0) == 17) {
       label = 0;
       $126 = $5;
       $127 = $9;
       $128 = $3;
       $129 = ((($128)) + 24|0);
       $130 = HEAP32[$129>>2]|0;
       $131 = (($130) + (($127*108)|0)|0);
       $132 = ((($131)) + 36|0);
       HEAP32[$132>>2] = $126;
      }
      $173 = $13;
      $174 = ($173|0)!=(-1);
      if (!($174)) {
       $283 = $5;
       $9 = $283;
       $8 = $283;
       $284 = $9;
       $285 = $3;
       $286 = ((($285)) + 24|0);
       $287 = HEAP32[$286>>2]|0;
       $288 = (($287) + (($284*108)|0)|0);
       $289 = ((($288)) + 48|0);
       HEAP32[$289>>2] = 0;
       $290 = $9;
       $291 = $3;
       $292 = ((($291)) + 24|0);
       $293 = HEAP32[$292>>2]|0;
       $294 = (($293) + (($290*108)|0)|0);
       $295 = ((($294)) + 36|0);
       $296 = HEAP32[$295>>2]|0;
       $9 = $296;
       while(1) {
        $297 = $9;
        $298 = $8;
        $299 = ($297|0)!=($298|0);
        if (!($299)) {
         break L15;
        }
        $300 = $9;
        $301 = $3;
        $302 = ((($301)) + 24|0);
        $303 = HEAP32[$302>>2]|0;
        $304 = (($303) + (($300*108)|0)|0);
        $305 = ((($304)) + 48|0);
        HEAP32[$305>>2] = 0;
        $306 = $9;
        $307 = $3;
        $308 = ((($307)) + 24|0);
        $309 = HEAP32[$308>>2]|0;
        $310 = (($309) + (($306*108)|0)|0);
        $311 = ((($310)) + 36|0);
        $312 = HEAP32[$311>>2]|0;
        $9 = $312;
       }
      }
      $175 = $11;
      $176 = $10;
      $177 = (($175) - ($176))|0;
      $178 = (($177) + 1)|0;
      $12 = $178;
      $179 = $5;
      $9 = $179;
      $8 = $179;
      $180 = $9;
      $181 = $3;
      $182 = ((($181)) + 24|0);
      $183 = HEAP32[$182>>2]|0;
      $184 = (($183) + (($180*108)|0)|0);
      $185 = ((($184)) + 20|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = $10;
      $188 = ($186|0)==($187|0);
      do {
       if ($188) {
        $189 = $14;
        $190 = ($189|0)==(1);
        if (!($190)) {
         $191 = $9;
         $192 = $3;
         $193 = ((($192)) + 24|0);
         $194 = HEAP32[$193>>2]|0;
         $195 = (($194) + (($191*108)|0)|0);
         $196 = ((($195)) + 8|0);
         $197 = HEAP32[$196>>2]|0;
         $198 = $197 & 64;
         $199 = ($198|0)!=(0);
         if (!($199)) {
          $207 = $12;
          $208 = (0 - ($207))|0;
          $209 = $9;
          $210 = $3;
          $211 = ((($210)) + 24|0);
          $212 = HEAP32[$211>>2]|0;
          $213 = (($212) + (($209*108)|0)|0);
          $214 = ((($213)) + 48|0);
          HEAP32[$214>>2] = $208;
          break;
         }
        }
        $200 = $12;
        $201 = $9;
        $202 = $3;
        $203 = ((($202)) + 24|0);
        $204 = HEAP32[$203>>2]|0;
        $205 = (($204) + (($201*108)|0)|0);
        $206 = ((($205)) + 48|0);
        HEAP32[$206>>2] = $200;
       } else {
        $215 = $12;
        $216 = (0 - ($215))|0;
        $217 = $9;
        $218 = $3;
        $219 = ((($218)) + 24|0);
        $220 = HEAP32[$219>>2]|0;
        $221 = (($220) + (($217*108)|0)|0);
        $222 = ((($221)) + 48|0);
        HEAP32[$222>>2] = $216;
       }
      } while(0);
      $223 = $9;
      $224 = $3;
      $225 = ((($224)) + 24|0);
      $226 = HEAP32[$225>>2]|0;
      $227 = (($226) + (($223*108)|0)|0);
      $228 = ((($227)) + 36|0);
      $229 = HEAP32[$228>>2]|0;
      $9 = $229;
      while(1) {
       $230 = $9;
       $231 = $8;
       $232 = ($230|0)!=($231|0);
       if (!($232)) {
        break L15;
       }
       $233 = $9;
       $234 = $3;
       $235 = ((($234)) + 24|0);
       $236 = HEAP32[$235>>2]|0;
       $237 = (($236) + (($233*108)|0)|0);
       $238 = ((($237)) + 20|0);
       $239 = HEAP32[$238>>2]|0;
       $240 = $10;
       $241 = ($239|0)==($240|0);
       do {
        if ($241) {
         $242 = $14;
         $243 = ($242|0)==(1);
         if (!($243)) {
          $244 = $9;
          $245 = $3;
          $246 = ((($245)) + 24|0);
          $247 = HEAP32[$246>>2]|0;
          $248 = (($247) + (($244*108)|0)|0);
          $249 = ((($248)) + 8|0);
          $250 = HEAP32[$249>>2]|0;
          $251 = $250 & 64;
          $252 = ($251|0)!=(0);
          if (!($252)) {
           $260 = $12;
           $261 = (0 - ($260))|0;
           $262 = $9;
           $263 = $3;
           $264 = ((($263)) + 24|0);
           $265 = HEAP32[$264>>2]|0;
           $266 = (($265) + (($262*108)|0)|0);
           $267 = ((($266)) + 48|0);
           HEAP32[$267>>2] = $261;
           break;
          }
         }
         $253 = $12;
         $254 = $9;
         $255 = $3;
         $256 = ((($255)) + 24|0);
         $257 = HEAP32[$256>>2]|0;
         $258 = (($257) + (($254*108)|0)|0);
         $259 = ((($258)) + 48|0);
         HEAP32[$259>>2] = $253;
        } else {
         $268 = $12;
         $269 = (0 - ($268))|0;
         $270 = $9;
         $271 = $3;
         $272 = ((($271)) + 24|0);
         $273 = HEAP32[$272>>2]|0;
         $274 = (($273) + (($270*108)|0)|0);
         $275 = ((($274)) + 48|0);
         HEAP32[$275>>2] = $269;
        }
       } while(0);
       $276 = $9;
       $277 = $3;
       $278 = ((($277)) + 24|0);
       $279 = HEAP32[$278>>2]|0;
       $280 = (($279) + (($276*108)|0)|0);
       $281 = ((($280)) + 36|0);
       $282 = HEAP32[$281>>2]|0;
       $9 = $282;
      }
     }
    } while(0);
    $313 = $7;
    $314 = ((($313)) + 36|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = $3;
    $317 = ((($316)) + 24|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = (($318) + (($315*108)|0)|0);
    $320 = ((($319)) + 20|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = $7;
    $323 = ((($322)) + 44|0);
    HEAP32[$323>>2] = $321;
    $324 = $7;
    $325 = ((($324)) + 36|0);
    $326 = HEAP32[$325>>2]|0;
    $327 = $3;
    $328 = ((($327)) + 24|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = (($329) + (($326*108)|0)|0);
    $331 = ((($330)) + 4|0);
    $332 = HEAP32[$331>>2]|0;
    $333 = $7;
    $334 = ((($333)) + 40|0);
    HEAP32[$334>>2] = $332;
    $335 = $7;
    $336 = ((($335)) + 8|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = $337 | 1;
    HEAP32[$336>>2] = $338;
    $339 = $7;
    $340 = ((($339)) + 36|0);
    $341 = HEAP32[$340>>2]|0;
    $342 = $3;
    $343 = ((($342)) + 24|0);
    $344 = HEAP32[$343>>2]|0;
    $345 = (($344) + (($341*108)|0)|0);
    $346 = ((($345)) + 8|0);
    $347 = HEAP32[$346>>2]|0;
    $348 = $347 & 4;
    $349 = ($348|0)!=(0);
    if ($349) {
     $350 = $7;
     $351 = ((($350)) + 8|0);
     $352 = HEAP32[$351>>2]|0;
     $353 = $352 | 8;
     HEAP32[$351>>2] = $353;
     $354 = $7;
     $355 = ((($354)) + 48|0);
     HEAP32[$355>>2] = 0;
    }
    $356 = $7;
    $357 = ((($356)) + 8|0);
    $358 = HEAP32[$357>>2]|0;
    $359 = $358 & 4;
    $360 = ($359|0)!=(0);
    if ($360) {
     $361 = $7;
     $362 = ((($361)) + 48|0);
     HEAP32[$362>>2] = 0;
    }
    $363 = $7;
    $364 = ((($363)) + 36|0);
    $365 = HEAP32[$364>>2]|0;
    $366 = $3;
    $367 = ((($366)) + 24|0);
    $368 = HEAP32[$367>>2]|0;
    $369 = (($368) + (($365*108)|0)|0);
    $370 = ((($369)) + 8|0);
    $371 = HEAP32[$370>>2]|0;
    $372 = $371 & 16;
    $373 = ($372|0)!=(0);
    if ($373) {
     $374 = $7;
     $375 = ((($374)) + 8|0);
     $376 = HEAP32[$375>>2]|0;
     $377 = $376 | 32;
     HEAP32[$375>>2] = $377;
    }
   } else {
    $387 = ((($52)) + 104|0);
    $388 = HEAP32[$387>>2]|0;
    $389 = $388 & 1;
    $390 = ($389|0)!=(0);
    if ($390) {
     $391 = $7;
     $392 = ((($391)) + 8|0);
     $393 = HEAP32[$392>>2]|0;
     $394 = $393 | 33;
     HEAP32[$392>>2] = $394;
    }
    $395 = $7;
    $396 = ((($395)) + 104|0);
    $397 = HEAP32[$396>>2]|0;
    $398 = $397 & 2;
    $399 = ($398|0)!=(0);
    if ($399) {
     $400 = $7;
     $401 = ((($400)) + 8|0);
     $402 = HEAP32[$401>>2]|0;
     $403 = $402 | 8;
     HEAP32[$401>>2] = $403;
    }
    $404 = $7;
    $405 = ((($404)) + 8|0);
    $406 = HEAP32[$405>>2]|0;
    $407 = $406 & 1;
    $408 = ($407|0)!=(0);
    if (!($408)) {
     $409 = $7;
     $410 = ((($409)) + 40|0);
     HEAP32[$410>>2] = -1;
    }
   }
  } while(0);
  $411 = $7;
  $412 = ((($411)) + 48|0);
  $413 = HEAP32[$412>>2]|0;
  $414 = ($413|0)==(-2147483648);
  if ($414) {
   $415 = $7;
   $416 = ((($415)) + 48|0);
   HEAP32[$416>>2] = 0;
  }
  $417 = $5;
  $418 = (($417) + 1)|0;
  $5 = $418;
 }
 if ((label|0) == 20) {
  $2 = -1;
  $419 = $2;
  STACKTOP = sp;return ($419|0);
 }
 else if ((label|0) == 59) {
  $2 = 0;
  $419 = $2;
  STACKTOP = sp;return ($419|0);
 }
 return (0)|0;
}
function _append_uint32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = $3;
  $9 = ((($8)) + 1|0);
  $3 = $9;
  HEAP8[$8>>0] = 48;
  $10 = $3;
  $2 = $10;
  $205 = $2;
  STACKTOP = sp;return ($205|0);
 }
 $11 = $4;
 $12 = ($11>>>0)<(100);
 L5: do {
  if ($12) {
   label = 23;
  } else {
   $13 = $4;
   $14 = ($13>>>0)<(10000);
   L7: do {
    if ($14) {
     label = 19;
    } else {
     $15 = $4;
     $16 = ($15>>>0)<(1000000);
     L9: do {
      if ($16) {
       label = 15;
      } else {
       $17 = $4;
       $18 = ($17>>>0)<(100000000);
       do {
        if ($18) {
         label = 11;
        } else {
         $19 = $4;
         $20 = (($19>>>0) / 1000000000)&-1;
         $5 = $20;
         $21 = ($20|0)!=(0);
         if ($21) {
          $22 = $5;
          $23 = (($22) + 48)|0;
          $24 = $23&255;
          $25 = $3;
          $26 = ((($25)) + 1|0);
          $3 = $26;
          HEAP8[$25>>0] = $24;
          $27 = $5;
          $28 = Math_imul($27, 1000000000)|0;
          $29 = $4;
          $30 = (($29) - ($28))|0;
          $4 = $30;
          $31 = $4;
          $32 = (($31>>>0) / 100000000)&-1;
          $33 = (($32) + 48)|0;
          $34 = $33&255;
          $35 = $3;
          $36 = ((($35)) + 1|0);
          $3 = $36;
          HEAP8[$35>>0] = $34;
          $37 = $4;
          $38 = (($37>>>0) % 100000000)&-1;
          $4 = $38;
         } else {
          $39 = $4;
          $40 = (($39>>>0) / 100000000)&-1;
          $5 = $40;
          $41 = ($40|0)!=(0);
          if (!($41)) {
           label = 11;
           break;
          }
          $42 = $5;
          $43 = (($42) + 48)|0;
          $44 = $43&255;
          $45 = $3;
          $46 = ((($45)) + 1|0);
          $3 = $46;
          HEAP8[$45>>0] = $44;
          $47 = $5;
          $48 = Math_imul($47, 100000000)|0;
          $49 = $4;
          $50 = (($49) - ($48))|0;
          $4 = $50;
         }
         $143 = $4;
         $144 = (($143>>>0) / 10000000)&-1;
         $145 = (($144) + 48)|0;
         $146 = $145&255;
         $147 = $3;
         $148 = ((($147)) + 1|0);
         $3 = $148;
         HEAP8[$147>>0] = $146;
         $149 = $4;
         $150 = (($149>>>0) % 10000000)&-1;
         $4 = $150;
         label = 29;
        }
       } while(0);
       do {
        if ((label|0) == 11) {
         $51 = $4;
         $52 = (($51>>>0) / 10000000)&-1;
         $5 = $52;
         $53 = ($52|0)!=(0);
         if ($53) {
          $54 = $5;
          $55 = (($54) + 48)|0;
          $56 = $55&255;
          $57 = $3;
          $58 = ((($57)) + 1|0);
          $3 = $58;
          HEAP8[$57>>0] = $56;
          $59 = $5;
          $60 = Math_imul($59, 10000000)|0;
          $61 = $4;
          $62 = (($61) - ($60))|0;
          $4 = $62;
          label = 29;
          break;
         }
         $63 = $4;
         $64 = (($63>>>0) / 1000000)&-1;
         $5 = $64;
         $65 = ($64|0)!=(0);
         if (!($65)) {
          label = 15;
          break L9;
         }
         $66 = $5;
         $67 = (($66) + 48)|0;
         $68 = $67&255;
         $69 = $3;
         $70 = ((($69)) + 1|0);
         $3 = $70;
         HEAP8[$69>>0] = $68;
         $71 = $5;
         $72 = ($71*1000000)|0;
         $73 = $4;
         $74 = (($73) - ($72))|0;
         $4 = $74;
        }
       } while(0);
       if ((label|0) == 29) {
        $151 = $4;
        $152 = (($151>>>0) / 1000000)&-1;
        $153 = (($152) + 48)|0;
        $154 = $153&255;
        $155 = $3;
        $156 = ((($155)) + 1|0);
        $3 = $156;
        HEAP8[$155>>0] = $154;
        $157 = $4;
        $158 = (($157>>>0) % 1000000)&-1;
        $4 = $158;
       }
       $159 = $4;
       $160 = (($159>>>0) / 100000)&-1;
       $161 = (($160) + 48)|0;
       $162 = $161&255;
       $163 = $3;
       $164 = ((($163)) + 1|0);
       $3 = $164;
       HEAP8[$163>>0] = $162;
       $165 = $4;
       $166 = (($165>>>0) % 100000)&-1;
       $4 = $166;
       label = 31;
      }
     } while(0);
     do {
      if ((label|0) == 15) {
       $75 = $4;
       $76 = (($75>>>0) / 100000)&-1;
       $5 = $76;
       $77 = ($76|0)!=(0);
       if ($77) {
        $78 = $5;
        $79 = (($78) + 48)|0;
        $80 = $79&255;
        $81 = $3;
        $82 = ((($81)) + 1|0);
        $3 = $82;
        HEAP8[$81>>0] = $80;
        $83 = $5;
        $84 = ($83*100000)|0;
        $85 = $4;
        $86 = (($85) - ($84))|0;
        $4 = $86;
        label = 31;
        break;
       }
       $87 = $4;
       $88 = (($87>>>0) / 10000)&-1;
       $5 = $88;
       $89 = ($88|0)!=(0);
       if (!($89)) {
        label = 19;
        break L7;
       }
       $90 = $5;
       $91 = (($90) + 48)|0;
       $92 = $91&255;
       $93 = $3;
       $94 = ((($93)) + 1|0);
       $3 = $94;
       HEAP8[$93>>0] = $92;
       $95 = $5;
       $96 = ($95*10000)|0;
       $97 = $4;
       $98 = (($97) - ($96))|0;
       $4 = $98;
      }
     } while(0);
     if ((label|0) == 31) {
      $167 = $4;
      $168 = (($167>>>0) / 10000)&-1;
      $169 = (($168) + 48)|0;
      $170 = $169&255;
      $171 = $3;
      $172 = ((($171)) + 1|0);
      $3 = $172;
      HEAP8[$171>>0] = $170;
      $173 = $4;
      $174 = (($173>>>0) % 10000)&-1;
      $4 = $174;
     }
     $175 = $4;
     $176 = (($175>>>0) / 1000)&-1;
     $177 = (($176) + 48)|0;
     $178 = $177&255;
     $179 = $3;
     $180 = ((($179)) + 1|0);
     $3 = $180;
     HEAP8[$179>>0] = $178;
     $181 = $4;
     $182 = (($181>>>0) % 1000)&-1;
     $4 = $182;
     label = 33;
    }
   } while(0);
   do {
    if ((label|0) == 19) {
     $99 = $4;
     $100 = (($99>>>0) / 1000)&-1;
     $5 = $100;
     $101 = ($100|0)!=(0);
     if ($101) {
      $102 = $5;
      $103 = (($102) + 48)|0;
      $104 = $103&255;
      $105 = $3;
      $106 = ((($105)) + 1|0);
      $3 = $106;
      HEAP8[$105>>0] = $104;
      $107 = $5;
      $108 = ($107*1000)|0;
      $109 = $4;
      $110 = (($109) - ($108))|0;
      $4 = $110;
      label = 33;
      break;
     }
     $111 = $4;
     $112 = (($111>>>0) / 100)&-1;
     $5 = $112;
     $113 = ($112|0)!=(0);
     if (!($113)) {
      label = 23;
      break L5;
     }
     $114 = $5;
     $115 = (($114) + 48)|0;
     $116 = $115&255;
     $117 = $3;
     $118 = ((($117)) + 1|0);
     $3 = $118;
     HEAP8[$117>>0] = $116;
     $119 = $5;
     $120 = ($119*100)|0;
     $121 = $4;
     $122 = (($121) - ($120))|0;
     $4 = $122;
    }
   } while(0);
   if ((label|0) == 33) {
    $183 = $4;
    $184 = (($183>>>0) / 100)&-1;
    $185 = (($184) + 48)|0;
    $186 = $185&255;
    $187 = $3;
    $188 = ((($187)) + 1|0);
    $3 = $188;
    HEAP8[$187>>0] = $186;
    $189 = $4;
    $190 = (($189>>>0) % 100)&-1;
    $4 = $190;
   }
   $191 = $4;
   $192 = (($191>>>0) / 10)&-1;
   $193 = (($192) + 48)|0;
   $194 = $193&255;
   $195 = $3;
   $196 = ((($195)) + 1|0);
   $3 = $196;
   HEAP8[$195>>0] = $194;
   $197 = $4;
   $198 = (($197>>>0) % 10)&-1;
   $4 = $198;
  }
 } while(0);
 do {
  if ((label|0) == 23) {
   $123 = $4;
   $124 = (($123>>>0) / 10)&-1;
   $5 = $124;
   $125 = ($124|0)!=(0);
   if ($125) {
    $126 = $5;
    $127 = (($126) + 48)|0;
    $128 = $127&255;
    $129 = $3;
    $130 = ((($129)) + 1|0);
    $3 = $130;
    HEAP8[$129>>0] = $128;
    $131 = $5;
    $132 = ($131*10)|0;
    $133 = $4;
    $134 = (($133) - ($132))|0;
    $4 = $134;
    break;
   }
   $135 = $4;
   $136 = ($135|0)!=(0);
   if ($136) {
    $137 = $4;
    $138 = (($137) + 48)|0;
    $139 = $138&255;
    $140 = $3;
    $141 = ((($140)) + 1|0);
    $3 = $141;
    HEAP8[$140>>0] = $139;
   }
   $142 = $3;
   $2 = $142;
   $205 = $2;
   STACKTOP = sp;return ($205|0);
  }
 } while(0);
 $199 = $4;
 $200 = (($199) + 48)|0;
 $201 = $200&255;
 $202 = $3;
 $203 = ((($202)) + 1|0);
 $3 = $203;
 HEAP8[$202>>0] = $201;
 $204 = $3;
 $2 = $204;
 $205 = $2;
 STACKTOP = sp;return ($205|0);
}
function _map_find($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9*3)|0;
 $11 = $4;
 $12 = ((($11)) + 1|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = (($10) + ($14))|0;
 $16 = $15 & 31;
 $17 = $3;
 $18 = (($17) + ($16<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $6 = $19;
 while(1) {
  $20 = $6;
  $21 = ($20|0)!=(0|0);
  if ($21) {
   $22 = $6;
   $23 = HEAP32[$22>>2]|0;
   $24 = $5;
   $25 = ($23|0)!=($24|0);
   $29 = $25;
  } else {
   $29 = 0;
  }
  $26 = $6;
  if (!($29)) {
   break;
  }
  $27 = ((($26)) + 20|0);
  $28 = HEAP32[$27>>2]|0;
  $6 = $28;
 }
 STACKTOP = sp;return ($26|0);
}
function _cram_decode_slice_thread($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_cram_decode_slice($5,$8,$11,$14)|0);
 $16 = $2;
 $17 = ((($16)) + 16|0);
 HEAP32[$17>>2] = $15;
 $18 = $2;
 STACKTOP = sp;return ($18|0);
}
function _cram_decode_slice_mt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $5;
 $12 = ((($11)) + 34668|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $15 = $5;
  $16 = $6;
  $17 = $7;
  $18 = $8;
  $19 = (_cram_decode_slice($15,$16,$17,$18)|0);
  $4 = $19;
  $54 = $4;
  STACKTOP = sp;return ($54|0);
 }
 $20 = (_malloc(20)|0);
 $9 = $20;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  $4 = -1;
  $54 = $4;
  STACKTOP = sp;return ($54|0);
 }
 $22 = $5;
 $23 = $9;
 HEAP32[$23>>2] = $22;
 $24 = $6;
 $25 = $9;
 $26 = ((($25)) + 4|0);
 HEAP32[$26>>2] = $24;
 $27 = $7;
 $28 = $9;
 $29 = ((($28)) + 8|0);
 HEAP32[$29>>2] = $27;
 $30 = $8;
 $31 = $9;
 $32 = ((($31)) + 12|0);
 HEAP32[$32>>2] = $30;
 $33 = $5;
 $34 = ((($33)) + 34672|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (_t_pool_results_queue_sz($35)|0);
 $37 = ($36|0)!=(0);
 $38 = $37 ? 1 : 0;
 $10 = $38;
 $39 = $5;
 $40 = ((($39)) + 34668|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $5;
 $43 = ((($42)) + 34672|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $9;
 $46 = $10;
 $47 = (_t_pool_dispatch2($41,$44,62,$45,$46)|0);
 $48 = (-1)==($47|0);
 if ($48) {
  $49 = $9;
  $50 = $5;
  $51 = ((($50)) + 34764|0);
  HEAP32[$51>>2] = $49;
 } else {
  $52 = $5;
  $53 = ((($52)) + 34764|0);
  HEAP32[$53>>2] = 0;
 }
 $4 = 0;
 $54 = $4;
 STACKTOP = sp;return ($54|0);
}
function _cram_get_seq($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $2 = $0;
 while(1) {
  $5 = $2;
  $6 = ((($5)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$3>>2] = $7;
  $8 = HEAP32[$3>>2]|0;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = HEAP32[$3>>2]|0;
   $11 = ((($10)) + 100|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)!=(0|0);
   if ($13) {
    $14 = HEAP32[$3>>2]|0;
    $15 = ((($14)) + 72|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = HEAP32[$3>>2]|0;
    $18 = ((($17)) + 68|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($16|0)<($19|0);
    if ($20) {
     $21 = HEAP32[$3>>2]|0;
     $22 = ((($21)) + 100|0);
     $23 = HEAP32[$22>>2]|0;
     $4 = $23;
     $24 = $2;
     $25 = ((($24)) + 316|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)!=(-2);
     if (!($27)) {
      label = 22;
      break;
     }
     $31 = $2;
     $32 = ((($31)) + 316|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)==(-1);
     if ($34) {
      $35 = HEAP32[$3>>2]|0;
      $36 = ((($35)) + 72|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = $4;
      $39 = ((($38)) + 24|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = (($40) + (($37*108)|0)|0);
      $42 = ((($41)) + 4|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($43|0)!=(-1);
      if ($44) {
       $45 = HEAP32[$3>>2]|0;
       $46 = ((($45)) + 72|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = (($47) + 1)|0;
       HEAP32[$46>>2] = $48;
       continue;
      }
     }
     $49 = HEAP32[$3>>2]|0;
     $50 = ((($49)) + 72|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = $4;
     $53 = ((($52)) + 24|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (($54) + (($51*108)|0)|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $2;
     $59 = ((($58)) + 316|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($57|0)<($60|0);
     if ($61) {
      $62 = HEAP32[$3>>2]|0;
      $63 = ((($62)) + 72|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = $4;
      $66 = ((($65)) + 24|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (($67) + (($64*108)|0)|0);
      $69 = ((($68)) + 4|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($70|0)!=(-1);
      if ($71) {
       $72 = HEAP32[$3>>2]|0;
       $73 = ((($72)) + 72|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = (($74) + 1)|0;
       HEAP32[$73>>2] = $75;
       continue;
      }
     }
     $76 = HEAP32[$3>>2]|0;
     $77 = ((($76)) + 72|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = $4;
     $80 = ((($79)) + 24|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (($81) + (($78*108)|0)|0);
     $83 = ((($82)) + 4|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = $2;
     $86 = ((($85)) + 316|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = ($84|0)!=($87|0);
     $89 = $2;
     if ($88) {
      label = 15;
      break;
     }
     $94 = ((($89)) + 316|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)!=(-1);
     if ($96) {
      $97 = HEAP32[$3>>2]|0;
      $98 = ((($97)) + 72|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = $4;
      $101 = ((($100)) + 24|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = (($102) + (($99*108)|0)|0);
      $104 = ((($103)) + 20|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = $2;
      $107 = ((($106)) + 316|0);
      $108 = ((($107)) + 8|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = ($105|0)>($109|0);
      if ($110) {
       label = 18;
       break;
      }
     }
     $116 = $2;
     $117 = ((($116)) + 316|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = ($118|0)!=(-1);
     if (!($119)) {
      label = 22;
      break;
     }
     $120 = HEAP32[$3>>2]|0;
     $121 = ((($120)) + 72|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = $4;
     $124 = ((($123)) + 24|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = (($125) + (($122*108)|0)|0);
     $127 = ((($126)) + 88|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = $2;
     $130 = ((($129)) + 316|0);
     $131 = ((($130)) + 4|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($128|0)<($132|0);
     if (!($133)) {
      label = 22;
      break;
     }
     $134 = HEAP32[$3>>2]|0;
     $135 = ((($134)) + 72|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($136) + 1)|0;
     HEAP32[$135>>2] = $137;
     continue;
    }
   }
  }
  $28 = $2;
  $29 = (_cram_next_slice($28,$3)|0);
  $4 = $29;
  $30 = ($29|0)!=(0|0);
  if (!($30)) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  $1 = 0;
  $152 = $1;
  STACKTOP = sp;return ($152|0);
 }
 else if ((label|0) == 15) {
  $90 = ((($89)) + 34644|0);
  HEAP32[$90>>2] = 1;
  $91 = $4;
  _cram_free_slice($91);
  $92 = HEAP32[$3>>2]|0;
  $93 = ((($92)) + 100|0);
  HEAP32[$93>>2] = 0;
  $1 = 0;
  $152 = $1;
  STACKTOP = sp;return ($152|0);
 }
 else if ((label|0) == 18) {
  $111 = $2;
  $112 = ((($111)) + 34644|0);
  HEAP32[$112>>2] = 1;
  $113 = $4;
  _cram_free_slice($113);
  $114 = HEAP32[$3>>2]|0;
  $115 = ((($114)) + 100|0);
  HEAP32[$115>>2] = 0;
  $1 = 0;
  $152 = $1;
  STACKTOP = sp;return ($152|0);
 }
 else if ((label|0) == 22) {
  $138 = HEAP32[$3>>2]|0;
  $139 = $2;
  $140 = ((($139)) + 36|0);
  HEAP32[$140>>2] = $138;
  $141 = $4;
  $142 = HEAP32[$3>>2]|0;
  $143 = ((($142)) + 100|0);
  HEAP32[$143>>2] = $141;
  $144 = HEAP32[$3>>2]|0;
  $145 = ((($144)) + 72|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = (($146) + 1)|0;
  HEAP32[$145>>2] = $147;
  $148 = $4;
  $149 = ((($148)) + 24|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = (($150) + (($146*108)|0)|0);
  $1 = $151;
  $152 = $1;
  STACKTOP = sp;return ($152|0);
 }
 return (0)|0;
}
function _cram_next_slice($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $6 = 0;
 $10 = $3;
 $11 = ((($10)) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $5 = $12;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  while(1) {
   $14 = $3;
   $15 = (_cram_read_container($14)|0);
   $16 = $3;
   $17 = ((($16)) + 36|0);
   HEAP32[$17>>2] = $15;
   $5 = $15;
   $18 = ($15|0)!=(0|0);
   if (!($18)) {
    label = 3;
    break;
   }
   $19 = $5;
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0);
   if (!($21)) {
    break;
   }
  }
  if ((label|0) == 3) {
   $2 = 0;
   $440 = $2;
   STACKTOP = sp;return ($440|0);
  }
  $22 = $3;
  $23 = ((($22)) + 316|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)!=(-2);
  do {
   if ($25) {
    L10: while(1) {
     $26 = $5;
     $27 = ((($26)) + 4|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)!=(-2);
     if (!($29)) {
      label = 15;
      break;
     }
     $30 = $5;
     $31 = ((($30)) + 4|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = $3;
     $34 = ((($33)) + 316|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = ($32|0)<($35|0);
     if (!($36)) {
      $37 = $5;
      $38 = ((($37)) + 8|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = $5;
      $41 = ((($40)) + 12|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (($39) + ($42))|0;
      $44 = (($43) - 1)|0;
      $45 = $3;
      $46 = ((($45)) + 316|0);
      $47 = ((($46)) + 4|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($44|0)<($48|0);
      if (!($49)) {
       label = 15;
       break;
      }
     }
     $50 = $3;
     $51 = $5;
     $52 = HEAP32[$51>>2]|0;
     $53 = (_cram_seek($50,$52,1)|0);
     $54 = (0)!=($53|0);
     if ($54) {
      label = 10;
      break;
     }
     $55 = $3;
     $56 = ((($55)) + 36|0);
     $57 = HEAP32[$56>>2]|0;
     _cram_free_container($57);
     while(1) {
      $58 = $3;
      $59 = (_cram_read_container($58)|0);
      $60 = $3;
      $61 = ((($60)) + 36|0);
      HEAP32[$61>>2] = $59;
      $5 = $59;
      $62 = ($59|0)!=(0|0);
      if (!($62)) {
       label = 13;
       break L10;
      }
      $63 = $5;
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0);
      if (!($65)) {
       continue L10;
      }
     }
    }
    if ((label|0) == 10) {
     $2 = 0;
     $440 = $2;
     STACKTOP = sp;return ($440|0);
    }
    else if ((label|0) == 13) {
     $2 = 0;
     $440 = $2;
     STACKTOP = sp;return ($440|0);
    }
    else if ((label|0) == 15) {
     $66 = $5;
     $67 = ((($66)) + 4|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)!=(-2);
     if (!($69)) {
      break;
     }
     $70 = $5;
     $71 = ((($70)) + 4|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = $3;
     $74 = ((($73)) + 316|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ($72|0)!=($75|0);
     if (!($76)) {
      break;
     }
     $2 = 0;
     $440 = $2;
     STACKTOP = sp;return ($440|0);
    }
   }
  } while(0);
  $77 = $3;
  $78 = (_cram_read_block($77)|0);
  $79 = $5;
  $80 = ((($79)) + 56|0);
  HEAP32[$80>>2] = $78;
  $81 = ($78|0)!=(0|0);
  if (!($81)) {
   $2 = 0;
   $440 = $2;
   STACKTOP = sp;return ($440|0);
  }
  $82 = $5;
  $83 = ((($82)) + 56|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ((($84)) + 8|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($86|0)!=(1);
  if ($87) {
   $2 = 0;
   $440 = $2;
   STACKTOP = sp;return ($440|0);
  }
  $88 = $3;
  $89 = $5;
  $90 = ((($89)) + 56|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (_cram_decode_compression_header($88,$91)|0);
  $93 = $5;
  $94 = ((($93)) + 52|0);
  HEAP32[$94>>2] = $92;
  $95 = $5;
  $96 = ((($95)) + 52|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($97|0)!=(0|0);
  if (!($98)) {
   $2 = 0;
   $440 = $2;
   STACKTOP = sp;return ($440|0);
  }
  $99 = $5;
  $100 = ((($99)) + 52|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ((($101)) + 44|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103|0)!=(0);
  if (!($104)) {
   $105 = $3;
   $106 = ((($105)) + 16|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (_sam_hdr_sort_order($107)|0);
   $109 = ($108|0)!=(2);
   if ($109) {
    $110 = $3;
    $111 = ((($110)) + 34704|0);
    (_pthread_mutex_lock(($111|0))|0);
    $112 = $3;
    $113 = ((($112)) + 34656|0);
    HEAP32[$113>>2] = 1;
    $114 = $3;
    $115 = ((($114)) + 34704|0);
    (_pthread_mutex_unlock(($115|0))|0);
   }
  }
 }
 $116 = $5;
 $117 = ((($116)) + 100|0);
 $118 = HEAP32[$117>>2]|0;
 $6 = $118;
 $119 = ($118|0)!=(0|0);
 if ($119) {
  $120 = $5;
  $121 = ((($120)) + 100|0);
  HEAP32[$121>>2] = 0;
  $122 = $6;
  _cram_free_slice($122);
  $6 = 0;
 }
 $123 = $5;
 $124 = ((($123)) + 64|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = $5;
 $127 = ((($126)) + 60|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = ($125|0)==($128|0);
 if ($129) {
  $130 = $5;
  _cram_free_container($130);
  $5 = 0;
 }
 L50: while(1) {
  $131 = $3;
  $132 = ((($131)) + 34764|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = ($133|0)!=(0|0);
  $135 = $3;
  if ($134) {
   $136 = ((($135)) + 34764|0);
   $137 = HEAP32[$136>>2]|0;
   $7 = $137;
   $138 = $7;
   $139 = ((($138)) + 4|0);
   $140 = HEAP32[$139>>2]|0;
   $5 = $140;
   $141 = $7;
   $142 = ((($141)) + 8|0);
   $143 = HEAP32[$142>>2]|0;
   $6 = $143;
   $144 = $3;
   $145 = ((($144)) + 34764|0);
   $146 = HEAP32[$145>>2]|0;
   _free($146);
   $147 = $3;
   $148 = ((($147)) + 34764|0);
   HEAP32[$148>>2] = 0;
  } else {
   $149 = ((($135)) + 34768|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = ($150|0)!=(0);
   if (!($151)) {
    while(1) {
     $152 = $5;
     $153 = ($152|0)!=(0|0);
     if ($153) {
      $154 = $5;
      $155 = ((($154)) + 64|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = $5;
      $158 = ((($157)) + 60|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($156|0)==($159|0);
      if ($160) {
       label = 36;
      }
     } else {
      label = 36;
     }
     if ((label|0) == 36) {
      while(1) {
       label = 0;
       $161 = $3;
       $162 = (_cram_read_container($161)|0);
       $163 = $3;
       $164 = ((($163)) + 36|0);
       HEAP32[$164>>2] = $162;
       $5 = $162;
       $165 = ($162|0)!=(0|0);
       if (!($165)) {
        label = 37;
        break;
       }
       $172 = $5;
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)==(0);
       if ($174) {
        label = 36;
       } else {
        break;
       }
      }
      if ((label|0) == 37) {
       label = 0;
       $166 = $3;
       $167 = ((($166)) + 34668|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)!=(0|0);
       if (!($169)) {
        label = 39;
        break L50;
       }
       $170 = $3;
       $171 = ((($170)) + 34768|0);
       HEAP32[$171>>2] = 1;
      }
      $175 = $3;
      $176 = ((($175)) + 34768|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = ($177|0)!=(0);
      if ($178) {
       break L50;
      }
      $179 = $3;
      $180 = ((($179)) + 316|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = ($181|0)!=(-2);
      if ($182) {
       $183 = $5;
       $184 = ((($183)) + 4|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)!=(-2);
       if ($186) {
        $187 = $3;
        $188 = ((($187)) + 312|0);
        $189 = HEAP32[$188>>2]|0;
        $190 = $189 | 8;
        HEAP32[$188>>2] = $190;
        $191 = $5;
        $192 = ((($191)) + 4|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = $3;
        $195 = ((($194)) + 316|0);
        $196 = HEAP32[$195>>2]|0;
        $197 = ($193|0)!=($196|0);
        $198 = $5;
        if ($197) {
         label = 45;
         break L50;
        }
        $205 = ((($198)) + 8|0);
        $206 = HEAP32[$205>>2]|0;
        $207 = $3;
        $208 = ((($207)) + 316|0);
        $209 = ((($208)) + 8|0);
        $210 = HEAP32[$209>>2]|0;
        $211 = ($206|0)>($210|0);
        $212 = $5;
        if ($211) {
         label = 47;
         break L50;
        }
        $219 = ((($212)) + 8|0);
        $220 = HEAP32[$219>>2]|0;
        $221 = $5;
        $222 = ((($221)) + 12|0);
        $223 = HEAP32[$222>>2]|0;
        $224 = (($220) + ($223))|0;
        $225 = (($224) - 1)|0;
        $226 = $3;
        $227 = ((($226)) + 316|0);
        $228 = ((($227)) + 4|0);
        $229 = HEAP32[$228>>2]|0;
        $230 = ($225|0)<($229|0);
        if ($230) {
         label = 49;
         break;
        }
       }
      }
      $245 = $3;
      $246 = (_cram_read_block($245)|0);
      $247 = $5;
      $248 = ((($247)) + 56|0);
      HEAP32[$248>>2] = $246;
      $249 = ($246|0)!=(0|0);
      if (!($249)) {
       label = 51;
       break L50;
      }
      $250 = $5;
      $251 = ((($250)) + 56|0);
      $252 = HEAP32[$251>>2]|0;
      $253 = ((($252)) + 8|0);
      $254 = HEAP32[$253>>2]|0;
      $255 = ($254|0)!=(1);
      if ($255) {
       label = 53;
       break L50;
      }
      $256 = $3;
      $257 = $5;
      $258 = ((($257)) + 56|0);
      $259 = HEAP32[$258>>2]|0;
      $260 = (_cram_decode_compression_header($256,$259)|0);
      $261 = $5;
      $262 = ((($261)) + 52|0);
      HEAP32[$262>>2] = $260;
      $263 = $5;
      $264 = ((($263)) + 52|0);
      $265 = HEAP32[$264>>2]|0;
      $266 = ($265|0)!=(0|0);
      if (!($266)) {
       label = 55;
       break L50;
      }
      $267 = $5;
      $268 = ((($267)) + 52|0);
      $269 = HEAP32[$268>>2]|0;
      $270 = ((($269)) + 44|0);
      $271 = HEAP32[$270>>2]|0;
      $272 = ($271|0)!=(0);
      if (!($272)) {
       $273 = $3;
       $274 = ((($273)) + 16|0);
       $275 = HEAP32[$274>>2]|0;
       $276 = (_sam_hdr_sort_order($275)|0);
       $277 = ($276|0)!=(2);
       if ($277) {
        $278 = $3;
        $279 = ((($278)) + 34704|0);
        (_pthread_mutex_lock(($279|0))|0);
        $280 = $3;
        $281 = ((($280)) + 34656|0);
        HEAP32[$281>>2] = 1;
        $282 = $3;
        $283 = ((($282)) + 34704|0);
        (_pthread_mutex_unlock(($283|0))|0);
       }
      }
     }
     $284 = $5;
     $285 = ((($284)) + 32|0);
     $286 = HEAP32[$285>>2]|0;
     $287 = ($286|0)==(0);
     if (!($287)) {
      break;
     }
     $288 = $5;
     _cram_free_container($288);
     $5 = 0;
    }
    if ((label|0) == 49) {
     label = 0;
     $231 = $5;
     $232 = ((($231)) + 68|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = $5;
     $235 = ((($234)) + 72|0);
     HEAP32[$235>>2] = $233;
     $236 = $5;
     $237 = ((($236)) + 60|0);
     $238 = HEAP32[$237>>2]|0;
     $239 = $5;
     $240 = ((($239)) + 64|0);
     HEAP32[$240>>2] = $238;
     $241 = $3;
     $242 = $5;
     $243 = HEAP32[$242>>2]|0;
     (_cram_seek($241,$243,1)|0);
     $244 = $5;
     _cram_free_container($244);
     $5 = 0;
     continue;
    }
    $289 = $3;
    $290 = (_cram_read_slice($289)|0);
    $291 = $5;
    $292 = ((($291)) + 100|0);
    HEAP32[$292>>2] = $290;
    $6 = $290;
    $293 = ($290|0)!=(0|0);
    if (!($293)) {
     label = 62;
     break;
    }
    $294 = $5;
    $295 = ((($294)) + 64|0);
    $296 = HEAP32[$295>>2]|0;
    $297 = (($296) + 1)|0;
    HEAP32[$295>>2] = $297;
    $298 = $5;
    $299 = ((($298)) + 72|0);
    HEAP32[$299>>2] = 0;
    $300 = $6;
    $301 = HEAP32[$300>>2]|0;
    $302 = ((($301)) + 16|0);
    $303 = HEAP32[$302>>2]|0;
    $304 = $5;
    $305 = ((($304)) + 68|0);
    HEAP32[$305>>2] = $303;
    $306 = $6;
    $307 = HEAP32[$306>>2]|0;
    $308 = ((($307)) + 8|0);
    $309 = HEAP32[$308>>2]|0;
    $310 = $6;
    $311 = ((($310)) + 16|0);
    HEAP32[$311>>2] = $309;
    $312 = $3;
    $313 = ((($312)) + 316|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = ($314|0)!=(-2);
    if ($315) {
     $316 = $6;
     $317 = HEAP32[$316>>2]|0;
     $318 = ((($317)) + 4|0);
     $319 = HEAP32[$318>>2]|0;
     $320 = ($319|0)!=(-2);
     if ($320) {
      $321 = $6;
      $322 = HEAP32[$321>>2]|0;
      $323 = ((($322)) + 4|0);
      $324 = HEAP32[$323>>2]|0;
      $325 = $3;
      $326 = ((($325)) + 316|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = ($324|0)!=($327|0);
      if ($328) {
       label = 66;
       break;
      }
      $334 = $6;
      $335 = HEAP32[$334>>2]|0;
      $336 = ((($335)) + 8|0);
      $337 = HEAP32[$336>>2]|0;
      $338 = $3;
      $339 = ((($338)) + 316|0);
      $340 = ((($339)) + 8|0);
      $341 = HEAP32[$340>>2]|0;
      $342 = ($337|0)>($341|0);
      if ($342) {
       label = 68;
       break;
      }
      $348 = $6;
      $349 = HEAP32[$348>>2]|0;
      $350 = ((($349)) + 8|0);
      $351 = HEAP32[$350>>2]|0;
      $352 = $6;
      $353 = HEAP32[$352>>2]|0;
      $354 = ((($353)) + 12|0);
      $355 = HEAP32[$354>>2]|0;
      $356 = (($351) + ($355))|0;
      $357 = (($356) - 1)|0;
      $358 = $3;
      $359 = ((($358)) + 316|0);
      $360 = ((($359)) + 4|0);
      $361 = HEAP32[$360>>2]|0;
      $362 = ($357|0)<($361|0);
      if ($362) {
       $363 = $6;
       _cram_free_slice($363);
       $364 = $5;
       $365 = ((($364)) + 100|0);
       HEAP32[$365>>2] = 0;
       $366 = $5;
       _cram_free_container($366);
       $5 = 0;
       continue;
      }
     }
    }
   }
  }
  $367 = $5;
  $368 = ($367|0)!=(0|0);
  $369 = $6;
  $370 = ($369|0)!=(0|0);
  $or$cond = $368 & $370;
  if (!($or$cond)) {
   break;
  }
  $371 = $3;
  $372 = $5;
  $373 = $6;
  $374 = $3;
  $375 = ((($374)) + 16|0);
  $376 = HEAP32[$375>>2]|0;
  $377 = (_cram_decode_slice_mt($371,$372,$373,$376)|0);
  $378 = ($377|0)!=(0);
  if ($378) {
   label = 73;
   break;
  }
  $383 = $3;
  $384 = ((($383)) + 34668|0);
  $385 = HEAP32[$384>>2]|0;
  $386 = ($385|0)!=(0|0);
  if (!($386)) {
   break;
  }
  $387 = $3;
  $388 = ((($387)) + 34764|0);
  $389 = HEAP32[$388>>2]|0;
  $390 = ($389|0)!=(0|0);
  if ($390) {
   break;
  }
  $391 = $3;
  $392 = ((($391)) + 34672|0);
  $393 = HEAP32[$392>>2]|0;
  $394 = (_t_pool_results_queue_len($393)|0);
  $395 = $3;
  $396 = ((($395)) + 34668|0);
  $397 = HEAP32[$396>>2]|0;
  $398 = HEAP32[$397>>2]|0;
  $399 = ($394|0)>($398|0);
  if ($399) {
   break;
  }
 }
 switch (label|0) {
  case 39: {
   $2 = 0;
   $440 = $2;
   STACKTOP = sp;return ($440|0);
   break;
  }
  case 45: {
   _cram_free_container($198);
   $199 = $3;
   $200 = ((($199)) + 36|0);
   HEAP32[$200>>2] = 0;
   $201 = $3;
   $202 = ((($201)) + 34768|0);
   HEAP32[$202>>2] = 1;
   $203 = $3;
   $204 = ((($203)) + 34644|0);
   HEAP32[$204>>2] = 1;
   break;
  }
  case 47: {
   _cram_free_container($212);
   $213 = $3;
   $214 = ((($213)) + 36|0);
   HEAP32[$214>>2] = 0;
   $215 = $3;
   $216 = ((($215)) + 34768|0);
   HEAP32[$216>>2] = 1;
   $217 = $3;
   $218 = ((($217)) + 34644|0);
   HEAP32[$218>>2] = 1;
   break;
  }
  case 51: {
   $2 = 0;
   $440 = $2;
   STACKTOP = sp;return ($440|0);
   break;
  }
  case 53: {
   $2 = 0;
   $440 = $2;
   STACKTOP = sp;return ($440|0);
   break;
  }
  case 55: {
   $2 = 0;
   $440 = $2;
   STACKTOP = sp;return ($440|0);
   break;
  }
  case 62: {
   $2 = 0;
   $440 = $2;
   STACKTOP = sp;return ($440|0);
   break;
  }
  case 66: {
   $329 = $3;
   $330 = ((($329)) + 34644|0);
   HEAP32[$330>>2] = 1;
   $331 = $6;
   _cram_free_slice($331);
   $332 = $5;
   $333 = ((($332)) + 100|0);
   HEAP32[$333>>2] = 0;
   $2 = 0;
   $440 = $2;
   STACKTOP = sp;return ($440|0);
   break;
  }
  case 68: {
   $343 = $3;
   $344 = ((($343)) + 34644|0);
   HEAP32[$344>>2] = 1;
   $345 = $6;
   _cram_free_slice($345);
   $346 = $5;
   $347 = ((($346)) + 100|0);
   HEAP32[$347>>2] = 0;
   $2 = 0;
   $440 = $2;
   STACKTOP = sp;return ($440|0);
   break;
  }
  case 73: {
   $379 = HEAP32[2410]|0;
   (_fprintf($379,21413,$vararg_buffer)|0);
   $380 = $6;
   _cram_free_slice($380);
   $381 = $5;
   $382 = ((($381)) + 100|0);
   HEAP32[$382>>2] = 0;
   $2 = 0;
   $440 = $2;
   STACKTOP = sp;return ($440|0);
   break;
  }
 }
 $400 = $3;
 $401 = ((($400)) + 34668|0);
 $402 = HEAP32[$401>>2]|0;
 $403 = ($402|0)!=(0|0);
 do {
  if ($403) {
   $404 = $3;
   $405 = ((($404)) + 34768|0);
   $406 = HEAP32[$405>>2]|0;
   $407 = ($406|0)!=(0);
   if ($407) {
    $408 = $3;
    $409 = ((($408)) + 34672|0);
    $410 = HEAP32[$409>>2]|0;
    $411 = (_t_pool_results_queue_empty($410)|0);
    $412 = ($411|0)!=(0);
    if ($412) {
     $2 = 0;
     $440 = $2;
     STACKTOP = sp;return ($440|0);
    }
   }
   $413 = $3;
   $414 = ((($413)) + 34672|0);
   $415 = HEAP32[$414>>2]|0;
   $416 = (_t_pool_next_result_wait($415)|0);
   $8 = $416;
   $417 = $8;
   $418 = ($417|0)!=(0|0);
   if ($418) {
    $419 = $8;
    $420 = ((($419)) + 8|0);
    $421 = HEAP32[$420>>2]|0;
    $422 = ($421|0)!=(0|0);
    if ($422) {
     $424 = $8;
     $425 = ((($424)) + 8|0);
     $426 = HEAP32[$425>>2]|0;
     $9 = $426;
     $427 = $9;
     $428 = ((($427)) + 4|0);
     $429 = HEAP32[$428>>2]|0;
     $5 = $429;
     $430 = $9;
     $431 = ((($430)) + 8|0);
     $432 = HEAP32[$431>>2]|0;
     $6 = $432;
     $433 = $5;
     $434 = $3;
     $435 = ((($434)) + 36|0);
     HEAP32[$435>>2] = $433;
     $436 = $8;
     _t_pool_delete_result($436,1);
     break;
    }
   }
   $423 = HEAP32[2410]|0;
   (_fprintf($423,21438,$vararg_buffer3)|0);
   $2 = 0;
   $440 = $2;
   STACKTOP = sp;return ($440|0);
  }
 } while(0);
 $437 = $5;
 $438 = $4;
 HEAP32[$438>>2] = $437;
 $439 = $6;
 $2 = $439;
 $440 = $2;
 STACKTOP = sp;return ($440|0);
}
function _cram_get_bam_seq($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = (_cram_get_seq($8)|0);
 $5 = $9;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $3;
  $12 = ((($11)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $6 = $13;
  $14 = $6;
  $15 = ((($14)) + 100|0);
  $16 = HEAP32[$15>>2]|0;
  $7 = $16;
  $17 = $3;
  $18 = ((($17)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $3;
  $21 = $7;
  $22 = $5;
  $23 = $6;
  $24 = ((($23)) + 72|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) - 1)|0;
  $27 = $4;
  $28 = (_cram_to_bam($19,$20,$21,$22,$26,$27)|0);
  $2 = $28;
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 } else {
  $2 = -1;
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _cram_to_bam($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1088|0);
 $15 = sp + 64|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $23 = $8;
 $24 = ((($23)) + 312|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 & 1;
 $27 = ($26|0)!=(0);
 do {
  if ($27) {
   $28 = $10;
   $29 = ((($28)) + 32|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)!=(0);
   if ($31) {
    $32 = $9;
    $33 = ((($32)) + 64|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($34)) + 32|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = $10;
    $38 = ((($37)) + 28|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (($36) + ($39)|0);
    $16 = $40;
    $41 = $10;
    $42 = ((($41)) + 32|0);
    $43 = HEAP32[$42>>2]|0;
    $17 = $43;
    break;
   }
   $16 = $15;
   $44 = $8;
   $45 = ((($44)) + 20|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (_strlen($46)|0);
   $17 = $47;
   $48 = $16;
   $49 = $8;
   $50 = ((($49)) + 20|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $17;
   _memcpy(($48|0),($51|0),($52|0))|0;
   $53 = $17;
   $54 = $16;
   $55 = (($54) + ($53)|0);
   $16 = $55;
   $56 = $16;
   $57 = ((($56)) + 1|0);
   $16 = $57;
   HEAP8[$56>>0] = 58;
   $58 = $10;
   $59 = ((($58)) + 36|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)>=(0);
   if ($61) {
    $62 = $10;
    $63 = ((($62)) + 36|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $11;
    $66 = ($64|0)<($65|0);
    if ($66) {
     $67 = $16;
     $68 = $9;
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($69)) + 24|0);
     $71 = $70;
     $72 = $71;
     $73 = HEAP32[$72>>2]|0;
     $74 = (($71) + 4)|0;
     $75 = $74;
     $76 = HEAP32[$75>>2]|0;
     $77 = $10;
     $78 = ((($77)) + 36|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)<(0);
     $81 = $80 << 31 >> 31;
     $82 = (_i64Add(($73|0),($76|0),($79|0),($81|0))|0);
     $83 = tempRet0;
     $84 = (_i64Add(($82|0),($83|0),1,0)|0);
     $85 = tempRet0;
     $86 = (_append_uint64($67,$84,$85)|0);
     $16 = $86;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
   if ((label|0) == 7) {
    $87 = $16;
    $88 = $9;
    $89 = HEAP32[$88>>2]|0;
    $90 = ((($89)) + 24|0);
    $91 = $90;
    $92 = $91;
    $93 = HEAP32[$92>>2]|0;
    $94 = (($91) + 4)|0;
    $95 = $94;
    $96 = HEAP32[$95>>2]|0;
    $97 = $11;
    $98 = ($97|0)<(0);
    $99 = $98 << 31 >> 31;
    $100 = (_i64Add(($93|0),($96|0),($97|0),($99|0))|0);
    $101 = tempRet0;
    $102 = (_i64Add(($100|0),($101|0),1,0)|0);
    $103 = tempRet0;
    $104 = (_append_uint64($87,$102,$103)|0);
    $16 = $104;
   }
   $105 = $16;
   $106 = $105;
   $107 = $15;
   $108 = (($106) - ($107))|0;
   $17 = $108;
   $16 = $15;
  } else {
   $16 = 21466;
   $17 = 1;
  }
 } while(0);
 $109 = $10;
 $110 = ((($109)) + 24|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ($111|0)<(-1);
 if (!($112)) {
  $113 = $10;
  $114 = ((($113)) + 24|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $7;
  $117 = ((($116)) + 40|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ($115|0)>=($118|0);
  if (!($119)) {
   $120 = $10;
   $121 = ((($120)) + 24|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = ($122|0)!=(-1);
   if ($123) {
    $124 = $10;
    $125 = ((($124)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = $7;
    $128 = ((($127)) + 44|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (($129) + (($126*20)|0)|0);
    $131 = ((($130)) + 12|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = (($132) + 4)|0;
    $134 = $133;
   } else {
    $134 = 0;
   }
   $14 = $134;
   $135 = $8;
   $136 = ((($135)) + 312|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = $137 & 1536;
   $139 = ($138|0)!=(0);
   do {
    if ($139) {
     $140 = $9;
     $141 = ((($140)) + 68|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ((($142)) + 32|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = ($144|0)!=(0|0);
     if ($145) {
      $146 = $9;
      $147 = ((($146)) + 68|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ((($148)) + 32|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = $10;
      $152 = ((($151)) + 72|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = (($150) + ($153)|0);
      $20 = $154;
      break;
     }
     $6 = -1;
     $332 = $6;
     STACKTOP = sp;return ($332|0);
    } else {
     $20 = 21468;
     $155 = $10;
     $156 = ((($155)) + 16|0);
     HEAP32[$156>>2] = 0;
    }
   } while(0);
   $157 = $8;
   $158 = ((($157)) + 312|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = $159 & 1024;
   $161 = ($160|0)!=(0);
   do {
    if ($161) {
     $162 = $9;
     $163 = ((($162)) + 72|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = ((($164)) + 32|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = ($166|0)!=(0|0);
     if ($167) {
      $168 = $9;
      $169 = ((($168)) + 72|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ((($170)) + 32|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = $10;
      $174 = ((($173)) + 76|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = (($172) + ($175)|0);
      $21 = $176;
      break;
     }
     $6 = -1;
     $332 = $6;
     STACKTOP = sp;return ($332|0);
    } else {
     $21 = 0;
    }
   } while(0);
   $177 = $12;
   $178 = $10;
   $179 = ((($178)) + 60|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $14;
   $182 = (($180) + ($181))|0;
   $183 = $16;
   $184 = $17;
   $185 = $10;
   $186 = ((($185)) + 8|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = $10;
   $189 = ((($188)) + 4|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = $10;
   $192 = ((($191)) + 20|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $10;
   $195 = ((($194)) + 88|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = $10;
   $198 = ((($197)) + 92|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = $10;
   $201 = ((($200)) + 84|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = $10;
   $204 = ((($203)) + 80|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = $9;
   $207 = ((($206)) + 28|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = (($208) + ($205<<2)|0);
   $210 = $10;
   $211 = ((($210)) + 40|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = $10;
   $214 = ((($213)) + 44|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = $10;
   $217 = ((($216)) + 48|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = $10;
   $220 = ((($219)) + 16|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = $20;
   $223 = $21;
   $224 = (_bam_construct_seq($177,$182,$183,$184,$187,$190,$193,$196,$199,$202,$209,$212,$215,$218,$221,$222,$223)|0);
   $13 = $224;
   $225 = $13;
   $226 = ($225|0)==(-1);
   if ($226) {
    $6 = -1;
    $332 = $6;
    STACKTOP = sp;return ($332|0);
   }
   $227 = $12;
   $228 = HEAP32[$227>>2]|0;
   $229 = ((($228)) + 40|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = $12;
   $232 = HEAP32[$231>>2]|0;
   $233 = ((($232)) + 8|0);
   $234 = $233;
   $235 = $234;
   $236 = HEAP32[$235>>2]|0;
   $237 = (($234) + 4)|0;
   $238 = $237;
   $239 = HEAP32[$238>>2]|0;
   $240 = (_bitshift64Lshr(($236|0),($239|0),48)|0);
   $241 = tempRet0;
   $242 = $240 << 2;
   $243 = (($230) + ($242)|0);
   $244 = $12;
   $245 = HEAP32[$244>>2]|0;
   $246 = ((($245)) + 8|0);
   $247 = $246;
   $248 = $247;
   $249 = HEAP32[$248>>2]|0;
   $250 = (($247) + 4)|0;
   $251 = $250;
   $252 = HEAP32[$251>>2]|0;
   $253 = (_bitshift64Lshr(($249|0),($252|0),24)|0);
   $254 = tempRet0;
   $255 = $253 & 255;
   $256 = (($243) + ($255)|0);
   $257 = $12;
   $258 = HEAP32[$257>>2]|0;
   $259 = ((($258)) + 16|0);
   $260 = HEAP32[$259>>2]|0;
   $261 = (($260) + 1)|0;
   $262 = $261 >> 1;
   $263 = (($256) + ($262)|0);
   $264 = $12;
   $265 = HEAP32[$264>>2]|0;
   $266 = ((($265)) + 16|0);
   $267 = HEAP32[$266>>2]|0;
   $268 = (($263) + ($267)|0);
   $19 = $268;
   $18 = $268;
   $269 = $10;
   $270 = ((($269)) + 60|0);
   $271 = HEAP32[$270>>2]|0;
   $272 = ($271|0)!=(0);
   if ($272) {
    $273 = $18;
    $274 = $9;
    $275 = ((($274)) + 84|0);
    $276 = HEAP32[$275>>2]|0;
    $277 = ((($276)) + 32|0);
    $278 = HEAP32[$277>>2]|0;
    $279 = $10;
    $280 = ((($279)) + 56|0);
    $281 = HEAP32[$280>>2]|0;
    $282 = (($278) + ($281)|0);
    $283 = $10;
    $284 = ((($283)) + 60|0);
    $285 = HEAP32[$284>>2]|0;
    _memcpy(($273|0),($282|0),($285|0))|0;
    $286 = $10;
    $287 = ((($286)) + 60|0);
    $288 = HEAP32[$287>>2]|0;
    $289 = $18;
    $290 = (($289) + ($288)|0);
    $18 = $290;
   }
   $291 = $10;
   $292 = ((($291)) + 24|0);
   $293 = HEAP32[$292>>2]|0;
   $294 = ($293|0)!=(-1);
   if ($294) {
    $295 = $10;
    $296 = ((($295)) + 24|0);
    $297 = HEAP32[$296>>2]|0;
    $298 = $7;
    $299 = ((($298)) + 44|0);
    $300 = HEAP32[$299>>2]|0;
    $301 = (($300) + (($297*20)|0)|0);
    $302 = ((($301)) + 12|0);
    $303 = HEAP32[$302>>2]|0;
    $22 = $303;
    $304 = $18;
    $305 = ((($304)) + 1|0);
    $18 = $305;
    HEAP8[$304>>0] = 82;
    $306 = $18;
    $307 = ((($306)) + 1|0);
    $18 = $307;
    HEAP8[$306>>0] = 71;
    $308 = $18;
    $309 = ((($308)) + 1|0);
    $18 = $309;
    HEAP8[$308>>0] = 90;
    $310 = $18;
    $311 = $10;
    $312 = ((($311)) + 24|0);
    $313 = HEAP32[$312>>2]|0;
    $314 = $7;
    $315 = ((($314)) + 44|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = (($316) + (($313*20)|0)|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = $22;
    _memcpy(($310|0),($318|0),($319|0))|0;
    $320 = $22;
    $321 = $18;
    $322 = (($321) + ($320)|0);
    $18 = $322;
    $323 = $18;
    $324 = ((($323)) + 1|0);
    $18 = $324;
    HEAP8[$323>>0] = 0;
   }
   $325 = $13;
   $326 = $18;
   $327 = $19;
   $328 = $326;
   $329 = $327;
   $330 = (($328) - ($329))|0;
   $331 = (($325) + ($330))|0;
   $6 = $331;
   $332 = $6;
   STACKTOP = sp;return ($332|0);
  }
 }
 $6 = -1;
 $332 = $6;
 STACKTOP = sp;return ($332|0);
}
function _append_uint64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 8|0;
 $6 = sp;
 $4 = $0;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $2;
 $11 = $5;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16>>>0)<(0);
 $18 = ($13>>>0)<=(4294967295);
 $19 = ($16|0)==(0);
 $20 = $19 & $18;
 $21 = $17 | $20;
 if ($21) {
  $22 = $4;
  $23 = $5;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (_append_uint32($22,$25)|0);
  $3 = $29;
  $97 = $3;
  STACKTOP = sp;return ($97|0);
 }
 $30 = $5;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (___udivdi3(($32|0),($35|0),1000000000,0)|0);
 $37 = tempRet0;
 $38 = $6;
 $39 = $38;
 HEAP32[$39>>2] = $36;
 $40 = (($38) + 4)|0;
 $41 = $40;
 HEAP32[$41>>2] = $37;
 $42 = ($37>>>0)>(0);
 $43 = ($36>>>0)>(1000000000);
 $44 = ($37|0)==(0);
 $45 = $44 & $43;
 $46 = $42 | $45;
 $47 = $4;
 if ($46) {
  $48 = $6;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $51 = (($48) + 4)|0;
  $52 = $51;
  $53 = HEAP32[$52>>2]|0;
  $54 = (___udivdi3(($50|0),($53|0),1000000000,0)|0);
  $55 = tempRet0;
  $56 = (_append_uint32($47,$54)|0);
  $4 = $56;
  $57 = $6;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = (($57) + 4)|0;
  $61 = $60;
  $62 = HEAP32[$61>>2]|0;
  $63 = (___uremdi3(($59|0),($62|0),1000000000,0)|0);
  $64 = tempRet0;
  $65 = $6;
  $66 = $65;
  HEAP32[$66>>2] = $63;
  $67 = (($65) + 4)|0;
  $68 = $67;
  HEAP32[$68>>2] = $64;
  $69 = $4;
  $70 = $6;
  $71 = $70;
  $72 = HEAP32[$71>>2]|0;
  $73 = (($70) + 4)|0;
  $74 = $73;
  $75 = HEAP32[$74>>2]|0;
  $76 = (_append_sub32($69,$72)|0);
  $4 = $76;
 } else {
  $77 = $5;
  $78 = $77;
  $79 = HEAP32[$78>>2]|0;
  $80 = (($77) + 4)|0;
  $81 = $80;
  $82 = HEAP32[$81>>2]|0;
  $83 = (___udivdi3(($79|0),($82|0),1000000000,0)|0);
  $84 = tempRet0;
  $85 = (_append_uint32($47,$83)|0);
  $4 = $85;
 }
 $86 = $4;
 $87 = $5;
 $88 = $87;
 $89 = HEAP32[$88>>2]|0;
 $90 = (($87) + 4)|0;
 $91 = $90;
 $92 = HEAP32[$91>>2]|0;
 $93 = (___uremdi3(($89|0),($92|0),1000000000,0)|0);
 $94 = tempRet0;
 $95 = (_append_sub32($86,$93)|0);
 $4 = $95;
 $96 = $4;
 $3 = $96;
 $97 = $3;
 STACKTOP = sp;return ($97|0);
}
function _append_sub32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = (($4>>>0) / 100000000)&-1;
 $6 = (($5) + 48)|0;
 $7 = $6&255;
 $8 = $2;
 $9 = ((($8)) + 1|0);
 $2 = $9;
 HEAP8[$8>>0] = $7;
 $10 = $3;
 $11 = (($10>>>0) % 100000000)&-1;
 $3 = $11;
 $12 = $3;
 $13 = (($12>>>0) / 10000000)&-1;
 $14 = (($13) + 48)|0;
 $15 = $14&255;
 $16 = $2;
 $17 = ((($16)) + 1|0);
 $2 = $17;
 HEAP8[$16>>0] = $15;
 $18 = $3;
 $19 = (($18>>>0) % 10000000)&-1;
 $3 = $19;
 $20 = $3;
 $21 = (($20>>>0) / 1000000)&-1;
 $22 = (($21) + 48)|0;
 $23 = $22&255;
 $24 = $2;
 $25 = ((($24)) + 1|0);
 $2 = $25;
 HEAP8[$24>>0] = $23;
 $26 = $3;
 $27 = (($26>>>0) % 1000000)&-1;
 $3 = $27;
 $28 = $3;
 $29 = (($28>>>0) / 100000)&-1;
 $30 = (($29) + 48)|0;
 $31 = $30&255;
 $32 = $2;
 $33 = ((($32)) + 1|0);
 $2 = $33;
 HEAP8[$32>>0] = $31;
 $34 = $3;
 $35 = (($34>>>0) % 100000)&-1;
 $3 = $35;
 $36 = $3;
 $37 = (($36>>>0) / 10000)&-1;
 $38 = (($37) + 48)|0;
 $39 = $38&255;
 $40 = $2;
 $41 = ((($40)) + 1|0);
 $2 = $41;
 HEAP8[$40>>0] = $39;
 $42 = $3;
 $43 = (($42>>>0) % 10000)&-1;
 $3 = $43;
 $44 = $3;
 $45 = (($44>>>0) / 1000)&-1;
 $46 = (($45) + 48)|0;
 $47 = $46&255;
 $48 = $2;
 $49 = ((($48)) + 1|0);
 $2 = $49;
 HEAP8[$48>>0] = $47;
 $50 = $3;
 $51 = (($50>>>0) % 1000)&-1;
 $3 = $51;
 $52 = $3;
 $53 = (($52>>>0) / 100)&-1;
 $54 = (($53) + 48)|0;
 $55 = $54&255;
 $56 = $2;
 $57 = ((($56)) + 1|0);
 $2 = $57;
 HEAP8[$56>>0] = $55;
 $58 = $3;
 $59 = (($58>>>0) % 100)&-1;
 $3 = $59;
 $60 = $3;
 $61 = (($60>>>0) / 10)&-1;
 $62 = (($61) + 48)|0;
 $63 = $62&255;
 $64 = $2;
 $65 = ((($64)) + 1|0);
 $2 = $65;
 HEAP8[$64>>0] = $63;
 $66 = $3;
 $67 = (($66>>>0) % 10)&-1;
 $3 = $67;
 $68 = $3;
 $69 = (($68) + 48)|0;
 $70 = $69&255;
 $71 = $2;
 $72 = ((($71)) + 1|0);
 $2 = $72;
 HEAP8[$71>>0] = $70;
 $73 = $2;
 STACKTOP = sp;return ($73|0);
}
function _rans_uncompress_O0($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3200|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(3200|0);
 $15 = sp + 64|0;
 $16 = sp + 2168|0;
 $17 = sp + 60|0;
 $18 = sp + 56|0;
 $19 = sp + 52|0;
 $20 = sp + 48|0;
 $21 = sp + 44|0;
 $23 = sp + 24|0;
 $25 = sp;
 $26 = sp + 3196|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $28 = $4;
 $29 = ((($28)) + 9|0);
 $7 = $29;
 _memset(($15|0),0,2052)|0;
 $30 = $4;
 $31 = ((($30)) + 1|0);
 $4 = $31;
 $32 = HEAP8[$30>>0]|0;
 $33 = $32&255;
 $34 = ($33|0)!=(0);
 if ($34) {
  $3 = 0;
  $444 = $3;
  STACKTOP = sp;return ($444|0);
 }
 $35 = $4;
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = $37 << 0;
 $39 = $4;
 $40 = ((($39)) + 1|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = $42 << 8;
 $44 = $38 | $43;
 $45 = $4;
 $46 = ((($45)) + 2|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = $48 << 16;
 $50 = $44 | $49;
 $51 = $4;
 $52 = ((($51)) + 3|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 $55 = $54 << 24;
 $56 = $50 | $55;
 $12 = $56;
 $57 = $4;
 $58 = ((($57)) + 4|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = $60 << 0;
 $62 = $4;
 $63 = ((($62)) + 5|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = $65 << 8;
 $67 = $61 | $66;
 $68 = $4;
 $69 = ((($68)) + 6|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = $70&255;
 $72 = $71 << 16;
 $73 = $67 | $72;
 $74 = $4;
 $75 = ((($74)) + 7|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&255;
 $78 = $77 << 24;
 $79 = $73 | $78;
 $11 = $79;
 $80 = $12;
 $81 = $5;
 $82 = (($81) - 9)|0;
 $83 = ($80|0)!=($82|0);
 if ($83) {
  $3 = 0;
  $444 = $3;
  STACKTOP = sp;return ($444|0);
 }
 $84 = $11;
 $85 = (_malloc($84)|0);
 $14 = $85;
 $86 = $14;
 $87 = ($86|0)!=(0|0);
 if (!($87)) {
  $3 = 0;
  $444 = $3;
  STACKTOP = sp;return ($444|0);
 }
 $10 = 0;
 $13 = 0;
 $88 = $7;
 $89 = ((($88)) + 1|0);
 $7 = $89;
 $90 = HEAP8[$88>>0]|0;
 $91 = $90&255;
 $9 = $91;
 while(1) {
  $92 = $7;
  $93 = ((($92)) + 1|0);
  $7 = $93;
  $94 = HEAP8[$92>>0]|0;
  $95 = $94&255;
  $96 = $9;
  $97 = (($15) + ($96<<3)|0);
  HEAP32[$97>>2] = $95;
  $98 = ($95|0)>=(128);
  if ($98) {
   $99 = $9;
   $100 = (($15) + ($99<<3)|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = $101 & -129;
   HEAP32[$100>>2] = $102;
   $103 = $9;
   $104 = (($15) + ($103<<3)|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $105 & 127;
   $107 = $106 << 8;
   $108 = $7;
   $109 = ((($108)) + 1|0);
   $7 = $109;
   $110 = HEAP8[$108>>0]|0;
   $111 = $110&255;
   $112 = $107 | $111;
   $113 = $9;
   $114 = (($15) + ($113<<3)|0);
   HEAP32[$114>>2] = $112;
  }
  $115 = $10;
  $116 = $9;
  $117 = (($15) + ($116<<3)|0);
  $118 = ((($117)) + 4|0);
  HEAP32[$118>>2] = $115;
  $119 = $9;
  $120 = (($16) + ($119<<2)|0);
  $121 = $9;
  $122 = (($15) + ($121<<3)|0);
  $123 = ((($122)) + 4|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $9;
  $126 = (($15) + ($125<<3)|0);
  $127 = HEAP32[$126>>2]|0;
  _RansDecSymbolInit($120,$124,$127);
  $128 = ((($15)) + 2048|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = ($129|0)!=(0|0);
  if (!($130)) {
   $131 = (_malloc(4096)|0);
   $132 = ((($15)) + 2048|0);
   HEAP32[$132>>2] = $131;
  }
  $133 = $10;
  $134 = ((($15)) + 2048|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = (($135) + ($133)|0);
  $137 = $9;
  $138 = $137&255;
  $139 = $9;
  $140 = (($15) + ($139<<3)|0);
  $141 = HEAP32[$140>>2]|0;
  _memset(($136|0),($138|0),($141|0))|0;
  $142 = $9;
  $143 = (($15) + ($142<<3)|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = $10;
  $146 = (($145) + ($144))|0;
  $10 = $146;
  $147 = $13;
  $148 = ($147|0)!=(0);
  if ($148) {
   label = 15;
  } else {
   $149 = $9;
   $150 = (($149) + 1)|0;
   $151 = $7;
   $152 = HEAP8[$151>>0]|0;
   $153 = $152&255;
   $154 = ($150|0)==($153|0);
   if ($154) {
    $155 = $7;
    $156 = ((($155)) + 1|0);
    $7 = $156;
    $157 = HEAP8[$155>>0]|0;
    $158 = $157&255;
    $9 = $158;
    $159 = $7;
    $160 = ((($159)) + 1|0);
    $7 = $160;
    $161 = HEAP8[$159>>0]|0;
    $162 = $161&255;
    $13 = $162;
   } else {
    label = 15;
   }
  }
  do {
   if ((label|0) == 15) {
    label = 0;
    $163 = $13;
    $164 = ($163|0)!=(0);
    if ($164) {
     $165 = $13;
     $166 = (($165) + -1)|0;
     $13 = $166;
     $167 = $9;
     $168 = (($167) + 1)|0;
     $9 = $168;
     break;
    } else {
     $169 = $7;
     $170 = ((($169)) + 1|0);
     $7 = $170;
     $171 = HEAP8[$169>>0]|0;
     $172 = $171&255;
     $9 = $172;
     break;
    }
   }
  } while(0);
  $173 = $9;
  $174 = ($173|0)!=(0);
  if (!($174)) {
   break;
  }
 }
 $175 = $10;
 $176 = ($175|0)<(4096);
 if (!($176)) {
  ___assert_fail((21508|0),(21470|0),260,(21520|0));
  // unreachable;
 }
 $177 = $7;
 HEAP32[$21>>2] = $177;
 _RansDecInit($17,$21);
 _RansDecInit($18,$21);
 _RansDecInit($19,$21);
 _RansDecInit($20,$21);
 $178 = $11;
 $179 = $178 & -4;
 $22 = $179;
 $180 = HEAP32[$17>>2]|0;
 HEAP32[$23>>2] = $180;
 $181 = HEAP32[$18>>2]|0;
 $182 = ((($23)) + 4|0);
 HEAP32[$182>>2] = $181;
 $183 = HEAP32[$19>>2]|0;
 $184 = ((($23)) + 8|0);
 HEAP32[$184>>2] = $183;
 $185 = HEAP32[$20>>2]|0;
 $186 = ((($23)) + 12|0);
 HEAP32[$186>>2] = $185;
 $24 = 4095;
 $8 = 0;
 while(1) {
  $187 = $8;
  $188 = $22;
  $189 = ($187|0)<($188|0);
  if (!($189)) {
   break;
  }
  $190 = HEAP32[$23>>2]|0;
  $191 = $24;
  $192 = $190 & $191;
  HEAP32[$25>>2] = $192;
  $193 = ((($25)) + 4|0);
  $194 = ((($23)) + 4|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = $24;
  $197 = $195 & $196;
  HEAP32[$193>>2] = $197;
  $198 = ((($193)) + 4|0);
  $199 = ((($23)) + 8|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = $24;
  $202 = $200 & $201;
  HEAP32[$198>>2] = $202;
  $203 = ((($198)) + 4|0);
  $204 = ((($23)) + 12|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = $24;
  $207 = $205 & $206;
  HEAP32[$203>>2] = $207;
  $208 = HEAP32[$25>>2]|0;
  $209 = ((($15)) + 2048|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = (($210) + ($208)|0);
  $212 = HEAP8[$211>>0]|0;
  HEAP8[$26>>0] = $212;
  $213 = ((($26)) + 1|0);
  $214 = ((($25)) + 4|0);
  $215 = HEAP32[$214>>2]|0;
  $216 = ((($15)) + 2048|0);
  $217 = HEAP32[$216>>2]|0;
  $218 = (($217) + ($215)|0);
  $219 = HEAP8[$218>>0]|0;
  HEAP8[$213>>0] = $219;
  $220 = ((($213)) + 1|0);
  $221 = ((($25)) + 8|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = ((($15)) + 2048|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = (($224) + ($222)|0);
  $226 = HEAP8[$225>>0]|0;
  HEAP8[$220>>0] = $226;
  $227 = ((($220)) + 1|0);
  $228 = ((($25)) + 12|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = ((($15)) + 2048|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = (($231) + ($229)|0);
  $233 = HEAP8[$232>>0]|0;
  HEAP8[$227>>0] = $233;
  $234 = HEAP8[$26>>0]|0;
  $235 = $8;
  $236 = (($235) + 0)|0;
  $237 = $14;
  $238 = (($237) + ($236)|0);
  HEAP8[$238>>0] = $234;
  $239 = ((($26)) + 1|0);
  $240 = HEAP8[$239>>0]|0;
  $241 = $8;
  $242 = (($241) + 1)|0;
  $243 = $14;
  $244 = (($243) + ($242)|0);
  HEAP8[$244>>0] = $240;
  $245 = ((($26)) + 2|0);
  $246 = HEAP8[$245>>0]|0;
  $247 = $8;
  $248 = (($247) + 2)|0;
  $249 = $14;
  $250 = (($249) + ($248)|0);
  HEAP8[$250>>0] = $246;
  $251 = ((($26)) + 3|0);
  $252 = HEAP8[$251>>0]|0;
  $253 = $8;
  $254 = (($253) + 3)|0;
  $255 = $14;
  $256 = (($255) + ($254)|0);
  HEAP8[$256>>0] = $252;
  $257 = HEAP8[$26>>0]|0;
  $258 = $257&255;
  $259 = (($16) + ($258<<2)|0);
  $260 = ((($259)) + 2|0);
  $261 = HEAP16[$260>>1]|0;
  $262 = $261&65535;
  $263 = HEAP32[$23>>2]|0;
  $264 = $263 >>> 12;
  $265 = Math_imul($262, $264)|0;
  HEAP32[$23>>2] = $265;
  $266 = ((($26)) + 1|0);
  $267 = HEAP8[$266>>0]|0;
  $268 = $267&255;
  $269 = (($16) + ($268<<2)|0);
  $270 = ((($269)) + 2|0);
  $271 = HEAP16[$270>>1]|0;
  $272 = $271&65535;
  $273 = ((($23)) + 4|0);
  $274 = HEAP32[$273>>2]|0;
  $275 = $274 >>> 12;
  $276 = Math_imul($272, $275)|0;
  $277 = ((($23)) + 4|0);
  HEAP32[$277>>2] = $276;
  $278 = ((($26)) + 2|0);
  $279 = HEAP8[$278>>0]|0;
  $280 = $279&255;
  $281 = (($16) + ($280<<2)|0);
  $282 = ((($281)) + 2|0);
  $283 = HEAP16[$282>>1]|0;
  $284 = $283&65535;
  $285 = ((($23)) + 8|0);
  $286 = HEAP32[$285>>2]|0;
  $287 = $286 >>> 12;
  $288 = Math_imul($284, $287)|0;
  $289 = ((($23)) + 8|0);
  HEAP32[$289>>2] = $288;
  $290 = ((($26)) + 3|0);
  $291 = HEAP8[$290>>0]|0;
  $292 = $291&255;
  $293 = (($16) + ($292<<2)|0);
  $294 = ((($293)) + 2|0);
  $295 = HEAP16[$294>>1]|0;
  $296 = $295&65535;
  $297 = ((($23)) + 12|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = $298 >>> 12;
  $300 = Math_imul($296, $299)|0;
  $301 = ((($23)) + 12|0);
  HEAP32[$301>>2] = $300;
  $302 = HEAP32[$25>>2]|0;
  $303 = HEAP8[$26>>0]|0;
  $304 = $303&255;
  $305 = (($16) + ($304<<2)|0);
  $306 = HEAP16[$305>>1]|0;
  $307 = $306&65535;
  $308 = (($302) - ($307))|0;
  $309 = HEAP32[$23>>2]|0;
  $310 = (($309) + ($308))|0;
  HEAP32[$23>>2] = $310;
  $311 = ((($25)) + 4|0);
  $312 = HEAP32[$311>>2]|0;
  $313 = ((($26)) + 1|0);
  $314 = HEAP8[$313>>0]|0;
  $315 = $314&255;
  $316 = (($16) + ($315<<2)|0);
  $317 = HEAP16[$316>>1]|0;
  $318 = $317&65535;
  $319 = (($312) - ($318))|0;
  $320 = ((($23)) + 4|0);
  $321 = HEAP32[$320>>2]|0;
  $322 = (($321) + ($319))|0;
  HEAP32[$320>>2] = $322;
  $323 = ((($25)) + 8|0);
  $324 = HEAP32[$323>>2]|0;
  $325 = ((($26)) + 2|0);
  $326 = HEAP8[$325>>0]|0;
  $327 = $326&255;
  $328 = (($16) + ($327<<2)|0);
  $329 = HEAP16[$328>>1]|0;
  $330 = $329&65535;
  $331 = (($324) - ($330))|0;
  $332 = ((($23)) + 8|0);
  $333 = HEAP32[$332>>2]|0;
  $334 = (($333) + ($331))|0;
  HEAP32[$332>>2] = $334;
  $335 = ((($25)) + 12|0);
  $336 = HEAP32[$335>>2]|0;
  $337 = ((($26)) + 3|0);
  $338 = HEAP8[$337>>0]|0;
  $339 = $338&255;
  $340 = (($16) + ($339<<2)|0);
  $341 = HEAP16[$340>>1]|0;
  $342 = $341&65535;
  $343 = (($336) - ($342))|0;
  $344 = ((($23)) + 12|0);
  $345 = HEAP32[$344>>2]|0;
  $346 = (($345) + ($343))|0;
  HEAP32[$344>>2] = $346;
  _RansDecRenorm($23,$21);
  $347 = ((($23)) + 4|0);
  _RansDecRenorm($347,$21);
  $348 = ((($23)) + 8|0);
  _RansDecRenorm($348,$21);
  $349 = ((($23)) + 12|0);
  _RansDecRenorm($349,$21);
  $350 = $8;
  $351 = (($350) + 4)|0;
  $8 = $351;
 }
 $352 = HEAP32[$23>>2]|0;
 HEAP32[$17>>2] = $352;
 $353 = ((($23)) + 4|0);
 $354 = HEAP32[$353>>2]|0;
 HEAP32[$18>>2] = $354;
 $355 = ((($23)) + 8|0);
 $356 = HEAP32[$355>>2]|0;
 HEAP32[$19>>2] = $356;
 $357 = ((($23)) + 12|0);
 $358 = HEAP32[$357>>2]|0;
 HEAP32[$20>>2] = $358;
 $359 = $11;
 $360 = $359 & 3;
 switch ($360|0) {
 case 0:  {
  break;
 }
 case 1:  {
  $361 = (_RansDecGet($17,12)|0);
  $362 = ((($15)) + 2048|0);
  $363 = HEAP32[$362>>2]|0;
  $364 = (($363) + ($361)|0);
  $365 = HEAP8[$364>>0]|0;
  $27 = $365;
  $366 = $27;
  $367 = $366&255;
  $368 = (($16) + ($367<<2)|0);
  _RansDecAdvanceSymbol($17,$21,$368,12);
  $369 = $27;
  $370 = $22;
  $371 = $14;
  $372 = (($371) + ($370)|0);
  HEAP8[$372>>0] = $369;
  break;
 }
 case 2:  {
  $373 = (_RansDecGet($17,12)|0);
  $374 = ((($15)) + 2048|0);
  $375 = HEAP32[$374>>2]|0;
  $376 = (($375) + ($373)|0);
  $377 = HEAP8[$376>>0]|0;
  $27 = $377;
  $378 = $27;
  $379 = $378&255;
  $380 = (($16) + ($379<<2)|0);
  _RansDecAdvanceSymbol($17,$21,$380,12);
  $381 = $27;
  $382 = $22;
  $383 = $14;
  $384 = (($383) + ($382)|0);
  HEAP8[$384>>0] = $381;
  $385 = (_RansDecGet($18,12)|0);
  $386 = ((($15)) + 2048|0);
  $387 = HEAP32[$386>>2]|0;
  $388 = (($387) + ($385)|0);
  $389 = HEAP8[$388>>0]|0;
  $27 = $389;
  $390 = $27;
  $391 = $390&255;
  $392 = (($16) + ($391<<2)|0);
  _RansDecAdvanceSymbol($18,$21,$392,12);
  $393 = $27;
  $394 = $22;
  $395 = (($394) + 1)|0;
  $396 = $14;
  $397 = (($396) + ($395)|0);
  HEAP8[$397>>0] = $393;
  break;
 }
 case 3:  {
  $398 = (_RansDecGet($17,12)|0);
  $399 = ((($15)) + 2048|0);
  $400 = HEAP32[$399>>2]|0;
  $401 = (($400) + ($398)|0);
  $402 = HEAP8[$401>>0]|0;
  $27 = $402;
  $403 = $27;
  $404 = $403&255;
  $405 = (($16) + ($404<<2)|0);
  _RansDecAdvanceSymbol($17,$21,$405,12);
  $406 = $27;
  $407 = $22;
  $408 = $14;
  $409 = (($408) + ($407)|0);
  HEAP8[$409>>0] = $406;
  $410 = (_RansDecGet($18,12)|0);
  $411 = ((($15)) + 2048|0);
  $412 = HEAP32[$411>>2]|0;
  $413 = (($412) + ($410)|0);
  $414 = HEAP8[$413>>0]|0;
  $27 = $414;
  $415 = $27;
  $416 = $415&255;
  $417 = (($16) + ($416<<2)|0);
  _RansDecAdvanceSymbol($18,$21,$417,12);
  $418 = $27;
  $419 = $22;
  $420 = (($419) + 1)|0;
  $421 = $14;
  $422 = (($421) + ($420)|0);
  HEAP8[$422>>0] = $418;
  $423 = (_RansDecGet($19,12)|0);
  $424 = ((($15)) + 2048|0);
  $425 = HEAP32[$424>>2]|0;
  $426 = (($425) + ($423)|0);
  $427 = HEAP8[$426>>0]|0;
  $27 = $427;
  $428 = $27;
  $429 = $428&255;
  $430 = (($16) + ($429<<2)|0);
  _RansDecAdvanceSymbol($19,$21,$430,12);
  $431 = $27;
  $432 = $22;
  $433 = (($432) + 2)|0;
  $434 = $14;
  $435 = (($434) + ($433)|0);
  HEAP8[$435>>0] = $431;
  break;
 }
 default: {
  // unreachable;
 }
 }
 $436 = $11;
 $437 = $6;
 HEAP32[$437>>2] = $436;
 $438 = ((($15)) + 2048|0);
 $439 = HEAP32[$438>>2]|0;
 $440 = ($439|0)!=(0|0);
 if ($440) {
  $441 = ((($15)) + 2048|0);
  $442 = HEAP32[$441>>2]|0;
  _free($442);
 }
 $443 = $14;
 $3 = $443;
 $444 = $3;
 STACKTOP = sp;return ($444|0);
}
function _RansDecSymbolInit($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = ($6>>>0)<=(65536);
 if (!($7)) {
  ___assert_fail((21539|0),(21489|0),259,(21558|0));
  // unreachable;
 }
 $8 = $5;
 $9 = $4;
 $10 = (65536 - ($9))|0;
 $11 = ($8>>>0)<=($10>>>0);
 if ($11) {
  $12 = $4;
  $13 = $12&65535;
  $14 = $3;
  HEAP16[$14>>1] = $13;
  $15 = $5;
  $16 = $15&65535;
  $17 = $3;
  $18 = ((($17)) + 2|0);
  HEAP16[$18>>1] = $16;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((21576|0),(21489|0),260,(21558|0));
  // unreachable;
 }
}
function _RansDecInit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $5 = $7;
 $8 = $5;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 0;
 $4 = $11;
 $12 = $5;
 $13 = ((($12)) + 1|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 << 8;
 $17 = $4;
 $18 = $17 | $16;
 $4 = $18;
 $19 = $5;
 $20 = ((($19)) + 2|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $22 << 16;
 $24 = $4;
 $25 = $24 | $23;
 $4 = $25;
 $26 = $5;
 $27 = ((($26)) + 3|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 << 24;
 $31 = $4;
 $32 = $31 | $30;
 $4 = $32;
 $33 = $5;
 $34 = ((($33)) + 4|0);
 $5 = $34;
 $35 = $5;
 $36 = $3;
 HEAP32[$36>>2] = $35;
 $37 = $4;
 $38 = $2;
 HEAP32[$38>>2] = $37;
 STACKTOP = sp;return;
}
function _RansDecRenorm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 $4 = $7;
 $8 = $4;
 $9 = ($8>>>0)<(8388608);
 if (!($9)) {
  $23 = $4;
  $24 = $2;
  HEAP32[$24>>2] = $23;
  STACKTOP = sp;return;
 }
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 while(1) {
  $12 = $4;
  $13 = $12 << 8;
  $14 = $5;
  $15 = ((($14)) + 1|0);
  $5 = $15;
  $16 = HEAP8[$14>>0]|0;
  $17 = $16&255;
  $18 = $13 | $17;
  $4 = $18;
  $19 = $4;
  $20 = ($19>>>0)<(8388608);
  if (!($20)) {
   break;
  }
 }
 $21 = $5;
 $22 = $3;
 HEAP32[$22>>2] = $21;
 $23 = $4;
 $24 = $2;
 HEAP32[$24>>2] = $23;
 STACKTOP = sp;return;
}
function _RansDecGet($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = 1 << $6;
 $8 = (($7) - 1)|0;
 $9 = $5 & $8;
 STACKTOP = sp;return ($9|0);
}
function _RansDecAdvanceSymbol($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = $6;
 $14 = ((($13)) + 2|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = $7;
 _RansDecAdvance($8,$9,$12,$16,$17);
 STACKTOP = sp;return;
}
function _RansDecAdvance($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $13 = $9;
 $14 = 1 << $13;
 $15 = (($14) - 1)|0;
 $10 = $15;
 $16 = $5;
 $17 = HEAP32[$16>>2]|0;
 $11 = $17;
 $18 = $8;
 $19 = $11;
 $20 = $9;
 $21 = $19 >>> $20;
 $22 = Math_imul($18, $21)|0;
 $23 = $11;
 $24 = $10;
 $25 = $23 & $24;
 $26 = (($22) + ($25))|0;
 $27 = $7;
 $28 = (($26) - ($27))|0;
 $11 = $28;
 $29 = $11;
 $30 = ($29>>>0)<(8388608);
 if (!($30)) {
  $44 = $11;
  $45 = $5;
  HEAP32[$45>>2] = $44;
  STACKTOP = sp;return;
 }
 $31 = $6;
 $32 = HEAP32[$31>>2]|0;
 $12 = $32;
 while(1) {
  $33 = $11;
  $34 = $33 << 8;
  $35 = $12;
  $36 = ((($35)) + 1|0);
  $12 = $36;
  $37 = HEAP8[$35>>0]|0;
  $38 = $37&255;
  $39 = $34 | $38;
  $11 = $39;
  $40 = $11;
  $41 = ($40>>>0)<(8388608);
  if (!($41)) {
   break;
  }
 }
 $42 = $12;
 $43 = $6;
 HEAP32[$43>>2] = $42;
 $44 = $11;
 $45 = $5;
 HEAP32[$45>>2] = $44;
 STACKTOP = sp;return;
}
function _rans_uncompress_O1($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $18 = sp + 84|0;
 $19 = sp + 80|0;
 $20 = sp + 76|0;
 $21 = sp + 72|0;
 $22 = sp + 68|0;
 $28 = sp + 32|0;
 $29 = sp + 16|0;
 $30 = sp;
 $31 = sp + 152|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $33 = $4;
 $34 = ((($33)) + 9|0);
 $7 = $34;
 $9 = -999;
 $15 = 0;
 $16 = 0;
 $17 = 0;
 $35 = $4;
 $36 = ((($35)) + 1|0);
 $4 = $36;
 $37 = HEAP8[$35>>0]|0;
 $38 = $37&255;
 $39 = ($38|0)!=(1);
 if ($39) {
  $3 = 0;
  $571 = $3;
  STACKTOP = sp;return ($571|0);
 }
 $40 = $4;
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = $42 << 0;
 $44 = $4;
 $45 = ((($44)) + 1|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = $47 << 8;
 $49 = $43 | $48;
 $50 = $4;
 $51 = ((($50)) + 2|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52&255;
 $54 = $53 << 16;
 $55 = $49 | $54;
 $56 = $4;
 $57 = ((($56)) + 3|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 $60 = $59 << 24;
 $61 = $55 | $60;
 $12 = $61;
 $62 = $4;
 $63 = ((($62)) + 4|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = $65 << 0;
 $67 = $4;
 $68 = ((($67)) + 5|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&255;
 $71 = $70 << 8;
 $72 = $66 | $71;
 $73 = $4;
 $74 = ((($73)) + 6|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $77 = $76 << 16;
 $78 = $72 | $77;
 $79 = $4;
 $80 = ((($79)) + 7|0);
 $81 = HEAP8[$80>>0]|0;
 $82 = $81&255;
 $83 = $82 << 24;
 $84 = $78 | $83;
 $11 = $84;
 $85 = $12;
 $86 = $5;
 $87 = (($86) - 9)|0;
 $88 = ($85|0)!=($87|0);
 if ($88) {
  $3 = 0;
  $571 = $3;
  STACKTOP = sp;return ($571|0);
 }
 $89 = (_calloc(256,2052)|0);
 $16 = $89;
 $90 = $16;
 $91 = ($90|0)!=(0|0);
 L9: do {
  if ($91) {
   $92 = (_malloc(262144)|0);
   $17 = $92;
   $93 = $17;
   $94 = ($93|0)!=(0|0);
   if ($94) {
    $13 = 0;
    $95 = $7;
    $96 = ((($95)) + 1|0);
    $7 = $96;
    $97 = HEAP8[$95>>0]|0;
    $98 = $97&255;
    $8 = $98;
    L12: while(1) {
     $10 = 0;
     $14 = 0;
     $99 = $7;
     $100 = ((($99)) + 1|0);
     $7 = $100;
     $101 = HEAP8[$99>>0]|0;
     $102 = $101&255;
     $9 = $102;
     while(1) {
      $103 = $7;
      $104 = ((($103)) + 1|0);
      $7 = $104;
      $105 = HEAP8[$103>>0]|0;
      $106 = $105&255;
      $107 = $9;
      $108 = $8;
      $109 = $16;
      $110 = (($109) + (($108*2052)|0)|0);
      $111 = (($110) + ($107<<3)|0);
      HEAP32[$111>>2] = $106;
      $112 = ($106|0)>=(128);
      if ($112) {
       $113 = $9;
       $114 = $8;
       $115 = $16;
       $116 = (($115) + (($114*2052)|0)|0);
       $117 = (($116) + ($113<<3)|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = $118 & -129;
       HEAP32[$117>>2] = $119;
       $120 = $9;
       $121 = $8;
       $122 = $16;
       $123 = (($122) + (($121*2052)|0)|0);
       $124 = (($123) + ($120<<3)|0);
       $125 = HEAP32[$124>>2]|0;
       $126 = $125 & 127;
       $127 = $126 << 8;
       $128 = $7;
       $129 = ((($128)) + 1|0);
       $7 = $129;
       $130 = HEAP8[$128>>0]|0;
       $131 = $130&255;
       $132 = $127 | $131;
       $133 = $9;
       $134 = $8;
       $135 = $16;
       $136 = (($135) + (($134*2052)|0)|0);
       $137 = (($136) + ($133<<3)|0);
       HEAP32[$137>>2] = $132;
      }
      $138 = $10;
      $139 = $9;
      $140 = $8;
      $141 = $16;
      $142 = (($141) + (($140*2052)|0)|0);
      $143 = (($142) + ($139<<3)|0);
      $144 = ((($143)) + 4|0);
      HEAP32[$144>>2] = $138;
      $145 = $9;
      $146 = $8;
      $147 = $16;
      $148 = (($147) + (($146*2052)|0)|0);
      $149 = (($148) + ($145<<3)|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ($150|0)!=(0);
      if (!($151)) {
       $152 = $9;
       $153 = $8;
       $154 = $16;
       $155 = (($154) + (($153*2052)|0)|0);
       $156 = (($155) + ($152<<3)|0);
       HEAP32[$156>>2] = 4096;
      }
      $157 = $9;
      $158 = $8;
      $159 = $17;
      $160 = (($159) + ($158<<10)|0);
      $161 = (($160) + ($157<<2)|0);
      $162 = $9;
      $163 = $8;
      $164 = $16;
      $165 = (($164) + (($163*2052)|0)|0);
      $166 = (($165) + ($162<<3)|0);
      $167 = ((($166)) + 4|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = $9;
      $170 = $8;
      $171 = $16;
      $172 = (($171) + (($170*2052)|0)|0);
      $173 = (($172) + ($169<<3)|0);
      $174 = HEAP32[$173>>2]|0;
      _RansDecSymbolInit($161,$168,$174);
      $175 = $8;
      $176 = $16;
      $177 = (($176) + (($175*2052)|0)|0);
      $178 = ((($177)) + 2048|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)!=(0|0);
      if (!($180)) {
       $181 = (_malloc(4096)|0);
       $182 = $8;
       $183 = $16;
       $184 = (($183) + (($182*2052)|0)|0);
       $185 = ((($184)) + 2048|0);
       HEAP32[$185>>2] = $181;
       $186 = $8;
       $187 = $16;
       $188 = (($187) + (($186*2052)|0)|0);
       $189 = ((($188)) + 2048|0);
       $190 = HEAP32[$189>>2]|0;
       $191 = ($190|0)!=(0|0);
       if (!($191)) {
        break L9;
       }
      }
      $192 = $10;
      $193 = $8;
      $194 = $16;
      $195 = (($194) + (($193*2052)|0)|0);
      $196 = ((($195)) + 2048|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = (($197) + ($192)|0);
      $199 = $9;
      $200 = $199&255;
      $201 = $9;
      $202 = $8;
      $203 = $16;
      $204 = (($203) + (($202*2052)|0)|0);
      $205 = (($204) + ($201<<3)|0);
      $206 = HEAP32[$205>>2]|0;
      _memset(($198|0),($200|0),($206|0))|0;
      $207 = $9;
      $208 = $8;
      $209 = $16;
      $210 = (($209) + (($208*2052)|0)|0);
      $211 = (($210) + ($207<<3)|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = $10;
      $214 = (($213) + ($212))|0;
      $10 = $214;
      $215 = $10;
      $216 = ($215|0)<=(4096);
      if (!($216)) {
       label = 16;
       break L12;
      }
      $217 = $14;
      $218 = ($217|0)!=(0);
      if ($218) {
       label = 20;
      } else {
       $219 = $9;
       $220 = (($219) + 1)|0;
       $221 = $7;
       $222 = HEAP8[$221>>0]|0;
       $223 = $222&255;
       $224 = ($220|0)==($223|0);
       if ($224) {
        $225 = $7;
        $226 = ((($225)) + 1|0);
        $7 = $226;
        $227 = HEAP8[$225>>0]|0;
        $228 = $227&255;
        $9 = $228;
        $229 = $7;
        $230 = ((($229)) + 1|0);
        $7 = $230;
        $231 = HEAP8[$229>>0]|0;
        $232 = $231&255;
        $14 = $232;
       } else {
        label = 20;
       }
      }
      do {
       if ((label|0) == 20) {
        label = 0;
        $233 = $14;
        $234 = ($233|0)!=(0);
        if ($234) {
         $235 = $14;
         $236 = (($235) + -1)|0;
         $14 = $236;
         $237 = $9;
         $238 = (($237) + 1)|0;
         $9 = $238;
         break;
        } else {
         $239 = $7;
         $240 = ((($239)) + 1|0);
         $7 = $240;
         $241 = HEAP8[$239>>0]|0;
         $242 = $241&255;
         $9 = $242;
         break;
        }
       }
      } while(0);
      $243 = $9;
      $244 = ($243|0)!=(0);
      if (!($244)) {
       break;
      }
     }
     $245 = $13;
     $246 = ($245|0)!=(0);
     if ($246) {
      label = 27;
     } else {
      $247 = $8;
      $248 = (($247) + 1)|0;
      $249 = $7;
      $250 = HEAP8[$249>>0]|0;
      $251 = $250&255;
      $252 = ($248|0)==($251|0);
      if ($252) {
       $253 = $7;
       $254 = ((($253)) + 1|0);
       $7 = $254;
       $255 = HEAP8[$253>>0]|0;
       $256 = $255&255;
       $8 = $256;
       $257 = $7;
       $258 = ((($257)) + 1|0);
       $7 = $258;
       $259 = HEAP8[$257>>0]|0;
       $260 = $259&255;
       $13 = $260;
      } else {
       label = 27;
      }
     }
     do {
      if ((label|0) == 27) {
       label = 0;
       $261 = $13;
       $262 = ($261|0)!=(0);
       if ($262) {
        $263 = $13;
        $264 = (($263) + -1)|0;
        $13 = $264;
        $265 = $8;
        $266 = (($265) + 1)|0;
        $8 = $266;
        break;
       } else {
        $267 = $7;
        $268 = ((($267)) + 1|0);
        $7 = $268;
        $269 = HEAP8[$267>>0]|0;
        $270 = $269&255;
        $8 = $270;
        break;
       }
      }
     } while(0);
     $271 = $8;
     $272 = ($271|0)!=(0);
     if (!($272)) {
      break;
     }
    }
    if ((label|0) == 16) {
     ___assert_fail((21602|0),(21470|0),618,(21615|0));
     // unreachable;
    }
    $273 = $7;
    HEAP32[$22>>2] = $273;
    _RansDecInit($18,$22);
    _RansDecInit($19,$22);
    _RansDecInit($20,$22);
    _RansDecInit($21,$22);
    $274 = $11;
    $275 = $274 >> 2;
    $23 = $275;
    $24 = 0;
    $25 = 0;
    $26 = 0;
    $27 = 0;
    $276 = $23;
    $277 = 0;
    HEAP32[$28>>2] = $277;
    $278 = ((($28)) + 4|0);
    $279 = $23;
    $280 = $279;
    HEAP32[$278>>2] = $280;
    $281 = ((($278)) + 4|0);
    $282 = $23;
    $283 = $282<<1;
    HEAP32[$281>>2] = $283;
    $284 = ((($281)) + 4|0);
    $285 = $23;
    $286 = ($285*3)|0;
    HEAP32[$284>>2] = $286;
    $287 = HEAP32[$18>>2]|0;
    HEAP32[$29>>2] = $287;
    $288 = HEAP32[$19>>2]|0;
    $289 = ((($29)) + 4|0);
    HEAP32[$289>>2] = $288;
    $290 = HEAP32[$20>>2]|0;
    $291 = ((($29)) + 8|0);
    HEAP32[$291>>2] = $290;
    $292 = HEAP32[$21>>2]|0;
    $293 = ((($29)) + 12|0);
    HEAP32[$293>>2] = $292;
    $294 = $11;
    $295 = (_malloc($294)|0);
    $15 = $295;
    $296 = $15;
    $297 = ($296|0)!=(0|0);
    if ($297) {
     while(1) {
      $298 = HEAP32[$28>>2]|0;
      $299 = $23;
      $300 = ($298|0)<($299|0);
      if (!($300)) {
       break;
      }
      $301 = HEAP32[$29>>2]|0;
      $302 = $301 & 4095;
      HEAP32[$30>>2] = $302;
      $303 = ((($30)) + 4|0);
      $304 = ((($29)) + 4|0);
      $305 = HEAP32[$304>>2]|0;
      $306 = $305 & 4095;
      HEAP32[$303>>2] = $306;
      $307 = ((($303)) + 4|0);
      $308 = ((($29)) + 8|0);
      $309 = HEAP32[$308>>2]|0;
      $310 = $309 & 4095;
      HEAP32[$307>>2] = $310;
      $311 = ((($307)) + 4|0);
      $312 = ((($29)) + 12|0);
      $313 = HEAP32[$312>>2]|0;
      $314 = $313 & 4095;
      HEAP32[$311>>2] = $314;
      $315 = HEAP32[$30>>2]|0;
      $316 = $24;
      $317 = $16;
      $318 = (($317) + (($316*2052)|0)|0);
      $319 = ((($318)) + 2048|0);
      $320 = HEAP32[$319>>2]|0;
      $321 = (($320) + ($315)|0);
      $322 = HEAP8[$321>>0]|0;
      HEAP8[$31>>0] = $322;
      $323 = ((($31)) + 1|0);
      $324 = ((($30)) + 4|0);
      $325 = HEAP32[$324>>2]|0;
      $326 = $25;
      $327 = $16;
      $328 = (($327) + (($326*2052)|0)|0);
      $329 = ((($328)) + 2048|0);
      $330 = HEAP32[$329>>2]|0;
      $331 = (($330) + ($325)|0);
      $332 = HEAP8[$331>>0]|0;
      HEAP8[$323>>0] = $332;
      $333 = ((($323)) + 1|0);
      $334 = ((($30)) + 8|0);
      $335 = HEAP32[$334>>2]|0;
      $336 = $26;
      $337 = $16;
      $338 = (($337) + (($336*2052)|0)|0);
      $339 = ((($338)) + 2048|0);
      $340 = HEAP32[$339>>2]|0;
      $341 = (($340) + ($335)|0);
      $342 = HEAP8[$341>>0]|0;
      HEAP8[$333>>0] = $342;
      $343 = ((($333)) + 1|0);
      $344 = ((($30)) + 12|0);
      $345 = HEAP32[$344>>2]|0;
      $346 = $27;
      $347 = $16;
      $348 = (($347) + (($346*2052)|0)|0);
      $349 = ((($348)) + 2048|0);
      $350 = HEAP32[$349>>2]|0;
      $351 = (($350) + ($345)|0);
      $352 = HEAP8[$351>>0]|0;
      HEAP8[$343>>0] = $352;
      $353 = HEAP8[$31>>0]|0;
      $354 = HEAP32[$28>>2]|0;
      $355 = $15;
      $356 = (($355) + ($354)|0);
      HEAP8[$356>>0] = $353;
      $357 = ((($31)) + 1|0);
      $358 = HEAP8[$357>>0]|0;
      $359 = ((($28)) + 4|0);
      $360 = HEAP32[$359>>2]|0;
      $361 = $15;
      $362 = (($361) + ($360)|0);
      HEAP8[$362>>0] = $358;
      $363 = ((($31)) + 2|0);
      $364 = HEAP8[$363>>0]|0;
      $365 = ((($28)) + 8|0);
      $366 = HEAP32[$365>>2]|0;
      $367 = $15;
      $368 = (($367) + ($366)|0);
      HEAP8[$368>>0] = $364;
      $369 = ((($31)) + 3|0);
      $370 = HEAP8[$369>>0]|0;
      $371 = ((($28)) + 12|0);
      $372 = HEAP32[$371>>2]|0;
      $373 = $15;
      $374 = (($373) + ($372)|0);
      HEAP8[$374>>0] = $370;
      $375 = HEAP8[$31>>0]|0;
      $376 = $375&255;
      $377 = $24;
      $378 = $17;
      $379 = (($378) + ($377<<10)|0);
      $380 = (($379) + ($376<<2)|0);
      $381 = ((($380)) + 2|0);
      $382 = HEAP16[$381>>1]|0;
      $383 = $382&65535;
      $384 = HEAP32[$29>>2]|0;
      $385 = $384 >>> 12;
      $386 = Math_imul($383, $385)|0;
      HEAP32[$29>>2] = $386;
      $387 = ((($31)) + 1|0);
      $388 = HEAP8[$387>>0]|0;
      $389 = $388&255;
      $390 = $25;
      $391 = $17;
      $392 = (($391) + ($390<<10)|0);
      $393 = (($392) + ($389<<2)|0);
      $394 = ((($393)) + 2|0);
      $395 = HEAP16[$394>>1]|0;
      $396 = $395&65535;
      $397 = ((($29)) + 4|0);
      $398 = HEAP32[$397>>2]|0;
      $399 = $398 >>> 12;
      $400 = Math_imul($396, $399)|0;
      $401 = ((($29)) + 4|0);
      HEAP32[$401>>2] = $400;
      $402 = ((($31)) + 2|0);
      $403 = HEAP8[$402>>0]|0;
      $404 = $403&255;
      $405 = $26;
      $406 = $17;
      $407 = (($406) + ($405<<10)|0);
      $408 = (($407) + ($404<<2)|0);
      $409 = ((($408)) + 2|0);
      $410 = HEAP16[$409>>1]|0;
      $411 = $410&65535;
      $412 = ((($29)) + 8|0);
      $413 = HEAP32[$412>>2]|0;
      $414 = $413 >>> 12;
      $415 = Math_imul($411, $414)|0;
      $416 = ((($29)) + 8|0);
      HEAP32[$416>>2] = $415;
      $417 = ((($31)) + 3|0);
      $418 = HEAP8[$417>>0]|0;
      $419 = $418&255;
      $420 = $27;
      $421 = $17;
      $422 = (($421) + ($420<<10)|0);
      $423 = (($422) + ($419<<2)|0);
      $424 = ((($423)) + 2|0);
      $425 = HEAP16[$424>>1]|0;
      $426 = $425&65535;
      $427 = ((($29)) + 12|0);
      $428 = HEAP32[$427>>2]|0;
      $429 = $428 >>> 12;
      $430 = Math_imul($426, $429)|0;
      $431 = ((($29)) + 12|0);
      HEAP32[$431>>2] = $430;
      $432 = HEAP32[$30>>2]|0;
      $433 = HEAP8[$31>>0]|0;
      $434 = $433&255;
      $435 = $24;
      $436 = $17;
      $437 = (($436) + ($435<<10)|0);
      $438 = (($437) + ($434<<2)|0);
      $439 = HEAP16[$438>>1]|0;
      $440 = $439&65535;
      $441 = (($432) - ($440))|0;
      $442 = HEAP32[$29>>2]|0;
      $443 = (($442) + ($441))|0;
      HEAP32[$29>>2] = $443;
      $444 = ((($30)) + 4|0);
      $445 = HEAP32[$444>>2]|0;
      $446 = ((($31)) + 1|0);
      $447 = HEAP8[$446>>0]|0;
      $448 = $447&255;
      $449 = $25;
      $450 = $17;
      $451 = (($450) + ($449<<10)|0);
      $452 = (($451) + ($448<<2)|0);
      $453 = HEAP16[$452>>1]|0;
      $454 = $453&65535;
      $455 = (($445) - ($454))|0;
      $456 = ((($29)) + 4|0);
      $457 = HEAP32[$456>>2]|0;
      $458 = (($457) + ($455))|0;
      HEAP32[$456>>2] = $458;
      $459 = ((($30)) + 8|0);
      $460 = HEAP32[$459>>2]|0;
      $461 = ((($31)) + 2|0);
      $462 = HEAP8[$461>>0]|0;
      $463 = $462&255;
      $464 = $26;
      $465 = $17;
      $466 = (($465) + ($464<<10)|0);
      $467 = (($466) + ($463<<2)|0);
      $468 = HEAP16[$467>>1]|0;
      $469 = $468&65535;
      $470 = (($460) - ($469))|0;
      $471 = ((($29)) + 8|0);
      $472 = HEAP32[$471>>2]|0;
      $473 = (($472) + ($470))|0;
      HEAP32[$471>>2] = $473;
      $474 = ((($30)) + 12|0);
      $475 = HEAP32[$474>>2]|0;
      $476 = ((($31)) + 3|0);
      $477 = HEAP8[$476>>0]|0;
      $478 = $477&255;
      $479 = $27;
      $480 = $17;
      $481 = (($480) + ($479<<10)|0);
      $482 = (($481) + ($478<<2)|0);
      $483 = HEAP16[$482>>1]|0;
      $484 = $483&65535;
      $485 = (($475) - ($484))|0;
      $486 = ((($29)) + 12|0);
      $487 = HEAP32[$486>>2]|0;
      $488 = (($487) + ($485))|0;
      HEAP32[$486>>2] = $488;
      _RansDecRenorm($29,$22);
      $489 = ((($29)) + 4|0);
      _RansDecRenorm($489,$22);
      $490 = ((($29)) + 8|0);
      _RansDecRenorm($490,$22);
      $491 = ((($29)) + 12|0);
      _RansDecRenorm($491,$22);
      $492 = HEAP8[$31>>0]|0;
      $493 = $492&255;
      $24 = $493;
      $494 = ((($31)) + 1|0);
      $495 = HEAP8[$494>>0]|0;
      $496 = $495&255;
      $25 = $496;
      $497 = ((($31)) + 2|0);
      $498 = HEAP8[$497>>0]|0;
      $499 = $498&255;
      $26 = $499;
      $500 = ((($31)) + 3|0);
      $501 = HEAP8[$500>>0]|0;
      $502 = $501&255;
      $27 = $502;
      $503 = HEAP32[$28>>2]|0;
      $504 = (($503) + 1)|0;
      HEAP32[$28>>2] = $504;
      $505 = ((($28)) + 4|0);
      $506 = HEAP32[$505>>2]|0;
      $507 = (($506) + 1)|0;
      HEAP32[$505>>2] = $507;
      $508 = ((($28)) + 8|0);
      $509 = HEAP32[$508>>2]|0;
      $510 = (($509) + 1)|0;
      HEAP32[$508>>2] = $510;
      $511 = ((($28)) + 12|0);
      $512 = HEAP32[$511>>2]|0;
      $513 = (($512) + 1)|0;
      HEAP32[$511>>2] = $513;
     }
     $514 = HEAP32[$29>>2]|0;
     HEAP32[$18>>2] = $514;
     $515 = ((($29)) + 4|0);
     $516 = HEAP32[$515>>2]|0;
     HEAP32[$19>>2] = $516;
     $517 = ((($29)) + 8|0);
     $518 = HEAP32[$517>>2]|0;
     HEAP32[$20>>2] = $518;
     $519 = ((($29)) + 12|0);
     $520 = HEAP32[$519>>2]|0;
     HEAP32[$21>>2] = $520;
     while(1) {
      $521 = ((($28)) + 12|0);
      $522 = HEAP32[$521>>2]|0;
      $523 = $11;
      $524 = ($522|0)<($523|0);
      if (!($524)) {
       break;
      }
      $525 = (_RansDecGet($21,12)|0);
      $526 = $27;
      $527 = $16;
      $528 = (($527) + (($526*2052)|0)|0);
      $529 = ((($528)) + 2048|0);
      $530 = HEAP32[$529>>2]|0;
      $531 = (($530) + ($525)|0);
      $532 = HEAP8[$531>>0]|0;
      $32 = $532;
      $533 = $32;
      $534 = ((($28)) + 12|0);
      $535 = HEAP32[$534>>2]|0;
      $536 = $15;
      $537 = (($536) + ($535)|0);
      HEAP8[$537>>0] = $533;
      $538 = $32;
      $539 = $538&255;
      $540 = $27;
      $541 = $17;
      $542 = (($541) + ($540<<10)|0);
      $543 = (($542) + ($539<<2)|0);
      _RansDecAdvanceSymbol($21,$22,$543,12);
      $544 = $32;
      $545 = $544&255;
      $27 = $545;
      $546 = ((($28)) + 12|0);
      $547 = HEAP32[$546>>2]|0;
      $548 = (($547) + 1)|0;
      HEAP32[$546>>2] = $548;
     }
     $549 = $11;
     $550 = $6;
     HEAP32[$550>>2] = $549;
    }
   }
  }
 } while(0);
 $551 = $16;
 $552 = ($551|0)!=(0|0);
 if ($552) {
  $8 = 0;
  while(1) {
   $553 = $8;
   $554 = ($553|0)<(256);
   if (!($554)) {
    break;
   }
   $555 = $8;
   $556 = $16;
   $557 = (($556) + (($555*2052)|0)|0);
   $558 = ((($557)) + 2048|0);
   $559 = HEAP32[$558>>2]|0;
   $560 = ($559|0)!=(0|0);
   if ($560) {
    $561 = $8;
    $562 = $16;
    $563 = (($562) + (($561*2052)|0)|0);
    $564 = ((($563)) + 2048|0);
    $565 = HEAP32[$564>>2]|0;
    _free($565);
   }
   $566 = $8;
   $567 = (($566) + 1)|0;
   $8 = $567;
  }
  $568 = $16;
  _free($568);
 }
 $569 = $17;
 _free($569);
 $570 = $15;
 $3 = $570;
 $571 = $3;
 STACKTOP = sp;return ($571|0);
}
function _rans_uncompress($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $5;
 $8 = ($7>>>0)<(9);
 if ($8) {
  $3 = 0;
  $19 = $3;
  STACKTOP = sp;return ($19|0);
 }
 $9 = $4;
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)!=(0);
 $13 = $4;
 $14 = $5;
 $15 = $6;
 if ($12) {
  $16 = (_rans_uncompress_O1($13,$14,$15)|0);
  $18 = $16;
 } else {
  $17 = (_rans_uncompress_O0($13,$14,$15)|0);
  $18 = $17;
 }
 $3 = $18;
 $19 = $3;
 STACKTOP = sp;return ($19|0);
}
function _bam_construct_seq($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $18 = $0;
 $19 = $1;
 $20 = $2;
 $21 = $3;
 $22 = $4;
 $23 = $5;
 $24 = $6;
 $25 = $7;
 $26 = $8;
 $27 = $9;
 $28 = $10;
 $29 = $11;
 $30 = $12;
 $31 = $13;
 $32 = $14;
 $33 = $15;
 $34 = $16;
 $39 = $18;
 $40 = HEAP32[$39>>2]|0;
 $35 = $40;
 $41 = $21;
 $42 = (($41) + 1)|0;
 $43 = $27;
 $44 = $43<<2;
 $45 = (($42) + ($44))|0;
 $46 = $32;
 $47 = (($46) + 1)|0;
 $48 = (($47|0) / 2)&-1;
 $49 = (($45) + ($48))|0;
 $50 = $32;
 $51 = (($49) + ($50))|0;
 $52 = $19;
 $53 = (($51) + ($52))|0;
 $38 = $53;
 $54 = $35;
 $55 = ((($54)) + 36|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $38;
 $58 = ($56|0)<($57|0);
 if ($58) {
  $59 = $38;
  $60 = $35;
  $61 = ((($60)) + 36|0);
  HEAP32[$61>>2] = $59;
  $62 = $35;
  $63 = ((($62)) + 36|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + -1)|0;
  HEAP32[$63>>2] = $65;
  $66 = $35;
  $67 = ((($66)) + 36|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $68 >> 1;
  $70 = $35;
  $71 = ((($70)) + 36|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $72 | $69;
  HEAP32[$71>>2] = $73;
  $74 = $35;
  $75 = ((($74)) + 36|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $76 >> 2;
  $78 = $35;
  $79 = ((($78)) + 36|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $80 | $77;
  HEAP32[$79>>2] = $81;
  $82 = $35;
  $83 = ((($82)) + 36|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $84 >> 4;
  $86 = $35;
  $87 = ((($86)) + 36|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $88 | $85;
  HEAP32[$87>>2] = $89;
  $90 = $35;
  $91 = ((($90)) + 36|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $92 >> 8;
  $94 = $35;
  $95 = ((($94)) + 36|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $96 | $93;
  HEAP32[$95>>2] = $97;
  $98 = $35;
  $99 = ((($98)) + 36|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $100 >> 16;
  $102 = $35;
  $103 = ((($102)) + 36|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = $104 | $101;
  HEAP32[$103>>2] = $105;
  $106 = $35;
  $107 = ((($106)) + 36|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (($108) + 1)|0;
  HEAP32[$107>>2] = $109;
  $110 = $35;
  $111 = ((($110)) + 40|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = $35;
  $114 = ((($113)) + 36|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (_realloc($112,$115)|0);
  $117 = $35;
  $118 = ((($117)) + 40|0);
  HEAP32[$118>>2] = $116;
  $119 = $35;
  $120 = ((($119)) + 40|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($121|0)!=(0|0);
  if (!($122)) {
   $17 = -1;
   $311 = $17;
   STACKTOP = sp;return ($311|0);
  }
 }
 $123 = $38;
 $124 = $35;
 $125 = ((($124)) + 32|0);
 HEAP32[$125>>2] = $123;
 $126 = $23;
 $127 = $35;
 HEAP32[$127>>2] = $126;
 $128 = $24;
 $129 = (($128) - 1)|0;
 $130 = $35;
 $131 = ((($130)) + 4|0);
 HEAP32[$131>>2] = $129;
 $132 = $24;
 $133 = (($132) - 1)|0;
 $134 = ($133|0)<(0);
 $135 = $134 << 31 >> 31;
 $136 = $25;
 $137 = ($136|0)<(0);
 $138 = $137 << 31 >> 31;
 $139 = (_hts_reg2bin_865($133,$135,$136,$138,14,5)|0);
 $140 = $35;
 $141 = ((($140)) + 8|0);
 $142 = $141;
 $143 = $142;
 $144 = HEAP32[$143>>2]|0;
 $145 = (($142) + 4)|0;
 $146 = $145;
 $147 = HEAP32[$146>>2]|0;
 $148 = $139 & 65535;
 $149 = $144 & -65536;
 $150 = $149 | $148;
 $151 = $141;
 $152 = $151;
 HEAP32[$152>>2] = $150;
 $153 = (($151) + 4)|0;
 $154 = $153;
 HEAP32[$154>>2] = $147;
 $155 = $26;
 $156 = $35;
 $157 = ((($156)) + 8|0);
 $158 = $157;
 $159 = $158;
 $160 = HEAP32[$159>>2]|0;
 $161 = (($158) + 4)|0;
 $162 = $161;
 $163 = HEAP32[$162>>2]|0;
 $164 = $155 & 255;
 $165 = (_bitshift64Shl(($164|0),0,16)|0);
 $166 = tempRet0;
 $167 = $160 & -16711681;
 $168 = $167 | $165;
 $169 = $163 | $166;
 $170 = $157;
 $171 = $170;
 HEAP32[$171>>2] = $168;
 $172 = (($170) + 4)|0;
 $173 = $172;
 HEAP32[$173>>2] = $169;
 $174 = $21;
 $175 = (($174) + 1)|0;
 $176 = $35;
 $177 = ((($176)) + 8|0);
 $178 = $177;
 $179 = $178;
 $180 = HEAP32[$179>>2]|0;
 $181 = (($178) + 4)|0;
 $182 = $181;
 $183 = HEAP32[$182>>2]|0;
 $184 = $175 & 255;
 $185 = (_bitshift64Shl(($184|0),0,24)|0);
 $186 = tempRet0;
 $187 = $180 & 16777215;
 $188 = $187 | $185;
 $189 = $183 | $186;
 $190 = $177;
 $191 = $190;
 HEAP32[$191>>2] = $188;
 $192 = (($190) + 4)|0;
 $193 = $192;
 HEAP32[$193>>2] = $189;
 $194 = $22;
 $195 = $35;
 $196 = ((($195)) + 8|0);
 $197 = $196;
 $198 = $197;
 $199 = HEAP32[$198>>2]|0;
 $200 = (($197) + 4)|0;
 $201 = $200;
 $202 = HEAP32[$201>>2]|0;
 $203 = $194 & 65535;
 $204 = $202 & -65536;
 $205 = $204 | $203;
 $206 = $196;
 $207 = $206;
 HEAP32[$207>>2] = $199;
 $208 = (($206) + 4)|0;
 $209 = $208;
 HEAP32[$209>>2] = $205;
 $210 = $27;
 $211 = $35;
 $212 = ((($211)) + 8|0);
 $213 = $212;
 $214 = $213;
 $215 = HEAP32[$214>>2]|0;
 $216 = (($213) + 4)|0;
 $217 = $216;
 $218 = HEAP32[$217>>2]|0;
 $219 = $210 & 65535;
 $220 = (_bitshift64Shl(($219|0),0,48)|0);
 $221 = tempRet0;
 $222 = $218 & 65535;
 $223 = $215 | $220;
 $224 = $222 | $221;
 $225 = $212;
 $226 = $225;
 HEAP32[$226>>2] = $223;
 $227 = (($225) + 4)|0;
 $228 = $227;
 HEAP32[$228>>2] = $224;
 $229 = $32;
 $230 = $35;
 $231 = ((($230)) + 16|0);
 HEAP32[$231>>2] = $229;
 $232 = $29;
 $233 = $35;
 $234 = ((($233)) + 20|0);
 HEAP32[$234>>2] = $232;
 $235 = $30;
 $236 = (($235) - 1)|0;
 $237 = $35;
 $238 = ((($237)) + 24|0);
 HEAP32[$238>>2] = $236;
 $239 = $31;
 $240 = $35;
 $241 = ((($240)) + 28|0);
 HEAP32[$241>>2] = $239;
 $242 = $35;
 $243 = ((($242)) + 40|0);
 $244 = HEAP32[$243>>2]|0;
 $36 = $244;
 $245 = $36;
 $246 = $20;
 $247 = $21;
 (_strncpy($245,$246,$247)|0);
 $248 = $21;
 $249 = $36;
 $250 = (($249) + ($248)|0);
 HEAP8[$250>>0] = 0;
 $251 = $21;
 $252 = (($251) + 1)|0;
 $253 = $36;
 $254 = (($253) + ($252)|0);
 $36 = $254;
 $255 = $36;
 $256 = $28;
 $257 = $27;
 $258 = $257<<2;
 _memcpy(($255|0),($256|0),($258|0))|0;
 $259 = $27;
 $260 = $259<<2;
 $261 = $36;
 $262 = (($261) + ($260)|0);
 $36 = $262;
 $37 = 0;
 while(1) {
  $263 = $37;
  $264 = (($263) + 1)|0;
  $265 = $32;
  $266 = ($264|0)<($265|0);
  $267 = $37;
  if (!($266)) {
   break;
  }
  $268 = $33;
  $269 = (($268) + ($267)|0);
  $270 = HEAP8[$269>>0]|0;
  $271 = $270&255;
  $272 = (21634 + ($271)|0);
  $273 = HEAP8[$272>>0]|0;
  $274 = $273 << 24 >> 24;
  $275 = $274 << 4;
  $276 = $37;
  $277 = (($276) + 1)|0;
  $278 = $33;
  $279 = (($278) + ($277)|0);
  $280 = HEAP8[$279>>0]|0;
  $281 = $280&255;
  $282 = (21634 + ($281)|0);
  $283 = HEAP8[$282>>0]|0;
  $284 = $283 << 24 >> 24;
  $285 = (($275) + ($284))|0;
  $286 = $285&255;
  $287 = $36;
  $288 = ((($287)) + 1|0);
  $36 = $288;
  HEAP8[$287>>0] = $286;
  $289 = $37;
  $290 = (($289) + 2)|0;
  $37 = $290;
 }
 $291 = $32;
 $292 = ($267|0)<($291|0);
 if ($292) {
  $293 = $37;
  $294 = $33;
  $295 = (($294) + ($293)|0);
  $296 = HEAP8[$295>>0]|0;
  $297 = $296&255;
  $298 = (21634 + ($297)|0);
  $299 = HEAP8[$298>>0]|0;
  $300 = $299 << 24 >> 24;
  $301 = $300 << 4;
  $302 = $301&255;
  $303 = $36;
  $304 = ((($303)) + 1|0);
  $36 = $304;
  HEAP8[$303>>0] = $302;
 }
 $305 = $34;
 $306 = ($305|0)!=(0|0);
 $307 = $36;
 if ($306) {
  $308 = $34;
  $309 = $32;
  _memcpy(($307|0),($308|0),($309|0))|0;
 } else {
  $310 = $32;
  _memset(($307|0),-1,($310|0))|0;
 }
 $17 = 0;
 $311 = $17;
 STACKTOP = sp;return ($311|0);
}
function _hts_reg2bin_865($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp + 8|0;
 $8 = sp;
 $14 = $7;
 $15 = $14;
 HEAP32[$15>>2] = $0;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $1;
 $18 = $8;
 $19 = $18;
 HEAP32[$19>>2] = $2;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $3;
 $9 = $4;
 $10 = $5;
 $22 = $9;
 $12 = $22;
 $23 = $10;
 $24 = $23 << 1;
 $25 = $10;
 $26 = (($24) + ($25))|0;
 $27 = 1 << $26;
 $28 = (($27) - 1)|0;
 $29 = (($28|0) / 7)&-1;
 $13 = $29;
 $30 = $8;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (_i64Add(($32|0),($35|0),-1,-1)|0);
 $37 = tempRet0;
 $38 = $8;
 $39 = $38;
 HEAP32[$39>>2] = $36;
 $40 = (($38) + 4)|0;
 $41 = $40;
 HEAP32[$41>>2] = $37;
 $42 = $10;
 $11 = $42;
 while(1) {
  $43 = $11;
  $44 = ($43|0)>(0);
  if (!($44)) {
   label = 6;
   break;
  }
  $45 = $7;
  $46 = $45;
  $47 = HEAP32[$46>>2]|0;
  $48 = (($45) + 4)|0;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $51 = $12;
  $52 = (_bitshift64Ashr(($47|0),($50|0),($51|0))|0);
  $53 = tempRet0;
  $54 = $8;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = (($54) + 4)|0;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = $12;
  $61 = (_bitshift64Ashr(($56|0),($59|0),($60|0))|0);
  $62 = tempRet0;
  $63 = ($52|0)==($61|0);
  $64 = ($53|0)==($62|0);
  $65 = $63 & $64;
  if ($65) {
   label = 4;
   break;
  }
  $80 = $11;
  $81 = (($80) + -1)|0;
  $11 = $81;
  $82 = $12;
  $83 = (($82) + 3)|0;
  $12 = $83;
  $84 = $11;
  $85 = $84 << 1;
  $86 = $11;
  $87 = (($85) + ($86))|0;
  $88 = 1 << $87;
  $89 = $13;
  $90 = (($89) - ($88))|0;
  $13 = $90;
 }
 if ((label|0) == 4) {
  $66 = $13;
  $67 = ($66|0)<(0);
  $68 = $67 << 31 >> 31;
  $69 = $7;
  $70 = $69;
  $71 = HEAP32[$70>>2]|0;
  $72 = (($69) + 4)|0;
  $73 = $72;
  $74 = HEAP32[$73>>2]|0;
  $75 = $12;
  $76 = (_bitshift64Ashr(($71|0),($74|0),($75|0))|0);
  $77 = tempRet0;
  $78 = (_i64Add(($66|0),($68|0),($76|0),($77|0))|0);
  $79 = tempRet0;
  $6 = $78;
  $91 = $6;
  STACKTOP = sp;return ($91|0);
 }
 else if ((label|0) == 6) {
  $6 = 0;
  $91 = $6;
  STACKTOP = sp;return ($91|0);
 }
 return (0)|0;
}
function _cram_header_to_bam($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = (_bam_hdr_init()|0);
 $3 = $4;
 $5 = $1;
 $6 = (_ks_len_868($5)|0);
 $7 = $3;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = $6;
 $9 = $3;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 1)|0;
 $13 = (_malloc($12)|0);
 $14 = $3;
 $15 = ((($14)) + 24|0);
 HEAP32[$15>>2] = $13;
 $16 = $3;
 $17 = ((($16)) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $1;
 $20 = (_ks_str_869($19)|0);
 $21 = $3;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 _memcpy(($18|0),($20|0),($23|0))|0;
 $24 = $3;
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $3;
 $28 = ((($27)) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + ($26)|0);
 HEAP8[$30>>0] = 0;
 $31 = $1;
 $32 = ((($31)) + 28|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $3;
 HEAP32[$34>>2] = $33;
 $35 = $3;
 $36 = HEAP32[$35>>2]|0;
 $37 = (_calloc($36,4)|0);
 $38 = $3;
 $39 = ((($38)) + 20|0);
 HEAP32[$39>>2] = $37;
 $40 = $3;
 $41 = HEAP32[$40>>2]|0;
 $42 = (_calloc($41,4)|0);
 $43 = $3;
 $44 = ((($43)) + 12|0);
 HEAP32[$44>>2] = $42;
 $2 = 0;
 while(1) {
  $45 = $2;
  $46 = $1;
  $47 = ((($46)) + 28|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($45|0)<($48|0);
  if (!($49)) {
   break;
  }
  $50 = $2;
  $51 = $1;
  $52 = ((($51)) + 32|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + ($50<<4)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (___strdup($55)|0);
  $57 = $2;
  $58 = $3;
  $59 = ((($58)) + 20|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) + ($57<<2)|0);
  HEAP32[$61>>2] = $56;
  $62 = $2;
  $63 = $1;
  $64 = ((($63)) + 32|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + ($62<<4)|0);
  $67 = ((($66)) + 4|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $2;
  $70 = $3;
  $71 = ((($70)) + 12|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($72) + ($69<<2)|0);
  HEAP32[$73>>2] = $68;
  $74 = $2;
  $75 = (($74) + 1)|0;
  $2 = $75;
 }
 $76 = $3;
 STACKTOP = sp;return ($76|0);
}
function _ks_len_868($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _ks_str_869($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _mfcreate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = (_malloc(32)|0);
 $5 = $6;
 $7 = $5;
 $8 = (0|0)==($7|0);
 if ($8) {
  $2 = 0;
  $28 = $2;
  STACKTOP = sp;return ($28|0);
 } else {
  $9 = $5;
  HEAP32[$9>>2] = 0;
  $10 = $3;
  $11 = $5;
  $12 = ((($11)) + 4|0);
  HEAP32[$12>>2] = $10;
  $13 = $4;
  $14 = $5;
  $15 = ((($14)) + 8|0);
  HEAP32[$15>>2] = $13;
  $16 = $4;
  $17 = $5;
  $18 = ((($17)) + 20|0);
  HEAP32[$18>>2] = $16;
  $19 = $5;
  $20 = ((($19)) + 12|0);
  HEAP32[$20>>2] = 0;
  $21 = $5;
  $22 = ((($21)) + 24|0);
  HEAP32[$22>>2] = 0;
  $23 = $5;
  $24 = ((($23)) + 28|0);
  HEAP32[$24>>2] = 0;
  $25 = $5;
  $26 = ((($25)) + 16|0);
  HEAP32[$26>>2] = 3;
  $27 = $5;
  $2 = $27;
  $28 = $2;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _mfreopen($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 $9 = 0;
 $10 = 0;
 $11 = 0;
 $12 = 0;
 $13 = 0;
 $14 = $5;
 $15 = (_strchr($14,114)|0);
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $8 = 1;
  $17 = $13;
  $18 = $17 | 1;
  $13 = $18;
 }
 $19 = $5;
 $20 = (_strchr($19,119)|0);
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $9 = 1;
  $22 = $13;
  $23 = $22 | 18;
  $13 = $23;
 }
 $24 = $5;
 $25 = (_strchr($24,97)|0);
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $10 = 1;
  $9 = 1;
  $27 = $13;
  $28 = $27 | 6;
  $13 = $28;
 }
 $29 = $5;
 $30 = (_strchr($29,98)|0);
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $11 = 1;
  $32 = $13;
  $33 = $32 | 8;
  $13 = $33;
 }
 $34 = $5;
 $35 = (_strchr($34,120)|0);
 $36 = ($35|0)!=(0|0);
 if ($36) {
  $12 = 1;
 }
 $37 = $5;
 $38 = (_strchr($37,43)|0);
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $9 = 1;
  $40 = $13;
  $41 = $40 | 3;
  $13 = $41;
  $42 = $10;
  $43 = ($42|0)!=(0);
  if ($43) {
   $8 = 1;
  }
 }
 $44 = $8;
 $45 = ($44|0)!=(0);
 if ($45) {
  $46 = (_mfcreate(0,0)|0);
  $7 = $46;
  $47 = $7;
  $48 = (0|0)==($47|0);
  if ($48) {
   $3 = 0;
   $98 = $3;
   STACKTOP = sp;return ($98|0);
  }
  $49 = $13;
  $50 = $49 & 16;
  $51 = ($50|0)!=(0);
  if (!($51)) {
   $52 = $7;
   $53 = ((($52)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)!=(0|0);
   if (!($55)) {
    $56 = $6;
    $57 = $4;
    $58 = $7;
    $59 = ((($58)) + 20|0);
    $60 = $11;
    $61 = (_mfload($56,$57,$59,$60)|0);
    $62 = $7;
    $63 = ((($62)) + 4|0);
    HEAP32[$63>>2] = $61;
    $64 = $7;
    $65 = ((($64)) + 20|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $7;
    $68 = ((($67)) + 8|0);
    HEAP32[$68>>2] = $66;
    $69 = $10;
    $70 = ($69|0)!=(0);
    if (!($70)) {
     $71 = $6;
     (_fseek($71,0,0)|0);
    }
   }
  }
 } else {
  $72 = $9;
  $73 = ($72|0)!=(0);
  if (!($73)) {
   $77 = HEAP32[2410]|0;
   (_fprintf($77,21890,$vararg_buffer)|0);
   $3 = 0;
   $98 = $3;
   STACKTOP = sp;return ($98|0);
  }
  $74 = (_mfcreate(0,0)|0);
  $7 = $74;
  $75 = $7;
  $76 = (0|0)==($75|0);
  if ($76) {
   $3 = 0;
   $98 = $3;
   STACKTOP = sp;return ($98|0);
  }
 }
 $78 = $6;
 $79 = $7;
 HEAP32[$79>>2] = $78;
 $80 = $13;
 $81 = $7;
 $82 = ((($81)) + 16|0);
 HEAP32[$82>>2] = $80;
 $83 = $12;
 $84 = ($83|0)!=(0);
 if ($84) {
  $85 = $7;
  $86 = ((($85)) + 16|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $87 | 32;
  HEAP32[$86>>2] = $88;
 }
 $89 = $10;
 $90 = ($89|0)!=(0);
 if ($90) {
  $91 = $7;
  $92 = ((($91)) + 20|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $7;
  $95 = ((($94)) + 28|0);
  HEAP32[$95>>2] = $93;
  $96 = $6;
  (_fseek($96,0,2)|0);
 }
 $97 = $7;
 $3 = $97;
 $98 = $3;
 STACKTOP = sp;return ($98|0);
}
function _mfload($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $8 = sp + 20|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = 0;
 $10 = 0;
 $11 = 0;
 $12 = 8192;
 $14 = $5;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $5;
  $17 = (_stat($16,$8)|0);
  $18 = (-1)!=($17|0);
  if ($18) {
   $19 = ((($8)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $10 = $20;
   $21 = (_malloc($20)|0);
   $9 = $21;
   $22 = ((($8)) + 36|0);
   $23 = HEAP32[$22>>2]|0;
   $12 = $23;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $5 = 0;
 }
 while(1) {
  $24 = $11;
  $25 = $12;
  $26 = (($24) + ($25))|0;
  $27 = $10;
  $28 = ($26>>>0)>($27>>>0);
  if ($28) {
   $29 = $12;
   $30 = $10;
   $31 = (($30) + ($29))|0;
   $10 = $31;
   $32 = $9;
   $33 = $10;
   $34 = (_realloc($32,$33)|0);
   $9 = $34;
  }
  $35 = $9;
  $36 = $11;
  $37 = (($35) + ($36)|0);
  $38 = $10;
  $39 = $11;
  $40 = (($38) - ($39))|0;
  $41 = $4;
  $42 = (_fread($37,1,$40,$41)|0);
  $13 = $42;
  $43 = $13;
  $44 = ($43>>>0)>(0);
  if ($44) {
   $45 = $13;
   $46 = $11;
   $47 = (($46) + ($45))|0;
   $11 = $47;
  }
  $48 = $4;
  $49 = (_feof($48)|0);
  $50 = ($49|0)!=(0);
  if ($50) {
   label = 12;
   break;
  }
  $51 = $5;
  $52 = ($51|0)==(0|0);
  if ($52) {
   continue;
  }
  $53 = $11;
  $54 = ((($8)) + 36|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($53>>>0)<($55>>>0);
  if (!($56)) {
   label = 12;
   break;
  }
 }
 if ((label|0) == 12) {
  $57 = $11;
  $58 = $6;
  HEAP32[$58>>2] = $57;
  $59 = $9;
  STACKTOP = sp;return ($59|0);
 }
 return (0)|0;
}
function _mfopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = (_fopen($6,$7)|0);
 $5 = $8;
 $9 = (0|0)==($8|0);
 if ($9) {
  $2 = 0;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 } else {
  $10 = $3;
  $11 = $4;
  $12 = $5;
  $13 = (_mfreopen($10,$11,$12)|0);
  $2 = $13;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _mfclose($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $1 = -1;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 }
 $5 = $2;
 (_mfflush($5)|0);
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  (_fclose($10)|0);
 }
 $11 = $2;
 (_mfdestroy($11)|0);
 $1 = 0;
 $12 = $1;
 STACKTOP = sp;return ($12|0);
}
function _mfflush($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $1 = 0;
  $112 = $1;
  STACKTOP = sp;return ($112|0);
 }
 $8 = $2;
 $9 = ($8|0)==(0|0);
 $10 = $2;
 $11 = ($10|0)==(0|0);
 $or$cond = $9 | $11;
 if ($or$cond) {
  $12 = $2;
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $2;
  $16 = ((($15)) + 20|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14>>>0)<($17>>>0);
  if ($18) {
   $19 = $2;
   $20 = ((($19)) + 20|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $2;
   $23 = ((($22)) + 28|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($21) - ($24))|0;
   $3 = $25;
   $26 = $2;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $2;
   $30 = ((($29)) + 28|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($28) + ($31)|0);
   $33 = $3;
   $34 = $2;
   $35 = HEAP32[$34>>2]|0;
   $36 = (_fwrite($32,1,$33,$35)|0);
   $37 = $3;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $1 = -1;
    $112 = $1;
    STACKTOP = sp;return ($112|0);
   }
   $39 = $2;
   $40 = HEAP32[$39>>2]|0;
   $41 = (_fflush($40)|0);
   $42 = (0)!=($41|0);
   if ($42) {
    $1 = -1;
    $112 = $1;
    STACKTOP = sp;return ($112|0);
   }
  }
  $43 = $2;
  $44 = ((($43)) + 28|0);
  HEAP32[$44>>2] = 0;
  $45 = $2;
  $46 = ((($45)) + 20|0);
  HEAP32[$46>>2] = 0;
  $47 = $2;
  $48 = ((($47)) + 24|0);
  HEAP32[$48>>2] = 0;
 }
 $49 = $2;
 $50 = ((($49)) + 16|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $51 & 2;
 $53 = ($52|0)!=(0);
 if ($53) {
  $54 = $2;
  $55 = ((($54)) + 28|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $2;
  $58 = ((($57)) + 20|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($56>>>0)<($59>>>0);
  if ($60) {
   $61 = $2;
   $62 = ((($61)) + 20|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $2;
   $65 = ((($64)) + 28|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($63) - ($66))|0;
   $4 = $67;
   $68 = $2;
   $69 = ((($68)) + 16|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $70 & 32;
   $72 = ($71|0)!=(0);
   if (!($72)) {
    $73 = $2;
    $74 = HEAP32[$73>>2]|0;
    $75 = $2;
    $76 = ((($75)) + 28|0);
    $77 = HEAP32[$76>>2]|0;
    (_fseek($74,$77,0)|0);
   }
   $78 = $2;
   $79 = ((($78)) + 4|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $2;
   $82 = ((($81)) + 28|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($80) + ($83)|0);
   $85 = $4;
   $86 = $2;
   $87 = HEAP32[$86>>2]|0;
   $88 = (_fwrite($84,1,$85,$87)|0);
   $89 = $4;
   $90 = ($88>>>0)<($89>>>0);
   if ($90) {
    $1 = -1;
    $112 = $1;
    STACKTOP = sp;return ($112|0);
   }
   $91 = $2;
   $92 = HEAP32[$91>>2]|0;
   $93 = (_fflush($92)|0);
   $94 = (0)!=($93|0);
   if ($94) {
    $1 = -1;
    $112 = $1;
    STACKTOP = sp;return ($112|0);
   }
  }
  $95 = $2;
  $96 = HEAP32[$95>>2]|0;
  $97 = (_ftell($96)|0);
  $98 = ($97|0)!=(-1);
  if ($98) {
   $99 = $2;
   $100 = HEAP32[$99>>2]|0;
   $101 = (_fileno($100)|0);
   $102 = $2;
   $103 = HEAP32[$102>>2]|0;
   $104 = (_ftell($103)|0);
   $105 = (_ftruncate($101,$104)|0);
   $106 = ($105|0)==(-1);
   if ($106) {
    $1 = -1;
    $112 = $1;
    STACKTOP = sp;return ($112|0);
   }
  }
  $107 = $2;
  $108 = ((($107)) + 20|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = $2;
  $111 = ((($110)) + 28|0);
  HEAP32[$111>>2] = $109;
 }
 $1 = 0;
 $112 = $1;
 STACKTOP = sp;return ($112|0);
}
function _mfdestroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $1 = -1;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 }
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $2;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  _free($11);
 }
 $12 = $2;
 _free($12);
 $1 = 0;
 $13 = $1;
 STACKTOP = sp;return ($13|0);
}
function _mfdetach($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   (_mfflush($5)|0);
   $6 = $2;
   $7 = ((($6)) + 16|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8 & 64;
   $10 = ($9|0)!=(0);
   if ($10) {
    $1 = -1;
    break;
   }
   $11 = $2;
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)!=(0|0);
   if ($13) {
    $14 = $2;
    $15 = HEAP32[$14>>2]|0;
    (_fclose($15)|0);
    $16 = $2;
    HEAP32[$16>>2] = 0;
   }
   $1 = 0;
  } else {
   $1 = -1;
  }
 } while(0);
 $17 = $1;
 STACKTOP = sp;return ($17|0);
}
function _mfsteal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $2 = 0;
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 }
 $8 = $3;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 $11 = $4;
 $12 = (0|0)!=($11|0);
 if ($12) {
  $13 = $3;
  $14 = ((($13)) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $4;
  HEAP32[$16>>2] = $15;
 }
 $17 = $3;
 $18 = (_mfdetach($17)|0);
 $19 = ($18|0)!=(0);
 if ($19) {
  $2 = 0;
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 } else {
  $20 = $3;
  $21 = ((($20)) + 4|0);
  HEAP32[$21>>2] = 0;
  $22 = $3;
  (_mfdestroy($22)|0);
  $23 = $5;
  $2 = $23;
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _mrewind($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 HEAP32[$3>>2] = 0;
 $4 = $1;
 $5 = ((($4)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function _mfwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $8;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 2;
 $15 = ($14|0)!=(0);
 if (!($15)) {
  $4 = 0;
  $101 = $4;
  STACKTOP = sp;return ($101|0);
 }
 $16 = $8;
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & 4;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = $8;
  $22 = ((($21)) + 20|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $8;
  $25 = ((($24)) + 24|0);
  HEAP32[$25>>2] = $23;
 }
 while(1) {
  $26 = $6;
  $27 = $7;
  $28 = Math_imul($26, $27)|0;
  $29 = $8;
  $30 = ((($29)) + 24|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($28) + ($31))|0;
  $33 = $8;
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($32>>>0)>($35>>>0);
  $37 = $8;
  if (!($36)) {
   break;
  }
  $38 = ((($37)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)!=(0);
  if ($40) {
   $41 = $8;
   $42 = ((($41)) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $43<<1;
   $45 = $44;
  } else {
   $45 = 1024;
  }
  $9 = $45;
  $46 = $8;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $9;
  $50 = (_realloc($48,$49)|0);
  $10 = $50;
  $51 = $10;
  $52 = (0|0)==($51|0);
  if ($52) {
   label = 9;
   break;
  }
  $53 = $9;
  $54 = $8;
  $55 = ((($54)) + 8|0);
  HEAP32[$55>>2] = $53;
  $56 = $10;
  $57 = $8;
  $58 = ((($57)) + 4|0);
  HEAP32[$58>>2] = $56;
 }
 if ((label|0) == 9) {
  $4 = 0;
  $101 = $4;
  STACKTOP = sp;return ($101|0);
 }
 $59 = ((($37)) + 24|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $8;
 $62 = ((($61)) + 28|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($60>>>0)<($63>>>0);
 if ($64) {
  $65 = $8;
  $66 = ((($65)) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $8;
  $69 = ((($68)) + 28|0);
  HEAP32[$69>>2] = $67;
 }
 $70 = $8;
 $71 = ((($70)) + 24|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $8;
 $74 = ((($73)) + 4|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = (($75) + ($72)|0);
 $77 = $5;
 $78 = $6;
 $79 = $7;
 $80 = Math_imul($78, $79)|0;
 _memcpy(($76|0),($77|0),($80|0))|0;
 $81 = $6;
 $82 = $7;
 $83 = Math_imul($81, $82)|0;
 $84 = $8;
 $85 = ((($84)) + 24|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = (($86) + ($83))|0;
 HEAP32[$85>>2] = $87;
 $88 = $8;
 $89 = ((($88)) + 20|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $8;
 $92 = ((($91)) + 24|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ($90>>>0)<($93>>>0);
 if ($94) {
  $95 = $8;
  $96 = ((($95)) + 24|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = $8;
  $99 = ((($98)) + 20|0);
  HEAP32[$99>>2] = $97;
 }
 $100 = $7;
 $4 = $100;
 $101 = $4;
 STACKTOP = sp;return ($101|0);
}
function _is_directory($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp;
 $2 = $0;
 $4 = $2;
 $5 = (_stat($4,$3)|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $1 = 0;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 } else {
  $7 = ((($3)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 61440;
  $10 = ($9|0)==(16384);
  $11 = $10&1;
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _is_file($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp;
 $2 = $0;
 $4 = $2;
 $5 = (_stat($4,$3)|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $1 = 0;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 } else {
  $7 = ((($3)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 61440;
  $10 = ($9|0)==(32768);
  $11 = $10&1;
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _cram_index_query($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $6;
 $14 = (($13) + 1)|0;
 $15 = ($14|0)<(0);
 if (!($15)) {
  $16 = $6;
  $17 = (($16) + 1)|0;
  $18 = $5;
  $19 = ((($18)) + 34632|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($17|0)>=($20|0);
  if (!($21)) {
   $22 = $8;
   $23 = ($22|0)!=(0|0);
   if (!($23)) {
    $24 = $6;
    $25 = (($24) + 1)|0;
    $26 = $5;
    $27 = ((($26)) + 34636|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + (($25*48)|0)|0);
    $8 = $29;
   }
   $30 = $8;
   $31 = ((($30)) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)!=(0|0);
   if (!($33)) {
    $4 = 0;
    $155 = $4;
    STACKTOP = sp;return ($155|0);
   }
   $9 = 0;
   $34 = $6;
   $35 = (($34) + 1)|0;
   $36 = $5;
   $37 = ((($36)) + 34636|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + (($35*48)|0)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) - 1)|0;
   $10 = $41;
   $42 = $10;
   $43 = (($42|0) / 2)&-1;
   $11 = $43;
   while(1) {
    $44 = $11;
    $45 = $9;
    $46 = ($44|0)!=($45|0);
    if (!($46)) {
     break;
    }
    $47 = $11;
    $48 = $8;
    $49 = ((($48)) + 8|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($50) + (($47*48)|0)|0);
    $52 = ((($51)) + 12|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $6;
    $55 = ($53|0)>($54|0);
    $56 = $11;
    do {
     if ($55) {
      $10 = $56;
     } else {
      $57 = $8;
      $58 = ((($57)) + 8|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = (($59) + (($56*48)|0)|0);
      $61 = ((($60)) + 12|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = $6;
      $64 = ($62|0)<($63|0);
      $65 = $11;
      if ($64) {
       $9 = $65;
       break;
      }
      $66 = $8;
      $67 = ((($66)) + 8|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (($68) + (($65*48)|0)|0);
      $70 = ((($69)) + 16|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = $7;
      $73 = ($71|0)>=($72|0);
      $74 = $11;
      if ($73) {
       $10 = $74;
       break;
      }
      $75 = $8;
      $76 = ((($75)) + 8|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (($77) + (($74*48)|0)|0);
      $79 = ((($78)) + 16|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = $7;
      $82 = ($80|0)<($81|0);
      if ($82) {
       $83 = $11;
       $9 = $83;
      }
     }
    } while(0);
    $84 = $10;
    $85 = $9;
    $86 = (($84) - ($85))|0;
    $87 = (($86|0) / 2)&-1;
    $88 = $9;
    $89 = (($87) + ($88))|0;
    $11 = $89;
   }
   $90 = $10;
   $91 = ($90|0)>=(0);
   if ($91) {
    $92 = $10;
    $93 = $8;
    $94 = ((($93)) + 8|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($95) + (($92*48)|0)|0);
    $97 = ((($96)) + 16|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = $7;
    $100 = ($98|0)<($99|0);
    if ($100) {
     $101 = $10;
     $102 = $8;
     $103 = ((($102)) + 8|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = (($104) + (($101*48)|0)|0);
     $106 = ((($105)) + 12|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $6;
     $109 = ($107|0)==($108|0);
     if ($109) {
      $110 = $10;
      $9 = $110;
     }
    }
   }
   while(1) {
    $111 = $9;
    $112 = ($111|0)>(0);
    if (!($112)) {
     break;
    }
    $113 = $9;
    $114 = (($113) - 1)|0;
    $115 = $8;
    $116 = ((($115)) + 8|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = (($117) + (($114*48)|0)|0);
    $119 = ((($118)) + 20|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = $7;
    $122 = ($120|0)>=($121|0);
    if (!($122)) {
     break;
    }
    $123 = $9;
    $124 = (($123) + -1)|0;
    $9 = $124;
   }
   while(1) {
    $125 = $9;
    $126 = (($125) + 1)|0;
    $127 = $8;
    $128 = HEAP32[$127>>2]|0;
    $129 = ($126|0)<($128|0);
    if ($129) {
     $130 = $9;
     $131 = $8;
     $132 = ((($131)) + 8|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = (($133) + (($130*48)|0)|0);
     $135 = ((($134)) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $6;
     $138 = ($136|0)<($137|0);
     if ($138) {
      $156 = 1;
     } else {
      $139 = $9;
      $140 = $8;
      $141 = ((($140)) + 8|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($142) + (($139*48)|0)|0);
      $144 = ((($143)) + 20|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = $7;
      $147 = ($145|0)<($146|0);
      $156 = $147;
     }
    } else {
     $156 = 0;
    }
    $148 = $9;
    if (!($156)) {
     break;
    }
    $149 = (($148) + 1)|0;
    $9 = $149;
   }
   $150 = $8;
   $151 = ((($150)) + 8|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = (($152) + (($148*48)|0)|0);
   $12 = $153;
   $154 = $12;
   $4 = $154;
   $155 = $4;
   STACKTOP = sp;return ($155|0);
  }
 }
 $4 = 0;
 $155 = $4;
 STACKTOP = sp;return ($155|0);
}
function _cram_seek_to_refpos($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = HEAP32[$7>>2]|0;
 $9 = $4;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_cram_index_query($6,$8,$11,0)|0);
 $5 = $12;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $2 = -2;
  $54 = $2;
  STACKTOP = sp;return ($54|0);
 }
 $14 = $3;
 $15 = $5;
 $16 = ((($15)) + 40|0);
 $17 = $16;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (_cram_seek($14,$19,0)|0);
 $24 = (0)!=($23|0);
 if ($24) {
  $25 = $3;
  $26 = $5;
  $27 = ((($26)) + 40|0);
  $28 = $27;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($28) + 4)|0;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = $3;
  $35 = ((($34)) + 34640|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)<(0);
  $38 = $37 << 31 >> 31;
  $39 = (_i64Subtract(($30|0),($33|0),($36|0),($38|0))|0);
  $40 = tempRet0;
  $41 = (_cram_seek($25,$39,1)|0);
  $42 = (0)!=($41|0);
  if ($42) {
   $2 = -1;
   $54 = $2;
   STACKTOP = sp;return ($54|0);
  }
 }
 $43 = $3;
 $44 = ((($43)) + 36|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)!=(0|0);
 if ($46) {
  $47 = $3;
  $48 = ((($47)) + 36|0);
  $49 = HEAP32[$48>>2]|0;
  _cram_free_container($49);
  $50 = $3;
  $51 = ((($50)) + 36|0);
  HEAP32[$51>>2] = 0;
  $52 = $3;
  $53 = ((($52)) + 34768|0);
  HEAP32[$53>>2] = 0;
 }
 $2 = 0;
 $54 = $2;
 STACKTOP = sp;return ($54|0);
}
function _hopen_net($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = HEAP32[6459]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  label = 4;
 } else {
  $8 = (_net_init()|0);
  $9 = ($8|0)<(0);
  if ($9) {
   $2 = 0;
  } else {
   label = 4;
  }
 }
 do {
  if ((label|0) == 4) {
   $10 = $4;
   $11 = (_hfile_init(36,$10,0)|0);
   $5 = $11;
   $12 = $5;
   $13 = ($12|0)==(0|0);
   if ($13) {
    $2 = 0;
    break;
   }
   $14 = $3;
   $15 = $4;
   $16 = (_knet_open($14,$15)|0);
   $17 = $5;
   $18 = ((($17)) + 32|0);
   HEAP32[$18>>2] = $16;
   $19 = $5;
   $20 = ((($19)) + 32|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(0|0);
   $23 = $5;
   if ($22) {
    _hfile_destroy($23);
    $2 = 0;
    break;
   } else {
    $24 = ((($23)) + 16|0);
    HEAP32[$24>>2] = 9400;
    $25 = $5;
    $2 = $25;
    break;
   }
  }
 } while(0);
 $26 = $2;
 STACKTOP = sp;return ($26|0);
}
function _net_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[6459] = 1;
 return 0;
}
function _net_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $6 = $7;
 $8 = $6;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $4;
 $12 = $5;
 $13 = (_knet_read($10,$11,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function _net_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $6 = $7;
 $8 = $6;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $4;
 $12 = $5;
 $13 = (_knet_seek($10,$11,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function _net_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_knet_close($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _hfile_plugin_init_net($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 HEAP32[$3>>2] = 21930;
 _hfile_add_scheme_handler(21939,9420);
 _hfile_add_scheme_handler(21944,9420);
 STACKTOP = sp;return 0;
}
function _kftp_connect($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_socket_connect($5,$8)|0);
 $10 = $2;
 $11 = ((($10)) + 24|0);
 HEAP32[$11>>2] = $9;
 $12 = $2;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(-1);
 if ($15) {
  $1 = -1;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 } else {
  $16 = $2;
  (_kftp_get_response($16)|0);
  $17 = $2;
  (_kftp_send_cmd($17,21948,1)|0);
  $18 = $2;
  (_kftp_send_cmd($18,21965,1)|0);
  $19 = $2;
  (_kftp_send_cmd($19,21978,1)|0);
  $1 = 0;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _socket_connect($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $6 = sp + 60|0;
 $8 = sp + 48|0;
 $9 = sp + 16|0;
 $10 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 HEAP32[$6>>2] = 1;
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;
 HEAP32[$10>>2] = 0;
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;HEAP32[$9+12>>2]=0|0;HEAP32[$9+16>>2]=0|0;HEAP32[$9+20>>2]=0|0;HEAP32[$9+24>>2]=0|0;HEAP32[$9+28>>2]=0|0;
 $11 = ((($9)) + 4|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($9)) + 8|0);
 HEAP32[$12>>2] = 1;
 $13 = $3;
 $14 = $4;
 $15 = (_getaddrinfo(($13|0),($14|0),($9|0),($10|0))|0);
 $5 = $15;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = HEAP32[2410]|0;
  $18 = $3;
  $19 = $4;
  $20 = $5;
  $21 = (_gai_strerror(($20|0))|0);
  HEAP32[$vararg_buffer>>2] = $18;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $19;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $21;
  (_fprintf($17,21994,$vararg_buffer)|0);
  $2 = -1;
  $54 = $2;
  STACKTOP = sp;return ($54|0);
 }
 $22 = HEAP32[$10>>2]|0;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$10>>2]|0;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$10>>2]|0;
 $29 = ((($28)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (_socket($24,$27,$30)|0);
 $7 = $31;
 $32 = ($31|0)==(-1);
 if ($32) {
  _perror(22019);
  $33 = HEAP32[$10>>2]|0;
  _freeaddrinfo($33);
  $2 = -1;
  $54 = $2;
  STACKTOP = sp;return ($54|0);
 }
 $34 = $7;
 $35 = (_setsockopt($34,1,2,$6,4)|0);
 $36 = ($35|0)==(-1);
 if ($36) {
  _perror(22026);
  $37 = HEAP32[$10>>2]|0;
  _freeaddrinfo($37);
  $2 = -1;
  $54 = $2;
  STACKTOP = sp;return ($54|0);
 }
 $38 = $7;
 $39 = (_setsockopt($38,1,13,$8,8)|0);
 $40 = ($39|0)==(-1);
 if ($40) {
  _perror(22026);
  $41 = HEAP32[$10>>2]|0;
  _freeaddrinfo($41);
  $2 = -1;
  $54 = $2;
  STACKTOP = sp;return ($54|0);
 }
 $42 = $7;
 $43 = HEAP32[$10>>2]|0;
 $44 = ((($43)) + 20|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$10>>2]|0;
 $47 = ((($46)) + 16|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (_connect($42,$45,$48)|0);
 $50 = ($49|0)!=(0);
 if ($50) {
  _perror(22037);
  $51 = HEAP32[$10>>2]|0;
  _freeaddrinfo($51);
  $2 = -1;
  $54 = $2;
  STACKTOP = sp;return ($54|0);
 } else {
  $52 = HEAP32[$10>>2]|0;
  _freeaddrinfo($52);
  $53 = $7;
  $2 = $53;
  $54 = $2;
  STACKTOP = sp;return ($54|0);
 }
 return (0)|0;
}
function _kftp_get_response($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $5 = sp;
 $2 = $0;
 $4 = 0;
 $6 = $2;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_socket_wait($8,1)|0);
 $10 = ($9|0)<=(0);
 if ($10) {
  $1 = 0;
  $95 = $1;
  STACKTOP = sp;return ($95|0);
 }
 while(1) {
  $11 = $2;
  $12 = ((($11)) + 24|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_read($13,$3,1)|0);
  $15 = ($14|0)!=(0);
  if (!($15)) {
   break;
  }
  $16 = $4;
  $17 = $2;
  $18 = ((($17)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($16|0)>=($19|0);
  if ($20) {
   $21 = $2;
   $22 = ((($21)) + 48|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)!=(0);
   if ($24) {
    $25 = $2;
    $26 = ((($25)) + 48|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $27 << 1;
    $31 = $28;
   } else {
    $31 = 256;
   }
   $29 = $2;
   $30 = ((($29)) + 48|0);
   HEAP32[$30>>2] = $31;
   $32 = $2;
   $33 = ((($32)) + 60|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $2;
   $36 = ((($35)) + 48|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (_realloc($34,$37)|0);
   $39 = $2;
   $40 = ((($39)) + 60|0);
   HEAP32[$40>>2] = $38;
  }
  $41 = HEAP8[$3>>0]|0;
  $42 = $4;
  $43 = (($42) + 1)|0;
  $4 = $43;
  $44 = $2;
  $45 = ((($44)) + 60|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + ($42)|0);
  HEAP8[$47>>0] = $41;
  $48 = HEAP8[$3>>0]|0;
  $49 = $48&255;
  $50 = ($49|0)==(10);
  if (!($50)) {
   continue;
  }
  $51 = $4;
  $52 = ($51|0)>=(4);
  if ($52) {
   $53 = $2;
   $54 = ((($53)) + 60|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = HEAP8[$55>>0]|0;
   $57 = $56 << 24 >> 24;
   $58 = (_isdigit($57)|0);
   $59 = ($58|0)!=(0);
   if ($59) {
    $60 = $2;
    $61 = ((($60)) + 60|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ((($62)) + 1|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $64 << 24 >> 24;
    $66 = (_isdigit($65)|0);
    $67 = ($66|0)!=(0);
    if ($67) {
     $68 = $2;
     $69 = ((($68)) + 60|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ((($70)) + 2|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $72 << 24 >> 24;
     $74 = (_isdigit($73)|0);
     $75 = ($74|0)!=(0);
     if ($75) {
      $76 = $2;
      $77 = ((($76)) + 60|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ((($78)) + 3|0);
      $80 = HEAP8[$79>>0]|0;
      $81 = $80 << 24 >> 24;
      $82 = ($81|0)!=(45);
      if ($82) {
       break;
      }
     }
    }
   }
  }
  $4 = 0;
 }
 $83 = $4;
 $84 = ($83|0)<(2);
 if ($84) {
  $1 = -1;
  $95 = $1;
  STACKTOP = sp;return ($95|0);
 } else {
  $85 = $4;
  $86 = (($85) - 2)|0;
  $87 = $2;
  $88 = ((($87)) + 60|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (($89) + ($86)|0);
  HEAP8[$90>>0] = 0;
  $91 = $2;
  $92 = ((($91)) + 60|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (_strtol($93,$5,0)|0);
  $1 = $94;
  $95 = $1;
  STACKTOP = sp;return ($95|0);
 }
 return (0)|0;
}
function _kftp_send_cmd($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_socket_wait($10,0)|0);
 $12 = ($11|0)<=(0);
 if ($12) {
  $3 = -1;
  $28 = $3;
  STACKTOP = sp;return ($28|0);
 }
 $13 = $5;
 $14 = (_strlen($13)|0);
 $7 = $14;
 $15 = $4;
 $16 = ((($15)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = $7;
 $20 = (_write($17,$18,$19)|0);
 $21 = $7;
 $22 = ($20|0)!=($21|0);
 if ($22) {
  $3 = -1;
  $28 = $3;
  STACKTOP = sp;return ($28|0);
 }
 $23 = $6;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $4;
  $26 = (_kftp_get_response($25)|0);
  $27 = $26;
 } else {
  $27 = 0;
 }
 $3 = $27;
 $28 = $3;
 STACKTOP = sp;return ($28|0);
}
function _socket_wait($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $4 = sp + 32|0;
 $7 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $5 = 0;
 $6 = 0;
 HEAP32[$7>>2] = 5;
 $11 = ((($7)) + 4|0);
 HEAP32[$11>>2] = 0;
 $10 = $4;
 $9 = 32;
 while(1) {
  $12 = $9;
  $13 = ($12|0)!=(0);
  if (!($13)) {
   break;
  }
  $14 = $10;
  $15 = ((($14)) + 4|0);
  $10 = $15;
  HEAP32[$14>>2] = 0;
  $16 = $9;
  $17 = (($16) + -1)|0;
  $9 = $17;
 }
 $18 = $2;
 $19 = (($18>>>0) % 32)&-1;
 $20 = 1 << $19;
 $21 = $2;
 $22 = (($21>>>0) / 32)&-1;
 $23 = (($4) + ($22<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 | $20;
 HEAP32[$23>>2] = $25;
 $26 = $3;
 $27 = ($26|0)!=(0);
 if ($27) {
  $5 = $4;
 } else {
  $6 = $4;
 }
 $28 = $2;
 $29 = (($28) + 1)|0;
 $30 = $5;
 $31 = $6;
 $32 = (_select($29,$30,$31,0,$7)|0);
 $8 = $32;
 $33 = $8;
 $34 = ($33|0)==(-1);
 if (!($34)) {
  $35 = $8;
  STACKTOP = sp;return ($35|0);
 }
 _perror(21987);
 $35 = $8;
 STACKTOP = sp;return ($35|0);
}
function _kftp_reconnect($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(-1);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  (_close($8)|0);
  $9 = $1;
  $10 = ((($9)) + 24|0);
  HEAP32[$10>>2] = -1;
 }
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 (_close($13)|0);
 $14 = $1;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = -1;
 $16 = $1;
 $17 = (_kftp_connect($16)|0);
 STACKTOP = sp;return ($17|0);
}
function _kftp_parse_url($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = (_strstr($8,22045)|0);
 $10 = $3;
 $11 = ($9|0)!=($10|0);
 if ($11) {
  $2 = 0;
  $84 = $2;
  STACKTOP = sp;return ($84|0);
 }
 $12 = $3;
 $13 = ((($12)) + 6|0);
 $6 = $13;
 while(1) {
  $14 = $6;
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = ($16|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $6;
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)!=(47);
  if (!($21)) {
   break;
  }
  $22 = $6;
  $23 = ((($22)) + 1|0);
  $6 = $23;
 }
 $24 = $6;
 $25 = HEAP8[$24>>0]|0;
 $26 = $25 << 24 >> 24;
 $27 = ($26|0)!=(47);
 if ($27) {
  $2 = 0;
  $84 = $2;
  STACKTOP = sp;return ($84|0);
 }
 $28 = $6;
 $29 = $3;
 $30 = $28;
 $31 = $29;
 $32 = (($30) - ($31))|0;
 $33 = (($32) - 6)|0;
 $7 = $33;
 $34 = (_calloc(1,96)|0);
 $5 = $34;
 $35 = $5;
 HEAP32[$35>>2] = 2;
 $36 = $5;
 $37 = ((($36)) + 4|0);
 HEAP32[$37>>2] = -1;
 $38 = (___strdup(22052)|0);
 $39 = $5;
 $40 = ((($39)) + 20|0);
 HEAP32[$40>>2] = $38;
 $41 = $7;
 $42 = (($41) + 1)|0;
 $43 = (_calloc($42,1)|0);
 $44 = $5;
 $45 = ((($44)) + 16|0);
 HEAP32[$45>>2] = $43;
 $46 = $4;
 $47 = (_strchr($46,99)|0);
 $48 = ($47|0)!=(0|0);
 if ($48) {
  $49 = $5;
  $50 = ((($49)) + 52|0);
  HEAP32[$50>>2] = 1;
 }
 $51 = $5;
 $52 = ((($51)) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $3;
 $55 = ((($54)) + 6|0);
 $56 = $7;
 (_strncpy($53,$55,$56)|0);
 $57 = $6;
 $58 = (_strlen($57)|0);
 $59 = (($58) + 8)|0;
 $60 = (_calloc($59,1)|0);
 $61 = $5;
 $62 = ((($61)) + 64|0);
 HEAP32[$62>>2] = $60;
 $63 = $5;
 $64 = ((($63)) + 64|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $6;
 HEAP32[$vararg_buffer>>2] = $66;
 (_sprintf($65,22055,$vararg_buffer)|0);
 $67 = $6;
 $68 = (_strlen($67)|0);
 $69 = (($68) + 8)|0;
 $70 = (_calloc($69,1)|0);
 $71 = $5;
 $72 = ((($71)) + 68|0);
 HEAP32[$72>>2] = $70;
 $73 = $5;
 $74 = ((($73)) + 68|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $6;
 HEAP32[$vararg_buffer1>>2] = $76;
 (_sprintf($75,22065,$vararg_buffer1)|0);
 $77 = $5;
 $78 = ((($77)) + 72|0);
 $79 = $78;
 $80 = $79;
 HEAP32[$80>>2] = 0;
 $81 = (($79) + 4)|0;
 $82 = $81;
 HEAP32[$82>>2] = 0;
 $83 = $5;
 $2 = $83;
 $84 = $2;
 STACKTOP = sp;return ($84|0);
}
function _kftp_connect_file($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $4 = sp;
 $5 = sp + 40|0;
 $2 = $0;
 $6 = $2;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(-1);
 if ($9) {
  $10 = $2;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  (_close($12)|0);
  $13 = $2;
  $14 = ((($13)) + 52|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0);
  if ($16) {
   $17 = $2;
   (_kftp_get_response($17)|0);
  }
 }
 $18 = $2;
 (_kftp_pasv_prep($18)|0);
 $19 = $2;
 $20 = $2;
 $21 = ((($20)) + 68|0);
 $22 = HEAP32[$21>>2]|0;
 (_kftp_send_cmd($19,$22,1)|0);
 $23 = $2;
 $24 = ((($23)) + 60|0);
 $25 = HEAP32[$24>>2]|0;
 HEAP32[$vararg_buffer>>2] = $4;
 $26 = (_sscanf($25,22075,$vararg_buffer)|0);
 $27 = ($26|0)!=(1);
 if ($27) {
  $1 = -1;
  $86 = $1;
  STACKTOP = sp;return ($86|0);
 }
 $28 = $4;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = ((($34)) + 80|0);
 $36 = $35;
 $37 = $36;
 HEAP32[$37>>2] = $30;
 $38 = (($36) + 4)|0;
 $39 = $38;
 HEAP32[$39>>2] = $33;
 $40 = $2;
 $41 = ((($40)) + 8|0);
 $42 = $41;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)>(0);
 $49 = ($44>>>0)>=(0);
 $50 = ($47|0)==(0);
 $51 = $50 & $49;
 $52 = $48 | $51;
 if ($52) {
  $53 = $2;
  $54 = ((($53)) + 8|0);
  $55 = $54;
  $56 = $55;
  $57 = HEAP32[$56>>2]|0;
  $58 = (($55) + 4)|0;
  $59 = $58;
  $60 = HEAP32[$59>>2]|0;
  $61 = $vararg_buffer1;
  $62 = $61;
  HEAP32[$62>>2] = $57;
  $63 = (($61) + 4)|0;
  $64 = $63;
  HEAP32[$64>>2] = $60;
  (_sprintf($5,22084,$vararg_buffer1)|0);
  $65 = $2;
  (_kftp_send_cmd($65,$5,1)|0);
 }
 $66 = $2;
 $67 = $2;
 $68 = ((($67)) + 64|0);
 $69 = HEAP32[$68>>2]|0;
 (_kftp_send_cmd($66,$69,0)|0);
 $70 = $2;
 (_kftp_pasv_connect($70)|0);
 $71 = $2;
 $72 = (_kftp_get_response($71)|0);
 $3 = $72;
 $73 = $3;
 $74 = ($73|0)!=(150);
 if ($74) {
  $75 = HEAP32[2410]|0;
  $76 = $2;
  $77 = ((($76)) + 60|0);
  $78 = HEAP32[$77>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $78;
  (_fprintf($75,22096,$vararg_buffer4)|0);
  $79 = $2;
  $80 = ((($79)) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  (_close($81)|0);
  $82 = $2;
  $83 = ((($82)) + 4|0);
  HEAP32[$83>>2] = -1;
  $1 = -1;
  $86 = $1;
  STACKTOP = sp;return ($86|0);
 } else {
  $84 = $2;
  $85 = ((($84)) + 56|0);
  HEAP32[$85>>2] = 1;
  $1 = 0;
  $86 = $1;
  STACKTOP = sp;return ($86|0);
 }
 return (0)|0;
}
function _kftp_pasv_prep($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $4 = sp + 24|0;
 $2 = $0;
 $5 = $2;
 (_kftp_send_cmd($5,22200,1)|0);
 $6 = $2;
 $7 = ((($6)) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 $3 = $8;
 while(1) {
  $9 = $3;
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   break;
  }
  $13 = $3;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($15|0)!=(40);
  if (!($16)) {
   break;
  }
  $17 = $3;
  $18 = ((($17)) + 1|0);
  $3 = $18;
 }
 $19 = $3;
 $20 = HEAP8[$19>>0]|0;
 $21 = $20 << 24 >> 24;
 $22 = ($21|0)!=(40);
 if ($22) {
  $1 = -1;
  $42 = $1;
  STACKTOP = sp;return ($42|0);
 } else {
  $23 = $3;
  $24 = ((($23)) + 1|0);
  $3 = $24;
  $25 = $3;
  $26 = ((($4)) + 4|0);
  $27 = ((($4)) + 8|0);
  $28 = ((($4)) + 12|0);
  $29 = ((($4)) + 16|0);
  $30 = ((($4)) + 20|0);
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $26;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $27;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $28;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $29;
  $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
  HEAP32[$vararg_ptr5>>2] = $30;
  (_sscanf($25,22207,$vararg_buffer)|0);
  $31 = $2;
  $32 = ((($31)) + 28|0);
  ;HEAP32[$32>>2]=HEAP32[$4>>2]|0;HEAP32[$32+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$32+12>>2]=HEAP32[$4+12>>2]|0;
  $33 = ((($4)) + 16|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $34 << 8;
  $36 = $35 & 65280;
  $37 = ((($4)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($36) + ($38))|0;
  $40 = $2;
  $41 = ((($40)) + 44|0);
  HEAP32[$41>>2] = $39;
  $1 = 0;
  $42 = $1;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _kftp_pasv_connect($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer6 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0;
 var $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 48|0;
 $4 = sp + 36|0;
 $2 = $0;
 $5 = $2;
 $6 = ((($5)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = HEAP32[2410]|0;
  (_fprintf($9,22120,$vararg_buffer)|0);
  $1 = -1;
  $35 = $1;
  STACKTOP = sp;return ($35|0);
 }
 $10 = $2;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $2;
 $14 = ((($13)) + 28|0);
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = ((($17)) + 28|0);
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $2;
 $22 = ((($21)) + 28|0);
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $12;
 $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr3>>2] = $16;
 $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
 HEAP32[$vararg_ptr4>>2] = $20;
 $vararg_ptr5 = ((($vararg_buffer1)) + 12|0);
 HEAP32[$vararg_ptr5>>2] = $24;
 (_sprintf($3,22185,$vararg_buffer1)|0);
 $25 = $2;
 $26 = ((($25)) + 44|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$vararg_buffer6>>2] = $27;
 (_sprintf($4,22197,$vararg_buffer6)|0);
 $28 = (_socket_connect($3,$4)|0);
 $29 = $2;
 $30 = ((($29)) + 4|0);
 HEAP32[$30>>2] = $28;
 $31 = $2;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(-1);
 if ($34) {
  $1 = -1;
  $35 = $1;
  STACKTOP = sp;return ($35|0);
 } else {
  $1 = 0;
  $35 = $1;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _khttp_parse_url($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $11 = (_strstr($10,22225)|0);
 $12 = $3;
 $13 = ($11|0)!=($12|0);
 if ($13) {
  $2 = 0;
  $150 = $2;
  STACKTOP = sp;return ($150|0);
 }
 $14 = $3;
 $15 = ((($14)) + 7|0);
 $6 = $15;
 while(1) {
  $16 = $6;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   break;
  }
  $20 = $6;
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 << 24 >> 24;
  $23 = ($22|0)!=(47);
  if (!($23)) {
   break;
  }
  $24 = $6;
  $25 = ((($24)) + 1|0);
  $6 = $25;
 }
 $26 = $6;
 $27 = $3;
 $28 = $26;
 $29 = $27;
 $30 = (($28) - ($29))|0;
 $31 = (($30) - 7)|0;
 $9 = $31;
 $32 = (_calloc(1,96)|0);
 $5 = $32;
 $33 = $9;
 $34 = (($33) + 1)|0;
 $35 = (_calloc($34,1)|0);
 $36 = $5;
 $37 = ((($36)) + 92|0);
 HEAP32[$37>>2] = $35;
 $38 = $5;
 $39 = ((($38)) + 92|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $3;
 $42 = ((($41)) + 7|0);
 $43 = $9;
 (_strncpy($40,$42,$43)|0);
 $44 = $9;
 $45 = $5;
 $46 = ((($45)) + 92|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + ($44)|0);
 HEAP8[$48>>0] = 0;
 $49 = $5;
 $50 = ((($49)) + 92|0);
 $51 = HEAP32[$50>>2]|0;
 $8 = $51;
 while(1) {
  $52 = $8;
  $53 = HEAP8[$52>>0]|0;
  $54 = $53 << 24 >> 24;
  $55 = ($54|0)!=(0);
  if (!($55)) {
   break;
  }
  $56 = $8;
  $57 = HEAP8[$56>>0]|0;
  $58 = $57 << 24 >> 24;
  $59 = ($58|0)!=(58);
  if (!($59)) {
   break;
  }
  $60 = $8;
  $61 = ((($60)) + 1|0);
  $8 = $61;
 }
 $62 = $8;
 $63 = HEAP8[$62>>0]|0;
 $64 = $63 << 24 >> 24;
 $65 = ($64|0)==(58);
 if ($65) {
  $66 = $8;
  $67 = ((($66)) + 1|0);
  $8 = $67;
  HEAP8[$66>>0] = 0;
 }
 $68 = (_getenv((22233|0))|0);
 $7 = $68;
 $69 = $7;
 $70 = ($69|0)==(0|0);
 if ($70) {
  $71 = $5;
  $72 = ((($71)) + 92|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (___strdup($73)|0);
  $75 = $5;
  $76 = ((($75)) + 16|0);
  HEAP32[$76>>2] = $74;
  $77 = $8;
  $78 = HEAP8[$77>>0]|0;
  $79 = $78 << 24 >> 24;
  $80 = ($79|0)!=(0);
  $81 = $8;
  $82 = $80 ? $81 : 22244;
  $83 = (___strdup($82)|0);
  $84 = $5;
  $85 = ((($84)) + 20|0);
  HEAP32[$85>>2] = $83;
  $86 = $6;
  $87 = HEAP8[$86>>0]|0;
  $88 = $87 << 24 >> 24;
  $89 = ($88|0)!=(0);
  $90 = $6;
  $91 = $89 ? $90 : 22247;
  $92 = (___strdup($91)|0);
  $93 = $5;
  $94 = ((($93)) + 88|0);
  HEAP32[$94>>2] = $92;
 } else {
  $95 = $7;
  $96 = (_strstr($95,22225)|0);
  $97 = $7;
  $98 = ($96|0)==($97|0);
  $99 = $7;
  if ($98) {
   $100 = ((($99)) + 7|0);
   $101 = (___strdup($100)|0);
   $105 = $101;
  } else {
   $102 = (___strdup($99)|0);
   $105 = $102;
  }
  $103 = $5;
  $104 = ((($103)) + 16|0);
  HEAP32[$104>>2] = $105;
  $106 = $5;
  $107 = ((($106)) + 16|0);
  $108 = HEAP32[$107>>2]|0;
  $8 = $108;
  while(1) {
   $109 = $8;
   $110 = HEAP8[$109>>0]|0;
   $111 = $110 << 24 >> 24;
   $112 = ($111|0)!=(0);
   if (!($112)) {
    break;
   }
   $113 = $8;
   $114 = HEAP8[$113>>0]|0;
   $115 = $114 << 24 >> 24;
   $116 = ($115|0)!=(58);
   if (!($116)) {
    break;
   }
   $117 = $8;
   $118 = ((($117)) + 1|0);
   $8 = $118;
  }
  $119 = $8;
  $120 = HEAP8[$119>>0]|0;
  $121 = $120 << 24 >> 24;
  $122 = ($121|0)==(58);
  if ($122) {
   $123 = $8;
   $124 = ((($123)) + 1|0);
   $8 = $124;
   HEAP8[$123>>0] = 0;
  }
  $125 = $8;
  $126 = HEAP8[$125>>0]|0;
  $127 = $126 << 24 >> 24;
  $128 = ($127|0)!=(0);
  $129 = $8;
  $130 = $128 ? $129 : 22244;
  $131 = (___strdup($130)|0);
  $132 = $5;
  $133 = ((($132)) + 20|0);
  HEAP32[$133>>2] = $131;
  $134 = $3;
  $135 = (___strdup($134)|0);
  $136 = $5;
  $137 = ((($136)) + 88|0);
  HEAP32[$137>>2] = $135;
 }
 $138 = $5;
 HEAP32[$138>>2] = 3;
 $139 = $5;
 $140 = ((($139)) + 4|0);
 HEAP32[$140>>2] = -1;
 $141 = $5;
 $142 = ((($141)) + 24|0);
 HEAP32[$142>>2] = -1;
 $143 = $5;
 $144 = ((($143)) + 72|0);
 $145 = $144;
 $146 = $145;
 HEAP32[$146>>2] = 0;
 $147 = (($145) + 4)|0;
 $148 = $147;
 HEAP32[$148>>2] = 0;
 $149 = $5;
 $2 = $149;
 $150 = $2;
 STACKTOP = sp;return ($150|0);
}
function _khttp_connect_file($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer8 = sp + 16|0;
 $vararg_buffer5 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = sp + 28|0;
 $2 = $0;
 $4 = 0;
 $9 = $2;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(-1);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  (_close($15)|0);
 }
 $16 = $2;
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $2;
 $20 = ((($19)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_socket_connect($18,$21)|0);
 $23 = $2;
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = $22;
 $25 = (_calloc(65536,1)|0);
 $5 = $25;
 $26 = $5;
 $27 = $4;
 $28 = (($26) + ($27)|0);
 $29 = $2;
 $30 = ((($29)) + 88|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $2;
 $33 = ((($32)) + 92|0);
 $34 = HEAP32[$33>>2]|0;
 HEAP32[$vararg_buffer>>2] = $31;
 $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $34;
 $35 = (_sprintf($28,22249,$vararg_buffer)|0);
 $36 = $4;
 $37 = (($36) + ($35))|0;
 $4 = $37;
 $38 = $5;
 $39 = $4;
 $40 = (($38) + ($39)|0);
 $41 = $2;
 $42 = ((($41)) + 8|0);
 $43 = $42;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = (($43) + 4)|0;
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 $49 = $vararg_buffer5;
 $50 = $49;
 HEAP32[$50>>2] = $45;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $48;
 $53 = (_sprintf($40,22277,$vararg_buffer5)|0);
 $54 = $4;
 $55 = (($54) + ($53))|0;
 $4 = $55;
 $56 = $5;
 $57 = $4;
 $58 = (($56) + ($57)|0);
 $59 = (_sprintf($58,22298,$vararg_buffer8)|0);
 $60 = $4;
 $61 = (($60) + ($59))|0;
 $4 = $61;
 $62 = $2;
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $5;
 $66 = $4;
 $67 = (_write($64,$65,$66)|0);
 $68 = $4;
 $69 = ($67|0)!=($68|0);
 if ($69) {
  $70 = $5;
  _free($70);
  $1 = -1;
  $174 = $1;
  STACKTOP = sp;return ($174|0);
 }
 $4 = 0;
 while(1) {
  $71 = $2;
  $72 = ((($71)) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $5;
  $75 = $4;
  $76 = (($74) + ($75)|0);
  $77 = (_read($73,$76,1)|0);
  $78 = ($77|0)!=(0);
  if (!($78)) {
   break;
  }
  $79 = $4;
  $80 = $5;
  $81 = (($80) + ($79)|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82 << 24 >> 24;
  $84 = ($83|0)==(10);
  $85 = $4;
  $86 = ($85|0)>=(3);
  $or$cond = $84 & $86;
  if ($or$cond) {
   $87 = $5;
   $88 = $4;
   $89 = (($87) + ($88)|0);
   $90 = ((($89)) + -3|0);
   $91 = (_strncmp($90,22301,4)|0);
   $92 = ($91|0)==(0);
   if ($92) {
    break;
   }
  }
  $93 = $4;
  $94 = (($93) + 1)|0;
  $4 = $94;
 }
 $95 = $4;
 $96 = $5;
 $97 = (($96) + ($95)|0);
 HEAP8[$97>>0] = 0;
 $98 = $4;
 $99 = ($98|0)<(14);
 $100 = $5;
 if ($99) {
  _free($100);
  $101 = $2;
  $102 = ((($101)) + 4|0);
  $103 = HEAP32[$102>>2]|0;
  (_close($103)|0);
  $104 = $2;
  $105 = ((($104)) + 4|0);
  HEAP32[$105>>2] = -1;
  $1 = -1;
  $174 = $1;
  STACKTOP = sp;return ($174|0);
 }
 $106 = ((($100)) + 8|0);
 $107 = (_strtol($106,$6,0)|0);
 $3 = $107;
 $108 = $3;
 $109 = ($108|0)==(200);
 L19: do {
  if ($109) {
   $110 = $2;
   $111 = ((($110)) + 8|0);
   $112 = $111;
   $113 = $112;
   $114 = HEAP32[$113>>2]|0;
   $115 = (($112) + 4)|0;
   $116 = $115;
   $117 = HEAP32[$116>>2]|0;
   $118 = ($117|0)>(0);
   $119 = ($114>>>0)>(0);
   $120 = ($117|0)==(0);
   $121 = $120 & $119;
   $122 = $118 | $121;
   if ($122) {
    $123 = $2;
    $124 = ((($123)) + 8|0);
    $125 = $124;
    $126 = $125;
    $127 = HEAP32[$126>>2]|0;
    $128 = (($125) + 4)|0;
    $129 = $128;
    $130 = HEAP32[$129>>2]|0;
    $7 = $127;
    while(1) {
     $131 = $7;
     $132 = ($131|0)!=(0);
     if (!($132)) {
      break L19;
     }
     $133 = $7;
     $134 = ($133|0)<(65536);
     $135 = $7;
     $136 = $134 ? $135 : 65536;
     $8 = $136;
     $137 = $2;
     $138 = ((($137)) + 4|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = $5;
     $141 = $8;
     $142 = (_my_netread($139,$140,$141)|0);
     $143 = $7;
     $144 = (($143) - ($142))|0;
     $7 = $144;
    }
   } else {
    label = 17;
   }
  } else {
   label = 17;
  }
 } while(0);
 if ((label|0) == 17) {
  $145 = $3;
  $146 = ($145|0)!=(206);
  $147 = $3;
  $148 = ($147|0)!=(200);
  $or$cond3 = $146 & $148;
  if ($or$cond3) {
   $149 = $5;
   _free($149);
   $150 = $2;
   $151 = ((($150)) + 4|0);
   $152 = HEAP32[$151>>2]|0;
   (_close($152)|0);
   $153 = $3;
   switch ($153|0) {
   case 401:  {
    $154 = (___errno_location()|0);
    HEAP32[$154>>2] = 1;
    break;
   }
   case 403:  {
    $155 = (___errno_location()|0);
    HEAP32[$155>>2] = 13;
    break;
   }
   case 404:  {
    $156 = (___errno_location()|0);
    HEAP32[$156>>2] = 2;
    break;
   }
   case 407:  {
    $157 = (___errno_location()|0);
    HEAP32[$157>>2] = 1;
    break;
   }
   case 408:  {
    $158 = (___errno_location()|0);
    HEAP32[$158>>2] = 110;
    break;
   }
   case 410:  {
    $159 = (___errno_location()|0);
    HEAP32[$159>>2] = 2;
    break;
   }
   case 503:  {
    $160 = (___errno_location()|0);
    HEAP32[$160>>2] = 11;
    break;
   }
   case 504:  {
    $161 = (___errno_location()|0);
    HEAP32[$161>>2] = 110;
    break;
   }
   default: {
    $162 = $3;
    $163 = ($162|0)>=(400);
    $164 = $3;
    $165 = ($164|0)<(500);
    $166 = $163 ? $165 : 0;
    $167 = $166 ? 22 : 5;
    $168 = (___errno_location()|0);
    HEAP32[$168>>2] = $167;
   }
   }
   $169 = $2;
   $170 = ((($169)) + 4|0);
   HEAP32[$170>>2] = -1;
   $1 = -1;
   $174 = $1;
   STACKTOP = sp;return ($174|0);
  }
 }
 $171 = $5;
 _free($171);
 $172 = $2;
 $173 = ((($172)) + 56|0);
 HEAP32[$173>>2] = 1;
 $1 = 0;
 $174 = $1;
 STACKTOP = sp;return ($174|0);
}
function _my_netread($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $5;
 $6 = $9;
 $8 = 0;
 while(1) {
  $10 = $6;
  $11 = ($10|0)!=(0);
  if (!($11)) {
   label = 6;
   break;
  }
  $12 = $3;
  $13 = (_socket_wait($12,1)|0);
  $14 = ($13|0)<=(0);
  if ($14) {
   label = 6;
   break;
  }
  $15 = $3;
  $16 = $4;
  $17 = $8;
  $18 = (($16) + ($17)|0);
  $19 = $6;
  $20 = (_read($15,$18,$19)|0);
  $7 = $20;
  $21 = $7;
  $22 = ($21|0)==(0);
  if ($22) {
   label = 6;
   break;
  }
  $23 = $7;
  $24 = $8;
  $25 = (($24) + ($23))|0;
  $8 = $25;
  $26 = $7;
  $27 = $6;
  $28 = (($27) - ($26))|0;
  $6 = $28;
 }
 if ((label|0) == 6) {
  $29 = $8;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _knet_open($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $7 = $4;
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 << 24 >> 24;
 $10 = ($9|0)!=(114);
 if ($10) {
  $11 = HEAP32[2410]|0;
  (_fprintf($11,22306,$vararg_buffer)|0);
  $2 = 0;
  $52 = $2;
  STACKTOP = sp;return ($52|0);
 }
 $12 = $3;
 $13 = (_strstr($12,22045)|0);
 $14 = $3;
 $15 = ($13|0)==($14|0);
 $16 = $3;
 do {
  if ($15) {
   $17 = $4;
   $18 = (_kftp_parse_url($16,$17)|0);
   $5 = $18;
   $19 = $5;
   $20 = ($19|0)==(0|0);
   if ($20) {
    $2 = 0;
    $52 = $2;
    STACKTOP = sp;return ($52|0);
   }
   $21 = $5;
   $22 = (_kftp_connect($21)|0);
   $23 = ($22|0)==(-1);
   $24 = $5;
   if (!($23)) {
    (_kftp_connect_file($24)|0);
    break;
   }
   (_knet_close($24)|0);
   $2 = 0;
   $52 = $2;
   STACKTOP = sp;return ($52|0);
  } else {
   $25 = (_strstr($16,22225)|0);
   $26 = $3;
   $27 = ($25|0)==($26|0);
   $28 = $3;
   if ($27) {
    $29 = $4;
    $30 = (_khttp_parse_url($28,$29)|0);
    $5 = $30;
    $31 = $5;
    $32 = ($31|0)==(0|0);
    if (!($32)) {
     $33 = $5;
     (_khttp_connect_file($33)|0);
     break;
    }
    $2 = 0;
    $52 = $2;
    STACKTOP = sp;return ($52|0);
   } else {
    $34 = (_open($28,0,$vararg_buffer1)|0);
    $6 = $34;
    $35 = $6;
    $36 = ($35|0)==(-1);
    if (!($36)) {
     $37 = (_calloc(1,96)|0);
     $5 = $37;
     $38 = $5;
     HEAP32[$38>>2] = 1;
     $39 = $6;
     $40 = $5;
     $41 = ((($40)) + 4|0);
     HEAP32[$41>>2] = $39;
     $42 = $5;
     $43 = ((($42)) + 24|0);
     HEAP32[$43>>2] = -1;
     break;
    }
    _perror(22347);
    $2 = 0;
    $52 = $2;
    STACKTOP = sp;return ($52|0);
   }
  }
 } while(0);
 $44 = $5;
 $45 = ($44|0)!=(0|0);
 if ($45) {
  $46 = $5;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(-1);
  if ($49) {
   $50 = $5;
   (_knet_close($50)|0);
   $2 = 0;
   $52 = $2;
   STACKTOP = sp;return ($52|0);
  }
 }
 $51 = $5;
 $2 = $51;
 $52 = $2;
 STACKTOP = sp;return ($52|0);
}
function _knet_close($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $1 = 0;
  $38 = $1;
  STACKTOP = sp;return ($38|0);
 }
 $5 = $2;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(-1);
 if ($8) {
  $9 = $2;
  $10 = ((($9)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  (_close($11)|0);
 }
 $12 = $2;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(-1);
 if ($15) {
  $16 = $2;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  (_close($18)|0);
 }
 $19 = $2;
 $20 = ((($19)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 _free($21);
 $22 = $2;
 $23 = ((($22)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 _free($24);
 $25 = $2;
 $26 = ((($25)) + 60|0);
 $27 = HEAP32[$26>>2]|0;
 _free($27);
 $28 = $2;
 $29 = ((($28)) + 64|0);
 $30 = HEAP32[$29>>2]|0;
 _free($30);
 $31 = $2;
 $32 = ((($31)) + 88|0);
 $33 = HEAP32[$32>>2]|0;
 _free($33);
 $34 = $2;
 $35 = ((($34)) + 92|0);
 $36 = HEAP32[$35>>2]|0;
 _free($36);
 $37 = $2;
 _free($37);
 $1 = 0;
 $38 = $1;
 STACKTOP = sp;return ($38|0);
}
function _knet_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $10 = $4;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(-1);
 if ($13) {
  $3 = 0;
  $87 = $3;
  STACKTOP = sp;return ($87|0);
 }
 $14 = $4;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(2);
 $17 = $4;
 if ($16) {
  $18 = ((($17)) + 56|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0);
  if ($20) {
   $21 = $4;
   $22 = ((($21)) + 52|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)!=(0);
   if (!($24)) {
    $25 = $4;
    (_kftp_reconnect($25)|0);
   }
   $26 = $4;
   (_kftp_connect_file($26)|0);
  }
 } else {
  $27 = HEAP32[$17>>2]|0;
  $28 = ($27|0)==(3);
  if ($28) {
   $29 = $4;
   $30 = ((($29)) + 56|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $33 = $4;
    (_khttp_connect_file($33)|0);
   }
  }
 }
 $34 = $4;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(1);
 L15: do {
  if ($36) {
   $37 = $6;
   $8 = $37;
   while(1) {
    $38 = $8;
    $39 = ($38|0)!=(0);
    if (!($39)) {
     break L15;
    }
    while(1) {
     $40 = $4;
     $41 = ((($40)) + 4|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = $5;
     $44 = $7;
     $45 = (($43) + ($44)|0);
     $46 = $8;
     $47 = (_read($42,$45,$46)|0);
     $9 = $47;
     $48 = $9;
     $49 = ($48|0)<(0);
     if (!($49)) {
      break;
     }
     $50 = (___errno_location()|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = (4)==($51|0);
     if (!($52)) {
      break;
     }
    }
    $53 = $9;
    $54 = ($53|0)<(0);
    if ($54) {
     break;
    }
    $55 = $9;
    $56 = ($55|0)==(0);
    if ($56) {
     break L15;
    }
    $57 = $9;
    $58 = $7;
    $59 = (($58) + ($57))|0;
    $7 = $59;
    $60 = $9;
    $61 = $8;
    $62 = (($61) - ($60))|0;
    $8 = $62;
   }
   $3 = -1;
   $87 = $3;
   STACKTOP = sp;return ($87|0);
  } else {
   $63 = $4;
   $64 = ((($63)) + 4|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $5;
   $67 = $6;
   $68 = (_my_netread($65,$66,$67)|0);
   $7 = $68;
  }
 } while(0);
 $69 = $7;
 $70 = ($69|0)<(0);
 $71 = $70 << 31 >> 31;
 $72 = $4;
 $73 = ((($72)) + 8|0);
 $74 = $73;
 $75 = $74;
 $76 = HEAP32[$75>>2]|0;
 $77 = (($74) + 4)|0;
 $78 = $77;
 $79 = HEAP32[$78>>2]|0;
 $80 = (_i64Add(($76|0),($79|0),($69|0),($71|0))|0);
 $81 = tempRet0;
 $82 = $73;
 $83 = $82;
 HEAP32[$83>>2] = $80;
 $84 = (($82) + 4)|0;
 $85 = $84;
 HEAP32[$85>>2] = $81;
 $86 = $7;
 $3 = $86;
 $87 = $3;
 STACKTOP = sp;return ($87|0);
}
function _knet_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = $5;
  $11 = ($10|0)<(0);
  $12 = $11 << 31 >> 31;
  $13 = $4;
  $14 = ((($13)) + 8|0);
  $15 = $14;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = ($10|0)==($17|0);
  $22 = ($12|0)==($20|0);
  $23 = $21 & $22;
  if ($23) {
   $3 = 0;
   $167 = $3;
   STACKTOP = sp;return ($167|0);
  }
 }
 $24 = $4;
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(1);
 $27 = $4;
 if ($26) {
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $5;
  $31 = $6;
  $32 = (_lseek($29,$30,$31)|0);
  $7 = $32;
  $33 = $7;
  $34 = ($33|0)==(-1);
  if ($34) {
   $3 = -1;
   $167 = $3;
   STACKTOP = sp;return ($167|0);
  } else {
   $35 = $7;
   $36 = ($35|0)<(0);
   $37 = $36 << 31 >> 31;
   $38 = $4;
   $39 = ((($38)) + 8|0);
   $40 = $39;
   $41 = $40;
   HEAP32[$41>>2] = $35;
   $42 = (($40) + 4)|0;
   $43 = $42;
   HEAP32[$43>>2] = $37;
   $44 = $4;
   $45 = ((($44)) + 8|0);
   $46 = $45;
   $47 = $46;
   $48 = HEAP32[$47>>2]|0;
   $49 = (($46) + 4)|0;
   $50 = $49;
   $51 = HEAP32[$50>>2]|0;
   $3 = $48;
   $167 = $3;
   STACKTOP = sp;return ($167|0);
  }
 }
 $52 = HEAP32[$27>>2]|0;
 $53 = ($52|0)==(2);
 if ($53) {
  $54 = $6;
  $55 = ($54|0)==(1);
  do {
   if ($55) {
    $56 = $5;
    $57 = ($56|0)<(0);
    $58 = $57 << 31 >> 31;
    $59 = $4;
    $60 = ((($59)) + 8|0);
    $61 = $60;
    $62 = $61;
    $63 = HEAP32[$62>>2]|0;
    $64 = (($61) + 4)|0;
    $65 = $64;
    $66 = HEAP32[$65>>2]|0;
    $67 = (_i64Add(($63|0),($66|0),($56|0),($58|0))|0);
    $68 = tempRet0;
    $69 = $60;
    $70 = $69;
    HEAP32[$70>>2] = $67;
    $71 = (($69) + 4)|0;
    $72 = $71;
    HEAP32[$72>>2] = $68;
   } else {
    $73 = $6;
    $74 = ($73|0)==(0);
    if ($74) {
     $75 = $5;
     $76 = ($75|0)<(0);
     $77 = $76 << 31 >> 31;
     $78 = $4;
     $79 = ((($78)) + 8|0);
     $80 = $79;
     $81 = $80;
     HEAP32[$81>>2] = $75;
     $82 = (($80) + 4)|0;
     $83 = $82;
     HEAP32[$83>>2] = $77;
     break;
    }
    $84 = $6;
    $85 = ($84|0)==(2);
    if ($85) {
     $86 = $4;
     $87 = ((($86)) + 80|0);
     $88 = $87;
     $89 = $88;
     $90 = HEAP32[$89>>2]|0;
     $91 = (($88) + 4)|0;
     $92 = $91;
     $93 = HEAP32[$92>>2]|0;
     $94 = $5;
     $95 = ($94|0)<(0);
     $96 = $95 << 31 >> 31;
     $97 = (_i64Add(($90|0),($93|0),($94|0),($96|0))|0);
     $98 = tempRet0;
     $99 = $4;
     $100 = ((($99)) + 8|0);
     $101 = $100;
     $102 = $101;
     HEAP32[$102>>2] = $97;
     $103 = (($101) + 4)|0;
     $104 = $103;
     HEAP32[$104>>2] = $98;
     break;
    }
    $3 = -1;
    $167 = $3;
    STACKTOP = sp;return ($167|0);
   }
  } while(0);
  $105 = $4;
  $106 = ((($105)) + 56|0);
  HEAP32[$106>>2] = 0;
  $107 = $4;
  $108 = ((($107)) + 8|0);
  $109 = $108;
  $110 = $109;
  $111 = HEAP32[$110>>2]|0;
  $112 = (($109) + 4)|0;
  $113 = $112;
  $114 = HEAP32[$113>>2]|0;
  $3 = $111;
  $167 = $3;
  STACKTOP = sp;return ($167|0);
 }
 $115 = $4;
 $116 = HEAP32[$115>>2]|0;
 $117 = ($116|0)==(3);
 if (!($117)) {
  $162 = (___errno_location()|0);
  HEAP32[$162>>2] = 22;
  $163 = HEAP32[2410]|0;
  $164 = (___errno_location()|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = (_strerror($165)|0);
  HEAP32[$vararg_buffer1>>2] = $166;
  (_fprintf($163,22422,$vararg_buffer1)|0);
  $3 = -1;
  $167 = $3;
  STACKTOP = sp;return ($167|0);
 }
 $118 = $6;
 $119 = ($118|0)==(2);
 if ($119) {
  $120 = HEAP32[2410]|0;
  (_fprintf($120,22352,$vararg_buffer)|0);
  $121 = (___errno_location()|0);
  HEAP32[$121>>2] = 29;
  $3 = -1;
  $167 = $3;
  STACKTOP = sp;return ($167|0);
 }
 $122 = $6;
 $123 = ($122|0)==(1);
 do {
  if ($123) {
   $124 = $5;
   $125 = ($124|0)<(0);
   $126 = $125 << 31 >> 31;
   $127 = $4;
   $128 = ((($127)) + 8|0);
   $129 = $128;
   $130 = $129;
   $131 = HEAP32[$130>>2]|0;
   $132 = (($129) + 4)|0;
   $133 = $132;
   $134 = HEAP32[$133>>2]|0;
   $135 = (_i64Add(($131|0),($134|0),($124|0),($126|0))|0);
   $136 = tempRet0;
   $137 = $128;
   $138 = $137;
   HEAP32[$138>>2] = $135;
   $139 = (($137) + 4)|0;
   $140 = $139;
   HEAP32[$140>>2] = $136;
  } else {
   $141 = $6;
   $142 = ($141|0)==(0);
   if ($142) {
    $143 = $5;
    $144 = ($143|0)<(0);
    $145 = $144 << 31 >> 31;
    $146 = $4;
    $147 = ((($146)) + 8|0);
    $148 = $147;
    $149 = $148;
    HEAP32[$149>>2] = $143;
    $150 = (($148) + 4)|0;
    $151 = $150;
    HEAP32[$151>>2] = $145;
    break;
   }
   $3 = -1;
   $167 = $3;
   STACKTOP = sp;return ($167|0);
  }
 } while(0);
 $152 = $4;
 $153 = ((($152)) + 56|0);
 HEAP32[$153>>2] = 0;
 $154 = $4;
 $155 = ((($154)) + 8|0);
 $156 = $155;
 $157 = $156;
 $158 = HEAP32[$157>>2]|0;
 $159 = (($156) + 4)|0;
 $160 = $159;
 $161 = HEAP32[$160>>2]|0;
 $3 = $158;
 $167 = $3;
 STACKTOP = sp;return ($167|0);
}
function _fai_build_core($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $3 = sp + 64|0;
 $11 = sp + 8|0;
 $12 = sp;
 $2 = $0;
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
 $13 = (_calloc(1,20)|0);
 $10 = $13;
 $14 = (_kh_init_s()|0);
 $15 = $10;
 $16 = ((($15)) + 16|0);
 HEAP32[$16>>2] = $14;
 $6 = -1;
 $5 = -1;
 $17 = $12;
 $18 = $17;
 HEAP32[$18>>2] = -1;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = -1;
 $7 = 0;
 $9 = -1;
 $8 = -1;
 $21 = $11;
 $22 = $21;
 HEAP32[$22>>2] = 0;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = 0;
 while(1) {
  $25 = $2;
  $26 = (_bgzf_getc($25)|0);
  $4 = $26;
  $27 = ($26|0)>=(0);
  if (!($27)) {
   label = 38;
   break;
  }
  $28 = $4;
  $29 = ($28|0)==(10);
  if ($29) {
   $30 = $7;
   $31 = ($30|0)==(1);
   if ($31) {
    $32 = $2;
    $33 = (_bgzf_utell($32)|0);
    $34 = ($33|0)<(0);
    $35 = $34 << 31 >> 31;
    $36 = $11;
    $37 = $36;
    HEAP32[$37>>2] = $33;
    $38 = (($36) + 4)|0;
    $39 = $38;
    HEAP32[$39>>2] = $35;
    continue;
   }
   $40 = $7;
   $41 = ($40|0)==(0);
   $42 = $12;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = (($42) + 4)|0;
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)<(0);
   $or$cond = $41 & $48;
   $49 = $7;
   $50 = ($49|0)==(2);
   $or$cond3 = $or$cond | $50;
   if ($or$cond3) {
    continue;
   }
   $51 = $7;
   $52 = ($51|0)==(0);
   if ($52) {
    $7 = 2;
    continue;
   }
  }
  $53 = $4;
  $54 = ($53|0)==(62);
  if ($54) {
   $55 = $12;
   $56 = $55;
   $57 = HEAP32[$56>>2]|0;
   $58 = (($55) + 4)|0;
   $59 = $58;
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)>(0);
   $62 = ($57>>>0)>=(0);
   $63 = ($60|0)==(0);
   $64 = $63 & $62;
   $65 = $61 | $64;
   if ($65) {
    $66 = $10;
    $67 = ((($3)) + 8|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $12;
    $70 = $69;
    $71 = HEAP32[$70>>2]|0;
    $72 = (($69) + 4)|0;
    $73 = $72;
    $74 = HEAP32[$73>>2]|0;
    $75 = $5;
    $76 = $6;
    $77 = $11;
    $78 = $77;
    $79 = HEAP32[$78>>2]|0;
    $80 = (($77) + 4)|0;
    $81 = $80;
    $82 = HEAP32[$81>>2]|0;
    $83 = (_fai_insert_index($66,$68,$71,$75,$76,$79,$82)|0);
    $84 = ($83|0)!=(0);
    if ($84) {
     break;
    }
   }
   HEAP32[$3>>2] = 0;
   while(1) {
    $85 = $2;
    $86 = (_bgzf_getc($85)|0);
    $4 = $86;
    $87 = ($86|0)>=(0);
    if (!($87)) {
     break;
    }
    $88 = $4;
    $89 = (_isspace($88)|0);
    $90 = ($89|0)!=(0);
    if ($90) {
     $92 = HEAP32[$3>>2]|0;
     $93 = ($92>>>0)>(0);
     $94 = $4;
     $95 = ($94|0)==(10);
     $or$cond5 = $93 | $95;
     if ($or$cond5) {
      break;
     } else {
      continue;
     }
    } else {
     $91 = $4;
     (_kputc__948($91,$3)|0);
     continue;
    }
   }
   (_kputsn_950(26441,0,$3)|0);
   $96 = $4;
   $97 = ($96|0)<(0);
   if ($97) {
    label = 18;
    break;
   }
   $99 = $4;
   $100 = ($99|0)!=(10);
   if ($100) {
    while(1) {
     $101 = $2;
     $102 = (_bgzf_getc($101)|0);
     $4 = $102;
     $103 = ($102|0)>=(0);
     $104 = $4;
     $105 = ($104|0)!=(10);
     $106 = $103 ? $105 : 0;
     if (!($106)) {
      break;
     }
    }
   }
   $7 = 1;
   $107 = $12;
   $108 = $107;
   HEAP32[$108>>2] = 0;
   $109 = (($107) + 4)|0;
   $110 = $109;
   HEAP32[$110>>2] = 0;
   $111 = $2;
   $112 = (_bgzf_utell($111)|0);
   $113 = ($112|0)<(0);
   $114 = $113 << 31 >> 31;
   $115 = $11;
   $116 = $115;
   HEAP32[$116>>2] = $112;
   $117 = (($115) + 4)|0;
   $118 = $117;
   HEAP32[$118>>2] = $114;
   continue;
  }
  $119 = $7;
  $120 = ($119|0)==(3);
  if ($120) {
   label = 23;
   break;
  }
  $124 = $7;
  $125 = ($124|0)==(2);
  if ($125) {
   $7 = 3;
  }
  $9 = 0;
  $8 = 0;
  while(1) {
   $126 = $8;
   $127 = (($126) + 1)|0;
   $8 = $127;
   $128 = $4;
   $129 = (_isgraph($128)|0);
   $130 = ($129|0)!=(0);
   if ($130) {
    $131 = $9;
    $132 = (($131) + 1)|0;
    $9 = $132;
   }
   $133 = $2;
   $134 = (_bgzf_getc($133)|0);
   $4 = $134;
   $135 = ($134|0)>=(0);
   $136 = $4;
   $137 = ($136|0)!=(10);
   $138 = $135 ? $137 : 0;
   if (!($138)) {
    break;
   }
  }
  $139 = $7;
  $140 = ($139|0)==(3);
  $141 = $9;
  $142 = ($141|0)!=(0);
  $or$cond7 = $140 & $142;
  if ($or$cond7) {
   label = 31;
   break;
  }
  $146 = $8;
  $147 = (($146) + 1)|0;
  $8 = $147;
  $148 = $9;
  $149 = ($148|0)<(0);
  $150 = $149 << 31 >> 31;
  $151 = $12;
  $152 = $151;
  $153 = HEAP32[$152>>2]|0;
  $154 = (($151) + 4)|0;
  $155 = $154;
  $156 = HEAP32[$155>>2]|0;
  $157 = (_i64Add(($153|0),($156|0),($148|0),($150|0))|0);
  $158 = tempRet0;
  $159 = $12;
  $160 = $159;
  HEAP32[$160>>2] = $157;
  $161 = (($159) + 4)|0;
  $162 = $161;
  HEAP32[$162>>2] = $158;
  $163 = $7;
  $164 = ($163|0)==(1);
  if ($164) {
   $165 = $8;
   $5 = $165;
   $166 = $9;
   $6 = $166;
   $7 = 0;
   continue;
  }
  $167 = $7;
  $168 = ($167|0)==(0);
  if (!($168)) {
   continue;
  }
  $169 = $8;
  $170 = $5;
  $171 = ($169|0)!=($170|0);
  if (!($171)) {
   $172 = $9;
   $173 = $6;
   $174 = ($172|0)!=($173|0);
   if (!($174)) {
    continue;
   }
  }
  $7 = 2;
 }
 if ((label|0) == 18) {
  $98 = HEAP32[2410]|0;
  (_fprintf($98,22438,$vararg_buffer)|0);
 }
 else if ((label|0) == 23) {
  $121 = HEAP32[2410]|0;
  $122 = ((($3)) + 8|0);
  $123 = HEAP32[$122>>2]|0;
  HEAP32[$vararg_buffer8>>2] = $123;
  (_fprintf($121,22487,$vararg_buffer8)|0);
 }
 else if ((label|0) == 31) {
  $143 = HEAP32[2410]|0;
  $144 = ((($3)) + 8|0);
  $145 = HEAP32[$144>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $145;
  (_fprintf($143,22557,$vararg_buffer10)|0);
 }
 else if ((label|0) == 38) {
  $175 = $12;
  $176 = $175;
  $177 = HEAP32[$176>>2]|0;
  $178 = (($175) + 4)|0;
  $179 = $178;
  $180 = HEAP32[$179>>2]|0;
  $181 = ($180|0)>(0);
  $182 = ($177>>>0)>=(0);
  $183 = ($180|0)==(0);
  $184 = $183 & $182;
  $185 = $181 | $184;
  if ($185) {
   $186 = $10;
   $187 = ((($3)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = $12;
   $190 = $189;
   $191 = HEAP32[$190>>2]|0;
   $192 = (($189) + 4)|0;
   $193 = $192;
   $194 = HEAP32[$193>>2]|0;
   $195 = $5;
   $196 = $6;
   $197 = $11;
   $198 = $197;
   $199 = HEAP32[$198>>2]|0;
   $200 = (($197) + 4)|0;
   $201 = $200;
   $202 = HEAP32[$201>>2]|0;
   $203 = (_fai_insert_index($186,$188,$191,$195,$196,$199,$202)|0);
   $204 = ($203|0)!=(0);
   if (!($204)) {
    $205 = ((($3)) + 8|0);
    $206 = HEAP32[$205>>2]|0;
    _free($206);
    $207 = $10;
    $1 = $207;
    $211 = $1;
    STACKTOP = sp;return ($211|0);
   }
  }
 }
 $208 = ((($3)) + 8|0);
 $209 = HEAP32[$208>>2]|0;
 _free($209);
 $210 = $10;
 _fai_destroy($210);
 $1 = 0;
 $211 = $1;
 STACKTOP = sp;return ($211|0);
}
function _kh_init_s() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,28)|0);
 return ($0|0);
}
function _fai_insert_index($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer4 = sp + 32|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $13 = sp;
 $15 = sp + 48|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $19 = $13;
 $20 = $19;
 HEAP32[$20>>2] = $5;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $6;
 $23 = $9;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  $25 = HEAP32[2410]|0;
  (_fprintf($25,22615,$vararg_buffer)|0);
  $7 = -1;
  $121 = $7;
  STACKTOP = sp;return ($121|0);
 }
 $26 = $9;
 $27 = (___strdup($26)|0);
 $14 = $27;
 $28 = $8;
 $29 = ((($28)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $14;
 $32 = (_kh_put_s($30,$31,$15)|0);
 $16 = $32;
 $33 = $16;
 $34 = $8;
 $35 = ((($34)) + 16|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 24|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + (($33*24)|0)|0);
 $17 = $39;
 $40 = HEAP32[$15>>2]|0;
 $41 = ($40|0)!=(0);
 if (!($41)) {
  $42 = HEAP32[2410]|0;
  $43 = $9;
  $44 = $13;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($44) + 4)|0;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $43;
  $vararg_ptr3 = ((($vararg_buffer1)) + 8|0);
  $50 = $vararg_ptr3;
  $51 = $50;
  HEAP32[$51>>2] = $46;
  $52 = (($50) + 4)|0;
  $53 = $52;
  HEAP32[$53>>2] = $49;
  (_fprintf($42,22648,$vararg_buffer1)|0);
  $54 = $14;
  _free($54);
  $7 = 0;
  $121 = $7;
  STACKTOP = sp;return ($121|0);
 }
 $55 = $8;
 $56 = ((($55)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $8;
 $59 = ((($58)) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($57|0)==($60|0);
 do {
  if ($61) {
   $62 = $8;
   $63 = ((($62)) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64|0)!=(0);
   if ($65) {
    $66 = $8;
    $67 = ((($66)) + 8|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $68 << 1;
    $72 = $69;
   } else {
    $72 = 16;
   }
   $70 = $8;
   $71 = ((($70)) + 8|0);
   HEAP32[$71>>2] = $72;
   $73 = $8;
   $74 = ((($73)) + 12|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $8;
   $77 = ((($76)) + 8|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $78<<2;
   $80 = (_realloc($75,$79)|0);
   $18 = $80;
   $81 = ($80|0)!=(0|0);
   if ($81) {
    $83 = $18;
    $84 = $8;
    $85 = ((($84)) + 12|0);
    HEAP32[$85>>2] = $83;
    break;
   }
   $82 = HEAP32[2410]|0;
   (_fprintf($82,22719,$vararg_buffer4)|0);
   $7 = -1;
   $121 = $7;
   STACKTOP = sp;return ($121|0);
  }
 } while(0);
 $86 = $14;
 $87 = $8;
 $88 = ((($87)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = (($89) + 1)|0;
 HEAP32[$88>>2] = $90;
 $91 = $8;
 $92 = ((($91)) + 12|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = (($93) + ($89<<2)|0);
 HEAP32[$94>>2] = $86;
 $95 = $10;
 $96 = ($95|0)<(0);
 $97 = $96 << 31 >> 31;
 $98 = $17;
 $99 = ((($98)) + 8|0);
 $100 = $99;
 $101 = $100;
 HEAP32[$101>>2] = $95;
 $102 = (($100) + 4)|0;
 $103 = $102;
 HEAP32[$103>>2] = $97;
 $104 = $11;
 $105 = $17;
 HEAP32[$105>>2] = $104;
 $106 = $12;
 $107 = $17;
 $108 = ((($107)) + 4|0);
 HEAP32[$108>>2] = $106;
 $109 = $13;
 $110 = $109;
 $111 = HEAP32[$110>>2]|0;
 $112 = (($109) + 4)|0;
 $113 = $112;
 $114 = HEAP32[$113>>2]|0;
 $115 = $17;
 $116 = ((($115)) + 16|0);
 $117 = $116;
 $118 = $117;
 HEAP32[$118>>2] = $111;
 $119 = (($117) + 4)|0;
 $120 = $119;
 HEAP32[$120>>2] = $114;
 $7 = 0;
 $121 = $7;
 STACKTOP = sp;return ($121|0);
}
function _kputc__948($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = $4;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8>>>0)>($11>>>0);
 do {
  if ($12) {
   $13 = $4;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 1)|0;
   $16 = $4;
   $17 = ((($16)) + 4|0);
   HEAP32[$17>>2] = $15;
   $18 = $4;
   $19 = ((($18)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + -1)|0;
   HEAP32[$19>>2] = $21;
   $22 = $4;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24 >>> 1;
   $26 = $4;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 | $25;
   HEAP32[$27>>2] = $29;
   $30 = $4;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $32 >>> 2;
   $34 = $4;
   $35 = ((($34)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $36 | $33;
   HEAP32[$35>>2] = $37;
   $38 = $4;
   $39 = ((($38)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 >>> 4;
   $42 = $4;
   $43 = ((($42)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 | $41;
   HEAP32[$43>>2] = $45;
   $46 = $4;
   $47 = ((($46)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $48 >>> 8;
   $50 = $4;
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $52 | $49;
   HEAP32[$51>>2] = $53;
   $54 = $4;
   $55 = ((($54)) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $56 >>> 16;
   $58 = $4;
   $59 = ((($58)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $60 | $57;
   HEAP32[$59>>2] = $61;
   $62 = $4;
   $63 = ((($62)) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) + 1)|0;
   HEAP32[$63>>2] = $65;
   $66 = $4;
   $67 = ((($66)) + 8|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $4;
   $70 = ((($69)) + 4|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (_realloc($68,$71)|0);
   $5 = $72;
   $73 = ($72|0)!=(0|0);
   if ($73) {
    $74 = $5;
    $75 = $4;
    $76 = ((($75)) + 8|0);
    HEAP32[$76>>2] = $74;
    break;
   }
   $2 = -1;
   $86 = $2;
   STACKTOP = sp;return ($86|0);
  }
 } while(0);
 $77 = $3;
 $78 = $77&255;
 $79 = $4;
 $80 = HEAP32[$79>>2]|0;
 $81 = (($80) + 1)|0;
 HEAP32[$79>>2] = $81;
 $82 = $4;
 $83 = ((($82)) + 8|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($84) + ($80)|0);
 HEAP8[$85>>0] = $78;
 $2 = 1;
 $86 = $2;
 STACKTOP = sp;return ($86|0);
}
function _kputsn_950($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6;
 $9 = HEAP32[$8>>2]|0;
 $10 = $5;
 $11 = (($9) + ($10))|0;
 $12 = (($11) + 1)|0;
 $13 = $6;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12>>>0)>=($15>>>0);
 do {
  if ($16) {
   $17 = $6;
   $18 = HEAP32[$17>>2]|0;
   $19 = $5;
   $20 = (($18) + ($19))|0;
   $21 = (($20) + 2)|0;
   $22 = $6;
   $23 = ((($22)) + 4|0);
   HEAP32[$23>>2] = $21;
   $24 = $6;
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + -1)|0;
   HEAP32[$25>>2] = $27;
   $28 = $6;
   $29 = ((($28)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $30 >>> 1;
   $32 = $6;
   $33 = ((($32)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $34 | $31;
   HEAP32[$33>>2] = $35;
   $36 = $6;
   $37 = ((($36)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $38 >>> 2;
   $40 = $6;
   $41 = ((($40)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $42 | $39;
   HEAP32[$41>>2] = $43;
   $44 = $6;
   $45 = ((($44)) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $46 >>> 4;
   $48 = $6;
   $49 = ((($48)) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $50 | $47;
   HEAP32[$49>>2] = $51;
   $52 = $6;
   $53 = ((($52)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 >>> 8;
   $56 = $6;
   $57 = ((($56)) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $58 | $55;
   HEAP32[$57>>2] = $59;
   $60 = $6;
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $62 >>> 16;
   $64 = $6;
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $66 | $63;
   HEAP32[$65>>2] = $67;
   $68 = $6;
   $69 = ((($68)) + 4|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($70) + 1)|0;
   HEAP32[$69>>2] = $71;
   $72 = $6;
   $73 = ((($72)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $6;
   $76 = ((($75)) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (_realloc($74,$77)|0);
   $7 = $78;
   $79 = ($78|0)!=(0|0);
   if ($79) {
    $80 = $7;
    $81 = $6;
    $82 = ((($81)) + 8|0);
    HEAP32[$82>>2] = $80;
    break;
   }
   $3 = -1;
   $102 = $3;
   STACKTOP = sp;return ($102|0);
  }
 } while(0);
 $83 = $6;
 $84 = ((($83)) + 8|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $6;
 $87 = HEAP32[$86>>2]|0;
 $88 = (($85) + ($87)|0);
 $89 = $4;
 $90 = $5;
 _memcpy(($88|0),($89|0),($90|0))|0;
 $91 = $5;
 $92 = $6;
 $93 = HEAP32[$92>>2]|0;
 $94 = (($93) + ($91))|0;
 HEAP32[$92>>2] = $94;
 $95 = $6;
 $96 = HEAP32[$95>>2]|0;
 $97 = $6;
 $98 = ((($97)) + 8|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = (($99) + ($96)|0);
 HEAP8[$100>>0] = 0;
 $101 = $5;
 $3 = $101;
 $102 = $3;
 STACKTOP = sp;return ($102|0);
}
function _fai_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $9 = $1;
  $10 = ((($9)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($8<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  _free($13);
  $14 = $2;
  $15 = (($14) + 1)|0;
  $2 = $15;
 }
 $16 = $1;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 _free($18);
 $19 = $1;
 $20 = ((($19)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 _kh_destroy_s($21);
 $22 = $1;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  $27 = $1;
  _free($27);
  STACKTOP = sp;return;
 }
 $25 = $1;
 $26 = HEAP32[$25>>2]|0;
 (_bgzf_close($26)|0);
 $27 = $1;
 _free($27);
 STACKTOP = sp;return;
}
function _kh_destroy_s($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _kh_put_s($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $4;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16>>>0)>=($19>>>0);
 do {
  if ($20) {
   $21 = $4;
   $22 = HEAP32[$21>>2]|0;
   $23 = $4;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 << 1;
   $27 = ($22>>>0)>($26>>>0);
   $28 = $4;
   $29 = $4;
   $30 = HEAP32[$29>>2]|0;
   if ($27) {
    $31 = (($30) - 1)|0;
    $32 = (_kh_resize_s($28,$31)|0);
    $33 = ($32|0)<(0);
    if (!($33)) {
     break;
    }
    $34 = $6;
    HEAP32[$34>>2] = -1;
    $35 = $4;
    $36 = HEAP32[$35>>2]|0;
    $3 = $36;
    $230 = $3;
    STACKTOP = sp;return ($230|0);
   } else {
    $37 = (($30) + 1)|0;
    $38 = (_kh_resize_s($28,$37)|0);
    $39 = ($38|0)<(0);
    if (!($39)) {
     break;
    }
    $40 = $6;
    HEAP32[$40>>2] = -1;
    $41 = $4;
    $42 = HEAP32[$41>>2]|0;
    $3 = $42;
    $230 = $3;
    STACKTOP = sp;return ($230|0);
   }
  }
 } while(0);
 $43 = $4;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) - 1)|0;
 $12 = $45;
 $13 = 0;
 $46 = $4;
 $47 = HEAP32[$46>>2]|0;
 $10 = $47;
 $7 = $47;
 $48 = $5;
 $49 = (___ac_X31_hash_string_957($48)|0);
 $8 = $49;
 $50 = $8;
 $51 = $12;
 $52 = $50 & $51;
 $9 = $52;
 $53 = $9;
 $54 = $53 >>> 4;
 $55 = $4;
 $56 = ((($55)) + 16|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) + ($54<<2)|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $9;
 $61 = $60 & 15;
 $62 = $61 << 1;
 $63 = $59 >>> $62;
 $64 = $63 & 2;
 $65 = ($64|0)!=(0);
 $66 = $9;
 do {
  if ($65) {
   $7 = $66;
  } else {
   $11 = $66;
   while(1) {
    $67 = $9;
    $68 = $67 >>> 4;
    $69 = $4;
    $70 = ((($69)) + 16|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($71) + ($68<<2)|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $9;
    $75 = $74 & 15;
    $76 = $75 << 1;
    $77 = $73 >>> $76;
    $78 = $77 & 2;
    $79 = ($78|0)!=(0);
    if ($79) {
     break;
    }
    $80 = $9;
    $81 = $80 >>> 4;
    $82 = $4;
    $83 = ((($82)) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($84) + ($81<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $9;
    $88 = $87 & 15;
    $89 = $88 << 1;
    $90 = $86 >>> $89;
    $91 = $90 & 1;
    $92 = ($91|0)!=(0);
    if (!($92)) {
     $93 = $9;
     $94 = $4;
     $95 = ((($94)) + 20|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = (($96) + ($93<<2)|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $5;
     $100 = (_strcmp($98,$99)|0);
     $101 = ($100|0)==(0);
     $102 = $101 ^ 1;
     if (!($102)) {
      break;
     }
    }
    $103 = $9;
    $104 = $103 >>> 4;
    $105 = $4;
    $106 = ((($105)) + 16|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (($107) + ($104<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $9;
    $111 = $110 & 15;
    $112 = $111 << 1;
    $113 = $109 >>> $112;
    $114 = $113 & 1;
    $115 = ($114|0)!=(0);
    if ($115) {
     $116 = $9;
     $10 = $116;
    }
    $117 = $9;
    $118 = $13;
    $119 = (($118) + 1)|0;
    $13 = $119;
    $120 = (($117) + ($119))|0;
    $121 = $12;
    $122 = $120 & $121;
    $9 = $122;
    $123 = $9;
    $124 = $11;
    $125 = ($123|0)==($124|0);
    if ($125) {
     label = 16;
     break;
    }
   }
   if ((label|0) == 16) {
    $126 = $10;
    $7 = $126;
   }
   $127 = $7;
   $128 = $4;
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = $9;
    $132 = $131 >>> 4;
    $133 = $4;
    $134 = ((($133)) + 16|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + ($132<<2)|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $9;
    $139 = $138 & 15;
    $140 = $139 << 1;
    $141 = $137 >>> $140;
    $142 = $141 & 2;
    $143 = ($142|0)!=(0);
    if ($143) {
     $144 = $10;
     $145 = $4;
     $146 = HEAP32[$145>>2]|0;
     $147 = ($144|0)!=($146|0);
     if ($147) {
      $148 = $10;
      $7 = $148;
      break;
     }
    }
    $149 = $9;
    $7 = $149;
   }
  }
 } while(0);
 $150 = $7;
 $151 = $150 >>> 4;
 $152 = $4;
 $153 = ((($152)) + 16|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = (($154) + ($151<<2)|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $7;
 $158 = $157 & 15;
 $159 = $158 << 1;
 $160 = $156 >>> $159;
 $161 = $160 & 2;
 $162 = ($161|0)!=(0);
 do {
  if ($162) {
   $163 = $5;
   $164 = $7;
   $165 = $4;
   $166 = ((($165)) + 20|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = (($167) + ($164<<2)|0);
   HEAP32[$168>>2] = $163;
   $169 = $7;
   $170 = $169 & 15;
   $171 = $170 << 1;
   $172 = 3 << $171;
   $173 = $172 ^ -1;
   $174 = $7;
   $175 = $174 >>> 4;
   $176 = $4;
   $177 = ((($176)) + 16|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = (($178) + ($175<<2)|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $180 & $173;
   HEAP32[$179>>2] = $181;
   $182 = $4;
   $183 = ((($182)) + 4|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (($184) + 1)|0;
   HEAP32[$183>>2] = $185;
   $186 = $4;
   $187 = ((($186)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = (($188) + 1)|0;
   HEAP32[$187>>2] = $189;
   $190 = $6;
   HEAP32[$190>>2] = 1;
  } else {
   $191 = $7;
   $192 = $191 >>> 4;
   $193 = $4;
   $194 = ((($193)) + 16|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = (($195) + ($192<<2)|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $7;
   $199 = $198 & 15;
   $200 = $199 << 1;
   $201 = $197 >>> $200;
   $202 = $201 & 1;
   $203 = ($202|0)!=(0);
   if ($203) {
    $204 = $5;
    $205 = $7;
    $206 = $4;
    $207 = ((($206)) + 20|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = (($208) + ($205<<2)|0);
    HEAP32[$209>>2] = $204;
    $210 = $7;
    $211 = $210 & 15;
    $212 = $211 << 1;
    $213 = 3 << $212;
    $214 = $213 ^ -1;
    $215 = $7;
    $216 = $215 >>> 4;
    $217 = $4;
    $218 = ((($217)) + 16|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = (($219) + ($216<<2)|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = $221 & $214;
    HEAP32[$220>>2] = $222;
    $223 = $4;
    $224 = ((($223)) + 4|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = (($225) + 1)|0;
    HEAP32[$224>>2] = $226;
    $227 = $6;
    HEAP32[$227>>2] = 2;
    break;
   } else {
    $228 = $6;
    HEAP32[$228>>2] = 0;
    break;
   }
  }
 } while(0);
 $229 = $7;
 $3 = $229;
 $230 = $3;
 STACKTOP = sp;return ($230|0);
}
function _kh_resize_s($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $10 = sp + 24|0;
 $16 = sp;
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = 1;
 $17 = $4;
 $18 = (($17) + -1)|0;
 $4 = $18;
 $19 = $4;
 $20 = $19 >>> 1;
 $21 = $4;
 $22 = $21 | $20;
 $4 = $22;
 $23 = $4;
 $24 = $23 >>> 2;
 $25 = $4;
 $26 = $25 | $24;
 $4 = $26;
 $27 = $4;
 $28 = $27 >>> 4;
 $29 = $4;
 $30 = $29 | $28;
 $4 = $30;
 $31 = $4;
 $32 = $31 >>> 8;
 $33 = $4;
 $34 = $33 | $32;
 $4 = $34;
 $35 = $4;
 $36 = $35 >>> 16;
 $37 = $4;
 $38 = $37 | $36;
 $4 = $38;
 $39 = $4;
 $40 = (($39) + 1)|0;
 $4 = $40;
 $41 = $4;
 $42 = ($41>>>0)<(4);
 $$ = $42 ? 4 : $40;
 $4 = $$;
 $43 = $3;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $4;
 $47 = (+($46>>>0));
 $48 = $47 * 0.77000000000000001;
 $49 = $48 + 0.5;
 $50 = (~~(($49))>>>0);
 $51 = ($45>>>0)>=($50>>>0);
 do {
  if ($51) {
   $6 = 0;
  } else {
   $52 = $4;
   $53 = ($52>>>0)<(16);
   $54 = $4;
   $55 = $54 >>> 4;
   $56 = $53 ? 1 : $55;
   $57 = $56<<2;
   $58 = (_malloc($57)|0);
   $5 = $58;
   $59 = $5;
   $60 = ($59|0)!=(0|0);
   if (!($60)) {
    $2 = -1;
    $279 = $2;
    STACKTOP = sp;return ($279|0);
   }
   $61 = $5;
   $62 = $4;
   $63 = ($62>>>0)<(16);
   $64 = $4;
   $65 = $64 >>> 4;
   $66 = $63 ? 1 : $65;
   $67 = $66<<2;
   _memset(($61|0),-86,($67|0))|0;
   $68 = $3;
   $69 = HEAP32[$68>>2]|0;
   $70 = $4;
   $71 = ($69>>>0)<($70>>>0);
   if ($71) {
    $72 = $3;
    $73 = ((($72)) + 20|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $4;
    $76 = $75<<2;
    $77 = (_realloc($74,$76)|0);
    $7 = $77;
    $78 = $7;
    $79 = ($78|0)!=(0|0);
    if (!($79)) {
     $80 = $5;
     _free($80);
     $2 = -1;
     $279 = $2;
     STACKTOP = sp;return ($279|0);
    }
    $81 = $7;
    $82 = $3;
    $83 = ((($82)) + 20|0);
    HEAP32[$83>>2] = $81;
    $84 = $3;
    $85 = ((($84)) + 24|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $4;
    $88 = ($87*24)|0;
    $89 = (_realloc($86,$88)|0);
    $8 = $89;
    $90 = $8;
    $91 = ($90|0)!=(0|0);
    if ($91) {
     $93 = $8;
     $94 = $3;
     $95 = ((($94)) + 24|0);
     HEAP32[$95>>2] = $93;
     break;
    }
    $92 = $5;
    _free($92);
    $2 = -1;
    $279 = $2;
    STACKTOP = sp;return ($279|0);
   }
  }
 } while(0);
 $96 = $6;
 $97 = ($96|0)!=(0);
 if ($97) {
  $6 = 0;
  while(1) {
   $98 = $6;
   $99 = $3;
   $100 = HEAP32[$99>>2]|0;
   $101 = ($98|0)!=($100|0);
   if (!($101)) {
    break;
   }
   $102 = $6;
   $103 = $102 >>> 4;
   $104 = $3;
   $105 = ((($104)) + 16|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + ($103<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $6;
   $110 = $109 & 15;
   $111 = $110 << 1;
   $112 = $108 >>> $111;
   $113 = $112 & 3;
   $114 = ($113|0)==(0);
   if ($114) {
    $115 = $6;
    $116 = $3;
    $117 = ((($116)) + 20|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (($118) + ($115<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $9 = $120;
    $121 = $4;
    $122 = (($121) - 1)|0;
    $11 = $122;
    $123 = $6;
    $124 = $3;
    $125 = ((($124)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = (($126) + (($123*24)|0)|0);
    ;HEAP32[$10>>2]=HEAP32[$127>>2]|0;HEAP32[$10+4>>2]=HEAP32[$127+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$127+8>>2]|0;HEAP32[$10+12>>2]=HEAP32[$127+12>>2]|0;HEAP32[$10+16>>2]=HEAP32[$127+16>>2]|0;HEAP32[$10+20>>2]=HEAP32[$127+20>>2]|0;
    $128 = $6;
    $129 = $128 & 15;
    $130 = $129 << 1;
    $131 = 1 << $130;
    $132 = $6;
    $133 = $132 >>> 4;
    $134 = $3;
    $135 = ((($134)) + 16|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (($136) + ($133<<2)|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = $138 | $131;
    HEAP32[$137>>2] = $139;
    while(1) {
     $14 = 0;
     $140 = $9;
     $141 = (___ac_X31_hash_string_957($140)|0);
     $12 = $141;
     $142 = $12;
     $143 = $11;
     $144 = $142 & $143;
     $13 = $144;
     while(1) {
      $145 = $13;
      $146 = $145 >>> 4;
      $147 = $5;
      $148 = (($147) + ($146<<2)|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = $13;
      $151 = $150 & 15;
      $152 = $151 << 1;
      $153 = $149 >>> $152;
      $154 = $153 & 2;
      $155 = ($154|0)!=(0);
      $156 = $155 ^ 1;
      $157 = $13;
      if (!($156)) {
       break;
      }
      $158 = $14;
      $159 = (($158) + 1)|0;
      $14 = $159;
      $160 = (($157) + ($159))|0;
      $161 = $11;
      $162 = $160 & $161;
      $13 = $162;
     }
     $163 = $157 & 15;
     $164 = $163 << 1;
     $165 = 2 << $164;
     $166 = $165 ^ -1;
     $167 = $13;
     $168 = $167 >>> 4;
     $169 = $5;
     $170 = (($169) + ($168<<2)|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = $171 & $166;
     HEAP32[$170>>2] = $172;
     $173 = $13;
     $174 = $3;
     $175 = HEAP32[$174>>2]|0;
     $176 = ($173>>>0)<($175>>>0);
     if (!($176)) {
      break;
     }
     $177 = $13;
     $178 = $177 >>> 4;
     $179 = $3;
     $180 = ((($179)) + 16|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = (($181) + ($178<<2)|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = $13;
     $185 = $184 & 15;
     $186 = $185 << 1;
     $187 = $183 >>> $186;
     $188 = $187 & 3;
     $189 = ($188|0)==(0);
     if (!($189)) {
      break;
     }
     $190 = $13;
     $191 = $3;
     $192 = ((($191)) + 20|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (($193) + ($190<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $15 = $195;
     $196 = $9;
     $197 = $13;
     $198 = $3;
     $199 = ((($198)) + 20|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = (($200) + ($197<<2)|0);
     HEAP32[$201>>2] = $196;
     $202 = $15;
     $9 = $202;
     $203 = $13;
     $204 = $3;
     $205 = ((($204)) + 24|0);
     $206 = HEAP32[$205>>2]|0;
     $207 = (($206) + (($203*24)|0)|0);
     ;HEAP32[$16>>2]=HEAP32[$207>>2]|0;HEAP32[$16+4>>2]=HEAP32[$207+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$207+8>>2]|0;HEAP32[$16+12>>2]=HEAP32[$207+12>>2]|0;HEAP32[$16+16>>2]=HEAP32[$207+16>>2]|0;HEAP32[$16+20>>2]=HEAP32[$207+20>>2]|0;
     $208 = $13;
     $209 = $3;
     $210 = ((($209)) + 24|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = (($211) + (($208*24)|0)|0);
     ;HEAP32[$212>>2]=HEAP32[$10>>2]|0;HEAP32[$212+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$212+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$212+12>>2]=HEAP32[$10+12>>2]|0;HEAP32[$212+16>>2]=HEAP32[$10+16>>2]|0;HEAP32[$212+20>>2]=HEAP32[$10+20>>2]|0;
     ;HEAP32[$10>>2]=HEAP32[$16>>2]|0;HEAP32[$10+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$10+12>>2]=HEAP32[$16+12>>2]|0;HEAP32[$10+16>>2]=HEAP32[$16+16>>2]|0;HEAP32[$10+20>>2]=HEAP32[$16+20>>2]|0;
     $213 = $13;
     $214 = $213 & 15;
     $215 = $214 << 1;
     $216 = 1 << $215;
     $217 = $13;
     $218 = $217 >>> 4;
     $219 = $3;
     $220 = ((($219)) + 16|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = (($221) + ($218<<2)|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = $223 | $216;
     HEAP32[$222>>2] = $224;
    }
    $225 = $9;
    $226 = $13;
    $227 = $3;
    $228 = ((($227)) + 20|0);
    $229 = HEAP32[$228>>2]|0;
    $230 = (($229) + ($226<<2)|0);
    HEAP32[$230>>2] = $225;
    $231 = $13;
    $232 = $3;
    $233 = ((($232)) + 24|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = (($234) + (($231*24)|0)|0);
    ;HEAP32[$235>>2]=HEAP32[$10>>2]|0;HEAP32[$235+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$235+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$235+12>>2]=HEAP32[$10+12>>2]|0;HEAP32[$235+16>>2]=HEAP32[$10+16>>2]|0;HEAP32[$235+20>>2]=HEAP32[$10+20>>2]|0;
   }
   $236 = $6;
   $237 = (($236) + 1)|0;
   $6 = $237;
  }
  $238 = $3;
  $239 = HEAP32[$238>>2]|0;
  $240 = $4;
  $241 = ($239>>>0)>($240>>>0);
  if ($241) {
   $242 = $3;
   $243 = ((($242)) + 20|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = $4;
   $246 = $245<<2;
   $247 = (_realloc($244,$246)|0);
   $248 = $3;
   $249 = ((($248)) + 20|0);
   HEAP32[$249>>2] = $247;
   $250 = $3;
   $251 = ((($250)) + 24|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = $4;
   $254 = ($253*24)|0;
   $255 = (_realloc($252,$254)|0);
   $256 = $3;
   $257 = ((($256)) + 24|0);
   HEAP32[$257>>2] = $255;
  }
  $258 = $3;
  $259 = ((($258)) + 16|0);
  $260 = HEAP32[$259>>2]|0;
  _free($260);
  $261 = $5;
  $262 = $3;
  $263 = ((($262)) + 16|0);
  HEAP32[$263>>2] = $261;
  $264 = $4;
  $265 = $3;
  HEAP32[$265>>2] = $264;
  $266 = $3;
  $267 = ((($266)) + 4|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = $3;
  $270 = ((($269)) + 8|0);
  HEAP32[$270>>2] = $268;
  $271 = $3;
  $272 = HEAP32[$271>>2]|0;
  $273 = (+($272>>>0));
  $274 = $273 * 0.77000000000000001;
  $275 = $274 + 0.5;
  $276 = (~~(($275))>>>0);
  $277 = $3;
  $278 = ((($277)) + 12|0);
  HEAP32[$278>>2] = $276;
 }
 $2 = 0;
 $279 = $2;
 STACKTOP = sp;return ($279|0);
}
function ___ac_X31_hash_string_957($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 << 24 >> 24;
 $2 = $5;
 $6 = $2;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 $8 = $1;
 $9 = ((($8)) + 1|0);
 $1 = $9;
 while(1) {
  $10 = $1;
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)!=(0);
  if (!($12)) {
   break;
  }
  $13 = $2;
  $14 = $13 << 5;
  $15 = $2;
  $16 = (($14) - ($15))|0;
  $17 = $1;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = (($16) + ($19))|0;
  $2 = $20;
  $21 = $1;
  $22 = ((($21)) + 1|0);
  $1 = $22;
 }
 $23 = $2;
 STACKTOP = sp;return ($23|0);
}
function _fai_save($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp + 24|0;
 $6 = sp;
 $2 = $0;
 $3 = $1;
 $5 = 0;
 while(1) {
  $7 = $5;
  $8 = $2;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $2;
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $5;
  $16 = $2;
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($15<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_kh_get_s($14,$20)|0);
  $4 = $21;
  $22 = $4;
  $23 = $2;
  $24 = ((($23)) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 24|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + (($22*24)|0)|0);
  ;HEAP32[$6>>2]=HEAP32[$28>>2]|0;HEAP32[$6+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$28+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$28+12>>2]|0;HEAP32[$6+16>>2]=HEAP32[$28+16>>2]|0;HEAP32[$6+20>>2]=HEAP32[$28+20>>2]|0;
  $29 = $3;
  $30 = $5;
  $31 = $2;
  $32 = ((($31)) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($6)) + 8|0);
  $37 = $36;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + 4)|0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($6)) + 16|0);
  $44 = $43;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($44) + 4)|0;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($6)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = HEAP32[$6>>2]|0;
  HEAP32[$vararg_buffer>>2] = $35;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $39;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  $53 = $vararg_ptr2;
  $54 = $53;
  HEAP32[$54>>2] = $46;
  $55 = (($53) + 4)|0;
  $56 = $55;
  HEAP32[$56>>2] = $49;
  $vararg_ptr3 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr3>>2] = $51;
  $vararg_ptr4 = ((($vararg_buffer)) + 20|0);
  HEAP32[$vararg_ptr4>>2] = $52;
  (_fprintf($29,22751,$vararg_buffer)|0);
  $57 = $5;
  $58 = (($57) + 1)|0;
  $5 = $58;
 }
 STACKTOP = sp;return;
}
function _kh_get_s($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $2 = 0;
  $85 = $2;
  STACKTOP = sp;return ($85|0);
 }
 $9 = 0;
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - 1)|0;
 $8 = $15;
 $16 = $4;
 $17 = (___ac_X31_hash_string_957($16)|0);
 $5 = $17;
 $18 = $5;
 $19 = $8;
 $20 = $18 & $19;
 $6 = $20;
 $21 = $6;
 $7 = $21;
 while(1) {
  $22 = $6;
  $23 = $22 >>> 4;
  $24 = $3;
  $25 = ((($24)) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + ($23<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $6;
  $30 = $29 & 15;
  $31 = $30 << 1;
  $32 = $28 >>> $31;
  $33 = $32 & 2;
  $34 = ($33|0)!=(0);
  if ($34) {
   $86 = 0;
  } else {
   $35 = $6;
   $36 = $35 >>> 4;
   $37 = $3;
   $38 = ((($37)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + ($36<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $6;
   $43 = $42 & 15;
   $44 = $43 << 1;
   $45 = $41 >>> $44;
   $46 = $45 & 1;
   $47 = ($46|0)!=(0);
   if ($47) {
    $86 = 1;
   } else {
    $48 = $6;
    $49 = $3;
    $50 = ((($49)) + 20|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($51) + ($48<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $4;
    $55 = (_strcmp($53,$54)|0);
    $56 = ($55|0)==(0);
    $57 = $56 ^ 1;
    $86 = $57;
   }
  }
  $58 = $6;
  if (!($86)) {
   break;
  }
  $59 = $9;
  $60 = (($59) + 1)|0;
  $9 = $60;
  $61 = (($58) + ($60))|0;
  $62 = $8;
  $63 = $61 & $62;
  $6 = $63;
  $64 = $6;
  $65 = $7;
  $66 = ($64|0)==($65|0);
  if ($66) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  $67 = $3;
  $68 = HEAP32[$67>>2]|0;
  $2 = $68;
  $85 = $2;
  STACKTOP = sp;return ($85|0);
 }
 $69 = $58 >>> 4;
 $70 = $3;
 $71 = ((($70)) + 16|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($72) + ($69<<2)|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $6;
 $76 = $75 & 15;
 $77 = $76 << 1;
 $78 = $74 >>> $77;
 $79 = $78 & 3;
 $80 = ($79|0)!=(0);
 if ($80) {
  $81 = $3;
  $82 = HEAP32[$81>>2]|0;
  $84 = $82;
 } else {
  $83 = $6;
  $84 = $83;
 }
 $2 = $84;
 $85 = $2;
 STACKTOP = sp;return ($85|0);
}
function _fai_build($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $7 = $2;
 $8 = (_strlen($7)|0);
 $9 = (($8) + 5)|0;
 $10 = (_calloc($9,1)|0);
 $3 = $10;
 $11 = $3;
 $12 = $2;
 HEAP32[$vararg_buffer>>2] = $12;
 (_sprintf($11,22769,$vararg_buffer)|0);
 $13 = $2;
 $14 = (_bgzf_open($13,23049)|0);
 $4 = $14;
 $15 = $4;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  $17 = HEAP32[2410]|0;
  $18 = $2;
  HEAP32[$vararg_buffer1>>2] = $18;
  (_fprintf($17,22776,$vararg_buffer1)|0);
  $19 = $3;
  _free($19);
  $1 = -1;
  $70 = $1;
  STACKTOP = sp;return ($70|0);
 }
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 >>> 29;
 $23 = $22 & 3;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $4;
  (_bgzf_index_build_init($25)|0);
 }
 $26 = $4;
 $27 = (_fai_build_core($26)|0);
 $6 = $27;
 $28 = $6;
 $29 = ($28|0)!=(0|0);
 $30 = $4;
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 >>> 29;
 $33 = $32 & 3;
 $34 = ($33|0)!=(0);
 if (!($29)) {
  if ($34) {
   $35 = $4;
   $36 = HEAP32[$35>>2]|0;
   $37 = $36 >>> 31;
   $38 = ($37|0)!=(0);
   if ($38) {
    $39 = HEAP32[2410]|0;
    (_fprintf($39,22820,$vararg_buffer4)|0);
   }
  }
  $40 = $4;
  (_bgzf_close($40)|0);
  $41 = $3;
  _free($41);
  $1 = -1;
  $70 = $1;
  STACKTOP = sp;return ($70|0);
 }
 if ($34) {
  $42 = $4;
  $43 = $2;
  $44 = (_bgzf_index_dump($42,$43,22879)|0);
  $45 = ($44|0)<(0);
  if ($45) {
   $46 = HEAP32[2410]|0;
   $47 = $2;
   HEAP32[$vararg_buffer6>>2] = $47;
   (_fprintf($46,22884,$vararg_buffer6)|0);
   $48 = $6;
   _fai_destroy($48);
   $49 = $3;
   _free($49);
   $1 = -1;
   $70 = $1;
   STACKTOP = sp;return ($70|0);
  }
 }
 $50 = $4;
 $51 = (_bgzf_close($50)|0);
 $52 = ($51|0)<(0);
 if ($52) {
  $53 = HEAP32[2410]|0;
  $54 = $2;
  HEAP32[$vararg_buffer9>>2] = $54;
  (_fprintf($53,22928,$vararg_buffer9)|0);
  $55 = $6;
  _fai_destroy($55);
  $56 = $3;
  _free($56);
  $1 = -1;
  $70 = $1;
  STACKTOP = sp;return ($70|0);
 }
 $57 = $3;
 $58 = (_fopen($57,22961)|0);
 $5 = $58;
 $59 = $5;
 $60 = ($59|0)!=(0|0);
 if ($60) {
  $65 = $6;
  $66 = $5;
  _fai_save($65,$66);
  $67 = $5;
  (_fclose($67)|0);
  $68 = $3;
  _free($68);
  $69 = $6;
  _fai_destroy($69);
  $1 = 0;
  $70 = $1;
  STACKTOP = sp;return ($70|0);
 } else {
  $61 = HEAP32[2410]|0;
  $62 = $3;
  HEAP32[$vararg_buffer12>>2] = $62;
  (_fprintf($61,22964,$vararg_buffer12)|0);
  $63 = $6;
  _fai_destroy($63);
  $64 = $3;
  _free($64);
  $1 = -1;
  $70 = $1;
  STACKTOP = sp;return ($70|0);
 }
 return (0)|0;
}
function _tokenise_search_path($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $7 = 58;
 $8 = $2;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $2 = 26441;
 }
 $10 = $2;
 $11 = (_strlen($10)|0);
 $6 = $11;
 $12 = (($11) + 5)|0;
 $13 = (_malloc($12)|0);
 $3 = $13;
 $14 = $3;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  $1 = 0;
  $237 = $1;
  STACKTOP = sp;return ($237|0);
 }
 $4 = 0;
 $5 = 0;
 while(1) {
  $16 = $4;
  $17 = $6;
  $18 = ($16>>>0)<($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = $4;
  $20 = $6;
  $21 = (($20) - 1)|0;
  $22 = ($19>>>0)<($21>>>0);
  if ($22) {
   $23 = $4;
   $24 = $2;
   $25 = (($24) + ($23)|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26 << 24 >> 24;
   $28 = ($27|0)==(58);
   if ($28) {
    $29 = $4;
    $30 = (($29) + 1)|0;
    $31 = $2;
    $32 = (($31) + ($30)|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33 << 24 >> 24;
    $35 = ($34|0)==(58);
    if ($35) {
     $36 = $5;
     $37 = (($36) + 1)|0;
     $5 = $37;
     $38 = $3;
     $39 = (($38) + ($36)|0);
     HEAP8[$39>>0] = 58;
     $40 = $4;
     $41 = (($40) + 1)|0;
     $4 = $41;
    } else {
     label = 11;
    }
   } else {
    label = 11;
   }
  } else {
   label = 11;
  }
  do {
   if ((label|0) == 11) {
    label = 0;
    $42 = $7;
    $43 = $42 << 24 >> 24;
    $44 = ($43|0)==(58);
    do {
     if ($44) {
      $45 = $4;
      $46 = ($45|0)==(0);
      if (!($46)) {
       $47 = $4;
       $48 = ($47>>>0)>(0);
       if (!($48)) {
        break;
       }
       $49 = $4;
       $50 = (($49) - 1)|0;
       $51 = $2;
       $52 = (($51) + ($50)|0);
       $53 = HEAP8[$52>>0]|0;
       $54 = $53 << 24 >> 24;
       $55 = ($54|0)==(58);
       if (!($55)) {
        break;
       }
      }
      $56 = $4;
      $57 = $2;
      $58 = (($57) + ($56)|0);
      $59 = (_strncmp($58,23006,5)|0);
      $60 = ($59|0)!=(0);
      if ($60) {
       $61 = $4;
       $62 = $2;
       $63 = (($62) + ($61)|0);
       $64 = (_strncmp($63,23012,4)|0);
       $65 = ($64|0)!=(0);
       if ($65) {
        $66 = $4;
        $67 = $2;
        $68 = (($67) + ($66)|0);
        $69 = (_strncmp($68,23017,6)|0);
        $70 = ($69|0)!=(0);
        if ($70) {
         $71 = $4;
         $72 = $2;
         $73 = (($72) + ($71)|0);
         $74 = (_strncmp($73,23024,5)|0);
         $75 = ($74|0)!=(0);
         if ($75) {
          $76 = $4;
          $77 = $2;
          $78 = (($77) + ($76)|0);
          $79 = (_strncmp($78,23030,9)|0);
          $80 = ($79|0)!=(0);
          if ($80) {
           $81 = $4;
           $82 = $2;
           $83 = (($82) + ($81)|0);
           $84 = (_strncmp($83,23040,8)|0);
           $85 = ($84|0)!=(0);
           if ($85) {
            break;
           }
          }
         }
        }
       }
      }
      while(1) {
       $86 = $4;
       $87 = $2;
       $88 = (($87) + ($86)|0);
       $89 = HEAP8[$88>>0]|0;
       $90 = $5;
       $91 = (($90) + 1)|0;
       $5 = $91;
       $92 = $3;
       $93 = (($92) + ($90)|0);
       HEAP8[$93>>0] = $89;
       $94 = $4;
       $95 = $6;
       $96 = ($94>>>0)<($95>>>0);
       if (!($96)) {
        break;
       }
       $97 = $4;
       $98 = (($97) + 1)|0;
       $4 = $98;
       $99 = $2;
       $100 = (($99) + ($97)|0);
       $101 = HEAP8[$100>>0]|0;
       $102 = $101 << 24 >> 24;
       $103 = ($102|0)!=(58);
       if (!($103)) {
        break;
       }
      }
      $104 = $4;
      $105 = $2;
      $106 = (($105) + ($104)|0);
      $107 = HEAP8[$106>>0]|0;
      $108 = $107 << 24 >> 24;
      $109 = ($108|0)==(58);
      if ($109) {
       $110 = $4;
       $111 = (($110) + 1)|0;
       $4 = $111;
      }
      $112 = $4;
      $113 = $2;
      $114 = (($113) + ($112)|0);
      $115 = HEAP8[$114>>0]|0;
      $116 = $115 << 24 >> 24;
      $117 = ($116|0)==(47);
      if ($117) {
       $118 = $4;
       $119 = (($118) + 1)|0;
       $4 = $119;
       $120 = $2;
       $121 = (($120) + ($118)|0);
       $122 = HEAP8[$121>>0]|0;
       $123 = $5;
       $124 = (($123) + 1)|0;
       $5 = $124;
       $125 = $3;
       $126 = (($125) + ($123)|0);
       HEAP8[$126>>0] = $122;
      }
      $127 = $4;
      $128 = $2;
      $129 = (($128) + ($127)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = ($131|0)==(47);
      if ($132) {
       $133 = $4;
       $134 = (($133) + 1)|0;
       $4 = $134;
       $135 = $2;
       $136 = (($135) + ($133)|0);
       $137 = HEAP8[$136>>0]|0;
       $138 = $5;
       $139 = (($138) + 1)|0;
       $5 = $139;
       $140 = $3;
       $141 = (($140) + ($138)|0);
       HEAP8[$141>>0] = $137;
      }
      while(1) {
       $142 = $4;
       $143 = (($142) + 1)|0;
       $4 = $143;
       $144 = $2;
       $145 = (($144) + ($142)|0);
       $146 = HEAP8[$145>>0]|0;
       $147 = $5;
       $148 = (($147) + 1)|0;
       $5 = $148;
       $149 = $3;
       $150 = (($149) + ($147)|0);
       HEAP8[$150>>0] = $146;
       $151 = $4;
       $152 = $6;
       $153 = ($151>>>0)<($152>>>0);
       if (!($153)) {
        break;
       }
       $154 = $4;
       $155 = $2;
       $156 = (($155) + ($154)|0);
       $157 = HEAP8[$156>>0]|0;
       $158 = $157 << 24 >> 24;
       $159 = ($158|0)!=(58);
       if (!($159)) {
        break;
       }
       $160 = $4;
       $161 = $2;
       $162 = (($161) + ($160)|0);
       $163 = HEAP8[$162>>0]|0;
       $164 = $163 << 24 >> 24;
       $165 = ($164|0)!=(47);
       if (!($165)) {
        break;
       }
      }
      $166 = $4;
      $167 = (($166) + 1)|0;
      $4 = $167;
      $168 = $2;
      $169 = (($168) + ($166)|0);
      $170 = HEAP8[$169>>0]|0;
      $171 = $5;
      $172 = (($171) + 1)|0;
      $5 = $172;
      $173 = $3;
      $174 = (($173) + ($171)|0);
      HEAP8[$174>>0] = $170;
      $175 = $4;
      $176 = $2;
      $177 = (($176) + ($175)|0);
      $178 = HEAP8[$177>>0]|0;
      $179 = $178 << 24 >> 24;
      $180 = ($179|0)==(58);
      if ($180) {
       $181 = $4;
       $182 = (($181) + 1)|0;
       $4 = $182;
      }
     }
    } while(0);
    $183 = $4;
    $184 = $2;
    $185 = (($184) + ($183)|0);
    $186 = HEAP8[$185>>0]|0;
    $187 = $186 << 24 >> 24;
    $188 = $7;
    $189 = $188 << 24 >> 24;
    $190 = ($187|0)==($189|0);
    if (!($190)) {
     $204 = $4;
     $205 = $2;
     $206 = (($205) + ($204)|0);
     $207 = HEAP8[$206>>0]|0;
     $208 = $5;
     $209 = (($208) + 1)|0;
     $5 = $209;
     $210 = $3;
     $211 = (($210) + ($208)|0);
     HEAP8[$211>>0] = $207;
     break;
    }
    $191 = $5;
    $192 = ($191|0)!=(0);
    if ($192) {
     $193 = $5;
     $194 = (($193) - 1)|0;
     $195 = $3;
     $196 = (($195) + ($194)|0);
     $197 = HEAP8[$196>>0]|0;
     $198 = $197 << 24 >> 24;
     $199 = ($198|0)!=(0);
     if ($199) {
      $200 = $5;
      $201 = (($200) + 1)|0;
      $5 = $201;
      $202 = $3;
      $203 = (($202) + ($200)|0);
      HEAP8[$203>>0] = 0;
     }
    }
   }
  } while(0);
  $212 = $4;
  $213 = (($212) + 1)|0;
  $4 = $213;
 }
 $214 = $5;
 $215 = ($214|0)!=(0);
 if ($215) {
  $216 = $5;
  $217 = (($216) + 1)|0;
  $5 = $217;
  $218 = $3;
  $219 = (($218) + ($216)|0);
  HEAP8[$219>>0] = 0;
 }
 $220 = $5;
 $221 = (($220) + 1)|0;
 $5 = $221;
 $222 = $3;
 $223 = (($222) + ($220)|0);
 HEAP8[$223>>0] = 46;
 $224 = $5;
 $225 = (($224) + 1)|0;
 $5 = $225;
 $226 = $3;
 $227 = (($226) + ($224)|0);
 HEAP8[$227>>0] = 47;
 $228 = $5;
 $229 = (($228) + 1)|0;
 $5 = $229;
 $230 = $3;
 $231 = (($230) + ($228)|0);
 HEAP8[$231>>0] = 0;
 $232 = $5;
 $233 = (($232) + 1)|0;
 $5 = $233;
 $234 = $3;
 $235 = (($234) + ($232)|0);
 HEAP8[$235>>0] = 0;
 $236 = $3;
 $1 = $236;
 $237 = $1;
 STACKTOP = sp;return ($237|0);
}
function _find_file_url($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8224|0);
 $5 = sp + 32|0;
 $3 = $0;
 $4 = $1;
 $7 = 0;
 $11 = $3;
 $12 = (_strlen($11)|0);
 $13 = (8190 - ($12))|0;
 $8 = $13;
 $6 = $5;
 while(1) {
  $14 = $4;
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = ($16|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $6;
  $19 = $18;
  $20 = $5;
  $21 = (($19) - ($20))|0;
  $22 = $8;
  $23 = ($21|0)<($22|0);
  if (!($23)) {
   break;
  }
  $24 = $4;
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($26|0)==(37);
  if ($27) {
   $28 = $4;
   $29 = ((($28)) + 1|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30 << 24 >> 24;
   $32 = ($31|0)==(115);
   if ($32) {
    $33 = $4;
    $34 = ((($33)) + 1|0);
    $4 = $34;
    $35 = $6;
    $36 = $3;
    $37 = (_strcpy($35,$36)|0);
    $38 = (_strlen($37)|0);
    $39 = $6;
    $40 = (($39) + ($38)|0);
    $6 = $40;
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
  if ((label|0) == 7) {
   label = 0;
   $41 = $4;
   $42 = HEAP8[$41>>0]|0;
   $43 = $6;
   $44 = ((($43)) + 1|0);
   $6 = $44;
   HEAP8[$43>>0] = $42;
  }
  $45 = $4;
  $46 = ((($45)) + 1|0);
  $4 = $46;
 }
 $47 = $6;
 $48 = ((($47)) + 1|0);
 $6 = $48;
 HEAP8[$47>>0] = 0;
 $49 = (_hopen($5,23049)|0);
 $10 = $49;
 $50 = ($49|0)!=(0|0);
 if (!($50)) {
  $2 = 0;
  $69 = $2;
  STACKTOP = sp;return ($69|0);
 }
 $51 = (_mfcreate(0,0)|0);
 $7 = $51;
 $52 = (0|0)==($51|0);
 if ($52) {
  $2 = 0;
  $69 = $2;
  STACKTOP = sp;return ($69|0);
 }
 while(1) {
  $53 = $10;
  $54 = (_hread_994($53,$5,8192)|0);
  $9 = $54;
  $55 = ($54|0)>(0);
  if (!($55)) {
   break;
  }
  $56 = $9;
  $57 = $7;
  $58 = (_mfwrite($5,$56,1,$57)|0);
  $59 = ($58>>>0)<=(0);
  if ($59) {
   label = 15;
   break;
  }
 }
 if ((label|0) == 15) {
  $60 = $10;
  _hclose_abruptly($60);
  $61 = $7;
  (_mfdestroy($61)|0);
  $2 = 0;
  $69 = $2;
  STACKTOP = sp;return ($69|0);
 }
 $62 = $10;
 $63 = (_hclose($62)|0);
 $64 = ($63|0)<(0);
 $65 = $9;
 $66 = ($65|0)<(0);
 $or$cond = $64 | $66;
 $67 = $7;
 if ($or$cond) {
  (_mfdestroy($67)|0);
  $2 = 0;
  $69 = $2;
  STACKTOP = sp;return ($69|0);
 } else {
  _mrewind($67);
  $68 = $7;
  $2 = $68;
  $69 = $2;
  STACKTOP = sp;return ($69|0);
 }
 return (0)|0;
}
function _hread_994($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $9;
 $14 = $12;
 $15 = (($13) - ($14))|0;
 $6 = $15;
 $16 = $6;
 $17 = $5;
 $18 = ($16>>>0)>($17>>>0);
 if ($18) {
  $19 = $5;
  $6 = $19;
 }
 $20 = $4;
 $21 = $3;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $6;
 _memcpy(($20|0),($23|0),($24|0))|0;
 $25 = $6;
 $26 = $3;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($25)|0);
 HEAP32[$27>>2] = $29;
 $30 = $6;
 $31 = $5;
 $32 = ($30|0)==($31|0);
 if ($32) {
  $33 = $6;
  $39 = $33;
  STACKTOP = sp;return ($39|0);
 } else {
  $34 = $3;
  $35 = $4;
  $36 = $5;
  $37 = $6;
  $38 = (_hread2($34,$35,$36,$37)|0);
  $39 = $38;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _open_path_mfile($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4144|0);
 $12 = sp + 36|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $13 = $5;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $15 = (_getenv((23051|0))|0);
  $5 = $15;
 }
 $16 = $5;
 $17 = (_tokenise_search_path($16)|0);
 $7 = $17;
 $18 = (0|0)==($17|0);
 if ($18) {
  $3 = 0;
  $73 = $3;
  STACKTOP = sp;return ($73|0);
 }
 $19 = $7;
 $8 = $19;
 L8: while(1) {
  $20 = $8;
  $21 = HEAP8[$20>>0]|0;
  $22 = ($21<<24>>24)!=(0);
  if (!($22)) {
   label = 20;
   break;
  }
  $23 = $8;
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 << 24 >> 24;
  $26 = ($25|0)==(124);
  $27 = $8;
  if ($26) {
   $28 = ((($27)) + 1|0);
   $10 = $28;
  } else {
   $10 = $27;
  }
  $29 = $10;
  $30 = (_strncmp($29,23059,4)|0);
  $31 = (0)==($30|0);
  do {
   if ($31) {
    $32 = $4;
    $33 = $10;
    $34 = ((($33)) + 4|0);
    $35 = (_find_file_url($32,$34)|0);
    $9 = $35;
    $36 = ($35|0)!=(0|0);
    if ($36) {
     label = 12;
     break L8;
    }
   } else {
    $39 = $10;
    $40 = (_strncmp($39,23006,5)|0);
    $41 = ($40|0)!=(0);
    if ($41) {
     $42 = $10;
     $43 = (_strncmp($42,23012,4)|0);
     $44 = ($43|0)!=(0);
     if ($44) {
      $51 = $4;
      $52 = $10;
      $53 = (_find_file_dir($51,$52)|0);
      $9 = $53;
      $54 = ($53|0)!=(0|0);
      if ($54) {
       label = 18;
       break L8;
      } else {
       break;
      }
     }
    }
    $45 = $4;
    $46 = $10;
    $47 = (_find_file_url($45,$46)|0);
    $9 = $47;
    $48 = ($47|0)!=(0|0);
    if ($48) {
     label = 16;
     break L8;
    }
   }
  } while(0);
  $57 = $8;
  $58 = (_strlen($57)|0);
  $59 = (($58) + 1)|0;
  $60 = $8;
  $61 = (($60) + ($59)|0);
  $8 = $61;
 }
 if ((label|0) == 12) {
  $37 = $7;
  _free($37);
  $38 = $9;
  $3 = $38;
  $73 = $3;
  STACKTOP = sp;return ($73|0);
 }
 else if ((label|0) == 16) {
  $49 = $7;
  _free($49);
  $50 = $9;
  $3 = $50;
  $73 = $3;
  STACKTOP = sp;return ($73|0);
 }
 else if ((label|0) == 18) {
  $55 = $7;
  _free($55);
  $56 = $9;
  $3 = $56;
  $73 = $3;
  STACKTOP = sp;return ($73|0);
 }
 else if ((label|0) == 20) {
  $62 = $7;
  _free($62);
  $63 = $6;
  $64 = ($63|0)!=(0|0);
  if ($64) {
   $65 = $6;
   (_strcpy($12,$65)|0);
   $66 = (_strrchr($12,47)|0);
   $11 = $66;
   $67 = ($66|0)!=(0|0);
   if ($67) {
    $68 = $11;
    HEAP8[$68>>0] = 0;
   }
   $69 = $4;
   $70 = (_find_file_dir($69,$12)|0);
   $9 = $70;
   $71 = ($70|0)!=(0|0);
   if ($71) {
    $72 = $9;
    $3 = $72;
    $73 = $3;
    STACKTOP = sp;return ($73|0);
   }
  }
  $3 = 0;
  $73 = $3;
  STACKTOP = sp;return ($73|0);
 }
 return (0)|0;
}
function _find_file_dir($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = 0;
 $6 = $2;
 $7 = $3;
 $8 = (_expand_path($6,$7)|0);
 $4 = $8;
 $9 = $4;
 $10 = (_is_file($9)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $4;
  $13 = (_mfopen($12,23064)|0);
  $5 = $13;
 }
 $14 = $4;
 _free($14);
 $15 = $5;
 STACKTOP = sp;return ($15|0);
}
function _expand_path($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $10 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $12 = $4;
 $13 = (_strlen($12)|0);
 $5 = $13;
 $14 = $3;
 $15 = (_strlen($14)|0);
 $6 = $15;
 $16 = $5;
 $17 = $6;
 $18 = (($16) + ($17))|0;
 $19 = (($18) + 2)|0;
 $20 = (_malloc($19)|0);
 $8 = $20;
 $21 = $8;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  $2 = 0;
  $151 = $2;
  STACKTOP = sp;return ($151|0);
 }
 $23 = $5;
 $24 = (($23) - 1)|0;
 $25 = $4;
 $26 = (($25) + ($24)|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27 << 24 >> 24;
 $29 = ($28|0)==(47);
 if ($29) {
  $30 = $5;
  $31 = (($30) + -1)|0;
  $5 = $31;
 }
 $32 = $3;
 $33 = HEAP8[$32>>0]|0;
 $34 = $33 << 24 >> 24;
 $35 = ($34|0)==(47);
 do {
  if ($35) {
   label = 8;
  } else {
   $36 = $5;
   $37 = ($36|0)==(1);
   if ($37) {
    $38 = $4;
    $39 = HEAP8[$38>>0]|0;
    $40 = $39 << 24 >> 24;
    $41 = ($40|0)==(46);
    if ($41) {
     label = 8;
     break;
    }
   }
   $44 = $8;
   $9 = $44;
   $45 = $8;
   HEAP8[$45>>0] = 0;
   while(1) {
    $46 = $4;
    $47 = (_strchr($46,37)|0);
    $7 = $47;
    $48 = ($47|0)!=(0|0);
    if (!($48)) {
     break;
    }
    $49 = $7;
    $50 = ((($49)) + 1|0);
    $51 = (_strtol($50,$10,10)|0);
    $11 = $51;
    $52 = HEAP32[$10>>2]|0;
    $53 = HEAP8[$52>>0]|0;
    $54 = $53 << 24 >> 24;
    $55 = ($54|0)!=(115);
    $56 = $9;
    $57 = $4;
    if ($55) {
     $58 = HEAP32[$10>>2]|0;
     $59 = ((($58)) + 1|0);
     $60 = $4;
     $61 = $59;
     $62 = $60;
     $63 = (($61) - ($62))|0;
     (_strncpy($56,$57,$63)|0);
     $64 = HEAP32[$10>>2]|0;
     $65 = ((($64)) + 1|0);
     $66 = $4;
     $67 = $65;
     $68 = $66;
     $69 = (($67) - ($68))|0;
     $70 = $9;
     $71 = (($70) + ($69)|0);
     $9 = $71;
     $72 = HEAP32[$10>>2]|0;
     $73 = ((($72)) + 1|0);
     $4 = $73;
     continue;
    }
    $74 = $7;
    $75 = $4;
    $76 = $74;
    $77 = $75;
    $78 = (($76) - ($77))|0;
    (_strncpy($56,$57,$78)|0);
    $79 = $7;
    $80 = $4;
    $81 = $79;
    $82 = $80;
    $83 = (($81) - ($82))|0;
    $84 = $9;
    $85 = (($84) + ($83)|0);
    $9 = $85;
    $86 = $11;
    $87 = ($86|0)!=(0);
    $88 = $9;
    $89 = $3;
    if ($87) {
     $90 = $11;
     (_strncpy($88,$89,$90)|0);
     $91 = $3;
     $92 = (_strlen($91)|0);
     $93 = $11;
     $94 = ($92>>>0)<($93>>>0);
     if ($94) {
      $95 = $3;
      $96 = (_strlen($95)|0);
      $100 = $96;
     } else {
      $97 = $11;
      $100 = $97;
     }
     $98 = $9;
     $99 = (($98) + ($100)|0);
     $9 = $99;
     $101 = $3;
     $102 = (_strlen($101)|0);
     $103 = $11;
     $104 = ($102>>>0)<($103>>>0);
     if ($104) {
      $105 = $3;
      $106 = (_strlen($105)|0);
      $110 = $106;
     } else {
      $107 = $11;
      $110 = $107;
     }
     $108 = $3;
     $109 = (($108) + ($110)|0);
     $3 = $109;
    } else {
     (_strcpy($88,$89)|0);
     $111 = $3;
     $112 = (_strlen($111)|0);
     $113 = $9;
     $114 = (($113) + ($112)|0);
     $9 = $114;
     $115 = $3;
     $116 = (_strlen($115)|0);
     $117 = $3;
     $118 = (($117) + ($116)|0);
     $3 = $118;
    }
    $119 = HEAP32[$10>>2]|0;
    $120 = ((($119)) + 1|0);
    $121 = $4;
    $122 = $120;
    $123 = $121;
    $124 = (($122) - ($123))|0;
    $125 = $5;
    $126 = (($125) - ($124))|0;
    $5 = $126;
    $127 = HEAP32[$10>>2]|0;
    $128 = ((($127)) + 1|0);
    $4 = $128;
   }
   $129 = $9;
   $130 = $4;
   $131 = $5;
   (_strncpy($129,$130,$131)|0);
   $132 = $4;
   $133 = (_strlen($132)|0);
   $134 = $5;
   $135 = ($133>>>0)<($134>>>0);
   if ($135) {
    $136 = $4;
    $137 = (_strlen($136)|0);
    $141 = $137;
   } else {
    $138 = $5;
    $141 = $138;
   }
   $139 = $9;
   $140 = (($139) + ($141)|0);
   $9 = $140;
   $142 = $9;
   HEAP8[$142>>0] = 0;
   $143 = $3;
   $144 = HEAP8[$143>>0]|0;
   $145 = ($144<<24>>24)!=(0);
   if ($145) {
    $146 = $9;
    $147 = ((($146)) + 1|0);
    $9 = $147;
    HEAP8[$146>>0] = 47;
    $148 = $9;
    $149 = $3;
    (_strcpy($148,$149)|0);
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $42 = $8;
  $43 = $3;
  HEAP32[$vararg_buffer>>2] = $43;
  (_sprintf($42,23068,$vararg_buffer)|0);
 }
 $150 = $8;
 $2 = $150;
 $151 = $2;
 STACKTOP = sp;return ($151|0);
}
function _find_path($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = 0;
 $9 = $4;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $11 = (_getenv((23051|0))|0);
  $4 = $11;
 }
 $12 = $4;
 $13 = (_tokenise_search_path($12)|0);
 $5 = $13;
 $14 = (0|0)==($13|0);
 if ($14) {
  $2 = 0;
  $50 = $2;
  STACKTOP = sp;return ($50|0);
 }
 $15 = $5;
 $6 = $15;
 while(1) {
  $16 = $6;
  $17 = HEAP8[$16>>0]|0;
  $18 = ($17<<24>>24)!=(0);
  if (!($18)) {
   label = 14;
   break;
  }
  $19 = $6;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = ($21|0)==(124);
  $23 = $6;
  $24 = ((($23)) + 1|0);
  $25 = $22 ? $24 : $23;
  $8 = $25;
  $26 = $8;
  $27 = (_strncmp($26,23059,4)|0);
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $8;
   $30 = (_strncmp($29,23006,5)|0);
   $31 = ($30|0)!=(0);
   if ($31) {
    $32 = $8;
    $33 = (_strncmp($32,23012,4)|0);
    $34 = ($33|0)!=(0);
    if ($34) {
     $35 = $3;
     $36 = $8;
     $37 = (_expand_path($35,$36)|0);
     $7 = $37;
     $38 = $7;
     $39 = (_is_file($38)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      label = 11;
      break;
     }
     $43 = $7;
     _free($43);
    }
   }
  }
  $44 = $6;
  $45 = (_strlen($44)|0);
  $46 = (($45) + 1)|0;
  $47 = $6;
  $48 = (($47) + ($46)|0);
  $6 = $48;
 }
 if ((label|0) == 11) {
  $41 = $5;
  _free($41);
  $42 = $7;
  $2 = $42;
  $50 = $2;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 14) {
  $49 = $5;
  _free($49);
  $2 = 0;
  $50 = $2;
  STACKTOP = sp;return ($50|0);
 }
 return (0)|0;
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $3 = (___syscall6(6,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$056 = 0, $$058 = 0, $$059 = 0, $$061 = 0, $$1 = 0, $$157 = 0, $$160 = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = ((($0)) + 44|0);
 $$056 = 2;$$058 = $12;$$059 = $3;
 while(1) {
  $15 = HEAP32[6460]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $20 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $20;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $$059;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $$056;
   $21 = (___syscall146(146,($vararg_buffer3|0))|0);
   $22 = (___syscall_ret($21)|0);
   $$0 = $22;
  } else {
   _pthread_cleanup_push((63|0),($0|0));
   $17 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer>>2] = $17;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $$059;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $$056;
   $18 = (___syscall146(146,($vararg_buffer|0))|0);
   $19 = (___syscall_ret($18)|0);
   _pthread_cleanup_pop(0);
   $$0 = $19;
  }
  $23 = ($$058|0)==($$0|0);
  if ($23) {
   label = 6;
   break;
  }
  $30 = ($$0|0)<(0);
  if ($30) {
   label = 8;
   break;
  }
  $38 = (($$058) - ($$0))|0;
  $39 = ((($$059)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($$0>>>0)>($40>>>0);
  if ($41) {
   $42 = HEAP32[$14>>2]|0;
   HEAP32[$4>>2] = $42;
   HEAP32[$7>>2] = $42;
   $43 = (($$0) - ($40))|0;
   $44 = ((($$059)) + 8|0);
   $45 = (($$056) + -1)|0;
   $$phi$trans$insert = ((($$059)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$1 = $43;$$157 = $45;$$160 = $44;$53 = $$pre;
  } else {
   $46 = ($$056|0)==(2);
   if ($46) {
    $47 = HEAP32[$4>>2]|0;
    $48 = (($47) + ($$0)|0);
    HEAP32[$4>>2] = $48;
    $$1 = $$0;$$157 = 2;$$160 = $$059;$53 = $40;
   } else {
    $$1 = $$0;$$157 = $$056;$$160 = $$059;$53 = $40;
   }
  }
  $49 = HEAP32[$$160>>2]|0;
  $50 = (($49) + ($$1)|0);
  HEAP32[$$160>>2] = $50;
  $51 = ((($$160)) + 4|0);
  $52 = (($53) - ($$1))|0;
  HEAP32[$51>>2] = $52;
  $$056 = $$157;$$058 = $38;$$059 = $$160;
 }
 if ((label|0) == 6) {
  $24 = HEAP32[$14>>2]|0;
  $25 = ((($0)) + 48|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + ($26)|0);
  $28 = ((($0)) + 16|0);
  HEAP32[$28>>2] = $27;
  $29 = $24;
  HEAP32[$4>>2] = $29;
  HEAP32[$7>>2] = $29;
  $$061 = $2;
 }
 else if ((label|0) == 8) {
  $31 = ((($0)) + 16|0);
  HEAP32[$31>>2] = 0;
  HEAP32[$4>>2] = 0;
  HEAP32[$7>>2] = 0;
  $32 = HEAP32[$0>>2]|0;
  $33 = $32 | 32;
  HEAP32[$0>>2] = $33;
  $34 = ($$056|0)==(2);
  if ($34) {
   $$061 = 0;
  } else {
   $35 = ((($$059)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($2) - ($36))|0;
   $$061 = $37;
  }
 }
 STACKTOP = sp;return ($$061|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $6 = (___syscall140(140,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  HEAP32[$3>>2] = -1;
  $9 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $9 = $$pre;
 }
 STACKTOP = sp;return ($9|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6460]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 25884;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function _cleanup_387($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$026 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = HEAP32[6460]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $20 = ((($0)) + 60|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $21;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $3;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $22 = (___syscall145(145,($vararg_buffer3|0))|0);
  $23 = (___syscall_ret($22)|0);
  $$0 = $23;
 } else {
  _pthread_cleanup_push((64|0),($0|0));
  $16 = ((($0)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer>>2] = $17;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $3;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer|0))|0);
  $19 = (___syscall_ret($18)|0);
  _pthread_cleanup_pop(0);
  $$0 = $19;
 }
 $24 = ($$0|0)<(1);
 if ($24) {
  $25 = $$0 & 48;
  $26 = $25 ^ 16;
  $27 = HEAP32[$0>>2]|0;
  $28 = $27 | $26;
  HEAP32[$0>>2] = $28;
  $29 = ((($0)) + 8|0);
  HEAP32[$29>>2] = 0;
  $30 = ((($0)) + 4|0);
  HEAP32[$30>>2] = 0;
  $$026 = $$0;
 } else {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($$0>>>0)>($31>>>0);
  if ($32) {
   $33 = (($$0) - ($31))|0;
   $34 = HEAP32[$11>>2]|0;
   $35 = ((($0)) + 4|0);
   HEAP32[$35>>2] = $34;
   $$cast = $34;
   $36 = (($$cast) + ($33)|0);
   $37 = ((($0)) + 8|0);
   HEAP32[$37>>2] = $36;
   $38 = HEAP32[$5>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $$026 = $2;
   } else {
    $40 = ((($$cast)) + 1|0);
    HEAP32[$35>>2] = $40;
    $41 = HEAP8[$$cast>>0]|0;
    $42 = (($2) + -1)|0;
    $43 = (($1) + ($42)|0);
    HEAP8[$43>>0] = $41;
    $$026 = $2;
   }
  } else {
   $$026 = $$0;
  }
 }
 STACKTOP = sp;return ($$026|0);
}
function _cleanup_382($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $3 = sp + 12|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 29;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $3;
  $10 = (___syscall54(54,($vararg_buffer|0))|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = ((($0)) + 75|0);
   HEAP8[$12>>0] = -1;
  }
 }
 $13 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($13|0);
}
function _tolower($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isupper($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 | 32;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _isupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -65)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _strtox_519($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($5)) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)<(0|0);
 $9 = ((($0)) + 2147483647|0);
 $$sink = $8 ? (-1) : $9;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $$sink;
 $11 = ((($5)) + 76|0);
 HEAP32[$11>>2] = -1;
 ___shlim($5,0);
 $12 = (___intscan($5,$2,1,$3,$4)|0);
 $13 = tempRet0;
 $14 = ($1|0)==(0|0);
 if (!($14)) {
  $15 = ((($5)) + 108|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = HEAP32[$10>>2]|0;
  $19 = (($17) + ($16))|0;
  $20 = (($19) - ($18))|0;
  $21 = (($0) + ($20)|0);
  HEAP32[$1>>2] = $21;
 }
 tempRet0 = ($13);
 STACKTOP = sp;return ($12|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = $6;
  $12 = (($11) + ($1)|0);
  $13 = ((($0)) + 100|0);
  HEAP32[$13>>2] = $12;
 } else {
  $14 = ((($0)) + 100|0);
  HEAP32[$14>>2] = $4;
 }
 return;
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154222 = 0, $$0157 = 0, $$0157$ = 0, $$0159 = 0, $$1155188 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156206 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162$lcssa = 0, $$3162211 = 0, $$4163$be = 0, $$4163$lcssa = 0;
 var $$5$be = 0, $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7194 = 0, $$8 = 0, $$9$be = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond183 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $8 = (___errno_location()|0);
   HEAP32[$8>>2] = 22;
   $289 = 0;$290 = 0;
  } else {
   $6 = ((($0)) + 4|0);
   $7 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$6>>2]|0;
    $10 = HEAP32[$7>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$6>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   $19 = ($16|0)==(45);
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$6>>2]|0;
     $22 = HEAP32[$7>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$6>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$6>>2]|0;
     $33 = HEAP32[$7>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$6>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160169 = $40;$$1165168 = 8;
       label = 46;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$6>>2]|0;
     $43 = HEAP32[$7>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$6>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((23072) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$7>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       $55 = HEAP32[$6>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$6>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $289 = 0;$290 = 0;
       break L1;
      }
      if ($54) {
       $289 = 0;$290 = 0;
       break L1;
      }
      $58 = HEAP32[$6>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$6>>2] = $59;
      $289 = 0;$290 = 0;
      break L1;
     } else {
      $$1160169 = $50;$$1165168 = 16;
      label = 46;
     }
    } else {
     $$166 = $28 ? 10 : $1;
     $60 = ((23072) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($62>>>0)<($$166>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $$166;
      label = 32;
     } else {
      $64 = HEAP32[$7>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$6>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$6>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $289 = 0;$290 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $69 = ($$1165|0)==(10);
    if ($69) {
     $70 = (($$1160) + -48)|0;
     $71 = ($70>>>0)<(10);
     if ($71) {
      $$0154222 = 0;$74 = $70;
      while(1) {
       $72 = ($$0154222*10)|0;
       $73 = (($72) + ($74))|0;
       $75 = HEAP32[$6>>2]|0;
       $76 = HEAP32[$7>>2]|0;
       $77 = ($75>>>0)<($76>>>0);
       if ($77) {
        $78 = ((($75)) + 1|0);
        HEAP32[$6>>2] = $78;
        $79 = HEAP8[$75>>0]|0;
        $80 = $79&255;
        $$2161$be = $80;
       } else {
        $81 = (___shgetc($0)|0);
        $$2161$be = $81;
       }
       $82 = (($$2161$be) + -48)|0;
       $83 = ($82>>>0)<(10);
       $84 = ($73>>>0)<(429496729);
       $85 = $83 & $84;
       if ($85) {
        $$0154222 = $73;$74 = $82;
       } else {
        break;
       }
      }
      $$2161$lcssa = $$2161$be;$291 = $73;$292 = 0;
     } else {
      $$2161$lcssa = $$1160;$291 = 0;$292 = 0;
     }
     $86 = (($$2161$lcssa) + -48)|0;
     $87 = ($86>>>0)<(10);
     if ($87) {
      $$3162211 = $$2161$lcssa;$88 = $291;$89 = $292;$92 = $86;
      while(1) {
       $90 = (___muldi3(($88|0),($89|0),10,0)|0);
       $91 = tempRet0;
       $93 = ($92|0)<(0);
       $94 = $93 << 31 >> 31;
       $95 = $92 ^ -1;
       $96 = $94 ^ -1;
       $97 = ($91>>>0)>($96>>>0);
       $98 = ($90>>>0)>($95>>>0);
       $99 = ($91|0)==($96|0);
       $100 = $99 & $98;
       $101 = $97 | $100;
       if ($101) {
        $$3162$lcssa = $$3162211;$$lcssa = $92;$293 = $88;$294 = $89;
        break;
       }
       $102 = (_i64Add(($90|0),($91|0),($92|0),($94|0))|0);
       $103 = tempRet0;
       $104 = HEAP32[$6>>2]|0;
       $105 = HEAP32[$7>>2]|0;
       $106 = ($104>>>0)<($105>>>0);
       if ($106) {
        $107 = ((($104)) + 1|0);
        HEAP32[$6>>2] = $107;
        $108 = HEAP8[$104>>0]|0;
        $109 = $108&255;
        $$3162$be = $109;
       } else {
        $110 = (___shgetc($0)|0);
        $$3162$be = $110;
       }
       $111 = (($$3162$be) + -48)|0;
       $112 = ($111>>>0)<(10);
       $113 = ($103>>>0)<(429496729);
       $114 = ($102>>>0)<(2576980378);
       $115 = ($103|0)==(429496729);
       $116 = $115 & $114;
       $117 = $113 | $116;
       $or$cond7 = $112 & $117;
       if ($or$cond7) {
        $$3162211 = $$3162$be;$88 = $102;$89 = $103;$92 = $111;
       } else {
        $$3162$lcssa = $$3162$be;$$lcssa = $111;$293 = $102;$294 = $103;
        break;
       }
      }
      $118 = ($$lcssa>>>0)>(9);
      if ($118) {
       $$1158 = $$0157;$262 = $294;$264 = $293;
      } else {
       $$1165167 = 10;$$8 = $$3162$lcssa;$295 = $293;$296 = $294;
       label = 72;
      }
     } else {
      $$1158 = $$0157;$262 = $292;$264 = $291;
     }
    } else {
     $$1160169 = $$1160;$$1165168 = $$1165;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $119 = (($$1165168) + -1)|0;
     $120 = $119 & $$1165168;
     $121 = ($120|0)==(0);
     if ($121) {
      $126 = ($$1165168*23)|0;
      $127 = $126 >>> 5;
      $128 = $127 & 7;
      $129 = (23328 + ($128)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = ((23072) + ($$1160169)|0);
      $133 = HEAP8[$132>>0]|0;
      $134 = $133&255;
      $135 = ($134>>>0)<($$1165168>>>0);
      if ($135) {
       $$1155188 = 0;$138 = $134;
       while(1) {
        $136 = $$1155188 << $131;
        $137 = $138 | $136;
        $139 = HEAP32[$6>>2]|0;
        $140 = HEAP32[$7>>2]|0;
        $141 = ($139>>>0)<($140>>>0);
        if ($141) {
         $142 = ((($139)) + 1|0);
         HEAP32[$6>>2] = $142;
         $143 = HEAP8[$139>>0]|0;
         $144 = $143&255;
         $$4163$be = $144;
        } else {
         $145 = (___shgetc($0)|0);
         $$4163$be = $145;
        }
        $146 = ((23072) + ($$4163$be)|0);
        $147 = HEAP8[$146>>0]|0;
        $148 = $147&255;
        $149 = ($148>>>0)<($$1165168>>>0);
        $150 = ($137>>>0)<(134217728);
        $151 = $150 & $149;
        if ($151) {
         $$1155188 = $137;$138 = $148;
        } else {
         break;
        }
       }
       $$4163$lcssa = $$4163$be;$155 = $147;$157 = 0;$159 = $137;
      } else {
       $$4163$lcssa = $$1160169;$155 = $133;$157 = 0;$159 = 0;
      }
      $152 = (_bitshift64Lshr(-1,-1,($131|0))|0);
      $153 = tempRet0;
      $154 = $155&255;
      $156 = ($154>>>0)>=($$1165168>>>0);
      $158 = ($157>>>0)>($153>>>0);
      $160 = ($159>>>0)>($152>>>0);
      $161 = ($157|0)==($153|0);
      $162 = $161 & $160;
      $163 = $158 | $162;
      $or$cond183 = $156 | $163;
      if ($or$cond183) {
       $$1165167 = $$1165168;$$8 = $$4163$lcssa;$295 = $159;$296 = $157;
       label = 72;
       break;
      } else {
       $164 = $159;$165 = $157;$169 = $155;
      }
      while(1) {
       $166 = (_bitshift64Shl(($164|0),($165|0),($131|0))|0);
       $167 = tempRet0;
       $168 = $169&255;
       $170 = $168 | $166;
       $171 = HEAP32[$6>>2]|0;
       $172 = HEAP32[$7>>2]|0;
       $173 = ($171>>>0)<($172>>>0);
       if ($173) {
        $174 = ((($171)) + 1|0);
        HEAP32[$6>>2] = $174;
        $175 = HEAP8[$171>>0]|0;
        $176 = $175&255;
        $$5$be = $176;
       } else {
        $177 = (___shgetc($0)|0);
        $$5$be = $177;
       }
       $178 = ((23072) + ($$5$be)|0);
       $179 = HEAP8[$178>>0]|0;
       $180 = $179&255;
       $181 = ($180>>>0)>=($$1165168>>>0);
       $182 = ($167>>>0)>($153>>>0);
       $183 = ($170>>>0)>($152>>>0);
       $184 = ($167|0)==($153|0);
       $185 = $184 & $183;
       $186 = $182 | $185;
       $or$cond = $181 | $186;
       if ($or$cond) {
        $$1165167 = $$1165168;$$8 = $$5$be;$295 = $170;$296 = $167;
        label = 72;
        break L63;
       } else {
        $164 = $170;$165 = $167;$169 = $179;
       }
      }
     }
     $122 = ((23072) + ($$1160169)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     $125 = ($124>>>0)<($$1165168>>>0);
     if ($125) {
      $$2156206 = 0;$189 = $124;
      while(1) {
       $187 = Math_imul($$2156206, $$1165168)|0;
       $188 = (($189) + ($187))|0;
       $190 = HEAP32[$6>>2]|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = ($190>>>0)<($191>>>0);
       if ($192) {
        $193 = ((($190)) + 1|0);
        HEAP32[$6>>2] = $193;
        $194 = HEAP8[$190>>0]|0;
        $195 = $194&255;
        $$6$be = $195;
       } else {
        $196 = (___shgetc($0)|0);
        $$6$be = $196;
       }
       $197 = ((23072) + ($$6$be)|0);
       $198 = HEAP8[$197>>0]|0;
       $199 = $198&255;
       $200 = ($199>>>0)<($$1165168>>>0);
       $201 = ($188>>>0)<(119304647);
       $202 = $201 & $200;
       if ($202) {
        $$2156206 = $188;$189 = $199;
       } else {
        break;
       }
      }
      $$6$lcssa = $$6$be;$204 = $198;$297 = $188;$298 = 0;
     } else {
      $$6$lcssa = $$1160169;$204 = $123;$297 = 0;$298 = 0;
     }
     $203 = $204&255;
     $205 = ($203>>>0)<($$1165168>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = tempRet0;
      $$7194 = $$6$lcssa;$208 = $298;$210 = $297;$218 = $204;
      while(1) {
       $209 = ($208>>>0)>($207>>>0);
       $211 = ($210>>>0)>($206>>>0);
       $212 = ($208|0)==($207|0);
       $213 = $212 & $211;
       $214 = $209 | $213;
       if ($214) {
        $$1165167 = $$1165168;$$8 = $$7194;$295 = $210;$296 = $208;
        label = 72;
        break L63;
       }
       $215 = (___muldi3(($210|0),($208|0),($$1165168|0),0)|0);
       $216 = tempRet0;
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165167 = $$1165168;$$8 = $$7194;$295 = $210;$296 = $208;
        label = 72;
        break L63;
       }
       $225 = (_i64Add(($217|0),0,($215|0),($216|0))|0);
       $226 = tempRet0;
       $227 = HEAP32[$6>>2]|0;
       $228 = HEAP32[$7>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$6>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $$7$be = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $$7$be = $233;
       }
       $234 = ((23072) + ($$7$be)|0);
       $235 = HEAP8[$234>>0]|0;
       $236 = $235&255;
       $237 = ($236>>>0)<($$1165168>>>0);
       if ($237) {
        $$7194 = $$7$be;$208 = $226;$210 = $225;$218 = $235;
       } else {
        $$1165167 = $$1165168;$$8 = $$7$be;$295 = $225;$296 = $226;
        label = 72;
        break;
       }
      }
     } else {
      $$1165167 = $$1165168;$$8 = $$6$lcssa;$295 = $297;$296 = $298;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $238 = ((23072) + ($$8)|0);
    $239 = HEAP8[$238>>0]|0;
    $240 = $239&255;
    $241 = ($240>>>0)<($$1165167>>>0);
    if ($241) {
     while(1) {
      $242 = HEAP32[$6>>2]|0;
      $243 = HEAP32[$7>>2]|0;
      $244 = ($242>>>0)<($243>>>0);
      if ($244) {
       $245 = ((($242)) + 1|0);
       HEAP32[$6>>2] = $245;
       $246 = HEAP8[$242>>0]|0;
       $247 = $246&255;
       $$9$be = $247;
      } else {
       $248 = (___shgetc($0)|0);
       $$9$be = $248;
      }
      $249 = ((23072) + ($$9$be)|0);
      $250 = HEAP8[$249>>0]|0;
      $251 = $250&255;
      $252 = ($251>>>0)<($$1165167>>>0);
      if (!($252)) {
       break;
      }
     }
     $253 = (___errno_location()|0);
     HEAP32[$253>>2] = 34;
     $254 = $3 & 1;
     $255 = ($254|0)==(0);
     $256 = (0)==(0);
     $257 = $255 & $256;
     $$0157$ = $257 ? $$0157 : 0;
     $$1158 = $$0157$;$262 = $4;$264 = $3;
    } else {
     $$1158 = $$0157;$262 = $296;$264 = $295;
    }
   }
   $258 = HEAP32[$7>>2]|0;
   $259 = ($258|0)==(0|0);
   if (!($259)) {
    $260 = HEAP32[$6>>2]|0;
    $261 = ((($260)) + -1|0);
    HEAP32[$6>>2] = $261;
   }
   $263 = ($262>>>0)<($4>>>0);
   $265 = ($264>>>0)<($3>>>0);
   $266 = ($262|0)==($4|0);
   $267 = $266 & $265;
   $268 = $263 | $267;
   if (!($268)) {
    $269 = $3 & 1;
    $270 = ($269|0)!=(0);
    $271 = (0)!=(0);
    $272 = $270 | $271;
    $273 = ($$1158|0)!=(0);
    $or$cond12 = $272 | $273;
    if (!($or$cond12)) {
     $274 = (___errno_location()|0);
     HEAP32[$274>>2] = 34;
     $275 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $276 = tempRet0;
     $289 = $276;$290 = $275;
     break;
    }
    $277 = ($262>>>0)>($4>>>0);
    $278 = ($264>>>0)>($3>>>0);
    $279 = ($262|0)==($4|0);
    $280 = $279 & $278;
    $281 = $277 | $280;
    if ($281) {
     $282 = (___errno_location()|0);
     HEAP32[$282>>2] = 34;
     $289 = $4;$290 = $3;
     break;
    }
   }
   $283 = ($$1158|0)<(0);
   $284 = $283 << 31 >> 31;
   $285 = $264 ^ $$1158;
   $286 = $262 ^ $284;
   $287 = (_i64Subtract(($285|0),($286|0),($$1158|0),($284|0))|0);
   $288 = tempRet0;
   $289 = $288;$290 = $287;
  }
 } while(0);
 tempRet0 = ($289);
 return ($290|0);
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($11) {
    $12 = $$pre;
    $42 = $12;
    label = 9;
   } else {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($$pre) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $$pre;
    if ($20) {
     $42 = $21;
     label = 9;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $24 = ((($0)) + 100|0);
     HEAP32[$24>>2] = $23;
     $26 = $21;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($0)) + 100|0);
    HEAP32[$25>>2] = $$pre;
    $26 = $42;
   }
   $27 = ($26|0)==(0|0);
   $$phi$trans$insert28 = ((($0)) + 4|0);
   if ($27) {
    $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
    $37 = $$pre29;
   } else {
    $28 = HEAP32[$$phi$trans$insert28>>2]|0;
    $29 = $26;
    $30 = ((($0)) + 108|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($29) + 1)|0;
    $33 = (($32) - ($28))|0;
    $34 = (($33) + ($31))|0;
    HEAP32[$30>>2] = $34;
    $35 = $28;
    $37 = $35;
   }
   $36 = ((($37)) + -1|0);
   $38 = HEAP8[$36>>0]|0;
   $39 = $38&255;
   $40 = ($39|0)==($7|0);
   if ($40) {
    $$0 = $7;
   } else {
    $41 = $7&255;
    HEAP8[$36>>0] = $41;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $4 = $1 | $3;
 $5 = $4&1;
 return ($5|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (___toread($0)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $7 = ((($0)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_iiii[$8 & 127]($0,$1,1)|0);
  $10 = ($9|0)==(1);
  if ($10) {
   $11 = HEAP8[$1>>0]|0;
   $12 = $11&255;
   $$0 = $12;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 127]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($0)) + 28|0);
 HEAP32[$15>>2] = 0;
 HEAP32[$7>>2] = 0;
 $16 = HEAP32[$0>>2]|0;
 $17 = $16 & 20;
 $18 = ($17|0)==(0);
 if ($18) {
  $22 = HEAP32[$9>>2]|0;
  $23 = ((($0)) + 8|0);
  HEAP32[$23>>2] = $22;
  $24 = ((($0)) + 4|0);
  HEAP32[$24>>2] = $22;
  $$0 = 0;
 } else {
  $19 = $16 & 4;
  $20 = ($19|0)==(0);
  if ($20) {
   $$0 = -1;
  } else {
   $21 = $16 | 32;
   HEAP32[$0>>2] = $21;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _strtoll($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_519($0,$1,$2,0,-2147483648)|0);
 $4 = tempRet0;
 tempRet0 = ($4);
 return ($3|0);
}
function _strtoul($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_519($0,$1,$2,-1,0)|0);
 $4 = tempRet0;
 return ($3|0);
}
function _strtol($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_519($0,$1,$2,-2147483648,0)|0);
 $4 = tempRet0;
 return ($3|0);
}
function _toupper($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_islower($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 & 95;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _islower($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01823 = 0, $$01925 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$16 = 0;
   } else {
    $$01823 = $0;$$01925$in = $2;$$024 = $1;$9 = $4;
    while(1) {
     $$01925 = (($$01925$in) + -1)|0;
     $6 = HEAP8[$$024>>0]|0;
     $7 = ($6<<24>>24)!=(0);
     $8 = ($$01925|0)!=(0);
     $or$cond = $8 & $7;
     $10 = ($9<<24>>24)==($6<<24>>24);
     $or$cond21 = $10 & $or$cond;
     if (!($or$cond21)) {
      $$0$lcssa = $$024;$16 = $9;
      break L3;
     }
     $11 = ((($$01823)) + 1|0);
     $12 = ((($$024)) + 1|0);
     $13 = HEAP8[$11>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0$lcssa = $12;$16 = 0;
      break;
     } else {
      $$01823 = $11;$$01925$in = $$01925;$$024 = $12;$9 = $13;
     }
    }
   }
  } while(0);
  $15 = $16&255;
  $17 = HEAP8[$$0$lcssa>>0]|0;
  $18 = $17&255;
  $19 = (($15) - ($18))|0;
  $$020 = $19;
 }
 return ($$020|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 112|0;
 $5 = sp;
 dest=$5; src=9872; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 127]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$3484$i = 0, $$$3484705$i = 0, $$$3484706$i = 0, $$$3501$i = 0, $$$4266 = 0, $$$4502$i = 0, $$$5 = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i300 = 0, $$0228 = 0, $$0229396 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0;
 var $$0240$lcssa = 0, $$0240$lcssa460 = 0, $$0240395 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249383 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$ = 0, $$0259 = 0, $$0262342 = 0, $$0262390 = 0, $$0269 = 0, $$0269$phi = 0, $$0321 = 0, $$0463$lcssa$i = 0, $$0463594$i = 0, $$0464603$i = 0;
 var $$0466$i = 0.0, $$0470$i = 0, $$0471$i = 0.0, $$0479$i = 0, $$0487652$i = 0, $$0488$i = 0, $$0488663$i = 0, $$0488665$i = 0, $$0496$$9$i = 0, $$0497664$i = 0, $$0498$i = 0, $$05$lcssa$i = 0, $$0509592$i = 0.0, $$0510$i = 0, $$0511$i = 0, $$0514647$i = 0, $$0520$i = 0, $$0522$$i = 0, $$0522$i = 0, $$0524$i = 0;
 var $$0526$i = 0, $$0528$i = 0, $$0528639$i = 0, $$0528641$i = 0, $$0531646$i = 0, $$056$i = 0, $$06$i = 0, $$06$i290 = 0, $$06$i298 = 0, $$1 = 0, $$1230407 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241406 = 0, $$1244394 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
 var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$1322 = 0, $$1465$i = 0, $$1467$i = 0.0, $$1469$i = 0.0, $$1472$i = 0.0, $$1480$i = 0, $$1482$lcssa$i = 0, $$1482671$i = 0, $$1489651$i = 0, $$1499$lcssa$i = 0, $$1499670$i = 0, $$1508593$i = 0, $$1512$lcssa$i = 0, $$1512617$i = 0, $$1515$i = 0, $$1521$i = 0, $$1525$i = 0;
 var $$1527$i = 0, $$1529624$i = 0, $$1532$lcssa$i = 0, $$1532640$i = 0, $$1607$i = 0, $$2 = 0, $$2$i = 0, $$2234 = 0, $$2239 = 0, $$2242381 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$2323$lcssa = 0, $$2323382 = 0, $$2473$i = 0.0, $$2476$$545$i = 0;
 var $$2476$$547$i = 0, $$2476$i = 0, $$2483$ph$i = 0, $$2490$lcssa$i = 0, $$2490632$i = 0, $$2500$i = 0, $$2513$i = 0, $$2516628$i = 0, $$2530$i = 0, $$2533627$i = 0, $$3$i = 0.0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$331 = 0, $$332 = 0, $$333 = 0, $$3379 = 0, $$3477$i = 0, $$3484$lcssa$i = 0;
 var $$3484658$i = 0, $$3501$lcssa$i = 0, $$3501657$i = 0, $$3534623$i = 0, $$4$i = 0.0, $$4258458 = 0, $$4266 = 0, $$4325 = 0, $$4478$lcssa$i = 0, $$4478600$i = 0, $$4492$i = 0, $$4502$i = 0, $$4518$i = 0, $$5 = 0, $$5$lcssa$i = 0, $$537$i = 0, $$538$$i = 0, $$538$i = 0, $$541$i = 0.0, $$544$i = 0;
 var $$546$i = 0, $$5486$lcssa$i = 0, $$5486633$i = 0, $$5493606$i = 0, $$5519$ph$i = 0, $$553$i = 0, $$554$i = 0, $$557$i = 0.0, $$5611$i = 0, $$6 = 0, $$6$i = 0, $$6268 = 0, $$6494599$i = 0, $$7 = 0, $$7495610$i = 0, $$7505$$i = 0, $$7505$i = 0, $$7505$ph$i = 0, $$8$i = 0, $$9$ph$i = 0;
 var $$lcssa683$i = 0, $$neg$i = 0, $$neg572$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr571$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi704$iZ2D = 0, $$pre452 = 0, $$pre453 = 0, $$pre454 = 0, $$pre697$i = 0, $$pre700$i = 0, $$pre703$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0.0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0.0, $404 = 0.0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0.0, $606 = 0.0, $607 = 0, $608 = 0.0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i292 = 0, $isdigit275 = 0;
 var $isdigit277 = 0, $isdigit5$i = 0, $isdigit5$i288 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i291 = 0, $isdigittmp274 = 0, $isdigittmp276 = 0, $isdigittmp4$i = 0, $isdigittmp4$i287 = 0, $isdigittmp7$i = 0, $isdigittmp7$i289 = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond280 = 0, $or$cond282 = 0, $or$cond285 = 0;
 var $or$cond3$not$i = 0, $or$cond412 = 0, $or$cond540$i = 0, $or$cond543$i = 0, $or$cond552$i = 0, $or$cond6$i = 0, $scevgep694$i = 0, $scevgep694695$i = 0, $storemerge = 0, $storemerge273345 = 0, $storemerge273389 = 0, $storemerge278 = 0, $sum = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(624|0);
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 588|0;
 $8 = sp + 576|0;
 $9 = sp;
 $10 = sp + 536|0;
 $11 = sp + 8|0;
 $12 = sp + 528|0;
 $13 = ($0|0)!=(0|0);
 $14 = ((($10)) + 40|0);
 $15 = $14;
 $16 = ((($10)) + 39|0);
 $17 = ((($11)) + 4|0);
 $18 = $7;
 $19 = (0 - ($18))|0;
 $20 = ((($8)) + 12|0);
 $21 = ((($8)) + 11|0);
 $22 = $20;
 $23 = (($22) - ($18))|0;
 $24 = (-2 - ($18))|0;
 $25 = (($22) + 2)|0;
 $26 = ((($5)) + 288|0);
 $27 = ((($7)) + 9|0);
 $28 = $27;
 $29 = ((($7)) + 8|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$$0321 = $1;
 L1: while(1) {
  $30 = ($$0247|0)>(-1);
  do {
   if ($30) {
    $31 = (2147483647 - ($$0247))|0;
    $32 = ($$0243|0)>($31|0);
    if ($32) {
     $33 = (___errno_location()|0);
     HEAP32[$33>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $34 = (($$0243) + ($$0247))|0;
     $$1248 = $34;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $35 = HEAP8[$$0321>>0]|0;
  $36 = ($35<<24>>24)==(0);
  if ($36) {
   label = 243;
   break;
  } else {
   $$1322 = $$0321;$37 = $35;
  }
  L9: while(1) {
   switch ($37<<24>>24) {
   case 37:  {
    $$0249383 = $$1322;$$2323382 = $$1322;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $$1322;$$2323$lcssa = $$1322;
    break L9;
    break;
   }
   default: {
   }
   }
   $38 = ((($$1322)) + 1|0);
   $$pre = HEAP8[$38>>0]|0;
   $$1322 = $38;$37 = $$pre;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $39 = ((($$2323382)) + 1|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)==(37);
     if (!($41)) {
      $$0249$lcssa = $$0249383;$$2323$lcssa = $$2323382;
      break L12;
     }
     $42 = ((($$0249383)) + 1|0);
     $43 = ((($$2323382)) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = ($44<<24>>24)==(37);
     if ($45) {
      $$0249383 = $42;$$2323382 = $43;
      label = 9;
     } else {
      $$0249$lcssa = $42;$$2323$lcssa = $43;
      break;
     }
    }
   }
  } while(0);
  $46 = $$0249$lcssa;
  $47 = $$0321;
  $48 = (($46) - ($47))|0;
  if ($13) {
   $49 = HEAP32[$0>>2]|0;
   $50 = $49 & 32;
   $51 = ($50|0)==(0);
   if ($51) {
    (___fwritex($$0321,$48,$0)|0);
   }
  }
  $52 = ($48|0)==(0);
  if (!($52)) {
   $$0269$phi = $$0269;$$0243 = $48;$$0247 = $$1248;$$0321 = $$2323$lcssa;$$0269 = $$0269$phi;
   continue;
  }
  $53 = ((($$2323$lcssa)) + 1|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $isdigittmp = (($55) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $56 = ((($$2323$lcssa)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57<<24>>24)==(36);
   $59 = ((($$2323$lcssa)) + 3|0);
   $$331 = $58 ? $59 : $53;
   $$$0269 = $58 ? 1 : $$0269;
   $isdigittmp$ = $58 ? $isdigittmp : -1;
   $$pre452 = HEAP8[$$331>>0]|0;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$61 = $$pre452;$storemerge = $$331;
  } else {
   $$0253 = -1;$$1270 = $$0269;$61 = $54;$storemerge = $53;
  }
  $60 = $61 << 24 >> 24;
  $62 = (($60) + -32)|0;
  $63 = ($62>>>0)<(32);
  L25: do {
   if ($63) {
    $$0262390 = 0;$65 = $62;$69 = $61;$storemerge273389 = $storemerge;
    while(1) {
     $64 = 1 << $65;
     $66 = $64 & 75913;
     $67 = ($66|0)==(0);
     if ($67) {
      $$0262342 = $$0262390;$78 = $69;$storemerge273345 = $storemerge273389;
      break L25;
     }
     $68 = $69 << 24 >> 24;
     $70 = (($68) + -32)|0;
     $71 = 1 << $70;
     $72 = $71 | $$0262390;
     $73 = ((($storemerge273389)) + 1|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 << 24 >> 24;
     $76 = (($75) + -32)|0;
     $77 = ($76>>>0)<(32);
     if ($77) {
      $$0262390 = $72;$65 = $76;$69 = $74;$storemerge273389 = $73;
     } else {
      $$0262342 = $72;$78 = $74;$storemerge273345 = $73;
      break;
     }
    }
   } else {
    $$0262342 = 0;$78 = $61;$storemerge273345 = $storemerge;
   }
  } while(0);
  $79 = ($78<<24>>24)==(42);
  do {
   if ($79) {
    $80 = ((($storemerge273345)) + 1|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $81 << 24 >> 24;
    $isdigittmp276 = (($82) + -48)|0;
    $isdigit277 = ($isdigittmp276>>>0)<(10);
    if ($isdigit277) {
     $83 = ((($storemerge273345)) + 2|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = ($84<<24>>24)==(36);
     if ($85) {
      $86 = (($4) + ($isdigittmp276<<2)|0);
      HEAP32[$86>>2] = 10;
      $87 = HEAP8[$80>>0]|0;
      $88 = $87 << 24 >> 24;
      $89 = (($88) + -48)|0;
      $90 = (($3) + ($89<<3)|0);
      $91 = $90;
      $92 = $91;
      $93 = HEAP32[$92>>2]|0;
      $94 = (($91) + 4)|0;
      $95 = $94;
      $96 = HEAP32[$95>>2]|0;
      $97 = ((($storemerge273345)) + 3|0);
      $$0259 = $93;$$2271 = 1;$storemerge278 = $97;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $98 = ($$1270|0)==(0);
     if (!($98)) {
      $$0 = -1;
      break L1;
     }
     if (!($13)) {
      $$1260 = 0;$$1263 = $$0262342;$$3272 = 0;$$4325 = $80;$$pr = $81;
      break;
     }
     $arglist_current = HEAP32[$2>>2]|0;
     $99 = $arglist_current;
     $100 = ((0) + 4|0);
     $expanded4 = $100;
     $expanded = (($expanded4) - 1)|0;
     $101 = (($99) + ($expanded))|0;
     $102 = ((0) + 4|0);
     $expanded8 = $102;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $103 = $101 & $expanded6;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $arglist_next = ((($104)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $105;$$2271 = 0;$storemerge278 = $80;
    }
    $106 = ($$0259|0)<(0);
    $107 = $$0262342 | 8192;
    $108 = (0 - ($$0259))|0;
    $$$0262 = $106 ? $107 : $$0262342;
    $$$0259 = $106 ? $108 : $$0259;
    $$pre453 = HEAP8[$storemerge278>>0]|0;
    $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$$4325 = $storemerge278;$$pr = $$pre453;
   } else {
    $109 = $78 << 24 >> 24;
    $isdigittmp4$i = (($109) + -48)|0;
    $isdigit5$i = ($isdigittmp4$i>>>0)<(10);
    if ($isdigit5$i) {
     $$06$i = 0;$113 = $storemerge273345;$isdigittmp7$i = $isdigittmp4$i;
     while(1) {
      $110 = ($$06$i*10)|0;
      $111 = (($110) + ($isdigittmp7$i))|0;
      $112 = ((($113)) + 1|0);
      $114 = HEAP8[$112>>0]|0;
      $115 = $114 << 24 >> 24;
      $isdigittmp$i = (($115) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $$06$i = $111;$113 = $112;$isdigittmp7$i = $isdigittmp$i;
      } else {
       break;
      }
     }
     $116 = ($111|0)<(0);
     if ($116) {
      $$0 = -1;
      break L1;
     } else {
      $$1260 = $111;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $112;$$pr = $114;
     }
    } else {
     $$1260 = 0;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $storemerge273345;$$pr = $78;
    }
   }
  } while(0);
  $117 = ($$pr<<24>>24)==(46);
  L45: do {
   if ($117) {
    $118 = ((($$4325)) + 1|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ($119<<24>>24)==(42);
    if (!($120)) {
     $147 = $119 << 24 >> 24;
     $isdigittmp4$i287 = (($147) + -48)|0;
     $isdigit5$i288 = ($isdigittmp4$i287>>>0)<(10);
     if ($isdigit5$i288) {
      $$06$i290 = 0;$151 = $118;$isdigittmp7$i289 = $isdigittmp4$i287;
     } else {
      $$0254 = 0;$$6 = $118;
      break;
     }
     while(1) {
      $148 = ($$06$i290*10)|0;
      $149 = (($148) + ($isdigittmp7$i289))|0;
      $150 = ((($151)) + 1|0);
      $152 = HEAP8[$150>>0]|0;
      $153 = $152 << 24 >> 24;
      $isdigittmp$i291 = (($153) + -48)|0;
      $isdigit$i292 = ($isdigittmp$i291>>>0)<(10);
      if ($isdigit$i292) {
       $$06$i290 = $149;$151 = $150;$isdigittmp7$i289 = $isdigittmp$i291;
      } else {
       $$0254 = $149;$$6 = $150;
       break L45;
      }
     }
    }
    $121 = ((($$4325)) + 2|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122 << 24 >> 24;
    $isdigittmp274 = (($123) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $124 = ((($$4325)) + 3|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = ($125<<24>>24)==(36);
     if ($126) {
      $127 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$127>>2] = 10;
      $128 = HEAP8[$121>>0]|0;
      $129 = $128 << 24 >> 24;
      $130 = (($129) + -48)|0;
      $131 = (($3) + ($130<<3)|0);
      $132 = $131;
      $133 = $132;
      $134 = HEAP32[$133>>2]|0;
      $135 = (($132) + 4)|0;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = ((($$4325)) + 4|0);
      $$0254 = $134;$$6 = $138;
      break;
     }
    }
    $139 = ($$3272|0)==(0);
    if (!($139)) {
     $$0 = -1;
     break L1;
    }
    if ($13) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $140 = $arglist_current2;
     $141 = ((0) + 4|0);
     $expanded11 = $141;
     $expanded10 = (($expanded11) - 1)|0;
     $142 = (($140) + ($expanded10))|0;
     $143 = ((0) + 4|0);
     $expanded15 = $143;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $144 = $142 & $expanded13;
     $145 = $144;
     $146 = HEAP32[$145>>2]|0;
     $arglist_next3 = ((($145)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $$0254 = $146;$$6 = $121;
    } else {
     $$0254 = 0;$$6 = $121;
    }
   } else {
    $$0254 = -1;$$6 = $$4325;
   }
  } while(0);
  $$0252 = 0;$$7 = $$6;
  while(1) {
   $154 = HEAP8[$$7>>0]|0;
   $155 = $154 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($$7)) + 1|0);
   $159 = ((23337 + (($$0252*58)|0)|0) + ($156)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = (($161) + -1)|0;
   $163 = ($162>>>0)<(8);
   if ($163) {
    $$0252 = $161;$$7 = $158;
   } else {
    break;
   }
  }
  $164 = ($160<<24>>24)==(0);
  if ($164) {
   $$0 = -1;
   break;
  }
  $165 = ($160<<24>>24)==(19);
  $166 = ($$0253|0)>(-1);
  do {
   if ($165) {
    if ($166) {
     $$0 = -1;
     break L1;
    } else {
     label = 51;
    }
   } else {
    if ($166) {
     $167 = (($4) + ($$0253<<2)|0);
     HEAP32[$167>>2] = $161;
     $168 = (($3) + ($$0253<<3)|0);
     $169 = $168;
     $170 = $169;
     $171 = HEAP32[$170>>2]|0;
     $172 = (($169) + 4)|0;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = $9;
     $176 = $175;
     HEAP32[$176>>2] = $171;
     $177 = (($175) + 4)|0;
     $178 = $177;
     HEAP32[$178>>2] = $174;
     label = 51;
     break;
    }
    if (!($13)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($9,$161,$2);
   }
  } while(0);
  if ((label|0) == 51) {
   label = 0;
   if (!($13)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue;
   }
  }
  $179 = HEAP8[$$7>>0]|0;
  $180 = $179 << 24 >> 24;
  $181 = ($$0252|0)!=(0);
  $182 = $180 & 15;
  $183 = ($182|0)==(3);
  $or$cond280 = $181 & $183;
  $184 = $180 & -33;
  $$0235 = $or$cond280 ? $184 : $180;
  $185 = $$1263 & 8192;
  $186 = ($185|0)==(0);
  $187 = $$1263 & -65537;
  $$1263$ = $186 ? $$1263 : $187;
  L74: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $194 = HEAP32[$9>>2]|0;
     HEAP32[$194>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 1:  {
     $195 = HEAP32[$9>>2]|0;
     HEAP32[$195>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 2:  {
     $196 = ($$1248|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$9>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $$1248;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 3:  {
     $203 = $$1248&65535;
     $204 = HEAP32[$9>>2]|0;
     HEAP16[$204>>1] = $203;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 4:  {
     $205 = $$1248&255;
     $206 = HEAP32[$9>>2]|0;
     HEAP8[$206>>0] = $205;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 6:  {
     $207 = HEAP32[$9>>2]|0;
     HEAP32[$207>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 7:  {
     $208 = ($$1248|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = HEAP32[$9>>2]|0;
     $211 = $210;
     $212 = $211;
     HEAP32[$212>>2] = $$1248;
     $213 = (($211) + 4)|0;
     $214 = $213;
     HEAP32[$214>>2] = $209;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $215 = ($$0254>>>0)>(8);
    $216 = $215 ? $$0254 : 8;
    $217 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $216;$$3265 = $217;
    label = 63;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 63;
    break;
   }
   case 111:  {
    $257 = $9;
    $258 = $257;
    $259 = HEAP32[$258>>2]|0;
    $260 = (($257) + 4)|0;
    $261 = $260;
    $262 = HEAP32[$261>>2]|0;
    $263 = ($259|0)==(0);
    $264 = ($262|0)==(0);
    $265 = $263 & $264;
    if ($265) {
     $$0$lcssa$i300 = $14;
    } else {
     $$06$i298 = $14;$267 = $259;$271 = $262;
     while(1) {
      $266 = $267 & 7;
      $268 = $266 | 48;
      $269 = $268&255;
      $270 = ((($$06$i298)) + -1|0);
      HEAP8[$270>>0] = $269;
      $272 = (_bitshift64Lshr(($267|0),($271|0),3)|0);
      $273 = tempRet0;
      $274 = ($272|0)==(0);
      $275 = ($273|0)==(0);
      $276 = $274 & $275;
      if ($276) {
       $$0$lcssa$i300 = $270;
       break;
      } else {
       $$06$i298 = $270;$267 = $272;$271 = $273;
      }
     }
    }
    $277 = $$1263$ & 8;
    $278 = ($277|0)==(0);
    if ($278) {
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 23817;$$2256 = $$0254;$$4266 = $$1263$;
     label = 76;
    } else {
     $279 = $$0$lcssa$i300;
     $280 = (($15) - ($279))|0;
     $281 = ($$0254|0)>($280|0);
     $282 = (($280) + 1)|0;
     $$0254$ = $281 ? $$0254 : $282;
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 23817;$$2256 = $$0254$;$$4266 = $$1263$;
     label = 76;
    }
    break;
   }
   case 105: case 100:  {
    $283 = $9;
    $284 = $283;
    $285 = HEAP32[$284>>2]|0;
    $286 = (($283) + 4)|0;
    $287 = $286;
    $288 = HEAP32[$287>>2]|0;
    $289 = ($288|0)<(0);
    if ($289) {
     $290 = (_i64Subtract(0,0,($285|0),($288|0))|0);
     $291 = tempRet0;
     $292 = $9;
     $293 = $292;
     HEAP32[$293>>2] = $290;
     $294 = (($292) + 4)|0;
     $295 = $294;
     HEAP32[$295>>2] = $291;
     $$0232 = 1;$$0237 = 23817;$300 = $290;$301 = $291;
     label = 75;
     break L74;
    }
    $296 = $$1263$ & 2048;
    $297 = ($296|0)==(0);
    if ($297) {
     $298 = $$1263$ & 1;
     $299 = ($298|0)==(0);
     $$ = $299 ? 23817 : (23819);
     $$0232 = $298;$$0237 = $$;$300 = $285;$301 = $288;
     label = 75;
    } else {
     $$0232 = 1;$$0237 = (23818);$300 = $285;$301 = $288;
     label = 75;
    }
    break;
   }
   case 117:  {
    $188 = $9;
    $189 = $188;
    $190 = HEAP32[$189>>2]|0;
    $191 = (($188) + 4)|0;
    $192 = $191;
    $193 = HEAP32[$192>>2]|0;
    $$0232 = 0;$$0237 = 23817;$300 = $190;$301 = $193;
    label = 75;
    break;
   }
   case 99:  {
    $321 = $9;
    $322 = $321;
    $323 = HEAP32[$322>>2]|0;
    $324 = (($321) + 4)|0;
    $325 = $324;
    $326 = HEAP32[$325>>2]|0;
    $327 = $323&255;
    HEAP8[$16>>0] = $327;
    $$2 = $16;$$2234 = 0;$$2239 = 23817;$$2251 = $14;$$5 = 1;$$6268 = $187;
    break;
   }
   case 109:  {
    $328 = (___errno_location()|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = (_strerror($329)|0);
    $$1 = $330;
    label = 81;
    break;
   }
   case 115:  {
    $331 = HEAP32[$9>>2]|0;
    $332 = ($331|0)!=(0|0);
    $333 = $332 ? $331 : 23827;
    $$1 = $333;
    label = 81;
    break;
   }
   case 67:  {
    $340 = $9;
    $341 = $340;
    $342 = HEAP32[$341>>2]|0;
    $343 = (($340) + 4)|0;
    $344 = $343;
    $345 = HEAP32[$344>>2]|0;
    HEAP32[$11>>2] = $342;
    HEAP32[$17>>2] = 0;
    HEAP32[$9>>2] = $11;
    $$4258458 = -1;$809 = $11;
    label = 85;
    break;
   }
   case 83:  {
    $$pre454 = HEAP32[$9>>2]|0;
    $346 = ($$0254|0)==(0);
    if ($346) {
     _pad($0,32,$$1260,0,$$1263$);
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$4258458 = $$0254;$809 = $$pre454;
     label = 85;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $371 = +HEAPF64[$9>>3];
    HEAP32[$6>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $371;$372 = HEAP32[tempDoublePtr>>2]|0;
    $373 = HEAP32[tempDoublePtr+4>>2]|0;
    $374 = ($373|0)<(0);
    if ($374) {
     $375 = -$371;
     $$0471$i = $375;$$0520$i = 1;$$0522$i = 23834;
    } else {
     $376 = $$1263$ & 2048;
     $377 = ($376|0)==(0);
     $378 = $$1263$ & 1;
     if ($377) {
      $379 = ($378|0)==(0);
      $$$i = $379 ? (23835) : (23840);
      $$0471$i = $371;$$0520$i = $378;$$0522$i = $$$i;
     } else {
      $$0471$i = $371;$$0520$i = 1;$$0522$i = (23837);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$0471$i;$380 = HEAP32[tempDoublePtr>>2]|0;
    $381 = HEAP32[tempDoublePtr+4>>2]|0;
    $382 = $381 & 2146435072;
    $383 = ($382>>>0)<(2146435072);
    $384 = (0)<(0);
    $385 = ($382|0)==(2146435072);
    $386 = $385 & $384;
    $387 = $383 | $386;
    do {
     if ($387) {
      $403 = (+_frexpl($$0471$i,$6));
      $404 = $403 * 2.0;
      $405 = $404 != 0.0;
      if ($405) {
       $406 = HEAP32[$6>>2]|0;
       $407 = (($406) + -1)|0;
       HEAP32[$6>>2] = $407;
      }
      $408 = $$0235 | 32;
      $409 = ($408|0)==(97);
      if ($409) {
       $410 = $$0235 & 32;
       $411 = ($410|0)==(0);
       $412 = ((($$0522$i)) + 9|0);
       $$0522$$i = $411 ? $$0522$i : $412;
       $413 = $$0520$i | 2;
       $414 = ($$0254>>>0)>(11);
       $415 = (12 - ($$0254))|0;
       $416 = ($415|0)==(0);
       $417 = $414 | $416;
       do {
        if ($417) {
         $$1472$i = $404;
        } else {
         $$0509592$i = 8.0;$$1508593$i = $415;
         while(1) {
          $418 = (($$1508593$i) + -1)|0;
          $419 = $$0509592$i * 16.0;
          $420 = ($418|0)==(0);
          if ($420) {
           break;
          } else {
           $$0509592$i = $419;$$1508593$i = $418;
          }
         }
         $421 = HEAP8[$$0522$$i>>0]|0;
         $422 = ($421<<24>>24)==(45);
         if ($422) {
          $423 = -$404;
          $424 = $423 - $419;
          $425 = $419 + $424;
          $426 = -$425;
          $$1472$i = $426;
          break;
         } else {
          $427 = $404 + $419;
          $428 = $427 - $419;
          $$1472$i = $428;
          break;
         }
        }
       } while(0);
       $429 = HEAP32[$6>>2]|0;
       $430 = ($429|0)<(0);
       $431 = (0 - ($429))|0;
       $432 = $430 ? $431 : $429;
       $433 = ($432|0)<(0);
       $434 = $433 << 31 >> 31;
       $435 = (_fmt_u($432,$434,$20)|0);
       $436 = ($435|0)==($20|0);
       if ($436) {
        HEAP8[$21>>0] = 48;
        $$0511$i = $21;
       } else {
        $$0511$i = $435;
       }
       $437 = $429 >> 31;
       $438 = $437 & 2;
       $439 = (($438) + 43)|0;
       $440 = $439&255;
       $441 = ((($$0511$i)) + -1|0);
       HEAP8[$441>>0] = $440;
       $442 = (($$0235) + 15)|0;
       $443 = $442&255;
       $444 = ((($$0511$i)) + -2|0);
       HEAP8[$444>>0] = $443;
       $notrhs$i = ($$0254|0)<(1);
       $445 = $$1263$ & 8;
       $446 = ($445|0)==(0);
       $$0524$i = $7;$$2473$i = $$1472$i;
       while(1) {
        $447 = (~~(($$2473$i)));
        $448 = (23801 + ($447)|0);
        $449 = HEAP8[$448>>0]|0;
        $450 = $449&255;
        $451 = $450 | $410;
        $452 = $451&255;
        $453 = ((($$0524$i)) + 1|0);
        HEAP8[$$0524$i>>0] = $452;
        $454 = (+($447|0));
        $455 = $$2473$i - $454;
        $456 = $455 * 16.0;
        $457 = $453;
        $458 = (($457) - ($18))|0;
        $459 = ($458|0)==(1);
        do {
         if ($459) {
          $notlhs$i = $456 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $446 & $or$cond3$not$i;
          if ($or$cond$i) {
           $$1525$i = $453;
           break;
          }
          $460 = ((($$0524$i)) + 2|0);
          HEAP8[$453>>0] = 46;
          $$1525$i = $460;
         } else {
          $$1525$i = $453;
         }
        } while(0);
        $461 = $456 != 0.0;
        if ($461) {
         $$0524$i = $$1525$i;$$2473$i = $456;
        } else {
         break;
        }
       }
       $462 = ($$0254|0)!=(0);
       $$pre700$i = $$1525$i;
       $463 = (($24) + ($$pre700$i))|0;
       $464 = ($463|0)<($$0254|0);
       $or$cond412 = $462 & $464;
       $465 = $444;
       $466 = (($25) + ($$0254))|0;
       $467 = (($466) - ($465))|0;
       $468 = (($23) - ($465))|0;
       $469 = (($468) + ($$pre700$i))|0;
       $$0526$i = $or$cond412 ? $467 : $469;
       $470 = (($$0526$i) + ($413))|0;
       _pad($0,32,$$1260,$470,$$1263$);
       $471 = HEAP32[$0>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($$0522$$i,$413,$0)|0);
       }
       $474 = $$1263$ ^ 65536;
       _pad($0,48,$$1260,$470,$474);
       $475 = (($$pre700$i) - ($18))|0;
       $476 = HEAP32[$0>>2]|0;
       $477 = $476 & 32;
       $478 = ($477|0)==(0);
       if ($478) {
        (___fwritex($7,$475,$0)|0);
       }
       $479 = (($22) - ($465))|0;
       $sum = (($475) + ($479))|0;
       $480 = (($$0526$i) - ($sum))|0;
       _pad($0,48,$480,0,0);
       $481 = HEAP32[$0>>2]|0;
       $482 = $481 & 32;
       $483 = ($482|0)==(0);
       if ($483) {
        (___fwritex($444,$479,$0)|0);
       }
       $484 = $$1263$ ^ 8192;
       _pad($0,32,$$1260,$470,$484);
       $485 = ($470|0)<($$1260|0);
       $$537$i = $485 ? $$1260 : $470;
       $$0470$i = $$537$i;
       break;
      }
      $486 = ($$0254|0)<(0);
      $$538$i = $486 ? 6 : $$0254;
      if ($405) {
       $487 = $404 * 268435456.0;
       $488 = HEAP32[$6>>2]|0;
       $489 = (($488) + -28)|0;
       HEAP32[$6>>2] = $489;
       $$3$i = $487;$$pr$i = $489;
      } else {
       $$pre697$i = HEAP32[$6>>2]|0;
       $$3$i = $404;$$pr$i = $$pre697$i;
      }
      $490 = ($$pr$i|0)<(0);
      $$554$i = $490 ? $5 : $26;
      $$0498$i = $$554$i;$$4$i = $$3$i;
      while(1) {
       $491 = (~~(($$4$i))>>>0);
       HEAP32[$$0498$i>>2] = $491;
       $492 = ((($$0498$i)) + 4|0);
       $493 = (+($491>>>0));
       $494 = $$4$i - $493;
       $495 = $494 * 1.0E+9;
       $496 = $495 != 0.0;
       if ($496) {
        $$0498$i = $492;$$4$i = $495;
       } else {
        break;
       }
      }
      $497 = ($$pr$i|0)>(0);
      if ($497) {
       $$1482671$i = $$554$i;$$1499670$i = $492;$498 = $$pr$i;
       while(1) {
        $499 = ($498|0)>(29);
        $500 = $499 ? 29 : $498;
        $$0488663$i = ((($$1499670$i)) + -4|0);
        $501 = ($$0488663$i>>>0)<($$1482671$i>>>0);
        do {
         if ($501) {
          $$2483$ph$i = $$1482671$i;
         } else {
          $$0488665$i = $$0488663$i;$$0497664$i = 0;
          while(1) {
           $502 = HEAP32[$$0488665$i>>2]|0;
           $503 = (_bitshift64Shl(($502|0),0,($500|0))|0);
           $504 = tempRet0;
           $505 = (_i64Add(($503|0),($504|0),($$0497664$i|0),0)|0);
           $506 = tempRet0;
           $507 = (___uremdi3(($505|0),($506|0),1000000000,0)|0);
           $508 = tempRet0;
           HEAP32[$$0488665$i>>2] = $507;
           $509 = (___udivdi3(($505|0),($506|0),1000000000,0)|0);
           $510 = tempRet0;
           $$0488$i = ((($$0488665$i)) + -4|0);
           $511 = ($$0488$i>>>0)<($$1482671$i>>>0);
           if ($511) {
            break;
           } else {
            $$0488665$i = $$0488$i;$$0497664$i = $509;
           }
          }
          $512 = ($509|0)==(0);
          if ($512) {
           $$2483$ph$i = $$1482671$i;
           break;
          }
          $513 = ((($$1482671$i)) + -4|0);
          HEAP32[$513>>2] = $509;
          $$2483$ph$i = $513;
         }
        } while(0);
        $$2500$i = $$1499670$i;
        while(1) {
         $514 = ($$2500$i>>>0)>($$2483$ph$i>>>0);
         if (!($514)) {
          break;
         }
         $515 = ((($$2500$i)) + -4|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = ($516|0)==(0);
         if ($517) {
          $$2500$i = $515;
         } else {
          break;
         }
        }
        $518 = HEAP32[$6>>2]|0;
        $519 = (($518) - ($500))|0;
        HEAP32[$6>>2] = $519;
        $520 = ($519|0)>(0);
        if ($520) {
         $$1482671$i = $$2483$ph$i;$$1499670$i = $$2500$i;$498 = $519;
        } else {
         $$1482$lcssa$i = $$2483$ph$i;$$1499$lcssa$i = $$2500$i;$$pr571$i = $519;
         break;
        }
       }
      } else {
       $$1482$lcssa$i = $$554$i;$$1499$lcssa$i = $492;$$pr571$i = $$pr$i;
      }
      $521 = ($$pr571$i|0)<(0);
      if ($521) {
       $522 = (($$538$i) + 25)|0;
       $523 = (($522|0) / 9)&-1;
       $524 = (($523) + 1)|0;
       $525 = ($408|0)==(102);
       $$3484658$i = $$1482$lcssa$i;$$3501657$i = $$1499$lcssa$i;$527 = $$pr571$i;
       while(1) {
        $526 = (0 - ($527))|0;
        $528 = ($526|0)>(9);
        $529 = $528 ? 9 : $526;
        $530 = ($$3484658$i>>>0)<($$3501657$i>>>0);
        do {
         if ($530) {
          $534 = 1 << $529;
          $535 = (($534) + -1)|0;
          $536 = 1000000000 >>> $529;
          $$0487652$i = 0;$$1489651$i = $$3484658$i;
          while(1) {
           $537 = HEAP32[$$1489651$i>>2]|0;
           $538 = $537 & $535;
           $539 = $537 >>> $529;
           $540 = (($539) + ($$0487652$i))|0;
           HEAP32[$$1489651$i>>2] = $540;
           $541 = Math_imul($538, $536)|0;
           $542 = ((($$1489651$i)) + 4|0);
           $543 = ($542>>>0)<($$3501657$i>>>0);
           if ($543) {
            $$0487652$i = $541;$$1489651$i = $542;
           } else {
            break;
           }
          }
          $544 = HEAP32[$$3484658$i>>2]|0;
          $545 = ($544|0)==(0);
          $546 = ((($$3484658$i)) + 4|0);
          $$$3484$i = $545 ? $546 : $$3484658$i;
          $547 = ($541|0)==(0);
          if ($547) {
           $$$3484706$i = $$$3484$i;$$4502$i = $$3501657$i;
           break;
          }
          $548 = ((($$3501657$i)) + 4|0);
          HEAP32[$$3501657$i>>2] = $541;
          $$$3484706$i = $$$3484$i;$$4502$i = $548;
         } else {
          $531 = HEAP32[$$3484658$i>>2]|0;
          $532 = ($531|0)==(0);
          $533 = ((($$3484658$i)) + 4|0);
          $$$3484705$i = $532 ? $533 : $$3484658$i;
          $$$3484706$i = $$$3484705$i;$$4502$i = $$3501657$i;
         }
        } while(0);
        $549 = $525 ? $$554$i : $$$3484706$i;
        $550 = $$4502$i;
        $551 = $549;
        $552 = (($550) - ($551))|0;
        $553 = $552 >> 2;
        $554 = ($553|0)>($524|0);
        $555 = (($549) + ($524<<2)|0);
        $$$4502$i = $554 ? $555 : $$4502$i;
        $556 = HEAP32[$6>>2]|0;
        $557 = (($556) + ($529))|0;
        HEAP32[$6>>2] = $557;
        $558 = ($557|0)<(0);
        if ($558) {
         $$3484658$i = $$$3484706$i;$$3501657$i = $$$4502$i;$527 = $557;
        } else {
         $$3484$lcssa$i = $$$3484706$i;$$3501$lcssa$i = $$$4502$i;
         break;
        }
       }
      } else {
       $$3484$lcssa$i = $$1482$lcssa$i;$$3501$lcssa$i = $$1499$lcssa$i;
      }
      $559 = ($$3484$lcssa$i>>>0)<($$3501$lcssa$i>>>0);
      $560 = $$554$i;
      do {
       if ($559) {
        $561 = $$3484$lcssa$i;
        $562 = (($560) - ($561))|0;
        $563 = $562 >> 2;
        $564 = ($563*9)|0;
        $565 = HEAP32[$$3484$lcssa$i>>2]|0;
        $566 = ($565>>>0)<(10);
        if ($566) {
         $$1515$i = $564;
         break;
        } else {
         $$0514647$i = $564;$$0531646$i = 10;
        }
        while(1) {
         $567 = ($$0531646$i*10)|0;
         $568 = (($$0514647$i) + 1)|0;
         $569 = ($565>>>0)<($567>>>0);
         if ($569) {
          $$1515$i = $568;
          break;
         } else {
          $$0514647$i = $568;$$0531646$i = $567;
         }
        }
       } else {
        $$1515$i = 0;
       }
      } while(0);
      $570 = ($408|0)!=(102);
      $571 = $570 ? $$1515$i : 0;
      $572 = (($$538$i) - ($571))|0;
      $573 = ($408|0)==(103);
      $574 = ($$538$i|0)!=(0);
      $575 = $574 & $573;
      $$neg$i = $575 << 31 >> 31;
      $576 = (($572) + ($$neg$i))|0;
      $577 = $$3501$lcssa$i;
      $578 = (($577) - ($560))|0;
      $579 = $578 >> 2;
      $580 = ($579*9)|0;
      $581 = (($580) + -9)|0;
      $582 = ($576|0)<($581|0);
      if ($582) {
       $583 = ((($$554$i)) + 4|0);
       $584 = (($576) + 9216)|0;
       $585 = (($584|0) / 9)&-1;
       $586 = (($585) + -1024)|0;
       $587 = (($583) + ($586<<2)|0);
       $588 = (($584|0) % 9)&-1;
       $$0528639$i = (($588) + 1)|0;
       $589 = ($$0528639$i|0)<(9);
       if ($589) {
        $$0528641$i = $$0528639$i;$$1532640$i = 10;
        while(1) {
         $590 = ($$1532640$i*10)|0;
         $$0528$i = (($$0528641$i) + 1)|0;
         $exitcond$i = ($$0528$i|0)==(9);
         if ($exitcond$i) {
          $$1532$lcssa$i = $590;
          break;
         } else {
          $$0528641$i = $$0528$i;$$1532640$i = $590;
         }
        }
       } else {
        $$1532$lcssa$i = 10;
       }
       $591 = HEAP32[$587>>2]|0;
       $592 = (($591>>>0) % ($$1532$lcssa$i>>>0))&-1;
       $593 = ($592|0)==(0);
       $594 = ((($587)) + 4|0);
       $595 = ($594|0)==($$3501$lcssa$i|0);
       $or$cond540$i = $595 & $593;
       do {
        if ($or$cond540$i) {
         $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
        } else {
         $596 = (($591>>>0) / ($$1532$lcssa$i>>>0))&-1;
         $597 = $596 & 1;
         $598 = ($597|0)==(0);
         $$541$i = $598 ? 9007199254740992.0 : 9007199254740994.0;
         $599 = (($$1532$lcssa$i|0) / 2)&-1;
         $600 = ($592>>>0)<($599>>>0);
         if ($600) {
          $$0466$i = 0.5;
         } else {
          $601 = ($592|0)==($599|0);
          $or$cond543$i = $595 & $601;
          $$557$i = $or$cond543$i ? 1.0 : 1.5;
          $$0466$i = $$557$i;
         }
         $602 = ($$0520$i|0)==(0);
         do {
          if ($602) {
           $$1467$i = $$0466$i;$$1469$i = $$541$i;
          } else {
           $603 = HEAP8[$$0522$i>>0]|0;
           $604 = ($603<<24>>24)==(45);
           if (!($604)) {
            $$1467$i = $$0466$i;$$1469$i = $$541$i;
            break;
           }
           $605 = -$$541$i;
           $606 = -$$0466$i;
           $$1467$i = $606;$$1469$i = $605;
          }
         } while(0);
         $607 = (($591) - ($592))|0;
         HEAP32[$587>>2] = $607;
         $608 = $$1469$i + $$1467$i;
         $609 = $608 != $$1469$i;
         if (!($609)) {
          $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
          break;
         }
         $610 = (($607) + ($$1532$lcssa$i))|0;
         HEAP32[$587>>2] = $610;
         $611 = ($610>>>0)>(999999999);
         if ($611) {
          $$2490632$i = $587;$$5486633$i = $$3484$lcssa$i;
          while(1) {
           $612 = ((($$2490632$i)) + -4|0);
           HEAP32[$$2490632$i>>2] = 0;
           $613 = ($612>>>0)<($$5486633$i>>>0);
           if ($613) {
            $614 = ((($$5486633$i)) + -4|0);
            HEAP32[$614>>2] = 0;
            $$6$i = $614;
           } else {
            $$6$i = $$5486633$i;
           }
           $615 = HEAP32[$612>>2]|0;
           $616 = (($615) + 1)|0;
           HEAP32[$612>>2] = $616;
           $617 = ($616>>>0)>(999999999);
           if ($617) {
            $$2490632$i = $612;$$5486633$i = $$6$i;
           } else {
            $$2490$lcssa$i = $612;$$5486$lcssa$i = $$6$i;
            break;
           }
          }
         } else {
          $$2490$lcssa$i = $587;$$5486$lcssa$i = $$3484$lcssa$i;
         }
         $618 = $$5486$lcssa$i;
         $619 = (($560) - ($618))|0;
         $620 = $619 >> 2;
         $621 = ($620*9)|0;
         $622 = HEAP32[$$5486$lcssa$i>>2]|0;
         $623 = ($622>>>0)<(10);
         if ($623) {
          $$4492$i = $$2490$lcssa$i;$$4518$i = $621;$$8$i = $$5486$lcssa$i;
          break;
         } else {
          $$2516628$i = $621;$$2533627$i = 10;
         }
         while(1) {
          $624 = ($$2533627$i*10)|0;
          $625 = (($$2516628$i) + 1)|0;
          $626 = ($622>>>0)<($624>>>0);
          if ($626) {
           $$4492$i = $$2490$lcssa$i;$$4518$i = $625;$$8$i = $$5486$lcssa$i;
           break;
          } else {
           $$2516628$i = $625;$$2533627$i = $624;
          }
         }
        }
       } while(0);
       $627 = ((($$4492$i)) + 4|0);
       $628 = ($$3501$lcssa$i>>>0)>($627>>>0);
       $$$3501$i = $628 ? $627 : $$3501$lcssa$i;
       $$5519$ph$i = $$4518$i;$$7505$ph$i = $$$3501$i;$$9$ph$i = $$8$i;
      } else {
       $$5519$ph$i = $$1515$i;$$7505$ph$i = $$3501$lcssa$i;$$9$ph$i = $$3484$lcssa$i;
      }
      $629 = (0 - ($$5519$ph$i))|0;
      $$7505$i = $$7505$ph$i;
      while(1) {
       $630 = ($$7505$i>>>0)>($$9$ph$i>>>0);
       if (!($630)) {
        $$lcssa683$i = 0;
        break;
       }
       $631 = ((($$7505$i)) + -4|0);
       $632 = HEAP32[$631>>2]|0;
       $633 = ($632|0)==(0);
       if ($633) {
        $$7505$i = $631;
       } else {
        $$lcssa683$i = 1;
        break;
       }
      }
      do {
       if ($573) {
        $634 = $574&1;
        $635 = $634 ^ 1;
        $$538$$i = (($635) + ($$538$i))|0;
        $636 = ($$538$$i|0)>($$5519$ph$i|0);
        $637 = ($$5519$ph$i|0)>(-5);
        $or$cond6$i = $636 & $637;
        if ($or$cond6$i) {
         $638 = (($$0235) + -1)|0;
         $$neg572$i = (($$538$$i) + -1)|0;
         $639 = (($$neg572$i) - ($$5519$ph$i))|0;
         $$0479$i = $638;$$2476$i = $639;
        } else {
         $640 = (($$0235) + -2)|0;
         $641 = (($$538$$i) + -1)|0;
         $$0479$i = $640;$$2476$i = $641;
        }
        $642 = $$1263$ & 8;
        $643 = ($642|0)==(0);
        if (!($643)) {
         $$1480$i = $$0479$i;$$3477$i = $$2476$i;$$pre$phi704$iZ2D = $642;
         break;
        }
        do {
         if ($$lcssa683$i) {
          $644 = ((($$7505$i)) + -4|0);
          $645 = HEAP32[$644>>2]|0;
          $646 = ($645|0)==(0);
          if ($646) {
           $$2530$i = 9;
           break;
          }
          $647 = (($645>>>0) % 10)&-1;
          $648 = ($647|0)==(0);
          if ($648) {
           $$1529624$i = 0;$$3534623$i = 10;
          } else {
           $$2530$i = 0;
           break;
          }
          while(1) {
           $649 = ($$3534623$i*10)|0;
           $650 = (($$1529624$i) + 1)|0;
           $651 = (($645>>>0) % ($649>>>0))&-1;
           $652 = ($651|0)==(0);
           if ($652) {
            $$1529624$i = $650;$$3534623$i = $649;
           } else {
            $$2530$i = $650;
            break;
           }
          }
         } else {
          $$2530$i = 9;
         }
        } while(0);
        $653 = $$0479$i | 32;
        $654 = ($653|0)==(102);
        $655 = $$7505$i;
        $656 = (($655) - ($560))|0;
        $657 = $656 >> 2;
        $658 = ($657*9)|0;
        $659 = (($658) + -9)|0;
        if ($654) {
         $660 = (($659) - ($$2530$i))|0;
         $661 = ($660|0)<(0);
         $$544$i = $661 ? 0 : $660;
         $662 = ($$2476$i|0)<($$544$i|0);
         $$2476$$545$i = $662 ? $$2476$i : $$544$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$545$i;$$pre$phi704$iZ2D = 0;
         break;
        } else {
         $663 = (($659) + ($$5519$ph$i))|0;
         $664 = (($663) - ($$2530$i))|0;
         $665 = ($664|0)<(0);
         $$546$i = $665 ? 0 : $664;
         $666 = ($$2476$i|0)<($$546$i|0);
         $$2476$$547$i = $666 ? $$2476$i : $$546$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$547$i;$$pre$phi704$iZ2D = 0;
         break;
        }
       } else {
        $$pre703$i = $$1263$ & 8;
        $$1480$i = $$0235;$$3477$i = $$538$i;$$pre$phi704$iZ2D = $$pre703$i;
       }
      } while(0);
      $667 = $$3477$i | $$pre$phi704$iZ2D;
      $668 = ($667|0)!=(0);
      $669 = $668&1;
      $670 = $$1480$i | 32;
      $671 = ($670|0)==(102);
      if ($671) {
       $672 = ($$5519$ph$i|0)>(0);
       $673 = $672 ? $$5519$ph$i : 0;
       $$2513$i = 0;$$pn$i = $673;
      } else {
       $674 = ($$5519$ph$i|0)<(0);
       $675 = $674 ? $629 : $$5519$ph$i;
       $676 = ($675|0)<(0);
       $677 = $676 << 31 >> 31;
       $678 = (_fmt_u($675,$677,$20)|0);
       $679 = $678;
       $680 = (($22) - ($679))|0;
       $681 = ($680|0)<(2);
       if ($681) {
        $$1512617$i = $678;
        while(1) {
         $682 = ((($$1512617$i)) + -1|0);
         HEAP8[$682>>0] = 48;
         $683 = $682;
         $684 = (($22) - ($683))|0;
         $685 = ($684|0)<(2);
         if ($685) {
          $$1512617$i = $682;
         } else {
          $$1512$lcssa$i = $682;
          break;
         }
        }
       } else {
        $$1512$lcssa$i = $678;
       }
       $686 = $$5519$ph$i >> 31;
       $687 = $686 & 2;
       $688 = (($687) + 43)|0;
       $689 = $688&255;
       $690 = ((($$1512$lcssa$i)) + -1|0);
       HEAP8[$690>>0] = $689;
       $691 = $$1480$i&255;
       $692 = ((($$1512$lcssa$i)) + -2|0);
       HEAP8[$692>>0] = $691;
       $693 = $692;
       $694 = (($22) - ($693))|0;
       $$2513$i = $692;$$pn$i = $694;
      }
      $695 = (($$0520$i) + 1)|0;
      $696 = (($695) + ($$3477$i))|0;
      $$1527$i = (($696) + ($669))|0;
      $697 = (($$1527$i) + ($$pn$i))|0;
      _pad($0,32,$$1260,$697,$$1263$);
      $698 = HEAP32[$0>>2]|0;
      $699 = $698 & 32;
      $700 = ($699|0)==(0);
      if ($700) {
       (___fwritex($$0522$i,$$0520$i,$0)|0);
      }
      $701 = $$1263$ ^ 65536;
      _pad($0,48,$$1260,$697,$701);
      do {
       if ($671) {
        $702 = ($$9$ph$i>>>0)>($$554$i>>>0);
        $$0496$$9$i = $702 ? $$554$i : $$9$ph$i;
        $$5493606$i = $$0496$$9$i;
        while(1) {
         $703 = HEAP32[$$5493606$i>>2]|0;
         $704 = (_fmt_u($703,0,$27)|0);
         $705 = ($$5493606$i|0)==($$0496$$9$i|0);
         do {
          if ($705) {
           $711 = ($704|0)==($27|0);
           if (!($711)) {
            $$1465$i = $704;
            break;
           }
           HEAP8[$29>>0] = 48;
           $$1465$i = $29;
          } else {
           $706 = ($704>>>0)>($7>>>0);
           if (!($706)) {
            $$1465$i = $704;
            break;
           }
           $707 = $704;
           $708 = (($707) - ($18))|0;
           _memset(($7|0),48,($708|0))|0;
           $$0464603$i = $704;
           while(1) {
            $709 = ((($$0464603$i)) + -1|0);
            $710 = ($709>>>0)>($7>>>0);
            if ($710) {
             $$0464603$i = $709;
            } else {
             $$1465$i = $709;
             break;
            }
           }
          }
         } while(0);
         $712 = HEAP32[$0>>2]|0;
         $713 = $712 & 32;
         $714 = ($713|0)==(0);
         if ($714) {
          $715 = $$1465$i;
          $716 = (($28) - ($715))|0;
          (___fwritex($$1465$i,$716,$0)|0);
         }
         $717 = ((($$5493606$i)) + 4|0);
         $718 = ($717>>>0)>($$554$i>>>0);
         if ($718) {
          break;
         } else {
          $$5493606$i = $717;
         }
        }
        $719 = ($667|0)==(0);
        do {
         if (!($719)) {
          $720 = HEAP32[$0>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if (!($722)) {
           break;
          }
          (___fwritex(23865,1,$0)|0);
         }
        } while(0);
        $723 = ($717>>>0)<($$7505$i>>>0);
        $724 = ($$3477$i|0)>(0);
        $725 = $724 & $723;
        if ($725) {
         $$4478600$i = $$3477$i;$$6494599$i = $717;
         while(1) {
          $726 = HEAP32[$$6494599$i>>2]|0;
          $727 = (_fmt_u($726,0,$27)|0);
          $728 = ($727>>>0)>($7>>>0);
          if ($728) {
           $729 = $727;
           $730 = (($729) - ($18))|0;
           _memset(($7|0),48,($730|0))|0;
           $$0463594$i = $727;
           while(1) {
            $731 = ((($$0463594$i)) + -1|0);
            $732 = ($731>>>0)>($7>>>0);
            if ($732) {
             $$0463594$i = $731;
            } else {
             $$0463$lcssa$i = $731;
             break;
            }
           }
          } else {
           $$0463$lcssa$i = $727;
          }
          $733 = HEAP32[$0>>2]|0;
          $734 = $733 & 32;
          $735 = ($734|0)==(0);
          if ($735) {
           $736 = ($$4478600$i|0)>(9);
           $737 = $736 ? 9 : $$4478600$i;
           (___fwritex($$0463$lcssa$i,$737,$0)|0);
          }
          $738 = ((($$6494599$i)) + 4|0);
          $739 = (($$4478600$i) + -9)|0;
          $740 = ($738>>>0)<($$7505$i>>>0);
          $741 = ($$4478600$i|0)>(9);
          $742 = $741 & $740;
          if ($742) {
           $$4478600$i = $739;$$6494599$i = $738;
          } else {
           $$4478$lcssa$i = $739;
           break;
          }
         }
        } else {
         $$4478$lcssa$i = $$3477$i;
        }
        $743 = (($$4478$lcssa$i) + 9)|0;
        _pad($0,48,$743,9,0);
       } else {
        $744 = ((($$9$ph$i)) + 4|0);
        $$7505$$i = $$lcssa683$i ? $$7505$i : $744;
        $745 = ($$3477$i|0)>(-1);
        if ($745) {
         $746 = ($$pre$phi704$iZ2D|0)==(0);
         $$5611$i = $$3477$i;$$7495610$i = $$9$ph$i;
         while(1) {
          $747 = HEAP32[$$7495610$i>>2]|0;
          $748 = (_fmt_u($747,0,$27)|0);
          $749 = ($748|0)==($27|0);
          if ($749) {
           HEAP8[$29>>0] = 48;
           $$0$i = $29;
          } else {
           $$0$i = $748;
          }
          $750 = ($$7495610$i|0)==($$9$ph$i|0);
          do {
           if ($750) {
            $754 = ((($$0$i)) + 1|0);
            $755 = HEAP32[$0>>2]|0;
            $756 = $755 & 32;
            $757 = ($756|0)==(0);
            if ($757) {
             (___fwritex($$0$i,1,$0)|0);
            }
            $758 = ($$5611$i|0)<(1);
            $or$cond552$i = $746 & $758;
            if ($or$cond552$i) {
             $$2$i = $754;
             break;
            }
            $759 = HEAP32[$0>>2]|0;
            $760 = $759 & 32;
            $761 = ($760|0)==(0);
            if (!($761)) {
             $$2$i = $754;
             break;
            }
            (___fwritex(23865,1,$0)|0);
            $$2$i = $754;
           } else {
            $751 = ($$0$i>>>0)>($7>>>0);
            if (!($751)) {
             $$2$i = $$0$i;
             break;
            }
            $scevgep694$i = (($$0$i) + ($19)|0);
            $scevgep694695$i = $scevgep694$i;
            _memset(($7|0),48,($scevgep694695$i|0))|0;
            $$1607$i = $$0$i;
            while(1) {
             $752 = ((($$1607$i)) + -1|0);
             $753 = ($752>>>0)>($7>>>0);
             if ($753) {
              $$1607$i = $752;
             } else {
              $$2$i = $752;
              break;
             }
            }
           }
          } while(0);
          $762 = $$2$i;
          $763 = (($28) - ($762))|0;
          $764 = HEAP32[$0>>2]|0;
          $765 = $764 & 32;
          $766 = ($765|0)==(0);
          if ($766) {
           $767 = ($$5611$i|0)>($763|0);
           $768 = $767 ? $763 : $$5611$i;
           (___fwritex($$2$i,$768,$0)|0);
          }
          $769 = (($$5611$i) - ($763))|0;
          $770 = ((($$7495610$i)) + 4|0);
          $771 = ($770>>>0)<($$7505$$i>>>0);
          $772 = ($769|0)>(-1);
          $773 = $771 & $772;
          if ($773) {
           $$5611$i = $769;$$7495610$i = $770;
          } else {
           $$5$lcssa$i = $769;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$3477$i;
        }
        $774 = (($$5$lcssa$i) + 18)|0;
        _pad($0,48,$774,18,0);
        $775 = HEAP32[$0>>2]|0;
        $776 = $775 & 32;
        $777 = ($776|0)==(0);
        if (!($777)) {
         break;
        }
        $778 = $$2513$i;
        $779 = (($22) - ($778))|0;
        (___fwritex($$2513$i,$779,$0)|0);
       }
      } while(0);
      $780 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$697,$780);
      $781 = ($697|0)<($$1260|0);
      $$553$i = $781 ? $$1260 : $697;
      $$0470$i = $$553$i;
     } else {
      $388 = $$0235 & 32;
      $389 = ($388|0)!=(0);
      $390 = $389 ? 23853 : 23857;
      $391 = ($$0471$i != $$0471$i) | (0.0 != 0.0);
      $392 = $389 ? 25783 : 23861;
      $$1521$i = $391 ? 0 : $$0520$i;
      $$0510$i = $391 ? $392 : $390;
      $393 = (($$1521$i) + 3)|0;
      _pad($0,32,$$1260,$393,$187);
      $394 = HEAP32[$0>>2]|0;
      $395 = $394 & 32;
      $396 = ($395|0)==(0);
      if ($396) {
       (___fwritex($$0522$i,$$1521$i,$0)|0);
       $$pre$i = HEAP32[$0>>2]|0;
       $398 = $$pre$i;
      } else {
       $398 = $394;
      }
      $397 = $398 & 32;
      $399 = ($397|0)==(0);
      if ($399) {
       (___fwritex($$0510$i,3,$0)|0);
      }
      $400 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$393,$400);
      $401 = ($393|0)<($$1260|0);
      $402 = $401 ? $$1260 : $393;
      $$0470$i = $402;
     }
    } while(0);
    $$0243 = $$0470$i;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue L1;
    break;
   }
   default: {
    $$2 = $$0321;$$2234 = 0;$$2239 = 23817;$$2251 = $14;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L310: do {
   if ((label|0) == 63) {
    label = 0;
    $218 = $9;
    $219 = $218;
    $220 = HEAP32[$219>>2]|0;
    $221 = (($218) + 4)|0;
    $222 = $221;
    $223 = HEAP32[$222>>2]|0;
    $224 = $$1236 & 32;
    $225 = ($220|0)==(0);
    $226 = ($223|0)==(0);
    $227 = $225 & $226;
    if ($227) {
     $$05$lcssa$i = $14;$248 = 0;$250 = 0;
    } else {
     $$056$i = $14;$229 = $220;$236 = $223;
     while(1) {
      $228 = $229 & 15;
      $230 = (23801 + ($228)|0);
      $231 = HEAP8[$230>>0]|0;
      $232 = $231&255;
      $233 = $232 | $224;
      $234 = $233&255;
      $235 = ((($$056$i)) + -1|0);
      HEAP8[$235>>0] = $234;
      $237 = (_bitshift64Lshr(($229|0),($236|0),4)|0);
      $238 = tempRet0;
      $239 = ($237|0)==(0);
      $240 = ($238|0)==(0);
      $241 = $239 & $240;
      if ($241) {
       break;
      } else {
       $$056$i = $235;$229 = $237;$236 = $238;
      }
     }
     $242 = $9;
     $243 = $242;
     $244 = HEAP32[$243>>2]|0;
     $245 = (($242) + 4)|0;
     $246 = $245;
     $247 = HEAP32[$246>>2]|0;
     $$05$lcssa$i = $235;$248 = $244;$250 = $247;
    }
    $249 = ($248|0)==(0);
    $251 = ($250|0)==(0);
    $252 = $249 & $251;
    $253 = $$3265 & 8;
    $254 = ($253|0)==(0);
    $or$cond282 = $254 | $252;
    $255 = $$1236 >> 4;
    $256 = (23817 + ($255)|0);
    $$332 = $or$cond282 ? 23817 : $256;
    $$333 = $or$cond282 ? 0 : 2;
    $$0228 = $$05$lcssa$i;$$1233 = $$333;$$1238 = $$332;$$2256 = $$1255;$$4266 = $$3265;
    label = 76;
   }
   else if ((label|0) == 75) {
    label = 0;
    $302 = (_fmt_u($300,$301,$14)|0);
    $$0228 = $302;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;
    label = 76;
   }
   else if ((label|0) == 81) {
    label = 0;
    $334 = (_memchr($$1,0,$$0254)|0);
    $335 = ($334|0)==(0|0);
    $336 = $334;
    $337 = $$1;
    $338 = (($336) - ($337))|0;
    $339 = (($$1) + ($$0254)|0);
    $$3257 = $335 ? $$0254 : $338;
    $$1250 = $335 ? $339 : $334;
    $$2 = $$1;$$2234 = 0;$$2239 = 23817;$$2251 = $$1250;$$5 = $$3257;$$6268 = $187;
   }
   else if ((label|0) == 85) {
    label = 0;
    $$0229396 = $809;$$0240395 = 0;$$1244394 = 0;
    while(1) {
     $347 = HEAP32[$$0229396>>2]|0;
     $348 = ($347|0)==(0);
     if ($348) {
      $$0240$lcssa = $$0240395;$$2245 = $$1244394;
      break;
     }
     $349 = (_wctomb($12,$347)|0);
     $350 = ($349|0)<(0);
     $351 = (($$4258458) - ($$0240395))|0;
     $352 = ($349>>>0)>($351>>>0);
     $or$cond285 = $350 | $352;
     if ($or$cond285) {
      $$0240$lcssa = $$0240395;$$2245 = $349;
      break;
     }
     $353 = ((($$0229396)) + 4|0);
     $354 = (($349) + ($$0240395))|0;
     $355 = ($$4258458>>>0)>($354>>>0);
     if ($355) {
      $$0229396 = $353;$$0240395 = $354;$$1244394 = $349;
     } else {
      $$0240$lcssa = $354;$$2245 = $349;
      break;
     }
    }
    $356 = ($$2245|0)<(0);
    if ($356) {
     $$0 = -1;
     break L1;
    }
    _pad($0,32,$$1260,$$0240$lcssa,$$1263$);
    $357 = ($$0240$lcssa|0)==(0);
    if ($357) {
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$1230407 = $809;$$1241406 = 0;
     while(1) {
      $358 = HEAP32[$$1230407>>2]|0;
      $359 = ($358|0)==(0);
      if ($359) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $360 = ((($$1230407)) + 4|0);
      $361 = (_wctomb($12,$358)|0);
      $362 = (($361) + ($$1241406))|0;
      $363 = ($362|0)>($$0240$lcssa|0);
      if ($363) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $364 = HEAP32[$0>>2]|0;
      $365 = $364 & 32;
      $366 = ($365|0)==(0);
      if ($366) {
       (___fwritex($12,$361,$0)|0);
      }
      $367 = ($362>>>0)<($$0240$lcssa>>>0);
      if ($367) {
       $$1230407 = $360;$$1241406 = $362;
      } else {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 96) {
   label = 0;
   $368 = $$1263$ ^ 8192;
   _pad($0,32,$$1260,$$0240$lcssa460,$368);
   $369 = ($$1260|0)>($$0240$lcssa460|0);
   $370 = $369 ? $$1260 : $$0240$lcssa460;
   $$0243 = $370;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
   continue;
  }
  if ((label|0) == 76) {
   label = 0;
   $303 = ($$2256|0)>(-1);
   $304 = $$4266 & -65537;
   $$$4266 = $303 ? $304 : $$4266;
   $305 = $9;
   $306 = $305;
   $307 = HEAP32[$306>>2]|0;
   $308 = (($305) + 4)|0;
   $309 = $308;
   $310 = HEAP32[$309>>2]|0;
   $311 = ($307|0)!=(0);
   $312 = ($310|0)!=(0);
   $313 = $311 | $312;
   $314 = ($$2256|0)!=(0);
   $or$cond = $314 | $313;
   if ($or$cond) {
    $315 = $$0228;
    $316 = (($15) - ($315))|0;
    $317 = $313&1;
    $318 = $317 ^ 1;
    $319 = (($318) + ($316))|0;
    $320 = ($$2256|0)>($319|0);
    $$2256$ = $320 ? $$2256 : $319;
    $$2 = $$0228;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = $$2256$;$$6268 = $$$4266;
   } else {
    $$2 = $14;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = 0;$$6268 = $$$4266;
   }
  }
  $782 = $$2251;
  $783 = $$2;
  $784 = (($782) - ($783))|0;
  $785 = ($$5|0)<($784|0);
  $$$5 = $785 ? $784 : $$5;
  $786 = (($$$5) + ($$2234))|0;
  $787 = ($$1260|0)<($786|0);
  $$2261 = $787 ? $786 : $$1260;
  _pad($0,32,$$2261,$786,$$6268);
  $788 = HEAP32[$0>>2]|0;
  $789 = $788 & 32;
  $790 = ($789|0)==(0);
  if ($790) {
   (___fwritex($$2239,$$2234,$0)|0);
  }
  $791 = $$6268 ^ 65536;
  _pad($0,48,$$2261,$786,$791);
  _pad($0,48,$$$5,$784,0);
  $792 = HEAP32[$0>>2]|0;
  $793 = $792 & 32;
  $794 = ($793|0)==(0);
  if ($794) {
   (___fwritex($$2,$784,$0)|0);
  }
  $795 = $$6268 ^ 8192;
  _pad($0,32,$$2261,$786,$795);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
 }
 L345: do {
  if ((label|0) == 243) {
   $796 = ($0|0)==(0|0);
   if ($796) {
    $797 = ($$0269|0)==(0);
    if ($797) {
     $$0 = 0;
    } else {
     $$2242381 = 1;
     while(1) {
      $798 = (($4) + ($$2242381<<2)|0);
      $799 = HEAP32[$798>>2]|0;
      $800 = ($799|0)==(0);
      if ($800) {
       $$3379 = $$2242381;
       break;
      }
      $801 = (($3) + ($$2242381<<3)|0);
      _pop_arg($801,$799,$2);
      $802 = (($$2242381) + 1)|0;
      $803 = ($802|0)<(10);
      if ($803) {
       $$2242381 = $802;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     while(1) {
      $806 = (($4) + ($$3379<<2)|0);
      $807 = HEAP32[$806>>2]|0;
      $808 = ($807|0)==(0);
      $804 = (($$3379) + 1)|0;
      if (!($808)) {
       $$0 = -1;
       break L345;
      }
      $805 = ($804|0)<(10);
      if ($805) {
       $$3379 = $804;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$032 = 0, $$033 = 0, $$034 = 0, $$1 = 0, $$pre = 0, $$pre38 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$032 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 127]($2,$0,$1)|0);
    $$032 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$0 = $1;
     while(1) {
      $21 = ($$0|0)==(0);
      if ($21) {
       $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
       break L10;
      }
      $22 = (($$0) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$0 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 127]($2,$0,$$0)|0);
     $29 = ($28>>>0)<($$0>>>0);
     if ($29) {
      $$032 = $$0;
      break L5;
     }
     $30 = (($0) + ($$0)|0);
     $31 = (($1) - ($$0))|0;
     $$pre38 = HEAP32[$9>>2]|0;
     $$033 = $31;$$034 = $30;$$1 = $$0;$32 = $$pre38;
    } else {
     $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
    }
   } while(0);
   _memcpy(($32|0),($$034|0),($$033|0))|0;
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$033)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$1) + ($$033))|0;
   $$032 = $35;
  }
 } while(0);
 return ($$032|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10 | 48;
   $13 = $12&255;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $$011$lcssa = 0, $$01113 = 0, $$015 = 0, $$112 = 0, $$114 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$015 = 0;
 while(1) {
  $2 = (23867 + ($$015)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 2;
   break;
  }
  $6 = (($$015) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$01113 = 23955;$$114 = 87;
   label = 5;
   break;
  } else {
   $$015 = $6;
  }
 }
 if ((label|0) == 2) {
  $1 = ($$015|0)==(0);
  if ($1) {
   $$011$lcssa = 23955;
  } else {
   $$01113 = 23955;$$114 = $$015;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$112 = $$01113;
   while(1) {
    $8 = HEAP8[$$112>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ((($$112)) + 1|0);
    if ($9) {
     break;
    } else {
     $$112 = $10;
    }
   }
   $11 = (($$114) + -1)|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $$011$lcssa = $10;
    break;
   } else {
    $$01113 = $10;$$114 = $11;
    label = 5;
   }
  }
 }
 return ($$011$lcssa|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa16 = 0, $$012 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 do {
  if ($or$cond) {
   $9 = (($2) - ($3))|0;
   $10 = ($9>>>0)>(256);
   $11 = $10 ? 256 : $9;
   _memset(($5|0),($1|0),($11|0))|0;
   $12 = ($9>>>0)>(255);
   $13 = HEAP32[$0>>2]|0;
   $14 = $13 & 32;
   $15 = ($14|0)==(0);
   if ($12) {
    $16 = (($2) - ($3))|0;
    $$012 = $9;$23 = $13;$24 = $15;
    while(1) {
     if ($24) {
      (___fwritex($5,256,$0)|0);
      $$pre = HEAP32[$0>>2]|0;
      $20 = $$pre;
     } else {
      $20 = $23;
     }
     $17 = (($$012) + -256)|0;
     $18 = ($17>>>0)>(255);
     $19 = $20 & 32;
     $21 = ($19|0)==(0);
     if ($18) {
      $$012 = $17;$23 = $20;$24 = $21;
     } else {
      break;
     }
    }
    $22 = $16 & 255;
    if ($21) {
     $$0$lcssa16 = $22;
    } else {
     break;
    }
   } else {
    if ($15) {
     $$0$lcssa16 = $9;
    } else {
     break;
    }
   }
   (___fwritex($5,$$0$lcssa16,$0)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = ($1>>>0)<(2048);
   if ($6) {
    $7 = $1 >>> 6;
    $8 = $7 | 192;
    $9 = $8&255;
    $10 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $9;
    $11 = $1 & 63;
    $12 = $11 | 128;
    $13 = $12&255;
    HEAP8[$10>>0] = $13;
    $$0 = 2;
    break;
   }
   $14 = ($1>>>0)<(55296);
   $15 = $1 & -8192;
   $16 = ($15|0)==(57344);
   $or$cond = $14 | $16;
   if ($or$cond) {
    $17 = $1 >>> 12;
    $18 = $17 | 224;
    $19 = $18&255;
    $20 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $19;
    $21 = $1 >>> 6;
    $22 = $21 & 63;
    $23 = $22 | 128;
    $24 = $23&255;
    $25 = ((($0)) + 2|0);
    HEAP8[$20>>0] = $24;
    $26 = $1 & 63;
    $27 = $26 | 128;
    $28 = $27&255;
    HEAP8[$25>>0] = $28;
    $$0 = 3;
    break;
   }
   $29 = (($1) + -65536)|0;
   $30 = ($29>>>0)<(1048576);
   if ($30) {
    $31 = $1 >>> 18;
    $32 = $31 | 240;
    $33 = $32&255;
    $34 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $33;
    $35 = $1 >>> 12;
    $36 = $35 & 63;
    $37 = $36 | 128;
    $38 = $37&255;
    $39 = ((($0)) + 2|0);
    HEAP8[$34>>0] = $38;
    $40 = $1 >>> 6;
    $41 = $40 & 63;
    $42 = $41 | 128;
    $43 = $42&255;
    $44 = ((($0)) + 3|0);
    HEAP8[$39>>0] = $43;
    $45 = $1 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    HEAP8[$44>>0] = $47;
    $$0 = 4;
    break;
   } else {
    $48 = (___errno_location()|0);
    HEAP32[$48>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $$ = $8 ? $2 : $7;
 $$cast = $6;
 _memcpy(($$cast|0),($1|0),($$|0))|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($$)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _isalnum($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $isdigit = 0, $isdigittmp = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isalpha($0)|0);
 $isdigittmp = (($0) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $not$ = ($1|0)!=(0);
 $2 = $isdigit | $not$;
 $3 = $2&1;
 return ($3|0);
}
function _isalpha($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 | 32;
 $2 = (($1) + -97)|0;
 $3 = ($2>>>0)<(26);
 $4 = $3&1;
 return ($4|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _isgraph($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -33)|0;
 $2 = ($1>>>0)<(94);
 $3 = $2&1;
 return ($3|0);
}
function _close($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $1 = (___syscall6(6,($vararg_buffer|0))|0);
 $2 = ($1|0)==(-4);
 $$ = $2 ? -115 : $1;
 $3 = (___syscall_ret($$)|0);
 STACKTOP = sp;return ($3|0);
}
function _fstat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 24|0;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $3 = (___syscall197(197,($vararg_buffer|0))|0);
 $4 = ($3|0)==(-9);
 if ($4) {
  HEAP32[$vararg_buffer2>>2] = $0;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 1;
  $5 = (___syscall221(221,($vararg_buffer2|0))|0);
  $6 = ($5|0)<(0);
  if ($6) {
   label = 3;
  } else {
   ___procfdname($2,$0);
   HEAP32[$vararg_buffer6>>2] = $2;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $1;
   $8 = (___syscall195(195,($vararg_buffer6|0))|0);
   $9 = (___syscall_ret($8)|0);
   $$0 = $9;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $7 = (___syscall_ret($3)|0);
  $$0 = $7;
 }
 STACKTOP = sp;return ($$0|0);
}
function _fcntl($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0, $vararg_buffer23 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer36 = 0;
 var $vararg_buffer41 = 0, $vararg_buffer46 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr40 = 0, $vararg_ptr44 = 0, $vararg_ptr45 = 0, $vararg_ptr49 = 0;
 var $vararg_ptr50 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer46 = sp + 152|0;
 $vararg_buffer41 = sp + 136|0;
 $vararg_buffer36 = sp + 120|0;
 $vararg_buffer31 = sp + 104|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 176|0;
 $3 = sp + 168|0;
 HEAP32[$2>>2] = $varargs;
 $arglist_current = HEAP32[$2>>2]|0;
 $4 = $arglist_current;
 $5 = ((0) + 4|0);
 $expanded2 = $5;
 $expanded = (($expanded2) - 1)|0;
 $6 = (($4) + ($expanded))|0;
 $7 = ((0) + 4|0);
 $expanded6 = $7;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $8 = $6 & $expanded4;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $arglist_next = ((($9)) + 4|0);
 HEAP32[$2>>2] = $arglist_next;
 $11 = ($1|0)==(4);
 $12 = $10 | 32768;
 $$ = $11 ? $12 : $10;
 L1: do {
  switch ($1|0) {
  case 14:  {
   $13 = $$;
   HEAP32[$vararg_buffer>>2] = $0;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 14;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $13;
   $14 = (___syscall221(221,($vararg_buffer|0))|0);
   $15 = (___syscall_ret($14)|0);
   $$2 = $15;
   break;
  }
  case 9:  {
   HEAP32[$vararg_buffer3>>2] = $0;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = 16;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $3;
   $16 = (___syscall221(221,($vararg_buffer3|0))|0);
   switch ($16|0) {
   case -22:  {
    $17 = $$;
    HEAP32[$vararg_buffer8>>2] = $0;
    $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
    HEAP32[$vararg_ptr11>>2] = 9;
    $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
    HEAP32[$vararg_ptr12>>2] = $17;
    $18 = (___syscall221(221,($vararg_buffer8|0))|0);
    $$0 = $18;
    break;
   }
   case 0:  {
    $20 = HEAP32[$3>>2]|0;
    $21 = ($20|0)==(2);
    $22 = ((($3)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (0 - ($23))|0;
    $25 = $21 ? $24 : $23;
    $$0 = $25;
    break;
   }
   default: {
    $19 = (___syscall_ret($16)|0);
    $$0 = $19;
   }
   }
   $$2 = $$0;
   break;
  }
  case 1030:  {
   HEAP32[$vararg_buffer13>>2] = $0;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = 1030;
   $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
   HEAP32[$vararg_ptr17>>2] = $$;
   $26 = (___syscall221(221,($vararg_buffer13|0))|0);
   $27 = ($26|0)==(-22);
   if (!($27)) {
    $28 = ($26|0)>(-1);
    if ($28) {
     HEAP32[$vararg_buffer18>>2] = $26;
     $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
     HEAP32[$vararg_ptr21>>2] = 2;
     $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
     HEAP32[$vararg_ptr22>>2] = 1;
     (___syscall221(221,($vararg_buffer18|0))|0);
    }
    $29 = (___syscall_ret($26)|0);
    $$2 = $29;
    break L1;
   }
   HEAP32[$vararg_buffer23>>2] = $0;
   $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
   HEAP32[$vararg_ptr26>>2] = 1030;
   $vararg_ptr27 = ((($vararg_buffer23)) + 8|0);
   HEAP32[$vararg_ptr27>>2] = 0;
   $30 = (___syscall221(221,($vararg_buffer23|0))|0);
   $31 = ($30|0)==(-22);
   if ($31) {
    HEAP32[$vararg_buffer31>>2] = $0;
    $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
    HEAP32[$vararg_ptr34>>2] = 0;
    $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
    HEAP32[$vararg_ptr35>>2] = $$;
    $34 = (___syscall221(221,($vararg_buffer31|0))|0);
    $35 = ($34|0)>(-1);
    if ($35) {
     HEAP32[$vararg_buffer36>>2] = $34;
     $vararg_ptr39 = ((($vararg_buffer36)) + 4|0);
     HEAP32[$vararg_ptr39>>2] = 2;
     $vararg_ptr40 = ((($vararg_buffer36)) + 8|0);
     HEAP32[$vararg_ptr40>>2] = 1;
     (___syscall221(221,($vararg_buffer36|0))|0);
    }
    $36 = (___syscall_ret($34)|0);
    $$2 = $36;
    break L1;
   } else {
    $32 = ($30|0)>(-1);
    if ($32) {
     HEAP32[$vararg_buffer28>>2] = $30;
     (___syscall6(6,($vararg_buffer28|0))|0);
    }
    $33 = (___syscall_ret(-22)|0);
    $$2 = $33;
    break L1;
   }
   break;
  }
  default: {
   $$off = (($1) + -12)|0;
   $switch = ($$off>>>0)<(5);
   if ($switch) {
    $37 = $$;
    HEAP32[$vararg_buffer41>>2] = $0;
    $vararg_ptr44 = ((($vararg_buffer41)) + 4|0);
    HEAP32[$vararg_ptr44>>2] = $1;
    $vararg_ptr45 = ((($vararg_buffer41)) + 8|0);
    HEAP32[$vararg_ptr45>>2] = $37;
    $38 = (___syscall221(221,($vararg_buffer41|0))|0);
    $39 = (___syscall_ret($38)|0);
    $$2 = $39;
    break L1;
   } else {
    HEAP32[$vararg_buffer46>>2] = $0;
    $vararg_ptr49 = ((($vararg_buffer46)) + 4|0);
    HEAP32[$vararg_ptr49>>2] = $1;
    $vararg_ptr50 = ((($vararg_buffer46)) + 8|0);
    HEAP32[$vararg_ptr50>>2] = $$;
    $40 = (___syscall221(221,($vararg_buffer46|0))|0);
    $41 = (___syscall_ret($40)|0);
    $$2 = $41;
    break L1;
   }
  }
  }
 } while(0);
 STACKTOP = sp;return ($$2|0);
}
function ___procfdname($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02324 = 0, $$027 = 0, $$126 = 0, $$225 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$0; src=25759; stop=dest+15|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $2 = ($1|0)==(0);
 if ($2) {
  $scevgep = ((($0)) + 14|0);
  HEAP8[$scevgep>>0] = 48;
  $3 = ((($0)) + 15|0);
  HEAP8[$3>>0] = 0;
 } else {
  $$027 = $1;$$126 = 14;
  while(1) {
   $4 = (($$027>>>0) / 10)&-1;
   $5 = (($$126) + 1)|0;
   $6 = ($$027>>>0)<(10);
   if ($6) {
    break;
   } else {
    $$027 = $4;$$126 = $5;
   }
  }
  $7 = (($0) + ($5)|0);
  HEAP8[$7>>0] = 0;
  $$02324 = $1;$$225 = $5;
  while(1) {
   $8 = (($$02324>>>0) % 10)&-1;
   $9 = $8 | 48;
   $10 = $9&255;
   $11 = (($$225) + -1)|0;
   $12 = (($0) + ($11)|0);
   HEAP8[$12>>0] = $10;
   $13 = (($$02324>>>0) / 10)&-1;
   $14 = ($$02324>>>0)<(10);
   if ($14) {
    break;
   } else {
    $$02324 = $13;$$225 = $11;
   }
  }
 }
 return;
}
function _open($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 16|0;
 HEAP32[$2>>2] = $varargs;
 $arglist_current = HEAP32[$2>>2]|0;
 $3 = $arglist_current;
 $4 = ((0) + 4|0);
 $expanded2 = $4;
 $expanded = (($expanded2) - 1)|0;
 $5 = (($3) + ($expanded))|0;
 $6 = ((0) + 4|0);
 $expanded6 = $6;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $7 = $5 & $expanded4;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $arglist_next = ((($8)) + 4|0);
 HEAP32[$2>>2] = $arglist_next;
 $10 = $1 | 32768;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $9;
 $11 = (___syscall5(5,($vararg_buffer|0))|0);
 $12 = (___syscall_ret($11)|0);
 STACKTOP = sp;return ($12|0);
}
function _lseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $4 = (___syscall140(140,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 $6 = ($5|0)!=(0);
 $7 = HEAP32[$3>>2]|0;
 $8 = $6 ? -1 : $7;
 STACKTOP = sp;return ($8|0);
}
function _qsort($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$i = 0, $$0$i88 = 0, $$067$lcssa = 0, $$06793 = 0, $$068$i$i = 0, $$068$i8$i = 0, $$068$lcssa = 0, $$06892 = 0, $$07$i10$i$ph = 0, $$09$i$i = 0, $$09$i7$i = 0, $$1 = 0, $$169$be = 0, $$169108 = 0, $$2$be = 0, $$2109 = 0, $$pre = 0, $$pre$i = 0, $$pre$i71 = 0;
 var $$pre$i73 = 0, $$pre$i75 = 0, $$pre11$i = 0, $$pre11$i72 = 0, $$pre11$i74 = 0, $$pre11$i76 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $15$phi = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond106 = 0, $or$cond97 = 0, $or$cond97107 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $4 = sp + 8|0;
 $5 = sp;
 $6 = Math_imul($2, $1)|0;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = 1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = ($6|0)==(0);
 if (!($11)) {
  $12 = (0 - ($2))|0;
  $13 = ((($4)) + 4|0);
  HEAP32[$13>>2] = $2;
  HEAP32[$4>>2] = $2;
  $$0 = 2;$15 = $2;$17 = $2;
  while(1) {
   $14 = (($15) + ($2))|0;
   $16 = (($14) + ($17))|0;
   $18 = (($4) + ($$0<<2)|0);
   HEAP32[$18>>2] = $16;
   $19 = ($16>>>0)<($6>>>0);
   $20 = (($$0) + 1)|0;
   if ($19) {
    $15$phi = $17;$$0 = $20;$17 = $16;$15 = $15$phi;
   } else {
    break;
   }
  }
  $21 = (($0) + ($6)|0);
  $22 = (($21) + ($12)|0);
  $23 = ($22>>>0)>($0>>>0);
  $24 = ((($5)) + 4|0);
  if ($23) {
   $25 = $22;
   $$06793 = 1;$$06892 = $0;$27 = 1;
   while(1) {
    $26 = $27 & 3;
    $28 = ($26|0)==(3);
    do {
     if ($28) {
      _sift($$06892,$2,$3,$$06793,$4);
      $$pre$i = HEAP32[$5>>2]|0;
      $$pre11$i = HEAP32[$24>>2]|0;
      $29 = $$pre$i >>> 2;
      $30 = $$pre11$i << 30;
      $31 = $30 | $29;
      HEAP32[$5>>2] = $31;
      $32 = $$pre11$i >>> 2;
      HEAP32[$24>>2] = $32;
      $33 = (($$06793) + 2)|0;
      $$1 = $33;$56 = $31;
     } else {
      $34 = (($$06793) + -1)|0;
      $35 = (($4) + ($34<<2)|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = $$06892;
      $38 = (($25) - ($37))|0;
      $39 = ($36>>>0)<($38>>>0);
      if ($39) {
       _sift($$06892,$2,$3,$$06793,$4);
      } else {
       _trinkle($$06892,$2,$3,$5,$$06793,0,$4);
      }
      $40 = ($$06793|0)==(1);
      if ($40) {
       $$pre$i71 = HEAP32[$24>>2]|0;
       $$pre11$i72 = HEAP32[$5>>2]|0;
       $41 = $$pre$i71 << 1;
       $42 = $$pre11$i72 >>> 31;
       $43 = $42 | $41;
       HEAP32[$24>>2] = $43;
       $44 = $$pre11$i72 << 1;
       HEAP32[$5>>2] = $44;
       $$1 = 0;$56 = $44;
       break;
      }
      $45 = ($34>>>0)>(31);
      if ($45) {
       $46 = (($$06793) + -33)|0;
       $47 = HEAP32[$5>>2]|0;
       HEAP32[$24>>2] = $47;
       HEAP32[$5>>2] = 0;
       $$0$i = $46;$49 = $47;$52 = 0;
      } else {
       $$pre$i75 = HEAP32[$24>>2]|0;
       $$pre11$i76 = HEAP32[$5>>2]|0;
       $$0$i = $34;$49 = $$pre$i75;$52 = $$pre11$i76;
      }
      $48 = $49 << $$0$i;
      $50 = (32 - ($$0$i))|0;
      $51 = $52 >>> $50;
      $53 = $51 | $48;
      HEAP32[$24>>2] = $53;
      $54 = $52 << $$0$i;
      HEAP32[$5>>2] = $54;
      $$1 = 1;$56 = $54;
     }
    } while(0);
    $55 = $56 | 1;
    HEAP32[$5>>2] = $55;
    $57 = (($$06892) + ($2)|0);
    $58 = ($57>>>0)<($22>>>0);
    if ($58) {
     $$06793 = $$1;$$06892 = $57;$27 = $55;
    } else {
     $$067$lcssa = $$1;$$068$lcssa = $57;
     break;
    }
   }
  } else {
   $$067$lcssa = 1;$$068$lcssa = $0;
  }
  _trinkle($$068$lcssa,$2,$3,$5,$$067$lcssa,0,$4);
  $59 = ((($5)) + 4|0);
  $60 = ($$067$lcssa|0)==(1);
  $61 = HEAP32[$5>>2]|0;
  $62 = ($61|0)==(1);
  $or$cond106 = $60 & $62;
  $63 = HEAP32[$59>>2]|0;
  $64 = ($63|0)==(0);
  $or$cond97107 = $or$cond106 & $64;
  if (!($or$cond97107)) {
   $$169108 = $$068$lcssa;$$2109 = $$067$lcssa;$123 = $64;$67 = $61;$76 = $63;
   while(1) {
    $65 = ($$2109|0)<(2);
    if ($65) {
     $66 = (($67) + -1)|0;
     $68 = ($66|0)==(0);
     do {
      if ($68) {
       $86 = 32;
       label = 28;
      } else {
       $69 = $66 & 1;
       $70 = ($69|0)==(0);
       if ($70) {
        $$068$i$i = $66;$$09$i$i = 0;
        while(1) {
         $71 = (($$09$i$i) + 1)|0;
         $72 = $$068$i$i >>> 1;
         $73 = $72 & 1;
         $74 = ($73|0)==(0);
         if ($74) {
          $$068$i$i = $72;$$09$i$i = $71;
         } else {
          $83 = $71;
          break;
         }
        }
       } else {
        if ($123) {
         $$07$i10$i$ph = 32;
        } else {
         $75 = $76 & 1;
         $77 = ($75|0)==(0);
         if ($77) {
          $$068$i8$i = $76;$$09$i7$i = 0;
         } else {
          $$0$i88 = 0;$88 = $67;$91 = $76;$95 = 0;
          break;
         }
         while(1) {
          $78 = (($$09$i7$i) + 1)|0;
          $79 = $$068$i8$i >>> 1;
          $80 = $79 & 1;
          $81 = ($80|0)==(0);
          if ($81) {
           $$068$i8$i = $79;$$09$i7$i = $78;
          } else {
           $$07$i10$i$ph = $78;
           break;
          }
         }
        }
        $82 = (($$07$i10$i$ph) + 32)|0;
        $83 = $82;
       }
       $84 = ($83>>>0)>(31);
       if ($84) {
        $86 = $83;
        label = 28;
       } else {
        $$0$i88 = $83;$88 = $67;$91 = $76;$95 = $83;
       }
      }
     } while(0);
     if ((label|0) == 28) {
      label = 0;
      $85 = (($86) + -32)|0;
      HEAP32[$5>>2] = $76;
      HEAP32[$24>>2] = 0;
      $$0$i88 = $85;$88 = $76;$91 = 0;$95 = $86;
     }
     $87 = $88 >>> $$0$i88;
     $89 = (32 - ($$0$i88))|0;
     $90 = $91 << $89;
     $92 = $90 | $87;
     HEAP32[$5>>2] = $92;
     $93 = $91 >>> $$0$i88;
     HEAP32[$24>>2] = $93;
     $94 = (($95) + ($$2109))|0;
     $$pre = (($$169108) + ($12)|0);
     $$169$be = $$pre;$$2$be = $94;
    } else {
     $96 = $76 << 2;
     $97 = $67 >>> 30;
     $98 = $97 | $96;
     $99 = (($$2109) + -2)|0;
     $100 = $67 << 1;
     $101 = $100 & 2147483646;
     $102 = $97 << 31;
     $103 = $101 | $102;
     $104 = $103 ^ 3;
     HEAP32[$5>>2] = $104;
     $105 = $98 >>> 1;
     HEAP32[$24>>2] = $105;
     $106 = (($4) + ($99<<2)|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = (0 - ($107))|0;
     $109 = (($$169108) + ($108)|0);
     $110 = (($109) + ($12)|0);
     $111 = (($$2109) + -1)|0;
     _trinkle($110,$2,$3,$5,$111,1,$4);
     $$pre$i73 = HEAP32[$24>>2]|0;
     $$pre11$i74 = HEAP32[$5>>2]|0;
     $112 = $$pre$i73 << 1;
     $113 = $$pre11$i74 >>> 31;
     $114 = $113 | $112;
     HEAP32[$24>>2] = $114;
     $115 = $$pre11$i74 << 1;
     $116 = $115 | 1;
     HEAP32[$5>>2] = $116;
     $117 = (($$169108) + ($12)|0);
     _trinkle($117,$2,$3,$5,$99,1,$4);
     $$169$be = $117;$$2$be = $99;
    }
    $118 = ($$2$be|0)==(1);
    $119 = HEAP32[$5>>2]|0;
    $120 = ($119|0)==(1);
    $or$cond = $118 & $120;
    $121 = HEAP32[$59>>2]|0;
    $122 = ($121|0)==(0);
    $or$cond97 = $or$cond & $122;
    if ($or$cond97) {
     break;
    } else {
     $$169108 = $$169$be;$$2109 = $$2$be;$123 = $122;$67 = $119;$76 = $121;
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _sift($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$029$be = 0, $$02932 = 0, $$030$be = 0, $$03031 = 0, $$033 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $5 = sp;
 HEAP32[$5>>2] = $0;
 $6 = ($3|0)>(1);
 L1: do {
  if ($6) {
   $7 = (0 - ($1))|0;
   $$02932 = $0;$$03031 = $3;$$033 = 1;$14 = $0;
   while(1) {
    $8 = (($$02932) + ($7)|0);
    $9 = (($$03031) + -2)|0;
    $10 = (($4) + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (0 - ($11))|0;
    $13 = (($8) + ($12)|0);
    $15 = (FUNCTION_TABLE_iii[$2 & 63]($14,$13)|0);
    $16 = ($15|0)>(-1);
    if ($16) {
     $17 = (FUNCTION_TABLE_iii[$2 & 63]($14,$8)|0);
     $18 = ($17|0)>(-1);
     if ($18) {
      $$0$lcssa = $$033;
      break L1;
     }
    }
    $19 = (FUNCTION_TABLE_iii[$2 & 63]($13,$8)|0);
    $20 = ($19|0)>(-1);
    $21 = (($$033) + 1)|0;
    $22 = (($5) + ($$033<<2)|0);
    if ($20) {
     HEAP32[$22>>2] = $13;
     $23 = (($$03031) + -1)|0;
     $$029$be = $13;$$030$be = $23;
    } else {
     HEAP32[$22>>2] = $8;
     $$029$be = $8;$$030$be = $9;
    }
    $24 = ($$030$be|0)>(1);
    if (!($24)) {
     $$0$lcssa = $21;
     break L1;
    }
    $$pre = HEAP32[$5>>2]|0;
    $$02932 = $$029$be;$$03031 = $$030$be;$$033 = $21;$14 = $$pre;
   }
  } else {
   $$0$lcssa = 1;
  }
 } while(0);
 _cycle($1,$5,$$0$lcssa);
 STACKTOP = sp;return;
}
function _trinkle($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0$i = 0, $$0$lcssa = 0, $$0$lcssa84 = 0, $$045$lcssa = 0, $$045$lcssa83 = 0, $$0456196 = 0, $$046$lcssa = 0, $$046$lcssa82 = 0, $$0466097 = 0, $$047$lcssa = 0, $$0475998 = 0, $$06295 = 0, $$06295$phi = 0, $$068$i$i = 0, $$068$i8$i = 0, $$07$i10$i$ph = 0, $$09$i$i = 0, $$09$i7$i = 0, $$pre = 0, $$sroa$0$05899 = 0;
 var $$sroa$8$056100 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $7 = sp;
 $8 = HEAP32[$3>>2]|0;
 $9 = ((($3)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $0;
 $11 = (0 - ($1))|0;
 $12 = ($8|0)!=(1);
 $13 = ($10|0)!=(0);
 $14 = $13 | $12;
 L1: do {
  if ($14) {
   $15 = (($6) + ($4<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (0 - ($16))|0;
   $18 = (($0) + ($17)|0);
   $19 = (FUNCTION_TABLE_iii[$2 & 63]($18,$0)|0);
   $20 = ($19|0)<(1);
   if ($20) {
    $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
    label = 18;
   } else {
    $phitmp = ($5|0)==(0);
    $$0456196 = 1;$$0466097 = $4;$$0475998 = $phitmp;$$06295 = $0;$$sroa$0$05899 = $8;$$sroa$8$056100 = $10;$26 = $18;
    while(1) {
     $21 = ($$0466097|0)>(1);
     $or$cond = $$0475998 & $21;
     if ($or$cond) {
      $22 = (($$06295) + ($11)|0);
      $23 = (($$0466097) + -2)|0;
      $24 = (($6) + ($23<<2)|0);
      $25 = HEAP32[$24>>2]|0;
      $27 = (FUNCTION_TABLE_iii[$2 & 63]($22,$26)|0);
      $28 = ($27|0)>(-1);
      if ($28) {
       $$0$lcssa84 = $$06295;$$045$lcssa83 = $$0456196;$$046$lcssa82 = $$0466097;
       label = 19;
       break L1;
      }
      $29 = (0 - ($25))|0;
      $30 = (($22) + ($29)|0);
      $31 = (FUNCTION_TABLE_iii[$2 & 63]($30,$26)|0);
      $32 = ($31|0)>(-1);
      if ($32) {
       $$0$lcssa84 = $$06295;$$045$lcssa83 = $$0456196;$$046$lcssa82 = $$0466097;
       label = 19;
       break L1;
      }
     }
     $33 = (($$0456196) + 1)|0;
     $34 = (($7) + ($$0456196<<2)|0);
     HEAP32[$34>>2] = $26;
     $35 = (($$sroa$0$05899) + -1)|0;
     $36 = ($35|0)==(0);
     do {
      if ($36) {
       $73 = 0;$74 = 32;
       label = 15;
      } else {
       $37 = $35 & 1;
       $38 = ($37|0)==(0);
       if ($38) {
        $$068$i$i = $35;$$09$i$i = 0;
        while(1) {
         $39 = (($$09$i$i) + 1)|0;
         $40 = $$068$i$i >>> 1;
         $41 = $40 & 1;
         $42 = ($41|0)==(0);
         if ($42) {
          $$068$i$i = $40;$$09$i$i = $39;
         } else {
          $51 = $39;
          break;
         }
        }
       } else {
        $43 = ($$sroa$8$056100|0)==(0);
        if ($43) {
         $$07$i10$i$ph = 32;
        } else {
         $44 = $$sroa$8$056100 & 1;
         $45 = ($44|0)==(0);
         if ($45) {
          $$068$i8$i = $$sroa$8$056100;$$09$i7$i = 0;
         } else {
          $$0$i = 0;$55 = $$sroa$0$05899;$58 = $$sroa$8$056100;$62 = 0;
          break;
         }
         while(1) {
          $46 = (($$09$i7$i) + 1)|0;
          $47 = $$068$i8$i >>> 1;
          $48 = $47 & 1;
          $49 = ($48|0)==(0);
          if ($49) {
           $$068$i8$i = $47;$$09$i7$i = $46;
          } else {
           $$07$i10$i$ph = $46;
           break;
          }
         }
        }
        $50 = (($$07$i10$i$ph) + 32)|0;
        $51 = $50;
       }
       $52 = ($51>>>0)>(31);
       $53 = (($51) + -32)|0;
       if ($52) {
        $73 = $53;$74 = $51;
        label = 15;
       } else {
        $$0$i = $51;$55 = $$sroa$0$05899;$58 = $$sroa$8$056100;$62 = $51;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      label = 0;
      $$0$i = $73;$55 = $$sroa$8$056100;$58 = 0;$62 = $74;
     }
     $54 = $55 >>> $$0$i;
     $56 = (32 - ($$0$i))|0;
     $57 = $58 << $56;
     $59 = $57 | $54;
     $60 = $58 >>> $$0$i;
     $61 = (($62) + ($$0466097))|0;
     $63 = ($59|0)!=(1);
     $64 = ($60|0)!=(0);
     $65 = $64 | $63;
     if (!($65)) {
      $$0$lcssa84 = $26;$$045$lcssa83 = $33;$$046$lcssa82 = $61;
      label = 19;
      break L1;
     }
     $$pre = HEAP32[$7>>2]|0;
     $66 = (($6) + ($61<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (0 - ($67))|0;
     $69 = (($26) + ($68)|0);
     $70 = (FUNCTION_TABLE_iii[$2 & 63]($69,$$pre)|0);
     $71 = ($70|0)<(1);
     if ($71) {
      $$0$lcssa = $26;$$045$lcssa = $33;$$046$lcssa = $61;$$047$lcssa = 0;
      label = 18;
      break;
     } else {
      $$06295$phi = $26;$$0456196 = $33;$$0466097 = $61;$$0475998 = 1;$$sroa$0$05899 = $59;$$sroa$8$056100 = $60;$26 = $69;$$06295 = $$06295$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
   label = 18;
  }
 } while(0);
 if ((label|0) == 18) {
  $72 = ($$047$lcssa|0)==(0);
  if ($72) {
   $$0$lcssa84 = $$0$lcssa;$$045$lcssa83 = $$045$lcssa;$$046$lcssa82 = $$046$lcssa;
   label = 19;
  }
 }
 if ((label|0) == 19) {
  _cycle($1,$7,$$045$lcssa83);
  _sift($$0$lcssa84,$1,$2,$$046$lcssa82,$6);
 }
 STACKTOP = sp;return;
}
function _cycle($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02527 = 0, $$026 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $3 = sp;
 $4 = ($2|0)<(2);
 L1: do {
  if (!($4)) {
   $5 = (($1) + ($2<<2)|0);
   HEAP32[$5>>2] = $3;
   $6 = ($0|0)==(0);
   if (!($6)) {
    $$02527 = $0;$10 = $3;
    while(1) {
     $7 = ($$02527>>>0)>(256);
     $8 = $7 ? 256 : $$02527;
     $9 = HEAP32[$1>>2]|0;
     _memcpy(($10|0),($9|0),($8|0))|0;
     $$026 = 0;
     while(1) {
      $11 = (($1) + ($$026<<2)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (($$026) + 1)|0;
      $14 = (($1) + ($13<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      _memcpy(($12|0),($15|0),($8|0))|0;
      $16 = HEAP32[$11>>2]|0;
      $17 = (($16) + ($8)|0);
      HEAP32[$11>>2] = $17;
      $exitcond = ($13|0)==($2|0);
      if ($exitcond) {
       break;
      } else {
       $$026 = $13;
      }
     }
     $18 = (($$02527) - ($8))|0;
     $19 = ($18|0)==(0);
     if ($19) {
      break L1;
     }
     $$pre = HEAP32[$5>>2]|0;
     $$02527 = $18;$10 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$0340$i = 0, $$$0345$i = 0, $$$0380$i = 0, $$$0396$i = 0, $$$5350$i = 0, $$$5385$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107163 = 0, $$0113 = 0, $$0114 = 0.0, $$0133$i = 0, $$0142$i = 0, $$0146$i = 0, $$0148$i = 0, $$0151$i = 0.0;
 var $$0152$i = 0.0, $$0155$i = 0.0, $$0159$i = 0, $$0166$i = 0, $$0166169$i = 0, $$0166170$i = 0, $$0324$i = 0, $$0327480$i = 0, $$0328$i = 0, $$0329$i = 0, $$0331476$i = 0, $$0335486$i = 0, $$0336$lcssa$i = 0, $$0336453$i = 0, $$0336454$i = 0, $$0336455$i = 0, $$0336503$i = 0, $$0340$lcssa$i = 0, $$0340457$i = 0, $$0340458$i = 0;
 var $$0340459$i = 0, $$0340502$i = 0, $$0345$lcssa545$i = 0, $$0345484$i = 0, $$0355$i = 0.0, $$0356$i = 0.0, $$0360474$i = 0.0, $$0364$i = 0, $$0367$i = 0, $$0375$i = 0, $$0375$ph$i = 0, $$0380$lcssa544$i = 0, $$0380483$i = 0, $$0388$i = 0, $$0391$i = 0, $$0396$lcssa$i = 0, $$0396463$i = 0, $$0396464$i = 0, $$0396465$i = 0, $$0396499$i = 0;
 var $$1$i = 0.0, $$1$lcssa = 0, $$1$ph$i = 0, $$10$i = 0, $$1108 = 0, $$1147$i = 0, $$1149$i = 0, $$1153$i = 0.0, $$1156$i = 0.0, $$1160$i = 0, $$1164 = 0, $$1325$be$i = 0, $$1325$ph$i = 0, $$1330$i = 0, $$1332$i = 0, $$1357$i = 0.0, $$1361$i = 0.0, $$1365$i = 0, $$1368$i = 0, $$1368$ph438$i = 0;
 var $$1376$i = 0, $$1376$ph$i = 0, $$1376$ph549$i = 0, $$1389$lcssa$i = 0, $$1389501$i = 0, $$2 = 0, $$2$i = 0, $$2$i117 = 0, $$2$lcssa$i = 0, $$2109161 = 0, $$2144$i = 0, $$2150$i = 0, $$2154$i = 0.0, $$2157$i = 0.0, $$2161$i = 0, $$2338$i = 0, $$2342$i = 0, $$2347$ph439$i = 0, $$2362$i = 0.0, $$2366$i = 0;
 var $$2369$i = 0, $$2382$ph437$i = 0, $$2390$i = 0, $$2393$i = 0, $$2398$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3110 = 0, $$3145$i = 0, $$3158$lcssa$i = 0.0, $$3158179$i = 0.0, $$3162 = 0, $$3162$lcssa$i = 0, $$3162183$i = 0, $$3339493$i = 0, $$3343$i = 0, $$3359$i = 0.0, $$3363$i = 0.0, $$3370$i = 0, $$3378$i = 0;
 var $$3394$lcssa$i = 0, $$3394500$i = 0, $$3504$i = 0, $$4 = 0, $$4$i = 0.0, $$408$i = 0, $$4111 = 0, $$416$i = 0, $$4163$lcssa$i = 0, $$4163178$i = 0, $$4344485$i = 0, $$4349$i = 0, $$4349$ph$i = 0, $$4349$ph550$i = 0, $$4371$i = 0, $$4379$i = 0, $$4384$ph$i = 0, $$4384$ph435$i = 0, $$4395$i = 0, $$4475$i = 0;
 var $$5 = 0, $$5$$2369$i = 0, $$5$i = 0.0, $$5$i121 = 0, $$5$in$i = 0, $$5164$i = 0, $$5350478$i = 0, $$5385477$i = 0, $$6 = 0, $$6$i = 0, $$6373$ph$i = 0, $$6479$i = 0, $$9473$i = 0, $$in = 0, $$neg432$i = 0, $$neg433$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i119 = 0;
 var $$pre$phi202$iZ2D = 0.0, $$pre201$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0;
 var $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0;
 var $313 = 0.0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0.0, $457 = 0.0;
 var $458 = 0.0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0.0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0, $504 = 0, $505 = 0, $506 = 0.0, $507 = 0.0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0.0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0.0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0.0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0.0, $63 = 0, $630 = 0, $631 = 0, $632 = 0.0, $633 = 0.0, $634 = 0, $635 = 0.0, $636 = 0.0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0.0, $664 = 0.0, $665 = 0, $666 = 0, $667 = 0, $668 = 0.0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0;
 var $674 = 0.0, $675 = 0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0.0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond$i = 0, $exitcond$i = 0;
 var $exitcond541$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i118 = 0, $or$cond168$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond410$i = 0, $or$cond412$i = 0, $or$cond413$i = 0, $or$cond414$i = 0, $or$cond417$i = 0, $or$cond418$i = 0, $or$cond5 = 0, $or$cond571$i = 0, $or$cond6$i = 0, $or$cond6$i122 = 0, $or$cond7 = 0, $or$cond9 = 0, $or$cond9$i = 0;
 var $storemerge$i = 0, $sum$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $3 = sp;
 switch ($1|0) {
 case 0:  {
  $$0105$ph = -149;$$0106$ph = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 default: {
  $$0114 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $4 = ((($0)) + 4|0);
   $5 = ((($0)) + 100|0);
   while(1) {
    $6 = HEAP32[$4>>2]|0;
    $7 = HEAP32[$5>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$4>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($0)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     break;
    }
   }
   $16 = ($13|0)==(45);
   L13: do {
    switch ($13|0) {
    case 43: case 45:  {
     $17 = $16&1;
     $18 = $17 << 1;
     $19 = (1 - ($18))|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = HEAP32[$5>>2]|0;
     $22 = ($20>>>0)<($21>>>0);
     if ($22) {
      $23 = ((($20)) + 1|0);
      HEAP32[$4>>2] = $23;
      $24 = HEAP8[$20>>0]|0;
      $25 = $24&255;
      $$0 = $25;$$0113 = $19;
      break L13;
     } else {
      $26 = (___shgetc($0)|0);
      $$0 = $26;$$0113 = $19;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $13;$$0113 = 1;
    }
    }
   } while(0);
   $$0107163 = 0;$$1164 = $$0;
   while(1) {
    $27 = $$1164 | 32;
    $28 = (25774 + ($$0107163)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 << 24 >> 24;
    $31 = ($27|0)==($30|0);
    if (!($31)) {
     $$0107$lcssa = $$0107163;$$1$lcssa = $$1164;
     break;
    }
    $32 = ($$0107163>>>0)<(7);
    do {
     if ($32) {
      $33 = HEAP32[$4>>2]|0;
      $34 = HEAP32[$5>>2]|0;
      $35 = ($33>>>0)<($34>>>0);
      if ($35) {
       $36 = ((($33)) + 1|0);
       HEAP32[$4>>2] = $36;
       $37 = HEAP8[$33>>0]|0;
       $38 = $37&255;
       $$2 = $38;
       break;
      } else {
       $39 = (___shgetc($0)|0);
       $$2 = $39;
       break;
      }
     } else {
      $$2 = $$1164;
     }
    } while(0);
    $40 = (($$0107163) + 1)|0;
    $41 = ($40>>>0)<(8);
    if ($41) {
     $$0107163 = $40;$$1164 = $$2;
    } else {
     $$0107$lcssa = $40;$$1$lcssa = $$2;
     break;
    }
   }
   L29: do {
    switch ($$0107$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $42 = ($$0107$lcssa>>>0)>(3);
     $43 = ($2|0)!=(0);
     $or$cond5 = $43 & $42;
     if ($or$cond5) {
      $44 = ($$0107$lcssa|0)==(8);
      if ($44) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $57 = ($$0107$lcssa|0)==(0);
     L34: do {
      if ($57) {
       $$2109161 = 0;$$3162 = $$1$lcssa;
       while(1) {
        $58 = $$3162 | 32;
        $59 = (25783 + ($$2109161)|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = $60 << 24 >> 24;
        $62 = ($58|0)==($61|0);
        if (!($62)) {
         $$3110 = $$2109161;$$5 = $$3162;
         break L34;
        }
        $63 = ($$2109161>>>0)<(2);
        do {
         if ($63) {
          $64 = HEAP32[$4>>2]|0;
          $65 = HEAP32[$5>>2]|0;
          $66 = ($64>>>0)<($65>>>0);
          if ($66) {
           $67 = ((($64)) + 1|0);
           HEAP32[$4>>2] = $67;
           $68 = HEAP8[$64>>0]|0;
           $69 = $68&255;
           $$4 = $69;
           break;
          } else {
           $70 = (___shgetc($0)|0);
           $$4 = $70;
           break;
          }
         } else {
          $$4 = $$3162;
         }
        } while(0);
        $71 = (($$2109161) + 1)|0;
        $72 = ($71>>>0)<(3);
        if ($72) {
         $$2109161 = $71;$$3162 = $$4;
        } else {
         $$3110 = $71;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3110 = $$0107$lcssa;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3110|0) {
     case 3:  {
      $73 = HEAP32[$4>>2]|0;
      $74 = HEAP32[$5>>2]|0;
      $75 = ($73>>>0)<($74>>>0);
      if ($75) {
       $76 = ((($73)) + 1|0);
       HEAP32[$4>>2] = $76;
       $77 = HEAP8[$73>>0]|0;
       $78 = $77&255;
       $80 = $78;
      } else {
       $79 = (___shgetc($0)|0);
       $80 = $79;
      }
      $81 = ($80|0)==(40);
      if ($81) {
       $$4111 = 1;
      } else {
       $82 = HEAP32[$5>>2]|0;
       $83 = ($82|0)==(0|0);
       if ($83) {
        $$0114 = nan;
        break L4;
       }
       $84 = HEAP32[$4>>2]|0;
       $85 = ((($84)) + -1|0);
       HEAP32[$4>>2] = $85;
       $$0114 = nan;
       break L4;
      }
      while(1) {
       $86 = HEAP32[$4>>2]|0;
       $87 = HEAP32[$5>>2]|0;
       $88 = ($86>>>0)<($87>>>0);
       if ($88) {
        $89 = ((($86)) + 1|0);
        HEAP32[$4>>2] = $89;
        $90 = HEAP8[$86>>0]|0;
        $91 = $90&255;
        $94 = $91;
       } else {
        $92 = (___shgetc($0)|0);
        $94 = $92;
       }
       $93 = (($94) + -48)|0;
       $95 = ($93>>>0)<(10);
       $96 = (($94) + -65)|0;
       $97 = ($96>>>0)<(26);
       $or$cond = $95 | $97;
       if (!($or$cond)) {
        $98 = (($94) + -97)|0;
        $99 = ($98>>>0)<(26);
        $100 = ($94|0)==(95);
        $or$cond7 = $100 | $99;
        if (!($or$cond7)) {
         break;
        }
       }
       $112 = (($$4111) + 1)|0;
       $$4111 = $112;
      }
      $101 = ($94|0)==(41);
      if ($101) {
       $$0114 = nan;
       break L4;
      }
      $102 = HEAP32[$5>>2]|0;
      $103 = ($102|0)==(0|0);
      if (!($103)) {
       $104 = HEAP32[$4>>2]|0;
       $105 = ((($104)) + -1|0);
       HEAP32[$4>>2] = $105;
      }
      if (!($43)) {
       $107 = (___errno_location()|0);
       HEAP32[$107>>2] = 22;
       ___shlim($0,0);
       $$0114 = 0.0;
       break L4;
      }
      $106 = ($$4111|0)==(0);
      if ($106) {
       $$0114 = nan;
       break L4;
      } else {
       $$in = $$4111;
      }
      while(1) {
       $108 = (($$in) + -1)|0;
       if (!($103)) {
        $109 = HEAP32[$4>>2]|0;
        $110 = ((($109)) + -1|0);
        HEAP32[$4>>2] = $110;
       }
       $111 = ($108|0)==(0);
       if ($111) {
        $$0114 = nan;
        break L4;
       } else {
        $$in = $108;
       }
      }
      break;
     }
     case 0:  {
      $118 = ($$5|0)==(48);
      do {
       if ($118) {
        $119 = HEAP32[$4>>2]|0;
        $120 = HEAP32[$5>>2]|0;
        $121 = ($119>>>0)<($120>>>0);
        if ($121) {
         $122 = ((($119)) + 1|0);
         HEAP32[$4>>2] = $122;
         $123 = HEAP8[$119>>0]|0;
         $124 = $123&255;
         $127 = $124;
        } else {
         $125 = (___shgetc($0)|0);
         $127 = $125;
        }
        $126 = $127 | 32;
        $128 = ($126|0)==(120);
        if (!($128)) {
         $329 = HEAP32[$5>>2]|0;
         $330 = ($329|0)==(0|0);
         if ($330) {
          $$6 = 48;
          break;
         }
         $331 = HEAP32[$4>>2]|0;
         $332 = ((($331)) + -1|0);
         HEAP32[$4>>2] = $332;
         $$6 = 48;
         break;
        }
        $129 = HEAP32[$4>>2]|0;
        $130 = HEAP32[$5>>2]|0;
        $131 = ($129>>>0)<($130>>>0);
        if ($131) {
         $132 = ((($129)) + 1|0);
         HEAP32[$4>>2] = $132;
         $133 = HEAP8[$129>>0]|0;
         $134 = $133&255;
         $$0$i = $134;$$0142$i = 0;
        } else {
         $135 = (___shgetc($0)|0);
         $$0$i = $135;$$0142$i = 0;
        }
        L94: while(1) {
         switch ($$0$i|0) {
         case 46:  {
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $$0146$i = 0;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $$0$i;$$2144$i = $$0142$i;$172 = 0;$174 = 0;$216 = 0;$218 = 0;
          break L94;
         }
         }
         $136 = HEAP32[$4>>2]|0;
         $137 = HEAP32[$5>>2]|0;
         $138 = ($136>>>0)<($137>>>0);
         if ($138) {
          $139 = ((($136)) + 1|0);
          HEAP32[$4>>2] = $139;
          $140 = HEAP8[$136>>0]|0;
          $141 = $140&255;
          $$0$i = $141;$$0142$i = 1;
          continue;
         } else {
          $142 = (___shgetc($0)|0);
          $$0$i = $142;$$0142$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $143 = HEAP32[$4>>2]|0;
         $144 = HEAP32[$5>>2]|0;
         $145 = ($143>>>0)<($144>>>0);
         if ($145) {
          $146 = ((($143)) + 1|0);
          HEAP32[$4>>2] = $146;
          $147 = HEAP8[$143>>0]|0;
          $148 = $147&255;
          $$1$ph$i = $148;
         } else {
          $149 = (___shgetc($0)|0);
          $$1$ph$i = $149;
         }
         $150 = ($$1$ph$i|0)==(48);
         if ($150) {
          $158 = 0;$159 = 0;
          while(1) {
           $151 = HEAP32[$4>>2]|0;
           $152 = HEAP32[$5>>2]|0;
           $153 = ($151>>>0)<($152>>>0);
           if ($153) {
            $154 = ((($151)) + 1|0);
            HEAP32[$4>>2] = $154;
            $155 = HEAP8[$151>>0]|0;
            $156 = $155&255;
            $162 = $156;
           } else {
            $157 = (___shgetc($0)|0);
            $162 = $157;
           }
           $160 = (_i64Add(($158|0),($159|0),-1,-1)|0);
           $161 = tempRet0;
           $163 = ($162|0)==(48);
           if ($163) {
            $158 = $160;$159 = $161;
           } else {
            $$0146$i = 1;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $162;$$2144$i = 1;$172 = 0;$174 = 0;$216 = $160;$218 = $161;
            break;
           }
          }
         } else {
          $$0146$i = 1;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $$1$ph$i;$$2144$i = $$0142$i;$172 = 0;$174 = 0;$216 = 0;$218 = 0;
         }
        }
        while(1) {
         $164 = (($$2$i) + -48)|0;
         $165 = ($164>>>0)<(10);
         $$pre$i = $$2$i | 32;
         if ($165) {
          label = 86;
         } else {
          $166 = (($$pre$i) + -97)|0;
          $167 = ($166>>>0)<(6);
          $168 = ($$2$i|0)==(46);
          $or$cond6$i = $168 | $167;
          if (!($or$cond6$i)) {
           $$2$lcssa$i = $$2$i;
           break;
          }
          if ($168) {
           $169 = ($$0146$i|0)==(0);
           if ($169) {
            $$1147$i = 1;$$2150$i = $$0148$i;$$2154$i = $$0152$i;$$2157$i = $$0155$i;$$2161$i = $$0159$i;$$3145$i = $$2144$i;$693 = $174;$694 = $172;$695 = $174;$696 = $172;
           } else {
            $$2$lcssa$i = 46;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $170 = ($$2$i|0)>(57);
          $171 = (($$pre$i) + -87)|0;
          $$0133$i = $170 ? $171 : $164;
          $173 = ($172|0)<(0);
          $175 = ($174>>>0)<(8);
          $176 = ($172|0)==(0);
          $177 = $176 & $175;
          $178 = $173 | $177;
          do {
           if ($178) {
            $179 = $$0159$i << 4;
            $180 = (($$0133$i) + ($179))|0;
            $$1149$i = $$0148$i;$$1153$i = $$0152$i;$$1156$i = $$0155$i;$$1160$i = $180;
           } else {
            $181 = ($172|0)<(0);
            $182 = ($174>>>0)<(14);
            $183 = ($172|0)==(0);
            $184 = $183 & $182;
            $185 = $181 | $184;
            if ($185) {
             $186 = (+($$0133$i|0));
             $187 = $$0152$i * 0.0625;
             $188 = $187 * $186;
             $189 = $$0155$i + $188;
             $$1149$i = $$0148$i;$$1153$i = $187;$$1156$i = $189;$$1160$i = $$0159$i;
             break;
            }
            $190 = ($$0133$i|0)==(0);
            $191 = ($$0148$i|0)!=(0);
            $or$cond$i = $191 | $190;
            if ($or$cond$i) {
             $$1149$i = $$0148$i;$$1153$i = $$0152$i;$$1156$i = $$0155$i;$$1160$i = $$0159$i;
            } else {
             $192 = $$0152$i * 0.5;
             $193 = $$0155$i + $192;
             $$1149$i = 1;$$1153$i = $$0152$i;$$1156$i = $193;$$1160$i = $$0159$i;
            }
           }
          } while(0);
          $194 = (_i64Add(($174|0),($172|0),1,0)|0);
          $195 = tempRet0;
          $$1147$i = $$0146$i;$$2150$i = $$1149$i;$$2154$i = $$1153$i;$$2157$i = $$1156$i;$$2161$i = $$1160$i;$$3145$i = 1;$693 = $216;$694 = $218;$695 = $194;$696 = $195;
         }
         $196 = HEAP32[$4>>2]|0;
         $197 = HEAP32[$5>>2]|0;
         $198 = ($196>>>0)<($197>>>0);
         if ($198) {
          $199 = ((($196)) + 1|0);
          HEAP32[$4>>2] = $199;
          $200 = HEAP8[$196>>0]|0;
          $201 = $200&255;
          $$0146$i = $$1147$i;$$0148$i = $$2150$i;$$0152$i = $$2154$i;$$0155$i = $$2157$i;$$0159$i = $$2161$i;$$2$i = $201;$$2144$i = $$3145$i;$172 = $696;$174 = $695;$216 = $693;$218 = $694;
          continue;
         } else {
          $202 = (___shgetc($0)|0);
          $$0146$i = $$1147$i;$$0148$i = $$2150$i;$$0152$i = $$2154$i;$$0155$i = $$2157$i;$$0159$i = $$2161$i;$$2$i = $202;$$2144$i = $$3145$i;$172 = $696;$174 = $695;$216 = $693;$218 = $694;
          continue;
         }
        }
        $203 = ($$2144$i|0)==(0);
        if ($203) {
         $204 = HEAP32[$5>>2]|0;
         $205 = ($204|0)==(0|0);
         if (!($205)) {
          $206 = HEAP32[$4>>2]|0;
          $207 = ((($206)) + -1|0);
          HEAP32[$4>>2] = $207;
         }
         $208 = ($2|0)==(0);
         if ($208) {
          ___shlim($0,0);
         } else {
          if (!($205)) {
           $209 = HEAP32[$4>>2]|0;
           $210 = ((($209)) + -1|0);
           HEAP32[$4>>2] = $210;
           $211 = ($$0146$i|0)==(0);
           if (!($211)) {
            $212 = ((($209)) + -2|0);
            HEAP32[$4>>2] = $212;
           }
          }
         }
         $213 = (+($$0113|0));
         $214 = $213 * 0.0;
         $$0114 = $214;
         break L4;
        }
        $215 = ($$0146$i|0)==(0);
        $217 = $215 ? $174 : $216;
        $219 = $215 ? $172 : $218;
        $220 = ($172|0)<(0);
        $221 = ($174>>>0)<(8);
        $222 = ($172|0)==(0);
        $223 = $222 & $221;
        $224 = $220 | $223;
        if ($224) {
         $$3162183$i = $$0159$i;$226 = $174;$227 = $172;
         while(1) {
          $225 = $$3162183$i << 4;
          $228 = (_i64Add(($226|0),($227|0),1,0)|0);
          $229 = tempRet0;
          $230 = ($229|0)<(0);
          $231 = ($228>>>0)<(8);
          $232 = ($229|0)==(0);
          $233 = $232 & $231;
          $234 = $230 | $233;
          if ($234) {
           $$3162183$i = $225;$226 = $228;$227 = $229;
          } else {
           $$3162$lcssa$i = $225;
           break;
          }
         }
        } else {
         $$3162$lcssa$i = $$0159$i;
        }
        $235 = $$2$lcssa$i | 32;
        $236 = ($235|0)==(112);
        if ($236) {
         $237 = (_scanexp($0,$2)|0);
         $238 = tempRet0;
         $239 = ($237|0)==(0);
         $240 = ($238|0)==(-2147483648);
         $241 = $239 & $240;
         if ($241) {
          $242 = ($2|0)==(0);
          if ($242) {
           ___shlim($0,0);
           $$0114 = 0.0;
           break L4;
          }
          $243 = HEAP32[$5>>2]|0;
          $244 = ($243|0)==(0|0);
          if ($244) {
           $255 = 0;$256 = 0;
          } else {
           $245 = HEAP32[$4>>2]|0;
           $246 = ((($245)) + -1|0);
           HEAP32[$4>>2] = $246;
           $255 = 0;$256 = 0;
          }
         } else {
          $255 = $237;$256 = $238;
         }
        } else {
         $247 = HEAP32[$5>>2]|0;
         $248 = ($247|0)==(0|0);
         if ($248) {
          $255 = 0;$256 = 0;
         } else {
          $249 = HEAP32[$4>>2]|0;
          $250 = ((($249)) + -1|0);
          HEAP32[$4>>2] = $250;
          $255 = 0;$256 = 0;
         }
        }
        $251 = (_bitshift64Shl(($217|0),($219|0),2)|0);
        $252 = tempRet0;
        $253 = (_i64Add(($251|0),($252|0),-32,-1)|0);
        $254 = tempRet0;
        $257 = (_i64Add(($253|0),($254|0),($255|0),($256|0))|0);
        $258 = tempRet0;
        $259 = ($$3162$lcssa$i|0)==(0);
        if ($259) {
         $260 = (+($$0113|0));
         $261 = $260 * 0.0;
         $$0114 = $261;
         break L4;
        }
        $262 = (0 - ($$0105$ph))|0;
        $263 = ($258|0)>(0);
        $264 = ($257>>>0)>($262>>>0);
        $265 = ($258|0)==(0);
        $266 = $265 & $264;
        $267 = $263 | $266;
        if ($267) {
         $268 = (___errno_location()|0);
         HEAP32[$268>>2] = 34;
         $269 = (+($$0113|0));
         $270 = $269 * 1.7976931348623157E+308;
         $271 = $270 * 1.7976931348623157E+308;
         $$0114 = $271;
         break L4;
        }
        $272 = (($$0105$ph) + -106)|0;
        $273 = ($272|0)<(0);
        $274 = $273 << 31 >> 31;
        $275 = ($258|0)<($274|0);
        $276 = ($257>>>0)<($272>>>0);
        $277 = ($258|0)==($274|0);
        $278 = $277 & $276;
        $279 = $275 | $278;
        if ($279) {
         $281 = (___errno_location()|0);
         HEAP32[$281>>2] = 34;
         $282 = (+($$0113|0));
         $283 = $282 * 2.2250738585072014E-308;
         $284 = $283 * 2.2250738585072014E-308;
         $$0114 = $284;
         break L4;
        }
        $280 = ($$3162$lcssa$i|0)>(-1);
        if ($280) {
         $$3158179$i = $$0155$i;$$4163178$i = $$3162$lcssa$i;$290 = $257;$291 = $258;
         while(1) {
          $285 = !($$3158179$i >= 0.5);
          $286 = $$4163178$i << 1;
          $287 = $$3158179$i + -1.0;
          $288 = $285&1;
          $289 = $288 | $286;
          $$5164$i = $289 ^ 1;
          $$pn$i = $285 ? $$3158179$i : $287;
          $$4$i = $$3158179$i + $$pn$i;
          $292 = (_i64Add(($290|0),($291|0),-1,-1)|0);
          $293 = tempRet0;
          $294 = ($289|0)>(-1);
          if ($294) {
           $$3158179$i = $$4$i;$$4163178$i = $$5164$i;$290 = $292;$291 = $293;
          } else {
           $$3158$lcssa$i = $$4$i;$$4163$lcssa$i = $$5164$i;$299 = $292;$300 = $293;
           break;
          }
         }
        } else {
         $$3158$lcssa$i = $$0155$i;$$4163$lcssa$i = $$3162$lcssa$i;$299 = $257;$300 = $258;
        }
        $295 = ($$0105$ph|0)<(0);
        $296 = $295 << 31 >> 31;
        $297 = (_i64Subtract(32,0,($$0105$ph|0),($296|0))|0);
        $298 = tempRet0;
        $301 = (_i64Add(($299|0),($300|0),($297|0),($298|0))|0);
        $302 = tempRet0;
        $303 = (0)>($302|0);
        $304 = ($$0106$ph>>>0)>($301>>>0);
        $305 = (0)==($302|0);
        $306 = $305 & $304;
        $307 = $303 | $306;
        if ($307) {
         $308 = ($301|0)<(0);
         if ($308) {
          $$0166170$i = 0;$311 = 84;
          label = 127;
         } else {
          $$0166$i = $301;
          label = 125;
         }
        } else {
         $$0166$i = $$0106$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $309 = ($$0166$i|0)<(53);
         $310 = (84 - ($$0166$i))|0;
         if ($309) {
          $$0166170$i = $$0166$i;$311 = $310;
          label = 127;
         } else {
          $$pre201$i = (+($$0113|0));
          $$0151$i = 0.0;$$0166169$i = $$0166$i;$$pre$phi202$iZ2D = $$pre201$i;
         }
        }
        if ((label|0) == 127) {
         $312 = (+_scalbn(1.0,$311));
         $313 = (+($$0113|0));
         $314 = (+_copysignl($312,$313));
         $$0151$i = $314;$$0166169$i = $$0166170$i;$$pre$phi202$iZ2D = $313;
        }
        $315 = ($$0166169$i|0)<(32);
        $316 = $$3158$lcssa$i != 0.0;
        $or$cond4$i = $316 & $315;
        $317 = $$4163$lcssa$i & 1;
        $318 = ($317|0)==(0);
        $or$cond168$i = $318 & $or$cond4$i;
        $319 = $or$cond168$i&1;
        $$6$i = (($319) + ($$4163$lcssa$i))|0;
        $$5$i = $or$cond168$i ? 0.0 : $$3158$lcssa$i;
        $320 = (+($$6$i>>>0));
        $321 = $$pre$phi202$iZ2D * $320;
        $322 = $$0151$i + $321;
        $323 = $$pre$phi202$iZ2D * $$5$i;
        $324 = $323 + $322;
        $325 = $324 - $$0151$i;
        $326 = $325 != 0.0;
        if (!($326)) {
         $327 = (___errno_location()|0);
         HEAP32[$327>>2] = 34;
        }
        $328 = (+_scalbnl($325,$299));
        $$0114 = $328;
        break L4;
       } else {
        $$6 = $$5;
       }
      } while(0);
      $sum$i = (($$0105$ph) + ($$0106$ph))|0;
      $333 = (0 - ($sum$i))|0;
      $$0324$i = $$6;$$0391$i = 0;
      L184: while(1) {
       switch ($$0324$i|0) {
       case 46:  {
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$0388$i = 0;$$2$i117 = $$0324$i;$$2393$i = $$0391$i;$697 = 0;$698 = 0;
        break L184;
       }
       }
       $334 = HEAP32[$4>>2]|0;
       $335 = HEAP32[$5>>2]|0;
       $336 = ($334>>>0)<($335>>>0);
       if ($336) {
        $337 = ((($334)) + 1|0);
        HEAP32[$4>>2] = $337;
        $338 = HEAP8[$334>>0]|0;
        $339 = $338&255;
        $$0324$i = $339;$$0391$i = 1;
        continue;
       } else {
        $340 = (___shgetc($0)|0);
        $$0324$i = $340;$$0391$i = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $341 = HEAP32[$4>>2]|0;
       $342 = HEAP32[$5>>2]|0;
       $343 = ($341>>>0)<($342>>>0);
       if ($343) {
        $344 = ((($341)) + 1|0);
        HEAP32[$4>>2] = $344;
        $345 = HEAP8[$341>>0]|0;
        $346 = $345&255;
        $$1325$ph$i = $346;
       } else {
        $347 = (___shgetc($0)|0);
        $$1325$ph$i = $347;
       }
       $348 = ($$1325$ph$i|0)==(48);
       if ($348) {
        $349 = 0;$350 = 0;
        while(1) {
         $351 = (_i64Add(($349|0),($350|0),-1,-1)|0);
         $352 = tempRet0;
         $353 = HEAP32[$4>>2]|0;
         $354 = HEAP32[$5>>2]|0;
         $355 = ($353>>>0)<($354>>>0);
         if ($355) {
          $356 = ((($353)) + 1|0);
          HEAP32[$4>>2] = $356;
          $357 = HEAP8[$353>>0]|0;
          $358 = $357&255;
          $$1325$be$i = $358;
         } else {
          $359 = (___shgetc($0)|0);
          $$1325$be$i = $359;
         }
         $360 = ($$1325$be$i|0)==(48);
         if ($360) {
          $349 = $351;$350 = $352;
         } else {
          $$0388$i = 1;$$2$i117 = $$1325$be$i;$$2393$i = 1;$697 = $351;$698 = $352;
          break;
         }
        }
       } else {
        $$0388$i = 1;$$2$i117 = $$1325$ph$i;$$2393$i = $$0391$i;$697 = 0;$698 = 0;
       }
      }
      HEAP32[$3>>2] = 0;
      $361 = (($$2$i117) + -48)|0;
      $362 = ($361>>>0)<(10);
      $363 = ($$2$i117|0)==(46);
      $364 = $363 | $362;
      L203: do {
       if ($364) {
        $365 = ((($3)) + 496|0);
        $$0336503$i = 0;$$0340502$i = 0;$$0396499$i = 0;$$1389501$i = $$0388$i;$$3394500$i = $$2393$i;$$3504$i = $$2$i117;$368 = 0;$369 = 0;$699 = $363;$700 = $361;$701 = $697;$702 = $698;
        L205: while(1) {
         do {
          if ($699) {
           $cond$i = ($$1389501$i|0)==(0);
           if ($cond$i) {
            $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = 1;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $368;$704 = $369;$705 = $368;$706 = $369;
           } else {
            break L205;
           }
          } else {
           $367 = ($$0340502$i|0)<(125);
           $370 = (_i64Add(($368|0),($369|0),1,0)|0);
           $371 = tempRet0;
           $372 = ($$3504$i|0)!=(48);
           if (!($367)) {
            if (!($372)) {
             $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = $$1389501$i;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
             break;
            }
            $382 = HEAP32[$365>>2]|0;
            $383 = $382 | 1;
            HEAP32[$365>>2] = $383;
            $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = $$1389501$i;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
            break;
           }
           $$$0396$i = $372 ? $370 : $$0396499$i;
           $373 = ($$0336503$i|0)==(0);
           $374 = (($3) + ($$0340502$i<<2)|0);
           if ($373) {
            $storemerge$i = $700;
           } else {
            $375 = (($$3504$i) + -48)|0;
            $376 = HEAP32[$374>>2]|0;
            $377 = ($376*10)|0;
            $378 = (($375) + ($377))|0;
            $storemerge$i = $378;
           }
           HEAP32[$374>>2] = $storemerge$i;
           $379 = (($$0336503$i) + 1)|0;
           $380 = ($379|0)==(9);
           $381 = $380&1;
           $$$0340$i = (($381) + ($$0340502$i))|0;
           $$408$i = $380 ? 0 : $379;
           $$2338$i = $$408$i;$$2342$i = $$$0340$i;$$2390$i = $$1389501$i;$$2398$i = $$$0396$i;$$4395$i = 1;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
          }
         } while(0);
         $384 = HEAP32[$4>>2]|0;
         $385 = HEAP32[$5>>2]|0;
         $386 = ($384>>>0)<($385>>>0);
         if ($386) {
          $387 = ((($384)) + 1|0);
          HEAP32[$4>>2] = $387;
          $388 = HEAP8[$384>>0]|0;
          $389 = $388&255;
          $$3$be$i = $389;
         } else {
          $390 = (___shgetc($0)|0);
          $$3$be$i = $390;
         }
         $391 = (($$3$be$i) + -48)|0;
         $392 = ($391>>>0)<(10);
         $393 = ($$3$be$i|0)==(46);
         $394 = $393 | $392;
         if ($394) {
          $$0336503$i = $$2338$i;$$0340502$i = $$2342$i;$$0396499$i = $$2398$i;$$1389501$i = $$2390$i;$$3394500$i = $$4395$i;$$3504$i = $$3$be$i;$368 = $705;$369 = $706;$699 = $393;$700 = $391;$701 = $703;$702 = $704;
         } else {
          $$0336$lcssa$i = $$2338$i;$$0340$lcssa$i = $$2342$i;$$0396$lcssa$i = $$2398$i;$$1389$lcssa$i = $$2390$i;$$3$lcssa$i = $$3$be$i;$$3394$lcssa$i = $$4395$i;$396 = $703;$397 = $705;$399 = $704;$400 = $706;
          label = 161;
          break L203;
         }
        }
        $366 = ($$3394500$i|0)!=(0);
        $$0336455$i = $$0336503$i;$$0340459$i = $$0340502$i;$$0396465$i = $$0396499$i;$707 = $368;$708 = $369;$709 = $701;$710 = $702;$711 = $366;
        label = 169;
       } else {
        $$0336$lcssa$i = 0;$$0340$lcssa$i = 0;$$0396$lcssa$i = 0;$$1389$lcssa$i = $$0388$i;$$3$lcssa$i = $$2$i117;$$3394$lcssa$i = $$2393$i;$396 = $697;$397 = 0;$399 = $698;$400 = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $395 = ($$1389$lcssa$i|0)==(0);
        $398 = $395 ? $397 : $396;
        $401 = $395 ? $400 : $399;
        $402 = ($$3394$lcssa$i|0)!=(0);
        $403 = $$3$lcssa$i | 32;
        $404 = ($403|0)==(101);
        $or$cond410$i = $402 & $404;
        if (!($or$cond410$i)) {
         $419 = ($$3$lcssa$i|0)>(-1);
         if ($419) {
          $$0336455$i = $$0336$lcssa$i;$$0340459$i = $$0340$lcssa$i;$$0396465$i = $$0396$lcssa$i;$707 = $397;$708 = $400;$709 = $398;$710 = $401;$711 = $402;
          label = 169;
          break;
         } else {
          $$0336454$i = $$0336$lcssa$i;$$0340458$i = $$0340$lcssa$i;$$0396464$i = $$0396$lcssa$i;$712 = $397;$713 = $400;$714 = $402;$715 = $398;$716 = $401;
          label = 171;
          break;
         }
        }
        $405 = (_scanexp($0,$2)|0);
        $406 = tempRet0;
        $407 = ($405|0)==(0);
        $408 = ($406|0)==(-2147483648);
        $409 = $407 & $408;
        if ($409) {
         $410 = ($2|0)==(0);
         if ($410) {
          ___shlim($0,0);
          $$1$i = 0.0;
          break;
         }
         $411 = HEAP32[$5>>2]|0;
         $412 = ($411|0)==(0|0);
         if ($412) {
          $415 = 0;$416 = 0;
         } else {
          $413 = HEAP32[$4>>2]|0;
          $414 = ((($413)) + -1|0);
          HEAP32[$4>>2] = $414;
          $415 = 0;$416 = 0;
         }
        } else {
         $415 = $405;$416 = $406;
        }
        $417 = (_i64Add(($415|0),($416|0),($398|0),($401|0))|0);
        $418 = tempRet0;
        $$0336453$i = $$0336$lcssa$i;$$0340457$i = $$0340$lcssa$i;$$0396463$i = $$0396$lcssa$i;$429 = $417;$431 = $397;$432 = $418;$434 = $400;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $420 = HEAP32[$5>>2]|0;
       $421 = ($420|0)==(0|0);
       if ($421) {
        $$0336454$i = $$0336455$i;$$0340458$i = $$0340459$i;$$0396464$i = $$0396465$i;$712 = $707;$713 = $708;$714 = $711;$715 = $709;$716 = $710;
        label = 171;
       } else {
        $422 = HEAP32[$4>>2]|0;
        $423 = ((($422)) + -1|0);
        HEAP32[$4>>2] = $423;
        if ($711) {
         $$0336453$i = $$0336455$i;$$0340457$i = $$0340459$i;$$0396463$i = $$0396465$i;$429 = $709;$431 = $707;$432 = $710;$434 = $708;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($714) {
        $$0336453$i = $$0336454$i;$$0340457$i = $$0340458$i;$$0396463$i = $$0396464$i;$429 = $715;$431 = $712;$432 = $716;$434 = $713;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $424 = (___errno_location()|0);
        HEAP32[$424>>2] = 22;
        ___shlim($0,0);
        $$1$i = 0.0;
       }
       else if ((label|0) == 173) {
        $425 = HEAP32[$3>>2]|0;
        $426 = ($425|0)==(0);
        if ($426) {
         $427 = (+($$0113|0));
         $428 = $427 * 0.0;
         $$1$i = $428;
         break;
        }
        $430 = ($429|0)==($431|0);
        $433 = ($432|0)==($434|0);
        $435 = $430 & $433;
        $436 = ($434|0)<(0);
        $437 = ($431>>>0)<(10);
        $438 = ($434|0)==(0);
        $439 = $438 & $437;
        $440 = $436 | $439;
        $or$cond$i118 = $440 & $435;
        if ($or$cond$i118) {
         $441 = ($$0106$ph>>>0)>(30);
         $442 = $425 >>> $$0106$ph;
         $443 = ($442|0)==(0);
         $or$cond412$i = $441 | $443;
         if ($or$cond412$i) {
          $444 = (+($$0113|0));
          $445 = (+($425>>>0));
          $446 = $444 * $445;
          $$1$i = $446;
          break;
         }
        }
        $447 = (($$0105$ph|0) / -2)&-1;
        $448 = ($447|0)<(0);
        $449 = $448 << 31 >> 31;
        $450 = ($432|0)>($449|0);
        $451 = ($429>>>0)>($447>>>0);
        $452 = ($432|0)==($449|0);
        $453 = $452 & $451;
        $454 = $450 | $453;
        if ($454) {
         $455 = (___errno_location()|0);
         HEAP32[$455>>2] = 34;
         $456 = (+($$0113|0));
         $457 = $456 * 1.7976931348623157E+308;
         $458 = $457 * 1.7976931348623157E+308;
         $$1$i = $458;
         break;
        }
        $459 = (($$0105$ph) + -106)|0;
        $460 = ($459|0)<(0);
        $461 = $460 << 31 >> 31;
        $462 = ($432|0)<($461|0);
        $463 = ($429>>>0)<($459>>>0);
        $464 = ($432|0)==($461|0);
        $465 = $464 & $463;
        $466 = $462 | $465;
        if ($466) {
         $467 = (___errno_location()|0);
         HEAP32[$467>>2] = 34;
         $468 = (+($$0113|0));
         $469 = $468 * 2.2250738585072014E-308;
         $470 = $469 * 2.2250738585072014E-308;
         $$1$i = $470;
         break;
        }
        $471 = ($$0336453$i|0)==(0);
        if ($471) {
         $$3343$i = $$0340457$i;
        } else {
         $472 = ($$0336453$i|0)<(9);
         if ($472) {
          $473 = (($3) + ($$0340457$i<<2)|0);
          $$promoted$i = HEAP32[$473>>2]|0;
          $$3339493$i = $$0336453$i;$475 = $$promoted$i;
          while(1) {
           $474 = ($475*10)|0;
           $476 = (($$3339493$i) + 1)|0;
           $exitcond541$i = ($476|0)==(9);
           if ($exitcond541$i) {
            break;
           } else {
            $$3339493$i = $476;$475 = $474;
           }
          }
          HEAP32[$473>>2] = $474;
         }
         $477 = (($$0340457$i) + 1)|0;
         $$3343$i = $477;
        }
        $478 = ($$0396463$i|0)<(9);
        if ($478) {
         $479 = ($$0396463$i|0)<=($429|0);
         $480 = ($429|0)<(18);
         $or$cond3$i = $479 & $480;
         if ($or$cond3$i) {
          $481 = ($429|0)==(9);
          if ($481) {
           $482 = (+($$0113|0));
           $483 = HEAP32[$3>>2]|0;
           $484 = (+($483>>>0));
           $485 = $482 * $484;
           $$1$i = $485;
           break;
          }
          $486 = ($429|0)<(9);
          if ($486) {
           $487 = (+($$0113|0));
           $488 = HEAP32[$3>>2]|0;
           $489 = (+($488>>>0));
           $490 = $487 * $489;
           $491 = (8 - ($429))|0;
           $492 = (9984 + ($491<<2)|0);
           $493 = HEAP32[$492>>2]|0;
           $494 = (+($493|0));
           $495 = $490 / $494;
           $$1$i = $495;
           break;
          }
          $$neg432$i = Math_imul($429, -3)|0;
          $$neg433$i = (($$0106$ph) + 27)|0;
          $496 = (($$neg433$i) + ($$neg432$i))|0;
          $497 = ($496|0)>(30);
          $$pre$i119 = HEAP32[$3>>2]|0;
          $498 = $$pre$i119 >>> $496;
          $499 = ($498|0)==(0);
          $or$cond571$i = $497 | $499;
          if ($or$cond571$i) {
           $500 = (+($$0113|0));
           $501 = (+($$pre$i119>>>0));
           $502 = $500 * $501;
           $503 = (($429) + -10)|0;
           $504 = (9984 + ($503<<2)|0);
           $505 = HEAP32[$504>>2]|0;
           $506 = (+($505|0));
           $507 = $502 * $506;
           $$1$i = $507;
           break;
          }
         }
        }
        $508 = (($429|0) % 9)&-1;
        $509 = ($508|0)==(0);
        if ($509) {
         $$0375$ph$i = 0;$$1368$ph438$i = $$3343$i;$$2347$ph439$i = 0;$$2382$ph437$i = $429;
        } else {
         $510 = ($429|0)>(-1);
         $511 = (($508) + 9)|0;
         $512 = $510 ? $508 : $511;
         $513 = (8 - ($512))|0;
         $514 = (9984 + ($513<<2)|0);
         $515 = HEAP32[$514>>2]|0;
         $516 = ($$3343$i|0)==(0);
         if ($516) {
          $$0345$lcssa545$i = 0;$$0367$i = 0;$$0380$lcssa544$i = $429;
         } else {
          $517 = (1000000000 / ($515|0))&-1;
          $$0335486$i = 0;$$0345484$i = 0;$$0380483$i = $429;$$4344485$i = 0;
          while(1) {
           $518 = (($3) + ($$4344485$i<<2)|0);
           $519 = HEAP32[$518>>2]|0;
           $520 = (($519>>>0) % ($515>>>0))&-1;
           $521 = (($519>>>0) / ($515>>>0))&-1;
           $522 = (($521) + ($$0335486$i))|0;
           HEAP32[$518>>2] = $522;
           $523 = Math_imul($520, $517)|0;
           $524 = ($$4344485$i|0)==($$0345484$i|0);
           $525 = ($522|0)==(0);
           $or$cond413$i = $524 & $525;
           $526 = (($$0345484$i) + 1)|0;
           $527 = $526 & 127;
           $528 = (($$0380483$i) + -9)|0;
           $$$0380$i = $or$cond413$i ? $528 : $$0380483$i;
           $$$0345$i = $or$cond413$i ? $527 : $$0345484$i;
           $529 = (($$4344485$i) + 1)|0;
           $530 = ($529|0)==($$3343$i|0);
           if ($530) {
            break;
           } else {
            $$0335486$i = $523;$$0345484$i = $$$0345$i;$$0380483$i = $$$0380$i;$$4344485$i = $529;
           }
          }
          $531 = ($523|0)==(0);
          if ($531) {
           $$0345$lcssa545$i = $$$0345$i;$$0367$i = $$3343$i;$$0380$lcssa544$i = $$$0380$i;
          } else {
           $532 = (($$3343$i) + 1)|0;
           $533 = (($3) + ($$3343$i<<2)|0);
           HEAP32[$533>>2] = $523;
           $$0345$lcssa545$i = $$$0345$i;$$0367$i = $532;$$0380$lcssa544$i = $$$0380$i;
          }
         }
         $534 = (9 - ($512))|0;
         $535 = (($534) + ($$0380$lcssa544$i))|0;
         $$0375$ph$i = 0;$$1368$ph438$i = $$0367$i;$$2347$ph439$i = $$0345$lcssa545$i;$$2382$ph437$i = $535;
        }
        L284: while(1) {
         $536 = ($$2382$ph437$i|0)<(18);
         $537 = ($$2382$ph437$i|0)==(18);
         $538 = (($3) + ($$2347$ph439$i<<2)|0);
         $$0375$i = $$0375$ph$i;$$1368$i = $$1368$ph438$i;
         while(1) {
          if (!($536)) {
           if (!($537)) {
            $$1376$ph$i = $$0375$i;$$4349$ph$i = $$2347$ph439$i;$$4384$ph435$i = $$2382$ph437$i;$$6373$ph$i = $$1368$i;
            break L284;
           }
           $539 = HEAP32[$538>>2]|0;
           $540 = ($539>>>0)<(9007199);
           if (!($540)) {
            $$1376$ph$i = $$0375$i;$$4349$ph$i = $$2347$ph439$i;$$4384$ph435$i = 18;$$6373$ph$i = $$1368$i;
            break L284;
           }
          }
          $541 = (($$1368$i) + 127)|0;
          $$0329$i = 0;$$2369$i = $$1368$i;$$5$in$i = $541;
          while(1) {
           $$5$i121 = $$5$in$i & 127;
           $542 = (($3) + ($$5$i121<<2)|0);
           $543 = HEAP32[$542>>2]|0;
           $544 = (_bitshift64Shl(($543|0),0,29)|0);
           $545 = tempRet0;
           $546 = (_i64Add(($544|0),($545|0),($$0329$i|0),0)|0);
           $547 = tempRet0;
           $548 = ($547>>>0)>(0);
           $549 = ($546>>>0)>(1000000000);
           $550 = ($547|0)==(0);
           $551 = $550 & $549;
           $552 = $548 | $551;
           if ($552) {
            $553 = (___udivdi3(($546|0),($547|0),1000000000,0)|0);
            $554 = tempRet0;
            $555 = (___uremdi3(($546|0),($547|0),1000000000,0)|0);
            $556 = tempRet0;
            $$1330$i = $553;$$sink$off0$i = $555;
           } else {
            $$1330$i = 0;$$sink$off0$i = $546;
           }
           HEAP32[$542>>2] = $$sink$off0$i;
           $557 = (($$2369$i) + 127)|0;
           $558 = $557 & 127;
           $559 = ($$5$i121|0)!=($558|0);
           $560 = ($$5$i121|0)==($$2347$ph439$i|0);
           $or$cond414$i = $559 | $560;
           $561 = ($$sink$off0$i|0)==(0);
           $$5$$2369$i = $561 ? $$5$i121 : $$2369$i;
           $$3370$i = $or$cond414$i ? $$2369$i : $$5$$2369$i;
           $562 = (($$5$i121) + -1)|0;
           if ($560) {
            break;
           } else {
            $$0329$i = $$1330$i;$$2369$i = $$3370$i;$$5$in$i = $562;
           }
          }
          $563 = (($$0375$i) + -29)|0;
          $564 = ($$1330$i|0)==(0);
          if ($564) {
           $$0375$i = $563;$$1368$i = $$3370$i;
          } else {
           break;
          }
         }
         $565 = (($$2382$ph437$i) + 9)|0;
         $566 = (($$2347$ph439$i) + 127)|0;
         $567 = $566 & 127;
         $568 = ($567|0)==($$3370$i|0);
         $569 = (($$3370$i) + 127)|0;
         $570 = $569 & 127;
         $571 = (($$3370$i) + 126)|0;
         $572 = $571 & 127;
         $573 = (($3) + ($572<<2)|0);
         if ($568) {
          $574 = (($3) + ($570<<2)|0);
          $575 = HEAP32[$574>>2]|0;
          $576 = HEAP32[$573>>2]|0;
          $577 = $576 | $575;
          HEAP32[$573>>2] = $577;
          $$4371$i = $570;
         } else {
          $$4371$i = $$3370$i;
         }
         $578 = (($3) + ($567<<2)|0);
         HEAP32[$578>>2] = $$1330$i;
         $$0375$ph$i = $563;$$1368$ph438$i = $$4371$i;$$2347$ph439$i = $567;$$2382$ph437$i = $565;
        }
        L302: while(1) {
         $615 = (($$6373$ph$i) + 1)|0;
         $612 = $615 & 127;
         $616 = (($$6373$ph$i) + 127)|0;
         $617 = $616 & 127;
         $618 = (($3) + ($617<<2)|0);
         $$1376$ph549$i = $$1376$ph$i;$$4349$ph550$i = $$4349$ph$i;$$4384$ph$i = $$4384$ph435$i;
         while(1) {
          $591 = ($$4384$ph$i|0)==(18);
          $619 = ($$4384$ph$i|0)>(27);
          $$416$i = $619 ? 9 : 1;
          $$1376$i = $$1376$ph549$i;$$4349$i = $$4349$ph550$i;
          while(1) {
           $$0331476$i = 0;
           while(1) {
            $579 = (($$0331476$i) + ($$4349$i))|0;
            $580 = $579 & 127;
            $581 = ($580|0)==($$6373$ph$i|0);
            if ($581) {
             $$1332$i = 2;
             label = 220;
             break;
            }
            $582 = (($3) + ($580<<2)|0);
            $583 = HEAP32[$582>>2]|0;
            $584 = (10016 + ($$0331476$i<<2)|0);
            $585 = HEAP32[$584>>2]|0;
            $586 = ($583>>>0)<($585>>>0);
            if ($586) {
             $$1332$i = 2;
             label = 220;
             break;
            }
            $587 = ($583>>>0)>($585>>>0);
            if ($587) {
             break;
            }
            $588 = (($$0331476$i) + 1)|0;
            $589 = ($588|0)<(2);
            if ($589) {
             $$0331476$i = $588;
            } else {
             $$1332$i = $588;
             label = 220;
             break;
            }
           }
           if ((label|0) == 220) {
            label = 0;
            $590 = ($$1332$i|0)==(2);
            $or$cond6$i122 = $591 & $590;
            if ($or$cond6$i122) {
             $$0360474$i = 0.0;$$4475$i = 0;$$9473$i = $$6373$ph$i;
             break L302;
            }
           }
           $592 = (($$1376$i) + ($$416$i))|0;
           $593 = ($$4349$i|0)==($$6373$ph$i|0);
           if ($593) {
            $$1376$i = $592;$$4349$i = $$6373$ph$i;
           } else {
            break;
           }
          }
          $594 = 1 << $$416$i;
          $595 = (($594) + -1)|0;
          $596 = 1000000000 >>> $$416$i;
          $$0327480$i = 0;$$5350478$i = $$4349$i;$$5385477$i = $$4384$ph$i;$$6479$i = $$4349$i;
          while(1) {
           $597 = (($3) + ($$6479$i<<2)|0);
           $598 = HEAP32[$597>>2]|0;
           $599 = $598 & $595;
           $600 = $598 >>> $$416$i;
           $601 = (($600) + ($$0327480$i))|0;
           HEAP32[$597>>2] = $601;
           $602 = Math_imul($599, $596)|0;
           $603 = ($$6479$i|0)==($$5350478$i|0);
           $604 = ($601|0)==(0);
           $or$cond417$i = $603 & $604;
           $605 = (($$5350478$i) + 1)|0;
           $606 = $605 & 127;
           $607 = (($$5385477$i) + -9)|0;
           $$$5385$i = $or$cond417$i ? $607 : $$5385477$i;
           $$$5350$i = $or$cond417$i ? $606 : $$5350478$i;
           $608 = (($$6479$i) + 1)|0;
           $609 = $608 & 127;
           $610 = ($609|0)==($$6373$ph$i|0);
           if ($610) {
            break;
           } else {
            $$0327480$i = $602;$$5350478$i = $$$5350$i;$$5385477$i = $$$5385$i;$$6479$i = $609;
           }
          }
          $611 = ($602|0)==(0);
          if ($611) {
           $$1376$ph549$i = $592;$$4349$ph550$i = $$$5350$i;$$4384$ph$i = $$$5385$i;
           continue;
          }
          $613 = ($612|0)==($$$5350$i|0);
          if (!($613)) {
           break;
          }
          $620 = HEAP32[$618>>2]|0;
          $621 = $620 | 1;
          HEAP32[$618>>2] = $621;
          $$1376$ph549$i = $592;$$4349$ph550$i = $$$5350$i;$$4384$ph$i = $$$5385$i;
         }
         $614 = (($3) + ($$6373$ph$i<<2)|0);
         HEAP32[$614>>2] = $602;
         $$1376$ph$i = $592;$$4349$ph$i = $$$5350$i;$$4384$ph435$i = $$$5385$i;$$6373$ph$i = $612;
        }
        while(1) {
         $622 = (($$4475$i) + ($$4349$i))|0;
         $623 = $622 & 127;
         $624 = ($623|0)==($$9473$i|0);
         $625 = (($$9473$i) + 1)|0;
         $626 = $625 & 127;
         if ($624) {
          $627 = (($626) + -1)|0;
          $628 = (($3) + ($627<<2)|0);
          HEAP32[$628>>2] = 0;
          $$10$i = $626;
         } else {
          $$10$i = $$9473$i;
         }
         $629 = $$0360474$i * 1.0E+9;
         $630 = (($3) + ($623<<2)|0);
         $631 = HEAP32[$630>>2]|0;
         $632 = (+($631>>>0));
         $633 = $629 + $632;
         $634 = (($$4475$i) + 1)|0;
         $exitcond$i = ($634|0)==(2);
         if ($exitcond$i) {
          break;
         } else {
          $$0360474$i = $633;$$4475$i = $634;$$9473$i = $$10$i;
         }
        }
        $635 = (+($$0113|0));
        $636 = $635 * $633;
        $637 = (($$1376$i) + 53)|0;
        $638 = (($637) - ($$0105$ph))|0;
        $639 = ($638|0)<($$0106$ph|0);
        $640 = ($638|0)<(0);
        $$$i = $640 ? 0 : $638;
        $$0364$i = $639&1;
        $$0328$i = $639 ? $$$i : $$0106$ph;
        $641 = ($$0328$i|0)<(53);
        if ($641) {
         $642 = (105 - ($$0328$i))|0;
         $643 = (+_scalbn(1.0,$642));
         $644 = (+_copysignl($643,$636));
         $645 = (53 - ($$0328$i))|0;
         $646 = (+_scalbn(1.0,$645));
         $647 = (+_fmodl($636,$646));
         $648 = $636 - $647;
         $649 = $644 + $648;
         $$0355$i = $644;$$0356$i = $647;$$1361$i = $649;
        } else {
         $$0355$i = 0.0;$$0356$i = 0.0;$$1361$i = $636;
        }
        $650 = (($$4349$i) + 2)|0;
        $651 = $650 & 127;
        $652 = ($651|0)==($$10$i|0);
        do {
         if ($652) {
          $$3359$i = $$0356$i;
         } else {
          $653 = (($3) + ($651<<2)|0);
          $654 = HEAP32[$653>>2]|0;
          $655 = ($654>>>0)<(500000000);
          do {
           if ($655) {
            $656 = ($654|0)==(0);
            if ($656) {
             $657 = (($$4349$i) + 3)|0;
             $658 = $657 & 127;
             $659 = ($658|0)==($$10$i|0);
             if ($659) {
              $$1357$i = $$0356$i;
              break;
             }
            }
            $660 = $635 * 0.25;
            $661 = $660 + $$0356$i;
            $$1357$i = $661;
           } else {
            $662 = ($654|0)==(500000000);
            if (!($662)) {
             $663 = $635 * 0.75;
             $664 = $663 + $$0356$i;
             $$1357$i = $664;
             break;
            }
            $665 = (($$4349$i) + 3)|0;
            $666 = $665 & 127;
            $667 = ($666|0)==($$10$i|0);
            if ($667) {
             $668 = $635 * 0.5;
             $669 = $668 + $$0356$i;
             $$1357$i = $669;
             break;
            } else {
             $670 = $635 * 0.75;
             $671 = $670 + $$0356$i;
             $$1357$i = $671;
             break;
            }
           }
          } while(0);
          $672 = (53 - ($$0328$i))|0;
          $673 = ($672|0)>(1);
          if ($673) {
           $674 = (+_fmodl($$1357$i,1.0));
           $675 = $674 != 0.0;
           if ($675) {
            $$3359$i = $$1357$i;
            break;
           }
           $676 = $$1357$i + 1.0;
           $$3359$i = $676;
          } else {
           $$3359$i = $$1357$i;
          }
         }
        } while(0);
        $677 = $$1361$i + $$3359$i;
        $678 = $677 - $$0355$i;
        $679 = $637 & 2147483647;
        $680 = (-2 - ($sum$i))|0;
        $681 = ($679|0)>($680|0);
        do {
         if ($681) {
          $682 = (+Math_abs((+$678)));
          $683 = !($682 >= 9007199254740992.0);
          if ($683) {
           $$2362$i = $678;$$2366$i = $$0364$i;$$3378$i = $$1376$i;
          } else {
           $684 = (($$1376$i) + 1)|0;
           $685 = ($$0328$i|0)==($638|0);
           $or$cond418$i = $639 & $685;
           $$1365$i = $or$cond418$i ? 0 : $$0364$i;
           $686 = $678 * 0.5;
           $$2362$i = $686;$$2366$i = $$1365$i;$$3378$i = $684;
          }
          $687 = (($$3378$i) + 50)|0;
          $688 = ($687|0)>($333|0);
          if (!($688)) {
           $689 = ($$2366$i|0)!=(0);
           $690 = $$3359$i != 0.0;
           $or$cond9$i = $690 & $689;
           if (!($or$cond9$i)) {
            $$3363$i = $$2362$i;$$4379$i = $$3378$i;
            break;
           }
          }
          $691 = (___errno_location()|0);
          HEAP32[$691>>2] = 34;
          $$3363$i = $$2362$i;$$4379$i = $$3378$i;
         } else {
          $$3363$i = $678;$$4379$i = $$1376$i;
         }
        } while(0);
        $692 = (+_scalbnl($$3363$i,$$4379$i));
        $$1$i = $692;
       }
      } while(0);
      $$0114 = $$1$i;
      break L4;
      break;
     }
     default: {
      $113 = HEAP32[$5>>2]|0;
      $114 = ($113|0)==(0|0);
      if (!($114)) {
       $115 = HEAP32[$4>>2]|0;
       $116 = ((($115)) + -1|0);
       HEAP32[$4>>2] = $116;
      }
      $117 = (___errno_location()|0);
      HEAP32[$117>>2] = 22;
      ___shlim($0,0);
      $$0114 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $45 = HEAP32[$5>>2]|0;
    $46 = ($45|0)==(0|0);
    if (!($46)) {
     $47 = HEAP32[$4>>2]|0;
     $48 = ((($47)) + -1|0);
     HEAP32[$4>>2] = $48;
    }
    $49 = ($2|0)!=(0);
    $50 = ($$0107$lcssa>>>0)>(3);
    $or$cond9 = $49 & $50;
    if ($or$cond9) {
     $$1108 = $$0107$lcssa;
     while(1) {
      if (!($46)) {
       $51 = HEAP32[$4>>2]|0;
       $52 = ((($51)) + -1|0);
       HEAP32[$4>>2] = $52;
      }
      $53 = (($$1108) + -1)|0;
      $$old8 = ($53>>>0)>(3);
      if ($$old8) {
       $$1108 = $53;
      } else {
       break;
      }
     }
    }
   }
   $54 = (+($$0113|0));
   $55 = $54 * inf;
   $56 = $55;
   $$0114 = $56;
  }
 } while(0);
 STACKTOP = sp;return (+$$0114);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 $12 = ($11|0)==(45);
 switch ($11|0) {
 case 43: case 45:  {
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $$0 = $13;$$049 = $22;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    $$0 = $13;$$049 = $22;
   }
  } else {
   $$0 = $13;$$049 = $22;
  }
  break;
 }
 default: {
  $$0 = 0;$$049 = $11;
 }
 }
 $29 = (($$049) + -48)|0;
 $30 = ($29>>>0)>(9);
 if ($30) {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $100 = -2147483648;$101 = 0;
  } else {
   $33 = HEAP32[$2>>2]|0;
   $34 = ((($33)) + -1|0);
   HEAP32[$2>>2] = $34;
   $100 = -2147483648;$101 = 0;
  }
 } else {
  $$04860 = 0;$$159 = $$049;
  while(1) {
   $35 = ($$04860*10)|0;
   $36 = (($$159) + -48)|0;
   $37 = (($36) + ($35))|0;
   $38 = HEAP32[$2>>2]|0;
   $39 = HEAP32[$4>>2]|0;
   $40 = ($38>>>0)<($39>>>0);
   if ($40) {
    $41 = ((($38)) + 1|0);
    HEAP32[$2>>2] = $41;
    $42 = HEAP8[$38>>0]|0;
    $43 = $42&255;
    $$1$be = $43;
   } else {
    $44 = (___shgetc($0)|0);
    $$1$be = $44;
   }
   $45 = (($$1$be) + -48)|0;
   $46 = ($45>>>0)<(10);
   $47 = ($37|0)<(214748364);
   $48 = $46 & $47;
   if ($48) {
    $$04860 = $37;$$159 = $$1$be;
   } else {
    break;
   }
  }
  $49 = ($37|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = (($$1$be) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   $$254 = $$1$be;$55 = $37;$56 = $50;
   while(1) {
    $57 = (___muldi3(($55|0),($56|0),10,0)|0);
    $58 = tempRet0;
    $59 = ($$254|0)<(0);
    $60 = $59 << 31 >> 31;
    $61 = (_i64Add(($$254|0),($60|0),-48,-1)|0);
    $62 = tempRet0;
    $63 = (_i64Add(($61|0),($62|0),($57|0),($58|0))|0);
    $64 = tempRet0;
    $65 = HEAP32[$2>>2]|0;
    $66 = HEAP32[$4>>2]|0;
    $67 = ($65>>>0)<($66>>>0);
    if ($67) {
     $68 = ((($65)) + 1|0);
     HEAP32[$2>>2] = $68;
     $69 = HEAP8[$65>>0]|0;
     $70 = $69&255;
     $$2$be = $70;
    } else {
     $71 = (___shgetc($0)|0);
     $$2$be = $71;
    }
    $72 = (($$2$be) + -48)|0;
    $73 = ($72>>>0)<(10);
    $74 = ($64|0)<(21474836);
    $75 = ($63>>>0)<(2061584302);
    $76 = ($64|0)==(21474836);
    $77 = $76 & $75;
    $78 = $74 | $77;
    $79 = $73 & $78;
    if ($79) {
     $$254 = $$2$be;$55 = $63;$56 = $64;
    } else {
     $$2$lcssa = $$2$be;$94 = $63;$95 = $64;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be;$94 = $37;$95 = $50;
  }
  $53 = (($$2$lcssa) + -48)|0;
  $54 = ($53>>>0)<(10);
  if ($54) {
   while(1) {
    $80 = HEAP32[$2>>2]|0;
    $81 = HEAP32[$4>>2]|0;
    $82 = ($80>>>0)<($81>>>0);
    if ($82) {
     $83 = ((($80)) + 1|0);
     HEAP32[$2>>2] = $83;
     $84 = HEAP8[$80>>0]|0;
     $85 = $84&255;
     $$3$be = $85;
    } else {
     $86 = (___shgetc($0)|0);
     $$3$be = $86;
    }
    $87 = (($$3$be) + -48)|0;
    $88 = ($87>>>0)<(10);
    if (!($88)) {
     break;
    }
   }
  }
  $89 = HEAP32[$4>>2]|0;
  $90 = ($89|0)==(0|0);
  if (!($90)) {
   $91 = HEAP32[$2>>2]|0;
   $92 = ((($91)) + -1|0);
   HEAP32[$2>>2] = $92;
  }
  $93 = ($$0|0)!=(0);
  $96 = (_i64Subtract(0,0,($94|0),($95|0))|0);
  $97 = tempRet0;
  $98 = $93 ? $96 : $94;
  $99 = $93 ? $97 : $95;
  $100 = $99;$101 = $98;
 }
 tempRet0 = ($100);
 return ($101|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($4|0)>(1023);
  $6 = (($1) + -2046)|0;
  if ($5) {
   $7 = $3 * 8.9884656743115795E+307;
   $8 = ($6|0)>(1023);
   $$ = $8 ? 1023 : $6;
   $$0 = $7;$$020 = $$;
  } else {
   $$0 = $3;$$020 = $4;
  }
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($11|0)<(-1022);
   $13 = (($1) + 2044)|0;
   if ($12) {
    $14 = $10 * 2.2250738585072014E-308;
    $15 = ($13|0)<(-1022);
    $$1 = $15 ? -1022 : $13;
    $$0 = $14;$$020 = $$1;
   } else {
    $$0 = $10;$$020 = $11;
   }
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$070 = 0.0, $$071$lcssa = 0, $$07195 = 0, $$073$lcssa = 0, $$073101 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27587 = 0, $$376$lcssa = 0, $$37684 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = tempRet0;
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = $5 & 2147483647;
   $19 = ($18>>>0)>(2146435072);
   $20 = ($4>>>0)>(0);
   $21 = ($18|0)==(2146435072);
   $22 = $21 & $20;
   $23 = $19 | $22;
   $24 = ($8|0)==(2047);
   $or$cond = $23 | $24;
   if ($or$cond) {
    label = 3;
   } else {
    $27 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $28 = tempRet0;
    $29 = ($28>>>0)>($14>>>0);
    $30 = ($27>>>0)>($13>>>0);
    $31 = ($28|0)==($14|0);
    $32 = $31 & $30;
    $33 = $29 | $32;
    if (!($33)) {
     $34 = ($27|0)==($13|0);
     $35 = ($28|0)==($14|0);
     $36 = $34 & $35;
     $37 = $0 * 0.0;
     $$ = $36 ? $37 : $0;
     return (+$$);
    }
    $38 = ($8|0)==(0);
    if ($38) {
     $39 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $40 = tempRet0;
     $41 = ($40|0)>(-1);
     $42 = ($39>>>0)>(4294967295);
     $43 = ($40|0)==(-1);
     $44 = $43 & $42;
     $45 = $41 | $44;
     if ($45) {
      $$073101 = 0;$47 = $39;$48 = $40;
      while(1) {
       $46 = (($$073101) + -1)|0;
       $49 = (_bitshift64Shl(($47|0),($48|0),1)|0);
       $50 = tempRet0;
       $51 = ($50|0)>(-1);
       $52 = ($49>>>0)>(4294967295);
       $53 = ($50|0)==(-1);
       $54 = $53 & $52;
       $55 = $51 | $54;
       if ($55) {
        $$073101 = $46;$47 = $49;$48 = $50;
       } else {
        $$073$lcssa = $46;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $56 = (1 - ($$073$lcssa))|0;
     $57 = (_bitshift64Shl(($2|0),($3|0),($56|0))|0);
     $58 = tempRet0;
     $$174 = $$073$lcssa;$85 = $57;$86 = $58;
    } else {
     $59 = $3 & 1048575;
     $60 = $59 | 1048576;
     $$174 = $8;$85 = $2;$86 = $60;
    }
    $61 = ($11|0)==(0);
    if ($61) {
     $62 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $63 = tempRet0;
     $64 = ($63|0)>(-1);
     $65 = ($62>>>0)>(4294967295);
     $66 = ($63|0)==(-1);
     $67 = $66 & $65;
     $68 = $64 | $67;
     if ($68) {
      $$07195 = 0;$70 = $62;$71 = $63;
      while(1) {
       $69 = (($$07195) + -1)|0;
       $72 = (_bitshift64Shl(($70|0),($71|0),1)|0);
       $73 = tempRet0;
       $74 = ($73|0)>(-1);
       $75 = ($72>>>0)>(4294967295);
       $76 = ($73|0)==(-1);
       $77 = $76 & $75;
       $78 = $74 | $77;
       if ($78) {
        $$07195 = $69;$70 = $72;$71 = $73;
       } else {
        $$071$lcssa = $69;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $79 = (1 - ($$071$lcssa))|0;
     $80 = (_bitshift64Shl(($4|0),($5|0),($79|0))|0);
     $81 = tempRet0;
     $$172$ph = $$071$lcssa;$87 = $80;$88 = $81;
    } else {
     $82 = $5 & 1048575;
     $83 = $82 | 1048576;
     $$172$ph = $11;$87 = $4;$88 = $83;
    }
    $84 = ($$174|0)>($$172$ph|0);
    $89 = (_i64Subtract(($85|0),($86|0),($87|0),($88|0))|0);
    $90 = tempRet0;
    $91 = ($90|0)>(-1);
    $92 = ($89>>>0)>(4294967295);
    $93 = ($90|0)==(-1);
    $94 = $93 & $92;
    $95 = $91 | $94;
    L23: do {
     if ($84) {
      $$27587 = $$174;$154 = $95;$155 = $85;$156 = $86;$96 = $89;$98 = $90;
      while(1) {
       if ($154) {
        $97 = ($96|0)==(0);
        $99 = ($98|0)==(0);
        $100 = $97 & $99;
        if ($100) {
         break;
        } else {
         $102 = $96;$103 = $98;
        }
       } else {
        $102 = $155;$103 = $156;
       }
       $104 = (_bitshift64Shl(($102|0),($103|0),1)|0);
       $105 = tempRet0;
       $106 = (($$27587) + -1)|0;
       $107 = ($106|0)>($$172$ph|0);
       $108 = (_i64Subtract(($104|0),($105|0),($87|0),($88|0))|0);
       $109 = tempRet0;
       $110 = ($109|0)>(-1);
       $111 = ($108>>>0)>(4294967295);
       $112 = ($109|0)==(-1);
       $113 = $112 & $111;
       $114 = $110 | $113;
       if ($107) {
        $$27587 = $106;$154 = $114;$155 = $104;$156 = $105;$96 = $108;$98 = $109;
       } else {
        $$275$lcssa = $106;$$lcssa = $114;$115 = $108;$117 = $109;$157 = $104;$158 = $105;
        break L23;
       }
      }
      $101 = $0 * 0.0;
      $$070 = $101;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $95;$115 = $89;$117 = $90;$157 = $85;$158 = $86;
     }
    } while(0);
    if ($$lcssa) {
     $116 = ($115|0)==(0);
     $118 = ($117|0)==(0);
     $119 = $116 & $118;
     if ($119) {
      $127 = $0 * 0.0;
      $$070 = $127;
      break;
     } else {
      $120 = $117;$122 = $115;
     }
    } else {
     $120 = $158;$122 = $157;
    }
    $121 = ($120>>>0)<(1048576);
    $123 = ($122>>>0)<(0);
    $124 = ($120|0)==(1048576);
    $125 = $124 & $123;
    $126 = $121 | $125;
    if ($126) {
     $$37684 = $$275$lcssa;$128 = $122;$129 = $120;
     while(1) {
      $130 = (_bitshift64Shl(($128|0),($129|0),1)|0);
      $131 = tempRet0;
      $132 = (($$37684) + -1)|0;
      $133 = ($131>>>0)<(1048576);
      $134 = ($130>>>0)<(0);
      $135 = ($131|0)==(1048576);
      $136 = $135 & $134;
      $137 = $133 | $136;
      if ($137) {
       $$37684 = $132;$128 = $130;$129 = $131;
      } else {
       $$376$lcssa = $132;$139 = $130;$140 = $131;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$139 = $122;$140 = $120;
    }
    $138 = ($$376$lcssa|0)>(0);
    if ($138) {
     $141 = (_i64Add(($139|0),($140|0),0,-1048576)|0);
     $142 = tempRet0;
     $143 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $144 = tempRet0;
     $145 = $141 | $143;
     $146 = $142 | $144;
     $151 = $146;$153 = $145;
    } else {
     $147 = (1 - ($$376$lcssa))|0;
     $148 = (_bitshift64Lshr(($139|0),($140|0),($147|0))|0);
     $149 = tempRet0;
     $151 = $149;$153 = $148;
    }
    $150 = $151 | $12;
    HEAP32[tempDoublePtr>>2] = $153;HEAP32[tempDoublePtr+4>>2] = $150;$152 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $152;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $25 = $0 * $1;
  $26 = $25 / $25;
  $$070 = $26;
 }
 return (+$$070);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _mbrtowc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$03750 = 0, $$03849 = 0, $$04148 = 0, $$1 = 0, $$139 = 0, $$142 = 0, $$2 = 0, $$45 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($3|0)==(0|0);
 $$ = $5 ? 25888 : $3;
 $6 = HEAP32[$$>>2]|0;
 $7 = ($1|0)==(0|0);
 L1: do {
  if ($7) {
   $8 = ($6|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    label = 15;
   }
  } else {
   $9 = ($0|0)==(0|0);
   $$45 = $9 ? $4 : $0;
   $10 = ($2|0)==(0);
   if ($10) {
    $$0 = -2;
   } else {
    $11 = ($6|0)==(0);
    if ($11) {
     $12 = HEAP8[$1>>0]|0;
     $13 = $12&255;
     $14 = ($12<<24>>24)>(-1);
     if ($14) {
      HEAP32[$$45>>2] = $13;
      $15 = ($12<<24>>24)!=(0);
      $16 = $15&1;
      $$0 = $16;
      break;
     }
     $17 = (($13) + -194)|0;
     $18 = ($17>>>0)>(50);
     if ($18) {
      label = 15;
      break;
     }
     $19 = ((($1)) + 1|0);
     $20 = (9436 + ($17<<2)|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (($2) + -1)|0;
     $23 = ($22|0)==(0);
     if ($23) {
      $$2 = $21;
     } else {
      $$03750 = $19;$$03849 = $21;$$04148 = $22;
      label = 9;
     }
    } else {
     $$03750 = $1;$$03849 = $6;$$04148 = $2;
     label = 9;
    }
    L11: do {
     if ((label|0) == 9) {
      $24 = HEAP8[$$03750>>0]|0;
      $25 = $24&255;
      $26 = $25 >>> 3;
      $27 = (($26) + -16)|0;
      $28 = $$03849 >> 26;
      $29 = (($26) + ($28))|0;
      $30 = $27 | $29;
      $31 = ($30>>>0)>(7);
      if ($31) {
       label = 15;
       break L1;
      } else {
       $$1 = $$03750;$$139 = $$03849;$$142 = $$04148;$35 = $24;
      }
      while(1) {
       $32 = $$139 << 6;
       $33 = ((($$1)) + 1|0);
       $34 = $35&255;
       $36 = (($34) + -128)|0;
       $37 = $36 | $32;
       $38 = (($$142) + -1)|0;
       $39 = ($37|0)<(0);
       if (!($39)) {
        break;
       }
       $41 = ($38|0)==(0);
       if ($41) {
        $$2 = $37;
        break L11;
       }
       $42 = HEAP8[$33>>0]|0;
       $43 = $42 & -64;
       $44 = ($43<<24>>24)==(-128);
       if ($44) {
        $$1 = $33;$$139 = $37;$$142 = $38;$35 = $42;
       } else {
        label = 15;
        break L1;
       }
      }
      HEAP32[$$>>2] = 0;
      HEAP32[$$45>>2] = $37;
      $40 = (($2) - ($38))|0;
      $$0 = $40;
      break L1;
     }
    } while(0);
    HEAP32[$$>>2] = $$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  HEAP32[$$>>2] = 0;
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function _stat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $2 = (___syscall195(195,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  _memcpy(($3|0),($0|0),($2|0))|0;
  $$0 = $3;
 }
 return ($$0|0);
}
function _write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $3 = (___syscall4(4,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _getpid() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (___syscall20(20,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $memchr = (_memchr(25787,$3,4)|0);
 $4 = ($memchr|0)==(0|0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $8 = (___syscall5(5,($vararg_buffer|0))|0);
  $9 = (___syscall_ret($8)|0);
  $10 = ($9|0)<(0);
  if ($10) {
   $$0 = 0;
  } else {
   $11 = (___fdopen($9,$1)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$vararg_buffer3>>2] = $9;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $11;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $not$ = ($3<<24>>24)!=(114);
 $$ = $not$&1;
 $$0 = $2 ? $$ : 2;
 $4 = (_strchr($0,120)|0);
 $5 = ($4|0)==(0|0);
 $6 = $$0 | 128;
 $$0$ = $5 ? $$0 : $6;
 $7 = (_strchr($0,101)|0);
 $8 = ($7|0)==(0|0);
 $9 = $$0$ | 524288;
 $$2 = $8 ? $$0$ : $9;
 $10 = ($3<<24>>24)==(114);
 $11 = $$2 | 64;
 $$2$ = $10 ? $$2 : $11;
 $12 = ($3<<24>>24)==(119);
 $13 = $$2$ | 512;
 $$4 = $12 ? $13 : $$2$;
 $14 = ($3<<24>>24)==(97);
 $15 = $$4 | 1024;
 $$$4 = $14 ? $15 : $$4;
 return ($$$4|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$cast = 0, $$pre = 0, $$pre34 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 52|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $memchr = (_memchr(25787,$4,4)|0);
 $5 = ($memchr|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (_malloc(1144)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   dest=$7; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ($3<<24>>24)==(114);
    $12 = $11 ? 8 : 4;
    HEAP32[$7>>2] = $12;
   }
   $13 = (_strchr($1,101)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $15 = $3;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$1>>0]|0;
    $15 = $$pre;
   }
   $16 = ($15<<24>>24)==(97);
   if ($16) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $17 = (___syscall221(221,($vararg_buffer3|0))|0);
    $18 = $17 & 1024;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $17 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $20;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $21 = HEAP32[$7>>2]|0;
    $22 = $21 | 128;
    HEAP32[$7>>2] = $22;
    $29 = $22;
   } else {
    $$pre34 = HEAP32[$7>>2]|0;
    $29 = $$pre34;
   }
   $23 = ((($7)) + 60|0);
   HEAP32[$23>>2] = $0;
   $24 = ((($7)) + 120|0);
   $25 = ((($7)) + 44|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($7)) + 48|0);
   HEAP32[$26>>2] = 1024;
   $27 = ((($7)) + 75|0);
   HEAP8[$27>>0] = -1;
   $28 = $29 & 8;
   $30 = ($28|0)==(0);
   if ($30) {
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $2;
    $31 = (___syscall54(54,($vararg_buffer12|0))|0);
    $32 = ($31|0)==(0);
    if ($32) {
     HEAP8[$27>>0] = 10;
    }
   }
   $33 = ((($7)) + 32|0);
   HEAP32[$33>>2] = 65;
   $34 = ((($7)) + 36|0);
   HEAP32[$34>>2] = 29;
   $35 = ((($7)) + 40|0);
   HEAP32[$35>>2] = 30;
   $36 = ((($7)) + 12|0);
   HEAP32[$36>>2] = 28;
   $37 = HEAP32[(25844)>>2]|0;
   $38 = ($37|0)==(0);
   if ($38) {
    $39 = ((($7)) + 76|0);
    HEAP32[$39>>2] = -1;
   }
   ___lock(((25868)|0));
   $40 = HEAP32[(25864)>>2]|0;
   $41 = ((($7)) + 56|0);
   HEAP32[$41>>2] = $40;
   $42 = ($40|0)==(0);
   if (!($42)) {
    $$cast = $40;
    $43 = ((($$cast)) + 52|0);
    HEAP32[$43>>2] = $7;
   }
   HEAP32[(25864)>>2] = $7;
   ___unlock(((25868)|0));
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  ___lock(((25868)|0));
  $7 = ((($0)) + 52|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  $10 = $8;
  $$pre = ((($0)) + 56|0);
  if (!($9)) {
   $11 = HEAP32[$$pre>>2]|0;
   $12 = ((($8)) + 56|0);
   HEAP32[$12>>2] = $11;
  }
  $13 = HEAP32[$$pre>>2]|0;
  $14 = ($13|0)==(0|0);
  $15 = $13;
  if (!($14)) {
   $16 = ((($13)) + 52|0);
   HEAP32[$16>>2] = $10;
  }
  $17 = HEAP32[(25864)>>2]|0;
  $18 = ($17|0)==($0|0);
  if ($18) {
   HEAP32[(25864)>>2] = $15;
  }
  ___unlock(((25868)|0));
 }
 $19 = (_fflush($0)|0);
 $20 = ((($0)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_ii[$21 & 63]($0)|0);
 $23 = $22 | $19;
 $24 = ((($0)) + 92|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  _free($25);
 }
 if (!($6)) {
  _free($0);
 }
 return ($23|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[2467]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $28 = 0;
   } else {
    $10 = HEAP32[2467]|0;
    $11 = (_fflush($10)|0);
    $28 = $11;
   }
   ___lock(((25868)|0));
   $$02325 = HEAP32[(25864)>>2]|0;
   $12 = ($$02325|0)==(0|0);
   if ($12) {
    $$024$lcssa = $28;
   } else {
    $$02327 = $$02325;$$02426 = $28;
    while(1) {
     $13 = ((($$02327)) + 76|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)>(-1);
     if ($15) {
      $16 = (___lockfile($$02327)|0);
      $24 = $16;
     } else {
      $24 = 0;
     }
     $17 = ((($$02327)) + 20|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($$02327)) + 28|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18>>>0)>($20>>>0);
     if ($21) {
      $22 = (___fflush_unlocked($$02327)|0);
      $23 = $22 | $$02426;
      $$1 = $23;
     } else {
      $$1 = $$02426;
     }
     $25 = ($24|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $26 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$26>>2]|0;
     $27 = ($$023|0)==(0|0);
     if ($27) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___unlock(((25868)|0));
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 127]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($0)) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $11;
   $18 = $13;
   $19 = (($17) - ($18))|0;
   (FUNCTION_TABLE_iiii[$16 & 127]($0,$19,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fgets($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$06266 = 0, $$063 = 0, $$064 = 0, $$1 = 0, $$old2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $6 = (___lockfile($2)|0);
  $15 = $6;
 } else {
  $15 = 0;
 }
 $7 = (($1) + -1)|0;
 $8 = ($1|0)<(2);
 if ($8) {
  $9 = ((($2)) + 74|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = (($11) + 255)|0;
  $13 = $12 | $11;
  $14 = $13&255;
  HEAP8[$9>>0] = $14;
  $16 = ($15|0)==(0);
  if (!($16)) {
   ___unlockfile($2);
  }
  $17 = ($7|0)==(0);
  if ($17) {
   HEAP8[$0>>0] = 0;
   $$0 = $0;
  } else {
   $$0 = 0;
  }
 } else {
  $$old2 = ($7|0)==(0);
  L11: do {
   if ($$old2) {
    $$1 = $0;
    label = 17;
   } else {
    $18 = ((($2)) + 4|0);
    $19 = ((($2)) + 8|0);
    $$063 = $7;$$064 = $0;
    while(1) {
     $20 = HEAP32[$18>>2]|0;
     $21 = HEAP32[$19>>2]|0;
     $22 = $20;
     $23 = (($21) - ($22))|0;
     $24 = (_memchr($20,10,$23)|0);
     $25 = ($24|0)==(0|0);
     $26 = $24;
     $27 = (1 - ($22))|0;
     $28 = (($27) + ($26))|0;
     $29 = $25 ? $23 : $28;
     $30 = ($29>>>0)<($$063>>>0);
     $31 = $30 ? $29 : $$063;
     _memcpy(($$064|0),($20|0),($31|0))|0;
     $32 = HEAP32[$18>>2]|0;
     $33 = (($32) + ($31)|0);
     HEAP32[$18>>2] = $33;
     $34 = (($$064) + ($31)|0);
     $35 = (($$063) - ($31))|0;
     $36 = ($35|0)!=(0);
     $or$cond = $25 & $36;
     if (!($or$cond)) {
      $$1 = $34;
      label = 17;
      break L11;
     }
     $37 = HEAP32[$19>>2]|0;
     $38 = ($33>>>0)<($37>>>0);
     if ($38) {
      $39 = ((($33)) + 1|0);
      HEAP32[$18>>2] = $39;
      $40 = HEAP8[$33>>0]|0;
      $41 = $40&255;
      $50 = $41;
     } else {
      $42 = (___uflow($2)|0);
      $43 = ($42|0)<(0);
      if ($43) {
       break;
      } else {
       $50 = $42;
      }
     }
     $48 = (($35) + -1)|0;
     $49 = $50&255;
     $51 = ((($34)) + 1|0);
     HEAP8[$34>>0] = $49;
     $sext$mask = $50 & 255;
     $52 = ($sext$mask|0)!=(10);
     $53 = ($48|0)!=(0);
     $or$cond3 = $53 & $52;
     if ($or$cond3) {
      $$063 = $48;$$064 = $51;
     } else {
      $$1 = $51;
      label = 17;
      break L11;
     }
    }
    $44 = ($34|0)==($0|0);
    if ($44) {
     $$06266 = 0;
    } else {
     $45 = HEAP32[$2>>2]|0;
     $46 = $45 & 16;
     $47 = ($46|0)==(0);
     if ($47) {
      $$06266 = 0;
     } else {
      $$1 = $34;
      label = 17;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   $54 = ($0|0)==(0|0);
   if ($54) {
    $$06266 = 0;
   } else {
    HEAP8[$$1>>0] = 0;
    $$06266 = $0;
   }
  }
  $55 = ($15|0)==(0);
  if ($55) {
   $$0 = $$06266;
  } else {
   ___unlockfile($2);
   $$0 = $$06266;
  }
 }
 return ($$0|0);
}
function _feof($0) {
 $0 = $0|0;
 var $$lobit = 0, $$lobit8 = 0, $$lobit9 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $6 = (___lockfile($0)|0);
  $phitmp = ($6|0)==(0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 >>> 4;
  $$lobit = $8 & 1;
  if ($phitmp) {
   $$lobit9 = $$lobit;
  } else {
   $$lobit9 = $$lobit;
  }
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = $4 >>> 4;
  $$lobit8 = $5 & 1;
  $$lobit9 = $$lobit8;
 }
 return ($$lobit9|0);
}
function _sscanf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsscanf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp;
 dest=$3; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 32|0);
 HEAP32[$4>>2] = 66;
 $5 = ((($3)) + 44|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($3)) + 76|0);
 HEAP32[$6>>2] = -1;
 $7 = ((($3)) + 84|0);
 HEAP32[$7>>2] = $0;
 $8 = (_vfscanf($3,$1,$2)|0);
 STACKTOP = sp;return ($8|0);
}
function _do_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___string_read($0,$1,$2)|0);
 return ($3|0);
}
function _vfscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$0266 = 0, $$$0268 = 0, $$0$i = 0, $$0266$lcssa = 0, $$0266408 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273420 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph331 = 0, $$0283419 = 0, $$0286411 = 0, $$0288$ = 0, $$0288416 = 0, $$0292 = 0, $$0293 = 0;
 var $$0294415 = 0, $$0305414 = 0, $$10 = 0, $$10304 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$1295 = 0, $$1306 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0;
 var $$2290 = 0, $$2296 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$319 = 0, $$320 = 0, $$321 = 0, $$322 = 0, $$3281 = 0, $$3291 = 0, $$3297$ph = 0, $$3407 = 0, $$4 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6300 = 0;
 var $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7301 = 0, $$7312 = 0, $$8 = 0, $$8302 = 0, $$8313 = 0, $$9 = 0, $$9303 = 0, $$9314 = 0, $$lcssa349 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi493Z2D = 0, $$pre482 = 0, $$pre484 = 0, $$pre486 = 0, $$pre488 = 0;
 var $$pre489 = 0, $$pre490 = 0, $$pre491 = 0, $$pre492 = 0, $$sroa$2$0$$sroa_idx13 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0.0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0, $factor327 = 0, $isdigit = 0, $isdigit316 = 0, $isdigit316406 = 0, $isdigittmp = 0, $isdigittmp315 = 0, $isdigittmp315405 = 0, $not$ = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond318 = 0, $or$cond5 = 0, $trunc = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp + 33|0;
 $6 = sp;
 $7 = sp + 32|0;
 $8 = ((($0)) + 76|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)>(-1);
 if ($10) {
  $11 = (___lockfile($0)|0);
  $332 = $11;
 } else {
  $332 = 0;
 }
 $12 = HEAP8[$1>>0]|0;
 $13 = ($12<<24>>24)==(0);
 L4: do {
  if ($13) {
   $$3291 = 0;
  } else {
   $14 = ((($0)) + 4|0);
   $15 = ((($0)) + 100|0);
   $16 = ((($0)) + 108|0);
   $17 = ((($0)) + 8|0);
   $18 = ((($5)) + 10|0);
   $19 = ((($5)) + 33|0);
   $$sroa$2$0$$sroa_idx13 = ((($4)) + 4|0);
   $20 = ((($5)) + 46|0);
   $21 = ((($5)) + 94|0);
   $22 = ((($5)) + 1|0);
   $23 = ((($5)) + 1|0);
   $$0273420 = $1;$$0283419 = 0;$$0288416 = 0;$$0294415 = 0;$$0305414 = 0;$25 = $12;
   L6: while(1) {
    $24 = $25&255;
    $26 = (_isspace($24)|0);
    $27 = ($26|0)==(0);
    L8: do {
     if ($27) {
      $54 = ($25<<24>>24)==(37);
      L10: do {
       if ($54) {
        $55 = ((($$0273420)) + 1|0);
        $56 = HEAP8[$55>>0]|0;
        L12: do {
         switch ($56<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $77 = ((($$0273420)) + 2|0);
          $$0293 = 0;$$2275 = $77;
          break;
         }
         default: {
          $78 = $56&255;
          $isdigittmp = (($78) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $79 = ((($$0273420)) + 2|0);
           $80 = HEAP8[$79>>0]|0;
           $81 = ($80<<24>>24)==(36);
           if ($81) {
            $vacopy_currentptr = HEAP32[$2>>2]|0;
            HEAP32[$3>>2] = $vacopy_currentptr;
            $$0$i = $isdigittmp;
            while(1) {
             $82 = ($$0$i>>>0)>(1);
             $arglist_current = HEAP32[$3>>2]|0;
             $83 = $arglist_current;
             $84 = ((0) + 4|0);
             $expanded4 = $84;
             $expanded = (($expanded4) - 1)|0;
             $85 = (($83) + ($expanded))|0;
             $86 = ((0) + 4|0);
             $expanded8 = $86;
             $expanded7 = (($expanded8) - 1)|0;
             $expanded6 = $expanded7 ^ -1;
             $87 = $85 & $expanded6;
             $88 = $87;
             $89 = HEAP32[$88>>2]|0;
             $arglist_next = ((($88)) + 4|0);
             HEAP32[$3>>2] = $arglist_next;
             $90 = (($$0$i) + -1)|0;
             if ($82) {
              $$0$i = $90;
             } else {
              break;
             }
            }
            $91 = ((($$0273420)) + 3|0);
            $$0293 = $89;$$2275 = $91;
            break L12;
           }
          }
          $arglist_current2 = HEAP32[$2>>2]|0;
          $92 = $arglist_current2;
          $93 = ((0) + 4|0);
          $expanded11 = $93;
          $expanded10 = (($expanded11) - 1)|0;
          $94 = (($92) + ($expanded10))|0;
          $95 = ((0) + 4|0);
          $expanded15 = $95;
          $expanded14 = (($expanded15) - 1)|0;
          $expanded13 = $expanded14 ^ -1;
          $96 = $94 & $expanded13;
          $97 = $96;
          $98 = HEAP32[$97>>2]|0;
          $arglist_next3 = ((($97)) + 4|0);
          HEAP32[$2>>2] = $arglist_next3;
          $$0293 = $98;$$2275 = $55;
         }
         }
        } while(0);
        $99 = HEAP8[$$2275>>0]|0;
        $100 = $99&255;
        $isdigittmp315405 = (($100) + -48)|0;
        $isdigit316406 = ($isdigittmp315405>>>0)<(10);
        if ($isdigit316406) {
         $$0266408 = 0;$$3407 = $$2275;$104 = $100;
         while(1) {
          $101 = ($$0266408*10)|0;
          $102 = (($101) + -48)|0;
          $103 = (($102) + ($104))|0;
          $105 = ((($$3407)) + 1|0);
          $106 = HEAP8[$105>>0]|0;
          $107 = $106&255;
          $isdigittmp315 = (($107) + -48)|0;
          $isdigit316 = ($isdigittmp315>>>0)<(10);
          if ($isdigit316) {
           $$0266408 = $103;$$3407 = $105;$104 = $107;
          } else {
           $$0266$lcssa = $103;$$3$lcssa = $105;$$lcssa349 = $106;
           break;
          }
         }
        } else {
         $$0266$lcssa = 0;$$3$lcssa = $$2275;$$lcssa349 = $99;
        }
        $108 = ($$lcssa349<<24>>24)==(109);
        if ($108) {
         $109 = ($$0293|0)!=(0|0);
         $110 = $109&1;
         $111 = ((($$3$lcssa)) + 1|0);
         $$pre482 = HEAP8[$111>>0]|0;
         $$0270 = $110;$$1295 = 0;$$1306 = 0;$$4 = $111;$113 = $$pre482;
        } else {
         $$0270 = 0;$$1295 = $$0294415;$$1306 = $$0305414;$$4 = $$3$lcssa;$113 = $$lcssa349;
        }
        $112 = ((($$4)) + 1|0);
        switch ($113<<24>>24) {
        case 104:  {
         $114 = HEAP8[$112>>0]|0;
         $115 = ($114<<24>>24)==(104);
         $116 = ((($$4)) + 2|0);
         $$319 = $115 ? $116 : $112;
         $$320 = $115 ? -2 : -1;
         $$0268 = $$320;$$5 = $$319;
         break;
        }
        case 108:  {
         $117 = HEAP8[$112>>0]|0;
         $118 = ($117<<24>>24)==(108);
         $119 = ((($$4)) + 2|0);
         $$321 = $118 ? $119 : $112;
         $$322 = $118 ? 3 : 1;
         $$0268 = $$322;$$5 = $$321;
         break;
        }
        case 106:  {
         $$0268 = 3;$$5 = $112;
         break;
        }
        case 116: case 122:  {
         $$0268 = 1;$$5 = $112;
         break;
        }
        case 76:  {
         $$0268 = 2;$$5 = $112;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $$0268 = 0;$$5 = $$4;
         break;
        }
        default: {
         $$7312 = $$1306;$$8302 = $$1295;
         label = 154;
         break L6;
        }
        }
        $120 = HEAP8[$$5>>0]|0;
        $121 = $120&255;
        $122 = $121 & 47;
        $123 = ($122|0)==(3);
        $124 = $121 | 32;
        $$ = $123 ? $124 : $121;
        $$$0268 = $123 ? 1 : $$0268;
        $trunc = $$&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $125 = ($$0266$lcssa|0)<(1);
         $$$0266 = $125 ? 1 : $$0266$lcssa;
         $$1267 = $$$0266;$$1284 = $$0283419;
         break;
        }
        case 91:  {
         $$1267 = $$0266$lcssa;$$1284 = $$0283419;
         break;
        }
        case 110:  {
         $126 = ($$0283419|0)<(0);
         $127 = $126 << 31 >> 31;
         $128 = ($$0293|0)==(0|0);
         if ($128) {
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
         }
         switch ($$$0268|0) {
         case -2:  {
          $129 = $$0283419&255;
          HEAP8[$$0293>>0] = $129;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         case -1:  {
          $130 = $$0283419&65535;
          HEAP16[$$0293>>1] = $130;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         case 0:  {
          HEAP32[$$0293>>2] = $$0283419;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         case 1:  {
          HEAP32[$$0293>>2] = $$0283419;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         case 3:  {
          $131 = $$0293;
          $132 = $131;
          HEAP32[$132>>2] = $$0283419;
          $133 = (($131) + 4)|0;
          $134 = $133;
          HEAP32[$134>>2] = $127;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         default: {
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
         }
         }
         break;
        }
        default: {
         ___shlim($0,0);
         while(1) {
          $135 = HEAP32[$14>>2]|0;
          $136 = HEAP32[$15>>2]|0;
          $137 = ($135>>>0)<($136>>>0);
          if ($137) {
           $138 = ((($135)) + 1|0);
           HEAP32[$14>>2] = $138;
           $139 = HEAP8[$135>>0]|0;
           $140 = $139&255;
           $142 = $140;
          } else {
           $141 = (___shgetc($0)|0);
           $142 = $141;
          }
          $143 = (_isspace($142)|0);
          $144 = ($143|0)==(0);
          if ($144) {
           break;
          }
         }
         $145 = HEAP32[$15>>2]|0;
         $146 = ($145|0)==(0|0);
         if ($146) {
          $$pre484 = HEAP32[$14>>2]|0;
          $154 = $$pre484;
         } else {
          $147 = HEAP32[$14>>2]|0;
          $148 = ((($147)) + -1|0);
          HEAP32[$14>>2] = $148;
          $149 = $148;
          $154 = $149;
         }
         $150 = HEAP32[$16>>2]|0;
         $151 = HEAP32[$17>>2]|0;
         $152 = (($150) + ($$0283419))|0;
         $153 = (($152) + ($154))|0;
         $155 = (($153) - ($151))|0;
         $$1267 = $$0266$lcssa;$$1284 = $155;
        }
        }
        ___shlim($0,$$1267);
        $156 = HEAP32[$14>>2]|0;
        $157 = HEAP32[$15>>2]|0;
        $158 = ($156>>>0)<($157>>>0);
        if ($158) {
         $159 = ((($156)) + 1|0);
         HEAP32[$14>>2] = $159;
         $162 = $157;
        } else {
         $160 = (___shgetc($0)|0);
         $161 = ($160|0)<(0);
         if ($161) {
          $$7312 = $$1306;$$8302 = $$1295;
          label = 154;
          break L6;
         }
         $$pre486 = HEAP32[$15>>2]|0;
         $162 = $$pre486;
        }
        $163 = ($162|0)==(0|0);
        if (!($163)) {
         $164 = HEAP32[$14>>2]|0;
         $165 = ((($164)) + -1|0);
         HEAP32[$14>>2] = $165;
        }
        L68: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $166 = ($$|0)==(99);
          $167 = $$ | 16;
          $168 = ($167|0)==(115);
          L70: do {
           if ($168) {
            $169 = ($$|0)==(115);
            _memset(($22|0),-1,256)|0;
            HEAP8[$5>>0] = 0;
            if ($169) {
             HEAP8[$19>>0] = 0;
             ;HEAP8[$18>>0]=0|0;HEAP8[$18+1>>0]=0|0;HEAP8[$18+2>>0]=0|0;HEAP8[$18+3>>0]=0|0;HEAP8[$18+4>>0]=0|0;
             $$9 = $$5;
            } else {
             $$9 = $$5;
            }
           } else {
            $170 = ((($$5)) + 1|0);
            $171 = HEAP8[$170>>0]|0;
            $172 = ($171<<24>>24)==(94);
            $173 = ((($$5)) + 2|0);
            $$0292 = $172&1;
            $$6 = $172 ? $173 : $170;
            $174 = $172&1;
            _memset(($23|0),($174|0),256)|0;
            HEAP8[$5>>0] = 0;
            $175 = HEAP8[$$6>>0]|0;
            switch ($175<<24>>24) {
            case 45:  {
             $176 = ((($$6)) + 1|0);
             $177 = $$0292 ^ 1;
             $178 = $177&255;
             HEAP8[$20>>0] = $178;
             $$7$ph = $176;$$pre$phi493Z2D = $178;
             break;
            }
            case 93:  {
             $179 = ((($$6)) + 1|0);
             $180 = $$0292 ^ 1;
             $181 = $180&255;
             HEAP8[$21>>0] = $181;
             $$7$ph = $179;$$pre$phi493Z2D = $181;
             break;
            }
            default: {
             $$pre491 = $$0292 ^ 1;
             $$pre492 = $$pre491&255;
             $$7$ph = $$6;$$pre$phi493Z2D = $$pre492;
            }
            }
            $$7 = $$7$ph;
            while(1) {
             $182 = HEAP8[$$7>>0]|0;
             L81: do {
              switch ($182<<24>>24) {
              case 0:  {
               $$7312 = $$1306;$$8302 = $$1295;
               label = 154;
               break L6;
               break;
              }
              case 93:  {
               $$9 = $$7;
               break L70;
               break;
              }
              case 45:  {
               $183 = ((($$7)) + 1|0);
               $184 = HEAP8[$183>>0]|0;
               switch ($184<<24>>24) {
               case 93: case 0:  {
                $$8 = $$7;$195 = 45;
                break L81;
                break;
               }
               default: {
               }
               }
               $185 = ((($$7)) + -1|0);
               $186 = HEAP8[$185>>0]|0;
               $187 = ($186&255)<($184&255);
               if ($187) {
                $188 = $186&255;
                $$0286411 = $188;
                while(1) {
                 $189 = (($$0286411) + 1)|0;
                 $190 = (($5) + ($189)|0);
                 HEAP8[$190>>0] = $$pre$phi493Z2D;
                 $191 = HEAP8[$183>>0]|0;
                 $192 = $191&255;
                 $193 = ($189|0)<($192|0);
                 if ($193) {
                  $$0286411 = $189;
                 } else {
                  $$8 = $183;$195 = $191;
                  break;
                 }
                }
               } else {
                $$8 = $183;$195 = $184;
               }
               break;
              }
              default: {
               $$8 = $$7;$195 = $182;
              }
              }
             } while(0);
             $194 = $195&255;
             $196 = (($194) + 1)|0;
             $197 = (($5) + ($196)|0);
             HEAP8[$197>>0] = $$pre$phi493Z2D;
             $198 = ((($$8)) + 1|0);
             $$7 = $198;
            }
           }
          } while(0);
          $199 = (($$1267) + 1)|0;
          $200 = $166 ? $199 : 31;
          $201 = ($$$0268|0)==(1);
          $202 = ($$0270|0)!=(0);
          L89: do {
           if ($201) {
            if ($202) {
             $203 = $200 << 2;
             $204 = (_malloc($203)|0);
             $205 = ($204|0)==(0|0);
             if ($205) {
              $$7312 = 0;$$8302 = $204;
              label = 154;
              break L6;
             } else {
              $$2296 = $204;
             }
            } else {
             $$2296 = $$0293;
            }
            HEAP32[$4>>2] = 0;
            HEAP32[$$sroa$2$0$$sroa_idx13>>2] = 0;
            $$0276$ph = $200;$$0278$ph = 0;$$3297$ph = $$2296;
            L95: while(1) {
             $206 = ($$3297$ph|0)==(0|0);
             $$0278$ph331 = $$0278$ph;
             while(1) {
              L99: while(1) {
               $207 = HEAP32[$14>>2]|0;
               $208 = HEAP32[$15>>2]|0;
               $209 = ($207>>>0)<($208>>>0);
               if ($209) {
                $210 = ((($207)) + 1|0);
                HEAP32[$14>>2] = $210;
                $211 = HEAP8[$207>>0]|0;
                $212 = $211&255;
                $215 = $212;
               } else {
                $213 = (___shgetc($0)|0);
                $215 = $213;
               }
               $214 = (($215) + 1)|0;
               $216 = (($5) + ($214)|0);
               $217 = HEAP8[$216>>0]|0;
               $218 = ($217<<24>>24)==(0);
               if ($218) {
                break L95;
               }
               $219 = $215&255;
               HEAP8[$7>>0] = $219;
               $220 = (_mbrtowc($6,$7,1,$4)|0);
               switch ($220|0) {
               case -1:  {
                $$7312 = 0;$$8302 = $$3297$ph;
                label = 154;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L99;
               }
               }
              }
              if ($206) {
               $$1279 = $$0278$ph331;
              } else {
               $221 = (($$3297$ph) + ($$0278$ph331<<2)|0);
               $222 = (($$0278$ph331) + 1)|0;
               $223 = HEAP32[$6>>2]|0;
               HEAP32[$221>>2] = $223;
               $$1279 = $222;
              }
              $224 = ($$1279|0)==($$0276$ph|0);
              $or$cond = $202 & $224;
              if ($or$cond) {
               break;
              } else {
               $$0278$ph331 = $$1279;
              }
             }
             $factor327 = $$0276$ph << 1;
             $225 = $factor327 | 1;
             $226 = $225 << 2;
             $227 = (_realloc($$3297$ph,$226)|0);
             $228 = ($227|0)==(0|0);
             if ($228) {
              $$7312 = 0;$$8302 = $$3297$ph;
              label = 154;
              break L6;
             } else {
              $$0278$ph$phi = $$0276$ph;$$0276$ph = $225;$$3297$ph = $227;$$0278$ph = $$0278$ph$phi;
             }
            }
            $229 = (_mbsinit($4)|0);
            $230 = ($229|0)==(0);
            if ($230) {
             $$7312 = 0;$$8302 = $$3297$ph;
             label = 154;
             break L6;
            } else {
             $$4282 = $$0278$ph331;$$4309 = 0;$$5299 = $$3297$ph;
            }
           } else {
            if ($202) {
             $231 = (_malloc($200)|0);
             $232 = ($231|0)==(0|0);
             if ($232) {
              $$7312 = 0;$$8302 = 0;
              label = 154;
              break L6;
             } else {
              $$1277$ph = $200;$$2280$ph = 0;$$2307$ph = $231;
             }
             while(1) {
              $$2280 = $$2280$ph;
              while(1) {
               $233 = HEAP32[$14>>2]|0;
               $234 = HEAP32[$15>>2]|0;
               $235 = ($233>>>0)<($234>>>0);
               if ($235) {
                $236 = ((($233)) + 1|0);
                HEAP32[$14>>2] = $236;
                $237 = HEAP8[$233>>0]|0;
                $238 = $237&255;
                $241 = $238;
               } else {
                $239 = (___shgetc($0)|0);
                $241 = $239;
               }
               $240 = (($241) + 1)|0;
               $242 = (($5) + ($240)|0);
               $243 = HEAP8[$242>>0]|0;
               $244 = ($243<<24>>24)==(0);
               if ($244) {
                $$4282 = $$2280;$$4309 = $$2307$ph;$$5299 = 0;
                break L89;
               }
               $245 = $241&255;
               $246 = (($$2280) + 1)|0;
               $247 = (($$2307$ph) + ($$2280)|0);
               HEAP8[$247>>0] = $245;
               $248 = ($246|0)==($$1277$ph|0);
               if ($248) {
                break;
               } else {
                $$2280 = $246;
               }
              }
              $factor = $$1277$ph << 1;
              $249 = $factor | 1;
              $250 = (_realloc($$2307$ph,$249)|0);
              $251 = ($250|0)==(0|0);
              if ($251) {
               $$7312 = $$2307$ph;$$8302 = 0;
               label = 154;
               break L6;
              } else {
               $$2280$ph$phi = $$1277$ph;$$1277$ph = $249;$$2307$ph = $250;$$2280$ph = $$2280$ph$phi;
              }
             }
            }
            $252 = ($$0293|0)==(0|0);
            if ($252) {
             $270 = $162;
             while(1) {
              $268 = HEAP32[$14>>2]|0;
              $269 = ($268>>>0)<($270>>>0);
              if ($269) {
               $271 = ((($268)) + 1|0);
               HEAP32[$14>>2] = $271;
               $272 = HEAP8[$268>>0]|0;
               $273 = $272&255;
               $276 = $273;
              } else {
               $274 = (___shgetc($0)|0);
               $276 = $274;
              }
              $275 = (($276) + 1)|0;
              $277 = (($5) + ($275)|0);
              $278 = HEAP8[$277>>0]|0;
              $279 = ($278<<24>>24)==(0);
              if ($279) {
               $$4282 = 0;$$4309 = 0;$$5299 = 0;
               break L89;
              }
              $$pre489 = HEAP32[$15>>2]|0;
              $270 = $$pre489;
             }
            } else {
             $$3281 = 0;$255 = $162;
             while(1) {
              $253 = HEAP32[$14>>2]|0;
              $254 = ($253>>>0)<($255>>>0);
              if ($254) {
               $256 = ((($253)) + 1|0);
               HEAP32[$14>>2] = $256;
               $257 = HEAP8[$253>>0]|0;
               $258 = $257&255;
               $261 = $258;
              } else {
               $259 = (___shgetc($0)|0);
               $261 = $259;
              }
              $260 = (($261) + 1)|0;
              $262 = (($5) + ($260)|0);
              $263 = HEAP8[$262>>0]|0;
              $264 = ($263<<24>>24)==(0);
              if ($264) {
               $$4282 = $$3281;$$4309 = $$0293;$$5299 = 0;
               break L89;
              }
              $265 = $261&255;
              $266 = (($$3281) + 1)|0;
              $267 = (($$0293) + ($$3281)|0);
              HEAP8[$267>>0] = $265;
              $$pre488 = HEAP32[$15>>2]|0;
              $$3281 = $266;$255 = $$pre488;
             }
            }
           }
          } while(0);
          $280 = HEAP32[$15>>2]|0;
          $281 = ($280|0)==(0|0);
          if ($281) {
           $$pre490 = HEAP32[$14>>2]|0;
           $288 = $$pre490;
          } else {
           $282 = HEAP32[$14>>2]|0;
           $283 = ((($282)) + -1|0);
           HEAP32[$14>>2] = $283;
           $284 = $283;
           $288 = $284;
          }
          $285 = HEAP32[$16>>2]|0;
          $286 = HEAP32[$17>>2]|0;
          $287 = (($288) - ($286))|0;
          $289 = (($287) + ($285))|0;
          $290 = ($289|0)==(0);
          if ($290) {
           $$10304 = $$5299;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$4309;
           break L6;
          }
          $$not = $166 ^ 1;
          $291 = ($289|0)==($$1267|0);
          $or$cond318 = $291 | $$not;
          if (!($or$cond318)) {
           $$10304 = $$5299;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$4309;
           break L6;
          }
          do {
           if ($202) {
            if ($201) {
             HEAP32[$$0293>>2] = $$5299;
             break;
            } else {
             HEAP32[$$0293>>2] = $$4309;
             break;
            }
           }
          } while(0);
          if ($166) {
           $$10 = $$9;$$5310 = $$4309;$$6300 = $$5299;
          } else {
           $292 = ($$5299|0)==(0|0);
           if (!($292)) {
            $293 = (($$5299) + ($$4282<<2)|0);
            HEAP32[$293>>2] = 0;
           }
           $294 = ($$4309|0)==(0|0);
           if ($294) {
            $$10 = $$9;$$5310 = 0;$$6300 = $$5299;
            break L68;
           }
           $295 = (($$4309) + ($$4282)|0);
           HEAP8[$295>>0] = 0;
           $$10 = $$9;$$5310 = $$4309;$$6300 = $$5299;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $$0272 = 16;
          label = 136;
          break;
         }
         case 111:  {
          $$0272 = 8;
          label = 136;
          break;
         }
         case 117: case 100:  {
          $$0272 = 10;
          label = 136;
          break;
         }
         case 105:  {
          $$0272 = 0;
          label = 136;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $313 = (+___floatscan($0,$$$0268,0));
          $314 = HEAP32[$16>>2]|0;
          $315 = HEAP32[$14>>2]|0;
          $316 = HEAP32[$17>>2]|0;
          $317 = (($316) - ($315))|0;
          $318 = ($314|0)==($317|0);
          if ($318) {
           $$10304 = $$1295;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$1306;
           break L6;
          }
          $319 = ($$0293|0)==(0|0);
          if ($319) {
           $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
          } else {
           switch ($$$0268|0) {
           case 0:  {
            $320 = $313;
            HEAPF32[$$0293>>2] = $320;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L68;
            break;
           }
           case 1:  {
            HEAPF64[$$0293>>3] = $313;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L68;
            break;
           }
           case 2:  {
            HEAPF64[$$0293>>3] = $313;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L68;
            break;
           }
           default: {
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L68;
           }
           }
          }
          break;
         }
         default: {
          $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
         }
         }
        } while(0);
        L169: do {
         if ((label|0) == 136) {
          label = 0;
          $296 = (___intscan($0,$$0272,0,-1,-1)|0);
          $297 = tempRet0;
          $298 = HEAP32[$16>>2]|0;
          $299 = HEAP32[$14>>2]|0;
          $300 = HEAP32[$17>>2]|0;
          $301 = (($300) - ($299))|0;
          $302 = ($298|0)==($301|0);
          if ($302) {
           $$10304 = $$1295;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$1306;
           break L6;
          }
          $303 = ($$|0)==(112);
          $304 = ($$0293|0)!=(0|0);
          $or$cond3 = $304 & $303;
          if ($or$cond3) {
           $305 = $296;
           HEAP32[$$0293>>2] = $305;
           $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
           break;
          }
          $306 = ($$0293|0)==(0|0);
          if ($306) {
           $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
          } else {
           switch ($$$0268|0) {
           case -2:  {
            $307 = $296&255;
            HEAP8[$$0293>>0] = $307;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           case -1:  {
            $308 = $296&65535;
            HEAP16[$$0293>>1] = $308;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           case 0:  {
            HEAP32[$$0293>>2] = $296;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           case 1:  {
            HEAP32[$$0293>>2] = $296;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           case 3:  {
            $309 = $$0293;
            $310 = $309;
            HEAP32[$310>>2] = $296;
            $311 = (($309) + 4)|0;
            $312 = $311;
            HEAP32[$312>>2] = $297;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           default: {
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
           }
           }
          }
         }
        } while(0);
        $321 = HEAP32[$16>>2]|0;
        $322 = HEAP32[$14>>2]|0;
        $323 = HEAP32[$17>>2]|0;
        $324 = (($321) + ($$1284))|0;
        $325 = (($324) + ($322))|0;
        $326 = (($325) - ($323))|0;
        $not$ = ($$0293|0)!=(0|0);
        $327 = $not$&1;
        $$0288$ = (($327) + ($$0288416))|0;
        $$11 = $$10;$$1289 = $$0288$;$$2285 = $326;$$6311 = $$5310;$$7301 = $$6300;
        break L8;
       }
      } while(0);
      $57 = $54&1;
      $58 = (($$0273420) + ($57)|0);
      ___shlim($0,0);
      $59 = HEAP32[$14>>2]|0;
      $60 = HEAP32[$15>>2]|0;
      $61 = ($59>>>0)<($60>>>0);
      if ($61) {
       $62 = ((($59)) + 1|0);
       HEAP32[$14>>2] = $62;
       $63 = HEAP8[$59>>0]|0;
       $64 = $63&255;
       $68 = $64;
      } else {
       $65 = (___shgetc($0)|0);
       $68 = $65;
      }
      $66 = HEAP8[$58>>0]|0;
      $67 = $66&255;
      $69 = ($68|0)==($67|0);
      if (!($69)) {
       label = 22;
       break L6;
      }
      $76 = (($$0283419) + 1)|0;
      $$11 = $58;$$1289 = $$0288416;$$2285 = $76;$$6311 = $$0305414;$$7301 = $$0294415;
     } else {
      $$1274 = $$0273420;
      while(1) {
       $28 = ((($$1274)) + 1|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29&255;
       $31 = (_isspace($30)|0);
       $32 = ($31|0)==(0);
       if ($32) {
        break;
       } else {
        $$1274 = $28;
       }
      }
      ___shlim($0,0);
      while(1) {
       $33 = HEAP32[$14>>2]|0;
       $34 = HEAP32[$15>>2]|0;
       $35 = ($33>>>0)<($34>>>0);
       if ($35) {
        $36 = ((($33)) + 1|0);
        HEAP32[$14>>2] = $36;
        $37 = HEAP8[$33>>0]|0;
        $38 = $37&255;
        $40 = $38;
       } else {
        $39 = (___shgetc($0)|0);
        $40 = $39;
       }
       $41 = (_isspace($40)|0);
       $42 = ($41|0)==(0);
       if ($42) {
        break;
       }
      }
      $43 = HEAP32[$15>>2]|0;
      $44 = ($43|0)==(0|0);
      if ($44) {
       $$pre = HEAP32[$14>>2]|0;
       $52 = $$pre;
      } else {
       $45 = HEAP32[$14>>2]|0;
       $46 = ((($45)) + -1|0);
       HEAP32[$14>>2] = $46;
       $47 = $46;
       $52 = $47;
      }
      $48 = HEAP32[$16>>2]|0;
      $49 = HEAP32[$17>>2]|0;
      $50 = (($48) + ($$0283419))|0;
      $51 = (($50) + ($52))|0;
      $53 = (($51) - ($49))|0;
      $$11 = $$1274;$$1289 = $$0288416;$$2285 = $53;$$6311 = $$0305414;$$7301 = $$0294415;
     }
    } while(0);
    $328 = ((($$11)) + 1|0);
    $329 = HEAP8[$328>>0]|0;
    $330 = ($329<<24>>24)==(0);
    if ($330) {
     $$3291 = $$1289;
     break L4;
    } else {
     $$0273420 = $328;$$0283419 = $$2285;$$0288416 = $$1289;$$0294415 = $$7301;$$0305414 = $$6311;$25 = $329;
    }
   }
   if ((label|0) == 22) {
    $70 = HEAP32[$15>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = HEAP32[$14>>2]|0;
     $73 = ((($72)) + -1|0);
     HEAP32[$14>>2] = $73;
    }
    $74 = ($68|0)>(-1);
    $75 = ($$0288416|0)!=(0);
    $or$cond5 = $75 | $74;
    if ($or$cond5) {
     $$3291 = $$0288416;
     break;
    } else {
     $$1271 = 0;$$8313 = $$0305414;$$9303 = $$0294415;
     label = 155;
    }
   }
   else if ((label|0) == 154) {
    $$old4 = ($$0288416|0)==(0);
    if ($$old4) {
     $$1271 = $$0270;$$8313 = $$7312;$$9303 = $$8302;
     label = 155;
    } else {
     $$10304 = $$8302;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$7312;
    }
   }
   if ((label|0) == 155) {
    $$10304 = $$9303;$$2 = $$1271;$$2290 = -1;$$9314 = $$8313;
   }
   $331 = ($$2|0)==(0);
   if ($331) {
    $$3291 = $$2290;
   } else {
    _free($$9314);
    _free($$10304);
    $$3291 = $$2290;
   }
  }
 } while(0);
 $333 = ($332|0)==(0);
 if (!($333)) {
  ___unlockfile($0);
 }
 STACKTOP = sp;return ($$3291|0);
}
function _mbsinit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $5 = 1;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0);
  $5 = $3;
 }
 $4 = $5&1;
 return ($4|0);
}
function ___string_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$027 = 0, $$027$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 256)|0;
 $6 = (_memchr($4,0,$5)|0);
 $7 = ($6|0)==(0|0);
 $8 = $6;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $$027 = $7 ? $5 : $10;
 $11 = ($$027>>>0)<($2>>>0);
 $$027$ = $11 ? $$027 : $2;
 _memcpy(($1|0),($4|0),($$027$|0))|0;
 $12 = (($4) + ($$027$)|0);
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = (($4) + ($$027)|0);
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = $14;
 HEAP32[$3>>2] = $14;
 return ($$027$|0);
}
function _fseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___fseeko($0,$1,$2)|0);
 return ($3|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___fseeko($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $7 = (___lockfile($0)|0);
  $phitmp = ($7|0)==(0);
  $8 = (___fseeko_unlocked($0,$1,$2)|0);
  if ($phitmp) {
   $9 = $8;
  } else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else {
  $6 = (___fseeko_unlocked($0,$1,$2)|0);
  $9 = $6;
 }
 return ($9|0);
}
function ___fseeko_unlocked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) - ($5))|0;
  $9 = (($8) + ($7))|0;
  $$019 = $9;
 } else {
  $$019 = $1;
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 if ($14) {
  $15 = ((($0)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiii[$16 & 127]($0,0,0)|0);
  $17 = HEAP32[$10>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($0)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $20 = ((($0)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 127]($0,$$019,$2)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   $$0 = -1;
  } else {
   $24 = ((($0)) + 8|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   $27 = $26 & -17;
   HEAP32[$0>>2] = $27;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in16$i = 0, $$014$lcssa$i = 0, $$01415$i = 0, $$016$lcssa$i = 0, $$01618$i = 0, $$0165$i = 0, $$0167$i = 0, $$0168$i = 0, $$0169$i = 0, $$0174$ph$ph$lcssa217$i = 0, $$0174$ph$ph$lcssa217329$i = 0, $$0174$ph$ph256$i = 0, $$0178244$i = 0, $$018$lcssa$i = 0, $$0182$ph197$ph255$i = 0, $$0182$ph197250$i = 0, $$0182$ph262$i = 0, $$01820$i = 0, $$0184$ph$lcssa$i = 0;
 var $$0184$ph$lcssa328$i = 0, $$0184$ph261$i = 0, $$0186265$i = 0, $$019$i = 0, $$021$i = 0, $$1175$$0174$i = 0, $$1175$ph$ph$lcssa208$i = 0, $$1175$ph$ph235$i = 0, $$1179224$i = 0, $$1183$ph193$ph234$i = 0, $$1183$ph193229$i = 0, $$1183$ph241$i = 0, $$1185$$0184$$i = 0, $$1185$$0184$i = 0, $$1185$ph$lcssa$i = 0, $$1185$ph240$i = 0, $$2180$i = 0, $$3$i = 0, $$3172$i = 0, $$3177$i = 0;
 var $$3181223$i = 0, $$4$i = 0, $$lcssa$i = 0, $$lcssa$i23 = 0, $$pr$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $div$i = 0, $div187$i = 0, $or$cond$i = 0, $or$cond$i18 = 0, $or$cond$i21 = 0, $or$cond188$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $2 = sp + 1024|0;
 $3 = sp;
 $4 = HEAP8[$1>>0]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $$0 = $0;
  } else {
   $6 = $4 << 24 >> 24;
   $7 = (_strchr($0,$6)|0);
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$0 = 0;
   } else {
    $9 = ((($1)) + 1|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $$0 = $7;
    } else {
     $12 = ((($7)) + 1|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0 = 0;
     } else {
      $15 = ((($1)) + 2|0);
      $16 = HEAP8[$15>>0]|0;
      $17 = ($16<<24>>24)==(0);
      if ($17) {
       $18 = $4&255;
       $19 = $18 << 8;
       $20 = $10&255;
       $21 = $20 | $19;
       $22 = HEAP8[$7>>0]|0;
       $23 = $22&255;
       $24 = $23 << 8;
       $25 = $13&255;
       $26 = $24 | $25;
       $$0$in16$i = $26;$$01415$i = $12;$237 = $13;
       while(1) {
        $27 = $$0$in16$i & 65535;
        $28 = ($27|0)==($21|0);
        if ($28) {
         $$014$lcssa$i = $$01415$i;$35 = $237;
         break;
        }
        $29 = $27 << 8;
        $30 = ((($$01415$i)) + 1|0);
        $31 = HEAP8[$30>>0]|0;
        $32 = $31&255;
        $33 = $32 | $29;
        $34 = ($31<<24>>24)==(0);
        if ($34) {
         $$014$lcssa$i = $30;$35 = 0;
         break;
        } else {
         $$0$in16$i = $33;$$01415$i = $30;$237 = $31;
        }
       }
       $36 = ($35<<24>>24)!=(0);
       $37 = ((($$014$lcssa$i)) + -1|0);
       $38 = $36 ? $37 : 0;
       $$0 = $38;
       break;
      }
      $39 = ((($7)) + 2|0);
      $40 = HEAP8[$39>>0]|0;
      $41 = ($40<<24>>24)==(0);
      if ($41) {
       $$0 = 0;
      } else {
       $42 = ((($1)) + 3|0);
       $43 = HEAP8[$42>>0]|0;
       $44 = ($43<<24>>24)==(0);
       if ($44) {
        $45 = $4&255;
        $46 = $45 << 24;
        $47 = $10&255;
        $48 = $47 << 16;
        $49 = $48 | $46;
        $50 = $16&255;
        $51 = $50 << 8;
        $52 = $49 | $51;
        $53 = HEAP8[$7>>0]|0;
        $54 = $53&255;
        $55 = $54 << 24;
        $56 = $13&255;
        $57 = $56 << 16;
        $58 = $40&255;
        $59 = $58 << 8;
        $60 = $59 | $57;
        $61 = $60 | $55;
        $62 = ($61|0)==($52|0);
        if ($62) {
         $$016$lcssa$i = $39;$$lcssa$i = $40;
        } else {
         $$01618$i = $39;$$019$i = $61;
         while(1) {
          $63 = ((($$01618$i)) + 1|0);
          $64 = HEAP8[$63>>0]|0;
          $65 = $64&255;
          $66 = $65 | $$019$i;
          $67 = $66 << 8;
          $68 = ($64<<24>>24)==(0);
          $69 = ($67|0)==($52|0);
          $or$cond$i18 = $68 | $69;
          if ($or$cond$i18) {
           $$016$lcssa$i = $63;$$lcssa$i = $64;
           break;
          } else {
           $$01618$i = $63;$$019$i = $67;
          }
         }
        }
        $70 = ($$lcssa$i<<24>>24)!=(0);
        $71 = ((($$016$lcssa$i)) + -2|0);
        $72 = $70 ? $71 : 0;
        $$0 = $72;
        break;
       }
       $73 = ((($7)) + 3|0);
       $74 = HEAP8[$73>>0]|0;
       $75 = ($74<<24>>24)==(0);
       if ($75) {
        $$0 = 0;
       } else {
        $76 = ((($1)) + 4|0);
        $77 = HEAP8[$76>>0]|0;
        $78 = ($77<<24>>24)==(0);
        if ($78) {
         $79 = $4&255;
         $80 = $79 << 24;
         $81 = $10&255;
         $82 = $81 << 16;
         $83 = $82 | $80;
         $84 = $16&255;
         $85 = $84 << 8;
         $86 = $83 | $85;
         $87 = $43&255;
         $88 = $86 | $87;
         $89 = HEAP8[$7>>0]|0;
         $90 = $89&255;
         $91 = $90 << 24;
         $92 = $13&255;
         $93 = $92 << 16;
         $94 = $40&255;
         $95 = $94 << 8;
         $96 = $74&255;
         $97 = $95 | $93;
         $98 = $97 | $96;
         $99 = $98 | $91;
         $100 = ($99|0)==($88|0);
         if ($100) {
          $$018$lcssa$i = $73;$$lcssa$i23 = $74;
         } else {
          $$01820$i = $73;$$021$i = $99;
          while(1) {
           $101 = $$021$i << 8;
           $102 = ((($$01820$i)) + 1|0);
           $103 = HEAP8[$102>>0]|0;
           $104 = $103&255;
           $105 = $104 | $101;
           $106 = ($103<<24>>24)==(0);
           $107 = ($105|0)==($88|0);
           $or$cond$i21 = $106 | $107;
           if ($or$cond$i21) {
            $$018$lcssa$i = $102;$$lcssa$i23 = $103;
            break;
           } else {
            $$01820$i = $102;$$021$i = $105;
           }
          }
         }
         $108 = ($$lcssa$i23<<24>>24)!=(0);
         $109 = ((($$018$lcssa$i)) + -3|0);
         $110 = $108 ? $109 : 0;
         $$0 = $110;
         break;
        }
        ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
        $$0186265$i = 0;$115 = $4;
        while(1) {
         $111 = (($7) + ($$0186265$i)|0);
         $112 = HEAP8[$111>>0]|0;
         $113 = ($112<<24>>24)==(0);
         if ($113) {
          $$3$i = 0;
          break;
         }
         $114 = $115 & 31;
         $116 = $114&255;
         $117 = 1 << $116;
         $div187$i = ($115&255) >>> 5;
         $118 = $div187$i&255;
         $119 = (($2) + ($118<<2)|0);
         $120 = HEAP32[$119>>2]|0;
         $121 = $120 | $117;
         HEAP32[$119>>2] = $121;
         $122 = (($$0186265$i) + 1)|0;
         $123 = $115&255;
         $124 = (($3) + ($123<<2)|0);
         HEAP32[$124>>2] = $122;
         $125 = (($1) + ($122)|0);
         $126 = HEAP8[$125>>0]|0;
         $127 = ($126<<24>>24)==(0);
         if ($127) {
          label = 23;
          break;
         } else {
          $$0186265$i = $122;$115 = $126;
         }
        }
        L32: do {
         if ((label|0) == 23) {
          $128 = ($122>>>0)>(1);
          L34: do {
           if ($128) {
            $$0182$ph262$i = 0;$$0184$ph261$i = -1;$238 = 1;
            L35: while(1) {
             $$0174$ph$ph256$i = 1;$$0182$ph197$ph255$i = $$0182$ph262$i;$239 = $238;
             while(1) {
              $$0182$ph197250$i = $$0182$ph197$ph255$i;$240 = $239;
              L39: while(1) {
               $$0178244$i = 1;$130 = $240;
               while(1) {
                $135 = (($$0178244$i) + ($$0184$ph261$i))|0;
                $136 = (($1) + ($135)|0);
                $137 = HEAP8[$136>>0]|0;
                $138 = (($1) + ($130)|0);
                $139 = HEAP8[$138>>0]|0;
                $140 = ($137<<24>>24)==($139<<24>>24);
                if (!($140)) {
                 break L39;
                }
                $141 = ($$0178244$i|0)==($$0174$ph$ph256$i|0);
                $133 = (($$0178244$i) + 1)|0;
                if ($141) {
                 break;
                }
                $132 = (($133) + ($$0182$ph197250$i))|0;
                $134 = ($132>>>0)<($122>>>0);
                if ($134) {
                 $$0178244$i = $133;$130 = $132;
                } else {
                 $$0174$ph$ph$lcssa217$i = $$0174$ph$ph256$i;$$0184$ph$lcssa$i = $$0184$ph261$i;
                 break L35;
                }
               }
               $142 = (($$0182$ph197250$i) + ($$0174$ph$ph256$i))|0;
               $143 = (($142) + 1)|0;
               $144 = ($143>>>0)<($122>>>0);
               if ($144) {
                $$0182$ph197250$i = $142;$240 = $143;
               } else {
                $$0174$ph$ph$lcssa217$i = $$0174$ph$ph256$i;$$0184$ph$lcssa$i = $$0184$ph261$i;
                break L35;
               }
              }
              $145 = ($137&255)>($139&255);
              $146 = (($130) - ($$0184$ph261$i))|0;
              if (!($145)) {
               break;
              }
              $129 = (($130) + 1)|0;
              $131 = ($129>>>0)<($122>>>0);
              if ($131) {
               $$0174$ph$ph256$i = $146;$$0182$ph197$ph255$i = $130;$239 = $129;
              } else {
               $$0174$ph$ph$lcssa217$i = $146;$$0184$ph$lcssa$i = $$0184$ph261$i;
               break L35;
              }
             }
             $147 = (($$0182$ph197250$i) + 1)|0;
             $148 = (($$0182$ph197250$i) + 2)|0;
             $149 = ($148>>>0)<($122>>>0);
             if ($149) {
              $$0182$ph262$i = $147;$$0184$ph261$i = $$0182$ph197250$i;$238 = $148;
             } else {
              $$0174$ph$ph$lcssa217$i = 1;$$0184$ph$lcssa$i = $$0182$ph197250$i;
              break;
             }
            }
            $$1183$ph241$i = 0;$$1185$ph240$i = -1;$241 = 1;
            while(1) {
             $$1175$ph$ph235$i = 1;$$1183$ph193$ph234$i = $$1183$ph241$i;$243 = $241;
             while(1) {
              $$1183$ph193229$i = $$1183$ph193$ph234$i;$242 = $243;
              L54: while(1) {
               $$1179224$i = 1;$157 = $242;
               while(1) {
                $153 = (($$1179224$i) + ($$1185$ph240$i))|0;
                $154 = (($1) + ($153)|0);
                $155 = HEAP8[$154>>0]|0;
                $156 = (($1) + ($157)|0);
                $158 = HEAP8[$156>>0]|0;
                $159 = ($155<<24>>24)==($158<<24>>24);
                if (!($159)) {
                 break L54;
                }
                $160 = ($$1179224$i|0)==($$1175$ph$ph235$i|0);
                $151 = (($$1179224$i) + 1)|0;
                if ($160) {
                 break;
                }
                $150 = (($151) + ($$1183$ph193229$i))|0;
                $152 = ($150>>>0)<($122>>>0);
                if ($152) {
                 $$1179224$i = $151;$157 = $150;
                } else {
                 $$0174$ph$ph$lcssa217329$i = $$0174$ph$ph$lcssa217$i;$$0184$ph$lcssa328$i = $$0184$ph$lcssa$i;$$1175$ph$ph$lcssa208$i = $$1175$ph$ph235$i;$$1185$ph$lcssa$i = $$1185$ph240$i;
                 break L34;
                }
               }
               $161 = (($$1183$ph193229$i) + ($$1175$ph$ph235$i))|0;
               $162 = (($161) + 1)|0;
               $163 = ($162>>>0)<($122>>>0);
               if ($163) {
                $$1183$ph193229$i = $161;$242 = $162;
               } else {
                $$0174$ph$ph$lcssa217329$i = $$0174$ph$ph$lcssa217$i;$$0184$ph$lcssa328$i = $$0184$ph$lcssa$i;$$1175$ph$ph$lcssa208$i = $$1175$ph$ph235$i;$$1185$ph$lcssa$i = $$1185$ph240$i;
                break L34;
               }
              }
              $164 = ($155&255)<($158&255);
              $165 = (($157) - ($$1185$ph240$i))|0;
              if (!($164)) {
               break;
              }
              $169 = (($157) + 1)|0;
              $170 = ($169>>>0)<($122>>>0);
              if ($170) {
               $$1175$ph$ph235$i = $165;$$1183$ph193$ph234$i = $157;$243 = $169;
              } else {
               $$0174$ph$ph$lcssa217329$i = $$0174$ph$ph$lcssa217$i;$$0184$ph$lcssa328$i = $$0184$ph$lcssa$i;$$1175$ph$ph$lcssa208$i = $165;$$1185$ph$lcssa$i = $$1185$ph240$i;
               break L34;
              }
             }
             $166 = (($$1183$ph193229$i) + 1)|0;
             $167 = (($$1183$ph193229$i) + 2)|0;
             $168 = ($167>>>0)<($122>>>0);
             if ($168) {
              $$1183$ph241$i = $166;$$1185$ph240$i = $$1183$ph193229$i;$241 = $167;
             } else {
              $$0174$ph$ph$lcssa217329$i = $$0174$ph$ph$lcssa217$i;$$0184$ph$lcssa328$i = $$0184$ph$lcssa$i;$$1175$ph$ph$lcssa208$i = 1;$$1185$ph$lcssa$i = $$1183$ph193229$i;
              break;
             }
            }
           } else {
            $$0174$ph$ph$lcssa217329$i = 1;$$0184$ph$lcssa328$i = -1;$$1175$ph$ph$lcssa208$i = 1;$$1185$ph$lcssa$i = -1;
           }
          } while(0);
          $171 = (($$1185$ph$lcssa$i) + 1)|0;
          $172 = (($$0184$ph$lcssa328$i) + 1)|0;
          $173 = ($171>>>0)>($172>>>0);
          $$1175$$0174$i = $173 ? $$1175$ph$ph$lcssa208$i : $$0174$ph$ph$lcssa217329$i;
          $$1185$$0184$i = $173 ? $$1185$ph$lcssa$i : $$0184$ph$lcssa328$i;
          $174 = (($1) + ($$1175$$0174$i)|0);
          $175 = (($$1185$$0184$i) + 1)|0;
          $176 = (_memcmp($1,$174,$175)|0);
          $177 = ($176|0)==(0);
          if ($177) {
           $182 = (($122) - ($$1175$$0174$i))|0;
           $$0167$i = $182;$$3177$i = $$1175$$0174$i;
          } else {
           $178 = (($122) - ($$1185$$0184$i))|0;
           $179 = (($178) + -1)|0;
           $180 = ($$1185$$0184$i>>>0)>($179>>>0);
           $$1185$$0184$$i = $180 ? $$1185$$0184$i : $179;
           $181 = (($$1185$$0184$$i) + 1)|0;
           $$0167$i = 0;$$3177$i = $181;
          }
          $183 = $122 | 63;
          $184 = ($$0167$i|0)!=(0);
          $185 = (($122) - ($$3177$i))|0;
          $$0165$i = $7;$$0168$i = 0;$$0169$i = $7;
          L69: while(1) {
           $186 = $$0169$i;
           $187 = $$0165$i;
           $188 = (($186) - ($187))|0;
           $189 = ($188>>>0)<($122>>>0);
           do {
            if ($189) {
             $190 = (_memchr($$0169$i,0,$183)|0);
             $191 = ($190|0)==(0|0);
             if ($191) {
              $195 = (($$0169$i) + ($183)|0);
              $$3172$i = $195;
              break;
             } else {
              $192 = $190;
              $193 = (($192) - ($187))|0;
              $194 = ($193>>>0)<($122>>>0);
              if ($194) {
               $$3$i = 0;
               break L32;
              } else {
               $$3172$i = $190;
               break;
              }
             }
            } else {
             $$3172$i = $$0169$i;
            }
           } while(0);
           $196 = (($$0165$i) + ($$0186265$i)|0);
           $197 = HEAP8[$196>>0]|0;
           $div$i = ($197&255) >>> 5;
           $198 = $div$i&255;
           $199 = (($2) + ($198<<2)|0);
           $200 = HEAP32[$199>>2]|0;
           $201 = $197 & 31;
           $202 = $201&255;
           $203 = 1 << $202;
           $204 = $203 & $200;
           $205 = ($204|0)==(0);
           if ($205) {
            $214 = (($$0165$i) + ($122)|0);
            $$0165$i = $214;$$0168$i = 0;$$0169$i = $$3172$i;
            continue;
           }
           $206 = $197&255;
           $207 = (($3) + ($206<<2)|0);
           $208 = HEAP32[$207>>2]|0;
           $209 = (($122) - ($208))|0;
           $210 = ($209|0)==(0);
           if (!($210)) {
            $211 = ($$0168$i|0)!=(0);
            $or$cond$i = $184 & $211;
            $212 = ($209>>>0)<($$3177$i>>>0);
            $or$cond188$i = $or$cond$i & $212;
            $$2180$i = $or$cond188$i ? $185 : $209;
            $213 = (($$0165$i) + ($$2180$i)|0);
            $$0165$i = $213;$$0168$i = 0;$$0169$i = $$3172$i;
            continue;
           }
           $215 = ($175>>>0)>($$0168$i>>>0);
           $216 = $215 ? $175 : $$0168$i;
           $217 = (($1) + ($216)|0);
           $218 = HEAP8[$217>>0]|0;
           $219 = ($218<<24>>24)==(0);
           L83: do {
            if ($219) {
             $$4$i = $175;
            } else {
             $$3181223$i = $216;$$pr$i = $218;
             while(1) {
              $220 = (($$0165$i) + ($$3181223$i)|0);
              $221 = HEAP8[$220>>0]|0;
              $222 = ($$pr$i<<24>>24)==($221<<24>>24);
              if (!($222)) {
               break;
              }
              $223 = (($$3181223$i) + 1)|0;
              $224 = (($1) + ($223)|0);
              $225 = HEAP8[$224>>0]|0;
              $226 = ($225<<24>>24)==(0);
              if ($226) {
               $$4$i = $175;
               break L83;
              } else {
               $$3181223$i = $223;$$pr$i = $225;
              }
             }
             $227 = (($$3181223$i) - ($$1185$$0184$i))|0;
             $228 = (($$0165$i) + ($227)|0);
             $$0165$i = $228;$$0168$i = 0;$$0169$i = $$3172$i;
             continue L69;
            }
           } while(0);
           while(1) {
            $229 = ($$4$i>>>0)>($$0168$i>>>0);
            if (!($229)) {
             $$3$i = $$0165$i;
             break L32;
            }
            $230 = (($$4$i) + -1)|0;
            $231 = (($1) + ($230)|0);
            $232 = HEAP8[$231>>0]|0;
            $233 = (($$0165$i) + ($230)|0);
            $234 = HEAP8[$233>>0]|0;
            $235 = ($232<<24>>24)==($234<<24>>24);
            if ($235) {
             $$4$i = $230;
            } else {
             break;
            }
           }
           $236 = (($$0165$i) + ($$3177$i)|0);
           $$0165$i = $236;$$0168$i = $$0167$i;$$0169$i = $$3172$i;
          }
         }
        } while(0);
        $$0 = $$3$i;
       }
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _access($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $2 = (___syscall33(33,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _strrchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($2) + 1)|0;
 $4 = (___memrchr($0,$1,$3)|0);
 return ($4|0);
}
function ___memrchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$09 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1&255;
 $$09 = $2;
 while(1) {
  $4 = (($$09) + -1)|0;
  $5 = ($$09|0)==(0);
  if ($5) {
   $$0 = 0;
   break;
  }
  $6 = (($0) + ($4)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==($3<<24>>24);
  if ($8) {
   $$0 = $6;
   break;
  } else {
   $$09 = $4;
  }
 }
 return ($$0|0);
}
function _socket($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$018 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 64|0;
 $4 = sp + 40|0;
 HEAP32[$3>>2] = $0;
 $5 = ((($3)) + 4|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($3)) + 8|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($3)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($3)) + 16|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($3)) + 20|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $10 = (___syscall102(102,($vararg_buffer|0))|0);
 $11 = (___syscall_ret($10)|0);
 $12 = ($11|0)<(0);
 L1: do {
  if ($12) {
   $13 = (___errno_location()|0);
   $14 = HEAP32[$13>>2]|0;
   switch ($14|0) {
   case 93: case 22:  {
    break;
   }
   default: {
    $$018 = $11;
    break L1;
   }
   }
   $15 = $1 & 526336;
   $16 = ($15|0)==(0);
   if ($16) {
    $$018 = $11;
   } else {
    HEAP32[$4>>2] = $0;
    $17 = ((($4)) + 4|0);
    $18 = $1 & -526337;
    HEAP32[$17>>2] = $18;
    $19 = ((($4)) + 8|0);
    HEAP32[$19>>2] = $2;
    $20 = ((($4)) + 12|0);
    HEAP32[$20>>2] = 0;
    $21 = ((($4)) + 16|0);
    HEAP32[$21>>2] = 0;
    $22 = ((($4)) + 20|0);
    HEAP32[$22>>2] = 0;
    HEAP32[$vararg_buffer2>>2] = 1;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $4;
    $23 = (___syscall102(102,($vararg_buffer2|0))|0);
    $24 = (___syscall_ret($23)|0);
    $25 = ($24|0)<(0);
    if ($25) {
     $$018 = $24;
    } else {
     $26 = $1 & 524288;
     $27 = ($26|0)==(0);
     if (!($27)) {
      HEAP32[$vararg_buffer6>>2] = 1;
      (_fcntl($24,2,$vararg_buffer6)|0);
     }
     $28 = $1 & 2048;
     $29 = ($28|0)==(0);
     if ($29) {
      $$018 = $24;
     } else {
      $30 = (_fcntl($24,3,$vararg_buffer9)|0);
      $31 = $30 | 2048;
      HEAP32[$vararg_buffer11>>2] = $31;
      (_fcntl($24,4,$vararg_buffer11)|0);
      $$018 = $24;
     }
    }
   }
  } else {
   $$018 = $11;
  }
 } while(0);
 STACKTOP = sp;return ($$018|0);
}
function _connect($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 HEAP32[$3>>2] = $0;
 $4 = ((($3)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 $6 = ((($3)) + 8|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($3)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($3)) + 16|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($3)) + 20|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $10 = (___syscall102(102,($vararg_buffer|0))|0);
 $11 = (___syscall_ret($10)|0);
 STACKTOP = sp;return ($11|0);
}
function _send($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_sendto($0,$1,$2,$3,0,0)|0);
 return ($4|0);
}
function _sendto($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $6 = sp + 8|0;
 HEAP32[$6>>2] = $0;
 $7 = ((($6)) + 4|0);
 $8 = $1;
 HEAP32[$7>>2] = $8;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = $2;
 $10 = ((($6)) + 12|0);
 HEAP32[$10>>2] = $3;
 $11 = ((($6)) + 16|0);
 $12 = $4;
 HEAP32[$11>>2] = $12;
 $13 = ((($6)) + 20|0);
 HEAP32[$13>>2] = $5;
 HEAP32[$vararg_buffer>>2] = 11;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 $14 = (___syscall102(102,($vararg_buffer|0))|0);
 $15 = (___syscall_ret($14)|0);
 STACKTOP = sp;return ($15|0);
}
function _unlink($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $1 = (___syscall10(10,($vararg_buffer|0))|0);
 $2 = (___syscall_ret($1)|0);
 STACKTOP = sp;return ($2|0);
}
function _htons($0) {
 $0 = $0|0;
 var $rev$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev$i = (_llvm_bswap_i16(($0|0))|0);
 return ($rev$i|0);
}
function _htonl($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_llvm_bswap_i32(($0|0))|0);
 return ($1|0);
}
function _setsockopt($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = sp + 8|0;
 HEAP32[$5>>2] = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $1;
 $7 = ((($5)) + 8|0);
 HEAP32[$7>>2] = $2;
 $8 = ((($5)) + 12|0);
 $9 = $3;
 HEAP32[$8>>2] = $9;
 $10 = ((($5)) + 16|0);
 HEAP32[$10>>2] = $4;
 $11 = ((($5)) + 20|0);
 HEAP32[$11>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 $12 = (___syscall102(102,($vararg_buffer|0))|0);
 $13 = (___syscall_ret($12)|0);
 STACKTOP = sp;return ($13|0);
}
function _recvfrom($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $6 = sp + 8|0;
 HEAP32[$6>>2] = $0;
 $7 = ((($6)) + 4|0);
 $8 = $1;
 HEAP32[$7>>2] = $8;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = $2;
 $10 = ((($6)) + 12|0);
 HEAP32[$10>>2] = $3;
 $11 = ((($6)) + 16|0);
 $12 = $4;
 HEAP32[$11>>2] = $12;
 $13 = ((($6)) + 20|0);
 $14 = $5;
 HEAP32[$13>>2] = $14;
 HEAP32[$vararg_buffer>>2] = 12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 $15 = (___syscall102(102,($vararg_buffer|0))|0);
 $16 = (___syscall_ret($15)|0);
 STACKTOP = sp;return ($16|0);
}
function _freeaddrinfo($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function _strncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($0,$1,$2)|0);
 return ($0|0);
}
function ___stpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03753 = 0, $$038$lcssa = 0, $$038$lcssa79 = 0, $$03866 = 0, $$039$lcssa = 0, $$039$lcssa78 = 0, $$03965 = 0, $$041$lcssa = 0, $$041$lcssa77 = 0, $$04164 = 0, $$054 = 0, $$1$lcssa = 0, $$140$ph = 0, $$14046 = 0, $$142$ph = 0, $$14245 = 0, $$152 = 0, $$2$ph = 0;
 var $$243 = 0, $$247 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = $3 ^ $4;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = $3 & 3;
   $9 = ($8|0)!=(0);
   $10 = ($2|0)!=(0);
   $or$cond63 = $10 & $9;
   L3: do {
    if ($or$cond63) {
     $$03866 = $2;$$03965 = $1;$$04164 = $0;
     while(1) {
      $11 = HEAP8[$$03965>>0]|0;
      HEAP8[$$04164>>0] = $11;
      $12 = ($11<<24>>24)==(0);
      if ($12) {
       $$038$lcssa79 = $$03866;$$039$lcssa78 = $$03965;$$041$lcssa77 = $$04164;
       break L3;
      }
      $13 = (($$03866) + -1)|0;
      $14 = ((($$03965)) + 1|0);
      $15 = ((($$04164)) + 1|0);
      $16 = $14;
      $17 = $16 & 3;
      $18 = ($17|0)!=(0);
      $19 = ($13|0)!=(0);
      $or$cond = $19 & $18;
      if ($or$cond) {
       $$03866 = $13;$$03965 = $14;$$04164 = $15;
      } else {
       $$038$lcssa = $13;$$039$lcssa = $14;$$041$lcssa = $15;$$lcssa = $19;
       label = 5;
       break;
      }
     }
    } else {
     $$038$lcssa = $2;$$039$lcssa = $1;$$041$lcssa = $0;$$lcssa = $10;
     label = 5;
    }
   } while(0);
   if ((label|0) == 5) {
    if ($$lcssa) {
     $$038$lcssa79 = $$038$lcssa;$$039$lcssa78 = $$039$lcssa;$$041$lcssa77 = $$041$lcssa;
    } else {
     $$243 = $$041$lcssa;$$3 = 0;
     break;
    }
   }
   $20 = HEAP8[$$039$lcssa78>>0]|0;
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    $$243 = $$041$lcssa77;$$3 = $$038$lcssa79;
   } else {
    $22 = ($$038$lcssa79>>>0)>(3);
    L11: do {
     if ($22) {
      $$03753 = $$041$lcssa77;$$054 = $$039$lcssa78;$$152 = $$038$lcssa79;
      while(1) {
       $23 = HEAP32[$$054>>2]|0;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        $$0$lcssa = $$054;$$037$lcssa = $$03753;$$1$lcssa = $$152;
        break L11;
       }
       HEAP32[$$03753>>2] = $23;
       $29 = (($$152) + -4)|0;
       $30 = ((($$054)) + 4|0);
       $31 = ((($$03753)) + 4|0);
       $32 = ($29>>>0)>(3);
       if ($32) {
        $$03753 = $31;$$054 = $30;$$152 = $29;
       } else {
        $$0$lcssa = $30;$$037$lcssa = $31;$$1$lcssa = $29;
        break;
       }
      }
     } else {
      $$0$lcssa = $$039$lcssa78;$$037$lcssa = $$041$lcssa77;$$1$lcssa = $$038$lcssa79;
     }
    } while(0);
    $$140$ph = $$0$lcssa;$$142$ph = $$037$lcssa;$$2$ph = $$1$lcssa;
    label = 11;
   }
  } else {
   $$140$ph = $1;$$142$ph = $0;$$2$ph = $2;
   label = 11;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   $33 = ($$2$ph|0)==(0);
   if ($33) {
    $$243 = $$142$ph;$$3 = 0;
   } else {
    $$14046 = $$140$ph;$$14245 = $$142$ph;$$247 = $$2$ph;
    while(1) {
     $34 = HEAP8[$$14046>>0]|0;
     HEAP8[$$14245>>0] = $34;
     $35 = ($34<<24>>24)==(0);
     if ($35) {
      $$243 = $$14245;$$3 = $$247;
      break L16;
     }
     $36 = (($$247) + -1)|0;
     $37 = ((($$14046)) + 1|0);
     $38 = ((($$14245)) + 1|0);
     $39 = ($36|0)==(0);
     if ($39) {
      $$243 = $38;$$3 = 0;
      break;
     } else {
      $$14046 = $37;$$14245 = $38;$$247 = $36;
     }
    }
   }
  }
 } while(0);
 _memset(($$243|0),0,($$3|0))|0;
 return ($$243|0);
}
function _strspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01925 = 0, $$020 = 0, $$1$lcssa = 0, $$123 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0, $div21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ((($1)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $$020 = $0;
    while(1) {
     $8 = HEAP8[$$020>>0]|0;
     $9 = ($8<<24>>24)==($3<<24>>24);
     $10 = ((($$020)) + 1|0);
     if ($9) {
      $$020 = $10;
     } else {
      break;
     }
    }
    $11 = $$020;
    $12 = $0;
    $13 = (($11) - ($12))|0;
    $$0 = $13;
    break;
   } else {
    $$01925 = $1;$17 = $3;
   }
   while(1) {
    $16 = $17 & 31;
    $18 = $16&255;
    $19 = 1 << $18;
    $div21 = ($17&255) >>> 5;
    $20 = $div21&255;
    $21 = (($2) + ($20<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $22 | $19;
    HEAP32[$21>>2] = $23;
    $24 = ((($$01925)) + 1|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = ($25<<24>>24)==(0);
    if ($26) {
     break;
    } else {
     $$01925 = $24;$17 = $25;
    }
   }
   $14 = HEAP8[$0>>0]|0;
   $15 = ($14<<24>>24)==(0);
   L10: do {
    if ($15) {
     $$1$lcssa = $0;
    } else {
     $$123 = $0;$27 = $14;
     while(1) {
      $div = ($27&255) >>> 5;
      $28 = $div&255;
      $29 = (($2) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = $27 & 31;
      $32 = $31&255;
      $33 = 1 << $32;
      $34 = $30 & $33;
      $35 = ($34|0)==(0);
      if ($35) {
       $$1$lcssa = $$123;
       break L10;
      }
      $36 = ((($$123)) + 1|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = ($37<<24>>24)==(0);
      if ($38) {
       $$1$lcssa = $36;
       break;
      } else {
       $$123 = $36;$27 = $37;
      }
     }
    }
   } while(0);
   $39 = $$1$lcssa;
   $40 = $0;
   $41 = (($39) - ($40))|0;
   $$0 = $41;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ntohs($0) {
 $0 = $0|0;
 var $rev$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev$i = (_llvm_bswap_i16(($0|0))|0);
 return ($rev$i|0);
}
function _recv($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_recvfrom($0,$1,$2,$3,0,0)|0);
 return ($4|0);
}
function _select($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $4;
 $5 = (___syscall142(142,($vararg_buffer|0))|0);
 $6 = (___syscall_ret($5)|0);
 STACKTOP = sp;return ($6|0);
}
function _chmod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $2 = (___syscall15(15,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _mkdir($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $2 = (___syscall39(39,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 127]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___ftello($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($0)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___ftello_unlocked($0)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   $7 = $6;
  }
 } else {
  $4 = (___ftello_unlocked($0)|0);
  $7 = $4;
 }
 return ($7|0);
}
function ___ftello_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 128;
 $5 = ($4|0)==(0);
 if ($5) {
  $11 = 1;
 } else {
  $6 = ((($0)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7>>>0)>($9>>>0);
  $phitmp = $10 ? 2 : 1;
  $11 = $phitmp;
 }
 $12 = (FUNCTION_TABLE_iiii[$2 & 127]($0,0,$11)|0);
 $13 = ($12|0)<(0);
 if ($13) {
  $$0 = $12;
 } else {
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($0)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($12) - ($15))|0;
  $23 = (($22) + ($17))|0;
  $24 = (($23) + ($19))|0;
  $25 = (($24) - ($21))|0;
  $$0 = $25;
 }
 return ($$0|0);
}
function _fileno($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $phitmp = ($4|0)==(0);
  if (!($phitmp)) {
  }
 }
 $5 = ((($0)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = ((($1)) + 75|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($22|0)==($0|0);
   if ($23) {
    label = 10;
   } else {
    $24 = ((($1)) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($1)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25>>>0)<($27>>>0);
    if ($28) {
     $29 = $0&255;
     $30 = ((($25)) + 1|0);
     HEAP32[$24>>2] = $30;
     HEAP8[$25>>0] = $29;
     $31 = $0 & 255;
     $33 = $31;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = ((($1)) + 75|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = ($9|0)==($0|0);
   if (!($10)) {
    $11 = ((($1)) + 20|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($1)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($12>>>0)<($14>>>0);
    if ($15) {
     $16 = $0&255;
     $17 = ((($12)) + 1|0);
     HEAP32[$11>>2] = $17;
     HEAP8[$12>>0] = $16;
     $18 = $0 & 255;
     $$0 = $18;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ((($3)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(-1);
 if ($7) {
  $9 = (___lockfile($3)|0);
  $phitmp = ($9|0)==(0);
  $10 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $11 = $10;
  } else {
   ___unlockfile($3);
   $11 = $10;
  }
 } else {
  $8 = (___fwritex($0,$4,$3)|0);
  $11 = $8;
 }
 $12 = ($11|0)==($4|0);
 if ($12) {
  $14 = $2;
 } else {
  $13 = (($11>>>0) / ($1>>>0))&-1;
  $14 = $13;
 }
 return ($14|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$053$ph = 0, $$05357 = 0, $$054$ph = 0, $$05456 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ((($3)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(-1);
 if ($7) {
  $8 = (___lockfile($3)|0);
  $34 = $8;
 } else {
  $34 = 0;
 }
 $9 = ((($3)) + 74|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10 << 24 >> 24;
 $12 = (($11) + 255)|0;
 $13 = $12 | $11;
 $14 = $13&255;
 HEAP8[$9>>0] = $14;
 $15 = ((($3)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($3)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) - ($18))|0;
 $20 = ($19|0)>(0);
 $21 = $18;
 if ($20) {
  $22 = ($19>>>0)<($4>>>0);
  $$ = $22 ? $19 : $4;
  _memcpy(($0|0),($21|0),($$|0))|0;
  $23 = (($21) + ($$)|0);
  HEAP32[$17>>2] = $23;
  $24 = (($0) + ($$)|0);
  $25 = (($4) - ($$))|0;
  $$053$ph = $25;$$054$ph = $24;
 } else {
  $$053$ph = $4;$$054$ph = $0;
 }
 $26 = ($$053$ph|0)==(0);
 L7: do {
  if ($26) {
   label = 13;
  } else {
   $27 = ((($3)) + 32|0);
   $$05357 = $$053$ph;$$05456 = $$054$ph;
   while(1) {
    $28 = (___toread($3)|0);
    $29 = ($28|0)==(0);
    if (!($29)) {
     break;
    }
    $30 = HEAP32[$27>>2]|0;
    $31 = (FUNCTION_TABLE_iiii[$30 & 127]($3,$$05456,$$05357)|0);
    $32 = (($31) + 1)|0;
    $33 = ($32>>>0)<(2);
    if ($33) {
     break;
    }
    $38 = (($$05357) - ($31))|0;
    $39 = (($$05456) + ($31)|0);
    $40 = ($38|0)==(0);
    if ($40) {
     label = 13;
     break L7;
    } else {
     $$05357 = $38;$$05456 = $39;
    }
   }
   $35 = ($34|0)==(0);
   if (!($35)) {
    ___unlockfile($3);
   }
   $36 = (($4) - ($$05357))|0;
   $37 = (($36>>>0) / ($1>>>0))&-1;
   $$0 = $37;
  }
 } while(0);
 if ((label|0) == 13) {
  $41 = ($34|0)==(0);
  if ($41) {
   $$0 = $2;
  } else {
   ___unlockfile($3);
   $$0 = $2;
  }
 }
 return ($$0|0);
}
function _ftell($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ftello($0)|0);
 return ($1|0);
}
function _perror($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[2410]|0;
 $2 = (___errno_location()|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_strerror($3)|0);
 $5 = ((($1)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(-1);
 if ($7) {
  $8 = (___lockfile($1)|0);
  $14 = $8;
 } else {
  $14 = 0;
 }
 $9 = ($0|0)==(0|0);
 if (!($9)) {
  $10 = HEAP8[$0>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if (!($11)) {
   $12 = (_strlen($0)|0);
   (_fwrite($0,$12,1,$1)|0);
   (_fputc(58,$1)|0);
   (_fputc(32,$1)|0);
  }
 }
 $13 = (_strlen($4)|0);
 (_fwrite($4,$13,1,$1)|0);
 (_fputc(10,$1)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  ___unlockfile($1);
 }
 return;
}
function _rename($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $2 = (___syscall38(38,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _strtod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox($0,$1,1));
 return (+$2);
}
function _strtox($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp;
 dest=$3; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = (-1);
 $6 = ((($3)) + 44|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($3)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($3,0);
 $8 = (+___floatscan($3,$2,1));
 $9 = ((($3)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13) + ($10))|0;
 $15 = ($1|0)==(0|0);
 if (!($15)) {
  $16 = ($14|0)!=(0);
  $17 = (($0) + ($14)|0);
  $18 = $16 ? $17 : $0;
  HEAP32[$1>>2] = $18;
 }
 STACKTOP = sp;return (+$8);
}
function _atoi($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01016 = 0, $$011 = 0, $$1$ph = 0, $$112$ph = 0, $$11215 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit14 = 0, $isdigittmp = 0, $isdigittmp13 = 0, $isdigittmp17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 switch ($2|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = 0;$$112$ph = $$011;$7 = $1;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$1$ph = $$0;$$112$ph = $5;$7 = $$pre;
 }
 $6 = $7 << 24 >> 24;
 $isdigittmp13 = (($6) + -48)|0;
 $isdigit14 = ($isdigittmp13>>>0)<(10);
 if ($isdigit14) {
  $$01016 = 0;$$11215 = $$112$ph;$isdigittmp17 = $isdigittmp13;
  while(1) {
   $8 = ($$01016*10)|0;
   $9 = ((($$11215)) + 1|0);
   $10 = (($8) - ($isdigittmp17))|0;
   $11 = HEAP8[$9>>0]|0;
   $12 = $11 << 24 >> 24;
   $isdigittmp = (($12) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$01016 = $10;$$11215 = $9;$isdigittmp17 = $isdigittmp;
   } else {
    $$010$lcssa = $10;
    break;
   }
  }
 } else {
  $$010$lcssa = 0;
 }
 $13 = ($$1$ph|0)!=(0);
 $14 = (0 - ($$010$lcssa))|0;
 $15 = $13 ? $$010$lcssa : $14;
 return ($15|0);
}
function _strcspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01823 = 0, $$019$lcssa = 0, $$01921 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $div = 0, $div20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  label = 3;
 } else {
  $5 = ((($1)) + 1|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   label = 3;
  } else {
   ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
   $$01823 = $1;$16 = $3;
   while(1) {
    $15 = $16 & 31;
    $17 = $15&255;
    $18 = 1 << $17;
    $div20 = ($16&255) >>> 5;
    $19 = $div20&255;
    $20 = (($2) + ($19<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21 | $18;
    HEAP32[$20>>2] = $22;
    $23 = ((($$01823)) + 1|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = ($24<<24>>24)==(0);
    if ($25) {
     break;
    } else {
     $$01823 = $23;$16 = $24;
    }
   }
   $13 = HEAP8[$0>>0]|0;
   $14 = ($13<<24>>24)==(0);
   L7: do {
    if ($14) {
     $$019$lcssa = $0;
    } else {
     $$01921 = $0;$26 = $13;
     while(1) {
      $div = ($26&255) >>> 5;
      $27 = $div&255;
      $28 = (($2) + ($27<<2)|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = $26 & 31;
      $31 = $30&255;
      $32 = 1 << $31;
      $33 = $29 & $32;
      $34 = ($33|0)==(0);
      if (!($34)) {
       $$019$lcssa = $$01921;
       break L7;
      }
      $35 = ((($$01921)) + 1|0);
      $36 = HEAP8[$35>>0]|0;
      $37 = ($36<<24>>24)==(0);
      if ($37) {
       $$019$lcssa = $35;
       break;
      } else {
       $$01921 = $35;$26 = $36;
      }
     }
    }
   } while(0);
   $38 = $$019$lcssa;
   $39 = $0;
   $40 = (($38) - ($39))|0;
   $$0 = $40;
  }
 }
 if ((label|0) == 3) {
  $8 = $3 << 24 >> 24;
  $9 = (___strchrnul($0,$8)|0);
  $10 = $9;
  $11 = $0;
  $12 = (($10) - ($11))|0;
  $$0 = $12;
 }
 STACKTOP = sp;return ($$0|0);
}
function _strtok($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$010 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = HEAP32[6473]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 0;
  } else {
   $$010 = $3;
   label = 3;
  }
 } else {
  $$010 = $0;
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $5 = (_strspn($$010,$1)|0);
   $6 = (($$010) + ($5)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    HEAP32[6473] = 0;
    $$0 = 0;
    break;
   }
   $9 = (_strcspn($6,$1)|0);
   $10 = (($6) + ($9)|0);
   HEAP32[6473] = $10;
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    HEAP32[6473] = 0;
    $$0 = $6;
    break;
   } else {
    $13 = ((($10)) + 1|0);
    HEAP32[6473] = $13;
    HEAP8[$10>>0] = 0;
    $$0 = $6;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fsync($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $1 = (___syscall118(118,($vararg_buffer|0))|0);
 $2 = (___syscall_ret($1)|0);
 STACKTOP = sp;return ($2|0);
}
function _ftruncate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = ($1|0)<(0);
 $3 = $2 << 31 >> 31;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $4 = (___syscall194(194,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $3 = (___syscall3(3,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0190$i = 0, $$$0191$i = 0, $$$4349$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0;
 var $$024370$i = 0, $$0286$i$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$0342$i = 0, $$0343$i = 0, $$0345$i = 0, $$0351$i = 0, $$0356$i = 0, $$0357$$i = 0, $$0357$i = 0, $$0359$i = 0, $$0360$i = 0, $$0366$i = 0, $$1194$i = 0, $$1196$i = 0, $$124469$i = 0;
 var $$1290$i$i = 0, $$1292$i$i = 0, $$1341$i = 0, $$1346$i = 0, $$1361$i = 0, $$1368$i = 0, $$1372$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3348$i = 0, $$3370$i = 0, $$4$lcssa$i = 0, $$413$i = 0, $$4349$lcssa$i = 0, $$434912$i = 0, $$4355$$4$i = 0;
 var $$4355$ph$i = 0, $$435511$i = 0, $$5256$i = 0, $$723947$i = 0, $$748$i = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i205 = 0, $$pre$i208 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i206Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre9$i$i = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i204 = 0, $exitcond$i$i = 0, $not$$i$i = 0, $not$$i22$i = 0;
 var $not$7$i = 0, $or$cond$i = 0, $or$cond$i211 = 0, $or$cond1$i = 0, $or$cond1$i210 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[6474]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (25936 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[6474] = $24;
     } else {
      $25 = HEAP32[(25912)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(25904)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (25936 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[6474] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(25912)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(25916)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (25936 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[6474] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(25912)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(25904)>>2] = $84;
     HEAP32[(25916)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(25900)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (26200 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $$0189$i = $134;$$0190$i = $134;$$0191$i = $138;
     while(1) {
      $139 = ((($$0189$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $142 = ((($$0189$i)) + 20|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        break;
       } else {
        $146 = $143;
       }
      } else {
       $146 = $140;
      }
      $145 = ((($146)) + 4|0);
      $147 = HEAP32[$145>>2]|0;
      $148 = $147 & -8;
      $149 = (($148) - ($6))|0;
      $150 = ($149>>>0)<($$0191$i>>>0);
      $$$0191$i = $150 ? $149 : $$0191$i;
      $$$0190$i = $150 ? $146 : $$0190$i;
      $$0189$i = $146;$$0190$i = $$$0190$i;$$0191$i = $$$0191$i;
     }
     $151 = HEAP32[(25912)>>2]|0;
     $152 = ($$0190$i>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     }
     $153 = (($$0190$i) + ($6)|0);
     $154 = ($$0190$i>>>0)<($153>>>0);
     if (!($154)) {
      _abort();
      // unreachable;
     }
     $155 = ((($$0190$i)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$0190$i)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==($$0190$i|0);
     do {
      if ($159) {
       $169 = ((($$0190$i)) + 20|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if ($171) {
        $172 = ((($$0190$i)) + 16|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i = $173;$$1196$i = $172;
        }
       } else {
        $$1194$i = $170;$$1196$i = $169;
       }
       while(1) {
        $175 = ((($$1194$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if (!($177)) {
         $$1194$i = $176;$$1196$i = $175;
         continue;
        }
        $178 = ((($$1194$i)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         break;
        } else {
         $$1194$i = $179;$$1196$i = $178;
        }
       }
       $181 = ($$1196$i>>>0)<($151>>>0);
       if ($181) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1196$i>>2] = 0;
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $160 = ((($$0190$i)) + 8|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($161>>>0)<($151>>>0);
       if ($162) {
        _abort();
        // unreachable;
       }
       $163 = ((($161)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==($$0190$i|0);
       if (!($165)) {
        _abort();
        // unreachable;
       }
       $166 = ((($158)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==($$0190$i|0);
       if ($168) {
        HEAP32[$163>>2] = $158;
        HEAP32[$166>>2] = $161;
        $$3$i = $158;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $182 = ($156|0)==(0|0);
     do {
      if (!($182)) {
       $183 = ((($$0190$i)) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (26200 + ($184<<2)|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($$0190$i|0)==($186|0);
       if ($187) {
        HEAP32[$185>>2] = $$3$i;
        $cond$i = ($$3$i|0)==(0|0);
        if ($cond$i) {
         $188 = 1 << $184;
         $189 = $188 ^ -1;
         $190 = $108 & $189;
         HEAP32[(25900)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(25912)>>2]|0;
        $192 = ($156>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($156)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($$0190$i|0);
        if ($195) {
         HEAP32[$193>>2] = $$3$i;
        } else {
         $196 = ((($156)) + 20|0);
         HEAP32[$196>>2] = $$3$i;
        }
        $197 = ($$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(25912)>>2]|0;
       $199 = ($$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($$3$i)) + 24|0);
       HEAP32[$200>>2] = $156;
       $201 = ((($$0190$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($$0190$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(25912)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($$0191$i>>>0)<(16);
     if ($214) {
      $215 = (($$0191$i) + ($6))|0;
      $216 = $215 | 3;
      $217 = ((($$0190$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($$0190$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $6 | 3;
      $223 = ((($$0190$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $$0191$i | 1;
      $225 = ((($153)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($153) + ($$0191$i)|0);
      HEAP32[$226>>2] = $$0191$i;
      $227 = ($37|0)==(0);
      if (!($227)) {
       $228 = HEAP32[(25916)>>2]|0;
       $229 = $37 >>> 3;
       $230 = $229 << 1;
       $231 = (25936 + ($230<<2)|0);
       $232 = 1 << $229;
       $233 = $8 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $8 | $232;
        HEAP32[6474] = $235;
        $$pre$i = ((($231)) + 8|0);
        $$0187$i = $231;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $236 = ((($231)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(25912)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $237;$$pre$phi$iZ2D = $236;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $240 = ((($$0187$i)) + 12|0);
       HEAP32[$240>>2] = $228;
       $241 = ((($228)) + 8|0);
       HEAP32[$241>>2] = $$0187$i;
       $242 = ((($228)) + 12|0);
       HEAP32[$242>>2] = $231;
      }
      HEAP32[(25904)>>2] = $$0191$i;
      HEAP32[(25916)>>2] = $153;
     }
     $243 = ((($$0190$i)) + 8|0);
     $$0 = $243;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $244 = ($0>>>0)>(4294967231);
   if ($244) {
    $$0197 = -1;
   } else {
    $245 = (($0) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(25900)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$0197 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $$0356$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $$0356$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $$0356$i = $274;
      }
     }
     $275 = (26200 + ($$0356$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $$2353$i = 0;$$3$i201 = 0;$$3348$i = $249;
       label = 86;
      } else {
       $278 = ($$0356$i|0)==(31);
       $279 = $$0356$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $$0340$i = 0;$$0345$i = $249;$$0351$i = $276;$$0357$i = $282;$$0360$i = 0;
       while(1) {
        $283 = ((($$0351$i)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($$0345$i>>>0);
        if ($287) {
         $288 = ($286|0)==(0);
         if ($288) {
          $$413$i = $$0351$i;$$434912$i = 0;$$435511$i = $$0351$i;
          label = 90;
          break L123;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $286;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $289 = ((($$0351$i)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $$0357$i >>> 31;
        $292 = (((($$0351$i)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond1$i = $294 | $295;
        $$1361$i = $or$cond1$i ? $$0360$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $296&1;
        $298 = $297 ^ 1;
        $$0357$$i = $$0357$i << $298;
        if ($296) {
         $$2353$i = $$1361$i;$$3$i201 = $$1341$i;$$3348$i = $$1346$i;
         label = 86;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $293;$$0357$i = $$0357$$i;$$0360$i = $$1361$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $299 = ($$2353$i|0)==(0|0);
      $300 = ($$3$i201|0)==(0|0);
      $or$cond$i = $299 & $300;
      if ($or$cond$i) {
       $301 = 2 << $$0356$i;
       $302 = (0 - ($301))|0;
       $303 = $301 | $302;
       $304 = $247 & $303;
       $305 = ($304|0)==(0);
       if ($305) {
        $$0197 = $246;
        break;
       }
       $306 = (0 - ($304))|0;
       $307 = $304 & $306;
       $308 = (($307) + -1)|0;
       $309 = $308 >>> 12;
       $310 = $309 & 16;
       $311 = $308 >>> $310;
       $312 = $311 >>> 5;
       $313 = $312 & 8;
       $314 = $313 | $310;
       $315 = $311 >>> $313;
       $316 = $315 >>> 2;
       $317 = $316 & 4;
       $318 = $314 | $317;
       $319 = $315 >>> $317;
       $320 = $319 >>> 1;
       $321 = $320 & 2;
       $322 = $318 | $321;
       $323 = $319 >>> $321;
       $324 = $323 >>> 1;
       $325 = $324 & 1;
       $326 = $322 | $325;
       $327 = $323 >>> $325;
       $328 = (($326) + ($327))|0;
       $329 = (26200 + ($328<<2)|0);
       $330 = HEAP32[$329>>2]|0;
       $$4355$ph$i = $330;
      } else {
       $$4355$ph$i = $$2353$i;
      }
      $331 = ($$4355$ph$i|0)==(0|0);
      if ($331) {
       $$4$lcssa$i = $$3$i201;$$4349$lcssa$i = $$3348$i;
      } else {
       $$413$i = $$3$i201;$$434912$i = $$3348$i;$$435511$i = $$4355$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $332 = ((($$435511$i)) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($246))|0;
       $336 = ($335>>>0)<($$434912$i>>>0);
       $$$4349$i = $336 ? $335 : $$434912$i;
       $$4355$$4$i = $336 ? $$435511$i : $$413$i;
       $337 = ((($$435511$i)) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $338;
        label = 90;
        continue;
       }
       $340 = ((($$435511$i)) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $$4$lcssa$i = $$4355$$4$i;$$4349$lcssa$i = $$$4349$i;
        break;
       } else {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $341;
        label = 90;
       }
      }
     }
     $343 = ($$4$lcssa$i|0)==(0|0);
     if ($343) {
      $$0197 = $246;
     } else {
      $344 = HEAP32[(25904)>>2]|0;
      $345 = (($344) - ($246))|0;
      $346 = ($$4349$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[(25912)>>2]|0;
       $348 = ($$4$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($$4$lcssa$i) + ($246)|0);
       $350 = ($$4$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = ((($$4$lcssa$i)) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = ((($$4$lcssa$i)) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($$4$lcssa$i|0);
       do {
        if ($355) {
         $365 = ((($$4$lcssa$i)) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = ((($$4$lcssa$i)) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $$3370$i = 0;
           break;
          } else {
           $$1368$i = $369;$$1372$i = $368;
          }
         } else {
          $$1368$i = $366;$$1372$i = $365;
         }
         while(1) {
          $371 = ((($$1368$i)) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $$1368$i = $372;$$1372$i = $371;
           continue;
          }
          $374 = ((($$1368$i)) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $$1368$i = $375;$$1372$i = $374;
          }
         }
         $377 = ($$1372$i>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1372$i>>2] = 0;
          $$3370$i = $$1368$i;
          break;
         }
        } else {
         $356 = ((($$4$lcssa$i)) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = ((($357)) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($$4$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = ((($354)) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($$4$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $$3370$i = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if ($378) {
         $470 = $247;
        } else {
         $379 = ((($$4$lcssa$i)) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = (26200 + ($380<<2)|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($$4$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $$3370$i;
          $cond$i204 = ($$3370$i|0)==(0|0);
          if ($cond$i204) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = $247 & $385;
           HEAP32[(25900)>>2] = $386;
           $470 = $386;
           break;
          }
         } else {
          $387 = HEAP32[(25912)>>2]|0;
          $388 = ($352>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($352)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($$4$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $$3370$i;
          } else {
           $392 = ((($352)) + 20|0);
           HEAP32[$392>>2] = $$3370$i;
          }
          $393 = ($$3370$i|0)==(0|0);
          if ($393) {
           $470 = $247;
           break;
          }
         }
         $394 = HEAP32[(25912)>>2]|0;
         $395 = ($$3370$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3370$i)) + 24|0);
         HEAP32[$396>>2] = $352;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3370$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3370$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $247;
         } else {
          $406 = HEAP32[(25912)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3370$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3370$i;
           $470 = $247;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4349$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4349$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $246 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4349$lcssa$i | 1;
         $421 = ((($349)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($349) + ($$4349$lcssa$i)|0);
         HEAP32[$422>>2] = $$4349$lcssa$i;
         $423 = $$4349$lcssa$i >>> 3;
         $424 = ($$4349$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (25936 + ($425<<2)|0);
          $427 = HEAP32[6474]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[6474] = $431;
           $$pre$i205 = ((($426)) + 8|0);
           $$0366$i = $426;$$pre$phi$i206Z2D = $$pre$i205;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(25912)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0366$i = $433;$$pre$phi$i206Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i206Z2D>>2] = $349;
          $436 = ((($$0366$i)) + 12|0);
          HEAP32[$436>>2] = $349;
          $437 = ((($349)) + 8|0);
          HEAP32[$437>>2] = $$0366$i;
          $438 = ((($349)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4349$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0359$i = 0;
         } else {
          $441 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0359$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4349$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0359$i = $463;
          }
         }
         $464 = (26200 + ($$0359$i<<2)|0);
         $465 = ((($349)) + 28|0);
         HEAP32[$465>>2] = $$0359$i;
         $466 = ((($349)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0359$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(25900)>>2] = $472;
          HEAP32[$464>>2] = $349;
          $473 = ((($349)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($349)) + 12|0);
          HEAP32[$474>>2] = $349;
          $475 = ((($349)) + 8|0);
          HEAP32[$475>>2] = $349;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0359$i|0)==(31);
         $478 = $$0359$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4349$lcssa$i << $480;
         $$0342$i = $481;$$0343$i = $476;
         while(1) {
          $482 = ((($$0343$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4349$lcssa$i|0);
          if ($485) {
           label = 148;
           break;
          }
          $486 = $$0342$i >>> 31;
          $487 = (((($$0343$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0342$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 145;
           break;
          } else {
           $$0342$i = $488;$$0343$i = $489;
          }
         }
         if ((label|0) == 145) {
          $491 = HEAP32[(25912)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $349;
           $493 = ((($349)) + 24|0);
           HEAP32[$493>>2] = $$0343$i;
           $494 = ((($349)) + 12|0);
           HEAP32[$494>>2] = $349;
           $495 = ((($349)) + 8|0);
           HEAP32[$495>>2] = $349;
           break;
          }
         }
         else if ((label|0) == 148) {
          $496 = ((($$0343$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(25912)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$7$i = ($$0343$i>>>0)>=($498>>>0);
          $500 = $499 & $not$7$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $349;
           HEAP32[$496>>2] = $349;
           $502 = ((($349)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($349)) + 12|0);
           HEAP32[$503>>2] = $$0343$i;
           $504 = ((($349)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(25904)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(25916)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(25916)>>2] = $511;
   HEAP32[(25904)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(25904)>>2] = 0;
   HEAP32[(25916)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(25908)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(25908)>>2] = $526;
  $527 = HEAP32[(25920)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(25920)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[6592]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(26376)>>2] = 4096;
  HEAP32[(26372)>>2] = 4096;
  HEAP32[(26380)>>2] = -1;
  HEAP32[(26384)>>2] = -1;
  HEAP32[(26388)>>2] = 0;
  HEAP32[(26340)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[6592] = $538;
  $542 = 4096;
 } else {
  $$pre$i208 = HEAP32[(26376)>>2]|0;
  $542 = $$pre$i208;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(26336)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(26328)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i210 = $550 | $551;
  if ($or$cond1$i210) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(26340)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L255: do {
  if ($554) {
   $555 = HEAP32[(25920)>>2]|0;
   $556 = ($555|0)==(0|0);
   L257: do {
    if ($556) {
     label = 172;
    } else {
     $$0$i17$i = (26344);
     while(1) {
      $557 = HEAP32[$$0$i17$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i17$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i17$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 172;
       break L257;
      } else {
       $$0$i17$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i17$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if (!($596)) {
        $$723947$i = $589;$$748$i = $591;
        label = 190;
        break L255;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 180;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 172) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if (!($567)) {
      $568 = $566;
      $569 = HEAP32[(26372)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(26328)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i211 = $580 & $581;
      if ($or$cond$i211) {
       $582 = HEAP32[(26336)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i = $584 | $585;
        if ($or$cond2$i) {
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723947$i = $$$i;$$748$i = $566;
        label = 190;
        break L255;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 180;
       }
      }
     }
    }
   } while(0);
   L274: do {
    if ((label|0) == 180) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     do {
      if ($or$cond10$i) {
       $601 = HEAP32[(26376)>>2]|0;
       $602 = (($540) - ($$2253$ph$i))|0;
       $603 = (($602) + ($601))|0;
       $604 = (0 - ($601))|0;
       $605 = $603 & $604;
       $606 = ($605>>>0)<(2147483647);
       if ($606) {
        $607 = (_sbrk(($605|0))|0);
        $608 = ($607|0)==((-1)|0);
        if ($608) {
         (_sbrk(($597|0))|0);
         break L274;
        } else {
         $609 = (($605) + ($$2253$ph$i))|0;
         $$5256$i = $609;
         break;
        }
       } else {
        $$5256$i = $$2253$ph$i;
       }
      } else {
       $$5256$i = $$2253$ph$i;
      }
     } while(0);
     $610 = ($$2247$ph$i|0)==((-1)|0);
     if (!($610)) {
      $$723947$i = $$5256$i;$$748$i = $$2247$ph$i;
      label = 190;
      break L255;
     }
    }
   } while(0);
   $611 = HEAP32[(26340)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(26340)>>2] = $612;
   label = 187;
  } else {
   label = 187;
  }
 } while(0);
 if ((label|0) == 187) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   if ($or$cond11$i) {
    $619 = $615;
    $620 = $614;
    $621 = (($619) - ($620))|0;
    $622 = (($$0197) + 40)|0;
    $$not$i = ($621>>>0)>($622>>>0);
    if ($$not$i) {
     $$723947$i = $621;$$748$i = $614;
     label = 190;
    }
   }
  }
 }
 if ((label|0) == 190) {
  $623 = HEAP32[(26328)>>2]|0;
  $624 = (($623) + ($$723947$i))|0;
  HEAP32[(26328)>>2] = $624;
  $625 = HEAP32[(26332)>>2]|0;
  $626 = ($624>>>0)>($625>>>0);
  if ($626) {
   HEAP32[(26332)>>2] = $624;
  }
  $627 = HEAP32[(25920)>>2]|0;
  $628 = ($627|0)==(0|0);
  do {
   if ($628) {
    $629 = HEAP32[(25912)>>2]|0;
    $630 = ($629|0)==(0|0);
    $631 = ($$748$i>>>0)<($629>>>0);
    $or$cond12$i = $630 | $631;
    if ($or$cond12$i) {
     HEAP32[(25912)>>2] = $$748$i;
    }
    HEAP32[(26344)>>2] = $$748$i;
    HEAP32[(26348)>>2] = $$723947$i;
    HEAP32[(26356)>>2] = 0;
    $632 = HEAP32[6592]|0;
    HEAP32[(25932)>>2] = $632;
    HEAP32[(25928)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $633 = $$01$i$i << 1;
     $634 = (25936 + ($633<<2)|0);
     $635 = ((($634)) + 12|0);
     HEAP32[$635>>2] = $634;
     $636 = ((($634)) + 8|0);
     HEAP32[$636>>2] = $634;
     $637 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($637|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $637;
     }
    }
    $638 = (($$723947$i) + -40)|0;
    $639 = ((($$748$i)) + 8|0);
    $640 = $639;
    $641 = $640 & 7;
    $642 = ($641|0)==(0);
    $643 = (0 - ($640))|0;
    $644 = $643 & 7;
    $645 = $642 ? 0 : $644;
    $646 = (($$748$i) + ($645)|0);
    $647 = (($638) - ($645))|0;
    HEAP32[(25920)>>2] = $646;
    HEAP32[(25908)>>2] = $647;
    $648 = $647 | 1;
    $649 = ((($646)) + 4|0);
    HEAP32[$649>>2] = $648;
    $650 = (($646) + ($647)|0);
    $651 = ((($650)) + 4|0);
    HEAP32[$651>>2] = 40;
    $652 = HEAP32[(26384)>>2]|0;
    HEAP32[(25924)>>2] = $652;
   } else {
    $$024370$i = (26344);
    while(1) {
     $653 = HEAP32[$$024370$i>>2]|0;
     $654 = ((($$024370$i)) + 4|0);
     $655 = HEAP32[$654>>2]|0;
     $656 = (($653) + ($655)|0);
     $657 = ($$748$i|0)==($656|0);
     if ($657) {
      label = 200;
      break;
     }
     $658 = ((($$024370$i)) + 8|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = ($659|0)==(0|0);
     if ($660) {
      break;
     } else {
      $$024370$i = $659;
     }
    }
    if ((label|0) == 200) {
     $661 = ((($$024370$i)) + 12|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = $662 & 8;
     $664 = ($663|0)==(0);
     if ($664) {
      $665 = ($627>>>0)>=($653>>>0);
      $666 = ($627>>>0)<($$748$i>>>0);
      $or$cond50$i = $666 & $665;
      if ($or$cond50$i) {
       $667 = (($655) + ($$723947$i))|0;
       HEAP32[$654>>2] = $667;
       $668 = HEAP32[(25908)>>2]|0;
       $669 = ((($627)) + 8|0);
       $670 = $669;
       $671 = $670 & 7;
       $672 = ($671|0)==(0);
       $673 = (0 - ($670))|0;
       $674 = $673 & 7;
       $675 = $672 ? 0 : $674;
       $676 = (($627) + ($675)|0);
       $677 = (($$723947$i) - ($675))|0;
       $678 = (($677) + ($668))|0;
       HEAP32[(25920)>>2] = $676;
       HEAP32[(25908)>>2] = $678;
       $679 = $678 | 1;
       $680 = ((($676)) + 4|0);
       HEAP32[$680>>2] = $679;
       $681 = (($676) + ($678)|0);
       $682 = ((($681)) + 4|0);
       HEAP32[$682>>2] = 40;
       $683 = HEAP32[(26384)>>2]|0;
       HEAP32[(25924)>>2] = $683;
       break;
      }
     }
    }
    $684 = HEAP32[(25912)>>2]|0;
    $685 = ($$748$i>>>0)<($684>>>0);
    if ($685) {
     HEAP32[(25912)>>2] = $$748$i;
     $749 = $$748$i;
    } else {
     $749 = $684;
    }
    $686 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (26344);
    while(1) {
     $687 = HEAP32[$$124469$i>>2]|0;
     $688 = ($687|0)==($686|0);
     if ($688) {
      label = 208;
      break;
     }
     $689 = ((($$124469$i)) + 8|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = ($690|0)==(0|0);
     if ($691) {
      $$0$i$i$i = (26344);
      break;
     } else {
      $$124469$i = $690;
     }
    }
    if ((label|0) == 208) {
     $692 = ((($$124469$i)) + 12|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = $693 & 8;
     $695 = ($694|0)==(0);
     if ($695) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $696 = ((($$124469$i)) + 4|0);
      $697 = HEAP32[$696>>2]|0;
      $698 = (($697) + ($$723947$i))|0;
      HEAP32[$696>>2] = $698;
      $699 = ((($$748$i)) + 8|0);
      $700 = $699;
      $701 = $700 & 7;
      $702 = ($701|0)==(0);
      $703 = (0 - ($700))|0;
      $704 = $703 & 7;
      $705 = $702 ? 0 : $704;
      $706 = (($$748$i) + ($705)|0);
      $707 = ((($686)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($686) + ($713)|0);
      $715 = $714;
      $716 = $706;
      $717 = (($715) - ($716))|0;
      $718 = (($706) + ($$0197)|0);
      $719 = (($717) - ($$0197))|0;
      $720 = $$0197 | 3;
      $721 = ((($706)) + 4|0);
      HEAP32[$721>>2] = $720;
      $722 = ($714|0)==($627|0);
      do {
       if ($722) {
        $723 = HEAP32[(25908)>>2]|0;
        $724 = (($723) + ($719))|0;
        HEAP32[(25908)>>2] = $724;
        HEAP32[(25920)>>2] = $718;
        $725 = $724 | 1;
        $726 = ((($718)) + 4|0);
        HEAP32[$726>>2] = $725;
       } else {
        $727 = HEAP32[(25916)>>2]|0;
        $728 = ($714|0)==($727|0);
        if ($728) {
         $729 = HEAP32[(25904)>>2]|0;
         $730 = (($729) + ($719))|0;
         HEAP32[(25904)>>2] = $730;
         HEAP32[(25916)>>2] = $718;
         $731 = $730 | 1;
         $732 = ((($718)) + 4|0);
         HEAP32[$732>>2] = $731;
         $733 = (($718) + ($730)|0);
         HEAP32[$733>>2] = $730;
         break;
        }
        $734 = ((($714)) + 4|0);
        $735 = HEAP32[$734>>2]|0;
        $736 = $735 & 3;
        $737 = ($736|0)==(1);
        if ($737) {
         $738 = $735 & -8;
         $739 = $735 >>> 3;
         $740 = ($735>>>0)<(256);
         L326: do {
          if ($740) {
           $741 = ((($714)) + 8|0);
           $742 = HEAP32[$741>>2]|0;
           $743 = ((($714)) + 12|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = $739 << 1;
           $746 = (25936 + ($745<<2)|0);
           $747 = ($742|0)==($746|0);
           do {
            if (!($747)) {
             $748 = ($742>>>0)<($749>>>0);
             if ($748) {
              _abort();
              // unreachable;
             }
             $750 = ((($742)) + 12|0);
             $751 = HEAP32[$750>>2]|0;
             $752 = ($751|0)==($714|0);
             if ($752) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $753 = ($744|0)==($742|0);
           if ($753) {
            $754 = 1 << $739;
            $755 = $754 ^ -1;
            $756 = HEAP32[6474]|0;
            $757 = $756 & $755;
            HEAP32[6474] = $757;
            break;
           }
           $758 = ($744|0)==($746|0);
           do {
            if ($758) {
             $$pre9$i$i = ((($744)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $759 = ($744>>>0)<($749>>>0);
             if ($759) {
              _abort();
              // unreachable;
             }
             $760 = ((($744)) + 8|0);
             $761 = HEAP32[$760>>2]|0;
             $762 = ($761|0)==($714|0);
             if ($762) {
              $$pre$phi10$i$iZ2D = $760;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $763 = ((($742)) + 12|0);
           HEAP32[$763>>2] = $744;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $742;
          } else {
           $764 = ((($714)) + 24|0);
           $765 = HEAP32[$764>>2]|0;
           $766 = ((($714)) + 12|0);
           $767 = HEAP32[$766>>2]|0;
           $768 = ($767|0)==($714|0);
           do {
            if ($768) {
             $778 = ((($714)) + 16|0);
             $779 = ((($778)) + 4|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==(0|0);
             if ($781) {
              $782 = HEAP32[$778>>2]|0;
              $783 = ($782|0)==(0|0);
              if ($783) {
               $$3$i$i = 0;
               break;
              } else {
               $$1290$i$i = $782;$$1292$i$i = $778;
              }
             } else {
              $$1290$i$i = $780;$$1292$i$i = $779;
             }
             while(1) {
              $784 = ((($$1290$i$i)) + 20|0);
              $785 = HEAP32[$784>>2]|0;
              $786 = ($785|0)==(0|0);
              if (!($786)) {
               $$1290$i$i = $785;$$1292$i$i = $784;
               continue;
              }
              $787 = ((($$1290$i$i)) + 16|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               break;
              } else {
               $$1290$i$i = $788;$$1292$i$i = $787;
              }
             }
             $790 = ($$1292$i$i>>>0)<($749>>>0);
             if ($790) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1292$i$i>>2] = 0;
              $$3$i$i = $$1290$i$i;
              break;
             }
            } else {
             $769 = ((($714)) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770>>>0)<($749>>>0);
             if ($771) {
              _abort();
              // unreachable;
             }
             $772 = ((($770)) + 12|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773|0)==($714|0);
             if (!($774)) {
              _abort();
              // unreachable;
             }
             $775 = ((($767)) + 8|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($714|0);
             if ($777) {
              HEAP32[$772>>2] = $767;
              HEAP32[$775>>2] = $770;
              $$3$i$i = $767;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $791 = ($765|0)==(0|0);
           if ($791) {
            break;
           }
           $792 = ((($714)) + 28|0);
           $793 = HEAP32[$792>>2]|0;
           $794 = (26200 + ($793<<2)|0);
           $795 = HEAP32[$794>>2]|0;
           $796 = ($714|0)==($795|0);
           do {
            if ($796) {
             HEAP32[$794>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $797 = 1 << $793;
             $798 = $797 ^ -1;
             $799 = HEAP32[(25900)>>2]|0;
             $800 = $799 & $798;
             HEAP32[(25900)>>2] = $800;
             break L326;
            } else {
             $801 = HEAP32[(25912)>>2]|0;
             $802 = ($765>>>0)<($801>>>0);
             if ($802) {
              _abort();
              // unreachable;
             }
             $803 = ((($765)) + 16|0);
             $804 = HEAP32[$803>>2]|0;
             $805 = ($804|0)==($714|0);
             if ($805) {
              HEAP32[$803>>2] = $$3$i$i;
             } else {
              $806 = ((($765)) + 20|0);
              HEAP32[$806>>2] = $$3$i$i;
             }
             $807 = ($$3$i$i|0)==(0|0);
             if ($807) {
              break L326;
             }
            }
           } while(0);
           $808 = HEAP32[(25912)>>2]|0;
           $809 = ($$3$i$i>>>0)<($808>>>0);
           if ($809) {
            _abort();
            // unreachable;
           }
           $810 = ((($$3$i$i)) + 24|0);
           HEAP32[$810>>2] = $765;
           $811 = ((($714)) + 16|0);
           $812 = HEAP32[$811>>2]|0;
           $813 = ($812|0)==(0|0);
           do {
            if (!($813)) {
             $814 = ($812>>>0)<($808>>>0);
             if ($814) {
              _abort();
              // unreachable;
             } else {
              $815 = ((($$3$i$i)) + 16|0);
              HEAP32[$815>>2] = $812;
              $816 = ((($812)) + 24|0);
              HEAP32[$816>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $817 = ((($811)) + 4|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           if ($819) {
            break;
           }
           $820 = HEAP32[(25912)>>2]|0;
           $821 = ($818>>>0)<($820>>>0);
           if ($821) {
            _abort();
            // unreachable;
           } else {
            $822 = ((($$3$i$i)) + 20|0);
            HEAP32[$822>>2] = $818;
            $823 = ((($818)) + 24|0);
            HEAP32[$823>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $824 = (($714) + ($738)|0);
         $825 = (($738) + ($719))|0;
         $$0$i18$i = $824;$$0286$i$i = $825;
        } else {
         $$0$i18$i = $714;$$0286$i$i = $719;
        }
        $826 = ((($$0$i18$i)) + 4|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = $827 & -2;
        HEAP32[$826>>2] = $828;
        $829 = $$0286$i$i | 1;
        $830 = ((($718)) + 4|0);
        HEAP32[$830>>2] = $829;
        $831 = (($718) + ($$0286$i$i)|0);
        HEAP32[$831>>2] = $$0286$i$i;
        $832 = $$0286$i$i >>> 3;
        $833 = ($$0286$i$i>>>0)<(256);
        if ($833) {
         $834 = $832 << 1;
         $835 = (25936 + ($834<<2)|0);
         $836 = HEAP32[6474]|0;
         $837 = 1 << $832;
         $838 = $836 & $837;
         $839 = ($838|0)==(0);
         do {
          if ($839) {
           $840 = $836 | $837;
           HEAP32[6474] = $840;
           $$pre$i19$i = ((($835)) + 8|0);
           $$0294$i$i = $835;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $841 = ((($835)) + 8|0);
           $842 = HEAP32[$841>>2]|0;
           $843 = HEAP32[(25912)>>2]|0;
           $844 = ($842>>>0)<($843>>>0);
           if (!($844)) {
            $$0294$i$i = $842;$$pre$phi$i20$iZ2D = $841;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $718;
         $845 = ((($$0294$i$i)) + 12|0);
         HEAP32[$845>>2] = $718;
         $846 = ((($718)) + 8|0);
         HEAP32[$846>>2] = $$0294$i$i;
         $847 = ((($718)) + 12|0);
         HEAP32[$847>>2] = $835;
         break;
        }
        $848 = $$0286$i$i >>> 8;
        $849 = ($848|0)==(0);
        do {
         if ($849) {
          $$0295$i$i = 0;
         } else {
          $850 = ($$0286$i$i>>>0)>(16777215);
          if ($850) {
           $$0295$i$i = 31;
           break;
          }
          $851 = (($848) + 1048320)|0;
          $852 = $851 >>> 16;
          $853 = $852 & 8;
          $854 = $848 << $853;
          $855 = (($854) + 520192)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 4;
          $858 = $857 | $853;
          $859 = $854 << $857;
          $860 = (($859) + 245760)|0;
          $861 = $860 >>> 16;
          $862 = $861 & 2;
          $863 = $858 | $862;
          $864 = (14 - ($863))|0;
          $865 = $859 << $862;
          $866 = $865 >>> 15;
          $867 = (($864) + ($866))|0;
          $868 = $867 << 1;
          $869 = (($867) + 7)|0;
          $870 = $$0286$i$i >>> $869;
          $871 = $870 & 1;
          $872 = $871 | $868;
          $$0295$i$i = $872;
         }
        } while(0);
        $873 = (26200 + ($$0295$i$i<<2)|0);
        $874 = ((($718)) + 28|0);
        HEAP32[$874>>2] = $$0295$i$i;
        $875 = ((($718)) + 16|0);
        $876 = ((($875)) + 4|0);
        HEAP32[$876>>2] = 0;
        HEAP32[$875>>2] = 0;
        $877 = HEAP32[(25900)>>2]|0;
        $878 = 1 << $$0295$i$i;
        $879 = $877 & $878;
        $880 = ($879|0)==(0);
        if ($880) {
         $881 = $877 | $878;
         HEAP32[(25900)>>2] = $881;
         HEAP32[$873>>2] = $718;
         $882 = ((($718)) + 24|0);
         HEAP32[$882>>2] = $873;
         $883 = ((($718)) + 12|0);
         HEAP32[$883>>2] = $718;
         $884 = ((($718)) + 8|0);
         HEAP32[$884>>2] = $718;
         break;
        }
        $885 = HEAP32[$873>>2]|0;
        $886 = ($$0295$i$i|0)==(31);
        $887 = $$0295$i$i >>> 1;
        $888 = (25 - ($887))|0;
        $889 = $886 ? 0 : $888;
        $890 = $$0286$i$i << $889;
        $$0287$i$i = $890;$$0288$i$i = $885;
        while(1) {
         $891 = ((($$0288$i$i)) + 4|0);
         $892 = HEAP32[$891>>2]|0;
         $893 = $892 & -8;
         $894 = ($893|0)==($$0286$i$i|0);
         if ($894) {
          label = 278;
          break;
         }
         $895 = $$0287$i$i >>> 31;
         $896 = (((($$0288$i$i)) + 16|0) + ($895<<2)|0);
         $897 = $$0287$i$i << 1;
         $898 = HEAP32[$896>>2]|0;
         $899 = ($898|0)==(0|0);
         if ($899) {
          label = 275;
          break;
         } else {
          $$0287$i$i = $897;$$0288$i$i = $898;
         }
        }
        if ((label|0) == 275) {
         $900 = HEAP32[(25912)>>2]|0;
         $901 = ($896>>>0)<($900>>>0);
         if ($901) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$896>>2] = $718;
          $902 = ((($718)) + 24|0);
          HEAP32[$902>>2] = $$0288$i$i;
          $903 = ((($718)) + 12|0);
          HEAP32[$903>>2] = $718;
          $904 = ((($718)) + 8|0);
          HEAP32[$904>>2] = $718;
          break;
         }
        }
        else if ((label|0) == 278) {
         $905 = ((($$0288$i$i)) + 8|0);
         $906 = HEAP32[$905>>2]|0;
         $907 = HEAP32[(25912)>>2]|0;
         $908 = ($906>>>0)>=($907>>>0);
         $not$$i22$i = ($$0288$i$i>>>0)>=($907>>>0);
         $909 = $908 & $not$$i22$i;
         if ($909) {
          $910 = ((($906)) + 12|0);
          HEAP32[$910>>2] = $718;
          HEAP32[$905>>2] = $718;
          $911 = ((($718)) + 8|0);
          HEAP32[$911>>2] = $906;
          $912 = ((($718)) + 12|0);
          HEAP32[$912>>2] = $$0288$i$i;
          $913 = ((($718)) + 24|0);
          HEAP32[$913>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1044 = ((($706)) + 8|0);
      $$0 = $1044;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (26344);
     }
    }
    while(1) {
     $914 = HEAP32[$$0$i$i$i>>2]|0;
     $915 = ($914>>>0)>($627>>>0);
     if (!($915)) {
      $916 = ((($$0$i$i$i)) + 4|0);
      $917 = HEAP32[$916>>2]|0;
      $918 = (($914) + ($917)|0);
      $919 = ($918>>>0)>($627>>>0);
      if ($919) {
       break;
      }
     }
     $920 = ((($$0$i$i$i)) + 8|0);
     $921 = HEAP32[$920>>2]|0;
     $$0$i$i$i = $921;
    }
    $922 = ((($918)) + -47|0);
    $923 = ((($922)) + 8|0);
    $924 = $923;
    $925 = $924 & 7;
    $926 = ($925|0)==(0);
    $927 = (0 - ($924))|0;
    $928 = $927 & 7;
    $929 = $926 ? 0 : $928;
    $930 = (($922) + ($929)|0);
    $931 = ((($627)) + 16|0);
    $932 = ($930>>>0)<($931>>>0);
    $933 = $932 ? $627 : $930;
    $934 = ((($933)) + 8|0);
    $935 = ((($933)) + 24|0);
    $936 = (($$723947$i) + -40)|0;
    $937 = ((($$748$i)) + 8|0);
    $938 = $937;
    $939 = $938 & 7;
    $940 = ($939|0)==(0);
    $941 = (0 - ($938))|0;
    $942 = $941 & 7;
    $943 = $940 ? 0 : $942;
    $944 = (($$748$i) + ($943)|0);
    $945 = (($936) - ($943))|0;
    HEAP32[(25920)>>2] = $944;
    HEAP32[(25908)>>2] = $945;
    $946 = $945 | 1;
    $947 = ((($944)) + 4|0);
    HEAP32[$947>>2] = $946;
    $948 = (($944) + ($945)|0);
    $949 = ((($948)) + 4|0);
    HEAP32[$949>>2] = 40;
    $950 = HEAP32[(26384)>>2]|0;
    HEAP32[(25924)>>2] = $950;
    $951 = ((($933)) + 4|0);
    HEAP32[$951>>2] = 27;
    ;HEAP32[$934>>2]=HEAP32[(26344)>>2]|0;HEAP32[$934+4>>2]=HEAP32[(26344)+4>>2]|0;HEAP32[$934+8>>2]=HEAP32[(26344)+8>>2]|0;HEAP32[$934+12>>2]=HEAP32[(26344)+12>>2]|0;
    HEAP32[(26344)>>2] = $$748$i;
    HEAP32[(26348)>>2] = $$723947$i;
    HEAP32[(26356)>>2] = 0;
    HEAP32[(26352)>>2] = $934;
    $$0$i$i = $935;
    while(1) {
     $952 = ((($$0$i$i)) + 4|0);
     HEAP32[$952>>2] = 7;
     $953 = ((($952)) + 4|0);
     $954 = ($953>>>0)<($918>>>0);
     if ($954) {
      $$0$i$i = $952;
     } else {
      break;
     }
    }
    $955 = ($933|0)==($627|0);
    if (!($955)) {
     $956 = $933;
     $957 = $627;
     $958 = (($956) - ($957))|0;
     $959 = HEAP32[$951>>2]|0;
     $960 = $959 & -2;
     HEAP32[$951>>2] = $960;
     $961 = $958 | 1;
     $962 = ((($627)) + 4|0);
     HEAP32[$962>>2] = $961;
     HEAP32[$933>>2] = $958;
     $963 = $958 >>> 3;
     $964 = ($958>>>0)<(256);
     if ($964) {
      $965 = $963 << 1;
      $966 = (25936 + ($965<<2)|0);
      $967 = HEAP32[6474]|0;
      $968 = 1 << $963;
      $969 = $967 & $968;
      $970 = ($969|0)==(0);
      if ($970) {
       $971 = $967 | $968;
       HEAP32[6474] = $971;
       $$pre$i$i = ((($966)) + 8|0);
       $$0211$i$i = $966;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $972 = ((($966)) + 8|0);
       $973 = HEAP32[$972>>2]|0;
       $974 = HEAP32[(25912)>>2]|0;
       $975 = ($973>>>0)<($974>>>0);
       if ($975) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $973;$$pre$phi$i$iZ2D = $972;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $627;
      $976 = ((($$0211$i$i)) + 12|0);
      HEAP32[$976>>2] = $627;
      $977 = ((($627)) + 8|0);
      HEAP32[$977>>2] = $$0211$i$i;
      $978 = ((($627)) + 12|0);
      HEAP32[$978>>2] = $966;
      break;
     }
     $979 = $958 >>> 8;
     $980 = ($979|0)==(0);
     if ($980) {
      $$0212$i$i = 0;
     } else {
      $981 = ($958>>>0)>(16777215);
      if ($981) {
       $$0212$i$i = 31;
      } else {
       $982 = (($979) + 1048320)|0;
       $983 = $982 >>> 16;
       $984 = $983 & 8;
       $985 = $979 << $984;
       $986 = (($985) + 520192)|0;
       $987 = $986 >>> 16;
       $988 = $987 & 4;
       $989 = $988 | $984;
       $990 = $985 << $988;
       $991 = (($990) + 245760)|0;
       $992 = $991 >>> 16;
       $993 = $992 & 2;
       $994 = $989 | $993;
       $995 = (14 - ($994))|0;
       $996 = $990 << $993;
       $997 = $996 >>> 15;
       $998 = (($995) + ($997))|0;
       $999 = $998 << 1;
       $1000 = (($998) + 7)|0;
       $1001 = $958 >>> $1000;
       $1002 = $1001 & 1;
       $1003 = $1002 | $999;
       $$0212$i$i = $1003;
      }
     }
     $1004 = (26200 + ($$0212$i$i<<2)|0);
     $1005 = ((($627)) + 28|0);
     HEAP32[$1005>>2] = $$0212$i$i;
     $1006 = ((($627)) + 20|0);
     HEAP32[$1006>>2] = 0;
     HEAP32[$931>>2] = 0;
     $1007 = HEAP32[(25900)>>2]|0;
     $1008 = 1 << $$0212$i$i;
     $1009 = $1007 & $1008;
     $1010 = ($1009|0)==(0);
     if ($1010) {
      $1011 = $1007 | $1008;
      HEAP32[(25900)>>2] = $1011;
      HEAP32[$1004>>2] = $627;
      $1012 = ((($627)) + 24|0);
      HEAP32[$1012>>2] = $1004;
      $1013 = ((($627)) + 12|0);
      HEAP32[$1013>>2] = $627;
      $1014 = ((($627)) + 8|0);
      HEAP32[$1014>>2] = $627;
      break;
     }
     $1015 = HEAP32[$1004>>2]|0;
     $1016 = ($$0212$i$i|0)==(31);
     $1017 = $$0212$i$i >>> 1;
     $1018 = (25 - ($1017))|0;
     $1019 = $1016 ? 0 : $1018;
     $1020 = $958 << $1019;
     $$0206$i$i = $1020;$$0207$i$i = $1015;
     while(1) {
      $1021 = ((($$0207$i$i)) + 4|0);
      $1022 = HEAP32[$1021>>2]|0;
      $1023 = $1022 & -8;
      $1024 = ($1023|0)==($958|0);
      if ($1024) {
       label = 304;
       break;
      }
      $1025 = $$0206$i$i >>> 31;
      $1026 = (((($$0207$i$i)) + 16|0) + ($1025<<2)|0);
      $1027 = $$0206$i$i << 1;
      $1028 = HEAP32[$1026>>2]|0;
      $1029 = ($1028|0)==(0|0);
      if ($1029) {
       label = 301;
       break;
      } else {
       $$0206$i$i = $1027;$$0207$i$i = $1028;
      }
     }
     if ((label|0) == 301) {
      $1030 = HEAP32[(25912)>>2]|0;
      $1031 = ($1026>>>0)<($1030>>>0);
      if ($1031) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1026>>2] = $627;
       $1032 = ((($627)) + 24|0);
       HEAP32[$1032>>2] = $$0207$i$i;
       $1033 = ((($627)) + 12|0);
       HEAP32[$1033>>2] = $627;
       $1034 = ((($627)) + 8|0);
       HEAP32[$1034>>2] = $627;
       break;
      }
     }
     else if ((label|0) == 304) {
      $1035 = ((($$0207$i$i)) + 8|0);
      $1036 = HEAP32[$1035>>2]|0;
      $1037 = HEAP32[(25912)>>2]|0;
      $1038 = ($1036>>>0)>=($1037>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1037>>>0);
      $1039 = $1038 & $not$$i$i;
      if ($1039) {
       $1040 = ((($1036)) + 12|0);
       HEAP32[$1040>>2] = $627;
       HEAP32[$1035>>2] = $627;
       $1041 = ((($627)) + 8|0);
       HEAP32[$1041>>2] = $1036;
       $1042 = ((($627)) + 12|0);
       HEAP32[$1042>>2] = $$0207$i$i;
       $1043 = ((($627)) + 24|0);
       HEAP32[$1043>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1045 = HEAP32[(25908)>>2]|0;
  $1046 = ($1045>>>0)>($$0197>>>0);
  if ($1046) {
   $1047 = (($1045) - ($$0197))|0;
   HEAP32[(25908)>>2] = $1047;
   $1048 = HEAP32[(25920)>>2]|0;
   $1049 = (($1048) + ($$0197)|0);
   HEAP32[(25920)>>2] = $1049;
   $1050 = $1047 | 1;
   $1051 = ((($1049)) + 4|0);
   HEAP32[$1051>>2] = $1050;
   $1052 = $$0197 | 3;
   $1053 = ((($1048)) + 4|0);
   HEAP32[$1053>>2] = $1052;
   $1054 = ((($1048)) + 8|0);
   $$0 = $1054;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1055 = (___errno_location()|0);
 HEAP32[$1055>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381 = 0, $$0382 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1388 = 0, $$1396 = 0, $$1400 = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi439Z2D = 0, $$pre$phi441Z2D = 0, $$pre$phiZ2D = 0, $$pre438 = 0;
 var $$pre440 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond418 = 0, $cond419 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(25912)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(25916)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1380 = $17;
     break;
    }
    HEAP32[(25904)>>2] = $17;
    $109 = $106 & -2;
    HEAP32[$105>>2] = $109;
    $110 = $17 | 1;
    $111 = ((($16)) + 4|0);
    HEAP32[$111>>2] = $110;
    $112 = (($16) + ($17)|0);
    HEAP32[$112>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (25936 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[6474]|0;
     $38 = $37 & $36;
     HEAP32[6474] = $38;
     $$1 = $16;$$1380 = $17;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre440 = ((($26)) + 8|0);
     $$pre$phi441Z2D = $$pre440;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi441Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi441Z2D>>2] = $24;
    $$1 = $16;$$1380 = $17;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1385 = $63;$$1388 = $59;
      }
     } else {
      $$1385 = $61;$$1388 = $60;
     }
     while(1) {
      $65 = ((($$1385)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1385 = $66;$$1388 = $65;
       continue;
      }
      $68 = ((($$1385)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1385 = $69;$$1388 = $68;
      }
     }
     $71 = ($$1388>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1388>>2] = 0;
      $$3 = $$1385;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1380 = $17;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (26200 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    if ($77) {
     HEAP32[$75>>2] = $$3;
     $cond418 = ($$3|0)==(0|0);
     if ($cond418) {
      $78 = 1 << $74;
      $79 = $78 ^ -1;
      $80 = HEAP32[(25900)>>2]|0;
      $81 = $80 & $79;
      HEAP32[(25900)>>2] = $81;
      $$1 = $16;$$1380 = $17;
      break;
     }
    } else {
     $82 = HEAP32[(25912)>>2]|0;
     $83 = ($46>>>0)<($82>>>0);
     if ($83) {
      _abort();
      // unreachable;
     }
     $84 = ((($46)) + 16|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)==($16|0);
     if ($86) {
      HEAP32[$84>>2] = $$3;
     } else {
      $87 = ((($46)) + 20|0);
      HEAP32[$87>>2] = $$3;
     }
     $88 = ($$3|0)==(0|0);
     if ($88) {
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
    $89 = HEAP32[(25912)>>2]|0;
    $90 = ($$3>>>0)<($89>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($93>>>0)<($89>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1380 = $17;
    } else {
     $101 = HEAP32[(25912)>>2]|0;
     $102 = ($99>>>0)<($101>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $9;
  }
 } while(0);
 $113 = ($$1>>>0)<($10>>>0);
 if (!($113)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(25920)>>2]|0;
  $121 = ($10|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(25908)>>2]|0;
   $123 = (($122) + ($$1380))|0;
   HEAP32[(25908)>>2] = $123;
   HEAP32[(25920)>>2] = $$1;
   $124 = $123 | 1;
   $125 = ((($$1)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = HEAP32[(25916)>>2]|0;
   $127 = ($$1|0)==($126|0);
   if (!($127)) {
    return;
   }
   HEAP32[(25916)>>2] = 0;
   HEAP32[(25904)>>2] = 0;
   return;
  }
  $128 = HEAP32[(25916)>>2]|0;
  $129 = ($10|0)==($128|0);
  if ($129) {
   $130 = HEAP32[(25904)>>2]|0;
   $131 = (($130) + ($$1380))|0;
   HEAP32[(25904)>>2] = $131;
   HEAP32[(25916)>>2] = $$1;
   $132 = $131 | 1;
   $133 = ((($$1)) + 4|0);
   HEAP32[$133>>2] = $132;
   $134 = (($$1) + ($131)|0);
   HEAP32[$134>>2] = $131;
   return;
  }
  $135 = $115 & -8;
  $136 = (($135) + ($$1380))|0;
  $137 = $115 >>> 3;
  $138 = ($115>>>0)<(256);
  do {
   if ($138) {
    $139 = ((($10)) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ((($10)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $137 << 1;
    $144 = (25936 + ($143<<2)|0);
    $145 = ($140|0)==($144|0);
    if (!($145)) {
     $146 = HEAP32[(25912)>>2]|0;
     $147 = ($140>>>0)<($146>>>0);
     if ($147) {
      _abort();
      // unreachable;
     }
     $148 = ((($140)) + 12|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($149|0)==($10|0);
     if (!($150)) {
      _abort();
      // unreachable;
     }
    }
    $151 = ($142|0)==($140|0);
    if ($151) {
     $152 = 1 << $137;
     $153 = $152 ^ -1;
     $154 = HEAP32[6474]|0;
     $155 = $154 & $153;
     HEAP32[6474] = $155;
     break;
    }
    $156 = ($142|0)==($144|0);
    if ($156) {
     $$pre438 = ((($142)) + 8|0);
     $$pre$phi439Z2D = $$pre438;
    } else {
     $157 = HEAP32[(25912)>>2]|0;
     $158 = ($142>>>0)<($157>>>0);
     if ($158) {
      _abort();
      // unreachable;
     }
     $159 = ((($142)) + 8|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==($10|0);
     if ($161) {
      $$pre$phi439Z2D = $159;
     } else {
      _abort();
      // unreachable;
     }
    }
    $162 = ((($140)) + 12|0);
    HEAP32[$162>>2] = $142;
    HEAP32[$$pre$phi439Z2D>>2] = $140;
   } else {
    $163 = ((($10)) + 24|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ((($10)) + 12|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)==($10|0);
    do {
     if ($167) {
      $178 = ((($10)) + 16|0);
      $179 = ((($178)) + 4|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = ($180|0)==(0|0);
      if ($181) {
       $182 = HEAP32[$178>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $$3398 = 0;
        break;
       } else {
        $$1396 = $182;$$1400 = $178;
       }
      } else {
       $$1396 = $180;$$1400 = $179;
      }
      while(1) {
       $184 = ((($$1396)) + 20|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if (!($186)) {
        $$1396 = $185;$$1400 = $184;
        continue;
       }
       $187 = ((($$1396)) + 16|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)==(0|0);
       if ($189) {
        break;
       } else {
        $$1396 = $188;$$1400 = $187;
       }
      }
      $190 = HEAP32[(25912)>>2]|0;
      $191 = ($$1400>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1400>>2] = 0;
       $$3398 = $$1396;
       break;
      }
     } else {
      $168 = ((($10)) + 8|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = HEAP32[(25912)>>2]|0;
      $171 = ($169>>>0)<($170>>>0);
      if ($171) {
       _abort();
       // unreachable;
      }
      $172 = ((($169)) + 12|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($10|0);
      if (!($174)) {
       _abort();
       // unreachable;
      }
      $175 = ((($166)) + 8|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==($10|0);
      if ($177) {
       HEAP32[$172>>2] = $166;
       HEAP32[$175>>2] = $169;
       $$3398 = $166;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $192 = ($164|0)==(0|0);
    if (!($192)) {
     $193 = ((($10)) + 28|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (26200 + ($194<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($10|0)==($196|0);
     if ($197) {
      HEAP32[$195>>2] = $$3398;
      $cond419 = ($$3398|0)==(0|0);
      if ($cond419) {
       $198 = 1 << $194;
       $199 = $198 ^ -1;
       $200 = HEAP32[(25900)>>2]|0;
       $201 = $200 & $199;
       HEAP32[(25900)>>2] = $201;
       break;
      }
     } else {
      $202 = HEAP32[(25912)>>2]|0;
      $203 = ($164>>>0)<($202>>>0);
      if ($203) {
       _abort();
       // unreachable;
      }
      $204 = ((($164)) + 16|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = ($205|0)==($10|0);
      if ($206) {
       HEAP32[$204>>2] = $$3398;
      } else {
       $207 = ((($164)) + 20|0);
       HEAP32[$207>>2] = $$3398;
      }
      $208 = ($$3398|0)==(0|0);
      if ($208) {
       break;
      }
     }
     $209 = HEAP32[(25912)>>2]|0;
     $210 = ($$3398>>>0)<($209>>>0);
     if ($210) {
      _abort();
      // unreachable;
     }
     $211 = ((($$3398)) + 24|0);
     HEAP32[$211>>2] = $164;
     $212 = ((($10)) + 16|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ($213|0)==(0|0);
     do {
      if (!($214)) {
       $215 = ($213>>>0)<($209>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = ((($$3398)) + 16|0);
        HEAP32[$216>>2] = $213;
        $217 = ((($213)) + 24|0);
        HEAP32[$217>>2] = $$3398;
        break;
       }
      }
     } while(0);
     $218 = ((($212)) + 4|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[(25912)>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = ((($$3398)) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = ((($219)) + 24|0);
       HEAP32[$224>>2] = $$3398;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $136 | 1;
  $226 = ((($$1)) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($$1) + ($136)|0);
  HEAP32[$227>>2] = $136;
  $228 = HEAP32[(25916)>>2]|0;
  $229 = ($$1|0)==($228|0);
  if ($229) {
   HEAP32[(25904)>>2] = $136;
   return;
  } else {
   $$2 = $136;
  }
 } else {
  $230 = $115 & -2;
  HEAP32[$114>>2] = $230;
  $231 = $$1380 | 1;
  $232 = ((($$1)) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($$1) + ($$1380)|0);
  HEAP32[$233>>2] = $$1380;
  $$2 = $$1380;
 }
 $234 = $$2 >>> 3;
 $235 = ($$2>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = (25936 + ($236<<2)|0);
  $238 = HEAP32[6474]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[6474] = $242;
   $$pre = ((($237)) + 8|0);
   $$0401 = $237;$$pre$phiZ2D = $$pre;
  } else {
   $243 = ((($237)) + 8|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[(25912)>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$0401 = $244;$$pre$phiZ2D = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $247 = ((($$0401)) + 12|0);
  HEAP32[$247>>2] = $$1;
  $248 = ((($$1)) + 8|0);
  HEAP32[$248>>2] = $$0401;
  $249 = ((($$1)) + 12|0);
  HEAP32[$249>>2] = $237;
  return;
 }
 $250 = $$2 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $$0394 = 0;
 } else {
  $252 = ($$2>>>0)>(16777215);
  if ($252) {
   $$0394 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $$2 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $$0394 = $274;
  }
 }
 $275 = (26200 + ($$0394<<2)|0);
 $276 = ((($$1)) + 28|0);
 HEAP32[$276>>2] = $$0394;
 $277 = ((($$1)) + 16|0);
 $278 = ((($$1)) + 20|0);
 HEAP32[$278>>2] = 0;
 HEAP32[$277>>2] = 0;
 $279 = HEAP32[(25900)>>2]|0;
 $280 = 1 << $$0394;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[(25900)>>2] = $283;
   HEAP32[$275>>2] = $$1;
   $284 = ((($$1)) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = ((($$1)) + 12|0);
   HEAP32[$285>>2] = $$1;
   $286 = ((($$1)) + 8|0);
   HEAP32[$286>>2] = $$1;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($$0394|0)==(31);
   $289 = $$0394 >>> 1;
   $290 = (25 - ($289))|0;
   $291 = $288 ? 0 : $290;
   $292 = $$2 << $291;
   $$0381 = $292;$$0382 = $287;
   while(1) {
    $293 = ((($$0382)) + 4|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $294 & -8;
    $296 = ($295|0)==($$2|0);
    if ($296) {
     label = 130;
     break;
    }
    $297 = $$0381 >>> 31;
    $298 = (((($$0382)) + 16|0) + ($297<<2)|0);
    $299 = $$0381 << 1;
    $300 = HEAP32[$298>>2]|0;
    $301 = ($300|0)==(0|0);
    if ($301) {
     label = 127;
     break;
    } else {
     $$0381 = $299;$$0382 = $300;
    }
   }
   if ((label|0) == 127) {
    $302 = HEAP32[(25912)>>2]|0;
    $303 = ($298>>>0)<($302>>>0);
    if ($303) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$298>>2] = $$1;
     $304 = ((($$1)) + 24|0);
     HEAP32[$304>>2] = $$0382;
     $305 = ((($$1)) + 12|0);
     HEAP32[$305>>2] = $$1;
     $306 = ((($$1)) + 8|0);
     HEAP32[$306>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $307 = ((($$0382)) + 8|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = HEAP32[(25912)>>2]|0;
    $310 = ($308>>>0)>=($309>>>0);
    $not$ = ($$0382>>>0)>=($309>>>0);
    $311 = $310 & $not$;
    if ($311) {
     $312 = ((($308)) + 12|0);
     HEAP32[$312>>2] = $$1;
     HEAP32[$307>>2] = $$1;
     $313 = ((($$1)) + 8|0);
     HEAP32[$313>>2] = $308;
     $314 = ((($$1)) + 12|0);
     HEAP32[$314>>2] = $$0382;
     $315 = ((($$1)) + 24|0);
     HEAP32[$315>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $316 = HEAP32[(25928)>>2]|0;
 $317 = (($316) + -1)|0;
 HEAP32[(25928)>>2] = $317;
 $318 = ($317|0)==(0);
 if ($318) {
  $$0211$in$i = (26352);
 } else {
  return;
 }
 while(1) {
  $$0211$i = HEAP32[$$0211$in$i>>2]|0;
  $319 = ($$0211$i|0)==(0|0);
  $320 = ((($$0211$i)) + 8|0);
  if ($319) {
   break;
  } else {
   $$0211$in$i = $320;
  }
 }
 HEAP32[(25928)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $$ = $7 ? $3 : -1;
   $$0 = $$;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 _memset(($8|0),0,($$0|0))|0;
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1271 = 0, $$1274 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(25912)>>2]|0;
 $7 = $3 & 3;
 $notlhs = ($0>>>0)>=($6>>>0);
 $notrhs = ($7|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $8 = ($0>>>0)<($5>>>0);
 $or$cond3 = $or$cond$not & $8;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($7|0)==(0);
 if ($13) {
  $14 = ($1>>>0)<(256);
  if ($14) {
   $$2 = 0;
   return ($$2|0);
  }
  $15 = (($1) + 4)|0;
  $16 = ($4>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($4) - ($1))|0;
   $18 = HEAP32[(26376)>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $21 = ($4>>>0)<($1>>>0);
 if (!($21)) {
  $22 = (($4) - ($1))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $$2 = $0;
   return ($$2|0);
  }
  $24 = (($0) + ($1)|0);
  $25 = $3 & 1;
  $26 = $25 | $1;
  $27 = $26 | 2;
  HEAP32[$2>>2] = $27;
  $28 = ((($24)) + 4|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = (($24) + ($22)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 1;
  HEAP32[$31>>2] = $33;
  _dispose_chunk($24,$22);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(25920)>>2]|0;
 $35 = ($5|0)==($34|0);
 if ($35) {
  $36 = HEAP32[(25908)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  $41 = $3 & 1;
  $42 = $41 | $1;
  $43 = $42 | 2;
  HEAP32[$2>>2] = $43;
  $44 = ((($40)) + 4|0);
  $45 = $39 | 1;
  HEAP32[$44>>2] = $45;
  HEAP32[(25920)>>2] = $40;
  HEAP32[(25908)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(25916)>>2]|0;
 $47 = ($5|0)==($46|0);
 if ($47) {
  $48 = HEAP32[(25904)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  if ($52) {
   $53 = (($0) + ($1)|0);
   $54 = (($53) + ($51)|0);
   $55 = $3 & 1;
   $56 = $55 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($53)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$54>>2] = $51;
   $60 = ((($54)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $53;$storemerge1 = $51;
  } else {
   $63 = $3 & 1;
   $64 = $63 | $49;
   $65 = $64 | 2;
   HEAP32[$2>>2] = $65;
   $66 = (($0) + ($49)|0);
   $67 = ((($66)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 | 1;
   HEAP32[$67>>2] = $69;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(25904)>>2] = $storemerge1;
  HEAP32[(25916)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $70 = $10 & 2;
 $71 = ($70|0)==(0);
 if (!($71)) {
  $$2 = 0;
  return ($$2|0);
 }
 $72 = $10 & -8;
 $73 = (($72) + ($4))|0;
 $74 = ($73>>>0)<($1>>>0);
 if ($74) {
  $$2 = 0;
  return ($$2|0);
 }
 $75 = (($73) - ($1))|0;
 $76 = $10 >>> 3;
 $77 = ($10>>>0)<(256);
 do {
  if ($77) {
   $78 = ((($5)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($5)) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $76 << 1;
   $83 = (25936 + ($82<<2)|0);
   $84 = ($79|0)==($83|0);
   if (!($84)) {
    $85 = ($79>>>0)<($6>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($79)) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==($5|0);
    if (!($88)) {
     _abort();
     // unreachable;
    }
   }
   $89 = ($81|0)==($79|0);
   if ($89) {
    $90 = 1 << $76;
    $91 = $90 ^ -1;
    $92 = HEAP32[6474]|0;
    $93 = $92 & $91;
    HEAP32[6474] = $93;
    break;
   }
   $94 = ($81|0)==($83|0);
   if ($94) {
    $$pre = ((($81)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $95 = ($81>>>0)<($6>>>0);
    if ($95) {
     _abort();
     // unreachable;
    }
    $96 = ((($81)) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==($5|0);
    if ($98) {
     $$pre$phiZ2D = $96;
    } else {
     _abort();
     // unreachable;
    }
   }
   $99 = ((($79)) + 12|0);
   HEAP32[$99>>2] = $81;
   HEAP32[$$pre$phiZ2D>>2] = $79;
  } else {
   $100 = ((($5)) + 24|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($5)) + 12|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==($5|0);
   do {
    if ($104) {
     $114 = ((($5)) + 16|0);
     $115 = ((($114)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(0|0);
     if ($117) {
      $118 = HEAP32[$114>>2]|0;
      $119 = ($118|0)==(0|0);
      if ($119) {
       $$3 = 0;
       break;
      } else {
       $$1271 = $118;$$1274 = $114;
      }
     } else {
      $$1271 = $116;$$1274 = $115;
     }
     while(1) {
      $120 = ((($$1271)) + 20|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if (!($122)) {
       $$1271 = $121;$$1274 = $120;
       continue;
      }
      $123 = ((($$1271)) + 16|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($124|0)==(0|0);
      if ($125) {
       break;
      } else {
       $$1271 = $124;$$1274 = $123;
      }
     }
     $126 = ($$1274>>>0)<($6>>>0);
     if ($126) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1274>>2] = 0;
      $$3 = $$1271;
      break;
     }
    } else {
     $105 = ((($5)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106>>>0)<($6>>>0);
     if ($107) {
      _abort();
      // unreachable;
     }
     $108 = ((($106)) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($5|0);
     if (!($110)) {
      _abort();
      // unreachable;
     }
     $111 = ((($103)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==($5|0);
     if ($113) {
      HEAP32[$108>>2] = $103;
      HEAP32[$111>>2] = $106;
      $$3 = $103;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $127 = ($101|0)==(0|0);
   if (!($127)) {
    $128 = ((($5)) + 28|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (26200 + ($129<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($5|0)==($131|0);
    if ($132) {
     HEAP32[$130>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $133 = 1 << $129;
      $134 = $133 ^ -1;
      $135 = HEAP32[(25900)>>2]|0;
      $136 = $135 & $134;
      HEAP32[(25900)>>2] = $136;
      break;
     }
    } else {
     $137 = HEAP32[(25912)>>2]|0;
     $138 = ($101>>>0)<($137>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($101)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($5|0);
     if ($141) {
      HEAP32[$139>>2] = $$3;
     } else {
      $142 = ((($101)) + 20|0);
      HEAP32[$142>>2] = $$3;
     }
     $143 = ($$3|0)==(0|0);
     if ($143) {
      break;
     }
    }
    $144 = HEAP32[(25912)>>2]|0;
    $145 = ($$3>>>0)<($144>>>0);
    if ($145) {
     _abort();
     // unreachable;
    }
    $146 = ((($$3)) + 24|0);
    HEAP32[$146>>2] = $101;
    $147 = ((($5)) + 16|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(0|0);
    do {
     if (!($149)) {
      $150 = ($148>>>0)<($144>>>0);
      if ($150) {
       _abort();
       // unreachable;
      } else {
       $151 = ((($$3)) + 16|0);
       HEAP32[$151>>2] = $148;
       $152 = ((($148)) + 24|0);
       HEAP32[$152>>2] = $$3;
       break;
      }
     }
    } while(0);
    $153 = ((($147)) + 4|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($154|0)==(0|0);
    if (!($155)) {
     $156 = HEAP32[(25912)>>2]|0;
     $157 = ($154>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     } else {
      $158 = ((($$3)) + 20|0);
      HEAP32[$158>>2] = $154;
      $159 = ((($154)) + 24|0);
      HEAP32[$159>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $160 = ($75>>>0)<(16);
 if ($160) {
  $161 = $3 & 1;
  $162 = $73 | $161;
  $163 = $162 | 2;
  HEAP32[$2>>2] = $163;
  $164 = (($0) + ($73)|0);
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 | 1;
  HEAP32[$165>>2] = $167;
  $$2 = $0;
  return ($$2|0);
 } else {
  $168 = (($0) + ($1)|0);
  $169 = $3 & 1;
  $170 = $169 | $1;
  $171 = $170 | 2;
  HEAP32[$2>>2] = $171;
  $172 = ((($168)) + 4|0);
  $173 = $75 | 3;
  HEAP32[$172>>2] = $173;
  $174 = (($168) + ($75)|0);
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $176 | 1;
  HEAP32[$175>>2] = $177;
  _dispose_chunk($168,$75);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0417 = 0, $$0418 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1427 = 0, $$1431 = 0, $$1435 = 0, $$2 = 0, $$3 = 0, $$3433 = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(25912)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(25916)>>2]|0;
   $16 = ($11|0)==($15|0);
   if ($16) {
    $101 = ((($2)) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 & 3;
    $104 = ($103|0)==(3);
    if (!($104)) {
     $$1 = $11;$$1416 = $12;
     break;
    }
    HEAP32[(25904)>>2] = $12;
    $105 = $102 & -2;
    HEAP32[$101>>2] = $105;
    $106 = $12 | 1;
    $107 = ((($11)) + 4|0);
    HEAP32[$107>>2] = $106;
    $108 = (($11) + ($12)|0);
    HEAP32[$108>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (25936 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($20>>>0)<($13>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[6474]|0;
     $34 = $33 & $32;
     HEAP32[6474] = $34;
     $$1 = $11;$$1416 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre23 = ((($22)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $36 = ($22>>>0)<($13>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi24Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi24Z2D>>2] = $20;
    $$1 = $11;$$1416 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1424 = $59;$$1427 = $55;
      }
     } else {
      $$1424 = $57;$$1427 = $56;
     }
     while(1) {
      $61 = ((($$1424)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       $$1424 = $62;$$1427 = $61;
       continue;
      }
      $64 = ((($$1424)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if ($66) {
       break;
      } else {
       $$1424 = $65;$$1427 = $64;
      }
     }
     $67 = ($$1427>>>0)<($13>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1427>>2] = 0;
      $$3 = $$1424;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47>>>0)<($13>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1416 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (26200 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($11|0)==($72|0);
    if ($73) {
     HEAP32[$71>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $74 = 1 << $70;
      $75 = $74 ^ -1;
      $76 = HEAP32[(25900)>>2]|0;
      $77 = $76 & $75;
      HEAP32[(25900)>>2] = $77;
      $$1 = $11;$$1416 = $12;
      break;
     }
    } else {
     $78 = HEAP32[(25912)>>2]|0;
     $79 = ($42>>>0)<($78>>>0);
     if ($79) {
      _abort();
      // unreachable;
     }
     $80 = ((($42)) + 16|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)==($11|0);
     if ($82) {
      HEAP32[$80>>2] = $$3;
     } else {
      $83 = ((($42)) + 20|0);
      HEAP32[$83>>2] = $$3;
     }
     $84 = ($$3|0)==(0|0);
     if ($84) {
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
    $85 = HEAP32[(25912)>>2]|0;
    $86 = ($$3>>>0)<($85>>>0);
    if ($86) {
     _abort();
     // unreachable;
    }
    $87 = ((($$3)) + 24|0);
    HEAP32[$87>>2] = $42;
    $88 = ((($11)) + 16|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(0|0);
    do {
     if (!($90)) {
      $91 = ($89>>>0)<($85>>>0);
      if ($91) {
       _abort();
       // unreachable;
      } else {
       $92 = ((($$3)) + 16|0);
       HEAP32[$92>>2] = $89;
       $93 = ((($89)) + 24|0);
       HEAP32[$93>>2] = $$3;
       break;
      }
     }
    } while(0);
    $94 = ((($88)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0|0);
    if ($96) {
     $$1 = $11;$$1416 = $12;
    } else {
     $97 = HEAP32[(25912)>>2]|0;
     $98 = ($95>>>0)<($97>>>0);
     if ($98) {
      _abort();
      // unreachable;
     } else {
      $99 = ((($$3)) + 20|0);
      HEAP32[$99>>2] = $95;
      $100 = ((($95)) + 24|0);
      HEAP32[$100>>2] = $$3;
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1416 = $1;
  }
 } while(0);
 $109 = HEAP32[(25912)>>2]|0;
 $110 = ($2>>>0)<($109>>>0);
 if ($110) {
  _abort();
  // unreachable;
 }
 $111 = ((($2)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 2;
 $114 = ($113|0)==(0);
 if ($114) {
  $115 = HEAP32[(25920)>>2]|0;
  $116 = ($2|0)==($115|0);
  if ($116) {
   $117 = HEAP32[(25908)>>2]|0;
   $118 = (($117) + ($$1416))|0;
   HEAP32[(25908)>>2] = $118;
   HEAP32[(25920)>>2] = $$1;
   $119 = $118 | 1;
   $120 = ((($$1)) + 4|0);
   HEAP32[$120>>2] = $119;
   $121 = HEAP32[(25916)>>2]|0;
   $122 = ($$1|0)==($121|0);
   if (!($122)) {
    return;
   }
   HEAP32[(25916)>>2] = 0;
   HEAP32[(25904)>>2] = 0;
   return;
  }
  $123 = HEAP32[(25916)>>2]|0;
  $124 = ($2|0)==($123|0);
  if ($124) {
   $125 = HEAP32[(25904)>>2]|0;
   $126 = (($125) + ($$1416))|0;
   HEAP32[(25904)>>2] = $126;
   HEAP32[(25916)>>2] = $$1;
   $127 = $126 | 1;
   $128 = ((($$1)) + 4|0);
   HEAP32[$128>>2] = $127;
   $129 = (($$1) + ($126)|0);
   HEAP32[$129>>2] = $126;
   return;
  }
  $130 = $112 & -8;
  $131 = (($130) + ($$1416))|0;
  $132 = $112 >>> 3;
  $133 = ($112>>>0)<(256);
  do {
   if ($133) {
    $134 = ((($2)) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ((($2)) + 12|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $132 << 1;
    $139 = (25936 + ($138<<2)|0);
    $140 = ($135|0)==($139|0);
    if (!($140)) {
     $141 = ($135>>>0)<($109>>>0);
     if ($141) {
      _abort();
      // unreachable;
     }
     $142 = ((($135)) + 12|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($143|0)==($2|0);
     if (!($144)) {
      _abort();
      // unreachable;
     }
    }
    $145 = ($137|0)==($135|0);
    if ($145) {
     $146 = 1 << $132;
     $147 = $146 ^ -1;
     $148 = HEAP32[6474]|0;
     $149 = $148 & $147;
     HEAP32[6474] = $149;
     break;
    }
    $150 = ($137|0)==($139|0);
    if ($150) {
     $$pre21 = ((($137)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $151 = ($137>>>0)<($109>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = ((($137)) + 8|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($153|0)==($2|0);
     if ($154) {
      $$pre$phi22Z2D = $152;
     } else {
      _abort();
      // unreachable;
     }
    }
    $155 = ((($135)) + 12|0);
    HEAP32[$155>>2] = $137;
    HEAP32[$$pre$phi22Z2D>>2] = $135;
   } else {
    $156 = ((($2)) + 24|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ((($2)) + 12|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = ($159|0)==($2|0);
    do {
     if ($160) {
      $170 = ((($2)) + 16|0);
      $171 = ((($170)) + 4|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==(0|0);
      if ($173) {
       $174 = HEAP32[$170>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $$3433 = 0;
        break;
       } else {
        $$1431 = $174;$$1435 = $170;
       }
      } else {
       $$1431 = $172;$$1435 = $171;
      }
      while(1) {
       $176 = ((($$1431)) + 20|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if (!($178)) {
        $$1431 = $177;$$1435 = $176;
        continue;
       }
       $179 = ((($$1431)) + 16|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = ($180|0)==(0|0);
       if ($181) {
        break;
       } else {
        $$1431 = $180;$$1435 = $179;
       }
      }
      $182 = ($$1435>>>0)<($109>>>0);
      if ($182) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1435>>2] = 0;
       $$3433 = $$1431;
       break;
      }
     } else {
      $161 = ((($2)) + 8|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162>>>0)<($109>>>0);
      if ($163) {
       _abort();
       // unreachable;
      }
      $164 = ((($162)) + 12|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($2|0);
      if (!($166)) {
       _abort();
       // unreachable;
      }
      $167 = ((($159)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==($2|0);
      if ($169) {
       HEAP32[$164>>2] = $159;
       HEAP32[$167>>2] = $162;
       $$3433 = $159;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $183 = ($157|0)==(0|0);
    if (!($183)) {
     $184 = ((($2)) + 28|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = (26200 + ($185<<2)|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ($2|0)==($187|0);
     if ($188) {
      HEAP32[$186>>2] = $$3433;
      $cond16 = ($$3433|0)==(0|0);
      if ($cond16) {
       $189 = 1 << $185;
       $190 = $189 ^ -1;
       $191 = HEAP32[(25900)>>2]|0;
       $192 = $191 & $190;
       HEAP32[(25900)>>2] = $192;
       break;
      }
     } else {
      $193 = HEAP32[(25912)>>2]|0;
      $194 = ($157>>>0)<($193>>>0);
      if ($194) {
       _abort();
       // unreachable;
      }
      $195 = ((($157)) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ($196|0)==($2|0);
      if ($197) {
       HEAP32[$195>>2] = $$3433;
      } else {
       $198 = ((($157)) + 20|0);
       HEAP32[$198>>2] = $$3433;
      }
      $199 = ($$3433|0)==(0|0);
      if ($199) {
       break;
      }
     }
     $200 = HEAP32[(25912)>>2]|0;
     $201 = ($$3433>>>0)<($200>>>0);
     if ($201) {
      _abort();
      // unreachable;
     }
     $202 = ((($$3433)) + 24|0);
     HEAP32[$202>>2] = $157;
     $203 = ((($2)) + 16|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = ($204|0)==(0|0);
     do {
      if (!($205)) {
       $206 = ($204>>>0)<($200>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = ((($$3433)) + 16|0);
        HEAP32[$207>>2] = $204;
        $208 = ((($204)) + 24|0);
        HEAP32[$208>>2] = $$3433;
        break;
       }
      }
     } while(0);
     $209 = ((($203)) + 4|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[(25912)>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = ((($$3433)) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = ((($210)) + 24|0);
       HEAP32[$215>>2] = $$3433;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $131 | 1;
  $217 = ((($$1)) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$1) + ($131)|0);
  HEAP32[$218>>2] = $131;
  $219 = HEAP32[(25916)>>2]|0;
  $220 = ($$1|0)==($219|0);
  if ($220) {
   HEAP32[(25904)>>2] = $131;
   return;
  } else {
   $$2 = $131;
  }
 } else {
  $221 = $112 & -2;
  HEAP32[$111>>2] = $221;
  $222 = $$1416 | 1;
  $223 = ((($$1)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$1) + ($$1416)|0);
  HEAP32[$224>>2] = $$1416;
  $$2 = $$1416;
 }
 $225 = $$2 >>> 3;
 $226 = ($$2>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = (25936 + ($227<<2)|0);
  $229 = HEAP32[6474]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[6474] = $233;
   $$pre = ((($228)) + 8|0);
   $$0436 = $228;$$pre$phiZ2D = $$pre;
  } else {
   $234 = ((($228)) + 8|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[(25912)>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$0436 = $235;$$pre$phiZ2D = $234;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $238 = ((($$0436)) + 12|0);
  HEAP32[$238>>2] = $$1;
  $239 = ((($$1)) + 8|0);
  HEAP32[$239>>2] = $$0436;
  $240 = ((($$1)) + 12|0);
  HEAP32[$240>>2] = $228;
  return;
 }
 $241 = $$2 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $$0429 = 0;
 } else {
  $243 = ($$2>>>0)>(16777215);
  if ($243) {
   $$0429 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$2 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $$0429 = $265;
  }
 }
 $266 = (26200 + ($$0429<<2)|0);
 $267 = ((($$1)) + 28|0);
 HEAP32[$267>>2] = $$0429;
 $268 = ((($$1)) + 16|0);
 $269 = ((($$1)) + 20|0);
 HEAP32[$269>>2] = 0;
 HEAP32[$268>>2] = 0;
 $270 = HEAP32[(25900)>>2]|0;
 $271 = 1 << $$0429;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[(25900)>>2] = $274;
  HEAP32[$266>>2] = $$1;
  $275 = ((($$1)) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = ((($$1)) + 12|0);
  HEAP32[$276>>2] = $$1;
  $277 = ((($$1)) + 8|0);
  HEAP32[$277>>2] = $$1;
  return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($$0429|0)==(31);
 $280 = $$0429 >>> 1;
 $281 = (25 - ($280))|0;
 $282 = $279 ? 0 : $281;
 $283 = $$2 << $282;
 $$0417 = $283;$$0418 = $278;
 while(1) {
  $284 = ((($$0418)) + 4|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = $285 & -8;
  $287 = ($286|0)==($$2|0);
  if ($287) {
   label = 127;
   break;
  }
  $288 = $$0417 >>> 31;
  $289 = (((($$0418)) + 16|0) + ($288<<2)|0);
  $290 = $$0417 << 1;
  $291 = HEAP32[$289>>2]|0;
  $292 = ($291|0)==(0|0);
  if ($292) {
   label = 124;
   break;
  } else {
   $$0417 = $290;$$0418 = $291;
  }
 }
 if ((label|0) == 124) {
  $293 = HEAP32[(25912)>>2]|0;
  $294 = ($289>>>0)<($293>>>0);
  if ($294) {
   _abort();
   // unreachable;
  }
  HEAP32[$289>>2] = $$1;
  $295 = ((($$1)) + 24|0);
  HEAP32[$295>>2] = $$0418;
  $296 = ((($$1)) + 12|0);
  HEAP32[$296>>2] = $$1;
  $297 = ((($$1)) + 8|0);
  HEAP32[$297>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $298 = ((($$0418)) + 8|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = HEAP32[(25912)>>2]|0;
  $301 = ($299>>>0)>=($300>>>0);
  $not$ = ($$0418>>>0)>=($300>>>0);
  $302 = $301 & $not$;
  if (!($302)) {
   _abort();
   // unreachable;
  }
  $303 = ((($299)) + 12|0);
  HEAP32[$303>>2] = $$1;
  HEAP32[$298>>2] = $$1;
  $304 = ((($$1)) + 8|0);
  HEAP32[$304>>2] = $299;
  $305 = ((($$1)) + 12|0);
  HEAP32[$305>>2] = $$0418;
  $306 = ((($$1)) + 24|0);
  HEAP32[$306>>2] = 0;
  return;
 }
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _pthread_mutex_lock(x) {
    x = x | 0;
    return 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _pthread_cond_broadcast(x) {
    x = x | 0;
    return 0;
}
function _pthread_mutex_unlock(x) {
    x = x | 0;
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _llvm_bswap_i16(x) {
    x = x|0;
    return (((x&0xff)<<8) | ((x>>8)&0xff))|0;
}
function _pthread_self() {
    return 0;
}

  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&127](a1|0,a2|0,a3|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&127](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&63](a1|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&63]();
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&31](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&63](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1(p0) {
 p0 = p0|0; nullFunc_vi(1);
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(2);
}
function b3(p0) {
 p0 = p0|0; nullFunc_ii(3);return 0;
}
function b4() {
 ; nullFunc_v(4);
}
function b5(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(5);return 0;
}
function b6(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(6);return 0;
}
function b7(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(7);return 0;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,_fd_read,_fd_write,_fd_seek,b0,b0,b0,b0,b0,b0,_mem_read,_mem_seek,b0,b0,b0,b0,b0,b0,b0,b0,_net_read,_net_seek,b0,b0,b0,b0
,___stdio_write,___stdio_seek,___stdout_write,_sn_write,_zcalloc,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,___stdio_read,_do_read,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_vi = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_cram_external_decode_free,b1,b1,_cram_beta_decode_free,b1,_cram_subexp_decode_free,b1,_cram_gamma_decode_free,_cram_huffman_decode_free,b1,b1,b1,b1,b1,b1,b1,_cram_byte_array_len_decode_free,b1
,b1,_cram_byte_array_stop_decode_free,b1,b1,_cleanup_387,_cleanup_382,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,_zcfree,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_ii = [b3,b3,b3,b3,b3,b3,b3,_fd_flush,_fd_close,b3,_hfile_always_local,b3,b3,b3,b3,_mem_close,b3,b3,b3,b3,b3,b3,b3,b3,b3,_net_close,b3,_hfile_always_remote,___stdio_close
,b3,b3,b3,b3,b3,b3,_hfile_plugin_init_net,b3,_mt_worker,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,_t_pool_worker,_cram_decode_slice_thread,b3];
var FUNCTION_TABLE_v = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,_hfile_exit,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_cram_external_decode_init,_cram_huffman_decode_init,_cram_byte_array_len_decode_init,_cram_byte_array_stop_decode_init,_cram_beta_decode_init,_cram_subexp_decode_init,_cram_gamma_decode_init,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_iii = [b6,_deflate_stored,_deflate_fast,_deflate_slow,b6,b6,b6,b6,b6,_hopen_unknown_scheme,b6,_hopen_mem,_hopen_fd_fileuri,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_hopen_net,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_code_sort,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,_cram_external_decode_int,_cram_external_decode_char,_cram_external_decode_block,b7,_cram_beta_decode_int,_cram_beta_decode_char,b7,_cram_subexp_decode,b7,_cram_gamma_decode,b7,b7,_cram_huffman_decode_null,b7,_cram_huffman_decode_char0,_cram_huffman_decode_char,_cram_huffman_decode_int0,_cram_huffman_decode_int,_cram_byte_array_len_decode,b7,_cram_byte_array_stop_decode_block
,_cram_byte_array_stop_decode_char,b7,b7,b7,b7];

  return { _hts_open: _hts_open, ___udivdi3: ___udivdi3, _bitshift64Lshr: _bitshift64Lshr, ___udivmoddi4: ___udivmoddi4, _bitshift64Ashr: _bitshift64Ashr, _memset: _memset, _sbrk: _sbrk, _memcpy: _memcpy, _llvm_bswap_i32: _llvm_bswap_i32, ___muldi3: ___muldi3, _sam_read1: _sam_read1, _bitshift64Shl: _bitshift64Shl, ___uremdi3: ___uremdi3, _llvm_cttz_i32: _llvm_cttz_i32, _i64Subtract: _i64Subtract, _ntohs: _ntohs, _htonl: _htonl, _i64Add: _i64Add, _pthread_self: _pthread_self, _pthread_mutex_unlock: _pthread_mutex_unlock, _bam_aux_get: _bam_aux_get, _llvm_bswap_i16: _llvm_bswap_i16, _bam_aux2A: _bam_aux2A, _htons: _htons, _pthread_cond_broadcast: _pthread_cond_broadcast, ___errno_location: ___errno_location, ___muldsi3: ___muldsi3, _free: _free, _memmove: _memmove, _malloc: _malloc, _pthread_mutex_lock: _pthread_mutex_lock, _bam_init1: _bam_init1, _sam_hdr_read: _sam_hdr_read, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__hts_open = asm["_hts_open"]; asm["_hts_open"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__hts_open.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__ntohs = asm["_ntohs"]; asm["_ntohs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ntohs.apply(null, arguments);
};

var real__pthread_cond_broadcast = asm["_pthread_cond_broadcast"]; asm["_pthread_cond_broadcast"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_cond_broadcast.apply(null, arguments);
};

var real__bitshift64Ashr = asm["_bitshift64Ashr"]; asm["_bitshift64Ashr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Ashr.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sbrk.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldi3.apply(null, arguments);
};

var real__sam_read1 = asm["_sam_read1"]; asm["_sam_read1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sam_read1.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real__htonl = asm["_htonl"]; asm["_htonl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__htonl.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__pthread_self = asm["_pthread_self"]; asm["_pthread_self"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_self.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__bam_aux_get = asm["_bam_aux_get"]; asm["_bam_aux_get"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bam_aux_get.apply(null, arguments);
};

var real__llvm_bswap_i16 = asm["_llvm_bswap_i16"]; asm["_llvm_bswap_i16"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i16.apply(null, arguments);
};

var real__bam_aux2A = asm["_bam_aux2A"]; asm["_bam_aux2A"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bam_aux2A.apply(null, arguments);
};

var real__htons = asm["_htons"]; asm["_htons"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__htons.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real____muldsi3 = asm["___muldsi3"]; asm["___muldsi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldsi3.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_mutex_lock.apply(null, arguments);
};

var real__bam_init1 = asm["_bam_init1"]; asm["_bam_init1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bam_init1.apply(null, arguments);
};

var real__sam_hdr_read = asm["_sam_hdr_read"]; asm["_sam_hdr_read"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sam_hdr_read.apply(null, arguments);
};
var _hts_open = Module["_hts_open"] = asm["_hts_open"];
var _memset = Module["_memset"] = asm["_memset"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _ntohs = Module["_ntohs"] = asm["_ntohs"];
var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = asm["_pthread_cond_broadcast"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var _sam_read1 = Module["_sam_read1"] = asm["_sam_read1"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var _htonl = Module["_htonl"] = asm["_htonl"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _bam_aux_get = Module["_bam_aux_get"] = asm["_bam_aux_get"];
var _llvm_bswap_i16 = Module["_llvm_bswap_i16"] = asm["_llvm_bswap_i16"];
var _bam_aux2A = Module["_bam_aux2A"] = asm["_bam_aux2A"];
var _htons = Module["_htons"] = asm["_htons"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _bam_init1 = Module["_bam_init1"] = asm["_bam_init1"];
var _sam_hdr_read = Module["_sam_hdr_read"] = asm["_sam_hdr_read"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



    }
});

